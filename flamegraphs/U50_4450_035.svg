<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="79777"><g><title>_int_free (8 samples, 0.01%)</title><rect x="0.0263%" y="789" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="8"/><text x="0.2763%" y="799.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (18 samples, 0.02%)</title><rect x="0.0464%" y="789" width="0.0226%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="18"/><text x="0.2964%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.03%)</title><rect x="0.0689%" y="789" width="0.0276%" height="15" fill="rgb(221,193,54)" fg:x="55" fg:w="22"/><text x="0.3189%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (9 samples, 0.01%)</title><rect x="0.1015%" y="789" width="0.0113%" height="15" fill="rgb(248,212,6)" fg:x="81" fg:w="9"/><text x="0.3515%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (8 samples, 0.01%)</title><rect x="0.1366%" y="741" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="109" fg:w="8"/><text x="0.3866%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (8 samples, 0.01%)</title><rect x="0.1366%" y="725" width="0.0100%" height="15" fill="rgb(232,128,0)" fg:x="109" fg:w="8"/><text x="0.3866%" y="735.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.1366%" y="709" width="0.0100%" height="15" fill="rgb(207,160,47)" fg:x="109" fg:w="8"/><text x="0.3866%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (65 samples, 0.08%)</title><rect x="0.1191%" y="757" width="0.0815%" height="15" fill="rgb(228,23,34)" fg:x="95" fg:w="65"/><text x="0.3691%" y="767.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (43 samples, 0.05%)</title><rect x="0.1467%" y="741" width="0.0539%" height="15" fill="rgb(218,30,26)" fg:x="117" fg:w="43"/><text x="0.3967%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (43 samples, 0.05%)</title><rect x="0.1467%" y="725" width="0.0539%" height="15" fill="rgb(220,122,19)" fg:x="117" fg:w="43"/><text x="0.3967%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (43 samples, 0.05%)</title><rect x="0.1467%" y="709" width="0.0539%" height="15" fill="rgb(250,228,42)" fg:x="117" fg:w="43"/><text x="0.3967%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (43 samples, 0.05%)</title><rect x="0.1467%" y="693" width="0.0539%" height="15" fill="rgb(240,193,28)" fg:x="117" fg:w="43"/><text x="0.3967%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (43 samples, 0.05%)</title><rect x="0.1467%" y="677" width="0.0539%" height="15" fill="rgb(216,20,37)" fg:x="117" fg:w="43"/><text x="0.3967%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (43 samples, 0.05%)</title><rect x="0.1467%" y="661" width="0.0539%" height="15" fill="rgb(206,188,39)" fg:x="117" fg:w="43"/><text x="0.3967%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (15 samples, 0.02%)</title><rect x="0.2006%" y="757" width="0.0188%" height="15" fill="rgb(217,207,13)" fg:x="160" fg:w="15"/><text x="0.4506%" y="767.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (10 samples, 0.01%)</title><rect x="0.2068%" y="741" width="0.0125%" height="15" fill="rgb(231,73,38)" fg:x="165" fg:w="10"/><text x="0.4568%" y="751.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (10 samples, 0.01%)</title><rect x="0.2068%" y="725" width="0.0125%" height="15" fill="rgb(225,20,46)" fg:x="165" fg:w="10"/><text x="0.4568%" y="735.50"></text></g><g><title>[anon] (163 samples, 0.20%)</title><rect x="0.0163%" y="805" width="0.2043%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="163"/><text x="0.2663%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (86 samples, 0.11%)</title><rect x="0.1128%" y="789" width="0.1078%" height="15" fill="rgb(221,200,47)" fg:x="90" fg:w="86"/><text x="0.3628%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (86 samples, 0.11%)</title><rect x="0.1128%" y="773" width="0.1078%" height="15" fill="rgb(226,26,5)" fg:x="90" fg:w="86"/><text x="0.3628%" y="783.50"></text></g><g><title>__GI___libc_free (17 samples, 0.02%)</title><rect x="0.2269%" y="789" width="0.0213%" height="15" fill="rgb(249,33,26)" fg:x="181" fg:w="17"/><text x="0.4769%" y="799.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.04%)</title><rect x="0.2482%" y="789" width="0.0376%" height="15" fill="rgb(235,183,28)" fg:x="198" fg:w="30"/><text x="0.4982%" y="799.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="0.2921%" y="789" width="0.0188%" height="15" fill="rgb(221,5,38)" fg:x="233" fg:w="15"/><text x="0.5421%" y="799.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="0.3109%" y="789" width="0.0100%" height="15" fill="rgb(247,18,42)" fg:x="248" fg:w="8"/><text x="0.5609%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.03%)</title><rect x="0.3472%" y="789" width="0.0301%" height="15" fill="rgb(241,131,45)" fg:x="277" fg:w="24"/><text x="0.5972%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.02%)</title><rect x="0.3773%" y="789" width="0.0238%" height="15" fill="rgb(249,31,29)" fg:x="301" fg:w="19"/><text x="0.6273%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (19 samples, 0.02%)</title><rect x="0.3773%" y="773" width="0.0238%" height="15" fill="rgb(225,111,53)" fg:x="301" fg:w="19"/><text x="0.6273%" y="783.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (11 samples, 0.01%)</title><rect x="0.4049%" y="789" width="0.0138%" height="15" fill="rgb(238,160,17)" fg:x="323" fg:w="11"/><text x="0.6549%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (90 samples, 0.11%)</title><rect x="0.4187%" y="789" width="0.1128%" height="15" fill="rgb(214,148,48)" fg:x="334" fg:w="90"/><text x="0.6687%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (40 samples, 0.05%)</title><rect x="0.4813%" y="773" width="0.0501%" height="15" fill="rgb(232,36,49)" fg:x="384" fg:w="40"/><text x="0.7313%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (40 samples, 0.05%)</title><rect x="0.4813%" y="757" width="0.0501%" height="15" fill="rgb(209,103,24)" fg:x="384" fg:w="40"/><text x="0.7313%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (40 samples, 0.05%)</title><rect x="0.4813%" y="741" width="0.0501%" height="15" fill="rgb(229,88,8)" fg:x="384" fg:w="40"/><text x="0.7313%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (40 samples, 0.05%)</title><rect x="0.4813%" y="725" width="0.0501%" height="15" fill="rgb(213,181,19)" fg:x="384" fg:w="40"/><text x="0.7313%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (18 samples, 0.02%)</title><rect x="0.5315%" y="789" width="0.0226%" height="15" fill="rgb(254,191,54)" fg:x="424" fg:w="18"/><text x="0.7815%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (12 samples, 0.02%)</title><rect x="0.5390%" y="773" width="0.0150%" height="15" fill="rgb(241,83,37)" fg:x="430" fg:w="12"/><text x="0.7890%" y="783.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (85 samples, 0.11%)</title><rect x="0.5540%" y="789" width="0.1065%" height="15" fill="rgb(233,36,39)" fg:x="442" fg:w="85"/><text x="0.8040%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (15 samples, 0.02%)</title><rect x="0.6606%" y="789" width="0.0188%" height="15" fill="rgb(226,3,54)" fg:x="527" fg:w="15"/><text x="0.9106%" y="799.50"></text></g><g><title>[unknown] (372 samples, 0.47%)</title><rect x="0.2269%" y="805" width="0.4663%" height="15" fill="rgb(245,192,40)" fg:x="181" fg:w="372"/><text x="0.4769%" y="815.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (8 samples, 0.01%)</title><rect x="0.7471%" y="549" width="0.0100%" height="15" fill="rgb(238,167,29)" fg:x="596" fg:w="8"/><text x="0.9971%" y="559.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (8 samples, 0.01%)</title><rect x="0.7471%" y="533" width="0.0100%" height="15" fill="rgb(232,182,51)" fg:x="596" fg:w="8"/><text x="0.9971%" y="543.50"></text></g><g><title>_int_free (17 samples, 0.02%)</title><rect x="0.7772%" y="421" width="0.0213%" height="15" fill="rgb(231,60,39)" fg:x="620" fg:w="17"/><text x="1.0272%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.04%)</title><rect x="0.7696%" y="517" width="0.0364%" height="15" fill="rgb(208,69,12)" fg:x="614" fg:w="29"/><text x="1.0196%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.04%)</title><rect x="0.7696%" y="501" width="0.0364%" height="15" fill="rgb(235,93,37)" fg:x="614" fg:w="29"/><text x="1.0196%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.04%)</title><rect x="0.7696%" y="485" width="0.0364%" height="15" fill="rgb(213,116,39)" fg:x="614" fg:w="29"/><text x="1.0196%" y="495.50"></text></g><g><title>__rdl_dealloc (29 samples, 0.04%)</title><rect x="0.7696%" y="469" width="0.0364%" height="15" fill="rgb(222,207,29)" fg:x="614" fg:w="29"/><text x="1.0196%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (29 samples, 0.04%)</title><rect x="0.7696%" y="453" width="0.0364%" height="15" fill="rgb(206,96,30)" fg:x="614" fg:w="29"/><text x="1.0196%" y="463.50"></text></g><g><title>__GI___libc_free (28 samples, 0.04%)</title><rect x="0.7709%" y="437" width="0.0351%" height="15" fill="rgb(218,138,4)" fg:x="615" fg:w="28"/><text x="1.0209%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (30 samples, 0.04%)</title><rect x="0.7696%" y="549" width="0.0376%" height="15" fill="rgb(250,191,14)" fg:x="614" fg:w="30"/><text x="1.0196%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (30 samples, 0.04%)</title><rect x="0.7696%" y="533" width="0.0376%" height="15" fill="rgb(239,60,40)" fg:x="614" fg:w="30"/><text x="1.0196%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (25 samples, 0.03%)</title><rect x="0.8110%" y="549" width="0.0313%" height="15" fill="rgb(206,27,48)" fg:x="647" fg:w="25"/><text x="1.0610%" y="559.50"></text></g><g><title>__rdl_alloc (70 samples, 0.09%)</title><rect x="2.0068%" y="373" width="0.0877%" height="15" fill="rgb(225,35,8)" fg:x="1601" fg:w="70"/><text x="2.2568%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (69 samples, 0.09%)</title><rect x="2.0081%" y="357" width="0.0865%" height="15" fill="rgb(250,213,24)" fg:x="1602" fg:w="69"/><text x="2.2581%" y="367.50"></text></g><g><title>__GI___libc_malloc (69 samples, 0.09%)</title><rect x="2.0081%" y="341" width="0.0865%" height="15" fill="rgb(247,123,22)" fg:x="1602" fg:w="69"/><text x="2.2581%" y="351.50"></text></g><g><title>tcache_get (48 samples, 0.06%)</title><rect x="2.0344%" y="325" width="0.0602%" height="15" fill="rgb(231,138,38)" fg:x="1623" fg:w="48"/><text x="2.2844%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.10%)</title><rect x="2.0068%" y="421" width="0.0953%" height="15" fill="rgb(231,145,46)" fg:x="1601" fg:w="76"/><text x="2.2568%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.10%)</title><rect x="2.0068%" y="405" width="0.0953%" height="15" fill="rgb(251,118,11)" fg:x="1601" fg:w="76"/><text x="2.2568%" y="415.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.10%)</title><rect x="2.0068%" y="389" width="0.0953%" height="15" fill="rgb(217,147,25)" fg:x="1601" fg:w="76"/><text x="2.2568%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (85 samples, 0.11%)</title><rect x="1.9968%" y="469" width="0.1065%" height="15" fill="rgb(247,81,37)" fg:x="1593" fg:w="85"/><text x="2.2468%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (85 samples, 0.11%)</title><rect x="1.9968%" y="453" width="0.1065%" height="15" fill="rgb(209,12,38)" fg:x="1593" fg:w="85"/><text x="2.2468%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (85 samples, 0.11%)</title><rect x="1.9968%" y="437" width="0.1065%" height="15" fill="rgb(227,1,9)" fg:x="1593" fg:w="85"/><text x="2.2468%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (96 samples, 0.12%)</title><rect x="1.9968%" y="533" width="0.1203%" height="15" fill="rgb(248,47,43)" fg:x="1593" fg:w="96"/><text x="2.2468%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (96 samples, 0.12%)</title><rect x="1.9968%" y="517" width="0.1203%" height="15" fill="rgb(221,10,30)" fg:x="1593" fg:w="96"/><text x="2.2468%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 0.12%)</title><rect x="1.9968%" y="501" width="0.1203%" height="15" fill="rgb(210,229,1)" fg:x="1593" fg:w="96"/><text x="2.2468%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (96 samples, 0.12%)</title><rect x="1.9968%" y="485" width="0.1203%" height="15" fill="rgb(222,148,37)" fg:x="1593" fg:w="96"/><text x="2.2468%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.01%)</title><rect x="2.1034%" y="469" width="0.0138%" height="15" fill="rgb(234,67,33)" fg:x="1678" fg:w="11"/><text x="2.3534%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="2.1034%" y="453" width="0.0138%" height="15" fill="rgb(247,98,35)" fg:x="1678" fg:w="11"/><text x="2.3534%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (9 samples, 0.01%)</title><rect x="2.1059%" y="437" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="1680" fg:w="9"/><text x="2.3559%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.02%)</title><rect x="2.1172%" y="533" width="0.0188%" height="15" fill="rgb(213,79,30)" fg:x="1689" fg:w="15"/><text x="2.3672%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (67 samples, 0.08%)</title><rect x="2.1372%" y="517" width="0.0840%" height="15" fill="rgb(246,177,23)" fg:x="1705" fg:w="67"/><text x="2.3872%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (8 samples, 0.01%)</title><rect x="2.2112%" y="501" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="1764" fg:w="8"/><text x="2.4612%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.01%)</title><rect x="2.2112%" y="485" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="1764" fg:w="8"/><text x="2.4612%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (95 samples, 0.12%)</title><rect x="2.1372%" y="533" width="0.1191%" height="15" fill="rgb(244,35,45)" fg:x="1705" fg:w="95"/><text x="2.3872%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.04%)</title><rect x="2.2212%" y="517" width="0.0351%" height="15" fill="rgb(251,115,12)" fg:x="1772" fg:w="28"/><text x="2.4712%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25 samples, 0.03%)</title><rect x="2.2250%" y="501" width="0.0313%" height="15" fill="rgb(240,54,50)" fg:x="1775" fg:w="25"/><text x="2.4750%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.02%)</title><rect x="2.2563%" y="517" width="0.0226%" height="15" fill="rgb(233,84,52)" fg:x="1800" fg:w="18"/><text x="2.5063%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.03%)</title><rect x="2.2563%" y="533" width="0.0326%" height="15" fill="rgb(207,117,47)" fg:x="1800" fg:w="26"/><text x="2.5063%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.01%)</title><rect x="2.2789%" y="517" width="0.0100%" height="15" fill="rgb(249,43,39)" fg:x="1818" fg:w="8"/><text x="2.5289%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.01%)</title><rect x="2.2789%" y="501" width="0.0100%" height="15" fill="rgb(209,38,44)" fg:x="1818" fg:w="8"/><text x="2.5289%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (245 samples, 0.31%)</title><rect x="2.2889%" y="533" width="0.3071%" height="15" fill="rgb(236,212,23)" fg:x="1826" fg:w="245"/><text x="2.5389%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (192 samples, 0.24%)</title><rect x="2.3553%" y="517" width="0.2407%" height="15" fill="rgb(242,79,21)" fg:x="1879" fg:w="192"/><text x="2.6053%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (117 samples, 0.15%)</title><rect x="2.6248%" y="501" width="0.1467%" height="15" fill="rgb(211,96,35)" fg:x="2094" fg:w="117"/><text x="2.8748%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (117 samples, 0.15%)</title><rect x="2.6248%" y="485" width="0.1467%" height="15" fill="rgb(253,215,40)" fg:x="2094" fg:w="117"/><text x="2.8748%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (153 samples, 0.19%)</title><rect x="2.5960%" y="533" width="0.1918%" height="15" fill="rgb(211,81,21)" fg:x="2071" fg:w="153"/><text x="2.8460%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (146 samples, 0.18%)</title><rect x="2.6048%" y="517" width="0.1830%" height="15" fill="rgb(208,190,38)" fg:x="2078" fg:w="146"/><text x="2.8548%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.02%)</title><rect x="2.7715%" y="501" width="0.0163%" height="15" fill="rgb(235,213,38)" fg:x="2211" fg:w="13"/><text x="3.0215%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.02%)</title><rect x="2.7715%" y="485" width="0.0163%" height="15" fill="rgb(237,122,38)" fg:x="2211" fg:w="13"/><text x="3.0215%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (12 samples, 0.02%)</title><rect x="2.7878%" y="533" width="0.0150%" height="15" fill="rgb(244,218,35)" fg:x="2224" fg:w="12"/><text x="3.0378%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (12 samples, 0.02%)</title><rect x="2.7878%" y="517" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="2224" fg:w="12"/><text x="3.0378%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (15 samples, 0.02%)</title><rect x="2.8028%" y="533" width="0.0188%" height="15" fill="rgb(210,16,53)" fg:x="2236" fg:w="15"/><text x="3.0528%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (11 samples, 0.01%)</title><rect x="2.8216%" y="533" width="0.0138%" height="15" fill="rgb(235,124,12)" fg:x="2251" fg:w="11"/><text x="3.0716%" y="543.50"></text></g><g><title>__memcpy_evex_unaligned_erms (8 samples, 0.01%)</title><rect x="3.0686%" y="357" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="2448" fg:w="8"/><text x="3.3186%" y="367.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="3.0786%" y="357" width="0.0125%" height="15" fill="rgb(250,166,2)" fg:x="2456" fg:w="10"/><text x="3.3286%" y="367.50"></text></g><g><title>__mem_cgroup_charge (11 samples, 0.01%)</title><rect x="3.1275%" y="213" width="0.0138%" height="15" fill="rgb(242,216,29)" fg:x="2495" fg:w="11"/><text x="3.3775%" y="223.50"></text></g><g><title>__alloc_pages (8 samples, 0.01%)</title><rect x="3.1488%" y="181" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="2512" fg:w="8"/><text x="3.3988%" y="191.50"></text></g><g><title>__folio_alloc (9 samples, 0.01%)</title><rect x="3.1488%" y="197" width="0.0113%" height="15" fill="rgb(228,99,48)" fg:x="2512" fg:w="9"/><text x="3.3988%" y="207.50"></text></g><g><title>__handle_mm_fault (33 samples, 0.04%)</title><rect x="3.1199%" y="261" width="0.0414%" height="15" fill="rgb(253,11,6)" fg:x="2489" fg:w="33"/><text x="3.3699%" y="271.50"></text></g><g><title>handle_pte_fault (33 samples, 0.04%)</title><rect x="3.1199%" y="245" width="0.0414%" height="15" fill="rgb(247,143,39)" fg:x="2489" fg:w="33"/><text x="3.3699%" y="255.50"></text></g><g><title>do_anonymous_page (30 samples, 0.04%)</title><rect x="3.1237%" y="229" width="0.0376%" height="15" fill="rgb(236,97,10)" fg:x="2492" fg:w="30"/><text x="3.3737%" y="239.50"></text></g><g><title>vma_alloc_folio (10 samples, 0.01%)</title><rect x="3.1488%" y="213" width="0.0125%" height="15" fill="rgb(233,208,19)" fg:x="2512" fg:w="10"/><text x="3.3988%" y="223.50"></text></g><g><title>do_user_addr_fault (40 samples, 0.05%)</title><rect x="3.1149%" y="293" width="0.0501%" height="15" fill="rgb(216,164,2)" fg:x="2485" fg:w="40"/><text x="3.3649%" y="303.50"></text></g><g><title>handle_mm_fault (39 samples, 0.05%)</title><rect x="3.1162%" y="277" width="0.0489%" height="15" fill="rgb(220,129,5)" fg:x="2486" fg:w="39"/><text x="3.3662%" y="287.50"></text></g><g><title>asm_exc_page_fault (42 samples, 0.05%)</title><rect x="3.1149%" y="325" width="0.0526%" height="15" fill="rgb(242,17,10)" fg:x="2485" fg:w="42"/><text x="3.3649%" y="335.50"></text></g><g><title>exc_page_fault (42 samples, 0.05%)</title><rect x="3.1149%" y="309" width="0.0526%" height="15" fill="rgb(242,107,0)" fg:x="2485" fg:w="42"/><text x="3.3649%" y="319.50"></text></g><g><title>perf_event_mmap (33 samples, 0.04%)</title><rect x="3.1801%" y="213" width="0.0414%" height="15" fill="rgb(251,28,31)" fg:x="2537" fg:w="33"/><text x="3.4301%" y="223.50"></text></g><g><title>perf_event_mmap_event (33 samples, 0.04%)</title><rect x="3.1801%" y="197" width="0.0414%" height="15" fill="rgb(233,223,10)" fg:x="2537" fg:w="33"/><text x="3.4301%" y="207.50"></text></g><g><title>perf_iterate_sb (32 samples, 0.04%)</title><rect x="3.1814%" y="181" width="0.0401%" height="15" fill="rgb(215,21,27)" fg:x="2538" fg:w="32"/><text x="3.4314%" y="191.50"></text></g><g><title>perf_iterate_ctx (32 samples, 0.04%)</title><rect x="3.1814%" y="165" width="0.0401%" height="15" fill="rgb(232,23,21)" fg:x="2538" fg:w="32"/><text x="3.4314%" y="175.50"></text></g><g><title>do_mprotect_pkey (43 samples, 0.05%)</title><rect x="3.1713%" y="245" width="0.0539%" height="15" fill="rgb(244,5,23)" fg:x="2530" fg:w="43"/><text x="3.4213%" y="255.50"></text></g><g><title>mprotect_fixup (39 samples, 0.05%)</title><rect x="3.1764%" y="229" width="0.0489%" height="15" fill="rgb(226,81,46)" fg:x="2534" fg:w="39"/><text x="3.4264%" y="239.50"></text></g><g><title>__x64_sys_mprotect (44 samples, 0.06%)</title><rect x="3.1713%" y="261" width="0.0552%" height="15" fill="rgb(247,70,30)" fg:x="2530" fg:w="44"/><text x="3.4213%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (51 samples, 0.06%)</title><rect x="3.1688%" y="293" width="0.0639%" height="15" fill="rgb(212,68,19)" fg:x="2528" fg:w="51"/><text x="3.4188%" y="303.50"></text></g><g><title>do_syscall_64 (50 samples, 0.06%)</title><rect x="3.1701%" y="277" width="0.0627%" height="15" fill="rgb(240,187,13)" fg:x="2529" fg:w="50"/><text x="3.4201%" y="287.50"></text></g><g><title>grow_heap (56 samples, 0.07%)</title><rect x="3.1676%" y="325" width="0.0702%" height="15" fill="rgb(223,113,26)" fg:x="2527" fg:w="56"/><text x="3.4176%" y="335.50"></text></g><g><title>__GI___mprotect (55 samples, 0.07%)</title><rect x="3.1688%" y="309" width="0.0689%" height="15" fill="rgb(206,192,2)" fg:x="2528" fg:w="55"/><text x="3.4188%" y="319.50"></text></g><g><title>_int_realloc (143 samples, 0.18%)</title><rect x="3.0598%" y="373" width="0.1792%" height="15" fill="rgb(241,108,4)" fg:x="2441" fg:w="143"/><text x="3.3098%" y="383.50"></text></g><g><title>_int_malloc (118 samples, 0.15%)</title><rect x="3.0911%" y="357" width="0.1479%" height="15" fill="rgb(247,173,49)" fg:x="2466" fg:w="118"/><text x="3.3411%" y="367.50"></text></g><g><title>sysmalloc (106 samples, 0.13%)</title><rect x="3.1062%" y="341" width="0.1329%" height="15" fill="rgb(224,114,35)" fg:x="2478" fg:w="106"/><text x="3.3562%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (176 samples, 0.22%)</title><rect x="3.0272%" y="501" width="0.2206%" height="15" fill="rgb(245,159,27)" fg:x="2415" fg:w="176"/><text x="3.2772%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (175 samples, 0.22%)</title><rect x="3.0284%" y="485" width="0.2194%" height="15" fill="rgb(245,172,44)" fg:x="2416" fg:w="175"/><text x="3.2784%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (173 samples, 0.22%)</title><rect x="3.0309%" y="469" width="0.2169%" height="15" fill="rgb(236,23,11)" fg:x="2418" fg:w="173"/><text x="3.2809%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (173 samples, 0.22%)</title><rect x="3.0309%" y="453" width="0.2169%" height="15" fill="rgb(205,117,38)" fg:x="2418" fg:w="173"/><text x="3.2809%" y="463.50"></text></g><g><title>alloc::alloc::realloc (173 samples, 0.22%)</title><rect x="3.0309%" y="437" width="0.2169%" height="15" fill="rgb(237,72,25)" fg:x="2418" fg:w="173"/><text x="3.2809%" y="447.50"></text></g><g><title>__rdl_realloc (173 samples, 0.22%)</title><rect x="3.0309%" y="421" width="0.2169%" height="15" fill="rgb(244,70,9)" fg:x="2418" fg:w="173"/><text x="3.2809%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (173 samples, 0.22%)</title><rect x="3.0309%" y="405" width="0.2169%" height="15" fill="rgb(217,125,39)" fg:x="2418" fg:w="173"/><text x="3.2809%" y="415.50"></text></g><g><title>__GI___libc_realloc (172 samples, 0.22%)</title><rect x="3.0322%" y="389" width="0.2156%" height="15" fill="rgb(235,36,10)" fg:x="2419" fg:w="172"/><text x="3.2822%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (177 samples, 0.22%)</title><rect x="3.0272%" y="517" width="0.2219%" height="15" fill="rgb(251,123,47)" fg:x="2415" fg:w="177"/><text x="3.2772%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.03%)</title><rect x="3.2491%" y="517" width="0.0338%" height="15" fill="rgb(221,13,13)" fg:x="2592" fg:w="27"/><text x="3.4991%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27 samples, 0.03%)</title><rect x="3.2491%" y="501" width="0.0338%" height="15" fill="rgb(238,131,9)" fg:x="2592" fg:w="27"/><text x="3.4991%" y="511.50"></text></g><g><title>core::ptr::write (205 samples, 0.26%)</title><rect x="3.2854%" y="517" width="0.2570%" height="15" fill="rgb(211,50,8)" fg:x="2621" fg:w="205"/><text x="3.5354%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (567 samples, 0.71%)</title><rect x="2.8354%" y="533" width="0.7107%" height="15" fill="rgb(245,182,24)" fg:x="2262" fg:w="567"/><text x="3.0854%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 0.08%)</title><rect x="3.5511%" y="517" width="0.0777%" height="15" fill="rgb(242,14,37)" fg:x="2833" fg:w="62"/><text x="3.8011%" y="527.50"></text></g><g><title>core::ptr::write (54 samples, 0.07%)</title><rect x="3.5612%" y="501" width="0.0677%" height="15" fill="rgb(246,228,12)" fg:x="2841" fg:w="54"/><text x="3.8112%" y="511.50"></text></g><g><title>__memset_evex_unaligned_erms (44 samples, 0.06%)</title><rect x="3.5737%" y="485" width="0.0552%" height="15" fill="rgb(213,55,15)" fg:x="2851" fg:w="44"/><text x="3.8237%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (68 samples, 0.09%)</title><rect x="3.5461%" y="533" width="0.0852%" height="15" fill="rgb(209,9,3)" fg:x="2829" fg:w="68"/><text x="3.7961%" y="543.50"></text></g><g><title>__rdl_alloc (127 samples, 0.16%)</title><rect x="3.6339%" y="421" width="0.1592%" height="15" fill="rgb(230,59,30)" fg:x="2899" fg:w="127"/><text x="3.8839%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (127 samples, 0.16%)</title><rect x="3.6339%" y="405" width="0.1592%" height="15" fill="rgb(209,121,21)" fg:x="2899" fg:w="127"/><text x="3.8839%" y="415.50"></text></g><g><title>__GI___libc_malloc (126 samples, 0.16%)</title><rect x="3.6351%" y="389" width="0.1579%" height="15" fill="rgb(220,109,13)" fg:x="2900" fg:w="126"/><text x="3.8851%" y="399.50"></text></g><g><title>tcache_get (35 samples, 0.04%)</title><rect x="3.7492%" y="373" width="0.0439%" height="15" fill="rgb(232,18,1)" fg:x="2991" fg:w="35"/><text x="3.9992%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (134 samples, 0.17%)</title><rect x="3.6314%" y="533" width="0.1680%" height="15" fill="rgb(215,41,42)" fg:x="2897" fg:w="134"/><text x="3.8814%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (134 samples, 0.17%)</title><rect x="3.6314%" y="517" width="0.1680%" height="15" fill="rgb(224,123,36)" fg:x="2897" fg:w="134"/><text x="3.8814%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (133 samples, 0.17%)</title><rect x="3.6326%" y="501" width="0.1667%" height="15" fill="rgb(240,125,3)" fg:x="2898" fg:w="133"/><text x="3.8826%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (133 samples, 0.17%)</title><rect x="3.6326%" y="485" width="0.1667%" height="15" fill="rgb(205,98,50)" fg:x="2898" fg:w="133"/><text x="3.8826%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (132 samples, 0.17%)</title><rect x="3.6339%" y="469" width="0.1655%" height="15" fill="rgb(205,185,37)" fg:x="2899" fg:w="132"/><text x="3.8839%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (132 samples, 0.17%)</title><rect x="3.6339%" y="453" width="0.1655%" height="15" fill="rgb(238,207,15)" fg:x="2899" fg:w="132"/><text x="3.8839%" y="463.50"></text></g><g><title>alloc::alloc::alloc (132 samples, 0.17%)</title><rect x="3.6339%" y="437" width="0.1655%" height="15" fill="rgb(213,199,42)" fg:x="2899" fg:w="132"/><text x="3.8839%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::le (18 samples, 0.02%)</title><rect x="3.8044%" y="533" width="0.0226%" height="15" fill="rgb(235,201,11)" fg:x="3035" fg:w="18"/><text x="4.0544%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (27 samples, 0.03%)</title><rect x="3.9548%" y="357" width="0.0338%" height="15" fill="rgb(207,46,11)" fg:x="3155" fg:w="27"/><text x="4.2048%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.03%)</title><rect x="3.9548%" y="341" width="0.0338%" height="15" fill="rgb(241,35,35)" fg:x="3155" fg:w="27"/><text x="4.2048%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.03%)</title><rect x="3.9548%" y="325" width="0.0338%" height="15" fill="rgb(243,32,47)" fg:x="3155" fg:w="27"/><text x="4.2048%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (40 samples, 0.05%)</title><rect x="3.9397%" y="389" width="0.0501%" height="15" fill="rgb(247,202,23)" fg:x="3143" fg:w="40"/><text x="4.1897%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (40 samples, 0.05%)</title><rect x="3.9397%" y="373" width="0.0501%" height="15" fill="rgb(219,102,11)" fg:x="3143" fg:w="40"/><text x="4.1897%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (151 samples, 0.19%)</title><rect x="3.8269%" y="485" width="0.1893%" height="15" fill="rgb(243,110,44)" fg:x="3053" fg:w="151"/><text x="4.0769%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (109 samples, 0.14%)</title><rect x="3.8796%" y="469" width="0.1366%" height="15" fill="rgb(222,74,54)" fg:x="3095" fg:w="109"/><text x="4.1296%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (108 samples, 0.14%)</title><rect x="3.8808%" y="453" width="0.1354%" height="15" fill="rgb(216,99,12)" fg:x="3096" fg:w="108"/><text x="4.1308%" y="463.50"></text></g><g><title>core::cmp::max_by (108 samples, 0.14%)</title><rect x="3.8808%" y="437" width="0.1354%" height="15" fill="rgb(226,22,26)" fg:x="3096" fg:w="108"/><text x="4.1308%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (61 samples, 0.08%)</title><rect x="3.9397%" y="421" width="0.0765%" height="15" fill="rgb(217,163,10)" fg:x="3143" fg:w="61"/><text x="4.1897%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (61 samples, 0.08%)</title><rect x="3.9397%" y="405" width="0.0765%" height="15" fill="rgb(213,25,53)" fg:x="3143" fg:w="61"/><text x="4.1897%" y="415.50"></text></g><g><title>project1::solver::types::Lit::var (21 samples, 0.03%)</title><rect x="3.9899%" y="389" width="0.0263%" height="15" fill="rgb(252,105,26)" fg:x="3183" fg:w="21"/><text x="4.2399%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (152 samples, 0.19%)</title><rect x="3.8269%" y="533" width="0.1905%" height="15" fill="rgb(220,39,43)" fg:x="3053" fg:w="152"/><text x="4.0769%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (152 samples, 0.19%)</title><rect x="3.8269%" y="517" width="0.1905%" height="15" fill="rgb(229,68,48)" fg:x="3053" fg:w="152"/><text x="4.0769%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (152 samples, 0.19%)</title><rect x="3.8269%" y="501" width="0.1905%" height="15" fill="rgb(252,8,32)" fg:x="3053" fg:w="152"/><text x="4.0769%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (13 samples, 0.02%)</title><rect x="4.0350%" y="501" width="0.0163%" height="15" fill="rgb(223,20,43)" fg:x="3219" fg:w="13"/><text x="4.2850%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (13 samples, 0.02%)</title><rect x="4.0350%" y="485" width="0.0163%" height="15" fill="rgb(229,81,49)" fg:x="3219" fg:w="13"/><text x="4.2850%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (32 samples, 0.04%)</title><rect x="4.0350%" y="533" width="0.0401%" height="15" fill="rgb(236,28,36)" fg:x="3219" fg:w="32"/><text x="4.2850%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (32 samples, 0.04%)</title><rect x="4.0350%" y="517" width="0.0401%" height="15" fill="rgb(249,185,26)" fg:x="3219" fg:w="32"/><text x="4.2850%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var (19 samples, 0.02%)</title><rect x="4.0513%" y="501" width="0.0238%" height="15" fill="rgb(249,174,33)" fg:x="3232" fg:w="19"/><text x="4.3013%" y="511.50"></text></g><g><title>_int_free (30 samples, 0.04%)</title><rect x="4.0814%" y="405" width="0.0376%" height="15" fill="rgb(233,201,37)" fg:x="3256" fg:w="30"/><text x="4.3314%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (43 samples, 0.05%)</title><rect x="4.0751%" y="533" width="0.0539%" height="15" fill="rgb(221,78,26)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (43 samples, 0.05%)</title><rect x="4.0751%" y="517" width="0.0539%" height="15" fill="rgb(250,127,30)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.05%)</title><rect x="4.0751%" y="501" width="0.0539%" height="15" fill="rgb(230,49,44)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.05%)</title><rect x="4.0751%" y="485" width="0.0539%" height="15" fill="rgb(229,67,23)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.05%)</title><rect x="4.0751%" y="469" width="0.0539%" height="15" fill="rgb(249,83,47)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="479.50"></text></g><g><title>__rdl_dealloc (43 samples, 0.05%)</title><rect x="4.0751%" y="453" width="0.0539%" height="15" fill="rgb(215,43,3)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (43 samples, 0.05%)</title><rect x="4.0751%" y="437" width="0.0539%" height="15" fill="rgb(238,154,13)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="447.50"></text></g><g><title>__GI___libc_free (43 samples, 0.05%)</title><rect x="4.0751%" y="421" width="0.0539%" height="15" fill="rgb(219,56,2)" fg:x="3251" fg:w="43"/><text x="4.3251%" y="431.50"></text></g><g><title>arena_for_chunk (8 samples, 0.01%)</title><rect x="4.1190%" y="405" width="0.0100%" height="15" fill="rgb(233,0,4)" fg:x="3286" fg:w="8"/><text x="4.3690%" y="415.50"></text></g><g><title>arena_for_chunk (8 samples, 0.01%)</title><rect x="4.1190%" y="389" width="0.0100%" height="15" fill="rgb(235,30,7)" fg:x="3286" fg:w="8"/><text x="4.3690%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (288 samples, 0.36%)</title><rect x="4.1353%" y="533" width="0.3610%" height="15" fill="rgb(250,79,13)" fg:x="3299" fg:w="288"/><text x="4.3853%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (284 samples, 0.36%)</title><rect x="4.1403%" y="517" width="0.3560%" height="15" fill="rgb(211,146,34)" fg:x="3303" fg:w="284"/><text x="4.3903%" y="527.50"></text></g><g><title>__memcpy_evex_unaligned_erms (279 samples, 0.35%)</title><rect x="4.1466%" y="501" width="0.3497%" height="15" fill="rgb(228,22,38)" fg:x="3308" fg:w="279"/><text x="4.3966%" y="511.50"></text></g><g><title>log::max_level (84 samples, 0.11%)</title><rect x="4.4975%" y="533" width="0.1053%" height="15" fill="rgb(235,168,5)" fg:x="3588" fg:w="84"/><text x="4.7475%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (84 samples, 0.11%)</title><rect x="4.4975%" y="517" width="0.1053%" height="15" fill="rgb(221,155,16)" fg:x="3588" fg:w="84"/><text x="4.7475%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (84 samples, 0.11%)</title><rect x="4.4975%" y="501" width="0.1053%" height="15" fill="rgb(215,215,53)" fg:x="3588" fg:w="84"/><text x="4.7475%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.03%)</title><rect x="4.6718%" y="501" width="0.0263%" height="15" fill="rgb(223,4,10)" fg:x="3727" fg:w="21"/><text x="4.9218%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.04%)</title><rect x="4.6718%" y="517" width="0.0414%" height="15" fill="rgb(234,103,6)" fg:x="3727" fg:w="33"/><text x="4.9218%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.02%)</title><rect x="4.6981%" y="501" width="0.0150%" height="15" fill="rgb(227,97,0)" fg:x="3748" fg:w="12"/><text x="4.9481%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.02%)</title><rect x="4.6981%" y="485" width="0.0150%" height="15" fill="rgb(234,150,53)" fg:x="3748" fg:w="12"/><text x="4.9481%" y="495.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (95 samples, 0.12%)</title><rect x="4.6028%" y="533" width="0.1191%" height="15" fill="rgb(228,201,54)" fg:x="3672" fg:w="95"/><text x="4.8528%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33 samples, 0.04%)</title><rect x="4.8748%" y="501" width="0.0414%" height="15" fill="rgb(222,22,37)" fg:x="3889" fg:w="33"/><text x="5.1248%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.03%)</title><rect x="4.8911%" y="485" width="0.0251%" height="15" fill="rgb(237,53,32)" fg:x="3902" fg:w="20"/><text x="5.1411%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20 samples, 0.03%)</title><rect x="4.8911%" y="469" width="0.0251%" height="15" fill="rgb(233,25,53)" fg:x="3902" fg:w="20"/><text x="5.1411%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (42 samples, 0.05%)</title><rect x="4.8748%" y="517" width="0.0526%" height="15" fill="rgb(210,40,34)" fg:x="3889" fg:w="42"/><text x="5.1248%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.01%)</title><rect x="4.9162%" y="501" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="3922" fg:w="9"/><text x="5.1662%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.01%)</title><rect x="4.9162%" y="485" width="0.0113%" height="15" fill="rgb(235,28,35)" fg:x="3922" fg:w="9"/><text x="5.1662%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.03%)</title><rect x="4.9275%" y="517" width="0.0288%" height="15" fill="rgb(210,56,17)" fg:x="3931" fg:w="23"/><text x="5.1775%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.03%)</title><rect x="4.9275%" y="501" width="0.0288%" height="15" fill="rgb(224,130,29)" fg:x="3931" fg:w="23"/><text x="5.1775%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.02%)</title><rect x="4.9338%" y="485" width="0.0226%" height="15" fill="rgb(235,212,8)" fg:x="3936" fg:w="18"/><text x="5.1838%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.02%)</title><rect x="4.9338%" y="469" width="0.0226%" height="15" fill="rgb(223,33,50)" fg:x="3936" fg:w="18"/><text x="5.1838%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (19 samples, 0.02%)</title><rect x="4.9563%" y="517" width="0.0238%" height="15" fill="rgb(219,149,13)" fg:x="3954" fg:w="19"/><text x="5.2063%" y="527.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (19 samples, 0.02%)</title><rect x="4.9563%" y="501" width="0.0238%" height="15" fill="rgb(250,156,29)" fg:x="3954" fg:w="19"/><text x="5.2063%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (19 samples, 0.02%)</title><rect x="4.9563%" y="485" width="0.0238%" height="15" fill="rgb(216,193,19)" fg:x="3954" fg:w="19"/><text x="5.2063%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (38 samples, 0.05%)</title><rect x="4.9801%" y="517" width="0.0476%" height="15" fill="rgb(216,135,14)" fg:x="3973" fg:w="38"/><text x="5.2301%" y="527.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (38 samples, 0.05%)</title><rect x="4.9801%" y="501" width="0.0476%" height="15" fill="rgb(241,47,5)" fg:x="3973" fg:w="38"/><text x="5.2301%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (81 samples, 0.10%)</title><rect x="5.0365%" y="517" width="0.1015%" height="15" fill="rgb(233,42,35)" fg:x="4018" fg:w="81"/><text x="5.2865%" y="527.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (55 samples, 0.07%)</title><rect x="5.0691%" y="501" width="0.0689%" height="15" fill="rgb(231,13,6)" fg:x="4044" fg:w="55"/><text x="5.3191%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="5.1957%" y="309" width="0.0238%" height="15" fill="rgb(207,181,40)" fg:x="4145" fg:w="19"/><text x="5.4457%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (34 samples, 0.04%)</title><rect x="5.1807%" y="325" width="0.0426%" height="15" fill="rgb(254,173,49)" fg:x="4133" fg:w="34"/><text x="5.4307%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (33 samples, 0.04%)</title><rect x="5.2760%" y="309" width="0.0414%" height="15" fill="rgb(221,1,38)" fg:x="4209" fg:w="33"/><text x="5.5260%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.03%)</title><rect x="5.3173%" y="309" width="0.0313%" height="15" fill="rgb(206,124,46)" fg:x="4242" fg:w="25"/><text x="5.5673%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (160 samples, 0.20%)</title><rect x="5.1569%" y="373" width="0.2006%" height="15" fill="rgb(249,21,11)" fg:x="4114" fg:w="160"/><text x="5.4069%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (160 samples, 0.20%)</title><rect x="5.1569%" y="357" width="0.2006%" height="15" fill="rgb(222,201,40)" fg:x="4114" fg:w="160"/><text x="5.4069%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (160 samples, 0.20%)</title><rect x="5.1569%" y="341" width="0.2006%" height="15" fill="rgb(235,61,29)" fg:x="4114" fg:w="160"/><text x="5.4069%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (107 samples, 0.13%)</title><rect x="5.2233%" y="325" width="0.1341%" height="15" fill="rgb(219,207,3)" fg:x="4167" fg:w="107"/><text x="5.4733%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (23 samples, 0.03%)</title><rect x="5.3574%" y="373" width="0.0288%" height="15" fill="rgb(222,56,46)" fg:x="4274" fg:w="23"/><text x="5.6074%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.02%)</title><rect x="5.3700%" y="357" width="0.0163%" height="15" fill="rgb(239,76,54)" fg:x="4284" fg:w="13"/><text x="5.6200%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.02%)</title><rect x="5.3700%" y="341" width="0.0163%" height="15" fill="rgb(231,124,27)" fg:x="4284" fg:w="13"/><text x="5.6200%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (13 samples, 0.02%)</title><rect x="5.3700%" y="325" width="0.0163%" height="15" fill="rgb(249,195,6)" fg:x="4284" fg:w="13"/><text x="5.6200%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.03%)</title><rect x="5.4076%" y="245" width="0.0276%" height="15" fill="rgb(237,174,47)" fg:x="4314" fg:w="22"/><text x="5.6576%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (231 samples, 0.29%)</title><rect x="5.1569%" y="405" width="0.2896%" height="15" fill="rgb(206,201,31)" fg:x="4114" fg:w="231"/><text x="5.4069%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (231 samples, 0.29%)</title><rect x="5.1569%" y="389" width="0.2896%" height="15" fill="rgb(231,57,52)" fg:x="4114" fg:w="231"/><text x="5.4069%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (48 samples, 0.06%)</title><rect x="5.3863%" y="373" width="0.0602%" height="15" fill="rgb(248,177,22)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (48 samples, 0.06%)</title><rect x="5.3863%" y="357" width="0.0602%" height="15" fill="rgb(215,211,37)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (48 samples, 0.06%)</title><rect x="5.3863%" y="341" width="0.0602%" height="15" fill="rgb(241,128,51)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (48 samples, 0.06%)</title><rect x="5.3863%" y="325" width="0.0602%" height="15" fill="rgb(227,165,31)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.06%)</title><rect x="5.3863%" y="309" width="0.0602%" height="15" fill="rgb(228,167,24)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (48 samples, 0.06%)</title><rect x="5.3863%" y="293" width="0.0602%" height="15" fill="rgb(228,143,12)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48 samples, 0.06%)</title><rect x="5.3863%" y="277" width="0.0602%" height="15" fill="rgb(249,149,8)" fg:x="4297" fg:w="48"/><text x="5.6363%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.04%)</title><rect x="5.4076%" y="261" width="0.0389%" height="15" fill="rgb(243,35,44)" fg:x="4314" fg:w="31"/><text x="5.6576%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.01%)</title><rect x="5.4352%" y="245" width="0.0113%" height="15" fill="rgb(246,89,9)" fg:x="4336" fg:w="9"/><text x="5.6852%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="5.4577%" y="357" width="0.0188%" height="15" fill="rgb(233,213,13)" fg:x="4354" fg:w="15"/><text x="5.7077%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.02%)</title><rect x="5.4590%" y="341" width="0.0175%" height="15" fill="rgb(233,141,41)" fg:x="4355" fg:w="14"/><text x="5.7090%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (42 samples, 0.05%)</title><rect x="5.4765%" y="341" width="0.0526%" height="15" fill="rgb(239,167,4)" fg:x="4369" fg:w="42"/><text x="5.7265%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (42 samples, 0.05%)</title><rect x="5.4765%" y="325" width="0.0526%" height="15" fill="rgb(209,217,16)" fg:x="4369" fg:w="42"/><text x="5.7265%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (42 samples, 0.05%)</title><rect x="5.4765%" y="309" width="0.0526%" height="15" fill="rgb(219,88,35)" fg:x="4369" fg:w="42"/><text x="5.7265%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (42 samples, 0.05%)</title><rect x="5.4765%" y="293" width="0.0526%" height="15" fill="rgb(220,193,23)" fg:x="4369" fg:w="42"/><text x="5.7265%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (52 samples, 0.07%)</title><rect x="5.4765%" y="357" width="0.0652%" height="15" fill="rgb(230,90,52)" fg:x="4369" fg:w="52"/><text x="5.7265%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="5.5292%" y="341" width="0.0125%" height="15" fill="rgb(252,106,19)" fg:x="4411" fg:w="10"/><text x="5.7792%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (10 samples, 0.01%)</title><rect x="5.5292%" y="325" width="0.0125%" height="15" fill="rgb(206,74,20)" fg:x="4411" fg:w="10"/><text x="5.7792%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.01%)</title><rect x="5.5292%" y="309" width="0.0125%" height="15" fill="rgb(230,138,44)" fg:x="4411" fg:w="10"/><text x="5.7792%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10 samples, 0.01%)</title><rect x="5.5292%" y="293" width="0.0125%" height="15" fill="rgb(235,182,43)" fg:x="4411" fg:w="10"/><text x="5.7792%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (41 samples, 0.05%)</title><rect x="5.5417%" y="357" width="0.0514%" height="15" fill="rgb(242,16,51)" fg:x="4421" fg:w="41"/><text x="5.7917%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (12 samples, 0.02%)</title><rect x="5.5931%" y="357" width="0.0150%" height="15" fill="rgb(248,9,4)" fg:x="4462" fg:w="12"/><text x="5.8431%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.01%)</title><rect x="5.6081%" y="357" width="0.0125%" height="15" fill="rgb(210,31,22)" fg:x="4474" fg:w="10"/><text x="5.8581%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.01%)</title><rect x="5.6081%" y="341" width="0.0125%" height="15" fill="rgb(239,54,39)" fg:x="4474" fg:w="10"/><text x="5.8581%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="5.6081%" y="325" width="0.0125%" height="15" fill="rgb(230,99,41)" fg:x="4474" fg:w="10"/><text x="5.8581%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (408 samples, 0.51%)</title><rect x="5.1544%" y="421" width="0.5114%" height="15" fill="rgb(253,106,12)" fg:x="4112" fg:w="408"/><text x="5.4044%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (175 samples, 0.22%)</title><rect x="5.4464%" y="405" width="0.2194%" height="15" fill="rgb(213,46,41)" fg:x="4345" fg:w="175"/><text x="5.6964%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (175 samples, 0.22%)</title><rect x="5.4464%" y="389" width="0.2194%" height="15" fill="rgb(215,133,35)" fg:x="4345" fg:w="175"/><text x="5.6964%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (174 samples, 0.22%)</title><rect x="5.4477%" y="373" width="0.2181%" height="15" fill="rgb(213,28,5)" fg:x="4346" fg:w="174"/><text x="5.6977%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 0.05%)</title><rect x="5.6207%" y="357" width="0.0451%" height="15" fill="rgb(215,77,49)" fg:x="4484" fg:w="36"/><text x="5.8707%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.05%)</title><rect x="5.6207%" y="341" width="0.0451%" height="15" fill="rgb(248,100,22)" fg:x="4484" fg:w="36"/><text x="5.8707%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (414 samples, 0.52%)</title><rect x="5.1544%" y="469" width="0.5189%" height="15" fill="rgb(208,67,9)" fg:x="4112" fg:w="414"/><text x="5.4044%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (414 samples, 0.52%)</title><rect x="5.1544%" y="453" width="0.5189%" height="15" fill="rgb(219,133,21)" fg:x="4112" fg:w="414"/><text x="5.4044%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (414 samples, 0.52%)</title><rect x="5.1544%" y="437" width="0.5189%" height="15" fill="rgb(246,46,29)" fg:x="4112" fg:w="414"/><text x="5.4044%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (25 samples, 0.03%)</title><rect x="5.7047%" y="341" width="0.0313%" height="15" fill="rgb(246,185,52)" fg:x="4551" fg:w="25"/><text x="5.9547%" y="351.50"></text></g><g><title>compare::Compare::compares_ge (26 samples, 0.03%)</title><rect x="5.7047%" y="437" width="0.0326%" height="15" fill="rgb(252,136,11)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (26 samples, 0.03%)</title><rect x="5.7047%" y="421" width="0.0326%" height="15" fill="rgb(219,138,53)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (26 samples, 0.03%)</title><rect x="5.7047%" y="405" width="0.0326%" height="15" fill="rgb(211,51,23)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (26 samples, 0.03%)</title><rect x="5.7047%" y="389" width="0.0326%" height="15" fill="rgb(247,221,28)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (26 samples, 0.03%)</title><rect x="5.7047%" y="373" width="0.0326%" height="15" fill="rgb(251,222,45)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (26 samples, 0.03%)</title><rect x="5.7047%" y="357" width="0.0326%" height="15" fill="rgb(217,162,53)" fg:x="4551" fg:w="26"/><text x="5.9547%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (32 samples, 0.04%)</title><rect x="5.7372%" y="421" width="0.0401%" height="15" fill="rgb(229,93,14)" fg:x="4577" fg:w="32"/><text x="5.9872%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (32 samples, 0.04%)</title><rect x="5.7372%" y="405" width="0.0401%" height="15" fill="rgb(209,67,49)" fg:x="4577" fg:w="32"/><text x="5.9872%" y="415.50"></text></g><g><title>compare::Compare::compares_le (42 samples, 0.05%)</title><rect x="5.7372%" y="437" width="0.0526%" height="15" fill="rgb(213,87,29)" fg:x="4577" fg:w="42"/><text x="5.9872%" y="447.50"></text></g><g><title>core::cmp::PartialEq::ne (10 samples, 0.01%)</title><rect x="5.7774%" y="421" width="0.0125%" height="15" fill="rgb(205,151,52)" fg:x="4609" fg:w="10"/><text x="6.0274%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (117 samples, 0.15%)</title><rect x="5.7987%" y="405" width="0.1467%" height="15" fill="rgb(253,215,39)" fg:x="4626" fg:w="117"/><text x="6.0487%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.02%)</title><rect x="5.9767%" y="261" width="0.0226%" height="15" fill="rgb(221,220,41)" fg:x="4768" fg:w="18"/><text x="6.2267%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (42 samples, 0.05%)</title><rect x="5.9629%" y="277" width="0.0526%" height="15" fill="rgb(218,133,21)" fg:x="4757" fg:w="42"/><text x="6.2129%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.02%)</title><rect x="5.9992%" y="261" width="0.0163%" height="15" fill="rgb(221,193,43)" fg:x="4786" fg:w="13"/><text x="6.2492%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.03%)</title><rect x="6.0456%" y="261" width="0.0338%" height="15" fill="rgb(240,128,52)" fg:x="4823" fg:w="27"/><text x="6.2956%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (123 samples, 0.15%)</title><rect x="5.9503%" y="325" width="0.1542%" height="15" fill="rgb(253,114,12)" fg:x="4747" fg:w="123"/><text x="6.2003%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (123 samples, 0.15%)</title><rect x="5.9503%" y="309" width="0.1542%" height="15" fill="rgb(215,223,47)" fg:x="4747" fg:w="123"/><text x="6.2003%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (123 samples, 0.15%)</title><rect x="5.9503%" y="293" width="0.1542%" height="15" fill="rgb(248,225,23)" fg:x="4747" fg:w="123"/><text x="6.2003%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (71 samples, 0.09%)</title><rect x="6.0155%" y="277" width="0.0890%" height="15" fill="rgb(250,108,0)" fg:x="4799" fg:w="71"/><text x="6.2655%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (20 samples, 0.03%)</title><rect x="6.0794%" y="261" width="0.0251%" height="15" fill="rgb(228,208,7)" fg:x="4850" fg:w="20"/><text x="6.3294%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (16 samples, 0.02%)</title><rect x="6.1045%" y="325" width="0.0201%" height="15" fill="rgb(244,45,10)" fg:x="4870" fg:w="16"/><text x="6.3545%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11 samples, 0.01%)</title><rect x="6.1108%" y="309" width="0.0138%" height="15" fill="rgb(207,125,25)" fg:x="4875" fg:w="11"/><text x="6.3608%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11 samples, 0.01%)</title><rect x="6.1108%" y="293" width="0.0138%" height="15" fill="rgb(210,195,18)" fg:x="4875" fg:w="11"/><text x="6.3608%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.01%)</title><rect x="6.1108%" y="277" width="0.0138%" height="15" fill="rgb(249,80,12)" fg:x="4875" fg:w="11"/><text x="6.3608%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (175 samples, 0.22%)</title><rect x="5.9503%" y="357" width="0.2194%" height="15" fill="rgb(221,65,9)" fg:x="4747" fg:w="175"/><text x="6.2003%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (175 samples, 0.22%)</title><rect x="5.9503%" y="341" width="0.2194%" height="15" fill="rgb(235,49,36)" fg:x="4747" fg:w="175"/><text x="6.2003%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (36 samples, 0.05%)</title><rect x="6.1246%" y="325" width="0.0451%" height="15" fill="rgb(225,32,20)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (36 samples, 0.05%)</title><rect x="6.1246%" y="309" width="0.0451%" height="15" fill="rgb(215,141,46)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (36 samples, 0.05%)</title><rect x="6.1246%" y="293" width="0.0451%" height="15" fill="rgb(250,160,47)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (36 samples, 0.05%)</title><rect x="6.1246%" y="277" width="0.0451%" height="15" fill="rgb(216,222,40)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.05%)</title><rect x="6.1246%" y="261" width="0.0451%" height="15" fill="rgb(234,217,39)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 0.05%)</title><rect x="6.1246%" y="245" width="0.0451%" height="15" fill="rgb(207,178,40)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.05%)</title><rect x="6.1246%" y="229" width="0.0451%" height="15" fill="rgb(221,136,13)" fg:x="4886" fg:w="36"/><text x="6.3746%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.03%)</title><rect x="6.1434%" y="213" width="0.0263%" height="15" fill="rgb(249,199,10)" fg:x="4901" fg:w="21"/><text x="6.3934%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.01%)</title><rect x="6.1597%" y="197" width="0.0100%" height="15" fill="rgb(249,222,13)" fg:x="4914" fg:w="8"/><text x="6.4097%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="6.1847%" y="309" width="0.0213%" height="15" fill="rgb(244,185,38)" fg:x="4934" fg:w="17"/><text x="6.4347%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.02%)</title><rect x="6.1885%" y="293" width="0.0175%" height="15" fill="rgb(236,202,9)" fg:x="4937" fg:w="14"/><text x="6.4385%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (31 samples, 0.04%)</title><rect x="6.2060%" y="293" width="0.0389%" height="15" fill="rgb(250,229,37)" fg:x="4951" fg:w="31"/><text x="6.4560%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (31 samples, 0.04%)</title><rect x="6.2060%" y="277" width="0.0389%" height="15" fill="rgb(206,174,23)" fg:x="4951" fg:w="31"/><text x="6.4560%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.04%)</title><rect x="6.2060%" y="261" width="0.0389%" height="15" fill="rgb(211,33,43)" fg:x="4951" fg:w="31"/><text x="6.4560%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (31 samples, 0.04%)</title><rect x="6.2060%" y="245" width="0.0389%" height="15" fill="rgb(245,58,50)" fg:x="4951" fg:w="31"/><text x="6.4560%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="6.2449%" y="245" width="0.0238%" height="15" fill="rgb(244,68,36)" fg:x="4982" fg:w="19"/><text x="6.4949%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (52 samples, 0.07%)</title><rect x="6.2060%" y="309" width="0.0652%" height="15" fill="rgb(232,229,15)" fg:x="4951" fg:w="52"/><text x="6.4560%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21 samples, 0.03%)</title><rect x="6.2449%" y="293" width="0.0263%" height="15" fill="rgb(254,30,23)" fg:x="4982" fg:w="21"/><text x="6.4949%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21 samples, 0.03%)</title><rect x="6.2449%" y="277" width="0.0263%" height="15" fill="rgb(235,160,14)" fg:x="4982" fg:w="21"/><text x="6.4949%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21 samples, 0.03%)</title><rect x="6.2449%" y="261" width="0.0263%" height="15" fill="rgb(212,155,44)" fg:x="4982" fg:w="21"/><text x="6.4949%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (20 samples, 0.03%)</title><rect x="6.2712%" y="309" width="0.0251%" height="15" fill="rgb(226,2,50)" fg:x="5003" fg:w="20"/><text x="6.5212%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.01%)</title><rect x="6.3013%" y="309" width="0.0138%" height="15" fill="rgb(234,177,6)" fg:x="5027" fg:w="11"/><text x="6.5513%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.01%)</title><rect x="6.3013%" y="293" width="0.0138%" height="15" fill="rgb(217,24,9)" fg:x="5027" fg:w="11"/><text x="6.5513%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="6.3013%" y="277" width="0.0138%" height="15" fill="rgb(220,13,46)" fg:x="5027" fg:w="11"/><text x="6.5513%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (141 samples, 0.18%)</title><rect x="6.1697%" y="325" width="0.1767%" height="15" fill="rgb(239,221,27)" fg:x="4922" fg:w="141"/><text x="6.4197%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (25 samples, 0.03%)</title><rect x="6.3151%" y="309" width="0.0313%" height="15" fill="rgb(222,198,25)" fg:x="5038" fg:w="25"/><text x="6.5651%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.03%)</title><rect x="6.3151%" y="293" width="0.0313%" height="15" fill="rgb(211,99,13)" fg:x="5038" fg:w="25"/><text x="6.5651%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (444 samples, 0.56%)</title><rect x="5.7911%" y="437" width="0.5566%" height="15" fill="rgb(232,111,31)" fg:x="4620" fg:w="444"/><text x="6.0411%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.56%)</title><rect x="5.7911%" y="421" width="0.5566%" height="15" fill="rgb(245,82,37)" fg:x="4620" fg:w="444"/><text x="6.0411%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (318 samples, 0.40%)</title><rect x="5.9491%" y="405" width="0.3986%" height="15" fill="rgb(227,149,46)" fg:x="4746" fg:w="318"/><text x="6.1991%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (318 samples, 0.40%)</title><rect x="5.9491%" y="389" width="0.3986%" height="15" fill="rgb(218,36,50)" fg:x="4746" fg:w="318"/><text x="6.1991%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (318 samples, 0.40%)</title><rect x="5.9491%" y="373" width="0.3986%" height="15" fill="rgb(226,80,48)" fg:x="4746" fg:w="318"/><text x="6.1991%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (142 samples, 0.18%)</title><rect x="6.1697%" y="357" width="0.1780%" height="15" fill="rgb(238,224,15)" fg:x="4922" fg:w="142"/><text x="6.4197%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (142 samples, 0.18%)</title><rect x="6.1697%" y="341" width="0.1780%" height="15" fill="rgb(241,136,10)" fg:x="4922" fg:w="142"/><text x="6.4197%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (563 samples, 0.71%)</title><rect x="5.6783%" y="453" width="0.7057%" height="15" fill="rgb(208,32,45)" fg:x="4530" fg:w="563"/><text x="5.9283%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (29 samples, 0.04%)</title><rect x="6.3477%" y="437" width="0.0364%" height="15" fill="rgb(207,135,9)" fg:x="5064" fg:w="29"/><text x="6.5977%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (581 samples, 0.73%)</title><rect x="5.6733%" y="469" width="0.7283%" height="15" fill="rgb(206,86,44)" fg:x="4526" fg:w="581"/><text x="5.9233%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (14 samples, 0.02%)</title><rect x="6.3840%" y="453" width="0.0175%" height="15" fill="rgb(245,177,15)" fg:x="5093" fg:w="14"/><text x="6.6340%" y="463.50"></text></g><g><title>compare::Compare::compares_le (79 samples, 0.10%)</title><rect x="6.4317%" y="453" width="0.0990%" height="15" fill="rgb(206,64,50)" fg:x="5131" fg:w="79"/><text x="6.6817%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (79 samples, 0.10%)</title><rect x="6.4317%" y="437" width="0.0990%" height="15" fill="rgb(234,36,40)" fg:x="5131" fg:w="79"/><text x="6.6817%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (79 samples, 0.10%)</title><rect x="6.4317%" y="421" width="0.0990%" height="15" fill="rgb(213,64,8)" fg:x="5131" fg:w="79"/><text x="6.6817%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76 samples, 0.10%)</title><rect x="6.5332%" y="421" width="0.0953%" height="15" fill="rgb(210,75,36)" fg:x="5212" fg:w="76"/><text x="6.7832%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.01%)</title><rect x="6.6723%" y="277" width="0.0138%" height="15" fill="rgb(229,88,21)" fg:x="5323" fg:w="11"/><text x="6.9223%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.03%)</title><rect x="6.6611%" y="293" width="0.0313%" height="15" fill="rgb(252,204,47)" fg:x="5314" fg:w="25"/><text x="6.9111%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (52 samples, 0.07%)</title><rect x="6.7225%" y="277" width="0.0652%" height="15" fill="rgb(208,77,27)" fg:x="5363" fg:w="52"/><text x="6.9725%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (148 samples, 0.19%)</title><rect x="6.6297%" y="341" width="0.1855%" height="15" fill="rgb(221,76,26)" fg:x="5289" fg:w="148"/><text x="6.8797%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (148 samples, 0.19%)</title><rect x="6.6297%" y="325" width="0.1855%" height="15" fill="rgb(225,139,18)" fg:x="5289" fg:w="148"/><text x="6.8797%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (148 samples, 0.19%)</title><rect x="6.6297%" y="309" width="0.1855%" height="15" fill="rgb(230,137,11)" fg:x="5289" fg:w="148"/><text x="6.8797%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (98 samples, 0.12%)</title><rect x="6.6924%" y="293" width="0.1228%" height="15" fill="rgb(212,28,1)" fg:x="5339" fg:w="98"/><text x="6.9424%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.03%)</title><rect x="6.7877%" y="277" width="0.0276%" height="15" fill="rgb(248,164,17)" fg:x="5415" fg:w="22"/><text x="7.0377%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.01%)</title><rect x="6.8152%" y="341" width="0.0113%" height="15" fill="rgb(222,171,42)" fg:x="5437" fg:w="9"/><text x="7.0652%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (20 samples, 0.03%)</title><rect x="6.8704%" y="213" width="0.0251%" height="15" fill="rgb(243,84,45)" fg:x="5481" fg:w="20"/><text x="7.1204%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (214 samples, 0.27%)</title><rect x="6.6297%" y="373" width="0.2682%" height="15" fill="rgb(252,49,23)" fg:x="5289" fg:w="214"/><text x="6.8797%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (214 samples, 0.27%)</title><rect x="6.6297%" y="357" width="0.2682%" height="15" fill="rgb(215,19,7)" fg:x="5289" fg:w="214"/><text x="6.8797%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (57 samples, 0.07%)</title><rect x="6.8265%" y="341" width="0.0714%" height="15" fill="rgb(238,81,41)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (57 samples, 0.07%)</title><rect x="6.8265%" y="325" width="0.0714%" height="15" fill="rgb(210,199,37)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (57 samples, 0.07%)</title><rect x="6.8265%" y="309" width="0.0714%" height="15" fill="rgb(244,192,49)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (57 samples, 0.07%)</title><rect x="6.8265%" y="293" width="0.0714%" height="15" fill="rgb(226,211,11)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (57 samples, 0.07%)</title><rect x="6.8265%" y="277" width="0.0714%" height="15" fill="rgb(236,162,54)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (57 samples, 0.07%)</title><rect x="6.8265%" y="261" width="0.0714%" height="15" fill="rgb(220,229,9)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (57 samples, 0.07%)</title><rect x="6.8265%" y="245" width="0.0714%" height="15" fill="rgb(250,87,22)" fg:x="5446" fg:w="57"/><text x="7.0765%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (34 samples, 0.04%)</title><rect x="6.8554%" y="229" width="0.0426%" height="15" fill="rgb(239,43,17)" fg:x="5469" fg:w="34"/><text x="7.1054%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="6.9180%" y="325" width="0.0188%" height="15" fill="rgb(231,177,25)" fg:x="5519" fg:w="15"/><text x="7.1680%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.01%)</title><rect x="6.9230%" y="309" width="0.0138%" height="15" fill="rgb(219,179,1)" fg:x="5523" fg:w="11"/><text x="7.1730%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (50 samples, 0.06%)</title><rect x="6.9368%" y="309" width="0.0627%" height="15" fill="rgb(238,219,53)" fg:x="5534" fg:w="50"/><text x="7.1868%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (50 samples, 0.06%)</title><rect x="6.9368%" y="293" width="0.0627%" height="15" fill="rgb(232,167,36)" fg:x="5534" fg:w="50"/><text x="7.1868%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (50 samples, 0.06%)</title><rect x="6.9368%" y="277" width="0.0627%" height="15" fill="rgb(244,19,51)" fg:x="5534" fg:w="50"/><text x="7.1868%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (50 samples, 0.06%)</title><rect x="6.9368%" y="261" width="0.0627%" height="15" fill="rgb(224,6,22)" fg:x="5534" fg:w="50"/><text x="7.1868%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (69 samples, 0.09%)</title><rect x="6.9368%" y="325" width="0.0865%" height="15" fill="rgb(224,145,5)" fg:x="5534" fg:w="69"/><text x="7.1868%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (19 samples, 0.02%)</title><rect x="6.9995%" y="309" width="0.0238%" height="15" fill="rgb(234,130,49)" fg:x="5584" fg:w="19"/><text x="7.2495%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (19 samples, 0.02%)</title><rect x="6.9995%" y="293" width="0.0238%" height="15" fill="rgb(254,6,2)" fg:x="5584" fg:w="19"/><text x="7.2495%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (19 samples, 0.02%)</title><rect x="6.9995%" y="277" width="0.0238%" height="15" fill="rgb(208,96,46)" fg:x="5584" fg:w="19"/><text x="7.2495%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.02%)</title><rect x="6.9995%" y="261" width="0.0238%" height="15" fill="rgb(239,3,39)" fg:x="5584" fg:w="19"/><text x="7.2495%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.02%)</title><rect x="7.0233%" y="325" width="0.0188%" height="15" fill="rgb(233,210,1)" fg:x="5603" fg:w="15"/><text x="7.2733%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.03%)</title><rect x="7.0471%" y="325" width="0.0301%" height="15" fill="rgb(244,137,37)" fg:x="5622" fg:w="24"/><text x="7.2971%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.03%)</title><rect x="7.0471%" y="309" width="0.0301%" height="15" fill="rgb(240,136,2)" fg:x="5622" fg:w="24"/><text x="7.2971%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (157 samples, 0.20%)</title><rect x="6.8980%" y="341" width="0.1968%" height="15" fill="rgb(239,18,37)" fg:x="5503" fg:w="157"/><text x="7.1480%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (14 samples, 0.02%)</title><rect x="7.0772%" y="325" width="0.0175%" height="15" fill="rgb(218,185,22)" fg:x="5646" fg:w="14"/><text x="7.3272%" y="335.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (456 samples, 0.57%)</title><rect x="6.5307%" y="437" width="0.5716%" height="15" fill="rgb(225,218,4)" fg:x="5210" fg:w="456"/><text x="6.7807%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (378 samples, 0.47%)</title><rect x="6.6285%" y="421" width="0.4738%" height="15" fill="rgb(230,182,32)" fg:x="5288" fg:w="378"/><text x="6.8785%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (378 samples, 0.47%)</title><rect x="6.6285%" y="405" width="0.4738%" height="15" fill="rgb(242,56,43)" fg:x="5288" fg:w="378"/><text x="6.8785%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (378 samples, 0.47%)</title><rect x="6.6285%" y="389" width="0.4738%" height="15" fill="rgb(233,99,24)" fg:x="5288" fg:w="378"/><text x="6.8785%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (163 samples, 0.20%)</title><rect x="6.8980%" y="373" width="0.2043%" height="15" fill="rgb(234,209,42)" fg:x="5503" fg:w="163"/><text x="7.1480%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (163 samples, 0.20%)</title><rect x="6.8980%" y="357" width="0.2043%" height="15" fill="rgb(227,7,12)" fg:x="5503" fg:w="163"/><text x="7.1480%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (462 samples, 0.58%)</title><rect x="6.5307%" y="453" width="0.5791%" height="15" fill="rgb(245,203,43)" fg:x="5210" fg:w="462"/><text x="6.7807%" y="463.50"></text></g><g><title>core::ptr::read (36 samples, 0.05%)</title><rect x="7.1462%" y="437" width="0.0451%" height="15" fill="rgb(238,205,33)" fg:x="5701" fg:w="36"/><text x="7.3962%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (633 samples, 0.79%)</title><rect x="6.4016%" y="469" width="0.7935%" height="15" fill="rgb(231,56,7)" fg:x="5107" fg:w="633"/><text x="6.6516%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (68 samples, 0.09%)</title><rect x="7.1098%" y="453" width="0.0852%" height="15" fill="rgb(244,186,29)" fg:x="5672" fg:w="68"/><text x="7.3598%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (1,649 samples, 2.07%)</title><rect x="5.1381%" y="517" width="2.0670%" height="15" fill="rgb(234,111,31)" fg:x="4099" fg:w="1649"/><text x="5.3881%" y="527.50">c..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (1,649 samples, 2.07%)</title><rect x="5.1381%" y="501" width="2.0670%" height="15" fill="rgb(241,149,10)" fg:x="4099" fg:w="1649"/><text x="5.3881%" y="511.50">&lt;..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1,643 samples, 2.06%)</title><rect x="5.1456%" y="485" width="2.0595%" height="15" fill="rgb(249,206,44)" fg:x="4105" fg:w="1643"/><text x="5.3956%" y="495.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (8 samples, 0.01%)</title><rect x="7.1951%" y="469" width="0.0100%" height="15" fill="rgb(251,153,30)" fg:x="5740" fg:w="8"/><text x="7.4451%" y="479.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (14 samples, 0.02%)</title><rect x="7.2051%" y="501" width="0.0175%" height="15" fill="rgb(239,152,38)" fg:x="5748" fg:w="14"/><text x="7.4551%" y="511.50"></text></g><g><title>log::__private_api::log (39 samples, 0.05%)</title><rect x="7.2051%" y="517" width="0.0489%" height="15" fill="rgb(249,139,47)" fg:x="5748" fg:w="39"/><text x="7.4551%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (25 samples, 0.03%)</title><rect x="7.2226%" y="501" width="0.0313%" height="15" fill="rgb(244,64,35)" fg:x="5762" fg:w="25"/><text x="7.4726%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (63 samples, 0.08%)</title><rect x="7.4031%" y="357" width="0.0790%" height="15" fill="rgb(216,46,15)" fg:x="5906" fg:w="63"/><text x="7.6531%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.15%)</title><rect x="7.3492%" y="373" width="0.1529%" height="15" fill="rgb(250,74,19)" fg:x="5863" fg:w="122"/><text x="7.5992%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16 samples, 0.02%)</title><rect x="7.4821%" y="357" width="0.0201%" height="15" fill="rgb(249,42,33)" fg:x="5969" fg:w="16"/><text x="7.7321%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (171 samples, 0.21%)</title><rect x="7.5949%" y="357" width="0.2143%" height="15" fill="rgb(242,149,17)" fg:x="6059" fg:w="171"/><text x="7.8449%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (327 samples, 0.41%)</title><rect x="7.5022%" y="373" width="0.4099%" height="15" fill="rgb(244,29,21)" fg:x="5985" fg:w="327"/><text x="7.7522%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (82 samples, 0.10%)</title><rect x="7.8093%" y="357" width="0.1028%" height="15" fill="rgb(220,130,37)" fg:x="6230" fg:w="82"/><text x="8.0593%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (507 samples, 0.64%)</title><rect x="7.2778%" y="421" width="0.6355%" height="15" fill="rgb(211,67,2)" fg:x="5806" fg:w="507"/><text x="7.5278%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (507 samples, 0.64%)</title><rect x="7.2778%" y="405" width="0.6355%" height="15" fill="rgb(235,68,52)" fg:x="5806" fg:w="507"/><text x="7.5278%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (507 samples, 0.64%)</title><rect x="7.2778%" y="389" width="0.6355%" height="15" fill="rgb(246,142,3)" fg:x="5806" fg:w="507"/><text x="7.5278%" y="399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (74 samples, 0.09%)</title><rect x="7.9133%" y="421" width="0.0928%" height="15" fill="rgb(241,25,7)" fg:x="6313" fg:w="74"/><text x="8.1633%" y="431.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (58 samples, 0.07%)</title><rect x="7.9334%" y="405" width="0.0727%" height="15" fill="rgb(242,119,39)" fg:x="6329" fg:w="58"/><text x="8.1834%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (58 samples, 0.07%)</title><rect x="7.9334%" y="389" width="0.0727%" height="15" fill="rgb(241,98,45)" fg:x="6329" fg:w="58"/><text x="8.1834%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (58 samples, 0.07%)</title><rect x="7.9334%" y="373" width="0.0727%" height="15" fill="rgb(254,28,30)" fg:x="6329" fg:w="58"/><text x="8.1834%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (52 samples, 0.07%)</title><rect x="8.0938%" y="293" width="0.0652%" height="15" fill="rgb(241,142,54)" fg:x="6457" fg:w="52"/><text x="8.3438%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (722 samples, 0.91%)</title><rect x="7.2778%" y="453" width="0.9050%" height="15" fill="rgb(222,85,15)" fg:x="5806" fg:w="722"/><text x="7.5278%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (722 samples, 0.91%)</title><rect x="7.2778%" y="437" width="0.9050%" height="15" fill="rgb(210,85,47)" fg:x="5806" fg:w="722"/><text x="7.5278%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (141 samples, 0.18%)</title><rect x="8.0061%" y="421" width="0.1767%" height="15" fill="rgb(224,206,25)" fg:x="6387" fg:w="141"/><text x="8.2561%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (141 samples, 0.18%)</title><rect x="8.0061%" y="405" width="0.1767%" height="15" fill="rgb(243,201,19)" fg:x="6387" fg:w="141"/><text x="8.2561%" y="415.50"></text></g><g><title>core::hash::Hasher::write_i64 (131 samples, 0.16%)</title><rect x="8.0186%" y="389" width="0.1642%" height="15" fill="rgb(236,59,4)" fg:x="6397" fg:w="131"/><text x="8.2686%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (131 samples, 0.16%)</title><rect x="8.0186%" y="373" width="0.1642%" height="15" fill="rgb(254,179,45)" fg:x="6397" fg:w="131"/><text x="8.2686%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (131 samples, 0.16%)</title><rect x="8.0186%" y="357" width="0.1642%" height="15" fill="rgb(226,14,10)" fg:x="6397" fg:w="131"/><text x="8.2686%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (131 samples, 0.16%)</title><rect x="8.0186%" y="341" width="0.1642%" height="15" fill="rgb(244,27,41)" fg:x="6397" fg:w="131"/><text x="8.2686%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (131 samples, 0.16%)</title><rect x="8.0186%" y="325" width="0.1642%" height="15" fill="rgb(235,35,32)" fg:x="6397" fg:w="131"/><text x="8.2686%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (103 samples, 0.13%)</title><rect x="8.0537%" y="309" width="0.1291%" height="15" fill="rgb(218,68,31)" fg:x="6425" fg:w="103"/><text x="8.3037%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (19 samples, 0.02%)</title><rect x="8.1590%" y="293" width="0.0238%" height="15" fill="rgb(207,120,37)" fg:x="6509" fg:w="19"/><text x="8.4090%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.18%)</title><rect x="8.2680%" y="405" width="0.1830%" height="15" fill="rgb(227,98,0)" fg:x="6596" fg:w="146"/><text x="8.5180%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (146 samples, 0.18%)</title><rect x="8.2680%" y="389" width="0.1830%" height="15" fill="rgb(207,7,3)" fg:x="6596" fg:w="146"/><text x="8.5180%" y="399.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (16 samples, 0.02%)</title><rect x="8.4511%" y="405" width="0.0201%" height="15" fill="rgb(206,98,19)" fg:x="6742" fg:w="16"/><text x="8.7011%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (123 samples, 0.15%)</title><rect x="8.4711%" y="405" width="0.1542%" height="15" fill="rgb(217,5,26)" fg:x="6758" fg:w="123"/><text x="8.7211%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (123 samples, 0.15%)</title><rect x="8.4711%" y="389" width="0.1542%" height="15" fill="rgb(235,190,38)" fg:x="6758" fg:w="123"/><text x="8.7211%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (123 samples, 0.15%)</title><rect x="8.4711%" y="373" width="0.1542%" height="15" fill="rgb(247,86,24)" fg:x="6758" fg:w="123"/><text x="8.7211%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (123 samples, 0.15%)</title><rect x="8.4711%" y="357" width="0.1542%" height="15" fill="rgb(205,101,16)" fg:x="6758" fg:w="123"/><text x="8.7211%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (123 samples, 0.15%)</title><rect x="8.4711%" y="341" width="0.1542%" height="15" fill="rgb(246,168,33)" fg:x="6758" fg:w="123"/><text x="8.7211%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (126 samples, 0.16%)</title><rect x="8.6253%" y="405" width="0.1579%" height="15" fill="rgb(231,114,1)" fg:x="6881" fg:w="126"/><text x="8.8753%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (30 samples, 0.04%)</title><rect x="8.7882%" y="405" width="0.0376%" height="15" fill="rgb(207,184,53)" fg:x="7011" fg:w="30"/><text x="9.0382%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (95 samples, 0.12%)</title><rect x="8.8259%" y="405" width="0.1191%" height="15" fill="rgb(224,95,51)" fg:x="7041" fg:w="95"/><text x="9.0759%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (95 samples, 0.12%)</title><rect x="8.8259%" y="389" width="0.1191%" height="15" fill="rgb(212,188,45)" fg:x="7041" fg:w="95"/><text x="9.0759%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (95 samples, 0.12%)</title><rect x="8.8259%" y="373" width="0.1191%" height="15" fill="rgb(223,154,38)" fg:x="7041" fg:w="95"/><text x="9.0759%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (119 samples, 0.15%)</title><rect x="8.9449%" y="405" width="0.1492%" height="15" fill="rgb(251,22,52)" fg:x="7136" fg:w="119"/><text x="9.1949%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (119 samples, 0.15%)</title><rect x="8.9449%" y="389" width="0.1492%" height="15" fill="rgb(229,209,22)" fg:x="7136" fg:w="119"/><text x="9.1949%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (95 samples, 0.12%)</title><rect x="9.0941%" y="405" width="0.1191%" height="15" fill="rgb(234,138,34)" fg:x="7255" fg:w="95"/><text x="9.3441%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (95 samples, 0.12%)</title><rect x="9.0941%" y="389" width="0.1191%" height="15" fill="rgb(212,95,11)" fg:x="7255" fg:w="95"/><text x="9.3441%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (95 samples, 0.12%)</title><rect x="9.0941%" y="373" width="0.1191%" height="15" fill="rgb(240,179,47)" fg:x="7255" fg:w="95"/><text x="9.3441%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (830 samples, 1.04%)</title><rect x="8.1828%" y="421" width="1.0404%" height="15" fill="rgb(240,163,11)" fg:x="6528" fg:w="830"/><text x="8.4328%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (8 samples, 0.01%)</title><rect x="9.2132%" y="405" width="0.0100%" height="15" fill="rgb(236,37,12)" fg:x="7350" fg:w="8"/><text x="9.4632%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (1,591 samples, 1.99%)</title><rect x="7.2540%" y="517" width="1.9943%" height="15" fill="rgb(232,164,16)" fg:x="5787" fg:w="1591"/><text x="7.5040%" y="527.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,591 samples, 1.99%)</title><rect x="7.2540%" y="501" width="1.9943%" height="15" fill="rgb(244,205,15)" fg:x="5787" fg:w="1591"/><text x="7.5040%" y="511.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,591 samples, 1.99%)</title><rect x="7.2540%" y="485" width="1.9943%" height="15" fill="rgb(223,117,47)" fg:x="5787" fg:w="1591"/><text x="7.5040%" y="495.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,591 samples, 1.99%)</title><rect x="7.2540%" y="469" width="1.9943%" height="15" fill="rgb(244,107,35)" fg:x="5787" fg:w="1591"/><text x="7.5040%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (850 samples, 1.07%)</title><rect x="8.1828%" y="453" width="1.0655%" height="15" fill="rgb(205,140,8)" fg:x="6528" fg:w="850"/><text x="8.4328%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (850 samples, 1.07%)</title><rect x="8.1828%" y="437" width="1.0655%" height="15" fill="rgb(228,84,46)" fg:x="6528" fg:w="850"/><text x="8.4328%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (20 samples, 0.03%)</title><rect x="9.2232%" y="421" width="0.0251%" height="15" fill="rgb(254,188,9)" fg:x="7358" fg:w="20"/><text x="9.4732%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (3,624 samples, 4.54%)</title><rect x="4.7219%" y="533" width="4.5427%" height="15" fill="rgb(206,112,54)" fg:x="3767" fg:w="3624"/><text x="4.9719%" y="543.50">proje..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (12 samples, 0.02%)</title><rect x="9.2495%" y="517" width="0.0150%" height="15" fill="rgb(216,84,49)" fg:x="7379" fg:w="12"/><text x="9.4995%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (92 samples, 0.12%)</title><rect x="9.4526%" y="437" width="0.1153%" height="15" fill="rgb(214,194,35)" fg:x="7541" fg:w="92"/><text x="9.7026%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (92 samples, 0.12%)</title><rect x="9.4526%" y="421" width="0.1153%" height="15" fill="rgb(249,28,3)" fg:x="7541" fg:w="92"/><text x="9.7026%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.05%)</title><rect x="9.9014%" y="405" width="0.0464%" height="15" fill="rgb(222,56,52)" fg:x="7899" fg:w="37"/><text x="10.1514%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.02%)</title><rect x="9.9477%" y="389" width="0.0226%" height="15" fill="rgb(245,217,50)" fg:x="7936" fg:w="18"/><text x="10.1977%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (81 samples, 0.10%)</title><rect x="9.9014%" y="421" width="0.1015%" height="15" fill="rgb(213,201,24)" fg:x="7899" fg:w="81"/><text x="10.1514%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.06%)</title><rect x="9.9477%" y="405" width="0.0552%" height="15" fill="rgb(248,116,28)" fg:x="7936" fg:w="44"/><text x="10.1977%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.03%)</title><rect x="9.9703%" y="389" width="0.0326%" height="15" fill="rgb(219,72,43)" fg:x="7954" fg:w="26"/><text x="10.2203%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.07%)</title><rect x="10.0054%" y="421" width="0.0689%" height="15" fill="rgb(209,138,14)" fg:x="7982" fg:w="55"/><text x="10.2554%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (55 samples, 0.07%)</title><rect x="10.0054%" y="405" width="0.0689%" height="15" fill="rgb(222,18,33)" fg:x="7982" fg:w="55"/><text x="10.2554%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (206 samples, 0.26%)</title><rect x="10.0743%" y="389" width="0.2582%" height="15" fill="rgb(213,199,7)" fg:x="8037" fg:w="206"/><text x="10.3243%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (206 samples, 0.26%)</title><rect x="10.0743%" y="373" width="0.2582%" height="15" fill="rgb(250,110,10)" fg:x="8037" fg:w="206"/><text x="10.3243%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (219 samples, 0.27%)</title><rect x="10.0743%" y="421" width="0.2745%" height="15" fill="rgb(248,123,6)" fg:x="8037" fg:w="219"/><text x="10.3243%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (219 samples, 0.27%)</title><rect x="10.0743%" y="405" width="0.2745%" height="15" fill="rgb(206,91,31)" fg:x="8037" fg:w="219"/><text x="10.3243%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.02%)</title><rect x="10.3326%" y="389" width="0.0163%" height="15" fill="rgb(211,154,13)" fg:x="8243" fg:w="13"/><text x="10.5826%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.02%)</title><rect x="10.3326%" y="373" width="0.0163%" height="15" fill="rgb(225,148,7)" fg:x="8243" fg:w="13"/><text x="10.5826%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (10 samples, 0.01%)</title><rect x="10.3488%" y="421" width="0.0125%" height="15" fill="rgb(220,160,43)" fg:x="8256" fg:w="10"/><text x="10.5988%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (37 samples, 0.05%)</title><rect x="10.3614%" y="421" width="0.0464%" height="15" fill="rgb(213,52,39)" fg:x="8266" fg:w="37"/><text x="10.6114%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (9 samples, 0.01%)</title><rect x="10.4165%" y="405" width="0.0113%" height="15" fill="rgb(243,137,7)" fg:x="8310" fg:w="9"/><text x="10.6665%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.01%)</title><rect x="10.4165%" y="389" width="0.0113%" height="15" fill="rgb(230,79,13)" fg:x="8310" fg:w="9"/><text x="10.6665%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (44 samples, 0.06%)</title><rect x="10.4078%" y="421" width="0.0552%" height="15" fill="rgb(247,105,23)" fg:x="8303" fg:w="44"/><text x="10.6578%" y="431.50"></text></g><g><title>core::ptr::read (28 samples, 0.04%)</title><rect x="10.4278%" y="405" width="0.0351%" height="15" fill="rgb(223,179,41)" fg:x="8319" fg:w="28"/><text x="10.6778%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (75 samples, 0.09%)</title><rect x="10.4629%" y="421" width="0.0940%" height="15" fill="rgb(218,9,34)" fg:x="8347" fg:w="75"/><text x="10.7129%" y="431.50"></text></g><g><title>core::ptr::write (30 samples, 0.04%)</title><rect x="10.5193%" y="405" width="0.0376%" height="15" fill="rgb(222,106,8)" fg:x="8392" fg:w="30"/><text x="10.7693%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (9 samples, 0.01%)</title><rect x="10.5569%" y="421" width="0.0113%" height="15" fill="rgb(211,220,0)" fg:x="8422" fg:w="9"/><text x="10.8069%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (101 samples, 0.13%)</title><rect x="10.5732%" y="421" width="0.1266%" height="15" fill="rgb(229,52,16)" fg:x="8435" fg:w="101"/><text x="10.8232%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (34 samples, 0.04%)</title><rect x="10.7011%" y="421" width="0.0426%" height="15" fill="rgb(212,155,18)" fg:x="8537" fg:w="34"/><text x="10.9511%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (34 samples, 0.04%)</title><rect x="10.7011%" y="405" width="0.0426%" height="15" fill="rgb(242,21,14)" fg:x="8537" fg:w="34"/><text x="10.9511%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.04%)</title><rect x="10.7011%" y="389" width="0.0426%" height="15" fill="rgb(222,19,48)" fg:x="8537" fg:w="34"/><text x="10.9511%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (27 samples, 0.03%)</title><rect x="10.7099%" y="373" width="0.0338%" height="15" fill="rgb(232,45,27)" fg:x="8544" fg:w="27"/><text x="10.9599%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (27 samples, 0.03%)</title><rect x="10.7099%" y="357" width="0.0338%" height="15" fill="rgb(249,103,42)" fg:x="8544" fg:w="27"/><text x="10.9599%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (57 samples, 0.07%)</title><rect x="10.7437%" y="421" width="0.0714%" height="15" fill="rgb(246,81,33)" fg:x="8571" fg:w="57"/><text x="10.9937%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (57 samples, 0.07%)</title><rect x="10.7437%" y="405" width="0.0714%" height="15" fill="rgb(252,33,42)" fg:x="8571" fg:w="57"/><text x="10.9937%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.01%)</title><rect x="10.8026%" y="389" width="0.0125%" height="15" fill="rgb(209,212,41)" fg:x="8618" fg:w="10"/><text x="11.0526%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1,201 samples, 1.51%)</title><rect x="9.5679%" y="437" width="1.5054%" height="15" fill="rgb(207,154,6)" fg:x="7633" fg:w="1201"/><text x="9.8179%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (206 samples, 0.26%)</title><rect x="10.8151%" y="421" width="0.2582%" height="15" fill="rgb(223,64,47)" fg:x="8628" fg:w="206"/><text x="11.0651%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (35 samples, 0.04%)</title><rect x="11.0295%" y="405" width="0.0439%" height="15" fill="rgb(211,161,38)" fg:x="8799" fg:w="35"/><text x="11.2795%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.03%)</title><rect x="11.0734%" y="405" width="0.0338%" height="15" fill="rgb(219,138,40)" fg:x="8834" fg:w="27"/><text x="11.3234%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (56 samples, 0.07%)</title><rect x="11.0734%" y="437" width="0.0702%" height="15" fill="rgb(241,228,46)" fg:x="8834" fg:w="56"/><text x="11.3234%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (56 samples, 0.07%)</title><rect x="11.0734%" y="421" width="0.0702%" height="15" fill="rgb(223,209,38)" fg:x="8834" fg:w="56"/><text x="11.3234%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 0.04%)</title><rect x="11.1072%" y="405" width="0.0364%" height="15" fill="rgb(236,164,45)" fg:x="8861" fg:w="29"/><text x="11.3572%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 0.04%)</title><rect x="11.1072%" y="389" width="0.0364%" height="15" fill="rgb(231,15,5)" fg:x="8861" fg:w="29"/><text x="11.3572%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (13 samples, 0.02%)</title><rect x="11.1874%" y="421" width="0.0163%" height="15" fill="rgb(252,35,15)" fg:x="8925" fg:w="13"/><text x="11.4374%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (54 samples, 0.07%)</title><rect x="11.1436%" y="437" width="0.0677%" height="15" fill="rgb(248,181,18)" fg:x="8890" fg:w="54"/><text x="11.3936%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (1,466 samples, 1.84%)</title><rect x="9.3761%" y="453" width="1.8376%" height="15" fill="rgb(233,39,42)" fg:x="7480" fg:w="1466"/><text x="9.6261%" y="463.50">p..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1,513 samples, 1.90%)</title><rect x="9.3761%" y="469" width="1.8965%" height="15" fill="rgb(238,110,33)" fg:x="7480" fg:w="1513"/><text x="9.6261%" y="479.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (47 samples, 0.06%)</title><rect x="11.2138%" y="453" width="0.0589%" height="15" fill="rgb(233,195,10)" fg:x="8946" fg:w="47"/><text x="11.4638%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1,659 samples, 2.08%)</title><rect x="9.2646%" y="485" width="2.0795%" height="15" fill="rgb(254,105,3)" fg:x="7391" fg:w="1659"/><text x="9.5146%" y="495.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.07%)</title><rect x="11.2727%" y="469" width="0.0714%" height="15" fill="rgb(221,225,9)" fg:x="8993" fg:w="57"/><text x="11.5227%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1,666 samples, 2.09%)</title><rect x="9.2646%" y="501" width="2.0883%" height="15" fill="rgb(224,227,45)" fg:x="7391" fg:w="1666"/><text x="9.5146%" y="511.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1,667 samples, 2.09%)</title><rect x="9.2646%" y="517" width="2.0896%" height="15" fill="rgb(229,198,43)" fg:x="7391" fg:w="1667"/><text x="9.5146%" y="527.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (39 samples, 0.05%)</title><rect x="11.3830%" y="469" width="0.0489%" height="15" fill="rgb(206,209,35)" fg:x="9081" fg:w="39"/><text x="11.6330%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (30 samples, 0.04%)</title><rect x="11.3943%" y="453" width="0.0376%" height="15" fill="rgb(245,195,53)" fg:x="9090" fg:w="30"/><text x="11.6443%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (30 samples, 0.04%)</title><rect x="11.3943%" y="437" width="0.0376%" height="15" fill="rgb(240,92,26)" fg:x="9090" fg:w="30"/><text x="11.6443%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (86 samples, 0.11%)</title><rect x="11.3541%" y="501" width="0.1078%" height="15" fill="rgb(207,40,23)" fg:x="9058" fg:w="86"/><text x="11.6041%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (83 samples, 0.10%)</title><rect x="11.3579%" y="485" width="0.1040%" height="15" fill="rgb(223,111,35)" fg:x="9061" fg:w="83"/><text x="11.6079%" y="495.50"></text></g><g><title>project1::solver::types::Lit::var (24 samples, 0.03%)</title><rect x="11.4319%" y="469" width="0.0301%" height="15" fill="rgb(229,147,28)" fg:x="9120" fg:w="24"/><text x="11.6819%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (16 samples, 0.02%)</title><rect x="11.4419%" y="453" width="0.0201%" height="15" fill="rgb(211,29,28)" fg:x="9128" fg:w="16"/><text x="11.6919%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (1,756 samples, 2.20%)</title><rect x="9.2646%" y="533" width="2.2011%" height="15" fill="rgb(228,72,33)" fg:x="7391" fg:w="1756"/><text x="9.5146%" y="543.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (89 samples, 0.11%)</title><rect x="11.3541%" y="517" width="0.1116%" height="15" fill="rgb(205,214,31)" fg:x="9058" fg:w="89"/><text x="11.6041%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (53 samples, 0.07%)</title><rect x="11.6425%" y="485" width="0.0664%" height="15" fill="rgb(224,111,15)" fg:x="9288" fg:w="53"/><text x="11.8925%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (216 samples, 0.27%)</title><rect x="11.4657%" y="533" width="0.2708%" height="15" fill="rgb(253,21,26)" fg:x="9147" fg:w="216"/><text x="11.7157%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (216 samples, 0.27%)</title><rect x="11.4657%" y="517" width="0.2708%" height="15" fill="rgb(245,139,43)" fg:x="9147" fg:w="216"/><text x="11.7157%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (75 samples, 0.09%)</title><rect x="11.6425%" y="501" width="0.0940%" height="15" fill="rgb(252,170,7)" fg:x="9288" fg:w="75"/><text x="11.8925%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (22 samples, 0.03%)</title><rect x="11.7089%" y="485" width="0.0276%" height="15" fill="rgb(231,118,14)" fg:x="9341" fg:w="22"/><text x="11.9589%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.03%)</title><rect x="11.7089%" y="469" width="0.0276%" height="15" fill="rgb(238,83,0)" fg:x="9341" fg:w="22"/><text x="11.9589%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="11.7365%" y="501" width="0.0238%" height="15" fill="rgb(221,39,39)" fg:x="9363" fg:w="19"/><text x="11.9865%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (22 samples, 0.03%)</title><rect x="11.7365%" y="533" width="0.0276%" height="15" fill="rgb(222,119,46)" fg:x="9363" fg:w="22"/><text x="11.9865%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (22 samples, 0.03%)</title><rect x="11.7365%" y="517" width="0.0276%" height="15" fill="rgb(222,165,49)" fg:x="9363" fg:w="22"/><text x="11.9865%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (77 samples, 0.10%)</title><rect x="11.7640%" y="533" width="0.0965%" height="15" fill="rgb(219,113,52)" fg:x="9385" fg:w="77"/><text x="12.0140%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (100 samples, 0.13%)</title><rect x="11.8606%" y="533" width="0.1253%" height="15" fill="rgb(214,7,15)" fg:x="9462" fg:w="100"/><text x="12.1106%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (100 samples, 0.13%)</title><rect x="11.8606%" y="517" width="0.1253%" height="15" fill="rgb(235,32,4)" fg:x="9462" fg:w="100"/><text x="12.1106%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (100 samples, 0.13%)</title><rect x="11.8606%" y="501" width="0.1253%" height="15" fill="rgb(238,90,54)" fg:x="9462" fg:w="100"/><text x="12.1106%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (100 samples, 0.13%)</title><rect x="11.8606%" y="485" width="0.1253%" height="15" fill="rgb(213,208,19)" fg:x="9462" fg:w="100"/><text x="12.1106%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (100 samples, 0.13%)</title><rect x="11.8606%" y="469" width="0.1253%" height="15" fill="rgb(233,156,4)" fg:x="9462" fg:w="100"/><text x="12.1106%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (45 samples, 0.06%)</title><rect x="12.0473%" y="517" width="0.0564%" height="15" fill="rgb(207,194,5)" fg:x="9611" fg:w="45"/><text x="12.2973%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var (126 samples, 0.16%)</title><rect x="11.9934%" y="533" width="0.1579%" height="15" fill="rgb(206,111,30)" fg:x="9568" fg:w="126"/><text x="12.2434%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (38 samples, 0.05%)</title><rect x="12.1037%" y="517" width="0.0476%" height="15" fill="rgb(243,70,54)" fg:x="9656" fg:w="38"/><text x="12.3537%" y="527.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (42 samples, 0.05%)</title><rect x="12.1990%" y="517" width="0.0526%" height="15" fill="rgb(242,28,8)" fg:x="9732" fg:w="42"/><text x="12.4490%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (9,110 samples, 11.42%)</title><rect x="0.8423%" y="549" width="11.4193%" height="15" fill="rgb(219,106,18)" fg:x="672" fg:w="9110"/><text x="1.0923%" y="559.50">project1::solver:..</text></g><g><title>project1::solver::types::Lit::var_idx (88 samples, 0.11%)</title><rect x="12.1514%" y="533" width="0.1103%" height="15" fill="rgb(244,222,10)" fg:x="9694" fg:w="88"/><text x="12.4014%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (8 samples, 0.01%)</title><rect x="12.2517%" y="517" width="0.0100%" height="15" fill="rgb(236,179,52)" fg:x="9774" fg:w="8"/><text x="12.5017%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (68 samples, 0.09%)</title><rect x="12.2617%" y="549" width="0.0852%" height="15" fill="rgb(213,23,39)" fg:x="9782" fg:w="68"/><text x="12.5117%" y="559.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (59 samples, 0.07%)</title><rect x="12.2730%" y="533" width="0.0740%" height="15" fill="rgb(238,48,10)" fg:x="9791" fg:w="59"/><text x="12.5230%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (58 samples, 0.07%)</title><rect x="12.2742%" y="517" width="0.0727%" height="15" fill="rgb(251,196,23)" fg:x="9792" fg:w="58"/><text x="12.5242%" y="527.50"></text></g><g><title>core::ptr::write (35 samples, 0.04%)</title><rect x="12.3030%" y="501" width="0.0439%" height="15" fill="rgb(250,152,24)" fg:x="9815" fg:w="35"/><text x="12.5530%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (34 samples, 0.04%)</title><rect x="12.4171%" y="517" width="0.0426%" height="15" fill="rgb(209,150,17)" fg:x="9906" fg:w="34"/><text x="12.6671%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (18 samples, 0.02%)</title><rect x="12.4372%" y="501" width="0.0226%" height="15" fill="rgb(234,202,34)" fg:x="9922" fg:w="18"/><text x="12.6872%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.02%)</title><rect x="12.4372%" y="485" width="0.0226%" height="15" fill="rgb(253,148,53)" fg:x="9922" fg:w="18"/><text x="12.6872%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (55 samples, 0.07%)</title><rect x="12.4171%" y="533" width="0.0689%" height="15" fill="rgb(218,129,16)" fg:x="9906" fg:w="55"/><text x="12.6671%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (21 samples, 0.03%)</title><rect x="12.4597%" y="517" width="0.0263%" height="15" fill="rgb(216,85,19)" fg:x="9940" fg:w="21"/><text x="12.7097%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (21 samples, 0.03%)</title><rect x="12.4597%" y="501" width="0.0263%" height="15" fill="rgb(235,228,7)" fg:x="9940" fg:w="21"/><text x="12.7097%" y="511.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (9 samples, 0.01%)</title><rect x="12.4923%" y="517" width="0.0113%" height="15" fill="rgb(245,175,0)" fg:x="9966" fg:w="9"/><text x="12.7423%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (9 samples, 0.01%)</title><rect x="12.4923%" y="501" width="0.0113%" height="15" fill="rgb(208,168,36)" fg:x="9966" fg:w="9"/><text x="12.7423%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (12 samples, 0.02%)</title><rect x="12.4898%" y="533" width="0.0150%" height="15" fill="rgb(246,171,24)" fg:x="9964" fg:w="12"/><text x="12.7398%" y="543.50"></text></g><g><title>log::max_level (9 samples, 0.01%)</title><rect x="12.5049%" y="533" width="0.0113%" height="15" fill="rgb(215,142,24)" fg:x="9976" fg:w="9"/><text x="12.7549%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.01%)</title><rect x="12.5049%" y="517" width="0.0113%" height="15" fill="rgb(250,187,7)" fg:x="9976" fg:w="9"/><text x="12.7549%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.01%)</title><rect x="12.5049%" y="501" width="0.0113%" height="15" fill="rgb(228,66,33)" fg:x="9976" fg:w="9"/><text x="12.7549%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.02%)</title><rect x="12.5224%" y="501" width="0.0188%" height="15" fill="rgb(234,215,21)" fg:x="9990" fg:w="15"/><text x="12.7724%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (22 samples, 0.03%)</title><rect x="12.5224%" y="517" width="0.0276%" height="15" fill="rgb(222,191,20)" fg:x="9990" fg:w="22"/><text x="12.7724%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.02%)</title><rect x="12.5500%" y="517" width="0.0213%" height="15" fill="rgb(245,79,54)" fg:x="10012" fg:w="17"/><text x="12.8000%" y="527.50"></text></g><g><title>core::ptr::write (14 samples, 0.02%)</title><rect x="12.5537%" y="501" width="0.0175%" height="15" fill="rgb(240,10,37)" fg:x="10015" fg:w="14"/><text x="12.8037%" y="511.50"></text></g><g><title>core::ptr::read (106 samples, 0.13%)</title><rect x="12.5713%" y="501" width="0.1329%" height="15" fill="rgb(214,192,32)" fg:x="10029" fg:w="106"/><text x="12.8213%" y="511.50"></text></g><g><title>core::mem::replace (143 samples, 0.18%)</title><rect x="12.5713%" y="517" width="0.1792%" height="15" fill="rgb(209,36,54)" fg:x="10029" fg:w="143"/><text x="12.8213%" y="527.50"></text></g><g><title>core::ptr::write (37 samples, 0.05%)</title><rect x="12.7042%" y="501" width="0.0464%" height="15" fill="rgb(220,10,11)" fg:x="10135" fg:w="37"/><text x="12.9542%" y="511.50"></text></g><g><title>core::mem::swap (15 samples, 0.02%)</title><rect x="12.7505%" y="517" width="0.0188%" height="15" fill="rgb(221,106,17)" fg:x="10172" fg:w="15"/><text x="13.0005%" y="527.50"></text></g><g><title>core::mem::swap_simple (15 samples, 0.02%)</title><rect x="12.7505%" y="501" width="0.0188%" height="15" fill="rgb(251,142,44)" fg:x="10172" fg:w="15"/><text x="13.0005%" y="511.50"></text></g><g><title>core::ptr::write (12 samples, 0.02%)</title><rect x="12.7543%" y="485" width="0.0150%" height="15" fill="rgb(238,13,15)" fg:x="10175" fg:w="12"/><text x="13.0043%" y="495.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (14 samples, 0.02%)</title><rect x="12.7693%" y="517" width="0.0175%" height="15" fill="rgb(208,107,27)" fg:x="10187" fg:w="14"/><text x="13.0193%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.05%)</title><rect x="12.8082%" y="469" width="0.0539%" height="15" fill="rgb(205,136,37)" fg:x="10218" fg:w="43"/><text x="13.0582%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.01%)</title><rect x="12.8671%" y="325" width="0.0113%" height="15" fill="rgb(250,205,27)" fg:x="10265" fg:w="9"/><text x="13.1171%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="12.8621%" y="389" width="0.0188%" height="15" fill="rgb(210,80,43)" fg:x="10261" fg:w="15"/><text x="13.1121%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="12.8621%" y="373" width="0.0188%" height="15" fill="rgb(247,160,36)" fg:x="10261" fg:w="15"/><text x="13.1121%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="12.8621%" y="357" width="0.0188%" height="15" fill="rgb(234,13,49)" fg:x="10261" fg:w="15"/><text x="13.1121%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13 samples, 0.02%)</title><rect x="12.8646%" y="341" width="0.0163%" height="15" fill="rgb(234,122,0)" fg:x="10263" fg:w="13"/><text x="13.1146%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.03%)</title><rect x="12.8621%" y="421" width="0.0313%" height="15" fill="rgb(207,146,38)" fg:x="10261" fg:w="25"/><text x="13.1121%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.03%)</title><rect x="12.8621%" y="405" width="0.0313%" height="15" fill="rgb(207,177,25)" fg:x="10261" fg:w="25"/><text x="13.1121%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.01%)</title><rect x="12.8834%" y="389" width="0.0100%" height="15" fill="rgb(211,178,42)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (8 samples, 0.01%)</title><rect x="12.8834%" y="373" width="0.0100%" height="15" fill="rgb(230,69,54)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="383.50"></text></g><g><title>core::hash::Hasher::write_i64 (8 samples, 0.01%)</title><rect x="12.8834%" y="357" width="0.0100%" height="15" fill="rgb(214,135,41)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u64 (8 samples, 0.01%)</title><rect x="12.8834%" y="341" width="0.0100%" height="15" fill="rgb(237,67,25)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="12.8834%" y="325" width="0.0100%" height="15" fill="rgb(222,189,50)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="12.8834%" y="309" width="0.0100%" height="15" fill="rgb(245,148,34)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="12.8834%" y="293" width="0.0100%" height="15" fill="rgb(222,29,6)" fg:x="10278" fg:w="8"/><text x="13.1334%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.01%)</title><rect x="12.8934%" y="405" width="0.0138%" height="15" fill="rgb(221,189,43)" fg:x="10286" fg:w="11"/><text x="13.1434%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11 samples, 0.01%)</title><rect x="12.8934%" y="389" width="0.0138%" height="15" fill="rgb(207,36,27)" fg:x="10286" fg:w="11"/><text x="13.1434%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (82 samples, 0.10%)</title><rect x="12.8069%" y="501" width="0.1028%" height="15" fill="rgb(217,90,24)" fg:x="10217" fg:w="82"/><text x="13.0569%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.10%)</title><rect x="12.8069%" y="485" width="0.1028%" height="15" fill="rgb(224,66,35)" fg:x="10217" fg:w="82"/><text x="13.0569%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (38 samples, 0.05%)</title><rect x="12.8621%" y="469" width="0.0476%" height="15" fill="rgb(221,13,50)" fg:x="10261" fg:w="38"/><text x="13.1121%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (38 samples, 0.05%)</title><rect x="12.8621%" y="453" width="0.0476%" height="15" fill="rgb(236,68,49)" fg:x="10261" fg:w="38"/><text x="13.1121%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (38 samples, 0.05%)</title><rect x="12.8621%" y="437" width="0.0476%" height="15" fill="rgb(229,146,28)" fg:x="10261" fg:w="38"/><text x="13.1121%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.02%)</title><rect x="12.8934%" y="421" width="0.0163%" height="15" fill="rgb(225,31,38)" fg:x="10286" fg:w="13"/><text x="13.1434%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (96 samples, 0.12%)</title><rect x="12.7932%" y="517" width="0.1203%" height="15" fill="rgb(250,208,3)" fg:x="10206" fg:w="96"/><text x="13.0432%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 0.03%)</title><rect x="12.9649%" y="341" width="0.0288%" height="15" fill="rgb(246,54,23)" fg:x="10343" fg:w="23"/><text x="13.2149%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (47 samples, 0.06%)</title><rect x="12.9511%" y="357" width="0.0589%" height="15" fill="rgb(243,76,11)" fg:x="10332" fg:w="47"/><text x="13.2011%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.02%)</title><rect x="12.9937%" y="341" width="0.0163%" height="15" fill="rgb(245,21,50)" fg:x="10366" fg:w="13"/><text x="13.2437%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (48 samples, 0.06%)</title><rect x="13.0664%" y="341" width="0.0602%" height="15" fill="rgb(228,9,43)" fg:x="10424" fg:w="48"/><text x="13.3164%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.05%)</title><rect x="13.1266%" y="341" width="0.0489%" height="15" fill="rgb(208,100,47)" fg:x="10472" fg:w="39"/><text x="13.3766%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (192 samples, 0.24%)</title><rect x="12.9411%" y="405" width="0.2407%" height="15" fill="rgb(232,26,8)" fg:x="10324" fg:w="192"/><text x="13.1911%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (192 samples, 0.24%)</title><rect x="12.9411%" y="389" width="0.2407%" height="15" fill="rgb(216,166,38)" fg:x="10324" fg:w="192"/><text x="13.1911%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (192 samples, 0.24%)</title><rect x="12.9411%" y="373" width="0.2407%" height="15" fill="rgb(251,202,51)" fg:x="10324" fg:w="192"/><text x="13.1911%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (137 samples, 0.17%)</title><rect x="13.0100%" y="357" width="0.1717%" height="15" fill="rgb(254,216,34)" fg:x="10379" fg:w="137"/><text x="13.2600%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (14 samples, 0.02%)</title><rect x="13.1817%" y="405" width="0.0175%" height="15" fill="rgb(251,32,27)" fg:x="10516" fg:w="14"/><text x="13.4317%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.02%)</title><rect x="13.2193%" y="277" width="0.0175%" height="15" fill="rgb(208,127,28)" fg:x="10546" fg:w="14"/><text x="13.4693%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (244 samples, 0.31%)</title><rect x="12.9411%" y="437" width="0.3059%" height="15" fill="rgb(224,137,22)" fg:x="10324" fg:w="244"/><text x="13.1911%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (244 samples, 0.31%)</title><rect x="12.9411%" y="421" width="0.3059%" height="15" fill="rgb(254,70,32)" fg:x="10324" fg:w="244"/><text x="13.1911%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (38 samples, 0.05%)</title><rect x="13.1993%" y="405" width="0.0476%" height="15" fill="rgb(229,75,37)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (38 samples, 0.05%)</title><rect x="13.1993%" y="389" width="0.0476%" height="15" fill="rgb(252,64,23)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i64 (38 samples, 0.05%)</title><rect x="13.1993%" y="373" width="0.0476%" height="15" fill="rgb(232,162,48)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (38 samples, 0.05%)</title><rect x="13.1993%" y="357" width="0.0476%" height="15" fill="rgb(246,160,12)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 0.05%)</title><rect x="13.1993%" y="341" width="0.0476%" height="15" fill="rgb(247,166,0)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (38 samples, 0.05%)</title><rect x="13.1993%" y="325" width="0.0476%" height="15" fill="rgb(249,219,21)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (38 samples, 0.05%)</title><rect x="13.1993%" y="309" width="0.0476%" height="15" fill="rgb(205,209,3)" fg:x="10530" fg:w="38"/><text x="13.4493%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22 samples, 0.03%)</title><rect x="13.2193%" y="293" width="0.0276%" height="15" fill="rgb(243,44,1)" fg:x="10546" fg:w="22"/><text x="13.4693%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.01%)</title><rect x="13.2369%" y="277" width="0.0100%" height="15" fill="rgb(206,159,16)" fg:x="10560" fg:w="8"/><text x="13.4869%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="13.2720%" y="389" width="0.0213%" height="15" fill="rgb(244,77,30)" fg:x="10588" fg:w="17"/><text x="13.5220%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.02%)</title><rect x="13.2770%" y="373" width="0.0163%" height="15" fill="rgb(218,69,12)" fg:x="10592" fg:w="13"/><text x="13.5270%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (32 samples, 0.04%)</title><rect x="13.2933%" y="373" width="0.0401%" height="15" fill="rgb(212,87,7)" fg:x="10605" fg:w="32"/><text x="13.5433%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (32 samples, 0.04%)</title><rect x="13.2933%" y="357" width="0.0401%" height="15" fill="rgb(245,114,25)" fg:x="10605" fg:w="32"/><text x="13.5433%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.04%)</title><rect x="13.2933%" y="341" width="0.0401%" height="15" fill="rgb(210,61,42)" fg:x="10605" fg:w="32"/><text x="13.5433%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (32 samples, 0.04%)</title><rect x="13.2933%" y="325" width="0.0401%" height="15" fill="rgb(211,52,33)" fg:x="10605" fg:w="32"/><text x="13.5433%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (16 samples, 0.02%)</title><rect x="13.3334%" y="325" width="0.0201%" height="15" fill="rgb(234,58,33)" fg:x="10637" fg:w="16"/><text x="13.5834%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (52 samples, 0.07%)</title><rect x="13.2933%" y="389" width="0.0652%" height="15" fill="rgb(220,115,36)" fg:x="10605" fg:w="52"/><text x="13.5433%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (20 samples, 0.03%)</title><rect x="13.3334%" y="373" width="0.0251%" height="15" fill="rgb(243,153,54)" fg:x="10637" fg:w="20"/><text x="13.5834%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (20 samples, 0.03%)</title><rect x="13.3334%" y="357" width="0.0251%" height="15" fill="rgb(251,47,18)" fg:x="10637" fg:w="20"/><text x="13.5834%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (20 samples, 0.03%)</title><rect x="13.3334%" y="341" width="0.0251%" height="15" fill="rgb(242,102,42)" fg:x="10637" fg:w="20"/><text x="13.5834%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (24 samples, 0.03%)</title><rect x="13.3585%" y="389" width="0.0301%" height="15" fill="rgb(234,31,38)" fg:x="10657" fg:w="24"/><text x="13.6085%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (142 samples, 0.18%)</title><rect x="13.2469%" y="421" width="0.1780%" height="15" fill="rgb(221,117,51)" fg:x="10568" fg:w="142"/><text x="13.4969%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (137 samples, 0.17%)</title><rect x="13.2532%" y="405" width="0.1717%" height="15" fill="rgb(212,20,18)" fg:x="10573" fg:w="137"/><text x="13.5032%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (20 samples, 0.03%)</title><rect x="13.3999%" y="389" width="0.0251%" height="15" fill="rgb(245,133,36)" fg:x="10690" fg:w="20"/><text x="13.6499%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.03%)</title><rect x="13.3999%" y="373" width="0.0251%" height="15" fill="rgb(212,6,19)" fg:x="10690" fg:w="20"/><text x="13.6499%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (391 samples, 0.49%)</title><rect x="12.9361%" y="453" width="0.4901%" height="15" fill="rgb(218,1,36)" fg:x="10320" fg:w="391"/><text x="13.1861%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (143 samples, 0.18%)</title><rect x="13.2469%" y="437" width="0.1792%" height="15" fill="rgb(246,84,54)" fg:x="10568" fg:w="143"/><text x="13.4969%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (403 samples, 0.51%)</title><rect x="12.9361%" y="501" width="0.5052%" height="15" fill="rgb(242,110,6)" fg:x="10320" fg:w="403"/><text x="13.1861%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (403 samples, 0.51%)</title><rect x="12.9361%" y="485" width="0.5052%" height="15" fill="rgb(214,47,5)" fg:x="10320" fg:w="403"/><text x="13.1861%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (403 samples, 0.51%)</title><rect x="12.9361%" y="469" width="0.5052%" height="15" fill="rgb(218,159,25)" fg:x="10320" fg:w="403"/><text x="13.1861%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (12 samples, 0.02%)</title><rect x="13.4262%" y="453" width="0.0150%" height="15" fill="rgb(215,211,28)" fg:x="10711" fg:w="12"/><text x="13.6762%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (11 samples, 0.01%)</title><rect x="13.4412%" y="485" width="0.0138%" height="15" fill="rgb(238,59,32)" fg:x="10723" fg:w="11"/><text x="13.6912%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (27 samples, 0.03%)</title><rect x="13.4876%" y="373" width="0.0338%" height="15" fill="rgb(226,82,3)" fg:x="10760" fg:w="27"/><text x="13.7376%" y="383.50"></text></g><g><title>compare::Compare::compares_ge (33 samples, 0.04%)</title><rect x="13.4876%" y="469" width="0.0414%" height="15" fill="rgb(240,164,32)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (33 samples, 0.04%)</title><rect x="13.4876%" y="453" width="0.0414%" height="15" fill="rgb(232,46,7)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (33 samples, 0.04%)</title><rect x="13.4876%" y="437" width="0.0414%" height="15" fill="rgb(229,129,53)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (33 samples, 0.04%)</title><rect x="13.4876%" y="421" width="0.0414%" height="15" fill="rgb(234,188,29)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (33 samples, 0.04%)</title><rect x="13.4876%" y="405" width="0.0414%" height="15" fill="rgb(246,141,4)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (33 samples, 0.04%)</title><rect x="13.4876%" y="389" width="0.0414%" height="15" fill="rgb(229,23,39)" fg:x="10760" fg:w="33"/><text x="13.7376%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (35 samples, 0.04%)</title><rect x="13.5290%" y="453" width="0.0439%" height="15" fill="rgb(206,12,3)" fg:x="10793" fg:w="35"/><text x="13.7790%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (35 samples, 0.04%)</title><rect x="13.5290%" y="437" width="0.0439%" height="15" fill="rgb(252,226,20)" fg:x="10793" fg:w="35"/><text x="13.7790%" y="447.50"></text></g><g><title>compare::Compare::compares_le (44 samples, 0.06%)</title><rect x="13.5290%" y="469" width="0.0552%" height="15" fill="rgb(216,123,35)" fg:x="10793" fg:w="44"/><text x="13.7790%" y="479.50"></text></g><g><title>core::cmp::PartialEq::ne (9 samples, 0.01%)</title><rect x="13.5728%" y="453" width="0.0113%" height="15" fill="rgb(212,68,40)" fg:x="10828" fg:w="9"/><text x="13.8228%" y="463.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="13.5728%" y="437" width="0.0113%" height="15" fill="rgb(254,125,32)" fg:x="10828" fg:w="9"/><text x="13.8228%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (151 samples, 0.19%)</title><rect x="13.6029%" y="437" width="0.1893%" height="15" fill="rgb(253,97,22)" fg:x="10852" fg:w="151"/><text x="13.8529%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (9 samples, 0.01%)</title><rect x="13.7922%" y="437" width="0.0113%" height="15" fill="rgb(241,101,14)" fg:x="11003" fg:w="9"/><text x="14.0422%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (9 samples, 0.01%)</title><rect x="13.7922%" y="421" width="0.0113%" height="15" fill="rgb(238,103,29)" fg:x="11003" fg:w="9"/><text x="14.0422%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.01%)</title><rect x="13.7922%" y="405" width="0.0113%" height="15" fill="rgb(233,195,47)" fg:x="11003" fg:w="9"/><text x="14.0422%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.03%)</title><rect x="13.8586%" y="293" width="0.0338%" height="15" fill="rgb(246,218,30)" fg:x="11056" fg:w="27"/><text x="14.1086%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (66 samples, 0.08%)</title><rect x="13.8373%" y="309" width="0.0827%" height="15" fill="rgb(219,145,47)" fg:x="11039" fg:w="66"/><text x="14.0873%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (22 samples, 0.03%)</title><rect x="13.8925%" y="293" width="0.0276%" height="15" fill="rgb(243,12,26)" fg:x="11083" fg:w="22"/><text x="14.1425%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (57 samples, 0.07%)</title><rect x="13.9752%" y="293" width="0.0714%" height="15" fill="rgb(214,87,16)" fg:x="11149" fg:w="57"/><text x="14.2252%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (220 samples, 0.28%)</title><rect x="13.8085%" y="357" width="0.2758%" height="15" fill="rgb(208,99,42)" fg:x="11016" fg:w="220"/><text x="14.0585%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (220 samples, 0.28%)</title><rect x="13.8085%" y="341" width="0.2758%" height="15" fill="rgb(253,99,2)" fg:x="11016" fg:w="220"/><text x="14.0585%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (220 samples, 0.28%)</title><rect x="13.8085%" y="325" width="0.2758%" height="15" fill="rgb(220,168,23)" fg:x="11016" fg:w="220"/><text x="14.0585%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (131 samples, 0.16%)</title><rect x="13.9201%" y="309" width="0.1642%" height="15" fill="rgb(242,38,24)" fg:x="11105" fg:w="131"/><text x="14.1701%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.04%)</title><rect x="14.0467%" y="293" width="0.0376%" height="15" fill="rgb(225,182,9)" fg:x="11206" fg:w="30"/><text x="14.2967%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (31 samples, 0.04%)</title><rect x="14.0843%" y="357" width="0.0389%" height="15" fill="rgb(243,178,37)" fg:x="11236" fg:w="31"/><text x="14.3343%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (20 samples, 0.03%)</title><rect x="14.0980%" y="341" width="0.0251%" height="15" fill="rgb(232,139,19)" fg:x="11247" fg:w="20"/><text x="14.3480%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (20 samples, 0.03%)</title><rect x="14.0980%" y="325" width="0.0251%" height="15" fill="rgb(225,201,24)" fg:x="11247" fg:w="20"/><text x="14.3480%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (20 samples, 0.03%)</title><rect x="14.0980%" y="309" width="0.0251%" height="15" fill="rgb(221,47,46)" fg:x="11247" fg:w="20"/><text x="14.3480%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (290 samples, 0.36%)</title><rect x="13.8085%" y="389" width="0.3635%" height="15" fill="rgb(249,23,13)" fg:x="11016" fg:w="290"/><text x="14.0585%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (290 samples, 0.36%)</title><rect x="13.8085%" y="373" width="0.3635%" height="15" fill="rgb(219,9,5)" fg:x="11016" fg:w="290"/><text x="14.0585%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (39 samples, 0.05%)</title><rect x="14.1231%" y="357" width="0.0489%" height="15" fill="rgb(254,171,16)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (39 samples, 0.05%)</title><rect x="14.1231%" y="341" width="0.0489%" height="15" fill="rgb(230,171,20)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (39 samples, 0.05%)</title><rect x="14.1231%" y="325" width="0.0489%" height="15" fill="rgb(210,71,41)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (39 samples, 0.05%)</title><rect x="14.1231%" y="309" width="0.0489%" height="15" fill="rgb(206,173,20)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.05%)</title><rect x="14.1231%" y="293" width="0.0489%" height="15" fill="rgb(233,88,34)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (39 samples, 0.05%)</title><rect x="14.1231%" y="277" width="0.0489%" height="15" fill="rgb(223,209,46)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39 samples, 0.05%)</title><rect x="14.1231%" y="261" width="0.0489%" height="15" fill="rgb(250,43,18)" fg:x="11267" fg:w="39"/><text x="14.3731%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22 samples, 0.03%)</title><rect x="14.1444%" y="245" width="0.0276%" height="15" fill="rgb(208,13,10)" fg:x="11284" fg:w="22"/><text x="14.3944%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="14.1783%" y="341" width="0.0238%" height="15" fill="rgb(212,200,36)" fg:x="11311" fg:w="19"/><text x="14.4283%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (34 samples, 0.04%)</title><rect x="14.2021%" y="325" width="0.0426%" height="15" fill="rgb(225,90,30)" fg:x="11330" fg:w="34"/><text x="14.4521%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (34 samples, 0.04%)</title><rect x="14.2021%" y="309" width="0.0426%" height="15" fill="rgb(236,182,39)" fg:x="11330" fg:w="34"/><text x="14.4521%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34 samples, 0.04%)</title><rect x="14.2021%" y="293" width="0.0426%" height="15" fill="rgb(212,144,35)" fg:x="11330" fg:w="34"/><text x="14.4521%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (34 samples, 0.04%)</title><rect x="14.2021%" y="277" width="0.0426%" height="15" fill="rgb(228,63,44)" fg:x="11330" fg:w="34"/><text x="14.4521%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.02%)</title><rect x="14.2447%" y="277" width="0.0163%" height="15" fill="rgb(228,109,6)" fg:x="11364" fg:w="13"/><text x="14.4947%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (51 samples, 0.06%)</title><rect x="14.2021%" y="341" width="0.0639%" height="15" fill="rgb(238,117,24)" fg:x="11330" fg:w="51"/><text x="14.4521%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (17 samples, 0.02%)</title><rect x="14.2447%" y="325" width="0.0213%" height="15" fill="rgb(242,26,26)" fg:x="11364" fg:w="17"/><text x="14.4947%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (17 samples, 0.02%)</title><rect x="14.2447%" y="309" width="0.0213%" height="15" fill="rgb(221,92,48)" fg:x="11364" fg:w="17"/><text x="14.4947%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.02%)</title><rect x="14.2447%" y="293" width="0.0213%" height="15" fill="rgb(209,209,32)" fg:x="11364" fg:w="17"/><text x="14.4947%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (37 samples, 0.05%)</title><rect x="14.2660%" y="341" width="0.0464%" height="15" fill="rgb(221,70,22)" fg:x="11381" fg:w="37"/><text x="14.5160%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (30 samples, 0.04%)</title><rect x="14.3212%" y="341" width="0.0376%" height="15" fill="rgb(248,145,5)" fg:x="11425" fg:w="30"/><text x="14.5712%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (30 samples, 0.04%)</title><rect x="14.3212%" y="325" width="0.0376%" height="15" fill="rgb(226,116,26)" fg:x="11425" fg:w="30"/><text x="14.5712%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.04%)</title><rect x="14.3212%" y="309" width="0.0376%" height="15" fill="rgb(244,5,17)" fg:x="11425" fg:w="30"/><text x="14.5712%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (182 samples, 0.23%)</title><rect x="14.1720%" y="357" width="0.2281%" height="15" fill="rgb(252,159,33)" fg:x="11306" fg:w="182"/><text x="14.4220%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.04%)</title><rect x="14.3588%" y="341" width="0.0414%" height="15" fill="rgb(206,71,0)" fg:x="11455" fg:w="33"/><text x="14.6088%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (33 samples, 0.04%)</title><rect x="14.3588%" y="325" width="0.0414%" height="15" fill="rgb(233,118,54)" fg:x="11455" fg:w="33"/><text x="14.6088%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (650 samples, 0.81%)</title><rect x="13.5891%" y="469" width="0.8148%" height="15" fill="rgb(234,83,48)" fg:x="10841" fg:w="650"/><text x="13.8391%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (650 samples, 0.81%)</title><rect x="13.5891%" y="453" width="0.8148%" height="15" fill="rgb(228,3,54)" fg:x="10841" fg:w="650"/><text x="13.8391%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (479 samples, 0.60%)</title><rect x="13.8035%" y="437" width="0.6004%" height="15" fill="rgb(226,155,13)" fg:x="11012" fg:w="479"/><text x="14.0535%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (479 samples, 0.60%)</title><rect x="13.8035%" y="421" width="0.6004%" height="15" fill="rgb(241,28,37)" fg:x="11012" fg:w="479"/><text x="14.0535%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (479 samples, 0.60%)</title><rect x="13.8035%" y="405" width="0.6004%" height="15" fill="rgb(233,93,10)" fg:x="11012" fg:w="479"/><text x="14.0535%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (185 samples, 0.23%)</title><rect x="14.1720%" y="389" width="0.2319%" height="15" fill="rgb(225,113,19)" fg:x="11306" fg:w="185"/><text x="14.4220%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (185 samples, 0.23%)</title><rect x="14.1720%" y="373" width="0.2319%" height="15" fill="rgb(241,2,18)" fg:x="11306" fg:w="185"/><text x="14.4220%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (794 samples, 1.00%)</title><rect x="13.4550%" y="485" width="0.9953%" height="15" fill="rgb(228,207,21)" fg:x="10734" fg:w="794"/><text x="13.7050%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (37 samples, 0.05%)</title><rect x="14.4039%" y="469" width="0.0464%" height="15" fill="rgb(213,211,35)" fg:x="11491" fg:w="37"/><text x="14.6539%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (824 samples, 1.03%)</title><rect x="13.4412%" y="501" width="1.0329%" height="15" fill="rgb(209,83,10)" fg:x="10723" fg:w="824"/><text x="13.6912%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (19 samples, 0.02%)</title><rect x="14.4503%" y="485" width="0.0238%" height="15" fill="rgb(209,164,1)" fg:x="11528" fg:w="19"/><text x="14.7003%" y="495.50"></text></g><g><title>compare::Compare::compares_le (72 samples, 0.09%)</title><rect x="14.5267%" y="485" width="0.0903%" height="15" fill="rgb(213,184,43)" fg:x="11589" fg:w="72"/><text x="14.7767%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (72 samples, 0.09%)</title><rect x="14.5267%" y="469" width="0.0903%" height="15" fill="rgb(231,61,34)" fg:x="11589" fg:w="72"/><text x="14.7767%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (72 samples, 0.09%)</title><rect x="14.5267%" y="453" width="0.0903%" height="15" fill="rgb(235,75,3)" fg:x="11589" fg:w="72"/><text x="14.7767%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (104 samples, 0.13%)</title><rect x="14.6283%" y="453" width="0.1304%" height="15" fill="rgb(220,106,47)" fg:x="11670" fg:w="104"/><text x="14.8783%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.02%)</title><rect x="14.8301%" y="309" width="0.0150%" height="15" fill="rgb(210,196,33)" fg:x="11831" fg:w="12"/><text x="15.0801%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (38 samples, 0.05%)</title><rect x="14.8100%" y="325" width="0.0476%" height="15" fill="rgb(229,154,42)" fg:x="11815" fg:w="38"/><text x="15.0600%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.01%)</title><rect x="14.8451%" y="309" width="0.0125%" height="15" fill="rgb(228,114,26)" fg:x="11843" fg:w="10"/><text x="15.0951%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (63 samples, 0.08%)</title><rect x="14.9040%" y="309" width="0.0790%" height="15" fill="rgb(208,144,1)" fg:x="11890" fg:w="63"/><text x="15.1540%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (201 samples, 0.25%)</title><rect x="14.7611%" y="373" width="0.2520%" height="15" fill="rgb(239,112,37)" fg:x="11776" fg:w="201"/><text x="15.0111%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (201 samples, 0.25%)</title><rect x="14.7611%" y="357" width="0.2520%" height="15" fill="rgb(210,96,50)" fg:x="11776" fg:w="201"/><text x="15.0111%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (201 samples, 0.25%)</title><rect x="14.7611%" y="341" width="0.2520%" height="15" fill="rgb(222,178,2)" fg:x="11776" fg:w="201"/><text x="15.0111%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (124 samples, 0.16%)</title><rect x="14.8577%" y="325" width="0.1554%" height="15" fill="rgb(226,74,18)" fg:x="11853" fg:w="124"/><text x="15.1077%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.03%)</title><rect x="14.9830%" y="309" width="0.0301%" height="15" fill="rgb(225,67,54)" fg:x="11953" fg:w="24"/><text x="15.2330%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.01%)</title><rect x="15.0131%" y="373" width="0.0125%" height="15" fill="rgb(251,92,32)" fg:x="11977" fg:w="10"/><text x="15.2631%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.02%)</title><rect x="15.0808%" y="245" width="0.0238%" height="15" fill="rgb(228,149,22)" fg:x="12031" fg:w="19"/><text x="15.3308%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (276 samples, 0.35%)</title><rect x="14.7611%" y="405" width="0.3460%" height="15" fill="rgb(243,54,13)" fg:x="11776" fg:w="276"/><text x="15.0111%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (276 samples, 0.35%)</title><rect x="14.7611%" y="389" width="0.3460%" height="15" fill="rgb(243,180,28)" fg:x="11776" fg:w="276"/><text x="15.0111%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (65 samples, 0.08%)</title><rect x="15.0256%" y="373" width="0.0815%" height="15" fill="rgb(208,167,24)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (65 samples, 0.08%)</title><rect x="15.0256%" y="357" width="0.0815%" height="15" fill="rgb(245,73,45)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (65 samples, 0.08%)</title><rect x="15.0256%" y="341" width="0.0815%" height="15" fill="rgb(237,203,48)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (65 samples, 0.08%)</title><rect x="15.0256%" y="325" width="0.0815%" height="15" fill="rgb(211,197,16)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (65 samples, 0.08%)</title><rect x="15.0256%" y="309" width="0.0815%" height="15" fill="rgb(243,99,51)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (65 samples, 0.08%)</title><rect x="15.0256%" y="293" width="0.0815%" height="15" fill="rgb(215,123,29)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (65 samples, 0.08%)</title><rect x="15.0256%" y="277" width="0.0815%" height="15" fill="rgb(239,186,37)" fg:x="11987" fg:w="65"/><text x="15.2756%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (32 samples, 0.04%)</title><rect x="15.0670%" y="261" width="0.0401%" height="15" fill="rgb(252,136,39)" fg:x="12020" fg:w="32"/><text x="15.3170%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="15.1284%" y="357" width="0.0276%" height="15" fill="rgb(223,213,32)" fg:x="12069" fg:w="22"/><text x="15.3784%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.02%)</title><rect x="15.1384%" y="341" width="0.0175%" height="15" fill="rgb(233,115,5)" fg:x="12077" fg:w="14"/><text x="15.3884%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (46 samples, 0.06%)</title><rect x="15.1560%" y="341" width="0.0577%" height="15" fill="rgb(207,226,44)" fg:x="12091" fg:w="46"/><text x="15.4060%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (46 samples, 0.06%)</title><rect x="15.1560%" y="325" width="0.0577%" height="15" fill="rgb(208,126,0)" fg:x="12091" fg:w="46"/><text x="15.4060%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (46 samples, 0.06%)</title><rect x="15.1560%" y="309" width="0.0577%" height="15" fill="rgb(244,66,21)" fg:x="12091" fg:w="46"/><text x="15.4060%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (46 samples, 0.06%)</title><rect x="15.1560%" y="293" width="0.0577%" height="15" fill="rgb(222,97,12)" fg:x="12091" fg:w="46"/><text x="15.4060%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (24 samples, 0.03%)</title><rect x="15.2137%" y="293" width="0.0301%" height="15" fill="rgb(219,213,19)" fg:x="12137" fg:w="24"/><text x="15.4637%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (72 samples, 0.09%)</title><rect x="15.1560%" y="357" width="0.0903%" height="15" fill="rgb(252,169,30)" fg:x="12091" fg:w="72"/><text x="15.4060%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (26 samples, 0.03%)</title><rect x="15.2137%" y="341" width="0.0326%" height="15" fill="rgb(206,32,51)" fg:x="12137" fg:w="26"/><text x="15.4637%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (26 samples, 0.03%)</title><rect x="15.2137%" y="325" width="0.0326%" height="15" fill="rgb(250,172,42)" fg:x="12137" fg:w="26"/><text x="15.4637%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (26 samples, 0.03%)</title><rect x="15.2137%" y="309" width="0.0326%" height="15" fill="rgb(209,34,43)" fg:x="12137" fg:w="26"/><text x="15.4637%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (11 samples, 0.01%)</title><rect x="15.2462%" y="357" width="0.0138%" height="15" fill="rgb(223,11,35)" fg:x="12163" fg:w="11"/><text x="15.4962%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.01%)</title><rect x="15.2600%" y="357" width="0.0100%" height="15" fill="rgb(251,219,26)" fg:x="12174" fg:w="8"/><text x="15.5100%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.01%)</title><rect x="15.2600%" y="341" width="0.0100%" height="15" fill="rgb(231,119,3)" fg:x="12174" fg:w="8"/><text x="15.5100%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="15.2600%" y="325" width="0.0100%" height="15" fill="rgb(216,97,11)" fg:x="12174" fg:w="8"/><text x="15.5100%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (30 samples, 0.04%)</title><rect x="15.2701%" y="357" width="0.0376%" height="15" fill="rgb(223,59,9)" fg:x="12182" fg:w="30"/><text x="15.5201%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (30 samples, 0.04%)</title><rect x="15.2701%" y="341" width="0.0376%" height="15" fill="rgb(233,93,31)" fg:x="12182" fg:w="30"/><text x="15.5201%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (176 samples, 0.22%)</title><rect x="15.1071%" y="373" width="0.2206%" height="15" fill="rgb(239,81,33)" fg:x="12052" fg:w="176"/><text x="15.3571%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (16 samples, 0.02%)</title><rect x="15.3077%" y="357" width="0.0201%" height="15" fill="rgb(213,120,34)" fg:x="12212" fg:w="16"/><text x="15.5577%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (576 samples, 0.72%)</title><rect x="14.6170%" y="469" width="0.7220%" height="15" fill="rgb(243,49,53)" fg:x="11661" fg:w="576"/><text x="14.8670%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (461 samples, 0.58%)</title><rect x="14.7611%" y="453" width="0.5779%" height="15" fill="rgb(247,216,33)" fg:x="11776" fg:w="461"/><text x="15.0111%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (461 samples, 0.58%)</title><rect x="14.7611%" y="437" width="0.5779%" height="15" fill="rgb(226,26,14)" fg:x="11776" fg:w="461"/><text x="15.0111%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (461 samples, 0.58%)</title><rect x="14.7611%" y="421" width="0.5779%" height="15" fill="rgb(215,49,53)" fg:x="11776" fg:w="461"/><text x="15.0111%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (185 samples, 0.23%)</title><rect x="15.1071%" y="405" width="0.2319%" height="15" fill="rgb(245,162,40)" fg:x="12052" fg:w="185"/><text x="15.3571%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (185 samples, 0.23%)</title><rect x="15.1071%" y="389" width="0.2319%" height="15" fill="rgb(229,68,17)" fg:x="12052" fg:w="185"/><text x="15.3571%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (9 samples, 0.01%)</title><rect x="15.3277%" y="373" width="0.0113%" height="15" fill="rgb(213,182,10)" fg:x="12228" fg:w="9"/><text x="15.5777%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (582 samples, 0.73%)</title><rect x="14.6170%" y="485" width="0.7295%" height="15" fill="rgb(245,125,30)" fg:x="11661" fg:w="582"/><text x="14.8670%" y="495.50"></text></g><g><title>core::ptr::read (37 samples, 0.05%)</title><rect x="15.3891%" y="469" width="0.0464%" height="15" fill="rgb(232,202,2)" fg:x="12277" fg:w="37"/><text x="15.6391%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (779 samples, 0.98%)</title><rect x="14.4741%" y="501" width="0.9765%" height="15" fill="rgb(237,140,51)" fg:x="11547" fg:w="779"/><text x="14.7241%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (83 samples, 0.10%)</title><rect x="15.3465%" y="485" width="0.1040%" height="15" fill="rgb(236,157,25)" fg:x="12243" fg:w="83"/><text x="15.5965%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (12 samples, 0.02%)</title><rect x="15.4355%" y="469" width="0.0150%" height="15" fill="rgb(219,209,0)" fg:x="12314" fg:w="12"/><text x="15.6855%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.02%)</title><rect x="15.4355%" y="453" width="0.0150%" height="15" fill="rgb(240,116,54)" fg:x="12314" fg:w="12"/><text x="15.6855%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.02%)</title><rect x="15.4355%" y="437" width="0.0150%" height="15" fill="rgb(216,10,36)" fg:x="12314" fg:w="12"/><text x="15.6855%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2,046 samples, 2.56%)</title><rect x="12.9135%" y="517" width="2.5646%" height="15" fill="rgb(222,72,44)" fg:x="10302" fg:w="2046"/><text x="13.1635%" y="527.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (22 samples, 0.03%)</title><rect x="15.4506%" y="501" width="0.0276%" height="15" fill="rgb(232,159,9)" fg:x="12326" fg:w="22"/><text x="15.7006%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (17 samples, 0.02%)</title><rect x="15.5433%" y="373" width="0.0213%" height="15" fill="rgb(210,39,32)" fg:x="12400" fg:w="17"/><text x="15.7933%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (51 samples, 0.06%)</title><rect x="15.5145%" y="389" width="0.0639%" height="15" fill="rgb(216,194,45)" fg:x="12377" fg:w="51"/><text x="15.7645%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11 samples, 0.01%)</title><rect x="15.5646%" y="373" width="0.0138%" height="15" fill="rgb(218,18,35)" fg:x="12417" fg:w="11"/><text x="15.8146%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (50 samples, 0.06%)</title><rect x="15.6386%" y="373" width="0.0627%" height="15" fill="rgb(207,83,51)" fg:x="12476" fg:w="50"/><text x="15.8886%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (203 samples, 0.25%)</title><rect x="15.4894%" y="437" width="0.2545%" height="15" fill="rgb(225,63,43)" fg:x="12357" fg:w="203"/><text x="15.7394%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (203 samples, 0.25%)</title><rect x="15.4894%" y="421" width="0.2545%" height="15" fill="rgb(207,57,36)" fg:x="12357" fg:w="203"/><text x="15.7394%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (203 samples, 0.25%)</title><rect x="15.4894%" y="405" width="0.2545%" height="15" fill="rgb(216,99,33)" fg:x="12357" fg:w="203"/><text x="15.7394%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (132 samples, 0.17%)</title><rect x="15.5784%" y="389" width="0.1655%" height="15" fill="rgb(225,42,16)" fg:x="12428" fg:w="132"/><text x="15.8284%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.04%)</title><rect x="15.7013%" y="373" width="0.0426%" height="15" fill="rgb(220,201,45)" fg:x="12526" fg:w="34"/><text x="15.9513%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (24 samples, 0.03%)</title><rect x="15.7439%" y="437" width="0.0301%" height="15" fill="rgb(225,33,4)" fg:x="12560" fg:w="24"/><text x="15.9939%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (21 samples, 0.03%)</title><rect x="15.7476%" y="421" width="0.0263%" height="15" fill="rgb(224,33,50)" fg:x="12563" fg:w="21"/><text x="15.9976%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (21 samples, 0.03%)</title><rect x="15.7476%" y="405" width="0.0263%" height="15" fill="rgb(246,198,51)" fg:x="12563" fg:w="21"/><text x="15.9976%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.03%)</title><rect x="15.7476%" y="389" width="0.0263%" height="15" fill="rgb(205,22,4)" fg:x="12563" fg:w="21"/><text x="15.9976%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (49 samples, 0.06%)</title><rect x="15.7903%" y="309" width="0.0614%" height="15" fill="rgb(206,3,8)" fg:x="12597" fg:w="49"/><text x="16.0403%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (298 samples, 0.37%)</title><rect x="15.4894%" y="469" width="0.3735%" height="15" fill="rgb(251,23,15)" fg:x="12357" fg:w="298"/><text x="15.7394%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (298 samples, 0.37%)</title><rect x="15.4894%" y="453" width="0.3735%" height="15" fill="rgb(252,88,28)" fg:x="12357" fg:w="298"/><text x="15.7394%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (71 samples, 0.09%)</title><rect x="15.7740%" y="437" width="0.0890%" height="15" fill="rgb(212,127,14)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (71 samples, 0.09%)</title><rect x="15.7740%" y="421" width="0.0890%" height="15" fill="rgb(247,145,37)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="431.50"></text></g><g><title>core::hash::Hasher::write_i64 (71 samples, 0.09%)</title><rect x="15.7740%" y="405" width="0.0890%" height="15" fill="rgb(209,117,53)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u64 (71 samples, 0.09%)</title><rect x="15.7740%" y="389" width="0.0890%" height="15" fill="rgb(212,90,42)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (71 samples, 0.09%)</title><rect x="15.7740%" y="373" width="0.0890%" height="15" fill="rgb(218,164,37)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (71 samples, 0.09%)</title><rect x="15.7740%" y="357" width="0.0890%" height="15" fill="rgb(246,65,34)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (71 samples, 0.09%)</title><rect x="15.7740%" y="341" width="0.0890%" height="15" fill="rgb(231,100,33)" fg:x="12584" fg:w="71"/><text x="16.0240%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.08%)</title><rect x="15.7815%" y="325" width="0.0815%" height="15" fill="rgb(228,126,14)" fg:x="12590" fg:w="65"/><text x="16.0315%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.01%)</title><rect x="15.8517%" y="309" width="0.0113%" height="15" fill="rgb(215,173,21)" fg:x="12646" fg:w="9"/><text x="16.1017%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (110 samples, 0.14%)</title><rect x="15.9219%" y="421" width="0.1379%" height="15" fill="rgb(210,6,40)" fg:x="12702" fg:w="110"/><text x="16.1719%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (110 samples, 0.14%)</title><rect x="15.9219%" y="405" width="0.1379%" height="15" fill="rgb(212,48,18)" fg:x="12702" fg:w="110"/><text x="16.1719%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (110 samples, 0.14%)</title><rect x="15.9219%" y="389" width="0.1379%" height="15" fill="rgb(230,214,11)" fg:x="12702" fg:w="110"/><text x="16.1719%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (110 samples, 0.14%)</title><rect x="15.9219%" y="373" width="0.1379%" height="15" fill="rgb(254,105,39)" fg:x="12702" fg:w="110"/><text x="16.1719%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (110 samples, 0.14%)</title><rect x="15.9219%" y="357" width="0.1379%" height="15" fill="rgb(245,158,5)" fg:x="12702" fg:w="110"/><text x="16.1719%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (27 samples, 0.03%)</title><rect x="16.0598%" y="421" width="0.0338%" height="15" fill="rgb(249,208,11)" fg:x="12812" fg:w="27"/><text x="16.3098%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.01%)</title><rect x="16.0974%" y="421" width="0.0100%" height="15" fill="rgb(210,39,28)" fg:x="12842" fg:w="8"/><text x="16.3474%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.01%)</title><rect x="16.0974%" y="405" width="0.0100%" height="15" fill="rgb(211,56,53)" fg:x="12842" fg:w="8"/><text x="16.3474%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="16.0974%" y="389" width="0.0100%" height="15" fill="rgb(226,201,30)" fg:x="12842" fg:w="8"/><text x="16.3474%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (65 samples, 0.08%)</title><rect x="16.1074%" y="421" width="0.0815%" height="15" fill="rgb(239,101,34)" fg:x="12850" fg:w="65"/><text x="16.3574%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (65 samples, 0.08%)</title><rect x="16.1074%" y="405" width="0.0815%" height="15" fill="rgb(226,209,5)" fg:x="12850" fg:w="65"/><text x="16.3574%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (48 samples, 0.06%)</title><rect x="16.1889%" y="421" width="0.0602%" height="15" fill="rgb(250,105,47)" fg:x="12915" fg:w="48"/><text x="16.4389%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (48 samples, 0.06%)</title><rect x="16.1889%" y="405" width="0.0602%" height="15" fill="rgb(230,72,3)" fg:x="12915" fg:w="48"/><text x="16.4389%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (48 samples, 0.06%)</title><rect x="16.1889%" y="389" width="0.0602%" height="15" fill="rgb(232,218,39)" fg:x="12915" fg:w="48"/><text x="16.4389%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (312 samples, 0.39%)</title><rect x="15.8630%" y="437" width="0.3911%" height="15" fill="rgb(248,166,6)" fg:x="12655" fg:w="312"/><text x="16.1130%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (340 samples, 0.43%)</title><rect x="15.8630%" y="453" width="0.4262%" height="15" fill="rgb(247,89,20)" fg:x="12655" fg:w="340"/><text x="16.1130%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (28 samples, 0.04%)</title><rect x="16.2541%" y="437" width="0.0351%" height="15" fill="rgb(248,130,54)" fg:x="12967" fg:w="28"/><text x="16.5041%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (649 samples, 0.81%)</title><rect x="15.4781%" y="517" width="0.8135%" height="15" fill="rgb(234,196,4)" fg:x="12348" fg:w="649"/><text x="15.7281%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (649 samples, 0.81%)</title><rect x="15.4781%" y="501" width="0.8135%" height="15" fill="rgb(250,143,31)" fg:x="12348" fg:w="649"/><text x="15.7281%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (649 samples, 0.81%)</title><rect x="15.4781%" y="485" width="0.8135%" height="15" fill="rgb(211,110,34)" fg:x="12348" fg:w="649"/><text x="15.7281%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (342 samples, 0.43%)</title><rect x="15.8630%" y="469" width="0.4287%" height="15" fill="rgb(215,124,48)" fg:x="12655" fg:w="342"/><text x="16.1130%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.01%)</title><rect x="16.3142%" y="453" width="0.0100%" height="15" fill="rgb(216,46,13)" fg:x="13015" fg:w="8"/><text x="16.5642%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.01%)</title><rect x="16.3142%" y="437" width="0.0100%" height="15" fill="rgb(205,184,25)" fg:x="13015" fg:w="8"/><text x="16.5642%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (38 samples, 0.05%)</title><rect x="16.2917%" y="485" width="0.0476%" height="15" fill="rgb(228,1,10)" fg:x="12997" fg:w="38"/><text x="16.5417%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (36 samples, 0.05%)</title><rect x="16.2942%" y="469" width="0.0451%" height="15" fill="rgb(213,116,27)" fg:x="12999" fg:w="36"/><text x="16.5442%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (9 samples, 0.01%)</title><rect x="16.3280%" y="453" width="0.0113%" height="15" fill="rgb(241,95,50)" fg:x="13026" fg:w="9"/><text x="16.5780%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (52 samples, 0.07%)</title><rect x="16.2917%" y="501" width="0.0652%" height="15" fill="rgb(238,48,32)" fg:x="12997" fg:w="52"/><text x="16.5417%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (14 samples, 0.02%)</title><rect x="16.3393%" y="485" width="0.0175%" height="15" fill="rgb(235,113,49)" fg:x="13035" fg:w="14"/><text x="16.5893%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (12 samples, 0.02%)</title><rect x="16.3418%" y="469" width="0.0150%" height="15" fill="rgb(205,127,43)" fg:x="13037" fg:w="12"/><text x="16.5918%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (3,106 samples, 3.89%)</title><rect x="12.5161%" y="533" width="3.8934%" height="15" fill="rgb(250,162,2)" fg:x="9985" fg:w="3106"/><text x="12.7661%" y="543.50">mut_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (94 samples, 0.12%)</title><rect x="16.2917%" y="517" width="0.1178%" height="15" fill="rgb(220,13,41)" fg:x="12997" fg:w="94"/><text x="16.5417%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (42 samples, 0.05%)</title><rect x="16.3568%" y="501" width="0.0526%" height="15" fill="rgb(249,221,25)" fg:x="13049" fg:w="42"/><text x="16.6068%" y="511.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::dl_delim_idx (8 samples, 0.01%)</title><rect x="16.4095%" y="533" width="0.0100%" height="15" fill="rgb(215,208,19)" fg:x="13091" fg:w="8"/><text x="16.6595%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (24 samples, 0.03%)</title><rect x="16.4195%" y="533" width="0.0301%" height="15" fill="rgb(236,175,2)" fg:x="13099" fg:w="24"/><text x="16.6695%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (24 samples, 0.03%)</title><rect x="16.4195%" y="517" width="0.0301%" height="15" fill="rgb(241,52,2)" fg:x="13099" fg:w="24"/><text x="16.6695%" y="527.50"></text></g><g><title>core::ptr::read (13 samples, 0.02%)</title><rect x="16.4333%" y="501" width="0.0163%" height="15" fill="rgb(248,140,14)" fg:x="13110" fg:w="13"/><text x="16.6833%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (3,284 samples, 4.12%)</title><rect x="12.3469%" y="549" width="4.1165%" height="15" fill="rgb(253,22,42)" fg:x="9850" fg:w="3284"/><text x="12.5969%" y="559.50">proj..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (13 samples, 0.02%)</title><rect x="16.4885%" y="533" width="0.0163%" height="15" fill="rgb(234,61,47)" fg:x="13154" fg:w="13"/><text x="16.7385%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (13 samples, 0.02%)</title><rect x="16.4885%" y="517" width="0.0163%" height="15" fill="rgb(208,226,15)" fg:x="13154" fg:w="13"/><text x="16.7385%" y="527.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="16.5248%" y="341" width="0.0188%" height="15" fill="rgb(217,221,4)" fg:x="13183" fg:w="15"/><text x="16.7748%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.04%)</title><rect x="16.5110%" y="421" width="0.0351%" height="15" fill="rgb(212,174,34)" fg:x="13172" fg:w="28"/><text x="16.7610%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.03%)</title><rect x="16.5123%" y="405" width="0.0338%" height="15" fill="rgb(253,83,4)" fg:x="13173" fg:w="27"/><text x="16.7623%" y="415.50"></text></g><g><title>__rdl_dealloc (27 samples, 0.03%)</title><rect x="16.5123%" y="389" width="0.0338%" height="15" fill="rgb(250,195,49)" fg:x="13173" fg:w="27"/><text x="16.7623%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (27 samples, 0.03%)</title><rect x="16.5123%" y="373" width="0.0338%" height="15" fill="rgb(241,192,25)" fg:x="13173" fg:w="27"/><text x="16.7623%" y="383.50"></text></g><g><title>__GI___libc_free (27 samples, 0.03%)</title><rect x="16.5123%" y="357" width="0.0338%" height="15" fill="rgb(208,124,10)" fg:x="13173" fg:w="27"/><text x="16.7623%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (32 samples, 0.04%)</title><rect x="16.5085%" y="533" width="0.0401%" height="15" fill="rgb(222,33,0)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (32 samples, 0.04%)</title><rect x="16.5085%" y="517" width="0.0401%" height="15" fill="rgb(234,209,28)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (32 samples, 0.04%)</title><rect x="16.5085%" y="501" width="0.0401%" height="15" fill="rgb(224,11,23)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (32 samples, 0.04%)</title><rect x="16.5085%" y="485" width="0.0401%" height="15" fill="rgb(232,99,1)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.04%)</title><rect x="16.5085%" y="469" width="0.0401%" height="15" fill="rgb(237,95,45)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (32 samples, 0.04%)</title><rect x="16.5085%" y="453" width="0.0401%" height="15" fill="rgb(208,109,11)" fg:x="13170" fg:w="32"/><text x="16.7585%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (30 samples, 0.04%)</title><rect x="16.5110%" y="437" width="0.0376%" height="15" fill="rgb(216,190,48)" fg:x="13172" fg:w="30"/><text x="16.7610%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.03%)</title><rect x="16.5549%" y="485" width="0.0338%" height="15" fill="rgb(251,171,36)" fg:x="13207" fg:w="27"/><text x="16.8049%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11 samples, 0.01%)</title><rect x="16.5750%" y="469" width="0.0138%" height="15" fill="rgb(230,62,22)" fg:x="13223" fg:w="11"/><text x="16.8250%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.01%)</title><rect x="16.5750%" y="453" width="0.0138%" height="15" fill="rgb(225,114,35)" fg:x="13223" fg:w="11"/><text x="16.8250%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (31 samples, 0.04%)</title><rect x="16.5524%" y="533" width="0.0389%" height="15" fill="rgb(215,118,42)" fg:x="13205" fg:w="31"/><text x="16.8024%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (31 samples, 0.04%)</title><rect x="16.5524%" y="517" width="0.0389%" height="15" fill="rgb(243,119,21)" fg:x="13205" fg:w="31"/><text x="16.8024%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (29 samples, 0.04%)</title><rect x="16.5549%" y="501" width="0.0364%" height="15" fill="rgb(252,177,53)" fg:x="13207" fg:w="29"/><text x="16.8049%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.01%)</title><rect x="16.6640%" y="485" width="0.0113%" height="15" fill="rgb(237,209,29)" fg:x="13294" fg:w="9"/><text x="16.9140%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (11 samples, 0.01%)</title><rect x="16.6752%" y="421" width="0.0138%" height="15" fill="rgb(212,65,23)" fg:x="13303" fg:w="11"/><text x="16.9252%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.02%)</title><rect x="16.6752%" y="485" width="0.0201%" height="15" fill="rgb(230,222,46)" fg:x="13303" fg:w="16"/><text x="16.9252%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.02%)</title><rect x="16.6752%" y="469" width="0.0201%" height="15" fill="rgb(215,135,32)" fg:x="13303" fg:w="16"/><text x="16.9252%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.02%)</title><rect x="16.6752%" y="453" width="0.0201%" height="15" fill="rgb(246,101,22)" fg:x="13303" fg:w="16"/><text x="16.9252%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (16 samples, 0.02%)</title><rect x="16.6752%" y="437" width="0.0201%" height="15" fill="rgb(206,107,13)" fg:x="13303" fg:w="16"/><text x="16.9252%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.02%)</title><rect x="16.6953%" y="469" width="0.0213%" height="15" fill="rgb(250,100,44)" fg:x="13319" fg:w="17"/><text x="16.9453%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.03%)</title><rect x="16.7592%" y="405" width="0.0251%" height="15" fill="rgb(231,147,38)" fg:x="13370" fg:w="20"/><text x="17.0092%" y="415.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (16 samples, 0.02%)</title><rect x="16.7642%" y="389" width="0.0201%" height="15" fill="rgb(229,8,40)" fg:x="13374" fg:w="16"/><text x="17.0142%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.02%)</title><rect x="16.7642%" y="373" width="0.0201%" height="15" fill="rgb(221,135,30)" fg:x="13374" fg:w="16"/><text x="17.0142%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.02%)</title><rect x="16.7655%" y="357" width="0.0188%" height="15" fill="rgb(249,193,18)" fg:x="13375" fg:w="15"/><text x="17.0155%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.02%)</title><rect x="16.7843%" y="405" width="0.0150%" height="15" fill="rgb(209,133,39)" fg:x="13390" fg:w="12"/><text x="17.0343%" y="415.50"></text></g><g><title>_int_free (27 samples, 0.03%)</title><rect x="16.8131%" y="261" width="0.0338%" height="15" fill="rgb(232,100,14)" fg:x="13413" fg:w="27"/><text x="17.0631%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.05%)</title><rect x="16.8106%" y="325" width="0.0451%" height="15" fill="rgb(224,185,1)" fg:x="13411" fg:w="36"/><text x="17.0606%" y="335.50"></text></g><g><title>__rdl_dealloc (36 samples, 0.05%)</title><rect x="16.8106%" y="309" width="0.0451%" height="15" fill="rgb(223,139,8)" fg:x="13411" fg:w="36"/><text x="17.0606%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (36 samples, 0.05%)</title><rect x="16.8106%" y="293" width="0.0451%" height="15" fill="rgb(232,213,38)" fg:x="13411" fg:w="36"/><text x="17.0606%" y="303.50"></text></g><g><title>__GI___libc_free (36 samples, 0.05%)</title><rect x="16.8106%" y="277" width="0.0451%" height="15" fill="rgb(207,94,22)" fg:x="13411" fg:w="36"/><text x="17.0606%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.05%)</title><rect x="16.8068%" y="341" width="0.0501%" height="15" fill="rgb(219,183,54)" fg:x="13408" fg:w="40"/><text x="17.0568%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (46 samples, 0.06%)</title><rect x="16.8068%" y="405" width="0.0577%" height="15" fill="rgb(216,185,54)" fg:x="13408" fg:w="46"/><text x="17.0568%" y="415.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.06%)</title><rect x="16.8068%" y="389" width="0.0577%" height="15" fill="rgb(254,217,39)" fg:x="13408" fg:w="46"/><text x="17.0568%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (46 samples, 0.06%)</title><rect x="16.8068%" y="373" width="0.0577%" height="15" fill="rgb(240,178,23)" fg:x="13408" fg:w="46"/><text x="17.0568%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (46 samples, 0.06%)</title><rect x="16.8068%" y="357" width="0.0577%" height="15" fill="rgb(218,11,47)" fg:x="13408" fg:w="46"/><text x="17.0568%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (19 samples, 0.02%)</title><rect x="16.8645%" y="405" width="0.0238%" height="15" fill="rgb(218,51,51)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (19 samples, 0.02%)</title><rect x="16.8645%" y="389" width="0.0238%" height="15" fill="rgb(238,126,27)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.02%)</title><rect x="16.8645%" y="373" width="0.0238%" height="15" fill="rgb(249,202,22)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.02%)</title><rect x="16.8645%" y="357" width="0.0238%" height="15" fill="rgb(254,195,49)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.02%)</title><rect x="16.8645%" y="341" width="0.0238%" height="15" fill="rgb(208,123,14)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (19 samples, 0.02%)</title><rect x="16.8645%" y="325" width="0.0238%" height="15" fill="rgb(224,200,8)" fg:x="13454" fg:w="19"/><text x="17.1145%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (32 samples, 0.04%)</title><rect x="16.9234%" y="357" width="0.0401%" height="15" fill="rgb(217,61,36)" fg:x="13501" fg:w="32"/><text x="17.1734%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (16 samples, 0.02%)</title><rect x="16.9435%" y="341" width="0.0201%" height="15" fill="rgb(206,35,45)" fg:x="13517" fg:w="16"/><text x="17.1935%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (123 samples, 0.15%)</title><rect x="16.8933%" y="373" width="0.1542%" height="15" fill="rgb(217,65,33)" fg:x="13477" fg:w="123"/><text x="17.1433%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (67 samples, 0.08%)</title><rect x="16.9635%" y="357" width="0.0840%" height="15" fill="rgb(222,158,48)" fg:x="13533" fg:w="67"/><text x="17.2135%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (67 samples, 0.08%)</title><rect x="16.9635%" y="341" width="0.0840%" height="15" fill="rgb(254,2,54)" fg:x="13533" fg:w="67"/><text x="17.2135%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (101 samples, 0.13%)</title><rect x="17.0475%" y="373" width="0.1266%" height="15" fill="rgb(250,143,38)" fg:x="13600" fg:w="101"/><text x="17.2975%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (90 samples, 0.11%)</title><rect x="17.0613%" y="357" width="0.1128%" height="15" fill="rgb(248,25,0)" fg:x="13611" fg:w="90"/><text x="17.3113%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (90 samples, 0.11%)</title><rect x="17.0613%" y="341" width="0.1128%" height="15" fill="rgb(206,152,27)" fg:x="13611" fg:w="90"/><text x="17.3113%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (11 samples, 0.01%)</title><rect x="17.1741%" y="373" width="0.0138%" height="15" fill="rgb(240,77,30)" fg:x="13701" fg:w="11"/><text x="17.4241%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (373 samples, 0.47%)</title><rect x="16.8933%" y="389" width="0.4676%" height="15" fill="rgb(231,5,3)" fg:x="13477" fg:w="373"/><text x="17.1433%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (138 samples, 0.17%)</title><rect x="17.1879%" y="373" width="0.1730%" height="15" fill="rgb(207,226,32)" fg:x="13712" fg:w="138"/><text x="17.4379%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (138 samples, 0.17%)</title><rect x="17.1879%" y="357" width="0.1730%" height="15" fill="rgb(222,207,47)" fg:x="13712" fg:w="138"/><text x="17.4379%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (138 samples, 0.17%)</title><rect x="17.1879%" y="341" width="0.1730%" height="15" fill="rgb(229,115,45)" fg:x="13712" fg:w="138"/><text x="17.4379%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (27 samples, 0.03%)</title><rect x="17.3609%" y="373" width="0.0338%" height="15" fill="rgb(224,191,6)" fg:x="13850" fg:w="27"/><text x="17.6109%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (415 samples, 0.52%)</title><rect x="16.8933%" y="405" width="0.5202%" height="15" fill="rgb(230,227,24)" fg:x="13477" fg:w="415"/><text x="17.1433%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (42 samples, 0.05%)</title><rect x="17.3609%" y="389" width="0.0526%" height="15" fill="rgb(228,80,19)" fg:x="13850" fg:w="42"/><text x="17.6109%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.02%)</title><rect x="17.3947%" y="373" width="0.0188%" height="15" fill="rgb(247,229,0)" fg:x="13877" fg:w="15"/><text x="17.6447%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (13 samples, 0.02%)</title><rect x="17.4135%" y="373" width="0.0163%" height="15" fill="rgb(237,194,15)" fg:x="13892" fg:w="13"/><text x="17.6635%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (13 samples, 0.02%)</title><rect x="17.4135%" y="357" width="0.0163%" height="15" fill="rgb(219,203,20)" fg:x="13892" fg:w="13"/><text x="17.6635%" y="367.50"></text></g><g><title>__memset_evex_unaligned_erms (11 samples, 0.01%)</title><rect x="17.4160%" y="341" width="0.0138%" height="15" fill="rgb(234,128,8)" fg:x="13894" fg:w="11"/><text x="17.6660%" y="351.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (9 samples, 0.01%)</title><rect x="17.4361%" y="357" width="0.0113%" height="15" fill="rgb(248,202,8)" fg:x="13910" fg:w="9"/><text x="17.6861%" y="367.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="17.4887%" y="245" width="0.0100%" height="15" fill="rgb(206,104,37)" fg:x="13952" fg:w="8"/><text x="17.7387%" y="255.50"></text></g><g><title>__rdl_alloc (122 samples, 0.15%)</title><rect x="17.4499%" y="293" width="0.1529%" height="15" fill="rgb(223,8,27)" fg:x="13921" fg:w="122"/><text x="17.6999%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (122 samples, 0.15%)</title><rect x="17.4499%" y="277" width="0.1529%" height="15" fill="rgb(216,217,28)" fg:x="13921" fg:w="122"/><text x="17.6999%" y="287.50"></text></g><g><title>__GI___libc_malloc (118 samples, 0.15%)</title><rect x="17.4549%" y="261" width="0.1479%" height="15" fill="rgb(249,199,1)" fg:x="13925" fg:w="118"/><text x="17.7049%" y="271.50"></text></g><g><title>tcache_get (79 samples, 0.10%)</title><rect x="17.5038%" y="245" width="0.0990%" height="15" fill="rgb(240,85,17)" fg:x="13964" fg:w="79"/><text x="17.7538%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (127 samples, 0.16%)</title><rect x="17.4474%" y="357" width="0.1592%" height="15" fill="rgb(206,108,45)" fg:x="13919" fg:w="127"/><text x="17.6974%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (127 samples, 0.16%)</title><rect x="17.4474%" y="341" width="0.1592%" height="15" fill="rgb(245,210,41)" fg:x="13919" fg:w="127"/><text x="17.6974%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (127 samples, 0.16%)</title><rect x="17.4474%" y="325" width="0.1592%" height="15" fill="rgb(206,13,37)" fg:x="13919" fg:w="127"/><text x="17.6974%" y="335.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.16%)</title><rect x="17.4499%" y="309" width="0.1567%" height="15" fill="rgb(250,61,18)" fg:x="13921" fg:w="125"/><text x="17.6999%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (150 samples, 0.19%)</title><rect x="17.4311%" y="373" width="0.1880%" height="15" fill="rgb(235,172,48)" fg:x="13906" fg:w="150"/><text x="17.6811%" y="383.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (10 samples, 0.01%)</title><rect x="17.6066%" y="357" width="0.0125%" height="15" fill="rgb(249,201,17)" fg:x="14046" fg:w="10"/><text x="17.8566%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (8 samples, 0.01%)</title><rect x="17.6316%" y="357" width="0.0100%" height="15" fill="rgb(219,208,6)" fg:x="14066" fg:w="8"/><text x="17.8816%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (8 samples, 0.01%)</title><rect x="17.6316%" y="341" width="0.0100%" height="15" fill="rgb(248,31,23)" fg:x="14066" fg:w="8"/><text x="17.8816%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (714 samples, 0.89%)</title><rect x="16.7555%" y="421" width="0.8950%" height="15" fill="rgb(245,15,42)" fg:x="13367" fg:w="714"/><text x="17.0055%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (189 samples, 0.24%)</title><rect x="17.4135%" y="405" width="0.2369%" height="15" fill="rgb(222,217,39)" fg:x="13892" fg:w="189"/><text x="17.6635%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (189 samples, 0.24%)</title><rect x="17.4135%" y="389" width="0.2369%" height="15" fill="rgb(210,219,27)" fg:x="13892" fg:w="189"/><text x="17.6635%" y="399.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (25 samples, 0.03%)</title><rect x="17.6191%" y="373" width="0.0313%" height="15" fill="rgb(252,166,36)" fg:x="14056" fg:w="25"/><text x="17.8691%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (750 samples, 0.94%)</title><rect x="16.7166%" y="469" width="0.9401%" height="15" fill="rgb(245,132,34)" fg:x="13336" fg:w="750"/><text x="16.9666%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (745 samples, 0.93%)</title><rect x="16.7229%" y="453" width="0.9339%" height="15" fill="rgb(236,54,3)" fg:x="13341" fg:w="745"/><text x="16.9729%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (737 samples, 0.92%)</title><rect x="16.7329%" y="437" width="0.9238%" height="15" fill="rgb(241,173,43)" fg:x="13349" fg:w="737"/><text x="16.9829%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.08%)</title><rect x="17.6642%" y="453" width="0.0765%" height="15" fill="rgb(215,190,9)" fg:x="14092" fg:w="61"/><text x="17.9142%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (60 samples, 0.08%)</title><rect x="17.6655%" y="437" width="0.0752%" height="15" fill="rgb(242,101,16)" fg:x="14093" fg:w="60"/><text x="17.9155%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.07%)</title><rect x="17.7407%" y="453" width="0.0740%" height="15" fill="rgb(223,190,21)" fg:x="14153" fg:w="59"/><text x="17.9907%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (22 samples, 0.03%)</title><rect x="17.8147%" y="453" width="0.0276%" height="15" fill="rgb(215,228,25)" fg:x="14212" fg:w="22"/><text x="18.0647%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (22 samples, 0.03%)</title><rect x="17.8147%" y="437" width="0.0276%" height="15" fill="rgb(225,36,22)" fg:x="14212" fg:w="22"/><text x="18.0647%" y="447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.03%)</title><rect x="17.8147%" y="421" width="0.0276%" height="15" fill="rgb(251,106,46)" fg:x="14212" fg:w="22"/><text x="18.0647%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.03%)</title><rect x="17.8147%" y="405" width="0.0276%" height="15" fill="rgb(208,90,1)" fg:x="14212" fg:w="22"/><text x="18.0647%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (22 samples, 0.03%)</title><rect x="17.8147%" y="389" width="0.0276%" height="15" fill="rgb(243,10,4)" fg:x="14212" fg:w="22"/><text x="18.0647%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (17 samples, 0.02%)</title><rect x="17.8573%" y="437" width="0.0213%" height="15" fill="rgb(212,137,27)" fg:x="14246" fg:w="17"/><text x="18.1073%" y="447.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (13 samples, 0.02%)</title><rect x="17.8623%" y="421" width="0.0163%" height="15" fill="rgb(231,220,49)" fg:x="14250" fg:w="13"/><text x="18.1123%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (62 samples, 0.08%)</title><rect x="17.8422%" y="453" width="0.0777%" height="15" fill="rgb(237,96,20)" fg:x="14234" fg:w="62"/><text x="18.0922%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (33 samples, 0.04%)</title><rect x="17.8786%" y="437" width="0.0414%" height="15" fill="rgb(239,229,30)" fg:x="14263" fg:w="33"/><text x="18.1286%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (33 samples, 0.04%)</title><rect x="17.8786%" y="421" width="0.0414%" height="15" fill="rgb(219,65,33)" fg:x="14263" fg:w="33"/><text x="18.1286%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (63 samples, 0.08%)</title><rect x="17.9200%" y="437" width="0.0790%" height="15" fill="rgb(243,134,7)" fg:x="14296" fg:w="63"/><text x="18.1700%" y="447.50"></text></g><g><title>hashbrown::raw::is_full (13 samples, 0.02%)</title><rect x="17.9826%" y="421" width="0.0163%" height="15" fill="rgb(216,177,54)" fg:x="14346" fg:w="13"/><text x="18.2326%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (74 samples, 0.09%)</title><rect x="17.9200%" y="453" width="0.0928%" height="15" fill="rgb(211,160,20)" fg:x="14296" fg:w="74"/><text x="18.1700%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (10 samples, 0.01%)</title><rect x="18.0002%" y="437" width="0.0125%" height="15" fill="rgb(239,85,39)" fg:x="14360" fg:w="10"/><text x="18.2502%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (10 samples, 0.01%)</title><rect x="18.0002%" y="421" width="0.0125%" height="15" fill="rgb(232,125,22)" fg:x="14360" fg:w="10"/><text x="18.2502%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (8 samples, 0.01%)</title><rect x="18.0127%" y="453" width="0.0100%" height="15" fill="rgb(244,57,34)" fg:x="14370" fg:w="8"/><text x="18.2627%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (46 samples, 0.06%)</title><rect x="18.0328%" y="453" width="0.0577%" height="15" fill="rgb(214,203,32)" fg:x="14386" fg:w="46"/><text x="18.2828%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (46 samples, 0.06%)</title><rect x="18.0328%" y="437" width="0.0577%" height="15" fill="rgb(207,58,43)" fg:x="14386" fg:w="46"/><text x="18.2828%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.06%)</title><rect x="18.0328%" y="421" width="0.0577%" height="15" fill="rgb(215,193,15)" fg:x="14386" fg:w="46"/><text x="18.2828%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (51 samples, 0.06%)</title><rect x="18.0904%" y="453" width="0.0639%" height="15" fill="rgb(232,15,44)" fg:x="14432" fg:w="51"/><text x="18.3404%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (51 samples, 0.06%)</title><rect x="18.0904%" y="437" width="0.0639%" height="15" fill="rgb(212,3,48)" fg:x="14432" fg:w="51"/><text x="18.3404%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,179 samples, 1.48%)</title><rect x="16.6953%" y="485" width="1.4779%" height="15" fill="rgb(218,128,7)" fg:x="13319" fg:w="1179"/><text x="16.9453%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (412 samples, 0.52%)</title><rect x="17.6567%" y="469" width="0.5164%" height="15" fill="rgb(226,216,39)" fg:x="14086" fg:w="412"/><text x="17.9067%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (15 samples, 0.02%)</title><rect x="18.1544%" y="453" width="0.0188%" height="15" fill="rgb(243,47,51)" fg:x="14483" fg:w="15"/><text x="18.4044%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.02%)</title><rect x="18.1544%" y="437" width="0.0188%" height="15" fill="rgb(241,183,40)" fg:x="14483" fg:w="15"/><text x="18.4044%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.02%)</title><rect x="18.1544%" y="421" width="0.0188%" height="15" fill="rgb(231,217,32)" fg:x="14483" fg:w="15"/><text x="18.4044%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11 samples, 0.01%)</title><rect x="18.1757%" y="469" width="0.0138%" height="15" fill="rgb(229,61,38)" fg:x="14500" fg:w="11"/><text x="18.4257%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11 samples, 0.01%)</title><rect x="18.1757%" y="453" width="0.0138%" height="15" fill="rgb(225,210,5)" fg:x="14500" fg:w="11"/><text x="18.4257%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.01%)</title><rect x="18.1757%" y="437" width="0.0138%" height="15" fill="rgb(231,79,45)" fg:x="14500" fg:w="11"/><text x="18.4257%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.01%)</title><rect x="18.1757%" y="421" width="0.0138%" height="15" fill="rgb(224,100,7)" fg:x="14500" fg:w="11"/><text x="18.4257%" y="431.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (11 samples, 0.01%)</title><rect x="18.2383%" y="453" width="0.0138%" height="15" fill="rgb(241,198,18)" fg:x="14550" fg:w="11"/><text x="18.4883%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (25 samples, 0.03%)</title><rect x="18.2521%" y="453" width="0.0313%" height="15" fill="rgb(252,97,53)" fg:x="14561" fg:w="25"/><text x="18.5021%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (25 samples, 0.03%)</title><rect x="18.2521%" y="437" width="0.0313%" height="15" fill="rgb(220,88,7)" fg:x="14561" fg:w="25"/><text x="18.5021%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (1,455 samples, 1.82%)</title><rect x="16.4634%" y="549" width="1.8238%" height="15" fill="rgb(213,176,14)" fg:x="13134" fg:w="1455"/><text x="16.7134%" y="559.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1,347 samples, 1.69%)</title><rect x="16.5988%" y="533" width="1.6885%" height="15" fill="rgb(246,73,7)" fg:x="13242" fg:w="1347"/><text x="16.8488%" y="543.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1,347 samples, 1.69%)</title><rect x="16.5988%" y="517" width="1.6885%" height="15" fill="rgb(245,64,36)" fg:x="13242" fg:w="1347"/><text x="16.8488%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,312 samples, 1.64%)</title><rect x="16.6426%" y="501" width="1.6446%" height="15" fill="rgb(245,80,10)" fg:x="13277" fg:w="1312"/><text x="16.8926%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (91 samples, 0.11%)</title><rect x="18.1732%" y="485" width="0.1141%" height="15" fill="rgb(232,107,50)" fg:x="14498" fg:w="91"/><text x="18.4232%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (78 samples, 0.10%)</title><rect x="18.1895%" y="469" width="0.0978%" height="15" fill="rgb(253,3,0)" fg:x="14511" fg:w="78"/><text x="18.4395%" y="479.50"></text></g><g><title>__irqentry_text_end (10 samples, 0.01%)</title><rect x="18.3399%" y="453" width="0.0125%" height="15" fill="rgb(212,99,53)" fg:x="14631" fg:w="10"/><text x="18.5899%" y="463.50"></text></g><g><title>charge_memcg (18 samples, 0.02%)</title><rect x="18.3950%" y="325" width="0.0226%" height="15" fill="rgb(249,111,54)" fg:x="14675" fg:w="18"/><text x="18.6450%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (30 samples, 0.04%)</title><rect x="18.4176%" y="325" width="0.0376%" height="15" fill="rgb(249,55,30)" fg:x="14693" fg:w="30"/><text x="18.6676%" y="335.50"></text></g><g><title>__mem_cgroup_charge (53 samples, 0.07%)</title><rect x="18.3925%" y="341" width="0.0664%" height="15" fill="rgb(237,47,42)" fg:x="14673" fg:w="53"/><text x="18.6425%" y="351.50"></text></g><g><title>__mod_lruvec_page_state (9 samples, 0.01%)</title><rect x="18.4640%" y="325" width="0.0113%" height="15" fill="rgb(211,20,18)" fg:x="14730" fg:w="9"/><text x="18.7140%" y="335.50"></text></g><g><title>page_add_new_anon_rmap (10 samples, 0.01%)</title><rect x="18.4640%" y="341" width="0.0125%" height="15" fill="rgb(231,203,46)" fg:x="14730" fg:w="10"/><text x="18.7140%" y="351.50"></text></g><g><title>__alloc_pages (29 samples, 0.04%)</title><rect x="18.4803%" y="309" width="0.0364%" height="15" fill="rgb(237,142,3)" fg:x="14743" fg:w="29"/><text x="18.7303%" y="319.50"></text></g><g><title>get_page_from_freelist (22 samples, 0.03%)</title><rect x="18.4890%" y="293" width="0.0276%" height="15" fill="rgb(241,107,1)" fg:x="14750" fg:w="22"/><text x="18.7390%" y="303.50"></text></g><g><title>rmqueue (12 samples, 0.02%)</title><rect x="18.5016%" y="277" width="0.0150%" height="15" fill="rgb(229,83,13)" fg:x="14760" fg:w="12"/><text x="18.7516%" y="287.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (11 samples, 0.01%)</title><rect x="18.5028%" y="261" width="0.0138%" height="15" fill="rgb(241,91,40)" fg:x="14761" fg:w="11"/><text x="18.7528%" y="271.50"></text></g><g><title>do_anonymous_page (105 samples, 0.13%)</title><rect x="18.3888%" y="357" width="0.1316%" height="15" fill="rgb(225,3,45)" fg:x="14670" fg:w="105"/><text x="18.6388%" y="367.50"></text></g><g><title>vma_alloc_folio (35 samples, 0.04%)</title><rect x="18.4765%" y="341" width="0.0439%" height="15" fill="rgb(244,223,14)" fg:x="14740" fg:w="35"/><text x="18.7265%" y="351.50"></text></g><g><title>__folio_alloc (32 samples, 0.04%)</title><rect x="18.4803%" y="325" width="0.0401%" height="15" fill="rgb(224,124,37)" fg:x="14743" fg:w="32"/><text x="18.7303%" y="335.50"></text></g><g><title>__handle_mm_fault (127 samples, 0.16%)</title><rect x="18.3637%" y="389" width="0.1592%" height="15" fill="rgb(251,171,30)" fg:x="14650" fg:w="127"/><text x="18.6137%" y="399.50"></text></g><g><title>handle_pte_fault (115 samples, 0.14%)</title><rect x="18.3787%" y="373" width="0.1442%" height="15" fill="rgb(236,46,54)" fg:x="14662" fg:w="115"/><text x="18.6287%" y="383.50"></text></g><g><title>handle_mm_fault (136 samples, 0.17%)</title><rect x="18.3624%" y="405" width="0.1705%" height="15" fill="rgb(245,213,5)" fg:x="14649" fg:w="136"/><text x="18.6124%" y="415.50"></text></g><g><title>do_user_addr_fault (146 samples, 0.18%)</title><rect x="18.3562%" y="421" width="0.1830%" height="15" fill="rgb(230,144,27)" fg:x="14644" fg:w="146"/><text x="18.6062%" y="431.50"></text></g><g><title>irqentry_exit (9 samples, 0.01%)</title><rect x="18.5392%" y="421" width="0.0113%" height="15" fill="rgb(220,86,6)" fg:x="14790" fg:w="9"/><text x="18.7892%" y="431.50"></text></g><g><title>irqentry_exit_to_user_mode (9 samples, 0.01%)</title><rect x="18.5392%" y="405" width="0.0113%" height="15" fill="rgb(240,20,13)" fg:x="14790" fg:w="9"/><text x="18.7892%" y="415.50"></text></g><g><title>asm_exc_page_fault (159 samples, 0.20%)</title><rect x="18.3524%" y="453" width="0.1993%" height="15" fill="rgb(217,89,34)" fg:x="14641" fg:w="159"/><text x="18.6024%" y="463.50"></text></g><g><title>exc_page_fault (159 samples, 0.20%)</title><rect x="18.3524%" y="437" width="0.1993%" height="15" fill="rgb(229,13,5)" fg:x="14641" fg:w="159"/><text x="18.6024%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (201 samples, 0.25%)</title><rect x="18.3110%" y="485" width="0.2520%" height="15" fill="rgb(244,67,35)" fg:x="14608" fg:w="201"/><text x="18.5610%" y="495.50"></text></g><g><title>core::ptr::write (196 samples, 0.25%)</title><rect x="18.3173%" y="469" width="0.2457%" height="15" fill="rgb(221,40,2)" fg:x="14613" fg:w="196"/><text x="18.5673%" y="479.50"></text></g><g><title>sync_regs (9 samples, 0.01%)</title><rect x="18.5517%" y="453" width="0.0113%" height="15" fill="rgb(237,157,21)" fg:x="14800" fg:w="9"/><text x="18.8017%" y="463.50"></text></g><g><title>handle_mm_fault (17 samples, 0.02%)</title><rect x="18.7448%" y="149" width="0.0213%" height="15" fill="rgb(222,94,11)" fg:x="14954" fg:w="17"/><text x="18.9948%" y="159.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.02%)</title><rect x="18.7448%" y="133" width="0.0213%" height="15" fill="rgb(249,113,6)" fg:x="14954" fg:w="17"/><text x="18.9948%" y="143.50"></text></g><g><title>handle_pte_fault (17 samples, 0.02%)</title><rect x="18.7448%" y="117" width="0.0213%" height="15" fill="rgb(238,137,36)" fg:x="14954" fg:w="17"/><text x="18.9948%" y="127.50"></text></g><g><title>do_anonymous_page (17 samples, 0.02%)</title><rect x="18.7448%" y="101" width="0.0213%" height="15" fill="rgb(210,102,26)" fg:x="14954" fg:w="17"/><text x="18.9948%" y="111.50"></text></g><g><title>asm_exc_page_fault (19 samples, 0.02%)</title><rect x="18.7448%" y="197" width="0.0238%" height="15" fill="rgb(218,30,30)" fg:x="14954" fg:w="19"/><text x="18.9948%" y="207.50"></text></g><g><title>exc_page_fault (19 samples, 0.02%)</title><rect x="18.7448%" y="181" width="0.0238%" height="15" fill="rgb(214,67,26)" fg:x="14954" fg:w="19"/><text x="18.9948%" y="191.50"></text></g><g><title>do_user_addr_fault (19 samples, 0.02%)</title><rect x="18.7448%" y="165" width="0.0238%" height="15" fill="rgb(251,9,53)" fg:x="14954" fg:w="19"/><text x="18.9948%" y="175.50"></text></g><g><title>perf_event_mmap_event (18 samples, 0.02%)</title><rect x="18.7786%" y="69" width="0.0226%" height="15" fill="rgb(228,204,25)" fg:x="14981" fg:w="18"/><text x="19.0286%" y="79.50"></text></g><g><title>perf_iterate_sb (16 samples, 0.02%)</title><rect x="18.7811%" y="53" width="0.0201%" height="15" fill="rgb(207,153,8)" fg:x="14983" fg:w="16"/><text x="19.0311%" y="63.50"></text></g><g><title>perf_iterate_ctx (16 samples, 0.02%)</title><rect x="18.7811%" y="37" width="0.0201%" height="15" fill="rgb(242,9,16)" fg:x="14983" fg:w="16"/><text x="19.0311%" y="47.50"></text></g><g><title>perf_event_mmap (19 samples, 0.02%)</title><rect x="18.7786%" y="85" width="0.0238%" height="15" fill="rgb(217,211,10)" fg:x="14981" fg:w="19"/><text x="19.0286%" y="95.50"></text></g><g><title>mprotect_fixup (26 samples, 0.03%)</title><rect x="18.7748%" y="101" width="0.0326%" height="15" fill="rgb(219,228,52)" fg:x="14978" fg:w="26"/><text x="19.0248%" y="111.50"></text></g><g><title>__x64_sys_mprotect (30 samples, 0.04%)</title><rect x="18.7711%" y="133" width="0.0376%" height="15" fill="rgb(231,92,29)" fg:x="14975" fg:w="30"/><text x="19.0211%" y="143.50"></text></g><g><title>do_mprotect_pkey (30 samples, 0.04%)</title><rect x="18.7711%" y="117" width="0.0376%" height="15" fill="rgb(232,8,23)" fg:x="14975" fg:w="30"/><text x="19.0211%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (36 samples, 0.05%)</title><rect x="18.7686%" y="165" width="0.0451%" height="15" fill="rgb(216,211,34)" fg:x="14973" fg:w="36"/><text x="19.0186%" y="175.50"></text></g><g><title>do_syscall_64 (34 samples, 0.04%)</title><rect x="18.7711%" y="149" width="0.0426%" height="15" fill="rgb(236,151,0)" fg:x="14975" fg:w="34"/><text x="19.0211%" y="159.50"></text></g><g><title>grow_heap (39 samples, 0.05%)</title><rect x="18.7686%" y="197" width="0.0489%" height="15" fill="rgb(209,168,3)" fg:x="14973" fg:w="39"/><text x="19.0186%" y="207.50"></text></g><g><title>__GI___mprotect (39 samples, 0.05%)</title><rect x="18.7686%" y="181" width="0.0489%" height="15" fill="rgb(208,129,28)" fg:x="14973" fg:w="39"/><text x="19.0186%" y="191.50"></text></g><g><title>_int_malloc (113 samples, 0.14%)</title><rect x="18.6771%" y="229" width="0.1416%" height="15" fill="rgb(229,78,22)" fg:x="14900" fg:w="113"/><text x="18.9271%" y="239.50"></text></g><g><title>sysmalloc (62 samples, 0.08%)</title><rect x="18.7410%" y="213" width="0.0777%" height="15" fill="rgb(228,187,13)" fg:x="14951" fg:w="62"/><text x="18.9910%" y="223.50"></text></g><g><title>__rdl_alloc (208 samples, 0.26%)</title><rect x="18.5642%" y="277" width="0.2607%" height="15" fill="rgb(240,119,24)" fg:x="14810" fg:w="208"/><text x="18.8142%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (208 samples, 0.26%)</title><rect x="18.5642%" y="261" width="0.2607%" height="15" fill="rgb(209,194,42)" fg:x="14810" fg:w="208"/><text x="18.8142%" y="271.50"></text></g><g><title>__GI___libc_malloc (208 samples, 0.26%)</title><rect x="18.5642%" y="245" width="0.2607%" height="15" fill="rgb(247,200,46)" fg:x="14810" fg:w="208"/><text x="18.8142%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (210 samples, 0.26%)</title><rect x="18.5630%" y="373" width="0.2632%" height="15" fill="rgb(218,76,16)" fg:x="14809" fg:w="210"/><text x="18.8130%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (210 samples, 0.26%)</title><rect x="18.5630%" y="357" width="0.2632%" height="15" fill="rgb(225,21,48)" fg:x="14809" fg:w="210"/><text x="18.8130%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (210 samples, 0.26%)</title><rect x="18.5630%" y="341" width="0.2632%" height="15" fill="rgb(239,223,50)" fg:x="14809" fg:w="210"/><text x="18.8130%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (209 samples, 0.26%)</title><rect x="18.5642%" y="325" width="0.2620%" height="15" fill="rgb(244,45,21)" fg:x="14810" fg:w="209"/><text x="18.8142%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (209 samples, 0.26%)</title><rect x="18.5642%" y="309" width="0.2620%" height="15" fill="rgb(232,33,43)" fg:x="14810" fg:w="209"/><text x="18.8142%" y="319.50"></text></g><g><title>alloc::alloc::alloc (209 samples, 0.26%)</title><rect x="18.5642%" y="293" width="0.2620%" height="15" fill="rgb(209,8,3)" fg:x="14810" fg:w="209"/><text x="18.8142%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (441 samples, 0.55%)</title><rect x="18.2872%" y="549" width="0.5528%" height="15" fill="rgb(214,25,53)" fg:x="14589" fg:w="441"/><text x="18.5372%" y="559.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (441 samples, 0.55%)</title><rect x="18.2872%" y="533" width="0.5528%" height="15" fill="rgb(254,186,54)" fg:x="14589" fg:w="441"/><text x="18.5372%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (441 samples, 0.55%)</title><rect x="18.2872%" y="517" width="0.5528%" height="15" fill="rgb(208,174,49)" fg:x="14589" fg:w="441"/><text x="18.5372%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (429 samples, 0.54%)</title><rect x="18.3023%" y="501" width="0.5377%" height="15" fill="rgb(233,191,51)" fg:x="14601" fg:w="429"/><text x="18.5523%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (221 samples, 0.28%)</title><rect x="18.5630%" y="485" width="0.2770%" height="15" fill="rgb(222,134,10)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="495.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (221 samples, 0.28%)</title><rect x="18.5630%" y="469" width="0.2770%" height="15" fill="rgb(230,226,20)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="479.50"></text></g><g><title>project1::solver::clause::Clause::with_key (221 samples, 0.28%)</title><rect x="18.5630%" y="453" width="0.2770%" height="15" fill="rgb(251,111,25)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (221 samples, 0.28%)</title><rect x="18.5630%" y="437" width="0.2770%" height="15" fill="rgb(224,40,46)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (221 samples, 0.28%)</title><rect x="18.5630%" y="421" width="0.2770%" height="15" fill="rgb(236,108,47)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (221 samples, 0.28%)</title><rect x="18.5630%" y="405" width="0.2770%" height="15" fill="rgb(234,93,0)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (221 samples, 0.28%)</title><rect x="18.5630%" y="389" width="0.2770%" height="15" fill="rgb(224,213,32)" fg:x="14809" fg:w="221"/><text x="18.8130%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.01%)</title><rect x="18.8262%" y="373" width="0.0138%" height="15" fill="rgb(251,11,48)" fg:x="15019" fg:w="11"/><text x="19.0762%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="18.8262%" y="357" width="0.0138%" height="15" fill="rgb(236,173,5)" fg:x="15019" fg:w="11"/><text x="19.0762%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (11 samples, 0.01%)</title><rect x="18.8262%" y="341" width="0.0138%" height="15" fill="rgb(230,95,12)" fg:x="15019" fg:w="11"/><text x="19.0762%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (33 samples, 0.04%)</title><rect x="18.8726%" y="517" width="0.0414%" height="15" fill="rgb(232,209,1)" fg:x="15056" fg:w="33"/><text x="19.1226%" y="527.50"></text></g><g><title>core::ptr::read (30 samples, 0.04%)</title><rect x="18.8764%" y="501" width="0.0376%" height="15" fill="rgb(232,6,1)" fg:x="15059" fg:w="30"/><text x="19.1264%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="18.9140%" y="405" width="0.0188%" height="15" fill="rgb(210,224,50)" fg:x="15089" fg:w="15"/><text x="19.1640%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="18.9140%" y="389" width="0.0188%" height="15" fill="rgb(228,127,35)" fg:x="15089" fg:w="15"/><text x="19.1640%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.02%)</title><rect x="18.9140%" y="373" width="0.0188%" height="15" fill="rgb(245,102,45)" fg:x="15089" fg:w="15"/><text x="19.1640%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.01%)</title><rect x="18.9215%" y="357" width="0.0113%" height="15" fill="rgb(214,1,49)" fg:x="15095" fg:w="9"/><text x="19.1715%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.03%)</title><rect x="18.9140%" y="437" width="0.0263%" height="15" fill="rgb(226,163,40)" fg:x="15089" fg:w="21"/><text x="19.1640%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21 samples, 0.03%)</title><rect x="18.9140%" y="421" width="0.0263%" height="15" fill="rgb(239,212,28)" fg:x="15089" fg:w="21"/><text x="19.1640%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.02%)</title><rect x="18.9466%" y="373" width="0.0163%" height="15" fill="rgb(220,20,13)" fg:x="15115" fg:w="13"/><text x="19.1966%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (13 samples, 0.02%)</title><rect x="18.9466%" y="357" width="0.0163%" height="15" fill="rgb(210,164,35)" fg:x="15115" fg:w="13"/><text x="19.1966%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.02%)</title><rect x="18.9466%" y="341" width="0.0163%" height="15" fill="rgb(248,109,41)" fg:x="15115" fg:w="13"/><text x="19.1966%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (13 samples, 0.02%)</title><rect x="18.9466%" y="325" width="0.0163%" height="15" fill="rgb(238,23,50)" fg:x="15115" fg:w="13"/><text x="19.1966%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (17 samples, 0.02%)</title><rect x="18.9466%" y="389" width="0.0213%" height="15" fill="rgb(211,48,49)" fg:x="15115" fg:w="17"/><text x="19.1966%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.04%)</title><rect x="18.9403%" y="421" width="0.0414%" height="15" fill="rgb(223,36,21)" fg:x="15110" fg:w="33"/><text x="19.1903%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (33 samples, 0.04%)</title><rect x="18.9403%" y="405" width="0.0414%" height="15" fill="rgb(207,123,46)" fg:x="15110" fg:w="33"/><text x="19.1903%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.01%)</title><rect x="18.9716%" y="389" width="0.0100%" height="15" fill="rgb(240,218,32)" fg:x="15135" fg:w="8"/><text x="19.2216%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.01%)</title><rect x="18.9716%" y="373" width="0.0100%" height="15" fill="rgb(252,5,43)" fg:x="15135" fg:w="8"/><text x="19.2216%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (21 samples, 0.03%)</title><rect x="18.9817%" y="389" width="0.0263%" height="15" fill="rgb(252,84,19)" fg:x="15143" fg:w="21"/><text x="19.2317%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.01%)</title><rect x="18.9980%" y="373" width="0.0100%" height="15" fill="rgb(243,152,39)" fg:x="15156" fg:w="8"/><text x="19.2480%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.01%)</title><rect x="18.9980%" y="357" width="0.0100%" height="15" fill="rgb(234,160,15)" fg:x="15156" fg:w="8"/><text x="19.2480%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (79 samples, 0.10%)</title><rect x="18.9140%" y="517" width="0.0990%" height="15" fill="rgb(237,34,20)" fg:x="15089" fg:w="79"/><text x="19.1640%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (79 samples, 0.10%)</title><rect x="18.9140%" y="501" width="0.0990%" height="15" fill="rgb(229,97,13)" fg:x="15089" fg:w="79"/><text x="19.1640%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (79 samples, 0.10%)</title><rect x="18.9140%" y="485" width="0.0990%" height="15" fill="rgb(234,71,50)" fg:x="15089" fg:w="79"/><text x="19.1640%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (79 samples, 0.10%)</title><rect x="18.9140%" y="469" width="0.0990%" height="15" fill="rgb(253,155,4)" fg:x="15089" fg:w="79"/><text x="19.1640%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (79 samples, 0.10%)</title><rect x="18.9140%" y="453" width="0.0990%" height="15" fill="rgb(222,185,37)" fg:x="15089" fg:w="79"/><text x="19.1640%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (58 samples, 0.07%)</title><rect x="18.9403%" y="437" width="0.0727%" height="15" fill="rgb(251,177,13)" fg:x="15110" fg:w="58"/><text x="19.1903%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (25 samples, 0.03%)</title><rect x="18.9817%" y="421" width="0.0313%" height="15" fill="rgb(250,179,40)" fg:x="15143" fg:w="25"/><text x="19.2317%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (25 samples, 0.03%)</title><rect x="18.9817%" y="405" width="0.0313%" height="15" fill="rgb(242,44,2)" fg:x="15143" fg:w="25"/><text x="19.2317%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (32 samples, 0.04%)</title><rect x="19.0180%" y="485" width="0.0401%" height="15" fill="rgb(216,177,13)" fg:x="15172" fg:w="32"/><text x="19.2680%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.01%)</title><rect x="19.0707%" y="293" width="0.0113%" height="15" fill="rgb(216,106,43)" fg:x="15214" fg:w="9"/><text x="19.3207%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.01%)</title><rect x="19.0870%" y="277" width="0.0100%" height="15" fill="rgb(216,183,2)" fg:x="15227" fg:w="8"/><text x="19.3370%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 0.03%)</title><rect x="19.0669%" y="341" width="0.0338%" height="15" fill="rgb(249,75,3)" fg:x="15211" fg:w="27"/><text x="19.3169%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 0.03%)</title><rect x="19.0669%" y="325" width="0.0338%" height="15" fill="rgb(219,67,39)" fg:x="15211" fg:w="27"/><text x="19.3169%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 0.03%)</title><rect x="19.0669%" y="309" width="0.0338%" height="15" fill="rgb(253,228,2)" fg:x="15211" fg:w="27"/><text x="19.3169%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.02%)</title><rect x="19.0819%" y="293" width="0.0188%" height="15" fill="rgb(235,138,27)" fg:x="15223" fg:w="15"/><text x="19.3319%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (35 samples, 0.04%)</title><rect x="19.0669%" y="373" width="0.0439%" height="15" fill="rgb(236,97,51)" fg:x="15211" fg:w="35"/><text x="19.3169%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (35 samples, 0.04%)</title><rect x="19.0669%" y="357" width="0.0439%" height="15" fill="rgb(240,80,30)" fg:x="15211" fg:w="35"/><text x="19.3169%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (17 samples, 0.02%)</title><rect x="19.1158%" y="309" width="0.0213%" height="15" fill="rgb(230,178,19)" fg:x="15250" fg:w="17"/><text x="19.3658%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (17 samples, 0.02%)</title><rect x="19.1158%" y="293" width="0.0213%" height="15" fill="rgb(210,190,27)" fg:x="15250" fg:w="17"/><text x="19.3658%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.02%)</title><rect x="19.1158%" y="277" width="0.0213%" height="15" fill="rgb(222,107,31)" fg:x="15250" fg:w="17"/><text x="19.3658%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (17 samples, 0.02%)</title><rect x="19.1158%" y="261" width="0.0213%" height="15" fill="rgb(216,127,34)" fg:x="15250" fg:w="17"/><text x="19.3658%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (21 samples, 0.03%)</title><rect x="19.1158%" y="325" width="0.0263%" height="15" fill="rgb(234,116,52)" fg:x="15250" fg:w="21"/><text x="19.3658%" y="335.50"></text></g><g><title>core::mem::drop (78 samples, 0.10%)</title><rect x="19.0631%" y="469" width="0.0978%" height="15" fill="rgb(222,124,15)" fg:x="15208" fg:w="78"/><text x="19.3131%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (78 samples, 0.10%)</title><rect x="19.0631%" y="453" width="0.0978%" height="15" fill="rgb(231,179,28)" fg:x="15208" fg:w="78"/><text x="19.3131%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.10%)</title><rect x="19.0631%" y="437" width="0.0978%" height="15" fill="rgb(226,93,45)" fg:x="15208" fg:w="78"/><text x="19.3131%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (75 samples, 0.09%)</title><rect x="19.0669%" y="421" width="0.0940%" height="15" fill="rgb(215,8,51)" fg:x="15211" fg:w="75"/><text x="19.3169%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (75 samples, 0.09%)</title><rect x="19.0669%" y="405" width="0.0940%" height="15" fill="rgb(223,106,5)" fg:x="15211" fg:w="75"/><text x="19.3169%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (75 samples, 0.09%)</title><rect x="19.0669%" y="389" width="0.0940%" height="15" fill="rgb(250,191,5)" fg:x="15211" fg:w="75"/><text x="19.3169%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (40 samples, 0.05%)</title><rect x="19.1108%" y="373" width="0.0501%" height="15" fill="rgb(242,132,44)" fg:x="15246" fg:w="40"/><text x="19.3608%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (40 samples, 0.05%)</title><rect x="19.1108%" y="357" width="0.0501%" height="15" fill="rgb(251,152,29)" fg:x="15246" fg:w="40"/><text x="19.3608%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (40 samples, 0.05%)</title><rect x="19.1108%" y="341" width="0.0501%" height="15" fill="rgb(218,179,5)" fg:x="15246" fg:w="40"/><text x="19.3608%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.03%)</title><rect x="19.1810%" y="421" width="0.0326%" height="15" fill="rgb(227,67,19)" fg:x="15302" fg:w="26"/><text x="19.4310%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.01%)</title><rect x="19.2261%" y="277" width="0.0100%" height="15" fill="rgb(233,119,31)" fg:x="15338" fg:w="8"/><text x="19.4761%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.03%)</title><rect x="19.2136%" y="341" width="0.0301%" height="15" fill="rgb(241,120,22)" fg:x="15328" fg:w="24"/><text x="19.4636%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24 samples, 0.03%)</title><rect x="19.2136%" y="325" width="0.0301%" height="15" fill="rgb(224,102,30)" fg:x="15328" fg:w="24"/><text x="19.4636%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24 samples, 0.03%)</title><rect x="19.2136%" y="309" width="0.0301%" height="15" fill="rgb(210,164,37)" fg:x="15328" fg:w="24"/><text x="19.4636%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.02%)</title><rect x="19.2236%" y="293" width="0.0201%" height="15" fill="rgb(226,191,16)" fg:x="15336" fg:w="16"/><text x="19.4736%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.04%)</title><rect x="19.2136%" y="373" width="0.0389%" height="15" fill="rgb(214,40,45)" fg:x="15328" fg:w="31"/><text x="19.4636%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.04%)</title><rect x="19.2136%" y="357" width="0.0389%" height="15" fill="rgb(244,29,26)" fg:x="15328" fg:w="31"/><text x="19.4636%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.02%)</title><rect x="19.2524%" y="357" width="0.0226%" height="15" fill="rgb(216,16,5)" fg:x="15359" fg:w="18"/><text x="19.5024%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (18 samples, 0.02%)</title><rect x="19.2524%" y="341" width="0.0226%" height="15" fill="rgb(249,76,35)" fg:x="15359" fg:w="18"/><text x="19.5024%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (77 samples, 0.10%)</title><rect x="19.1810%" y="453" width="0.0965%" height="15" fill="rgb(207,11,44)" fg:x="15302" fg:w="77"/><text x="19.4310%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.10%)</title><rect x="19.1810%" y="437" width="0.0965%" height="15" fill="rgb(228,190,49)" fg:x="15302" fg:w="77"/><text x="19.4310%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (51 samples, 0.06%)</title><rect x="19.2136%" y="421" width="0.0639%" height="15" fill="rgb(214,173,12)" fg:x="15328" fg:w="51"/><text x="19.4636%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (51 samples, 0.06%)</title><rect x="19.2136%" y="405" width="0.0639%" height="15" fill="rgb(218,26,35)" fg:x="15328" fg:w="51"/><text x="19.4636%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (51 samples, 0.06%)</title><rect x="19.2136%" y="389" width="0.0639%" height="15" fill="rgb(220,200,19)" fg:x="15328" fg:w="51"/><text x="19.4636%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20 samples, 0.03%)</title><rect x="19.2524%" y="373" width="0.0251%" height="15" fill="rgb(239,95,49)" fg:x="15359" fg:w="20"/><text x="19.5024%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (92 samples, 0.12%)</title><rect x="19.1647%" y="469" width="0.1153%" height="15" fill="rgb(235,85,53)" fg:x="15289" fg:w="92"/><text x="19.4147%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15 samples, 0.02%)</title><rect x="19.3088%" y="325" width="0.0188%" height="15" fill="rgb(233,133,31)" fg:x="15404" fg:w="15"/><text x="19.5588%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (30 samples, 0.04%)</title><rect x="19.3514%" y="309" width="0.0376%" height="15" fill="rgb(218,25,20)" fg:x="15438" fg:w="30"/><text x="19.6014%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (94 samples, 0.12%)</title><rect x="19.2925%" y="373" width="0.1178%" height="15" fill="rgb(252,210,38)" fg:x="15391" fg:w="94"/><text x="19.5425%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (94 samples, 0.12%)</title><rect x="19.2925%" y="357" width="0.1178%" height="15" fill="rgb(242,134,21)" fg:x="15391" fg:w="94"/><text x="19.5425%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (94 samples, 0.12%)</title><rect x="19.2925%" y="341" width="0.1178%" height="15" fill="rgb(213,28,48)" fg:x="15391" fg:w="94"/><text x="19.5425%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (66 samples, 0.08%)</title><rect x="19.3276%" y="325" width="0.0827%" height="15" fill="rgb(250,196,2)" fg:x="15419" fg:w="66"/><text x="19.5776%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.02%)</title><rect x="19.3890%" y="309" width="0.0213%" height="15" fill="rgb(227,5,17)" fg:x="15468" fg:w="17"/><text x="19.6390%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 0.01%)</title><rect x="19.4104%" y="373" width="0.0100%" height="15" fill="rgb(221,226,24)" fg:x="15485" fg:w="8"/><text x="19.6604%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.02%)</title><rect x="19.4354%" y="245" width="0.0175%" height="15" fill="rgb(211,5,48)" fg:x="15505" fg:w="14"/><text x="19.6854%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (140 samples, 0.18%)</title><rect x="19.2925%" y="405" width="0.1755%" height="15" fill="rgb(219,150,6)" fg:x="15391" fg:w="140"/><text x="19.5425%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (140 samples, 0.18%)</title><rect x="19.2925%" y="389" width="0.1755%" height="15" fill="rgb(251,46,16)" fg:x="15391" fg:w="140"/><text x="19.5425%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (38 samples, 0.05%)</title><rect x="19.4204%" y="373" width="0.0476%" height="15" fill="rgb(220,204,40)" fg:x="15493" fg:w="38"/><text x="19.6704%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (38 samples, 0.05%)</title><rect x="19.4204%" y="357" width="0.0476%" height="15" fill="rgb(211,85,2)" fg:x="15493" fg:w="38"/><text x="19.6704%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (33 samples, 0.04%)</title><rect x="19.4267%" y="341" width="0.0414%" height="15" fill="rgb(229,17,7)" fg:x="15498" fg:w="33"/><text x="19.6767%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (33 samples, 0.04%)</title><rect x="19.4267%" y="325" width="0.0414%" height="15" fill="rgb(239,72,28)" fg:x="15498" fg:w="33"/><text x="19.6767%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.04%)</title><rect x="19.4267%" y="309" width="0.0414%" height="15" fill="rgb(230,47,54)" fg:x="15498" fg:w="33"/><text x="19.6767%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.04%)</title><rect x="19.4267%" y="293" width="0.0414%" height="15" fill="rgb(214,50,8)" fg:x="15498" fg:w="33"/><text x="19.6767%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.04%)</title><rect x="19.4267%" y="277" width="0.0414%" height="15" fill="rgb(216,198,43)" fg:x="15498" fg:w="33"/><text x="19.6767%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.04%)</title><rect x="19.4292%" y="261" width="0.0389%" height="15" fill="rgb(234,20,35)" fg:x="15500" fg:w="31"/><text x="19.6792%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12 samples, 0.02%)</title><rect x="19.4530%" y="245" width="0.0150%" height="15" fill="rgb(254,45,19)" fg:x="15519" fg:w="12"/><text x="19.7030%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="19.4743%" y="357" width="0.0100%" height="15" fill="rgb(219,14,44)" fg:x="15536" fg:w="8"/><text x="19.7243%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.01%)</title><rect x="19.4743%" y="341" width="0.0100%" height="15" fill="rgb(217,220,26)" fg:x="15536" fg:w="8"/><text x="19.7243%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (43 samples, 0.05%)</title><rect x="19.4843%" y="341" width="0.0539%" height="15" fill="rgb(213,158,28)" fg:x="15544" fg:w="43"/><text x="19.7343%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (43 samples, 0.05%)</title><rect x="19.4843%" y="325" width="0.0539%" height="15" fill="rgb(252,51,52)" fg:x="15544" fg:w="43"/><text x="19.7343%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 0.05%)</title><rect x="19.4843%" y="309" width="0.0539%" height="15" fill="rgb(246,89,16)" fg:x="15544" fg:w="43"/><text x="19.7343%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (43 samples, 0.05%)</title><rect x="19.4843%" y="293" width="0.0539%" height="15" fill="rgb(216,158,49)" fg:x="15544" fg:w="43"/><text x="19.7343%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (50 samples, 0.06%)</title><rect x="19.4843%" y="357" width="0.0627%" height="15" fill="rgb(236,107,19)" fg:x="15544" fg:w="50"/><text x="19.7343%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (10 samples, 0.01%)</title><rect x="19.5470%" y="357" width="0.0125%" height="15" fill="rgb(228,185,30)" fg:x="15594" fg:w="10"/><text x="19.7970%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.03%)</title><rect x="19.5645%" y="357" width="0.0251%" height="15" fill="rgb(246,134,8)" fg:x="15608" fg:w="20"/><text x="19.8145%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 0.03%)</title><rect x="19.5645%" y="341" width="0.0251%" height="15" fill="rgb(214,143,50)" fg:x="15608" fg:w="20"/><text x="19.8145%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.03%)</title><rect x="19.5645%" y="325" width="0.0251%" height="15" fill="rgb(228,75,8)" fg:x="15608" fg:w="20"/><text x="19.8145%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (30 samples, 0.04%)</title><rect x="19.5896%" y="357" width="0.0376%" height="15" fill="rgb(207,175,4)" fg:x="15628" fg:w="30"/><text x="19.8396%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (30 samples, 0.04%)</title><rect x="19.5896%" y="341" width="0.0376%" height="15" fill="rgb(205,108,24)" fg:x="15628" fg:w="30"/><text x="19.8396%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (130 samples, 0.16%)</title><rect x="19.4680%" y="373" width="0.1630%" height="15" fill="rgb(244,120,49)" fg:x="15531" fg:w="130"/><text x="19.7180%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (131 samples, 0.16%)</title><rect x="19.4680%" y="389" width="0.1642%" height="15" fill="rgb(223,47,38)" fg:x="15531" fg:w="131"/><text x="19.7180%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (282 samples, 0.35%)</title><rect x="19.2800%" y="469" width="0.3535%" height="15" fill="rgb(229,179,11)" fg:x="15381" fg:w="282"/><text x="19.5300%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (276 samples, 0.35%)</title><rect x="19.2875%" y="453" width="0.3460%" height="15" fill="rgb(231,122,1)" fg:x="15387" fg:w="276"/><text x="19.5375%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (276 samples, 0.35%)</title><rect x="19.2875%" y="437" width="0.3460%" height="15" fill="rgb(245,119,9)" fg:x="15387" fg:w="276"/><text x="19.5375%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (276 samples, 0.35%)</title><rect x="19.2875%" y="421" width="0.3460%" height="15" fill="rgb(241,163,25)" fg:x="15387" fg:w="276"/><text x="19.5375%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (132 samples, 0.17%)</title><rect x="19.4680%" y="405" width="0.1655%" height="15" fill="rgb(217,214,3)" fg:x="15531" fg:w="132"/><text x="19.7180%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (641 samples, 0.80%)</title><rect x="18.8425%" y="549" width="0.8035%" height="15" fill="rgb(240,86,28)" fg:x="15032" fg:w="641"/><text x="19.0925%" y="559.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (621 samples, 0.78%)</title><rect x="18.8676%" y="533" width="0.7784%" height="15" fill="rgb(215,47,9)" fg:x="15052" fg:w="621"/><text x="19.1176%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (505 samples, 0.63%)</title><rect x="19.0130%" y="517" width="0.6330%" height="15" fill="rgb(252,25,45)" fg:x="15168" fg:w="505"/><text x="19.2630%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (505 samples, 0.63%)</title><rect x="19.0130%" y="501" width="0.6330%" height="15" fill="rgb(251,164,9)" fg:x="15168" fg:w="505"/><text x="19.2630%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (469 samples, 0.59%)</title><rect x="19.0581%" y="485" width="0.5879%" height="15" fill="rgb(233,194,0)" fg:x="15204" fg:w="469"/><text x="19.3081%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (10 samples, 0.01%)</title><rect x="19.6335%" y="469" width="0.0125%" height="15" fill="rgb(249,111,24)" fg:x="15663" fg:w="10"/><text x="19.8835%" y="479.50"></text></g><g><title>__mem_cgroup_charge (13 samples, 0.02%)</title><rect x="19.6648%" y="181" width="0.0163%" height="15" fill="rgb(250,223,3)" fg:x="15688" fg:w="13"/><text x="19.9148%" y="191.50"></text></g><g><title>handle_mm_fault (27 samples, 0.03%)</title><rect x="19.6611%" y="245" width="0.0338%" height="15" fill="rgb(236,178,37)" fg:x="15685" fg:w="27"/><text x="19.9111%" y="255.50"></text></g><g><title>__handle_mm_fault (27 samples, 0.03%)</title><rect x="19.6611%" y="229" width="0.0338%" height="15" fill="rgb(241,158,50)" fg:x="15685" fg:w="27"/><text x="19.9111%" y="239.50"></text></g><g><title>handle_pte_fault (26 samples, 0.03%)</title><rect x="19.6623%" y="213" width="0.0326%" height="15" fill="rgb(213,121,41)" fg:x="15686" fg:w="26"/><text x="19.9123%" y="223.50"></text></g><g><title>do_anonymous_page (25 samples, 0.03%)</title><rect x="19.6636%" y="197" width="0.0313%" height="15" fill="rgb(240,92,3)" fg:x="15687" fg:w="25"/><text x="19.9136%" y="207.50"></text></g><g><title>do_user_addr_fault (28 samples, 0.04%)</title><rect x="19.6611%" y="261" width="0.0351%" height="15" fill="rgb(205,123,3)" fg:x="15685" fg:w="28"/><text x="19.9111%" y="271.50"></text></g><g><title>asm_exc_page_fault (29 samples, 0.04%)</title><rect x="19.6611%" y="293" width="0.0364%" height="15" fill="rgb(205,97,47)" fg:x="15685" fg:w="29"/><text x="19.9111%" y="303.50"></text></g><g><title>exc_page_fault (29 samples, 0.04%)</title><rect x="19.6611%" y="277" width="0.0364%" height="15" fill="rgb(247,152,14)" fg:x="15685" fg:w="29"/><text x="19.9111%" y="287.50"></text></g><g><title>perf_event_mmap (23 samples, 0.03%)</title><rect x="19.7087%" y="181" width="0.0288%" height="15" fill="rgb(248,195,53)" fg:x="15723" fg:w="23"/><text x="19.9587%" y="191.50"></text></g><g><title>perf_event_mmap_event (22 samples, 0.03%)</title><rect x="19.7099%" y="165" width="0.0276%" height="15" fill="rgb(226,201,16)" fg:x="15724" fg:w="22"/><text x="19.9599%" y="175.50"></text></g><g><title>perf_iterate_sb (22 samples, 0.03%)</title><rect x="19.7099%" y="149" width="0.0276%" height="15" fill="rgb(205,98,0)" fg:x="15724" fg:w="22"/><text x="19.9599%" y="159.50"></text></g><g><title>perf_iterate_ctx (22 samples, 0.03%)</title><rect x="19.7099%" y="133" width="0.0276%" height="15" fill="rgb(214,191,48)" fg:x="15724" fg:w="22"/><text x="19.9599%" y="143.50"></text></g><g><title>mprotect_fixup (34 samples, 0.04%)</title><rect x="19.6999%" y="197" width="0.0426%" height="15" fill="rgb(237,112,39)" fg:x="15716" fg:w="34"/><text x="19.9499%" y="207.50"></text></g><g><title>__x64_sys_mprotect (36 samples, 0.05%)</title><rect x="19.6999%" y="229" width="0.0451%" height="15" fill="rgb(247,203,27)" fg:x="15716" fg:w="36"/><text x="19.9499%" y="239.50"></text></g><g><title>do_mprotect_pkey (36 samples, 0.05%)</title><rect x="19.6999%" y="213" width="0.0451%" height="15" fill="rgb(235,124,28)" fg:x="15716" fg:w="36"/><text x="19.9499%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (39 samples, 0.05%)</title><rect x="19.6987%" y="261" width="0.0489%" height="15" fill="rgb(208,207,46)" fg:x="15715" fg:w="39"/><text x="19.9487%" y="271.50"></text></g><g><title>do_syscall_64 (38 samples, 0.05%)</title><rect x="19.6999%" y="245" width="0.0476%" height="15" fill="rgb(234,176,4)" fg:x="15716" fg:w="38"/><text x="19.9499%" y="255.50"></text></g><g><title>__GI___libc_malloc (82 samples, 0.10%)</title><rect x="19.6485%" y="341" width="0.1028%" height="15" fill="rgb(230,133,28)" fg:x="15675" fg:w="82"/><text x="19.8985%" y="351.50"></text></g><g><title>_int_malloc (82 samples, 0.10%)</title><rect x="19.6485%" y="325" width="0.1028%" height="15" fill="rgb(211,137,40)" fg:x="15675" fg:w="82"/><text x="19.8985%" y="335.50"></text></g><g><title>sysmalloc (82 samples, 0.10%)</title><rect x="19.6485%" y="309" width="0.1028%" height="15" fill="rgb(254,35,13)" fg:x="15675" fg:w="82"/><text x="19.8985%" y="319.50"></text></g><g><title>grow_heap (43 samples, 0.05%)</title><rect x="19.6974%" y="293" width="0.0539%" height="15" fill="rgb(225,49,51)" fg:x="15714" fg:w="43"/><text x="19.9474%" y="303.50"></text></g><g><title>__GI___mprotect (43 samples, 0.05%)</title><rect x="19.6974%" y="277" width="0.0539%" height="15" fill="rgb(251,10,15)" fg:x="15714" fg:w="43"/><text x="19.9474%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84 samples, 0.11%)</title><rect x="19.6485%" y="469" width="0.1053%" height="15" fill="rgb(228,207,15)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.11%)</title><rect x="19.6485%" y="453" width="0.1053%" height="15" fill="rgb(241,99,19)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.11%)</title><rect x="19.6485%" y="437" width="0.1053%" height="15" fill="rgb(207,104,49)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.11%)</title><rect x="19.6485%" y="421" width="0.1053%" height="15" fill="rgb(234,99,18)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.11%)</title><rect x="19.6485%" y="405" width="0.1053%" height="15" fill="rgb(213,191,49)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="415.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.11%)</title><rect x="19.6485%" y="389" width="0.1053%" height="15" fill="rgb(210,226,19)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="399.50"></text></g><g><title>__rdl_alloc (84 samples, 0.11%)</title><rect x="19.6485%" y="373" width="0.1053%" height="15" fill="rgb(229,97,18)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (84 samples, 0.11%)</title><rect x="19.6485%" y="357" width="0.1053%" height="15" fill="rgb(211,167,15)" fg:x="15675" fg:w="84"/><text x="19.8985%" y="367.50"></text></g><g><title>charge_memcg (15 samples, 0.02%)</title><rect x="19.7877%" y="293" width="0.0188%" height="15" fill="rgb(210,169,34)" fg:x="15786" fg:w="15"/><text x="20.0377%" y="303.50"></text></g><g><title>__mem_cgroup_charge (21 samples, 0.03%)</title><rect x="19.7877%" y="309" width="0.0263%" height="15" fill="rgb(241,121,31)" fg:x="15786" fg:w="21"/><text x="20.0377%" y="319.50"></text></g><g><title>do_anonymous_page (40 samples, 0.05%)</title><rect x="19.7864%" y="325" width="0.0501%" height="15" fill="rgb(232,40,11)" fg:x="15785" fg:w="40"/><text x="20.0364%" y="335.50"></text></g><g><title>vma_alloc_folio (9 samples, 0.01%)</title><rect x="19.8253%" y="309" width="0.0113%" height="15" fill="rgb(205,86,26)" fg:x="15816" fg:w="9"/><text x="20.0753%" y="319.50"></text></g><g><title>__folio_alloc (9 samples, 0.01%)</title><rect x="19.8253%" y="293" width="0.0113%" height="15" fill="rgb(231,126,28)" fg:x="15816" fg:w="9"/><text x="20.0753%" y="303.50"></text></g><g><title>__alloc_pages (9 samples, 0.01%)</title><rect x="19.8253%" y="277" width="0.0113%" height="15" fill="rgb(219,221,18)" fg:x="15816" fg:w="9"/><text x="20.0753%" y="287.50"></text></g><g><title>__handle_mm_fault (47 samples, 0.06%)</title><rect x="19.7789%" y="357" width="0.0589%" height="15" fill="rgb(211,40,0)" fg:x="15779" fg:w="47"/><text x="20.0289%" y="367.50"></text></g><g><title>handle_pte_fault (46 samples, 0.06%)</title><rect x="19.7801%" y="341" width="0.0577%" height="15" fill="rgb(239,85,43)" fg:x="15780" fg:w="46"/><text x="20.0301%" y="351.50"></text></g><g><title>do_user_addr_fault (52 samples, 0.07%)</title><rect x="19.7739%" y="389" width="0.0652%" height="15" fill="rgb(231,55,21)" fg:x="15775" fg:w="52"/><text x="20.0239%" y="399.50"></text></g><g><title>handle_mm_fault (50 samples, 0.06%)</title><rect x="19.7764%" y="373" width="0.0627%" height="15" fill="rgb(225,184,43)" fg:x="15777" fg:w="50"/><text x="20.0264%" y="383.50"></text></g><g><title>asm_exc_page_fault (59 samples, 0.07%)</title><rect x="19.7726%" y="421" width="0.0740%" height="15" fill="rgb(251,158,41)" fg:x="15774" fg:w="59"/><text x="20.0226%" y="431.50"></text></g><g><title>exc_page_fault (58 samples, 0.07%)</title><rect x="19.7739%" y="405" width="0.0727%" height="15" fill="rgb(234,159,37)" fg:x="15775" fg:w="58"/><text x="20.0239%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (166 samples, 0.21%)</title><rect x="19.6485%" y="533" width="0.2081%" height="15" fill="rgb(216,204,22)" fg:x="15675" fg:w="166"/><text x="19.8985%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (166 samples, 0.21%)</title><rect x="19.6485%" y="517" width="0.2081%" height="15" fill="rgb(214,17,3)" fg:x="15675" fg:w="166"/><text x="19.8985%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (166 samples, 0.21%)</title><rect x="19.6485%" y="501" width="0.2081%" height="15" fill="rgb(212,111,17)" fg:x="15675" fg:w="166"/><text x="19.8985%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (166 samples, 0.21%)</title><rect x="19.6485%" y="485" width="0.2081%" height="15" fill="rgb(221,157,24)" fg:x="15675" fg:w="166"/><text x="19.8985%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (82 samples, 0.10%)</title><rect x="19.7538%" y="469" width="0.1028%" height="15" fill="rgb(252,16,13)" fg:x="15759" fg:w="82"/><text x="20.0038%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.10%)</title><rect x="19.7538%" y="453" width="0.1028%" height="15" fill="rgb(221,62,2)" fg:x="15759" fg:w="82"/><text x="20.0038%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (79 samples, 0.10%)</title><rect x="19.7576%" y="437" width="0.0990%" height="15" fill="rgb(247,87,22)" fg:x="15762" fg:w="79"/><text x="20.0076%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (32 samples, 0.04%)</title><rect x="19.9318%" y="469" width="0.0401%" height="15" fill="rgb(215,73,9)" fg:x="15901" fg:w="32"/><text x="20.1818%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (32 samples, 0.04%)</title><rect x="19.9318%" y="453" width="0.0401%" height="15" fill="rgb(207,175,33)" fg:x="15901" fg:w="32"/><text x="20.1818%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (40 samples, 0.05%)</title><rect x="19.9318%" y="501" width="0.0501%" height="15" fill="rgb(243,129,54)" fg:x="15901" fg:w="40"/><text x="20.1818%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (40 samples, 0.05%)</title><rect x="19.9318%" y="485" width="0.0501%" height="15" fill="rgb(227,119,45)" fg:x="15901" fg:w="40"/><text x="20.1818%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (8 samples, 0.01%)</title><rect x="19.9719%" y="469" width="0.0100%" height="15" fill="rgb(205,109,36)" fg:x="15933" fg:w="8"/><text x="20.2219%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (8 samples, 0.01%)</title><rect x="19.9719%" y="453" width="0.0100%" height="15" fill="rgb(205,6,39)" fg:x="15933" fg:w="8"/><text x="20.2219%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (97 samples, 0.12%)</title><rect x="19.8616%" y="517" width="0.1216%" height="15" fill="rgb(221,32,16)" fg:x="15845" fg:w="97"/><text x="20.1116%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (102 samples, 0.13%)</title><rect x="19.8566%" y="533" width="0.1279%" height="15" fill="rgb(228,144,50)" fg:x="15841" fg:w="102"/><text x="20.1066%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (90 samples, 0.11%)</title><rect x="20.1136%" y="405" width="0.1128%" height="15" fill="rgb(229,201,53)" fg:x="16046" fg:w="90"/><text x="20.3636%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (90 samples, 0.11%)</title><rect x="20.1136%" y="389" width="0.1128%" height="15" fill="rgb(249,153,27)" fg:x="16046" fg:w="90"/><text x="20.3636%" y="399.50"></text></g><g><title>core::slice::sort::find_streak (143 samples, 0.18%)</title><rect x="20.0484%" y="485" width="0.1792%" height="15" fill="rgb(227,106,25)" fg:x="15994" fg:w="143"/><text x="20.2984%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (128 samples, 0.16%)</title><rect x="20.0672%" y="469" width="0.1604%" height="15" fill="rgb(230,65,29)" fg:x="16009" fg:w="128"/><text x="20.3172%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (124 samples, 0.16%)</title><rect x="20.0722%" y="453" width="0.1554%" height="15" fill="rgb(221,57,46)" fg:x="16013" fg:w="124"/><text x="20.3222%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (91 samples, 0.11%)</title><rect x="20.1136%" y="437" width="0.1141%" height="15" fill="rgb(229,161,17)" fg:x="16046" fg:w="91"/><text x="20.3636%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (91 samples, 0.11%)</title><rect x="20.1136%" y="421" width="0.1141%" height="15" fill="rgb(222,213,11)" fg:x="16046" fg:w="91"/><text x="20.3636%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (27 samples, 0.03%)</title><rect x="20.3693%" y="453" width="0.0338%" height="15" fill="rgb(235,35,13)" fg:x="16250" fg:w="27"/><text x="20.6193%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.03%)</title><rect x="20.9797%" y="405" width="0.0326%" height="15" fill="rgb(233,158,34)" fg:x="16737" fg:w="26"/><text x="21.2297%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (546 samples, 0.68%)</title><rect x="21.0123%" y="405" width="0.6844%" height="15" fill="rgb(215,151,48)" fg:x="16763" fg:w="546"/><text x="21.2623%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (546 samples, 0.68%)</title><rect x="21.0123%" y="389" width="0.6844%" height="15" fill="rgb(229,84,14)" fg:x="16763" fg:w="546"/><text x="21.2623%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (625 samples, 0.78%)</title><rect x="20.9797%" y="437" width="0.7834%" height="15" fill="rgb(229,68,14)" fg:x="16737" fg:w="625"/><text x="21.2297%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (625 samples, 0.78%)</title><rect x="20.9797%" y="421" width="0.7834%" height="15" fill="rgb(243,106,26)" fg:x="16737" fg:w="625"/><text x="21.2297%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (53 samples, 0.07%)</title><rect x="21.6967%" y="405" width="0.0664%" height="15" fill="rgb(206,45,38)" fg:x="17309" fg:w="53"/><text x="21.9467%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (53 samples, 0.07%)</title><rect x="21.6967%" y="389" width="0.0664%" height="15" fill="rgb(226,6,15)" fg:x="17309" fg:w="53"/><text x="21.9467%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (19 samples, 0.02%)</title><rect x="21.7632%" y="437" width="0.0238%" height="15" fill="rgb(232,22,54)" fg:x="17362" fg:w="19"/><text x="22.0132%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1,169 samples, 1.47%)</title><rect x="20.3693%" y="469" width="1.4653%" height="15" fill="rgb(229,222,32)" fg:x="16250" fg:w="1169"/><text x="20.6193%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (1,142 samples, 1.43%)</title><rect x="20.4031%" y="453" width="1.4315%" height="15" fill="rgb(228,62,29)" fg:x="16277" fg:w="1142"/><text x="20.6531%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (38 samples, 0.05%)</title><rect x="21.7870%" y="437" width="0.0476%" height="15" fill="rgb(251,103,34)" fg:x="17381" fg:w="38"/><text x="22.0370%" y="447.50"></text></g><g><title>__mem_cgroup_charge (13 samples, 0.02%)</title><rect x="22.0941%" y="325" width="0.0163%" height="15" fill="rgb(233,12,30)" fg:x="17626" fg:w="13"/><text x="22.3441%" y="335.50"></text></g><g><title>do_anonymous_page (25 samples, 0.03%)</title><rect x="22.0916%" y="341" width="0.0313%" height="15" fill="rgb(238,52,0)" fg:x="17624" fg:w="25"/><text x="22.3416%" y="351.50"></text></g><g><title>vma_alloc_folio (8 samples, 0.01%)</title><rect x="22.1129%" y="325" width="0.0100%" height="15" fill="rgb(223,98,5)" fg:x="17641" fg:w="8"/><text x="22.3629%" y="335.50"></text></g><g><title>asm_exc_page_fault (28 samples, 0.04%)</title><rect x="22.0903%" y="437" width="0.0351%" height="15" fill="rgb(228,75,37)" fg:x="17623" fg:w="28"/><text x="22.3403%" y="447.50"></text></g><g><title>exc_page_fault (28 samples, 0.04%)</title><rect x="22.0903%" y="421" width="0.0351%" height="15" fill="rgb(205,115,49)" fg:x="17623" fg:w="28"/><text x="22.3403%" y="431.50"></text></g><g><title>do_user_addr_fault (28 samples, 0.04%)</title><rect x="22.0903%" y="405" width="0.0351%" height="15" fill="rgb(250,154,43)" fg:x="17623" fg:w="28"/><text x="22.3403%" y="415.50"></text></g><g><title>handle_mm_fault (28 samples, 0.04%)</title><rect x="22.0903%" y="389" width="0.0351%" height="15" fill="rgb(226,43,29)" fg:x="17623" fg:w="28"/><text x="22.3403%" y="399.50"></text></g><g><title>__handle_mm_fault (28 samples, 0.04%)</title><rect x="22.0903%" y="373" width="0.0351%" height="15" fill="rgb(249,228,39)" fg:x="17623" fg:w="28"/><text x="22.3403%" y="383.50"></text></g><g><title>handle_pte_fault (27 samples, 0.03%)</title><rect x="22.0916%" y="357" width="0.0338%" height="15" fill="rgb(216,79,43)" fg:x="17624" fg:w="27"/><text x="22.3416%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (67 samples, 0.08%)</title><rect x="22.0452%" y="453" width="0.0840%" height="15" fill="rgb(228,95,12)" fg:x="17587" fg:w="67"/><text x="22.2952%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (234 samples, 0.29%)</title><rect x="21.8371%" y="469" width="0.2933%" height="15" fill="rgb(249,221,15)" fg:x="17421" fg:w="234"/><text x="22.0871%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (8 samples, 0.01%)</title><rect x="22.1304%" y="469" width="0.0100%" height="15" fill="rgb(233,34,13)" fg:x="17655" fg:w="8"/><text x="22.3804%" y="479.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="22.1304%" y="453" width="0.0100%" height="15" fill="rgb(214,103,39)" fg:x="17655" fg:w="8"/><text x="22.3804%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="22.1304%" y="437" width="0.0100%" height="15" fill="rgb(251,126,39)" fg:x="17655" fg:w="8"/><text x="22.3804%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (35 samples, 0.04%)</title><rect x="22.1405%" y="469" width="0.0439%" height="15" fill="rgb(214,216,36)" fg:x="17663" fg:w="35"/><text x="22.3905%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (17 samples, 0.02%)</title><rect x="22.1843%" y="453" width="0.0213%" height="15" fill="rgb(220,221,8)" fg:x="17698" fg:w="17"/><text x="22.4343%" y="463.50"></text></g><g><title>core::slice::sort::merge (1,583 samples, 1.98%)</title><rect x="20.2276%" y="485" width="1.9843%" height="15" fill="rgb(240,216,3)" fg:x="16137" fg:w="1583"/><text x="20.4776%" y="495.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (22 samples, 0.03%)</title><rect x="22.1843%" y="469" width="0.0276%" height="15" fill="rgb(232,218,17)" fg:x="17698" fg:w="22"/><text x="22.4343%" y="479.50"></text></g><g><title>core::slice::sort::merge_sort (186 samples, 0.23%)</title><rect x="22.2119%" y="485" width="0.2331%" height="15" fill="rgb(229,163,45)" fg:x="17720" fg:w="186"/><text x="22.4619%" y="495.50"></text></g><g><title>__mem_cgroup_charge (8 samples, 0.01%)</title><rect x="22.4551%" y="245" width="0.0100%" height="15" fill="rgb(231,110,42)" fg:x="17914" fg:w="8"/><text x="22.7051%" y="255.50"></text></g><g><title>do_anonymous_page (15 samples, 0.02%)</title><rect x="22.4551%" y="261" width="0.0188%" height="15" fill="rgb(208,170,48)" fg:x="17914" fg:w="15"/><text x="22.7051%" y="271.50"></text></g><g><title>do_user_addr_fault (18 samples, 0.02%)</title><rect x="22.4526%" y="325" width="0.0226%" height="15" fill="rgb(239,116,25)" fg:x="17912" fg:w="18"/><text x="22.7026%" y="335.50"></text></g><g><title>handle_mm_fault (18 samples, 0.02%)</title><rect x="22.4526%" y="309" width="0.0226%" height="15" fill="rgb(219,200,50)" fg:x="17912" fg:w="18"/><text x="22.7026%" y="319.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.02%)</title><rect x="22.4538%" y="293" width="0.0213%" height="15" fill="rgb(245,200,0)" fg:x="17913" fg:w="17"/><text x="22.7038%" y="303.50"></text></g><g><title>handle_pte_fault (17 samples, 0.02%)</title><rect x="22.4538%" y="277" width="0.0213%" height="15" fill="rgb(245,119,33)" fg:x="17913" fg:w="17"/><text x="22.7038%" y="287.50"></text></g><g><title>asm_exc_page_fault (23 samples, 0.03%)</title><rect x="22.4526%" y="357" width="0.0288%" height="15" fill="rgb(231,125,12)" fg:x="17912" fg:w="23"/><text x="22.7026%" y="367.50"></text></g><g><title>exc_page_fault (23 samples, 0.03%)</title><rect x="22.4526%" y="341" width="0.0288%" height="15" fill="rgb(216,96,41)" fg:x="17912" fg:w="23"/><text x="22.7026%" y="351.50"></text></g><g><title>mprotect_fixup (10 samples, 0.01%)</title><rect x="22.4827%" y="261" width="0.0125%" height="15" fill="rgb(248,43,45)" fg:x="17936" fg:w="10"/><text x="22.7327%" y="271.50"></text></g><g><title>__x64_sys_mprotect (12 samples, 0.02%)</title><rect x="22.4814%" y="293" width="0.0150%" height="15" fill="rgb(217,222,7)" fg:x="17935" fg:w="12"/><text x="22.7314%" y="303.50"></text></g><g><title>do_mprotect_pkey (12 samples, 0.02%)</title><rect x="22.4814%" y="277" width="0.0150%" height="15" fill="rgb(233,28,6)" fg:x="17935" fg:w="12"/><text x="22.7314%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (13 samples, 0.02%)</title><rect x="22.4814%" y="325" width="0.0163%" height="15" fill="rgb(231,218,15)" fg:x="17935" fg:w="13"/><text x="22.7314%" y="335.50"></text></g><g><title>do_syscall_64 (13 samples, 0.02%)</title><rect x="22.4814%" y="309" width="0.0163%" height="15" fill="rgb(226,171,48)" fg:x="17935" fg:w="13"/><text x="22.7314%" y="319.50"></text></g><g><title>grow_heap (18 samples, 0.02%)</title><rect x="22.4814%" y="357" width="0.0226%" height="15" fill="rgb(235,201,9)" fg:x="17935" fg:w="18"/><text x="22.7314%" y="367.50"></text></g><g><title>__GI___mprotect (18 samples, 0.02%)</title><rect x="22.4814%" y="341" width="0.0226%" height="15" fill="rgb(217,80,15)" fg:x="17935" fg:w="18"/><text x="22.7314%" y="351.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (48 samples, 0.06%)</title><rect x="22.4451%" y="485" width="0.0602%" height="15" fill="rgb(219,152,8)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="495.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (48 samples, 0.06%)</title><rect x="22.4451%" y="469" width="0.0602%" height="15" fill="rgb(243,107,38)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="479.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.06%)</title><rect x="22.4451%" y="453" width="0.0602%" height="15" fill="rgb(231,17,5)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="463.50"></text></g><g><title>__rdl_alloc (48 samples, 0.06%)</title><rect x="22.4451%" y="437" width="0.0602%" height="15" fill="rgb(209,25,54)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (48 samples, 0.06%)</title><rect x="22.4451%" y="421" width="0.0602%" height="15" fill="rgb(219,0,2)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="431.50"></text></g><g><title>__GI___libc_malloc (48 samples, 0.06%)</title><rect x="22.4451%" y="405" width="0.0602%" height="15" fill="rgb(246,9,5)" fg:x="17906" fg:w="48"/><text x="22.6951%" y="415.50"></text></g><g><title>_int_malloc (47 samples, 0.06%)</title><rect x="22.4463%" y="389" width="0.0589%" height="15" fill="rgb(226,159,4)" fg:x="17907" fg:w="47"/><text x="22.6963%" y="399.50"></text></g><g><title>sysmalloc (46 samples, 0.06%)</title><rect x="22.4476%" y="373" width="0.0577%" height="15" fill="rgb(219,175,34)" fg:x="17908" fg:w="46"/><text x="22.6976%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::push (10 samples, 0.01%)</title><rect x="22.5065%" y="485" width="0.0125%" height="15" fill="rgb(236,10,46)" fg:x="17955" fg:w="10"/><text x="22.7565%" y="495.50"></text></g><g><title>core::intrinsics::copy (18 samples, 0.02%)</title><rect x="22.5190%" y="469" width="0.0226%" height="15" fill="rgb(240,211,16)" fg:x="17965" fg:w="18"/><text x="22.7690%" y="479.50"></text></g><g><title>__memcpy_evex_unaligned_erms (17 samples, 0.02%)</title><rect x="22.5203%" y="453" width="0.0213%" height="15" fill="rgb(205,3,43)" fg:x="17966" fg:w="17"/><text x="22.7703%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (19 samples, 0.02%)</title><rect x="22.5190%" y="485" width="0.0238%" height="15" fill="rgb(245,7,22)" fg:x="17965" fg:w="19"/><text x="22.7690%" y="495.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (36 samples, 0.05%)</title><rect x="22.5428%" y="485" width="0.0451%" height="15" fill="rgb(239,132,32)" fg:x="17984" fg:w="36"/><text x="22.7928%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.02%)</title><rect x="22.6043%" y="437" width="0.0188%" height="15" fill="rgb(228,202,34)" fg:x="18033" fg:w="15"/><text x="22.8543%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (9 samples, 0.01%)</title><rect x="22.6118%" y="421" width="0.0113%" height="15" fill="rgb(254,200,22)" fg:x="18039" fg:w="9"/><text x="22.8618%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.02%)</title><rect x="22.6043%" y="453" width="0.0201%" height="15" fill="rgb(219,10,39)" fg:x="18033" fg:w="16"/><text x="22.8543%" y="463.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (41 samples, 0.05%)</title><rect x="22.6331%" y="421" width="0.0514%" height="15" fill="rgb(226,210,39)" fg:x="18056" fg:w="41"/><text x="22.8831%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (159 samples, 0.20%)</title><rect x="22.8901%" y="373" width="0.1993%" height="15" fill="rgb(208,219,16)" fg:x="18261" fg:w="159"/><text x="23.1401%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (159 samples, 0.20%)</title><rect x="22.8901%" y="357" width="0.1993%" height="15" fill="rgb(216,158,51)" fg:x="18261" fg:w="159"/><text x="23.1401%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (17 samples, 0.02%)</title><rect x="23.0894%" y="373" width="0.0213%" height="15" fill="rgb(233,14,44)" fg:x="18420" fg:w="17"/><text x="23.3394%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (17 samples, 0.02%)</title><rect x="23.0894%" y="357" width="0.0213%" height="15" fill="rgb(237,97,39)" fg:x="18420" fg:w="17"/><text x="23.3394%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (184 samples, 0.23%)</title><rect x="22.8888%" y="405" width="0.2306%" height="15" fill="rgb(218,198,43)" fg:x="18260" fg:w="184"/><text x="23.1388%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (183 samples, 0.23%)</title><rect x="22.8901%" y="389" width="0.2294%" height="15" fill="rgb(231,104,20)" fg:x="18261" fg:w="183"/><text x="23.1401%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (395 samples, 0.50%)</title><rect x="22.6331%" y="437" width="0.4951%" height="15" fill="rgb(254,36,13)" fg:x="18056" fg:w="395"/><text x="22.8831%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (354 samples, 0.44%)</title><rect x="22.6845%" y="421" width="0.4437%" height="15" fill="rgb(248,14,50)" fg:x="18097" fg:w="354"/><text x="22.9345%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.07%)</title><rect x="23.1282%" y="437" width="0.0664%" height="15" fill="rgb(217,107,29)" fg:x="18451" fg:w="53"/><text x="23.3782%" y="447.50"></text></g><g><title>core::slice::sort::insert_tail (486 samples, 0.61%)</title><rect x="22.6243%" y="453" width="0.6092%" height="15" fill="rgb(251,169,33)" fg:x="18049" fg:w="486"/><text x="22.8743%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (31 samples, 0.04%)</title><rect x="23.1947%" y="437" width="0.0389%" height="15" fill="rgb(217,108,32)" fg:x="18504" fg:w="31"/><text x="23.4447%" y="447.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.04%)</title><rect x="23.1947%" y="421" width="0.0389%" height="15" fill="rgb(219,66,42)" fg:x="18504" fg:w="31"/><text x="23.4447%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.04%)</title><rect x="23.1947%" y="405" width="0.0389%" height="15" fill="rgb(206,180,7)" fg:x="18504" fg:w="31"/><text x="23.4447%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (2,658 samples, 3.33%)</title><rect x="19.9845%" y="533" width="3.3318%" height="15" fill="rgb(208,226,31)" fg:x="15943" fg:w="2658"/><text x="20.2345%" y="543.50">all..</text></g><g><title>alloc::slice::stable_sort (2,658 samples, 3.33%)</title><rect x="19.9845%" y="517" width="3.3318%" height="15" fill="rgb(218,26,49)" fg:x="15943" fg:w="2658"/><text x="20.2345%" y="527.50">all..</text></g><g><title>core::slice::sort::merge_sort (2,658 samples, 3.33%)</title><rect x="19.9845%" y="501" width="3.3318%" height="15" fill="rgb(233,197,48)" fg:x="15943" fg:w="2658"/><text x="20.2345%" y="511.50">cor..</text></g><g><title>core::slice::sort::provide_sorted_batch (581 samples, 0.73%)</title><rect x="22.5880%" y="485" width="0.7283%" height="15" fill="rgb(252,181,51)" fg:x="18020" fg:w="581"/><text x="22.8380%" y="495.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (574 samples, 0.72%)</title><rect x="22.5967%" y="469" width="0.7195%" height="15" fill="rgb(253,90,19)" fg:x="18027" fg:w="574"/><text x="22.8467%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (66 samples, 0.08%)</title><rect x="23.2335%" y="453" width="0.0827%" height="15" fill="rgb(215,171,30)" fg:x="18535" fg:w="66"/><text x="23.4835%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (28 samples, 0.04%)</title><rect x="23.3614%" y="421" width="0.0351%" height="15" fill="rgb(214,222,9)" fg:x="18637" fg:w="28"/><text x="23.6114%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (28 samples, 0.04%)</title><rect x="23.3614%" y="405" width="0.0351%" height="15" fill="rgb(223,3,22)" fg:x="18637" fg:w="28"/><text x="23.6114%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (31 samples, 0.04%)</title><rect x="23.3614%" y="453" width="0.0389%" height="15" fill="rgb(225,196,46)" fg:x="18637" fg:w="31"/><text x="23.6114%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (31 samples, 0.04%)</title><rect x="23.3614%" y="437" width="0.0389%" height="15" fill="rgb(209,110,37)" fg:x="18637" fg:w="31"/><text x="23.6114%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (70 samples, 0.09%)</title><rect x="23.3263%" y="485" width="0.0877%" height="15" fill="rgb(249,89,12)" fg:x="18609" fg:w="70"/><text x="23.5763%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (70 samples, 0.09%)</title><rect x="23.3263%" y="469" width="0.0877%" height="15" fill="rgb(226,27,33)" fg:x="18609" fg:w="70"/><text x="23.5763%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (11 samples, 0.01%)</title><rect x="23.4002%" y="453" width="0.0138%" height="15" fill="rgb(213,82,22)" fg:x="18668" fg:w="11"/><text x="23.6502%" y="463.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (9 samples, 0.01%)</title><rect x="23.4027%" y="437" width="0.0113%" height="15" fill="rgb(248,140,0)" fg:x="18670" fg:w="9"/><text x="23.6527%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (9 samples, 0.01%)</title><rect x="23.4027%" y="421" width="0.0113%" height="15" fill="rgb(228,106,3)" fg:x="18670" fg:w="9"/><text x="23.6527%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (79 samples, 0.10%)</title><rect x="23.3162%" y="533" width="0.0990%" height="15" fill="rgb(209,23,37)" fg:x="18601" fg:w="79"/><text x="23.5662%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (79 samples, 0.10%)</title><rect x="23.3162%" y="517" width="0.0990%" height="15" fill="rgb(241,93,50)" fg:x="18601" fg:w="79"/><text x="23.5662%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (79 samples, 0.10%)</title><rect x="23.3162%" y="501" width="0.0990%" height="15" fill="rgb(253,46,43)" fg:x="18601" fg:w="79"/><text x="23.5662%" y="511.50"></text></g><g><title>handle_mm_fault (14 samples, 0.02%)</title><rect x="23.4266%" y="293" width="0.0175%" height="15" fill="rgb(226,206,43)" fg:x="18689" fg:w="14"/><text x="23.6766%" y="303.50"></text></g><g><title>__handle_mm_fault (14 samples, 0.02%)</title><rect x="23.4266%" y="277" width="0.0175%" height="15" fill="rgb(217,54,7)" fg:x="18689" fg:w="14"/><text x="23.6766%" y="287.50"></text></g><g><title>handle_pte_fault (13 samples, 0.02%)</title><rect x="23.4278%" y="261" width="0.0163%" height="15" fill="rgb(223,5,52)" fg:x="18690" fg:w="13"/><text x="23.6778%" y="271.50"></text></g><g><title>do_anonymous_page (11 samples, 0.01%)</title><rect x="23.4303%" y="245" width="0.0138%" height="15" fill="rgb(206,52,46)" fg:x="18692" fg:w="11"/><text x="23.6803%" y="255.50"></text></g><g><title>do_user_addr_fault (17 samples, 0.02%)</title><rect x="23.4240%" y="309" width="0.0213%" height="15" fill="rgb(253,136,11)" fg:x="18687" fg:w="17"/><text x="23.6740%" y="319.50"></text></g><g><title>asm_exc_page_fault (22 samples, 0.03%)</title><rect x="23.4228%" y="341" width="0.0276%" height="15" fill="rgb(208,106,33)" fg:x="18686" fg:w="22"/><text x="23.6728%" y="351.50"></text></g><g><title>exc_page_fault (22 samples, 0.03%)</title><rect x="23.4228%" y="325" width="0.0276%" height="15" fill="rgb(206,54,4)" fg:x="18686" fg:w="22"/><text x="23.6728%" y="335.50"></text></g><g><title>perf_event_mmap (11 samples, 0.01%)</title><rect x="23.4604%" y="229" width="0.0138%" height="15" fill="rgb(213,3,15)" fg:x="18716" fg:w="11"/><text x="23.7104%" y="239.50"></text></g><g><title>perf_event_mmap_event (11 samples, 0.01%)</title><rect x="23.4604%" y="213" width="0.0138%" height="15" fill="rgb(252,211,39)" fg:x="18716" fg:w="11"/><text x="23.7104%" y="223.50"></text></g><g><title>perf_iterate_sb (11 samples, 0.01%)</title><rect x="23.4604%" y="197" width="0.0138%" height="15" fill="rgb(223,6,36)" fg:x="18716" fg:w="11"/><text x="23.7104%" y="207.50"></text></g><g><title>perf_iterate_ctx (11 samples, 0.01%)</title><rect x="23.4604%" y="181" width="0.0138%" height="15" fill="rgb(252,169,45)" fg:x="18716" fg:w="11"/><text x="23.7104%" y="191.50"></text></g><g><title>mprotect_fixup (18 samples, 0.02%)</title><rect x="23.4541%" y="245" width="0.0226%" height="15" fill="rgb(212,48,26)" fg:x="18711" fg:w="18"/><text x="23.7041%" y="255.50"></text></g><g><title>__x64_sys_mprotect (20 samples, 0.03%)</title><rect x="23.4529%" y="277" width="0.0251%" height="15" fill="rgb(251,102,48)" fg:x="18710" fg:w="20"/><text x="23.7029%" y="287.50"></text></g><g><title>do_mprotect_pkey (20 samples, 0.03%)</title><rect x="23.4529%" y="261" width="0.0251%" height="15" fill="rgb(243,208,16)" fg:x="18710" fg:w="20"/><text x="23.7029%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (22 samples, 0.03%)</title><rect x="23.4516%" y="309" width="0.0276%" height="15" fill="rgb(219,96,24)" fg:x="18709" fg:w="22"/><text x="23.7016%" y="319.50"></text></g><g><title>do_syscall_64 (21 samples, 0.03%)</title><rect x="23.4529%" y="293" width="0.0263%" height="15" fill="rgb(219,33,29)" fg:x="18710" fg:w="21"/><text x="23.7029%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (53 samples, 0.07%)</title><rect x="23.4153%" y="533" width="0.0664%" height="15" fill="rgb(223,176,5)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (53 samples, 0.07%)</title><rect x="23.4153%" y="517" width="0.0664%" height="15" fill="rgb(228,140,14)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (53 samples, 0.07%)</title><rect x="23.4153%" y="501" width="0.0664%" height="15" fill="rgb(217,179,31)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (53 samples, 0.07%)</title><rect x="23.4153%" y="485" width="0.0664%" height="15" fill="rgb(230,9,30)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.07%)</title><rect x="23.4153%" y="469" width="0.0664%" height="15" fill="rgb(230,136,20)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.07%)</title><rect x="23.4153%" y="453" width="0.0664%" height="15" fill="rgb(215,210,22)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="463.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.07%)</title><rect x="23.4153%" y="437" width="0.0664%" height="15" fill="rgb(218,43,5)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="447.50"></text></g><g><title>__rdl_alloc (53 samples, 0.07%)</title><rect x="23.4153%" y="421" width="0.0664%" height="15" fill="rgb(216,11,5)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (53 samples, 0.07%)</title><rect x="23.4153%" y="405" width="0.0664%" height="15" fill="rgb(209,82,29)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="415.50"></text></g><g><title>__GI___libc_malloc (53 samples, 0.07%)</title><rect x="23.4153%" y="389" width="0.0664%" height="15" fill="rgb(244,115,12)" fg:x="18680" fg:w="53"/><text x="23.6653%" y="399.50"></text></g><g><title>_int_malloc (52 samples, 0.07%)</title><rect x="23.4165%" y="373" width="0.0652%" height="15" fill="rgb(222,82,18)" fg:x="18681" fg:w="52"/><text x="23.6665%" y="383.50"></text></g><g><title>sysmalloc (50 samples, 0.06%)</title><rect x="23.4190%" y="357" width="0.0627%" height="15" fill="rgb(249,227,8)" fg:x="18683" fg:w="50"/><text x="23.6690%" y="367.50"></text></g><g><title>grow_heap (25 samples, 0.03%)</title><rect x="23.4504%" y="341" width="0.0313%" height="15" fill="rgb(253,141,45)" fg:x="18708" fg:w="25"/><text x="23.7004%" y="351.50"></text></g><g><title>__GI___mprotect (24 samples, 0.03%)</title><rect x="23.4516%" y="325" width="0.0301%" height="15" fill="rgb(234,184,4)" fg:x="18709" fg:w="24"/><text x="23.7016%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (3,061 samples, 3.84%)</title><rect x="19.6460%" y="549" width="3.8369%" height="15" fill="rgb(218,194,23)" fg:x="15673" fg:w="3061"/><text x="19.8960%" y="559.50">proj..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (11 samples, 0.01%)</title><rect x="23.4880%" y="533" width="0.0138%" height="15" fill="rgb(235,66,41)" fg:x="18738" fg:w="11"/><text x="23.7380%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (43 samples, 0.05%)</title><rect x="23.4830%" y="549" width="0.0539%" height="15" fill="rgb(245,217,1)" fg:x="18734" fg:w="43"/><text x="23.7330%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (28 samples, 0.04%)</title><rect x="23.5018%" y="533" width="0.0351%" height="15" fill="rgb(229,91,1)" fg:x="18749" fg:w="28"/><text x="23.7518%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (42 samples, 0.05%)</title><rect x="23.5895%" y="517" width="0.0526%" height="15" fill="rgb(207,101,30)" fg:x="18819" fg:w="42"/><text x="23.8395%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (57 samples, 0.07%)</title><rect x="23.5895%" y="533" width="0.0714%" height="15" fill="rgb(223,82,49)" fg:x="18819" fg:w="57"/><text x="23.8395%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (15 samples, 0.02%)</title><rect x="23.6422%" y="517" width="0.0188%" height="15" fill="rgb(218,167,17)" fg:x="18861" fg:w="15"/><text x="23.8922%" y="527.50"></text></g><g><title>__hrtimer_run_queues (14 samples, 0.02%)</title><rect x="31.2559%" y="453" width="0.0175%" height="15" fill="rgb(208,103,14)" fg:x="24935" fg:w="14"/><text x="31.5059%" y="463.50"></text></g><g><title>tick_sched_timer (14 samples, 0.02%)</title><rect x="31.2559%" y="437" width="0.0175%" height="15" fill="rgb(238,20,8)" fg:x="24935" fg:w="14"/><text x="31.5059%" y="447.50"></text></g><g><title>tick_sched_handle (9 samples, 0.01%)</title><rect x="31.2621%" y="421" width="0.0113%" height="15" fill="rgb(218,80,54)" fg:x="24940" fg:w="9"/><text x="31.5121%" y="431.50"></text></g><g><title>update_process_times (9 samples, 0.01%)</title><rect x="31.2621%" y="405" width="0.0113%" height="15" fill="rgb(240,144,17)" fg:x="24940" fg:w="9"/><text x="31.5121%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="31.2559%" y="485" width="0.0188%" height="15" fill="rgb(245,27,50)" fg:x="24935" fg:w="15"/><text x="31.5059%" y="495.50"></text></g><g><title>hrtimer_interrupt (15 samples, 0.02%)</title><rect x="31.2559%" y="469" width="0.0188%" height="15" fill="rgb(251,51,7)" fg:x="24935" fg:w="15"/><text x="31.5059%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (6,079 samples, 7.62%)</title><rect x="23.6610%" y="533" width="7.6200%" height="15" fill="rgb(245,217,29)" fg:x="18876" fg:w="6079"/><text x="23.9110%" y="543.50">project1::..</text></g><g><title>asm_sysvec_apic_timer_interrupt (20 samples, 0.03%)</title><rect x="31.2559%" y="517" width="0.0251%" height="15" fill="rgb(221,176,29)" fg:x="24935" fg:w="20"/><text x="31.5059%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (20 samples, 0.03%)</title><rect x="31.2559%" y="501" width="0.0251%" height="15" fill="rgb(212,180,24)" fg:x="24935" fg:w="20"/><text x="31.5059%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (168 samples, 0.21%)</title><rect x="48.3397%" y="517" width="0.2106%" height="15" fill="rgb(254,24,2)" fg:x="38564" fg:w="168"/><text x="48.5897%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (168 samples, 0.21%)</title><rect x="48.3397%" y="501" width="0.2106%" height="15" fill="rgb(230,100,2)" fg:x="38564" fg:w="168"/><text x="48.5897%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (168 samples, 0.21%)</title><rect x="48.3397%" y="485" width="0.2106%" height="15" fill="rgb(219,142,25)" fg:x="38564" fg:w="168"/><text x="48.5897%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.05%)</title><rect x="48.5503%" y="517" width="0.0489%" height="15" fill="rgb(240,73,43)" fg:x="38732" fg:w="39"/><text x="48.8003%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 0.05%)</title><rect x="48.5503%" y="501" width="0.0489%" height="15" fill="rgb(214,114,15)" fg:x="38732" fg:w="39"/><text x="48.8003%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (35 samples, 0.04%)</title><rect x="48.5553%" y="485" width="0.0439%" height="15" fill="rgb(207,130,4)" fg:x="38736" fg:w="35"/><text x="48.8053%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,053 samples, 1.32%)</title><rect x="48.5992%" y="485" width="1.3199%" height="15" fill="rgb(221,25,40)" fg:x="38771" fg:w="1053"/><text x="48.8492%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,626 samples, 2.04%)</title><rect x="48.5992%" y="517" width="2.0382%" height="15" fill="rgb(241,184,7)" fg:x="38771" fg:w="1626"/><text x="48.8492%" y="527.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,626 samples, 2.04%)</title><rect x="48.5992%" y="501" width="2.0382%" height="15" fill="rgb(235,159,4)" fg:x="38771" fg:w="1626"/><text x="48.8492%" y="511.50">c..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (573 samples, 0.72%)</title><rect x="49.9191%" y="485" width="0.7183%" height="15" fill="rgb(214,87,48)" fg:x="39824" fg:w="573"/><text x="50.1691%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (385 samples, 0.48%)</title><rect x="51.9072%" y="469" width="0.4826%" height="15" fill="rgb(246,198,24)" fg:x="41410" fg:w="385"/><text x="52.1572%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (385 samples, 0.48%)</title><rect x="51.9072%" y="453" width="0.4826%" height="15" fill="rgb(209,66,40)" fg:x="41410" fg:w="385"/><text x="52.1572%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,402 samples, 1.76%)</title><rect x="50.6374%" y="485" width="1.7574%" height="15" fill="rgb(233,147,39)" fg:x="40397" fg:w="1402"/><text x="50.8874%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (2,085 samples, 2.61%)</title><rect x="50.6374%" y="517" width="2.6135%" height="15" fill="rgb(231,145,52)" fg:x="40397" fg:w="2085"/><text x="50.8874%" y="527.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,085 samples, 2.61%)</title><rect x="50.6374%" y="501" width="2.6135%" height="15" fill="rgb(206,20,26)" fg:x="40397" fg:w="2085"/><text x="50.8874%" y="511.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (683 samples, 0.86%)</title><rect x="52.3948%" y="485" width="0.8561%" height="15" fill="rgb(238,220,4)" fg:x="41799" fg:w="683"/><text x="52.6448%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (683 samples, 0.86%)</title><rect x="52.3948%" y="469" width="0.8561%" height="15" fill="rgb(252,195,42)" fg:x="41799" fg:w="683"/><text x="52.6448%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (8 samples, 0.01%)</title><rect x="53.2409%" y="453" width="0.0100%" height="15" fill="rgb(209,10,6)" fg:x="42474" fg:w="8"/><text x="53.4909%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (8 samples, 0.01%)</title><rect x="53.2409%" y="437" width="0.0100%" height="15" fill="rgb(229,3,52)" fg:x="42474" fg:w="8"/><text x="53.4909%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (712 samples, 0.89%)</title><rect x="53.2610%" y="453" width="0.8925%" height="15" fill="rgb(253,49,37)" fg:x="42490" fg:w="712"/><text x="53.5110%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (742 samples, 0.93%)</title><rect x="53.2610%" y="469" width="0.9301%" height="15" fill="rgb(240,103,49)" fg:x="42490" fg:w="742"/><text x="53.5110%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (30 samples, 0.04%)</title><rect x="54.1535%" y="453" width="0.0376%" height="15" fill="rgb(250,182,30)" fg:x="43202" fg:w="30"/><text x="54.4035%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (755 samples, 0.95%)</title><rect x="53.2509%" y="485" width="0.9464%" height="15" fill="rgb(248,8,30)" fg:x="42482" fg:w="755"/><text x="53.5009%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (912 samples, 1.14%)</title><rect x="53.2509%" y="517" width="1.1432%" height="15" fill="rgb(237,120,30)" fg:x="42482" fg:w="912"/><text x="53.5009%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (912 samples, 1.14%)</title><rect x="53.2509%" y="501" width="1.1432%" height="15" fill="rgb(221,146,34)" fg:x="42482" fg:w="912"/><text x="53.5009%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (157 samples, 0.20%)</title><rect x="54.1973%" y="485" width="0.1968%" height="15" fill="rgb(242,55,13)" fg:x="43237" fg:w="157"/><text x="54.4473%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (157 samples, 0.20%)</title><rect x="54.1973%" y="469" width="0.1968%" height="15" fill="rgb(242,112,31)" fg:x="43237" fg:w="157"/><text x="54.4473%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (78 samples, 0.10%)</title><rect x="54.3941%" y="485" width="0.0978%" height="15" fill="rgb(249,192,27)" fg:x="43394" fg:w="78"/><text x="54.6441%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (10,905 samples, 13.67%)</title><rect x="54.4919%" y="485" width="13.6694%" height="15" fill="rgb(208,204,44)" fg:x="43472" fg:w="10905"/><text x="54.7419%" y="495.50">core::option::Option&lt;..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (10,905 samples, 13.67%)</title><rect x="54.4919%" y="469" width="13.6694%" height="15" fill="rgb(208,93,54)" fg:x="43472" fg:w="10905"/><text x="54.7419%" y="479.50">slotmap::basic::SlotM..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (440 samples, 0.55%)</title><rect x="68.1612%" y="485" width="0.5515%" height="15" fill="rgb(242,1,31)" fg:x="54377" fg:w="440"/><text x="68.4112%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (440 samples, 0.55%)</title><rect x="68.1612%" y="469" width="0.5515%" height="15" fill="rgb(241,83,25)" fg:x="54377" fg:w="440"/><text x="68.4112%" y="479.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (11,564 samples, 14.50%)</title><rect x="54.3941%" y="517" width="14.4954%" height="15" fill="rgb(205,169,50)" fg:x="43394" fg:w="11564"/><text x="54.6441%" y="527.50">&lt;project1::solver::cla..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (11,564 samples, 14.50%)</title><rect x="54.3941%" y="501" width="14.4954%" height="15" fill="rgb(239,186,37)" fg:x="43394" fg:w="11564"/><text x="54.6441%" y="511.50">slotmap::basic::SlotMa..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (141 samples, 0.18%)</title><rect x="68.7128%" y="485" width="0.1767%" height="15" fill="rgb(205,221,10)" fg:x="54817" fg:w="141"/><text x="68.9628%" y="495.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.01%)</title><rect x="77.3431%" y="501" width="0.0100%" height="15" fill="rgb(218,196,15)" fg:x="61702" fg:w="8"/><text x="77.5931%" y="511.50"></text></g><g><title>exc_page_fault (8 samples, 0.01%)</title><rect x="77.3431%" y="485" width="0.0100%" height="15" fill="rgb(218,196,35)" fg:x="61702" fg:w="8"/><text x="77.5931%" y="495.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (6,757 samples, 8.47%)</title><rect x="68.8895%" y="517" width="8.4699%" height="15" fill="rgb(233,63,24)" fg:x="54958" fg:w="6757"/><text x="69.1395%" y="527.50">&lt;project1::s..</text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (11 samples, 0.01%)</title><rect x="77.3594%" y="501" width="0.0138%" height="15" fill="rgb(225,8,4)" fg:x="61715" fg:w="11"/><text x="77.6094%" y="511.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (32 samples, 0.04%)</title><rect x="77.3594%" y="517" width="0.0401%" height="15" fill="rgb(234,105,35)" fg:x="61715" fg:w="32"/><text x="77.6094%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (21 samples, 0.03%)</title><rect x="77.3732%" y="501" width="0.0263%" height="15" fill="rgb(236,21,32)" fg:x="61726" fg:w="21"/><text x="77.6232%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37 samples, 0.05%)</title><rect x="78.4361%" y="501" width="0.0464%" height="15" fill="rgb(228,109,6)" fg:x="62574" fg:w="37"/><text x="78.6861%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37 samples, 0.05%)</title><rect x="78.4361%" y="485" width="0.0464%" height="15" fill="rgb(229,215,31)" fg:x="62574" fg:w="37"/><text x="78.6861%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="78.4825%" y="501" width="0.0188%" height="15" fill="rgb(221,52,54)" fg:x="62611" fg:w="15"/><text x="78.7325%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="78.4825%" y="485" width="0.0188%" height="15" fill="rgb(252,129,43)" fg:x="62611" fg:w="15"/><text x="78.7325%" y="495.50"></text></g><g><title>__sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="78.4825%" y="469" width="0.0188%" height="15" fill="rgb(248,183,27)" fg:x="62611" fg:w="15"/><text x="78.7325%" y="479.50"></text></g><g><title>hrtimer_interrupt (15 samples, 0.02%)</title><rect x="78.4825%" y="453" width="0.0188%" height="15" fill="rgb(250,0,22)" fg:x="62611" fg:w="15"/><text x="78.7325%" y="463.50"></text></g><g><title>__hrtimer_run_queues (15 samples, 0.02%)</title><rect x="78.4825%" y="437" width="0.0188%" height="15" fill="rgb(213,166,10)" fg:x="62611" fg:w="15"/><text x="78.7325%" y="447.50"></text></g><g><title>tick_sched_timer (14 samples, 0.02%)</title><rect x="78.4838%" y="421" width="0.0175%" height="15" fill="rgb(207,163,36)" fg:x="62612" fg:w="14"/><text x="78.7338%" y="431.50"></text></g><g><title>tick_sched_handle (8 samples, 0.01%)</title><rect x="78.4913%" y="405" width="0.0100%" height="15" fill="rgb(208,122,22)" fg:x="62618" fg:w="8"/><text x="78.7413%" y="415.50"></text></g><g><title>update_process_times (8 samples, 0.01%)</title><rect x="78.4913%" y="389" width="0.0100%" height="15" fill="rgb(207,104,49)" fg:x="62618" fg:w="8"/><text x="78.7413%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.02%)</title><rect x="78.5013%" y="501" width="0.0175%" height="15" fill="rgb(248,211,50)" fg:x="62626" fg:w="14"/><text x="78.7513%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,376 samples, 4.23%)</title><rect x="77.4045%" y="517" width="4.2318%" height="15" fill="rgb(217,13,45)" fg:x="61751" fg:w="3376"/><text x="77.6545%" y="527.50">alloc..</text></g><g><title>core::ptr::write (2,487 samples, 3.12%)</title><rect x="78.5189%" y="501" width="3.1174%" height="15" fill="rgb(211,216,49)" fg:x="62640" fg:w="2487"/><text x="78.7689%" y="511.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (17 samples, 0.02%)</title><rect x="81.6363%" y="517" width="0.0213%" height="15" fill="rgb(221,58,53)" fg:x="65127" fg:w="17"/><text x="81.8863%" y="527.50"></text></g><g><title>tick_do_update_jiffies64 (8 samples, 0.01%)</title><rect x="81.6689%" y="405" width="0.0100%" height="15" fill="rgb(220,112,41)" fg:x="65153" fg:w="8"/><text x="81.9189%" y="415.50"></text></g><g><title>update_wall_time (8 samples, 0.01%)</title><rect x="81.6689%" y="389" width="0.0100%" height="15" fill="rgb(236,38,28)" fg:x="65153" fg:w="8"/><text x="81.9189%" y="399.50"></text></g><g><title>timekeeping_advance (8 samples, 0.01%)</title><rect x="81.6689%" y="373" width="0.0100%" height="15" fill="rgb(227,195,22)" fg:x="65153" fg:w="8"/><text x="81.9189%" y="383.50"></text></g><g><title>tick_sched_do_timer (9 samples, 0.01%)</title><rect x="81.6689%" y="421" width="0.0113%" height="15" fill="rgb(214,55,33)" fg:x="65153" fg:w="9"/><text x="81.9189%" y="431.50"></text></g><g><title>task_tick_fair (21 samples, 0.03%)</title><rect x="81.7002%" y="373" width="0.0263%" height="15" fill="rgb(248,80,13)" fg:x="65178" fg:w="21"/><text x="81.9502%" y="383.50"></text></g><g><title>update_load_avg (8 samples, 0.01%)</title><rect x="81.7165%" y="357" width="0.0100%" height="15" fill="rgb(238,52,6)" fg:x="65191" fg:w="8"/><text x="81.9665%" y="367.50"></text></g><g><title>scheduler_tick (40 samples, 0.05%)</title><rect x="81.6865%" y="389" width="0.0501%" height="15" fill="rgb(224,198,47)" fg:x="65167" fg:w="40"/><text x="81.9365%" y="399.50"></text></g><g><title>trigger_load_balance (8 samples, 0.01%)</title><rect x="81.7266%" y="373" width="0.0100%" height="15" fill="rgb(233,171,20)" fg:x="65199" fg:w="8"/><text x="81.9766%" y="383.50"></text></g><g><title>nohz_balancer_kick (8 samples, 0.01%)</title><rect x="81.7266%" y="357" width="0.0100%" height="15" fill="rgb(241,30,25)" fg:x="65199" fg:w="8"/><text x="81.9766%" y="367.50"></text></g><g><title>__hrtimer_run_queues (60 samples, 0.08%)</title><rect x="81.6626%" y="453" width="0.0752%" height="15" fill="rgb(207,171,38)" fg:x="65148" fg:w="60"/><text x="81.9126%" y="463.50"></text></g><g><title>tick_sched_timer (57 samples, 0.07%)</title><rect x="81.6664%" y="437" width="0.0714%" height="15" fill="rgb(234,70,1)" fg:x="65151" fg:w="57"/><text x="81.9164%" y="447.50"></text></g><g><title>tick_sched_handle (46 samples, 0.06%)</title><rect x="81.6802%" y="421" width="0.0577%" height="15" fill="rgb(232,178,18)" fg:x="65162" fg:w="46"/><text x="81.9302%" y="431.50"></text></g><g><title>update_process_times (45 samples, 0.06%)</title><rect x="81.6814%" y="405" width="0.0564%" height="15" fill="rgb(241,78,40)" fg:x="65163" fg:w="45"/><text x="81.9314%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (66 samples, 0.08%)</title><rect x="81.6601%" y="485" width="0.0827%" height="15" fill="rgb(222,35,25)" fg:x="65146" fg:w="66"/><text x="81.9101%" y="495.50"></text></g><g><title>hrtimer_interrupt (64 samples, 0.08%)</title><rect x="81.6626%" y="469" width="0.0802%" height="15" fill="rgb(207,92,16)" fg:x="65148" fg:w="64"/><text x="81.9126%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (75 samples, 0.09%)</title><rect x="81.6589%" y="517" width="0.0940%" height="15" fill="rgb(216,59,51)" fg:x="65145" fg:w="75"/><text x="81.9089%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (74 samples, 0.09%)</title><rect x="81.6601%" y="501" width="0.0928%" height="15" fill="rgb(213,80,28)" fg:x="65146" fg:w="74"/><text x="81.9101%" y="511.50"></text></g><g><title>core::cmp::PartialEq::ne (34 samples, 0.04%)</title><rect x="81.7529%" y="517" width="0.0426%" height="15" fill="rgb(220,93,7)" fg:x="65220" fg:w="34"/><text x="82.0029%" y="527.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (34 samples, 0.04%)</title><rect x="81.7529%" y="501" width="0.0426%" height="15" fill="rgb(225,24,44)" fg:x="65220" fg:w="34"/><text x="82.0029%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (1,119 samples, 1.40%)</title><rect x="81.7955%" y="517" width="1.4027%" height="15" fill="rgb(243,74,40)" fg:x="65254" fg:w="1119"/><text x="82.0455%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (740 samples, 0.93%)</title><rect x="83.1982%" y="517" width="0.9276%" height="15" fill="rgb(228,39,7)" fg:x="66373" fg:w="740"/><text x="83.4482%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (740 samples, 0.93%)</title><rect x="83.1982%" y="501" width="0.9276%" height="15" fill="rgb(227,79,8)" fg:x="66373" fg:w="740"/><text x="83.4482%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (740 samples, 0.93%)</title><rect x="83.1982%" y="485" width="0.9276%" height="15" fill="rgb(236,58,11)" fg:x="66373" fg:w="740"/><text x="83.4482%" y="495.50"></text></g><g><title>core::intrinsics::copy (498 samples, 0.62%)</title><rect x="84.2010%" y="485" width="0.6242%" height="15" fill="rgb(249,63,35)" fg:x="67173" fg:w="498"/><text x="84.4510%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (760 samples, 0.95%)</title><rect x="84.1258%" y="517" width="0.9527%" height="15" fill="rgb(252,114,16)" fg:x="67113" fg:w="760"/><text x="84.3758%" y="527.50"></text></g><g><title>core::ptr::swap (700 samples, 0.88%)</title><rect x="84.2010%" y="501" width="0.8774%" height="15" fill="rgb(254,151,24)" fg:x="67173" fg:w="700"/><text x="84.4510%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (202 samples, 0.25%)</title><rect x="84.8252%" y="485" width="0.2532%" height="15" fill="rgb(253,54,39)" fg:x="67671" fg:w="202"/><text x="85.0752%" y="495.50"></text></g><g><title>log::__private_api::log (14 samples, 0.02%)</title><rect x="85.0784%" y="517" width="0.0175%" height="15" fill="rgb(243,25,45)" fg:x="67873" fg:w="14"/><text x="85.3284%" y="527.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (14 samples, 0.02%)</title><rect x="85.0784%" y="501" width="0.0175%" height="15" fill="rgb(234,134,9)" fg:x="67873" fg:w="14"/><text x="85.3284%" y="511.50"></text></g><g><title>__hrtimer_run_queues (10 samples, 0.01%)</title><rect x="89.1222%" y="405" width="0.0125%" height="15" fill="rgb(227,166,31)" fg:x="71099" fg:w="10"/><text x="89.3722%" y="415.50"></text></g><g><title>tick_sched_timer (10 samples, 0.01%)</title><rect x="89.1222%" y="389" width="0.0125%" height="15" fill="rgb(245,143,41)" fg:x="71099" fg:w="10"/><text x="89.3722%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (12 samples, 0.02%)</title><rect x="89.1209%" y="437" width="0.0150%" height="15" fill="rgb(238,181,32)" fg:x="71098" fg:w="12"/><text x="89.3709%" y="447.50"></text></g><g><title>hrtimer_interrupt (12 samples, 0.02%)</title><rect x="89.1209%" y="421" width="0.0150%" height="15" fill="rgb(224,113,18)" fg:x="71098" fg:w="12"/><text x="89.3709%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (3,228 samples, 4.05%)</title><rect x="85.0960%" y="485" width="4.0463%" height="15" fill="rgb(240,229,28)" fg:x="67887" fg:w="3228"/><text x="85.3460%" y="495.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (17 samples, 0.02%)</title><rect x="89.1209%" y="469" width="0.0213%" height="15" fill="rgb(250,185,3)" fg:x="71098" fg:w="17"/><text x="89.3709%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (17 samples, 0.02%)</title><rect x="89.1209%" y="453" width="0.0213%" height="15" fill="rgb(212,59,25)" fg:x="71098" fg:w="17"/><text x="89.3709%" y="463.50"></text></g><g><title>log::max_level (3,246 samples, 4.07%)</title><rect x="85.0960%" y="517" width="4.0688%" height="15" fill="rgb(221,87,20)" fg:x="67887" fg:w="3246"/><text x="85.3460%" y="527.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (3,246 samples, 4.07%)</title><rect x="85.0960%" y="501" width="4.0688%" height="15" fill="rgb(213,74,28)" fg:x="67887" fg:w="3246"/><text x="85.3460%" y="511.50">core..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (18 samples, 0.02%)</title><rect x="89.1422%" y="485" width="0.0226%" height="15" fill="rgb(224,132,34)" fg:x="71115" fg:w="18"/><text x="89.3922%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.02%)</title><rect x="89.3829%" y="485" width="0.0226%" height="15" fill="rgb(222,101,24)" fg:x="71307" fg:w="18"/><text x="89.6329%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.01%)</title><rect x="89.3954%" y="469" width="0.0100%" height="15" fill="rgb(254,142,4)" fg:x="71317" fg:w="8"/><text x="89.6454%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.01%)</title><rect x="89.3954%" y="453" width="0.0100%" height="15" fill="rgb(230,229,49)" fg:x="71317" fg:w="8"/><text x="89.6454%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (21 samples, 0.03%)</title><rect x="89.3829%" y="501" width="0.0263%" height="15" fill="rgb(238,70,47)" fg:x="71307" fg:w="21"/><text x="89.6329%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (15 samples, 0.02%)</title><rect x="89.4092%" y="501" width="0.0188%" height="15" fill="rgb(231,160,17)" fg:x="71328" fg:w="15"/><text x="89.6592%" y="511.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (9 samples, 0.01%)</title><rect x="89.4167%" y="485" width="0.0113%" height="15" fill="rgb(218,68,53)" fg:x="71334" fg:w="9"/><text x="89.6667%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (9 samples, 0.01%)</title><rect x="89.4167%" y="469" width="0.0113%" height="15" fill="rgb(236,111,10)" fg:x="71334" fg:w="9"/><text x="89.6667%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.02%)</title><rect x="89.4318%" y="485" width="0.0188%" height="15" fill="rgb(224,34,41)" fg:x="71346" fg:w="15"/><text x="89.6818%" y="495.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (24 samples, 0.03%)</title><rect x="89.4318%" y="501" width="0.0301%" height="15" fill="rgb(241,118,19)" fg:x="71346" fg:w="24"/><text x="89.6818%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (9 samples, 0.01%)</title><rect x="89.4506%" y="485" width="0.0113%" height="15" fill="rgb(238,129,25)" fg:x="71361" fg:w="9"/><text x="89.7006%" y="495.50"></text></g><g><title>project1::solver::types::LBool::from_sign (8 samples, 0.01%)</title><rect x="89.4619%" y="501" width="0.0100%" height="15" fill="rgb(238,22,31)" fg:x="71370" fg:w="8"/><text x="89.7119%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (8 samples, 0.01%)</title><rect x="89.4619%" y="485" width="0.0100%" height="15" fill="rgb(222,174,48)" fg:x="71370" fg:w="8"/><text x="89.7119%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (263 samples, 0.33%)</title><rect x="89.1648%" y="517" width="0.3297%" height="15" fill="rgb(206,152,40)" fg:x="71133" fg:w="263"/><text x="89.4148%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var_idx (18 samples, 0.02%)</title><rect x="89.4719%" y="501" width="0.0226%" height="15" fill="rgb(218,99,54)" fg:x="71378" fg:w="18"/><text x="89.7219%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (18 samples, 0.02%)</title><rect x="89.4719%" y="485" width="0.0226%" height="15" fill="rgb(220,174,26)" fg:x="71378" fg:w="18"/><text x="89.7219%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (63 samples, 0.08%)</title><rect x="89.5020%" y="485" width="0.0790%" height="15" fill="rgb(245,116,9)" fg:x="71402" fg:w="63"/><text x="89.7520%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (519 samples, 0.65%)</title><rect x="89.5020%" y="501" width="0.6506%" height="15" fill="rgb(209,72,35)" fg:x="71402" fg:w="519"/><text x="89.7520%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (456 samples, 0.57%)</title><rect x="89.5810%" y="485" width="0.5716%" height="15" fill="rgb(226,126,21)" fg:x="71465" fg:w="456"/><text x="89.8310%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (456 samples, 0.57%)</title><rect x="89.5810%" y="469" width="0.5716%" height="15" fill="rgb(227,192,1)" fg:x="71465" fg:w="456"/><text x="89.8310%" y="479.50"></text></g><g><title>__hrtimer_run_queues (13 samples, 0.02%)</title><rect x="94.0434%" y="405" width="0.0163%" height="15" fill="rgb(237,180,29)" fg:x="75025" fg:w="13"/><text x="94.2934%" y="415.50"></text></g><g><title>tick_sched_timer (12 samples, 0.02%)</title><rect x="94.0446%" y="389" width="0.0150%" height="15" fill="rgb(230,197,35)" fg:x="75026" fg:w="12"/><text x="94.2946%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (14 samples, 0.02%)</title><rect x="94.0434%" y="437" width="0.0175%" height="15" fill="rgb(246,193,31)" fg:x="75025" fg:w="14"/><text x="94.2934%" y="447.50"></text></g><g><title>hrtimer_interrupt (14 samples, 0.02%)</title><rect x="94.0434%" y="421" width="0.0175%" height="15" fill="rgb(241,36,4)" fg:x="75025" fg:w="14"/><text x="94.2934%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="94.0434%" y="469" width="0.0188%" height="15" fill="rgb(241,130,17)" fg:x="75025" fg:w="15"/><text x="94.2934%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (15 samples, 0.02%)</title><rect x="94.0434%" y="453" width="0.0188%" height="15" fill="rgb(206,137,32)" fg:x="75025" fg:w="15"/><text x="94.2934%" y="463.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (3,122 samples, 3.91%)</title><rect x="90.1526%" y="485" width="3.9134%" height="15" fill="rgb(237,228,51)" fg:x="71921" fg:w="3122"/><text x="90.4026%" y="495.50">&lt;pro..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (4,441 samples, 5.57%)</title><rect x="90.1526%" y="501" width="5.5668%" height="15" fill="rgb(243,6,42)" fg:x="71921" fg:w="4441"/><text x="90.4026%" y="511.50">&lt;projec..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (1,319 samples, 1.65%)</title><rect x="94.0660%" y="485" width="1.6534%" height="15" fill="rgb(251,74,28)" fg:x="75043" fg:w="1319"/><text x="94.3160%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (290 samples, 0.36%)</title><rect x="95.7193%" y="501" width="0.3635%" height="15" fill="rgb(218,20,49)" fg:x="76362" fg:w="290"/><text x="95.9693%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1,691 samples, 2.12%)</title><rect x="96.0828%" y="485" width="2.1197%" height="15" fill="rgb(238,28,14)" fg:x="76652" fg:w="1691"/><text x="96.3328%" y="495.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (7,188 samples, 9.01%)</title><rect x="89.5020%" y="517" width="9.0101%" height="15" fill="rgb(229,40,46)" fg:x="71402" fg:w="7188"/><text x="89.7520%" y="527.50">project1::sol..</text></g><g><title>project1::solver::types::Lit::var_idx (1,938 samples, 2.43%)</title><rect x="96.0828%" y="501" width="2.4293%" height="15" fill="rgb(244,195,20)" fg:x="76652" fg:w="1938"/><text x="96.3328%" y="511.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (247 samples, 0.31%)</title><rect x="98.2025%" y="485" width="0.3096%" height="15" fill="rgb(253,56,35)" fg:x="78343" fg:w="247"/><text x="98.4525%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (52 samples, 0.07%)</title><rect x="98.5121%" y="485" width="0.0652%" height="15" fill="rgb(210,149,44)" fg:x="78590" fg:w="52"/><text x="98.7621%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.01%)</title><rect x="98.5673%" y="469" width="0.0100%" height="15" fill="rgb(240,135,12)" fg:x="78634" fg:w="8"/><text x="98.8173%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.01%)</title><rect x="98.5673%" y="453" width="0.0100%" height="15" fill="rgb(251,24,50)" fg:x="78634" fg:w="8"/><text x="98.8173%" y="463.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (311 samples, 0.39%)</title><rect x="98.5121%" y="517" width="0.3898%" height="15" fill="rgb(243,200,47)" fg:x="78590" fg:w="311"/><text x="98.7621%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (311 samples, 0.39%)</title><rect x="98.5121%" y="501" width="0.3898%" height="15" fill="rgb(224,166,26)" fg:x="78590" fg:w="311"/><text x="98.7621%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (259 samples, 0.32%)</title><rect x="98.5773%" y="485" width="0.3247%" height="15" fill="rgb(233,0,47)" fg:x="78642" fg:w="259"/><text x="98.8273%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (259 samples, 0.32%)</title><rect x="98.5773%" y="469" width="0.3247%" height="15" fill="rgb(253,80,5)" fg:x="78642" fg:w="259"/><text x="98.8273%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.03%)</title><rect x="98.9220%" y="485" width="0.0251%" height="15" fill="rgb(214,133,25)" fg:x="78917" fg:w="20"/><text x="99.1720%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (38 samples, 0.05%)</title><rect x="98.9220%" y="501" width="0.0476%" height="15" fill="rgb(209,27,14)" fg:x="78917" fg:w="38"/><text x="99.1720%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.02%)</title><rect x="98.9471%" y="485" width="0.0226%" height="15" fill="rgb(219,102,51)" fg:x="78937" fg:w="18"/><text x="99.1971%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.02%)</title><rect x="98.9471%" y="469" width="0.0226%" height="15" fill="rgb(237,18,16)" fg:x="78937" fg:w="18"/><text x="99.1971%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (101 samples, 0.13%)</title><rect x="98.9019%" y="517" width="0.1266%" height="15" fill="rgb(241,85,17)" fg:x="78901" fg:w="101"/><text x="99.1519%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (46 samples, 0.06%)</title><rect x="98.9709%" y="501" width="0.0577%" height="15" fill="rgb(236,90,42)" fg:x="78956" fg:w="46"/><text x="99.2209%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (46 samples, 0.06%)</title><rect x="98.9709%" y="485" width="0.0577%" height="15" fill="rgb(249,57,21)" fg:x="78956" fg:w="46"/><text x="99.2209%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.06%)</title><rect x="98.9709%" y="469" width="0.0577%" height="15" fill="rgb(243,12,36)" fg:x="78956" fg:w="46"/><text x="99.2209%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (39 samples, 0.05%)</title><rect x="98.9797%" y="453" width="0.0489%" height="15" fill="rgb(253,128,47)" fg:x="78963" fg:w="39"/><text x="99.2297%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.01%)</title><rect x="99.0285%" y="501" width="0.0125%" height="15" fill="rgb(207,33,20)" fg:x="79002" fg:w="10"/><text x="99.2785%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.01%)</title><rect x="99.0298%" y="485" width="0.0113%" height="15" fill="rgb(233,215,35)" fg:x="79003" fg:w="9"/><text x="99.2798%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.01%)</title><rect x="99.0298%" y="469" width="0.0113%" height="15" fill="rgb(249,188,52)" fg:x="79003" fg:w="9"/><text x="99.2798%" y="479.50"></text></g><g><title>core::ptr::read (54 samples, 0.07%)</title><rect x="99.0411%" y="469" width="0.0677%" height="15" fill="rgb(225,12,32)" fg:x="79012" fg:w="54"/><text x="99.2911%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (83 samples, 0.10%)</title><rect x="99.0285%" y="517" width="0.1040%" height="15" fill="rgb(247,98,14)" fg:x="79002" fg:w="83"/><text x="99.2785%" y="527.50"></text></g><g><title>core::mem::take (73 samples, 0.09%)</title><rect x="99.0411%" y="501" width="0.0915%" height="15" fill="rgb(247,219,48)" fg:x="79012" fg:w="73"/><text x="99.2911%" y="511.50"></text></g><g><title>core::mem::replace (73 samples, 0.09%)</title><rect x="99.0411%" y="485" width="0.0915%" height="15" fill="rgb(253,60,48)" fg:x="79012" fg:w="73"/><text x="99.2911%" y="495.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="99.1088%" y="469" width="0.0238%" height="15" fill="rgb(245,15,52)" fg:x="79066" fg:w="19"/><text x="99.3588%" y="479.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (239 samples, 0.30%)</title><rect x="99.1326%" y="517" width="0.2996%" height="15" fill="rgb(220,133,28)" fg:x="79085" fg:w="239"/><text x="99.3826%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (60,553 samples, 75.90%)</title><rect x="23.5369%" y="549" width="75.9028%" height="15" fill="rgb(217,180,4)" fg:x="18777" fg:w="60553"/><text x="23.7869%" y="559.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (54,375 samples, 68.16%)</title><rect x="31.2809%" y="533" width="68.1587%" height="15" fill="rgb(251,24,1)" fg:x="24955" fg:w="54375"/><text x="31.5309%" y="543.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (14 samples, 0.02%)</title><rect x="99.4397%" y="549" width="0.0175%" height="15" fill="rgb(212,185,49)" fg:x="79330" fg:w="14"/><text x="99.6897%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (202 samples, 0.25%)</title><rect x="99.4572%" y="549" width="0.2532%" height="15" fill="rgb(215,175,22)" fg:x="79344" fg:w="202"/><text x="99.7072%" y="559.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (9 samples, 0.01%)</title><rect x="99.7104%" y="549" width="0.0113%" height="15" fill="rgb(250,205,14)" fg:x="79546" fg:w="9"/><text x="99.9604%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (79,004 samples, 99.03%)</title><rect x="0.6982%" y="565" width="99.0310%" height="15" fill="rgb(225,211,22)" fg:x="557" fg:w="79004"/><text x="0.9482%" y="575.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79,037 samples, 99.07%)</title><rect x="0.6957%" y="757" width="99.0724%" height="15" fill="rgb(251,179,42)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79,037 samples, 99.07%)</title><rect x="0.6957%" y="741" width="99.0724%" height="15" fill="rgb(208,216,51)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (79,037 samples, 99.07%)</title><rect x="0.6957%" y="725" width="99.0724%" height="15" fill="rgb(235,36,11)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (79,037 samples, 99.07%)</title><rect x="0.6957%" y="709" width="99.0724%" height="15" fill="rgb(213,189,28)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="719.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (79,037 samples, 99.07%)</title><rect x="0.6957%" y="693" width="99.0724%" height="15" fill="rgb(227,203,42)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (79,037 samples, 99.07%)</title><rect x="0.6957%" y="677" width="99.0724%" height="15" fill="rgb(244,72,36)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (79,037 samples, 99.07%)</title><rect x="0.6957%" y="661" width="99.0724%" height="15" fill="rgb(213,53,17)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (79,037 samples, 99.07%)</title><rect x="0.6957%" y="645" width="99.0724%" height="15" fill="rgb(207,167,3)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (79,037 samples, 99.07%)</title><rect x="0.6957%" y="629" width="99.0724%" height="15" fill="rgb(216,98,30)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (79,037 samples, 99.07%)</title><rect x="0.6957%" y="613" width="99.0724%" height="15" fill="rgb(236,123,15)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (79,037 samples, 99.07%)</title><rect x="0.6957%" y="597" width="99.0724%" height="15" fill="rgb(248,81,50)" fg:x="555" fg:w="79037"/><text x="0.9457%" y="607.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (79,035 samples, 99.07%)</title><rect x="0.6982%" y="581" width="99.0699%" height="15" fill="rgb(214,120,4)" fg:x="557" fg:w="79035"/><text x="0.9482%" y="591.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (31 samples, 0.04%)</title><rect x="99.7292%" y="565" width="0.0389%" height="15" fill="rgb(208,179,34)" fg:x="79561" fg:w="31"/><text x="99.9792%" y="575.50"></text></g><g><title>__clone3 (79,038 samples, 99.07%)</title><rect x="0.6957%" y="805" width="99.0737%" height="15" fill="rgb(227,140,7)" fg:x="555" fg:w="79038"/><text x="0.9457%" y="815.50">__clone3</text></g><g><title>start_thread (79,038 samples, 99.07%)</title><rect x="0.6957%" y="789" width="99.0737%" height="15" fill="rgb(214,22,6)" fg:x="555" fg:w="79038"/><text x="0.9457%" y="799.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (79,038 samples, 99.07%)</title><rect x="0.6957%" y="773" width="99.0737%" height="15" fill="rgb(207,137,27)" fg:x="555" fg:w="79038"/><text x="0.9457%" y="783.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>asm_exc_page_fault (59 samples, 0.07%)</title><rect x="99.7744%" y="805" width="0.0740%" height="15" fill="rgb(210,8,46)" fg:x="79597" fg:w="59"/><text x="100.0244%" y="815.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (17 samples, 0.02%)</title><rect x="99.8483%" y="805" width="0.0213%" height="15" fill="rgb(240,16,54)" fg:x="79656" fg:w="17"/><text x="100.0983%" y="815.50"></text></g><g><title>page_remove_rmap (17 samples, 0.02%)</title><rect x="99.8947%" y="597" width="0.0213%" height="15" fill="rgb(211,209,29)" fg:x="79693" fg:w="17"/><text x="100.1447%" y="607.50"></text></g><g><title>free_unref_page_list (21 samples, 0.03%)</title><rect x="99.9436%" y="533" width="0.0263%" height="15" fill="rgb(226,228,24)" fg:x="79732" fg:w="21"/><text x="100.1936%" y="543.50"></text></g><g><title>free_unref_page_commit (16 samples, 0.02%)</title><rect x="99.9499%" y="517" width="0.0201%" height="15" fill="rgb(222,84,9)" fg:x="79737" fg:w="16"/><text x="100.1999%" y="527.50"></text></g><g><title>free_pcppages_bulk (15 samples, 0.02%)</title><rect x="99.9511%" y="501" width="0.0188%" height="15" fill="rgb(234,203,30)" fg:x="79738" fg:w="15"/><text x="100.2011%" y="511.50"></text></g><g><title>__free_one_page (14 samples, 0.02%)</title><rect x="99.9524%" y="485" width="0.0175%" height="15" fill="rgb(238,109,14)" fg:x="79739" fg:w="14"/><text x="100.2024%" y="495.50"></text></g><g><title>tlb_flush_mmu (47 samples, 0.06%)</title><rect x="99.9160%" y="597" width="0.0589%" height="15" fill="rgb(233,206,34)" fg:x="79710" fg:w="47"/><text x="100.1660%" y="607.50"></text></g><g><title>tlb_batch_pages_flush (47 samples, 0.06%)</title><rect x="99.9160%" y="581" width="0.0589%" height="15" fill="rgb(220,167,47)" fg:x="79710" fg:w="47"/><text x="100.1660%" y="591.50"></text></g><g><title>free_pages_and_swap_cache (47 samples, 0.06%)</title><rect x="99.9160%" y="565" width="0.0589%" height="15" fill="rgb(238,105,10)" fg:x="79710" fg:w="47"/><text x="100.1660%" y="575.50"></text></g><g><title>release_pages (45 samples, 0.06%)</title><rect x="99.9185%" y="549" width="0.0564%" height="15" fill="rgb(213,227,17)" fg:x="79712" fg:w="45"/><text x="100.1685%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (86 samples, 0.11%)</title><rect x="99.8696%" y="805" width="0.1078%" height="15" fill="rgb(217,132,38)" fg:x="79673" fg:w="86"/><text x="100.1196%" y="815.50"></text></g><g><title>do_syscall_64 (85 samples, 0.11%)</title><rect x="99.8709%" y="789" width="0.1065%" height="15" fill="rgb(242,146,4)" fg:x="79674" fg:w="85"/><text x="100.1209%" y="799.50"></text></g><g><title>__x64_sys_exit_group (84 samples, 0.11%)</title><rect x="99.8721%" y="773" width="0.1053%" height="15" fill="rgb(212,61,9)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="783.50"></text></g><g><title>do_group_exit (84 samples, 0.11%)</title><rect x="99.8721%" y="757" width="0.1053%" height="15" fill="rgb(247,126,22)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="767.50"></text></g><g><title>do_exit (84 samples, 0.11%)</title><rect x="99.8721%" y="741" width="0.1053%" height="15" fill="rgb(220,196,2)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="751.50"></text></g><g><title>exit_mm (84 samples, 0.11%)</title><rect x="99.8721%" y="725" width="0.1053%" height="15" fill="rgb(208,46,4)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="735.50"></text></g><g><title>mmput (84 samples, 0.11%)</title><rect x="99.8721%" y="709" width="0.1053%" height="15" fill="rgb(252,104,46)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="719.50"></text></g><g><title>exit_mmap (84 samples, 0.11%)</title><rect x="99.8721%" y="693" width="0.1053%" height="15" fill="rgb(237,152,48)" fg:x="79675" fg:w="84"/><text x="100.1221%" y="703.50"></text></g><g><title>unmap_vmas (83 samples, 0.10%)</title><rect x="99.8734%" y="677" width="0.1040%" height="15" fill="rgb(221,59,37)" fg:x="79676" fg:w="83"/><text x="100.1234%" y="687.50"></text></g><g><title>unmap_single_vma (83 samples, 0.10%)</title><rect x="99.8734%" y="661" width="0.1040%" height="15" fill="rgb(209,202,51)" fg:x="79676" fg:w="83"/><text x="100.1234%" y="671.50"></text></g><g><title>unmap_page_range (83 samples, 0.10%)</title><rect x="99.8734%" y="645" width="0.1040%" height="15" fill="rgb(228,81,30)" fg:x="79676" fg:w="83"/><text x="100.1234%" y="655.50"></text></g><g><title>zap_pmd_range.isra.0 (83 samples, 0.10%)</title><rect x="99.8734%" y="629" width="0.1040%" height="15" fill="rgb(227,42,39)" fg:x="79676" fg:w="83"/><text x="100.1234%" y="639.50"></text></g><g><title>zap_pte_range (81 samples, 0.10%)</title><rect x="99.8759%" y="613" width="0.1015%" height="15" fill="rgb(221,26,2)" fg:x="79678" fg:w="81"/><text x="100.1259%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="99.9787%" y="805" width="0.0100%" height="15" fill="rgb(254,61,31)" fg:x="79760" fg:w="8"/><text x="100.2287%" y="815.50"></text></g><g><title>all (79,777 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(222,173,38)" fg:x="0" fg:w="79777"/><text x="0.2500%" y="847.50"></text></g><g><title>project1 (79,771 samples, 99.99%)</title><rect x="0.0075%" y="821" width="99.9925%" height="15" fill="rgb(218,50,12)" fg:x="6" fg:w="79771"/><text x="0.2575%" y="831.50">project1</text></g></svg></svg>