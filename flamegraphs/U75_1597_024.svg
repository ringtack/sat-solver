<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="253315"><g><title>[[heap]] (67 samples, 0.03%)</title><rect x="0.0024%" y="741" width="0.0264%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="67"/><text x="0.2524%" y="751.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (59 samples, 0.02%)</title><rect x="0.0055%" y="725" width="0.0233%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="59"/><text x="0.2555%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (38 samples, 0.02%)</title><rect x="0.0138%" y="709" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="35" fg:w="38"/><text x="0.2638%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (38 samples, 0.02%)</title><rect x="0.0138%" y="693" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="35" fg:w="38"/><text x="0.2638%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (38 samples, 0.02%)</title><rect x="0.0138%" y="677" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="38"/><text x="0.2638%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (38 samples, 0.02%)</title><rect x="0.0138%" y="661" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="35" fg:w="38"/><text x="0.2638%" y="671.50"></text></g><g><title>_int_free (54 samples, 0.02%)</title><rect x="0.0379%" y="725" width="0.0213%" height="15" fill="rgb(207,160,47)" fg:x="96" fg:w="54"/><text x="0.2879%" y="735.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (45 samples, 0.02%)</title><rect x="0.0715%" y="725" width="0.0178%" height="15" fill="rgb(228,23,34)" fg:x="181" fg:w="45"/><text x="0.3215%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106 samples, 0.04%)</title><rect x="0.0892%" y="725" width="0.0418%" height="15" fill="rgb(218,30,26)" fg:x="226" fg:w="106"/><text x="0.3392%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (42 samples, 0.02%)</title><rect x="0.1792%" y="677" width="0.0166%" height="15" fill="rgb(220,122,19)" fg:x="454" fg:w="42"/><text x="0.4292%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (42 samples, 0.02%)</title><rect x="0.1792%" y="661" width="0.0166%" height="15" fill="rgb(250,228,42)" fg:x="454" fg:w="42"/><text x="0.4292%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.02%)</title><rect x="0.1792%" y="645" width="0.0166%" height="15" fill="rgb(240,193,28)" fg:x="454" fg:w="42"/><text x="0.4292%" y="655.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (243 samples, 0.10%)</title><rect x="0.1536%" y="693" width="0.0959%" height="15" fill="rgb(216,20,37)" fg:x="389" fg:w="243"/><text x="0.4036%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (136 samples, 0.05%)</title><rect x="0.1958%" y="677" width="0.0537%" height="15" fill="rgb(206,188,39)" fg:x="496" fg:w="136"/><text x="0.4458%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (136 samples, 0.05%)</title><rect x="0.1958%" y="661" width="0.0537%" height="15" fill="rgb(217,207,13)" fg:x="496" fg:w="136"/><text x="0.4458%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (136 samples, 0.05%)</title><rect x="0.1958%" y="645" width="0.0537%" height="15" fill="rgb(231,73,38)" fg:x="496" fg:w="136"/><text x="0.4458%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (136 samples, 0.05%)</title><rect x="0.1958%" y="629" width="0.0537%" height="15" fill="rgb(225,20,46)" fg:x="496" fg:w="136"/><text x="0.4458%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (136 samples, 0.05%)</title><rect x="0.1958%" y="613" width="0.0537%" height="15" fill="rgb(210,31,41)" fg:x="496" fg:w="136"/><text x="0.4458%" y="623.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (136 samples, 0.05%)</title><rect x="0.1958%" y="597" width="0.0537%" height="15" fill="rgb(221,200,47)" fg:x="496" fg:w="136"/><text x="0.4458%" y="607.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (36 samples, 0.01%)</title><rect x="0.2495%" y="693" width="0.0142%" height="15" fill="rgb(226,26,5)" fg:x="632" fg:w="36"/><text x="0.4995%" y="703.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (30 samples, 0.01%)</title><rect x="0.2519%" y="677" width="0.0118%" height="15" fill="rgb(249,33,26)" fg:x="638" fg:w="30"/><text x="0.5019%" y="687.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (30 samples, 0.01%)</title><rect x="0.2519%" y="661" width="0.0118%" height="15" fill="rgb(235,183,28)" fg:x="638" fg:w="30"/><text x="0.5019%" y="671.50"></text></g><g><title>[anon] (604 samples, 0.24%)</title><rect x="0.0288%" y="741" width="0.2384%" height="15" fill="rgb(221,5,38)" fg:x="73" fg:w="604"/><text x="0.2788%" y="751.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (296 samples, 0.12%)</title><rect x="0.1504%" y="725" width="0.1169%" height="15" fill="rgb(247,18,42)" fg:x="381" fg:w="296"/><text x="0.4004%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (296 samples, 0.12%)</title><rect x="0.1504%" y="709" width="0.1169%" height="15" fill="rgb(241,131,45)" fg:x="381" fg:w="296"/><text x="0.4004%" y="719.50"></text></g><g><title>__GI___libc_free (70 samples, 0.03%)</title><rect x="0.2744%" y="725" width="0.0276%" height="15" fill="rgb(249,31,29)" fg:x="695" fg:w="70"/><text x="0.5244%" y="735.50"></text></g><g><title>__GI___libc_malloc (73 samples, 0.03%)</title><rect x="0.3020%" y="725" width="0.0288%" height="15" fill="rgb(225,111,53)" fg:x="765" fg:w="73"/><text x="0.5520%" y="735.50"></text></g><g><title>_int_free (33 samples, 0.01%)</title><rect x="0.3375%" y="725" width="0.0130%" height="15" fill="rgb(238,160,17)" fg:x="855" fg:w="33"/><text x="0.5875%" y="735.50"></text></g><g><title>_int_malloc (28 samples, 0.01%)</title><rect x="0.3506%" y="725" width="0.0111%" height="15" fill="rgb(214,148,48)" fg:x="888" fg:w="28"/><text x="0.6006%" y="735.50"></text></g><g><title>core::slice::sort::merge_sort (32 samples, 0.01%)</title><rect x="0.3782%" y="725" width="0.0126%" height="15" fill="rgb(232,36,49)" fg:x="958" fg:w="32"/><text x="0.6282%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.02%)</title><rect x="0.3908%" y="725" width="0.0189%" height="15" fill="rgb(209,103,24)" fg:x="990" fg:w="48"/><text x="0.6408%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (59 samples, 0.02%)</title><rect x="0.4098%" y="725" width="0.0233%" height="15" fill="rgb(229,88,8)" fg:x="1038" fg:w="59"/><text x="0.6598%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (59 samples, 0.02%)</title><rect x="0.4098%" y="709" width="0.0233%" height="15" fill="rgb(213,181,19)" fg:x="1038" fg:w="59"/><text x="0.6598%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (26 samples, 0.01%)</title><rect x="0.4228%" y="693" width="0.0103%" height="15" fill="rgb(254,191,54)" fg:x="1071" fg:w="26"/><text x="0.6728%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (28 samples, 0.01%)</title><rect x="0.4331%" y="725" width="0.0111%" height="15" fill="rgb(241,83,37)" fg:x="1097" fg:w="28"/><text x="0.6831%" y="735.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (36 samples, 0.01%)</title><rect x="0.4441%" y="725" width="0.0142%" height="15" fill="rgb(233,36,39)" fg:x="1125" fg:w="36"/><text x="0.6941%" y="735.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (412 samples, 0.16%)</title><rect x="0.4583%" y="725" width="0.1626%" height="15" fill="rgb(226,3,54)" fg:x="1161" fg:w="412"/><text x="0.7083%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (185 samples, 0.07%)</title><rect x="0.5479%" y="709" width="0.0730%" height="15" fill="rgb(245,192,40)" fg:x="1388" fg:w="185"/><text x="0.7979%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (185 samples, 0.07%)</title><rect x="0.5479%" y="693" width="0.0730%" height="15" fill="rgb(238,167,29)" fg:x="1388" fg:w="185"/><text x="0.7979%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (185 samples, 0.07%)</title><rect x="0.5479%" y="677" width="0.0730%" height="15" fill="rgb(232,182,51)" fg:x="1388" fg:w="185"/><text x="0.7979%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (185 samples, 0.07%)</title><rect x="0.5479%" y="661" width="0.0730%" height="15" fill="rgb(231,60,39)" fg:x="1388" fg:w="185"/><text x="0.7979%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (82 samples, 0.03%)</title><rect x="0.6210%" y="725" width="0.0324%" height="15" fill="rgb(208,69,12)" fg:x="1573" fg:w="82"/><text x="0.8710%" y="735.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (60 samples, 0.02%)</title><rect x="0.6297%" y="709" width="0.0237%" height="15" fill="rgb(235,93,37)" fg:x="1595" fg:w="60"/><text x="0.8797%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (308 samples, 0.12%)</title><rect x="0.6533%" y="725" width="0.1216%" height="15" fill="rgb(213,116,39)" fg:x="1655" fg:w="308"/><text x="0.9033%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (48 samples, 0.02%)</title><rect x="0.7749%" y="725" width="0.0189%" height="15" fill="rgb(222,207,29)" fg:x="1963" fg:w="48"/><text x="1.0249%" y="735.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (26 samples, 0.01%)</title><rect x="0.7939%" y="725" width="0.0103%" height="15" fill="rgb(206,96,30)" fg:x="2011" fg:w="26"/><text x="1.0439%" y="735.50"></text></g><g><title>[unknown] (1,352 samples, 0.53%)</title><rect x="0.2744%" y="741" width="0.5337%" height="15" fill="rgb(218,138,4)" fg:x="695" fg:w="1352"/><text x="0.5244%" y="751.50"></text></g><g><title>core::cmp::PartialOrd::le (31 samples, 0.01%)</title><rect x="0.8803%" y="485" width="0.0122%" height="15" fill="rgb(250,191,14)" fg:x="2230" fg:w="31"/><text x="1.1303%" y="495.50"></text></g><g><title>_int_free (42 samples, 0.02%)</title><rect x="0.9016%" y="357" width="0.0166%" height="15" fill="rgb(239,60,40)" fg:x="2284" fg:w="42"/><text x="1.1516%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.03%)</title><rect x="0.8926%" y="453" width="0.0284%" height="15" fill="rgb(206,27,48)" fg:x="2261" fg:w="72"/><text x="1.1426%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.03%)</title><rect x="0.8926%" y="437" width="0.0284%" height="15" fill="rgb(225,35,8)" fg:x="2261" fg:w="72"/><text x="1.1426%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.03%)</title><rect x="0.8926%" y="421" width="0.0284%" height="15" fill="rgb(250,213,24)" fg:x="2261" fg:w="72"/><text x="1.1426%" y="431.50"></text></g><g><title>__rdl_dealloc (72 samples, 0.03%)</title><rect x="0.8926%" y="405" width="0.0284%" height="15" fill="rgb(247,123,22)" fg:x="2261" fg:w="72"/><text x="1.1426%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (72 samples, 0.03%)</title><rect x="0.8926%" y="389" width="0.0284%" height="15" fill="rgb(231,138,38)" fg:x="2261" fg:w="72"/><text x="1.1426%" y="399.50"></text></g><g><title>__GI___libc_free (69 samples, 0.03%)</title><rect x="0.8937%" y="373" width="0.0272%" height="15" fill="rgb(231,145,46)" fg:x="2264" fg:w="69"/><text x="1.1437%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (76 samples, 0.03%)</title><rect x="0.8926%" y="485" width="0.0300%" height="15" fill="rgb(251,118,11)" fg:x="2261" fg:w="76"/><text x="1.1426%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (76 samples, 0.03%)</title><rect x="0.8926%" y="469" width="0.0300%" height="15" fill="rgb(217,147,25)" fg:x="2261" fg:w="76"/><text x="1.1426%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (100 samples, 0.04%)</title><rect x="0.9293%" y="485" width="0.0395%" height="15" fill="rgb(247,81,37)" fg:x="2354" fg:w="100"/><text x="1.1793%" y="495.50"></text></g><g><title>__rdl_alloc (258 samples, 0.10%)</title><rect x="2.2979%" y="309" width="0.1018%" height="15" fill="rgb(209,12,38)" fg:x="5821" fg:w="258"/><text x="2.5479%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (254 samples, 0.10%)</title><rect x="2.2995%" y="293" width="0.1003%" height="15" fill="rgb(227,1,9)" fg:x="5825" fg:w="254"/><text x="2.5495%" y="303.50"></text></g><g><title>__GI___libc_malloc (254 samples, 0.10%)</title><rect x="2.2995%" y="277" width="0.1003%" height="15" fill="rgb(248,47,43)" fg:x="5825" fg:w="254"/><text x="2.5495%" y="287.50"></text></g><g><title>tcache_get (184 samples, 0.07%)</title><rect x="2.3271%" y="261" width="0.0726%" height="15" fill="rgb(221,10,30)" fg:x="5895" fg:w="184"/><text x="2.5771%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (294 samples, 0.12%)</title><rect x="2.2979%" y="357" width="0.1161%" height="15" fill="rgb(210,229,1)" fg:x="5821" fg:w="294"/><text x="2.5479%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (294 samples, 0.12%)</title><rect x="2.2979%" y="341" width="0.1161%" height="15" fill="rgb(222,148,37)" fg:x="5821" fg:w="294"/><text x="2.5479%" y="351.50"></text></g><g><title>alloc::alloc::alloc (294 samples, 0.12%)</title><rect x="2.2979%" y="325" width="0.1161%" height="15" fill="rgb(234,67,33)" fg:x="5821" fg:w="294"/><text x="2.5479%" y="335.50"></text></g><g><title>core::ptr::read_volatile (36 samples, 0.01%)</title><rect x="2.3998%" y="309" width="0.0142%" height="15" fill="rgb(247,98,35)" fg:x="6079" fg:w="36"/><text x="2.6498%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (335 samples, 0.13%)</title><rect x="2.2865%" y="405" width="0.1322%" height="15" fill="rgb(247,138,52)" fg:x="5792" fg:w="335"/><text x="2.5365%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (335 samples, 0.13%)</title><rect x="2.2865%" y="389" width="0.1322%" height="15" fill="rgb(213,79,30)" fg:x="5792" fg:w="335"/><text x="2.5365%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (335 samples, 0.13%)</title><rect x="2.2865%" y="373" width="0.1322%" height="15" fill="rgb(246,177,23)" fg:x="5792" fg:w="335"/><text x="2.5365%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (358 samples, 0.14%)</title><rect x="2.2865%" y="469" width="0.1413%" height="15" fill="rgb(230,62,27)" fg:x="5792" fg:w="358"/><text x="2.5365%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (358 samples, 0.14%)</title><rect x="2.2865%" y="453" width="0.1413%" height="15" fill="rgb(216,154,8)" fg:x="5792" fg:w="358"/><text x="2.5365%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (358 samples, 0.14%)</title><rect x="2.2865%" y="437" width="0.1413%" height="15" fill="rgb(244,35,45)" fg:x="5792" fg:w="358"/><text x="2.5365%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (358 samples, 0.14%)</title><rect x="2.2865%" y="421" width="0.1413%" height="15" fill="rgb(251,115,12)" fg:x="5792" fg:w="358"/><text x="2.5365%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (47 samples, 0.02%)</title><rect x="2.4278%" y="469" width="0.0186%" height="15" fill="rgb(240,54,50)" fg:x="6150" fg:w="47"/><text x="2.6778%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (195 samples, 0.08%)</title><rect x="2.4499%" y="453" width="0.0770%" height="15" fill="rgb(233,84,52)" fg:x="6206" fg:w="195"/><text x="2.6999%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (36 samples, 0.01%)</title><rect x="2.5127%" y="437" width="0.0142%" height="15" fill="rgb(207,117,47)" fg:x="6365" fg:w="36"/><text x="2.7627%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (36 samples, 0.01%)</title><rect x="2.5127%" y="421" width="0.0142%" height="15" fill="rgb(249,43,39)" fg:x="6365" fg:w="36"/><text x="2.7627%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (306 samples, 0.12%)</title><rect x="2.4499%" y="469" width="0.1208%" height="15" fill="rgb(209,38,44)" fg:x="6206" fg:w="306"/><text x="2.6999%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (111 samples, 0.04%)</title><rect x="2.5269%" y="453" width="0.0438%" height="15" fill="rgb(236,212,23)" fg:x="6401" fg:w="111"/><text x="2.7769%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (94 samples, 0.04%)</title><rect x="2.5336%" y="437" width="0.0371%" height="15" fill="rgb(242,79,21)" fg:x="6418" fg:w="94"/><text x="2.7836%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (58 samples, 0.02%)</title><rect x="2.5707%" y="453" width="0.0229%" height="15" fill="rgb(211,96,35)" fg:x="6512" fg:w="58"/><text x="2.8207%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (43 samples, 0.02%)</title><rect x="2.5936%" y="437" width="0.0170%" height="15" fill="rgb(253,215,40)" fg:x="6570" fg:w="43"/><text x="2.8436%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (103 samples, 0.04%)</title><rect x="2.5707%" y="469" width="0.0407%" height="15" fill="rgb(211,81,21)" fg:x="6512" fg:w="103"/><text x="2.8207%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (45 samples, 0.02%)</title><rect x="2.5936%" y="453" width="0.0178%" height="15" fill="rgb(208,190,38)" fg:x="6570" fg:w="45"/><text x="2.8436%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (782 samples, 0.31%)</title><rect x="2.7097%" y="453" width="0.3087%" height="15" fill="rgb(235,213,38)" fg:x="6864" fg:w="782"/><text x="2.9597%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,032 samples, 0.41%)</title><rect x="2.6114%" y="469" width="0.4074%" height="15" fill="rgb(237,122,38)" fg:x="6615" fg:w="1032"/><text x="2.8614%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (540 samples, 0.21%)</title><rect x="3.0504%" y="437" width="0.2132%" height="15" fill="rgb(244,218,35)" fg:x="7727" fg:w="540"/><text x="3.3004%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (540 samples, 0.21%)</title><rect x="3.0504%" y="421" width="0.2132%" height="15" fill="rgb(240,68,47)" fg:x="7727" fg:w="540"/><text x="3.3004%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (685 samples, 0.27%)</title><rect x="3.0188%" y="469" width="0.2704%" height="15" fill="rgb(210,16,53)" fg:x="7647" fg:w="685"/><text x="3.2688%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (665 samples, 0.26%)</title><rect x="3.0267%" y="453" width="0.2625%" height="15" fill="rgb(235,124,12)" fg:x="7667" fg:w="665"/><text x="3.2767%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (65 samples, 0.03%)</title><rect x="3.2635%" y="437" width="0.0257%" height="15" fill="rgb(224,169,11)" fg:x="8267" fg:w="65"/><text x="3.5135%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (65 samples, 0.03%)</title><rect x="3.2635%" y="421" width="0.0257%" height="15" fill="rgb(250,166,2)" fg:x="8267" fg:w="65"/><text x="3.5135%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (37 samples, 0.01%)</title><rect x="3.2892%" y="469" width="0.0146%" height="15" fill="rgb(242,216,29)" fg:x="8332" fg:w="37"/><text x="3.5392%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (37 samples, 0.01%)</title><rect x="3.2892%" y="453" width="0.0146%" height="15" fill="rgb(230,116,27)" fg:x="8332" fg:w="37"/><text x="3.5392%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (61 samples, 0.02%)</title><rect x="3.3042%" y="469" width="0.0241%" height="15" fill="rgb(228,99,48)" fg:x="8370" fg:w="61"/><text x="3.5542%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (43 samples, 0.02%)</title><rect x="3.3283%" y="469" width="0.0170%" height="15" fill="rgb(253,11,6)" fg:x="8431" fg:w="43"/><text x="3.5783%" y="479.50"></text></g><g><title>__memcpy_evex_unaligned_erms (38 samples, 0.02%)</title><rect x="3.6603%" y="293" width="0.0150%" height="15" fill="rgb(247,143,39)" fg:x="9272" fg:w="38"/><text x="3.9103%" y="303.50"></text></g><g><title>_int_free (47 samples, 0.02%)</title><rect x="3.6753%" y="293" width="0.0186%" height="15" fill="rgb(236,97,10)" fg:x="9310" fg:w="47"/><text x="3.9253%" y="303.50"></text></g><g><title>__handle_mm_fault (29 samples, 0.01%)</title><rect x="3.7128%" y="213" width="0.0114%" height="15" fill="rgb(233,208,19)" fg:x="9405" fg:w="29"/><text x="3.9628%" y="223.50"></text></g><g><title>handle_pte_fault (28 samples, 0.01%)</title><rect x="3.7132%" y="197" width="0.0111%" height="15" fill="rgb(216,164,2)" fg:x="9406" fg:w="28"/><text x="3.9632%" y="207.50"></text></g><g><title>do_anonymous_page (26 samples, 0.01%)</title><rect x="3.7140%" y="181" width="0.0103%" height="15" fill="rgb(220,129,5)" fg:x="9408" fg:w="26"/><text x="3.9640%" y="191.50"></text></g><g><title>do_user_addr_fault (34 samples, 0.01%)</title><rect x="3.7120%" y="245" width="0.0134%" height="15" fill="rgb(242,17,10)" fg:x="9403" fg:w="34"/><text x="3.9620%" y="255.50"></text></g><g><title>handle_mm_fault (33 samples, 0.01%)</title><rect x="3.7124%" y="229" width="0.0130%" height="15" fill="rgb(242,107,0)" fg:x="9404" fg:w="33"/><text x="3.9624%" y="239.50"></text></g><g><title>asm_exc_page_fault (36 samples, 0.01%)</title><rect x="3.7116%" y="277" width="0.0142%" height="15" fill="rgb(251,28,31)" fg:x="9402" fg:w="36"/><text x="3.9616%" y="287.50"></text></g><g><title>exc_page_fault (36 samples, 0.01%)</title><rect x="3.7116%" y="261" width="0.0142%" height="15" fill="rgb(233,223,10)" fg:x="9402" fg:w="36"/><text x="3.9616%" y="271.50"></text></g><g><title>charge_memcg (31 samples, 0.01%)</title><rect x="3.7558%" y="133" width="0.0122%" height="15" fill="rgb(215,21,27)" fg:x="9514" fg:w="31"/><text x="4.0058%" y="143.50"></text></g><g><title>get_mem_cgroup_from_mm (28 samples, 0.01%)</title><rect x="3.7680%" y="133" width="0.0111%" height="15" fill="rgb(232,23,21)" fg:x="9545" fg:w="28"/><text x="4.0180%" y="143.50"></text></g><g><title>__mem_cgroup_charge (66 samples, 0.03%)</title><rect x="3.7546%" y="149" width="0.0261%" height="15" fill="rgb(244,5,23)" fg:x="9511" fg:w="66"/><text x="4.0046%" y="159.50"></text></g><g><title>__alloc_pages (30 samples, 0.01%)</title><rect x="3.7894%" y="117" width="0.0118%" height="15" fill="rgb(226,81,46)" fg:x="9599" fg:w="30"/><text x="4.0394%" y="127.50"></text></g><g><title>do_anonymous_page (137 samples, 0.05%)</title><rect x="3.7503%" y="165" width="0.0541%" height="15" fill="rgb(247,70,30)" fg:x="9500" fg:w="137"/><text x="4.0003%" y="175.50"></text></g><g><title>vma_alloc_folio (42 samples, 0.02%)</title><rect x="3.7878%" y="149" width="0.0166%" height="15" fill="rgb(212,68,19)" fg:x="9595" fg:w="42"/><text x="4.0378%" y="159.50"></text></g><g><title>__folio_alloc (39 samples, 0.02%)</title><rect x="3.7890%" y="133" width="0.0154%" height="15" fill="rgb(240,187,13)" fg:x="9598" fg:w="39"/><text x="4.0390%" y="143.50"></text></g><g><title>__handle_mm_fault (152 samples, 0.06%)</title><rect x="3.7451%" y="197" width="0.0600%" height="15" fill="rgb(223,113,26)" fg:x="9487" fg:w="152"/><text x="3.9951%" y="207.50"></text></g><g><title>handle_pte_fault (148 samples, 0.06%)</title><rect x="3.7467%" y="181" width="0.0584%" height="15" fill="rgb(206,192,2)" fg:x="9491" fg:w="148"/><text x="3.9967%" y="191.50"></text></g><g><title>handle_mm_fault (168 samples, 0.07%)</title><rect x="3.7436%" y="213" width="0.0663%" height="15" fill="rgb(241,108,4)" fg:x="9483" fg:w="168"/><text x="3.9936%" y="223.50"></text></g><g><title>do_user_addr_fault (175 samples, 0.07%)</title><rect x="3.7416%" y="229" width="0.0691%" height="15" fill="rgb(247,173,49)" fg:x="9478" fg:w="175"/><text x="3.9916%" y="239.50"></text></g><g><title>asm_exc_page_fault (194 samples, 0.08%)</title><rect x="3.7404%" y="261" width="0.0766%" height="15" fill="rgb(224,114,35)" fg:x="9475" fg:w="194"/><text x="3.9904%" y="271.50"></text></g><g><title>exc_page_fault (194 samples, 0.08%)</title><rect x="3.7404%" y="245" width="0.0766%" height="15" fill="rgb(245,159,27)" fg:x="9475" fg:w="194"/><text x="3.9904%" y="255.50"></text></g><g><title>perf_event_mmap_output (38 samples, 0.02%)</title><rect x="3.8896%" y="85" width="0.0150%" height="15" fill="rgb(245,172,44)" fg:x="9853" fg:w="38"/><text x="4.1396%" y="95.50"></text></g><g><title>perf_iterate_ctx (150 samples, 0.06%)</title><rect x="3.8466%" y="101" width="0.0592%" height="15" fill="rgb(236,23,11)" fg:x="9744" fg:w="150"/><text x="4.0966%" y="111.50"></text></g><g><title>perf_event_mmap_event (164 samples, 0.06%)</title><rect x="3.8415%" y="133" width="0.0647%" height="15" fill="rgb(205,117,38)" fg:x="9731" fg:w="164"/><text x="4.0915%" y="143.50"></text></g><g><title>perf_iterate_sb (153 samples, 0.06%)</title><rect x="3.8458%" y="117" width="0.0604%" height="15" fill="rgb(237,72,25)" fg:x="9742" fg:w="153"/><text x="4.0958%" y="127.50"></text></g><g><title>perf_event_mmap (171 samples, 0.07%)</title><rect x="3.8395%" y="149" width="0.0675%" height="15" fill="rgb(244,70,9)" fg:x="9726" fg:w="171"/><text x="4.0895%" y="159.50"></text></g><g><title>mprotect_fixup (226 samples, 0.09%)</title><rect x="3.8284%" y="165" width="0.0892%" height="15" fill="rgb(217,125,39)" fg:x="9698" fg:w="226"/><text x="4.0784%" y="175.50"></text></g><g><title>do_mprotect_pkey (253 samples, 0.10%)</title><rect x="3.8221%" y="181" width="0.0999%" height="15" fill="rgb(235,36,10)" fg:x="9682" fg:w="253"/><text x="4.0721%" y="191.50"></text></g><g><title>__x64_sys_mprotect (257 samples, 0.10%)</title><rect x="3.8221%" y="197" width="0.1015%" height="15" fill="rgb(251,123,47)" fg:x="9682" fg:w="257"/><text x="4.0721%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (287 samples, 0.11%)</title><rect x="3.8194%" y="229" width="0.1133%" height="15" fill="rgb(221,13,13)" fg:x="9675" fg:w="287"/><text x="4.0694%" y="239.50"></text></g><g><title>do_syscall_64 (280 samples, 0.11%)</title><rect x="3.8221%" y="213" width="0.1105%" height="15" fill="rgb(238,131,9)" fg:x="9682" fg:w="280"/><text x="4.0721%" y="223.50"></text></g><g><title>grow_heap (325 samples, 0.13%)</title><rect x="3.8178%" y="261" width="0.1283%" height="15" fill="rgb(211,50,8)" fg:x="9671" fg:w="325"/><text x="4.0678%" y="271.50"></text></g><g><title>__GI___mprotect (324 samples, 0.13%)</title><rect x="3.8182%" y="245" width="0.1279%" height="15" fill="rgb(245,182,24)" fg:x="9672" fg:w="324"/><text x="4.0682%" y="255.50"></text></g><g><title>_int_realloc (757 samples, 0.30%)</title><rect x="3.6508%" y="309" width="0.2988%" height="15" fill="rgb(242,14,37)" fg:x="9248" fg:w="757"/><text x="3.9008%" y="319.50"></text></g><g><title>_int_malloc (648 samples, 0.26%)</title><rect x="3.6938%" y="293" width="0.2558%" height="15" fill="rgb(246,228,12)" fg:x="9357" fg:w="648"/><text x="3.9438%" y="303.50"></text></g><g><title>sysmalloc (561 samples, 0.22%)</title><rect x="3.7282%" y="277" width="0.2215%" height="15" fill="rgb(213,55,15)" fg:x="9444" fg:w="561"/><text x="3.9782%" y="287.50"></text></g><g><title>arena_for_chunk (67 samples, 0.03%)</title><rect x="3.9496%" y="309" width="0.0264%" height="15" fill="rgb(209,9,3)" fg:x="10005" fg:w="67"/><text x="4.1996%" y="319.50"></text></g><g><title>arena_for_chunk (66 samples, 0.03%)</title><rect x="3.9500%" y="293" width="0.0261%" height="15" fill="rgb(230,59,30)" fg:x="10006" fg:w="66"/><text x="4.2000%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,064 samples, 0.42%)</title><rect x="3.5572%" y="405" width="0.4200%" height="15" fill="rgb(209,121,21)" fg:x="9011" fg:w="1064"/><text x="3.8072%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,064 samples, 0.42%)</title><rect x="3.5572%" y="389" width="0.4200%" height="15" fill="rgb(220,109,13)" fg:x="9011" fg:w="1064"/><text x="3.8072%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1,061 samples, 0.42%)</title><rect x="3.5584%" y="373" width="0.4188%" height="15" fill="rgb(232,18,1)" fg:x="9014" fg:w="1061"/><text x="3.8084%" y="383.50"></text></g><g><title>__rdl_realloc (1,061 samples, 0.42%)</title><rect x="3.5584%" y="357" width="0.4188%" height="15" fill="rgb(215,41,42)" fg:x="9014" fg:w="1061"/><text x="3.8084%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,061 samples, 0.42%)</title><rect x="3.5584%" y="341" width="0.4188%" height="15" fill="rgb(224,123,36)" fg:x="9014" fg:w="1061"/><text x="3.8084%" y="351.50"></text></g><g><title>__GI___libc_realloc (1,059 samples, 0.42%)</title><rect x="3.5592%" y="325" width="0.4181%" height="15" fill="rgb(240,125,3)" fg:x="9016" fg:w="1059"/><text x="3.8092%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,068 samples, 0.42%)</title><rect x="3.5568%" y="421" width="0.4216%" height="15" fill="rgb(205,98,50)" fg:x="9010" fg:w="1068"/><text x="3.8068%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,080 samples, 0.43%)</title><rect x="3.5533%" y="437" width="0.4263%" height="15" fill="rgb(205,185,37)" fg:x="9001" fg:w="1080"/><text x="3.8033%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,081 samples, 0.43%)</title><rect x="3.5533%" y="453" width="0.4267%" height="15" fill="rgb(238,207,15)" fg:x="9001" fg:w="1081"/><text x="3.8033%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (109 samples, 0.04%)</title><rect x="3.9800%" y="453" width="0.0430%" height="15" fill="rgb(213,199,42)" fg:x="10082" fg:w="109"/><text x="4.2300%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (109 samples, 0.04%)</title><rect x="3.9800%" y="437" width="0.0430%" height="15" fill="rgb(235,201,11)" fg:x="10082" fg:w="109"/><text x="4.2300%" y="447.50"></text></g><g><title>core::ptr::write (707 samples, 0.28%)</title><rect x="4.0250%" y="453" width="0.2791%" height="15" fill="rgb(207,46,11)" fg:x="10196" fg:w="707"/><text x="4.2750%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,441 samples, 0.96%)</title><rect x="3.3452%" y="469" width="0.9636%" height="15" fill="rgb(241,35,35)" fg:x="8474" fg:w="2441"/><text x="3.5952%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (28 samples, 0.01%)</title><rect x="4.3310%" y="389" width="0.0111%" height="15" fill="rgb(243,32,47)" fg:x="10971" fg:w="28"/><text x="4.5810%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (41 samples, 0.02%)</title><rect x="4.3294%" y="437" width="0.0162%" height="15" fill="rgb(247,202,23)" fg:x="10967" fg:w="41"/><text x="4.5794%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.02%)</title><rect x="4.3294%" y="421" width="0.0162%" height="15" fill="rgb(219,102,11)" fg:x="10967" fg:w="41"/><text x="4.5794%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (41 samples, 0.02%)</title><rect x="4.3294%" y="405" width="0.0162%" height="15" fill="rgb(243,110,44)" fg:x="10967" fg:w="41"/><text x="4.5794%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (251 samples, 0.10%)</title><rect x="4.3231%" y="453" width="0.0991%" height="15" fill="rgb(222,74,54)" fg:x="10951" fg:w="251"/><text x="4.5731%" y="463.50"></text></g><g><title>core::ptr::write (180 samples, 0.07%)</title><rect x="4.3511%" y="437" width="0.0711%" height="15" fill="rgb(216,99,12)" fg:x="11022" fg:w="180"/><text x="4.6011%" y="447.50"></text></g><g><title>__memset_evex_unaligned_erms (163 samples, 0.06%)</title><rect x="4.3578%" y="421" width="0.0643%" height="15" fill="rgb(226,22,26)" fg:x="11039" fg:w="163"/><text x="4.6078%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (312 samples, 0.12%)</title><rect x="4.3089%" y="469" width="0.1232%" height="15" fill="rgb(217,163,10)" fg:x="10915" fg:w="312"/><text x="4.5589%" y="479.50"></text></g><g><title>__rdl_alloc (410 samples, 0.16%)</title><rect x="4.4352%" y="357" width="0.1619%" height="15" fill="rgb(213,25,53)" fg:x="11235" fg:w="410"/><text x="4.6852%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (410 samples, 0.16%)</title><rect x="4.4352%" y="341" width="0.1619%" height="15" fill="rgb(252,105,26)" fg:x="11235" fg:w="410"/><text x="4.6852%" y="351.50"></text></g><g><title>__GI___libc_malloc (403 samples, 0.16%)</title><rect x="4.4380%" y="325" width="0.1591%" height="15" fill="rgb(220,39,43)" fg:x="11242" fg:w="403"/><text x="4.6880%" y="335.50"></text></g><g><title>tcache_get (110 samples, 0.04%)</title><rect x="4.5536%" y="309" width="0.0434%" height="15" fill="rgb(229,68,48)" fg:x="11535" fg:w="110"/><text x="4.8036%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (423 samples, 0.17%)</title><rect x="4.4320%" y="453" width="0.1670%" height="15" fill="rgb(252,8,32)" fg:x="11227" fg:w="423"/><text x="4.6820%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (419 samples, 0.17%)</title><rect x="4.4336%" y="437" width="0.1654%" height="15" fill="rgb(223,20,43)" fg:x="11231" fg:w="419"/><text x="4.6836%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (419 samples, 0.17%)</title><rect x="4.4336%" y="421" width="0.1654%" height="15" fill="rgb(229,81,49)" fg:x="11231" fg:w="419"/><text x="4.6836%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (415 samples, 0.16%)</title><rect x="4.4352%" y="405" width="0.1638%" height="15" fill="rgb(236,28,36)" fg:x="11235" fg:w="415"/><text x="4.6852%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (415 samples, 0.16%)</title><rect x="4.4352%" y="389" width="0.1638%" height="15" fill="rgb(249,185,26)" fg:x="11235" fg:w="415"/><text x="4.6852%" y="399.50"></text></g><g><title>alloc::alloc::alloc (415 samples, 0.16%)</title><rect x="4.4352%" y="373" width="0.1638%" height="15" fill="rgb(249,174,33)" fg:x="11235" fg:w="415"/><text x="4.6852%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (424 samples, 0.17%)</title><rect x="4.4320%" y="469" width="0.1674%" height="15" fill="rgb(233,201,37)" fg:x="11227" fg:w="424"/><text x="4.6820%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (79 samples, 0.03%)</title><rect x="4.6022%" y="469" width="0.0312%" height="15" fill="rgb(221,78,26)" fg:x="11658" fg:w="79"/><text x="4.8522%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (115 samples, 0.05%)</title><rect x="4.8011%" y="293" width="0.0454%" height="15" fill="rgb(250,127,30)" fg:x="12162" fg:w="115"/><text x="5.0511%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (115 samples, 0.05%)</title><rect x="4.8011%" y="277" width="0.0454%" height="15" fill="rgb(230,49,44)" fg:x="12162" fg:w="115"/><text x="5.0511%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (115 samples, 0.05%)</title><rect x="4.8011%" y="261" width="0.0454%" height="15" fill="rgb(229,67,23)" fg:x="12162" fg:w="115"/><text x="5.0511%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (157 samples, 0.06%)</title><rect x="4.7850%" y="325" width="0.0620%" height="15" fill="rgb(249,83,47)" fg:x="12121" fg:w="157"/><text x="5.0350%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (157 samples, 0.06%)</title><rect x="4.7850%" y="309" width="0.0620%" height="15" fill="rgb(215,43,3)" fg:x="12121" fg:w="157"/><text x="5.0350%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (452 samples, 0.18%)</title><rect x="4.7103%" y="405" width="0.1784%" height="15" fill="rgb(238,154,13)" fg:x="11932" fg:w="452"/><text x="4.9603%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (447 samples, 0.18%)</title><rect x="4.7123%" y="389" width="0.1765%" height="15" fill="rgb(219,56,2)" fg:x="11937" fg:w="447"/><text x="4.9623%" y="399.50"></text></g><g><title>core::cmp::max_by (447 samples, 0.18%)</title><rect x="4.7123%" y="373" width="0.1765%" height="15" fill="rgb(233,0,4)" fg:x="11937" fg:w="447"/><text x="4.9623%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (263 samples, 0.10%)</title><rect x="4.7850%" y="357" width="0.1038%" height="15" fill="rgb(235,30,7)" fg:x="12121" fg:w="263"/><text x="5.0350%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (263 samples, 0.10%)</title><rect x="4.7850%" y="341" width="0.1038%" height="15" fill="rgb(250,79,13)" fg:x="12121" fg:w="263"/><text x="5.0350%" y="351.50"></text></g><g><title>project1::solver::types::Lit::var (106 samples, 0.04%)</title><rect x="4.8469%" y="325" width="0.0418%" height="15" fill="rgb(211,146,34)" fg:x="12278" fg:w="106"/><text x="5.0969%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (31 samples, 0.01%)</title><rect x="4.8765%" y="309" width="0.0122%" height="15" fill="rgb(228,22,38)" fg:x="12353" fg:w="31"/><text x="5.1265%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (655 samples, 0.26%)</title><rect x="4.6334%" y="421" width="0.2586%" height="15" fill="rgb(235,168,5)" fg:x="11737" fg:w="655"/><text x="4.8834%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (657 samples, 0.26%)</title><rect x="4.6334%" y="469" width="0.2594%" height="15" fill="rgb(221,155,16)" fg:x="11737" fg:w="657"/><text x="4.8834%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (657 samples, 0.26%)</title><rect x="4.6334%" y="453" width="0.2594%" height="15" fill="rgb(215,215,53)" fg:x="11737" fg:w="657"/><text x="4.8834%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (657 samples, 0.26%)</title><rect x="4.6334%" y="437" width="0.2594%" height="15" fill="rgb(223,4,10)" fg:x="11737" fg:w="657"/><text x="4.8834%" y="447.50"></text></g><g><title>core::mem::take (28 samples, 0.01%)</title><rect x="4.9010%" y="469" width="0.0111%" height="15" fill="rgb(234,103,6)" fg:x="12415" fg:w="28"/><text x="5.1510%" y="479.50"></text></g><g><title>core::mem::replace (28 samples, 0.01%)</title><rect x="4.9010%" y="453" width="0.0111%" height="15" fill="rgb(227,97,0)" fg:x="12415" fg:w="28"/><text x="5.1510%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (50 samples, 0.02%)</title><rect x="4.9121%" y="437" width="0.0197%" height="15" fill="rgb(234,150,53)" fg:x="12443" fg:w="50"/><text x="5.1621%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (50 samples, 0.02%)</title><rect x="4.9121%" y="421" width="0.0197%" height="15" fill="rgb(228,201,54)" fg:x="12443" fg:w="50"/><text x="5.1621%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (131 samples, 0.05%)</title><rect x="4.9121%" y="469" width="0.0517%" height="15" fill="rgb(222,22,37)" fg:x="12443" fg:w="131"/><text x="5.1621%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (131 samples, 0.05%)</title><rect x="4.9121%" y="453" width="0.0517%" height="15" fill="rgb(237,53,32)" fg:x="12443" fg:w="131"/><text x="5.1621%" y="463.50"></text></g><g><title>project1::solver::types::Lit::var (81 samples, 0.03%)</title><rect x="4.9318%" y="437" width="0.0320%" height="15" fill="rgb(233,25,53)" fg:x="12493" fg:w="81"/><text x="5.1818%" y="447.50"></text></g><g><title>_int_free (172 samples, 0.07%)</title><rect x="4.9717%" y="341" width="0.0679%" height="15" fill="rgb(210,40,34)" fg:x="12594" fg:w="172"/><text x="5.2217%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (210 samples, 0.08%)</title><rect x="4.9650%" y="421" width="0.0829%" height="15" fill="rgb(241,220,44)" fg:x="12577" fg:w="210"/><text x="5.2150%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (210 samples, 0.08%)</title><rect x="4.9650%" y="405" width="0.0829%" height="15" fill="rgb(235,28,35)" fg:x="12577" fg:w="210"/><text x="5.2150%" y="415.50"></text></g><g><title>__rdl_dealloc (210 samples, 0.08%)</title><rect x="4.9650%" y="389" width="0.0829%" height="15" fill="rgb(210,56,17)" fg:x="12577" fg:w="210"/><text x="5.2150%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (210 samples, 0.08%)</title><rect x="4.9650%" y="373" width="0.0829%" height="15" fill="rgb(224,130,29)" fg:x="12577" fg:w="210"/><text x="5.2150%" y="383.50"></text></g><g><title>__GI___libc_free (210 samples, 0.08%)</title><rect x="4.9650%" y="357" width="0.0829%" height="15" fill="rgb(235,212,8)" fg:x="12577" fg:w="210"/><text x="5.2150%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (215 samples, 0.08%)</title><rect x="4.9642%" y="469" width="0.0849%" height="15" fill="rgb(223,33,50)" fg:x="12575" fg:w="215"/><text x="5.2142%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (215 samples, 0.08%)</title><rect x="4.9642%" y="453" width="0.0849%" height="15" fill="rgb(219,149,13)" fg:x="12575" fg:w="215"/><text x="5.2142%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (215 samples, 0.08%)</title><rect x="4.9642%" y="437" width="0.0849%" height="15" fill="rgb(250,156,29)" fg:x="12575" fg:w="215"/><text x="5.2142%" y="447.50"></text></g><g><title>__memcpy_evex_unaligned_erms (925 samples, 0.37%)</title><rect x="5.0688%" y="437" width="0.3652%" height="15" fill="rgb(216,193,19)" fg:x="12840" fg:w="925"/><text x="5.3188%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (964 samples, 0.38%)</title><rect x="5.0542%" y="469" width="0.3806%" height="15" fill="rgb(216,135,14)" fg:x="12803" fg:w="964"/><text x="5.3042%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (947 samples, 0.37%)</title><rect x="5.0609%" y="453" width="0.3738%" height="15" fill="rgb(241,47,5)" fg:x="12820" fg:w="947"/><text x="5.3109%" y="463.50"></text></g><g><title>log::max_level (358 samples, 0.14%)</title><rect x="5.4359%" y="469" width="0.1413%" height="15" fill="rgb(233,42,35)" fg:x="13770" fg:w="358"/><text x="5.6859%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (358 samples, 0.14%)</title><rect x="5.4359%" y="453" width="0.1413%" height="15" fill="rgb(231,13,6)" fg:x="13770" fg:w="358"/><text x="5.6859%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (358 samples, 0.14%)</title><rect x="5.4359%" y="437" width="0.1413%" height="15" fill="rgb(207,181,40)" fg:x="13770" fg:w="358"/><text x="5.6859%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (137 samples, 0.05%)</title><rect x="5.6613%" y="437" width="0.0541%" height="15" fill="rgb(254,173,49)" fg:x="14341" fg:w="137"/><text x="5.9113%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (42 samples, 0.02%)</title><rect x="5.6988%" y="421" width="0.0166%" height="15" fill="rgb(221,1,38)" fg:x="14436" fg:w="42"/><text x="5.9488%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (42 samples, 0.02%)</title><rect x="5.6988%" y="405" width="0.0166%" height="15" fill="rgb(206,124,46)" fg:x="14436" fg:w="42"/><text x="5.9488%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (206 samples, 0.08%)</title><rect x="5.6613%" y="453" width="0.0813%" height="15" fill="rgb(249,21,11)" fg:x="14341" fg:w="206"/><text x="5.9113%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (69 samples, 0.03%)</title><rect x="5.7154%" y="437" width="0.0272%" height="15" fill="rgb(222,201,40)" fg:x="14478" fg:w="69"/><text x="5.9654%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (69 samples, 0.03%)</title><rect x="5.7154%" y="421" width="0.0272%" height="15" fill="rgb(235,61,29)" fg:x="14478" fg:w="69"/><text x="5.9654%" y="431.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (472 samples, 0.19%)</title><rect x="5.5772%" y="469" width="0.1863%" height="15" fill="rgb(219,207,3)" fg:x="14128" fg:w="472"/><text x="5.8272%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (53 samples, 0.02%)</title><rect x="5.7427%" y="453" width="0.0209%" height="15" fill="rgb(222,56,46)" fg:x="14547" fg:w="53"/><text x="5.9927%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (65 samples, 0.03%)</title><rect x="6.0044%" y="421" width="0.0257%" height="15" fill="rgb(239,76,54)" fg:x="15210" fg:w="65"/><text x="6.2544%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (65 samples, 0.03%)</title><rect x="6.0044%" y="405" width="0.0257%" height="15" fill="rgb(231,124,27)" fg:x="15210" fg:w="65"/><text x="6.2544%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (102 samples, 0.04%)</title><rect x="5.9902%" y="437" width="0.0403%" height="15" fill="rgb(249,195,6)" fg:x="15174" fg:w="102"/><text x="6.2402%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (124 samples, 0.05%)</title><rect x="5.9902%" y="453" width="0.0490%" height="15" fill="rgb(237,174,47)" fg:x="15174" fg:w="124"/><text x="6.2402%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (48 samples, 0.02%)</title><rect x="6.0391%" y="453" width="0.0189%" height="15" fill="rgb(206,201,31)" fg:x="15298" fg:w="48"/><text x="6.2891%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (48 samples, 0.02%)</title><rect x="6.0391%" y="437" width="0.0189%" height="15" fill="rgb(231,57,52)" fg:x="15298" fg:w="48"/><text x="6.2891%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (37 samples, 0.01%)</title><rect x="6.0435%" y="421" width="0.0146%" height="15" fill="rgb(248,177,22)" fg:x="15309" fg:w="37"/><text x="6.2935%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (37 samples, 0.01%)</title><rect x="6.0435%" y="405" width="0.0146%" height="15" fill="rgb(215,211,37)" fg:x="15309" fg:w="37"/><text x="6.2935%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (45 samples, 0.02%)</title><rect x="6.0581%" y="453" width="0.0178%" height="15" fill="rgb(241,128,51)" fg:x="15346" fg:w="45"/><text x="6.3081%" y="463.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (45 samples, 0.02%)</title><rect x="6.0581%" y="437" width="0.0178%" height="15" fill="rgb(227,165,31)" fg:x="15346" fg:w="45"/><text x="6.3081%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (45 samples, 0.02%)</title><rect x="6.0581%" y="421" width="0.0178%" height="15" fill="rgb(228,167,24)" fg:x="15346" fg:w="45"/><text x="6.3081%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (159 samples, 0.06%)</title><rect x="6.0758%" y="453" width="0.0628%" height="15" fill="rgb(228,143,12)" fg:x="15391" fg:w="159"/><text x="6.3258%" y="463.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (159 samples, 0.06%)</title><rect x="6.0758%" y="437" width="0.0628%" height="15" fill="rgb(249,149,8)" fg:x="15391" fg:w="159"/><text x="6.3258%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::MulAssign&lt;T&gt;&gt;::mul_assign (38 samples, 0.02%)</title><rect x="6.1386%" y="453" width="0.0150%" height="15" fill="rgb(243,35,44)" fg:x="15550" fg:w="38"/><text x="6.3886%" y="463.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (38 samples, 0.02%)</title><rect x="6.1386%" y="437" width="0.0150%" height="15" fill="rgb(246,89,9)" fg:x="15550" fg:w="38"/><text x="6.3886%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (341 samples, 0.13%)</title><rect x="6.1536%" y="453" width="0.1346%" height="15" fill="rgb(233,213,13)" fg:x="15588" fg:w="341"/><text x="6.4036%" y="463.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (227 samples, 0.09%)</title><rect x="6.1986%" y="437" width="0.0896%" height="15" fill="rgb(233,141,41)" fg:x="15702" fg:w="227"/><text x="6.4486%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 0.03%)</title><rect x="6.3644%" y="245" width="0.0300%" height="15" fill="rgb(239,167,4)" fg:x="16122" fg:w="76"/><text x="6.6144%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (185 samples, 0.07%)</title><rect x="6.3439%" y="261" width="0.0730%" height="15" fill="rgb(209,217,16)" fg:x="16070" fg:w="185"/><text x="6.5939%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (57 samples, 0.02%)</title><rect x="6.3944%" y="245" width="0.0225%" height="15" fill="rgb(219,88,35)" fg:x="16198" fg:w="57"/><text x="6.6444%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (206 samples, 0.08%)</title><rect x="6.4749%" y="245" width="0.0813%" height="15" fill="rgb(220,193,23)" fg:x="16402" fg:w="206"/><text x="6.7249%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (122 samples, 0.05%)</title><rect x="6.5563%" y="245" width="0.0482%" height="15" fill="rgb(230,90,52)" fg:x="16608" fg:w="122"/><text x="6.8063%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (509 samples, 0.20%)</title><rect x="6.4169%" y="261" width="0.2009%" height="15" fill="rgb(252,106,19)" fg:x="16255" fg:w="509"/><text x="6.6669%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (34 samples, 0.01%)</title><rect x="6.6044%" y="245" width="0.0134%" height="15" fill="rgb(206,74,20)" fg:x="16730" fg:w="34"/><text x="6.8544%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (754 samples, 0.30%)</title><rect x="6.3206%" y="309" width="0.2977%" height="15" fill="rgb(230,138,44)" fg:x="16011" fg:w="754"/><text x="6.5706%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (754 samples, 0.30%)</title><rect x="6.3206%" y="293" width="0.2977%" height="15" fill="rgb(235,182,43)" fg:x="16011" fg:w="754"/><text x="6.5706%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (754 samples, 0.30%)</title><rect x="6.3206%" y="277" width="0.2977%" height="15" fill="rgb(242,16,51)" fg:x="16011" fg:w="754"/><text x="6.5706%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (85 samples, 0.03%)</title><rect x="6.6182%" y="309" width="0.0336%" height="15" fill="rgb(248,9,4)" fg:x="16765" fg:w="85"/><text x="6.8682%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (42 samples, 0.02%)</title><rect x="6.6352%" y="293" width="0.0166%" height="15" fill="rgb(210,31,22)" fg:x="16808" fg:w="42"/><text x="6.8852%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (42 samples, 0.02%)</title><rect x="6.6352%" y="277" width="0.0166%" height="15" fill="rgb(239,54,39)" fg:x="16808" fg:w="42"/><text x="6.8852%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (42 samples, 0.02%)</title><rect x="6.6352%" y="261" width="0.0166%" height="15" fill="rgb(230,99,41)" fg:x="16808" fg:w="42"/><text x="6.8852%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (77 samples, 0.03%)</title><rect x="6.6925%" y="181" width="0.0304%" height="15" fill="rgb(253,106,12)" fg:x="16953" fg:w="77"/><text x="6.9425%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (45 samples, 0.02%)</title><rect x="6.7229%" y="181" width="0.0178%" height="15" fill="rgb(213,46,41)" fg:x="17030" fg:w="45"/><text x="6.9729%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,065 samples, 0.42%)</title><rect x="6.3206%" y="341" width="0.4204%" height="15" fill="rgb(215,133,35)" fg:x="16011" fg:w="1065"/><text x="6.5706%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,065 samples, 0.42%)</title><rect x="6.3206%" y="325" width="0.4204%" height="15" fill="rgb(213,28,5)" fg:x="16011" fg:w="1065"/><text x="6.5706%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (226 samples, 0.09%)</title><rect x="6.6518%" y="309" width="0.0892%" height="15" fill="rgb(215,77,49)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (226 samples, 0.09%)</title><rect x="6.6518%" y="293" width="0.0892%" height="15" fill="rgb(248,100,22)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (226 samples, 0.09%)</title><rect x="6.6518%" y="277" width="0.0892%" height="15" fill="rgb(208,67,9)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (226 samples, 0.09%)</title><rect x="6.6518%" y="261" width="0.0892%" height="15" fill="rgb(219,133,21)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (226 samples, 0.09%)</title><rect x="6.6518%" y="245" width="0.0892%" height="15" fill="rgb(246,46,29)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (226 samples, 0.09%)</title><rect x="6.6518%" y="229" width="0.0892%" height="15" fill="rgb(246,185,52)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (226 samples, 0.09%)</title><rect x="6.6518%" y="213" width="0.0892%" height="15" fill="rgb(252,136,11)" fg:x="16850" fg:w="226"/><text x="6.9018%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (124 samples, 0.05%)</title><rect x="6.6921%" y="197" width="0.0490%" height="15" fill="rgb(219,138,53)" fg:x="16952" fg:w="124"/><text x="6.9421%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.03%)</title><rect x="6.7659%" y="293" width="0.0328%" height="15" fill="rgb(211,51,23)" fg:x="17139" fg:w="83"/><text x="7.0159%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (72 samples, 0.03%)</title><rect x="6.7702%" y="277" width="0.0284%" height="15" fill="rgb(247,221,28)" fg:x="17150" fg:w="72"/><text x="7.0202%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (177 samples, 0.07%)</title><rect x="6.7986%" y="277" width="0.0699%" height="15" fill="rgb(251,222,45)" fg:x="17222" fg:w="177"/><text x="7.0486%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (177 samples, 0.07%)</title><rect x="6.7986%" y="261" width="0.0699%" height="15" fill="rgb(217,162,53)" fg:x="17222" fg:w="177"/><text x="7.0486%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (177 samples, 0.07%)</title><rect x="6.7986%" y="245" width="0.0699%" height="15" fill="rgb(229,93,14)" fg:x="17222" fg:w="177"/><text x="7.0486%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (177 samples, 0.07%)</title><rect x="6.7986%" y="229" width="0.0699%" height="15" fill="rgb(209,67,49)" fg:x="17222" fg:w="177"/><text x="7.0486%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (70 samples, 0.03%)</title><rect x="6.8685%" y="229" width="0.0276%" height="15" fill="rgb(213,87,29)" fg:x="17399" fg:w="70"/><text x="7.1185%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (249 samples, 0.10%)</title><rect x="6.7986%" y="293" width="0.0983%" height="15" fill="rgb(205,151,52)" fg:x="17222" fg:w="249"/><text x="7.0486%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (72 samples, 0.03%)</title><rect x="6.8685%" y="277" width="0.0284%" height="15" fill="rgb(253,215,39)" fg:x="17399" fg:w="72"/><text x="7.1185%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (72 samples, 0.03%)</title><rect x="6.8685%" y="261" width="0.0284%" height="15" fill="rgb(221,220,41)" fg:x="17399" fg:w="72"/><text x="7.1185%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (72 samples, 0.03%)</title><rect x="6.8685%" y="245" width="0.0284%" height="15" fill="rgb(218,133,21)" fg:x="17399" fg:w="72"/><text x="7.1185%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (163 samples, 0.06%)</title><rect x="6.8969%" y="293" width="0.0643%" height="15" fill="rgb(221,193,43)" fg:x="17471" fg:w="163"/><text x="7.1469%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (39 samples, 0.02%)</title><rect x="6.9613%" y="293" width="0.0154%" height="15" fill="rgb(240,128,52)" fg:x="17634" fg:w="39"/><text x="7.2113%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (41 samples, 0.02%)</title><rect x="6.9767%" y="293" width="0.0162%" height="15" fill="rgb(253,114,12)" fg:x="17673" fg:w="41"/><text x="7.2267%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (41 samples, 0.02%)</title><rect x="6.9767%" y="277" width="0.0162%" height="15" fill="rgb(215,223,47)" fg:x="17673" fg:w="41"/><text x="7.2267%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.02%)</title><rect x="6.9767%" y="261" width="0.0162%" height="15" fill="rgb(248,225,23)" fg:x="17673" fg:w="41"/><text x="7.2267%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (786 samples, 0.31%)</title><rect x="6.7410%" y="325" width="0.3103%" height="15" fill="rgb(250,108,0)" fg:x="17076" fg:w="786"/><text x="6.9910%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (776 samples, 0.31%)</title><rect x="6.7450%" y="309" width="0.3063%" height="15" fill="rgb(228,208,7)" fg:x="17086" fg:w="776"/><text x="6.9950%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (148 samples, 0.06%)</title><rect x="6.9929%" y="293" width="0.0584%" height="15" fill="rgb(244,45,10)" fg:x="17714" fg:w="148"/><text x="7.2429%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (148 samples, 0.06%)</title><rect x="6.9929%" y="277" width="0.0584%" height="15" fill="rgb(207,125,25)" fg:x="17714" fg:w="148"/><text x="7.2429%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (787 samples, 0.31%)</title><rect x="6.7410%" y="341" width="0.3107%" height="15" fill="rgb(210,195,18)" fg:x="17076" fg:w="787"/><text x="6.9910%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,856 samples, 0.73%)</title><rect x="6.3194%" y="357" width="0.7327%" height="15" fill="rgb(249,80,12)" fg:x="16008" fg:w="1856"/><text x="6.5694%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,900 samples, 0.75%)</title><rect x="6.3194%" y="405" width="0.7501%" height="15" fill="rgb(221,65,9)" fg:x="16008" fg:w="1900"/><text x="6.5694%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,900 samples, 0.75%)</title><rect x="6.3194%" y="389" width="0.7501%" height="15" fill="rgb(235,49,36)" fg:x="16008" fg:w="1900"/><text x="6.5694%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,900 samples, 0.75%)</title><rect x="6.3194%" y="373" width="0.7501%" height="15" fill="rgb(225,32,20)" fg:x="16008" fg:w="1900"/><text x="6.5694%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (44 samples, 0.02%)</title><rect x="7.0521%" y="357" width="0.0174%" height="15" fill="rgb(215,141,46)" fg:x="17864" fg:w="44"/><text x="7.3021%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (101 samples, 0.04%)</title><rect x="7.1105%" y="277" width="0.0399%" height="15" fill="rgb(250,160,47)" fg:x="18012" fg:w="101"/><text x="7.3605%" y="287.50"></text></g><g><title>compare::Compare::compares_ge (116 samples, 0.05%)</title><rect x="7.1105%" y="373" width="0.0458%" height="15" fill="rgb(216,222,40)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (116 samples, 0.05%)</title><rect x="7.1105%" y="357" width="0.0458%" height="15" fill="rgb(234,217,39)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (116 samples, 0.05%)</title><rect x="7.1105%" y="341" width="0.0458%" height="15" fill="rgb(207,178,40)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (116 samples, 0.05%)</title><rect x="7.1105%" y="325" width="0.0458%" height="15" fill="rgb(221,136,13)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (116 samples, 0.05%)</title><rect x="7.1105%" y="309" width="0.0458%" height="15" fill="rgb(249,199,10)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (116 samples, 0.05%)</title><rect x="7.1105%" y="293" width="0.0458%" height="15" fill="rgb(249,222,13)" fg:x="18012" fg:w="116"/><text x="7.3605%" y="303.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (136 samples, 0.05%)</title><rect x="7.1563%" y="357" width="0.0537%" height="15" fill="rgb(244,185,38)" fg:x="18128" fg:w="136"/><text x="7.4063%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (136 samples, 0.05%)</title><rect x="7.1563%" y="341" width="0.0537%" height="15" fill="rgb(236,202,9)" fg:x="18128" fg:w="136"/><text x="7.4063%" y="351.50"></text></g><g><title>compare::Compare::compares_le (168 samples, 0.07%)</title><rect x="7.1563%" y="373" width="0.0663%" height="15" fill="rgb(250,229,37)" fg:x="18128" fg:w="168"/><text x="7.4063%" y="383.50"></text></g><g><title>core::cmp::PartialEq::ne (32 samples, 0.01%)</title><rect x="7.2100%" y="357" width="0.0126%" height="15" fill="rgb(206,174,23)" fg:x="18264" fg:w="32"/><text x="7.4600%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (462 samples, 0.18%)</title><rect x="7.2392%" y="341" width="0.1824%" height="15" fill="rgb(211,33,43)" fg:x="18338" fg:w="462"/><text x="7.4892%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.03%)</title><rect x="7.4824%" y="197" width="0.0296%" height="15" fill="rgb(245,58,50)" fg:x="18954" fg:w="75"/><text x="7.7324%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (190 samples, 0.08%)</title><rect x="7.4658%" y="213" width="0.0750%" height="15" fill="rgb(244,68,36)" fg:x="18912" fg:w="190"/><text x="7.7158%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (73 samples, 0.03%)</title><rect x="7.5120%" y="197" width="0.0288%" height="15" fill="rgb(232,229,15)" fg:x="19029" fg:w="73"/><text x="7.7620%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (208 samples, 0.08%)</title><rect x="7.5866%" y="197" width="0.0821%" height="15" fill="rgb(254,30,23)" fg:x="19218" fg:w="208"/><text x="7.8366%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (425 samples, 0.17%)</title><rect x="7.5408%" y="213" width="0.1678%" height="15" fill="rgb(235,160,14)" fg:x="19102" fg:w="425"/><text x="7.7908%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (101 samples, 0.04%)</title><rect x="7.6687%" y="197" width="0.0399%" height="15" fill="rgb(212,155,44)" fg:x="19426" fg:w="101"/><text x="7.9187%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (693 samples, 0.27%)</title><rect x="7.4358%" y="261" width="0.2736%" height="15" fill="rgb(226,2,50)" fg:x="18836" fg:w="693"/><text x="7.6858%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (693 samples, 0.27%)</title><rect x="7.4358%" y="245" width="0.2736%" height="15" fill="rgb(234,177,6)" fg:x="18836" fg:w="693"/><text x="7.6858%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (693 samples, 0.27%)</title><rect x="7.4358%" y="229" width="0.2736%" height="15" fill="rgb(217,24,9)" fg:x="18836" fg:w="693"/><text x="7.6858%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (78 samples, 0.03%)</title><rect x="7.7094%" y="261" width="0.0308%" height="15" fill="rgb(220,13,46)" fg:x="19529" fg:w="78"/><text x="7.9594%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (43 samples, 0.02%)</title><rect x="7.7232%" y="245" width="0.0170%" height="15" fill="rgb(239,221,27)" fg:x="19564" fg:w="43"/><text x="7.9732%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (43 samples, 0.02%)</title><rect x="7.7232%" y="229" width="0.0170%" height="15" fill="rgb(222,198,25)" fg:x="19564" fg:w="43"/><text x="7.9732%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (43 samples, 0.02%)</title><rect x="7.7232%" y="213" width="0.0170%" height="15" fill="rgb(211,99,13)" fg:x="19564" fg:w="43"/><text x="7.9732%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (43 samples, 0.02%)</title><rect x="7.7856%" y="133" width="0.0170%" height="15" fill="rgb(232,111,31)" fg:x="19722" fg:w="43"/><text x="8.0356%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (942 samples, 0.37%)</title><rect x="7.4358%" y="293" width="0.3719%" height="15" fill="rgb(245,82,37)" fg:x="18836" fg:w="942"/><text x="7.6858%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (942 samples, 0.37%)</title><rect x="7.4358%" y="277" width="0.3719%" height="15" fill="rgb(227,149,46)" fg:x="18836" fg:w="942"/><text x="7.6858%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (171 samples, 0.07%)</title><rect x="7.7402%" y="261" width="0.0675%" height="15" fill="rgb(218,36,50)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (171 samples, 0.07%)</title><rect x="7.7402%" y="245" width="0.0675%" height="15" fill="rgb(226,80,48)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (171 samples, 0.07%)</title><rect x="7.7402%" y="229" width="0.0675%" height="15" fill="rgb(238,224,15)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (171 samples, 0.07%)</title><rect x="7.7402%" y="213" width="0.0675%" height="15" fill="rgb(241,136,10)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 0.07%)</title><rect x="7.7402%" y="197" width="0.0675%" height="15" fill="rgb(208,32,45)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (171 samples, 0.07%)</title><rect x="7.7402%" y="181" width="0.0675%" height="15" fill="rgb(207,135,9)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (171 samples, 0.07%)</title><rect x="7.7402%" y="165" width="0.0675%" height="15" fill="rgb(206,86,44)" fg:x="19607" fg:w="171"/><text x="7.9902%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (103 samples, 0.04%)</title><rect x="7.7670%" y="149" width="0.0407%" height="15" fill="rgb(245,177,15)" fg:x="19675" fg:w="103"/><text x="8.0170%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.04%)</title><rect x="7.8294%" y="245" width="0.0355%" height="15" fill="rgb(206,64,50)" fg:x="19833" fg:w="90"/><text x="8.0794%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (70 samples, 0.03%)</title><rect x="7.8373%" y="229" width="0.0276%" height="15" fill="rgb(234,36,40)" fg:x="19853" fg:w="70"/><text x="8.0873%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (154 samples, 0.06%)</title><rect x="7.8649%" y="229" width="0.0608%" height="15" fill="rgb(213,64,8)" fg:x="19923" fg:w="154"/><text x="8.1149%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (154 samples, 0.06%)</title><rect x="7.8649%" y="213" width="0.0608%" height="15" fill="rgb(210,75,36)" fg:x="19923" fg:w="154"/><text x="8.1149%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (154 samples, 0.06%)</title><rect x="7.8649%" y="197" width="0.0608%" height="15" fill="rgb(229,88,21)" fg:x="19923" fg:w="154"/><text x="8.1149%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (154 samples, 0.06%)</title><rect x="7.8649%" y="181" width="0.0608%" height="15" fill="rgb(252,204,47)" fg:x="19923" fg:w="154"/><text x="8.1149%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (83 samples, 0.03%)</title><rect x="7.9257%" y="181" width="0.0328%" height="15" fill="rgb(208,77,27)" fg:x="20077" fg:w="83"/><text x="8.1757%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (242 samples, 0.10%)</title><rect x="7.8649%" y="245" width="0.0955%" height="15" fill="rgb(221,76,26)" fg:x="19923" fg:w="242"/><text x="8.1149%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (88 samples, 0.03%)</title><rect x="7.9257%" y="229" width="0.0347%" height="15" fill="rgb(225,139,18)" fg:x="20077" fg:w="88"/><text x="8.1757%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (88 samples, 0.03%)</title><rect x="7.9257%" y="213" width="0.0347%" height="15" fill="rgb(230,137,11)" fg:x="20077" fg:w="88"/><text x="8.1757%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (88 samples, 0.03%)</title><rect x="7.9257%" y="197" width="0.0347%" height="15" fill="rgb(212,28,1)" fg:x="20077" fg:w="88"/><text x="8.1757%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (117 samples, 0.05%)</title><rect x="7.9604%" y="245" width="0.0462%" height="15" fill="rgb(248,164,17)" fg:x="20165" fg:w="117"/><text x="8.2104%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (51 samples, 0.02%)</title><rect x="8.0110%" y="245" width="0.0201%" height="15" fill="rgb(222,171,42)" fg:x="20293" fg:w="51"/><text x="8.2610%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (51 samples, 0.02%)</title><rect x="8.0110%" y="229" width="0.0201%" height="15" fill="rgb(243,84,45)" fg:x="20293" fg:w="51"/><text x="8.2610%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.02%)</title><rect x="8.0110%" y="213" width="0.0201%" height="15" fill="rgb(252,49,23)" fg:x="20293" fg:w="51"/><text x="8.2610%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (692 samples, 0.27%)</title><rect x="7.8077%" y="261" width="0.2732%" height="15" fill="rgb(215,19,7)" fg:x="19778" fg:w="692"/><text x="8.0577%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (126 samples, 0.05%)</title><rect x="8.0311%" y="245" width="0.0497%" height="15" fill="rgb(238,81,41)" fg:x="20344" fg:w="126"/><text x="8.2811%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (126 samples, 0.05%)</title><rect x="8.0311%" y="229" width="0.0497%" height="15" fill="rgb(210,199,37)" fg:x="20344" fg:w="126"/><text x="8.2811%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2,173 samples, 0.86%)</title><rect x="7.2250%" y="373" width="0.8578%" height="15" fill="rgb(244,192,49)" fg:x="18302" fg:w="2173"/><text x="7.4750%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2,173 samples, 0.86%)</title><rect x="7.2250%" y="357" width="0.8578%" height="15" fill="rgb(226,211,11)" fg:x="18302" fg:w="2173"/><text x="7.4750%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,654 samples, 0.65%)</title><rect x="7.4299%" y="341" width="0.6529%" height="15" fill="rgb(236,162,54)" fg:x="18821" fg:w="1654"/><text x="7.6799%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,654 samples, 0.65%)</title><rect x="7.4299%" y="325" width="0.6529%" height="15" fill="rgb(220,229,9)" fg:x="18821" fg:w="1654"/><text x="7.6799%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,654 samples, 0.65%)</title><rect x="7.4299%" y="309" width="0.6529%" height="15" fill="rgb(250,87,22)" fg:x="18821" fg:w="1654"/><text x="7.6799%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (697 samples, 0.28%)</title><rect x="7.8077%" y="293" width="0.2752%" height="15" fill="rgb(239,43,17)" fg:x="19778" fg:w="697"/><text x="8.0577%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (697 samples, 0.28%)</title><rect x="7.8077%" y="277" width="0.2752%" height="15" fill="rgb(231,177,25)" fg:x="19778" fg:w="697"/><text x="8.0577%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (2,671 samples, 1.05%)</title><rect x="7.0746%" y="389" width="1.0544%" height="15" fill="rgb(219,179,1)" fg:x="17921" fg:w="2671"/><text x="7.3246%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (117 samples, 0.05%)</title><rect x="8.0828%" y="373" width="0.0462%" height="15" fill="rgb(238,219,53)" fg:x="20475" fg:w="117"/><text x="8.3328%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (2,733 samples, 1.08%)</title><rect x="7.0702%" y="405" width="1.0789%" height="15" fill="rgb(232,167,36)" fg:x="17910" fg:w="2733"/><text x="7.3202%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (51 samples, 0.02%)</title><rect x="8.1290%" y="389" width="0.0201%" height="15" fill="rgb(244,19,51)" fg:x="20592" fg:w="51"/><text x="8.3790%" y="399.50"></text></g><g><title>compare::Compare::compares_le (344 samples, 0.14%)</title><rect x="8.1985%" y="389" width="0.1358%" height="15" fill="rgb(224,6,22)" fg:x="20768" fg:w="344"/><text x="8.4485%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (344 samples, 0.14%)</title><rect x="8.1985%" y="373" width="0.1358%" height="15" fill="rgb(224,145,5)" fg:x="20768" fg:w="344"/><text x="8.4485%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (344 samples, 0.14%)</title><rect x="8.1985%" y="357" width="0.1358%" height="15" fill="rgb(234,130,49)" fg:x="20768" fg:w="344"/><text x="8.4485%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (63 samples, 0.02%)</title><rect x="8.3094%" y="341" width="0.0249%" height="15" fill="rgb(254,6,2)" fg:x="21049" fg:w="63"/><text x="8.5594%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (63 samples, 0.02%)</title><rect x="8.3094%" y="325" width="0.0249%" height="15" fill="rgb(208,96,46)" fg:x="21049" fg:w="63"/><text x="8.5594%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (63 samples, 0.02%)</title><rect x="8.3094%" y="309" width="0.0249%" height="15" fill="rgb(239,3,39)" fg:x="21049" fg:w="63"/><text x="8.5594%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (63 samples, 0.02%)</title><rect x="8.3094%" y="293" width="0.0249%" height="15" fill="rgb(233,210,1)" fg:x="21049" fg:w="63"/><text x="8.5594%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (287 samples, 0.11%)</title><rect x="8.3426%" y="357" width="0.1133%" height="15" fill="rgb(244,137,37)" fg:x="21133" fg:w="287"/><text x="8.5926%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (42 samples, 0.02%)</title><rect x="8.5155%" y="213" width="0.0166%" height="15" fill="rgb(240,136,2)" fg:x="21571" fg:w="42"/><text x="8.7655%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.01%)</title><rect x="8.5321%" y="213" width="0.0134%" height="15" fill="rgb(239,18,37)" fg:x="21613" fg:w="34"/><text x="8.7821%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (107 samples, 0.04%)</title><rect x="8.5036%" y="229" width="0.0422%" height="15" fill="rgb(218,185,22)" fg:x="21541" fg:w="107"/><text x="8.7536%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (205 samples, 0.08%)</title><rect x="8.5929%" y="213" width="0.0809%" height="15" fill="rgb(225,218,4)" fg:x="21767" fg:w="205"/><text x="8.8429%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (405 samples, 0.16%)</title><rect x="8.5459%" y="229" width="0.1599%" height="15" fill="rgb(230,182,32)" fg:x="21648" fg:w="405"/><text x="8.7959%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (81 samples, 0.03%)</title><rect x="8.6738%" y="213" width="0.0320%" height="15" fill="rgb(242,56,43)" fg:x="21972" fg:w="81"/><text x="8.9238%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (619 samples, 0.24%)</title><rect x="8.4618%" y="277" width="0.2444%" height="15" fill="rgb(233,99,24)" fg:x="21435" fg:w="619"/><text x="8.7118%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (619 samples, 0.24%)</title><rect x="8.4618%" y="261" width="0.2444%" height="15" fill="rgb(234,209,42)" fg:x="21435" fg:w="619"/><text x="8.7118%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (619 samples, 0.24%)</title><rect x="8.4618%" y="245" width="0.2444%" height="15" fill="rgb(227,7,12)" fg:x="21435" fg:w="619"/><text x="8.7118%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (41 samples, 0.02%)</title><rect x="8.7062%" y="277" width="0.0162%" height="15" fill="rgb(245,203,43)" fg:x="22054" fg:w="41"/><text x="8.9562%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (86 samples, 0.03%)</title><rect x="8.7827%" y="149" width="0.0339%" height="15" fill="rgb(238,205,33)" fg:x="22248" fg:w="86"/><text x="9.0327%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (133 samples, 0.05%)</title><rect x="8.7673%" y="165" width="0.0525%" height="15" fill="rgb(231,56,7)" fg:x="22209" fg:w="133"/><text x="9.0173%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (908 samples, 0.36%)</title><rect x="8.4618%" y="309" width="0.3584%" height="15" fill="rgb(244,186,29)" fg:x="21435" fg:w="908"/><text x="8.7118%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (908 samples, 0.36%)</title><rect x="8.4618%" y="293" width="0.3584%" height="15" fill="rgb(234,111,31)" fg:x="21435" fg:w="908"/><text x="8.7118%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (248 samples, 0.10%)</title><rect x="8.7223%" y="277" width="0.0979%" height="15" fill="rgb(241,149,10)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (248 samples, 0.10%)</title><rect x="8.7223%" y="261" width="0.0979%" height="15" fill="rgb(249,206,44)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (248 samples, 0.10%)</title><rect x="8.7223%" y="245" width="0.0979%" height="15" fill="rgb(251,153,30)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (248 samples, 0.10%)</title><rect x="8.7223%" y="229" width="0.0979%" height="15" fill="rgb(239,152,38)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (248 samples, 0.10%)</title><rect x="8.7223%" y="213" width="0.0979%" height="15" fill="rgb(249,139,47)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (248 samples, 0.10%)</title><rect x="8.7223%" y="197" width="0.0979%" height="15" fill="rgb(244,64,35)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (248 samples, 0.10%)</title><rect x="8.7223%" y="181" width="0.0979%" height="15" fill="rgb(216,46,15)" fg:x="22095" fg:w="248"/><text x="8.9723%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.03%)</title><rect x="8.8380%" y="261" width="0.0288%" height="15" fill="rgb(250,74,19)" fg:x="22388" fg:w="73"/><text x="9.0880%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (43 samples, 0.02%)</title><rect x="8.8499%" y="245" width="0.0170%" height="15" fill="rgb(249,42,33)" fg:x="22418" fg:w="43"/><text x="9.0999%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (214 samples, 0.08%)</title><rect x="8.8668%" y="245" width="0.0845%" height="15" fill="rgb(242,149,17)" fg:x="22461" fg:w="214"/><text x="9.1168%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (214 samples, 0.08%)</title><rect x="8.8668%" y="229" width="0.0845%" height="15" fill="rgb(244,29,21)" fg:x="22461" fg:w="214"/><text x="9.1168%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (214 samples, 0.08%)</title><rect x="8.8668%" y="213" width="0.0845%" height="15" fill="rgb(220,130,37)" fg:x="22461" fg:w="214"/><text x="9.1168%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (214 samples, 0.08%)</title><rect x="8.8668%" y="197" width="0.0845%" height="15" fill="rgb(211,67,2)" fg:x="22461" fg:w="214"/><text x="9.1168%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (71 samples, 0.03%)</title><rect x="8.9513%" y="197" width="0.0280%" height="15" fill="rgb(235,68,52)" fg:x="22675" fg:w="71"/><text x="9.2013%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (289 samples, 0.11%)</title><rect x="8.8668%" y="261" width="0.1141%" height="15" fill="rgb(246,142,3)" fg:x="22461" fg:w="289"/><text x="9.1168%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (75 samples, 0.03%)</title><rect x="8.9513%" y="245" width="0.0296%" height="15" fill="rgb(241,25,7)" fg:x="22675" fg:w="75"/><text x="9.2013%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (75 samples, 0.03%)</title><rect x="8.9513%" y="229" width="0.0296%" height="15" fill="rgb(242,119,39)" fg:x="22675" fg:w="75"/><text x="9.2013%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (75 samples, 0.03%)</title><rect x="8.9513%" y="213" width="0.0296%" height="15" fill="rgb(241,98,45)" fg:x="22675" fg:w="75"/><text x="9.2013%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (47 samples, 0.02%)</title><rect x="8.9809%" y="261" width="0.0186%" height="15" fill="rgb(254,28,30)" fg:x="22750" fg:w="47"/><text x="9.2309%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (29 samples, 0.01%)</title><rect x="8.9995%" y="261" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="22797" fg:w="29"/><text x="9.2495%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (29 samples, 0.01%)</title><rect x="8.9995%" y="245" width="0.0114%" height="15" fill="rgb(222,85,15)" fg:x="22797" fg:w="29"/><text x="9.2495%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.01%)</title><rect x="8.9995%" y="229" width="0.0114%" height="15" fill="rgb(210,85,47)" fg:x="22797" fg:w="29"/><text x="9.2495%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (111 samples, 0.04%)</title><rect x="9.0109%" y="261" width="0.0438%" height="15" fill="rgb(224,206,25)" fg:x="22826" fg:w="111"/><text x="9.2609%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (111 samples, 0.04%)</title><rect x="9.0109%" y="245" width="0.0438%" height="15" fill="rgb(243,201,19)" fg:x="22826" fg:w="111"/><text x="9.2609%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (650 samples, 0.26%)</title><rect x="8.8202%" y="277" width="0.2566%" height="15" fill="rgb(236,59,4)" fg:x="22343" fg:w="650"/><text x="9.0702%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (56 samples, 0.02%)</title><rect x="9.0547%" y="261" width="0.0221%" height="15" fill="rgb(254,179,45)" fg:x="22937" fg:w="56"/><text x="9.3047%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (681 samples, 0.27%)</title><rect x="8.8202%" y="293" width="0.2688%" height="15" fill="rgb(226,14,10)" fg:x="22343" fg:w="681"/><text x="9.0702%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (31 samples, 0.01%)</title><rect x="9.0768%" y="277" width="0.0122%" height="15" fill="rgb(244,27,41)" fg:x="22993" fg:w="31"/><text x="9.3268%" y="287.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,913 samples, 0.76%)</title><rect x="8.3343%" y="373" width="0.7552%" height="15" fill="rgb(235,35,32)" fg:x="21112" fg:w="1913"/><text x="8.5843%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,599 samples, 0.63%)</title><rect x="8.4582%" y="357" width="0.6312%" height="15" fill="rgb(218,68,31)" fg:x="21426" fg:w="1599"/><text x="8.7082%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,599 samples, 0.63%)</title><rect x="8.4582%" y="341" width="0.6312%" height="15" fill="rgb(207,120,37)" fg:x="21426" fg:w="1599"/><text x="8.7082%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,599 samples, 0.63%)</title><rect x="8.4582%" y="325" width="0.6312%" height="15" fill="rgb(227,98,0)" fg:x="21426" fg:w="1599"/><text x="8.7082%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (682 samples, 0.27%)</title><rect x="8.8202%" y="309" width="0.2692%" height="15" fill="rgb(207,7,3)" fg:x="22343" fg:w="682"/><text x="9.0702%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,946 samples, 0.77%)</title><rect x="8.3343%" y="389" width="0.7682%" height="15" fill="rgb(206,98,19)" fg:x="21112" fg:w="1946"/><text x="8.5843%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (33 samples, 0.01%)</title><rect x="9.0895%" y="373" width="0.0130%" height="15" fill="rgb(217,5,26)" fg:x="23025" fg:w="33"/><text x="9.3395%" y="383.50"></text></g><g><title>core::ptr::read (119 samples, 0.05%)</title><rect x="9.1400%" y="373" width="0.0470%" height="15" fill="rgb(235,190,38)" fg:x="23153" fg:w="119"/><text x="9.3900%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2,650 samples, 1.05%)</title><rect x="8.1491%" y="405" width="1.0461%" height="15" fill="rgb(247,86,24)" fg:x="20643" fg:w="2650"/><text x="8.3991%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (235 samples, 0.09%)</title><rect x="9.1025%" y="389" width="0.0928%" height="15" fill="rgb(205,101,16)" fg:x="23058" fg:w="235"/><text x="9.3525%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (7,429 samples, 2.93%)</title><rect x="6.2882%" y="453" width="2.9327%" height="15" fill="rgb(246,168,33)" fg:x="15929" fg:w="7429"/><text x="6.5382%" y="463.50">co..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (7,429 samples, 2.93%)</title><rect x="6.2882%" y="437" width="2.9327%" height="15" fill="rgb(231,114,1)" fg:x="15929" fg:w="7429"/><text x="6.5382%" y="447.50">&lt;m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (7,398 samples, 2.92%)</title><rect x="6.3005%" y="421" width="2.9205%" height="15" fill="rgb(207,184,53)" fg:x="15960" fg:w="7398"/><text x="6.5505%" y="431.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (65 samples, 0.03%)</title><rect x="9.1953%" y="405" width="0.0257%" height="15" fill="rgb(224,95,51)" fg:x="23293" fg:w="65"/><text x="9.4453%" y="415.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (42 samples, 0.02%)</title><rect x="9.2209%" y="437" width="0.0166%" height="15" fill="rgb(212,188,45)" fg:x="23358" fg:w="42"/><text x="9.4709%" y="447.50"></text></g><g><title>log::__private_api::log (130 samples, 0.05%)</title><rect x="9.2209%" y="453" width="0.0513%" height="15" fill="rgb(223,154,38)" fg:x="23358" fg:w="130"/><text x="9.4709%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (88 samples, 0.03%)</title><rect x="9.2375%" y="437" width="0.0347%" height="15" fill="rgb(251,22,52)" fg:x="23400" fg:w="88"/><text x="9.4875%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (199 samples, 0.08%)</title><rect x="9.4128%" y="293" width="0.0786%" height="15" fill="rgb(229,209,22)" fg:x="23844" fg:w="199"/><text x="9.6628%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (415 samples, 0.16%)</title><rect x="9.3713%" y="309" width="0.1638%" height="15" fill="rgb(234,138,34)" fg:x="23739" fg:w="415"/><text x="9.6213%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (111 samples, 0.04%)</title><rect x="9.4913%" y="293" width="0.0438%" height="15" fill="rgb(212,95,11)" fg:x="24043" fg:w="111"/><text x="9.7413%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (592 samples, 0.23%)</title><rect x="9.6583%" y="293" width="0.2337%" height="15" fill="rgb(240,179,47)" fg:x="24466" fg:w="592"/><text x="9.9083%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,210 samples, 0.48%)</title><rect x="9.5352%" y="309" width="0.4777%" height="15" fill="rgb(240,163,11)" fg:x="24154" fg:w="1210"/><text x="9.7852%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (306 samples, 0.12%)</title><rect x="9.8920%" y="293" width="0.1208%" height="15" fill="rgb(236,37,12)" fg:x="25058" fg:w="306"/><text x="10.1420%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,809 samples, 0.71%)</title><rect x="9.2995%" y="357" width="0.7141%" height="15" fill="rgb(232,164,16)" fg:x="23557" fg:w="1809"/><text x="9.5495%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,809 samples, 0.71%)</title><rect x="9.2995%" y="341" width="0.7141%" height="15" fill="rgb(244,205,15)" fg:x="23557" fg:w="1809"/><text x="9.5495%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,809 samples, 0.71%)</title><rect x="9.2995%" y="325" width="0.7141%" height="15" fill="rgb(223,117,47)" fg:x="23557" fg:w="1809"/><text x="9.5495%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (275 samples, 0.11%)</title><rect x="10.0136%" y="357" width="0.1086%" height="15" fill="rgb(244,107,35)" fg:x="25366" fg:w="275"/><text x="10.2636%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (196 samples, 0.08%)</title><rect x="10.0448%" y="341" width="0.0774%" height="15" fill="rgb(205,140,8)" fg:x="25445" fg:w="196"/><text x="10.2948%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (196 samples, 0.08%)</title><rect x="10.0448%" y="325" width="0.0774%" height="15" fill="rgb(228,84,46)" fg:x="25445" fg:w="196"/><text x="10.2948%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (196 samples, 0.08%)</title><rect x="10.0448%" y="309" width="0.0774%" height="15" fill="rgb(254,188,9)" fg:x="25445" fg:w="196"/><text x="10.2948%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (158 samples, 0.06%)</title><rect x="10.2386%" y="229" width="0.0624%" height="15" fill="rgb(206,112,54)" fg:x="25936" fg:w="158"/><text x="10.4886%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (346 samples, 0.14%)</title><rect x="10.1948%" y="245" width="0.1366%" height="15" fill="rgb(216,84,49)" fg:x="25825" fg:w="346"/><text x="10.4448%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (77 samples, 0.03%)</title><rect x="10.3010%" y="229" width="0.0304%" height="15" fill="rgb(214,194,35)" fg:x="26094" fg:w="77"/><text x="10.5510%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (2,616 samples, 1.03%)</title><rect x="9.2995%" y="389" width="1.0327%" height="15" fill="rgb(249,28,3)" fg:x="23557" fg:w="2616"/><text x="9.5495%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,616 samples, 1.03%)</title><rect x="9.2995%" y="373" width="1.0327%" height="15" fill="rgb(222,56,52)" fg:x="23557" fg:w="2616"/><text x="9.5495%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (532 samples, 0.21%)</title><rect x="10.1222%" y="357" width="0.2100%" height="15" fill="rgb(245,217,50)" fg:x="25641" fg:w="532"/><text x="10.3722%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (532 samples, 0.21%)</title><rect x="10.1222%" y="341" width="0.2100%" height="15" fill="rgb(213,201,24)" fg:x="25641" fg:w="532"/><text x="10.3722%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (501 samples, 0.20%)</title><rect x="10.1344%" y="325" width="0.1978%" height="15" fill="rgb(248,116,28)" fg:x="25672" fg:w="501"/><text x="10.3844%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (501 samples, 0.20%)</title><rect x="10.1344%" y="309" width="0.1978%" height="15" fill="rgb(219,72,43)" fg:x="25672" fg:w="501"/><text x="10.3844%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (501 samples, 0.20%)</title><rect x="10.1344%" y="293" width="0.1978%" height="15" fill="rgb(209,138,14)" fg:x="25672" fg:w="501"/><text x="10.3844%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (501 samples, 0.20%)</title><rect x="10.1344%" y="277" width="0.1978%" height="15" fill="rgb(222,18,33)" fg:x="25672" fg:w="501"/><text x="10.3844%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (501 samples, 0.20%)</title><rect x="10.1344%" y="261" width="0.1978%" height="15" fill="rgb(213,199,7)" fg:x="25672" fg:w="501"/><text x="10.3844%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (494 samples, 0.20%)</title><rect x="10.4313%" y="341" width="0.1950%" height="15" fill="rgb(250,110,10)" fg:x="26424" fg:w="494"/><text x="10.6813%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (493 samples, 0.19%)</title><rect x="10.4317%" y="325" width="0.1946%" height="15" fill="rgb(248,123,6)" fg:x="26425" fg:w="493"/><text x="10.6817%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (637 samples, 0.25%)</title><rect x="10.6295%" y="341" width="0.2515%" height="15" fill="rgb(206,91,31)" fg:x="26926" fg:w="637"/><text x="10.8795%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (637 samples, 0.25%)</title><rect x="10.6295%" y="325" width="0.2515%" height="15" fill="rgb(211,154,13)" fg:x="26926" fg:w="637"/><text x="10.8795%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (637 samples, 0.25%)</title><rect x="10.6295%" y="309" width="0.2515%" height="15" fill="rgb(225,148,7)" fg:x="26926" fg:w="637"/><text x="10.8795%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (637 samples, 0.25%)</title><rect x="10.6295%" y="293" width="0.2515%" height="15" fill="rgb(220,160,43)" fg:x="26926" fg:w="637"/><text x="10.8795%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (637 samples, 0.25%)</title><rect x="10.6295%" y="277" width="0.2515%" height="15" fill="rgb(213,52,39)" fg:x="26926" fg:w="637"/><text x="10.8795%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (411 samples, 0.16%)</title><rect x="10.8809%" y="341" width="0.1622%" height="15" fill="rgb(243,137,7)" fg:x="27563" fg:w="411"/><text x="11.1309%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (98 samples, 0.04%)</title><rect x="11.0495%" y="341" width="0.0387%" height="15" fill="rgb(230,79,13)" fg:x="27990" fg:w="98"/><text x="11.2995%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (340 samples, 0.13%)</title><rect x="11.0882%" y="341" width="0.1342%" height="15" fill="rgb(247,105,23)" fg:x="28088" fg:w="340"/><text x="11.3382%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (340 samples, 0.13%)</title><rect x="11.0882%" y="325" width="0.1342%" height="15" fill="rgb(223,179,41)" fg:x="28088" fg:w="340"/><text x="11.3382%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (340 samples, 0.13%)</title><rect x="11.0882%" y="309" width="0.1342%" height="15" fill="rgb(218,9,34)" fg:x="28088" fg:w="340"/><text x="11.3382%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (533 samples, 0.21%)</title><rect x="11.2224%" y="341" width="0.2104%" height="15" fill="rgb(222,106,8)" fg:x="28428" fg:w="533"/><text x="11.4724%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (533 samples, 0.21%)</title><rect x="11.2224%" y="325" width="0.2104%" height="15" fill="rgb(211,220,0)" fg:x="28428" fg:w="533"/><text x="11.4724%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (659 samples, 0.26%)</title><rect x="11.4328%" y="341" width="0.2602%" height="15" fill="rgb(229,52,16)" fg:x="28961" fg:w="659"/><text x="11.6828%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (659 samples, 0.26%)</title><rect x="11.4328%" y="325" width="0.2602%" height="15" fill="rgb(212,155,18)" fg:x="28961" fg:w="659"/><text x="11.6828%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (659 samples, 0.26%)</title><rect x="11.4328%" y="309" width="0.2602%" height="15" fill="rgb(242,21,14)" fg:x="28961" fg:w="659"/><text x="11.6828%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,483 samples, 1.37%)</title><rect x="10.3322%" y="357" width="1.3750%" height="15" fill="rgb(222,19,48)" fg:x="26173" fg:w="3483"/><text x="10.5822%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (36 samples, 0.01%)</title><rect x="11.6930%" y="341" width="0.0142%" height="15" fill="rgb(232,45,27)" fg:x="29620" fg:w="36"/><text x="11.9430%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (6,268 samples, 2.47%)</title><rect x="9.2722%" y="453" width="2.4744%" height="15" fill="rgb(249,103,42)" fg:x="23488" fg:w="6268"/><text x="9.5222%" y="463.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,268 samples, 2.47%)</title><rect x="9.2722%" y="437" width="2.4744%" height="15" fill="rgb(246,81,33)" fg:x="23488" fg:w="6268"/><text x="9.5222%" y="447.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,268 samples, 2.47%)</title><rect x="9.2722%" y="421" width="2.4744%" height="15" fill="rgb(252,33,42)" fg:x="23488" fg:w="6268"/><text x="9.5222%" y="431.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,268 samples, 2.47%)</title><rect x="9.2722%" y="405" width="2.4744%" height="15" fill="rgb(209,212,41)" fg:x="23488" fg:w="6268"/><text x="9.5222%" y="415.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,583 samples, 1.41%)</title><rect x="10.3322%" y="389" width="1.4144%" height="15" fill="rgb(207,154,6)" fg:x="26173" fg:w="3583"/><text x="10.5822%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,583 samples, 1.41%)</title><rect x="10.3322%" y="373" width="1.4144%" height="15" fill="rgb(223,64,47)" fg:x="26173" fg:w="3583"/><text x="10.5822%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (100 samples, 0.04%)</title><rect x="11.7072%" y="357" width="0.0395%" height="15" fill="rgb(211,161,38)" fg:x="29656" fg:w="100"/><text x="11.9572%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (15,201 samples, 6.00%)</title><rect x="5.7636%" y="469" width="6.0008%" height="15" fill="rgb(219,138,40)" fg:x="14600" fg:w="15201"/><text x="6.0136%" y="479.50">project1..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (44 samples, 0.02%)</title><rect x="11.7470%" y="453" width="0.0174%" height="15" fill="rgb(241,228,46)" fg:x="29757" fg:w="44"/><text x="11.9970%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (375 samples, 0.15%)</title><rect x="11.9815%" y="373" width="0.1480%" height="15" fill="rgb(223,209,38)" fg:x="30351" fg:w="375"/><text x="12.2315%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (375 samples, 0.15%)</title><rect x="11.9815%" y="357" width="0.1480%" height="15" fill="rgb(236,164,45)" fg:x="30351" fg:w="375"/><text x="12.2315%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (175 samples, 0.07%)</title><rect x="12.6250%" y="341" width="0.0691%" height="15" fill="rgb(231,15,5)" fg:x="31981" fg:w="175"/><text x="12.8750%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (93 samples, 0.04%)</title><rect x="12.6941%" y="325" width="0.0367%" height="15" fill="rgb(252,35,15)" fg:x="32156" fg:w="93"/><text x="12.9441%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (393 samples, 0.16%)</title><rect x="12.6250%" y="357" width="0.1551%" height="15" fill="rgb(248,181,18)" fg:x="31981" fg:w="393"/><text x="12.8750%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (218 samples, 0.09%)</title><rect x="12.6941%" y="341" width="0.0861%" height="15" fill="rgb(233,39,42)" fg:x="32156" fg:w="218"/><text x="12.9441%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (125 samples, 0.05%)</title><rect x="12.7308%" y="325" width="0.0493%" height="15" fill="rgb(238,110,33)" fg:x="32249" fg:w="125"/><text x="12.9808%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (297 samples, 0.12%)</title><rect x="12.7853%" y="357" width="0.1172%" height="15" fill="rgb(233,195,10)" fg:x="32387" fg:w="297"/><text x="13.0353%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (297 samples, 0.12%)</title><rect x="12.7853%" y="341" width="0.1172%" height="15" fill="rgb(254,105,3)" fg:x="32387" fg:w="297"/><text x="13.0353%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (802 samples, 0.32%)</title><rect x="12.9025%" y="325" width="0.3166%" height="15" fill="rgb(221,225,9)" fg:x="32684" fg:w="802"/><text x="13.1525%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (802 samples, 0.32%)</title><rect x="12.9025%" y="309" width="0.3166%" height="15" fill="rgb(224,227,45)" fg:x="32684" fg:w="802"/><text x="13.1525%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (842 samples, 0.33%)</title><rect x="12.9025%" y="357" width="0.3324%" height="15" fill="rgb(229,198,43)" fg:x="32684" fg:w="842"/><text x="13.1525%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (842 samples, 0.33%)</title><rect x="12.9025%" y="341" width="0.3324%" height="15" fill="rgb(206,209,35)" fg:x="32684" fg:w="842"/><text x="13.1525%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (40 samples, 0.02%)</title><rect x="13.2191%" y="325" width="0.0158%" height="15" fill="rgb(245,195,53)" fg:x="33486" fg:w="40"/><text x="13.4691%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (40 samples, 0.02%)</title><rect x="13.2191%" y="309" width="0.0158%" height="15" fill="rgb(240,92,26)" fg:x="33486" fg:w="40"/><text x="13.4691%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (33 samples, 0.01%)</title><rect x="13.2349%" y="357" width="0.0130%" height="15" fill="rgb(207,40,23)" fg:x="33526" fg:w="33"/><text x="13.4849%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (121 samples, 0.05%)</title><rect x="13.2479%" y="357" width="0.0478%" height="15" fill="rgb(223,111,35)" fg:x="33559" fg:w="121"/><text x="13.4979%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (140 samples, 0.06%)</title><rect x="13.2957%" y="357" width="0.0553%" height="15" fill="rgb(229,147,28)" fg:x="33680" fg:w="140"/><text x="13.5457%" y="367.50"></text></g><g><title>core::ptr::read (89 samples, 0.04%)</title><rect x="13.3158%" y="341" width="0.0351%" height="15" fill="rgb(211,29,28)" fg:x="33731" fg:w="89"/><text x="13.5658%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (31 samples, 0.01%)</title><rect x="13.4074%" y="341" width="0.0122%" height="15" fill="rgb(228,72,33)" fg:x="33963" fg:w="31"/><text x="13.6574%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (31 samples, 0.01%)</title><rect x="13.4074%" y="325" width="0.0122%" height="15" fill="rgb(205,214,31)" fg:x="33963" fg:w="31"/><text x="13.6574%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (296 samples, 0.12%)</title><rect x="13.3510%" y="357" width="0.1169%" height="15" fill="rgb(224,111,15)" fg:x="33820" fg:w="296"/><text x="13.6010%" y="367.50"></text></g><g><title>core::ptr::write (121 samples, 0.05%)</title><rect x="13.4201%" y="341" width="0.0478%" height="15" fill="rgb(253,21,26)" fg:x="33995" fg:w="121"/><text x="13.6701%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (51 samples, 0.02%)</title><rect x="13.4678%" y="357" width="0.0201%" height="15" fill="rgb(245,139,43)" fg:x="34116" fg:w="51"/><text x="13.7178%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (438 samples, 0.17%)</title><rect x="13.4907%" y="357" width="0.1729%" height="15" fill="rgb(252,170,7)" fg:x="34174" fg:w="438"/><text x="13.7407%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (101 samples, 0.04%)</title><rect x="13.6652%" y="357" width="0.0399%" height="15" fill="rgb(231,118,14)" fg:x="34616" fg:w="101"/><text x="13.9152%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (101 samples, 0.04%)</title><rect x="13.6652%" y="341" width="0.0399%" height="15" fill="rgb(238,83,0)" fg:x="34616" fg:w="101"/><text x="13.9152%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (101 samples, 0.04%)</title><rect x="13.6652%" y="325" width="0.0399%" height="15" fill="rgb(221,39,39)" fg:x="34616" fg:w="101"/><text x="13.9152%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (88 samples, 0.03%)</title><rect x="13.6703%" y="309" width="0.0347%" height="15" fill="rgb(222,119,46)" fg:x="34629" fg:w="88"/><text x="13.9203%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (88 samples, 0.03%)</title><rect x="13.6703%" y="293" width="0.0347%" height="15" fill="rgb(222,165,49)" fg:x="34629" fg:w="88"/><text x="13.9203%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (248 samples, 0.10%)</title><rect x="13.7051%" y="357" width="0.0979%" height="15" fill="rgb(219,113,52)" fg:x="34717" fg:w="248"/><text x="13.9551%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (248 samples, 0.10%)</title><rect x="13.7051%" y="341" width="0.0979%" height="15" fill="rgb(214,7,15)" fg:x="34717" fg:w="248"/><text x="13.9551%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (47 samples, 0.02%)</title><rect x="13.7844%" y="325" width="0.0186%" height="15" fill="rgb(235,32,4)" fg:x="34918" fg:w="47"/><text x="14.0344%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.02%)</title><rect x="13.7868%" y="309" width="0.0162%" height="15" fill="rgb(238,90,54)" fg:x="34924" fg:w="41"/><text x="14.0368%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.02%)</title><rect x="13.7868%" y="293" width="0.0162%" height="15" fill="rgb(213,208,19)" fg:x="34924" fg:w="41"/><text x="14.0368%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (5,117 samples, 2.02%)</title><rect x="12.1296%" y="373" width="2.0200%" height="15" fill="rgb(233,156,4)" fg:x="30726" fg:w="5117"/><text x="12.3796%" y="383.50">p..</text></g><g><title>project1::solver::types::Lit::var (878 samples, 0.35%)</title><rect x="13.8030%" y="357" width="0.3466%" height="15" fill="rgb(207,194,5)" fg:x="34965" fg:w="878"/><text x="14.0530%" y="367.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (151 samples, 0.06%)</title><rect x="14.0900%" y="341" width="0.0596%" height="15" fill="rgb(206,111,30)" fg:x="35692" fg:w="151"/><text x="14.3400%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (92 samples, 0.04%)</title><rect x="14.1500%" y="341" width="0.0363%" height="15" fill="rgb(243,70,54)" fg:x="35844" fg:w="92"/><text x="14.4000%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (189 samples, 0.07%)</title><rect x="14.1500%" y="373" width="0.0746%" height="15" fill="rgb(242,28,8)" fg:x="35844" fg:w="189"/><text x="14.4000%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (189 samples, 0.07%)</title><rect x="14.1500%" y="357" width="0.0746%" height="15" fill="rgb(219,106,18)" fg:x="35844" fg:w="189"/><text x="14.4000%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (97 samples, 0.04%)</title><rect x="14.1863%" y="341" width="0.0383%" height="15" fill="rgb(244,222,10)" fg:x="35936" fg:w="97"/><text x="14.4363%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (97 samples, 0.04%)</title><rect x="14.1863%" y="325" width="0.0383%" height="15" fill="rgb(236,179,52)" fg:x="35936" fg:w="97"/><text x="14.4363%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (50 samples, 0.02%)</title><rect x="14.2929%" y="357" width="0.0197%" height="15" fill="rgb(213,23,39)" fg:x="36206" fg:w="50"/><text x="14.5429%" y="367.50"></text></g><g><title>project1::solver::types::Lit::var (237 samples, 0.09%)</title><rect x="14.2246%" y="373" width="0.0936%" height="15" fill="rgb(238,48,10)" fg:x="36033" fg:w="237"/><text x="14.4746%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (6,108 samples, 2.41%)</title><rect x="11.9077%" y="389" width="2.4112%" height="15" fill="rgb(251,196,23)" fg:x="30164" fg:w="6108"/><text x="12.1577%" y="399.50">pr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (6,263 samples, 2.47%)</title><rect x="11.9077%" y="405" width="2.4724%" height="15" fill="rgb(250,152,24)" fg:x="30164" fg:w="6263"/><text x="12.1577%" y="415.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (155 samples, 0.06%)</title><rect x="14.3189%" y="389" width="0.0612%" height="15" fill="rgb(209,150,17)" fg:x="36272" fg:w="155"/><text x="14.5689%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (6,874 samples, 2.71%)</title><rect x="11.7644%" y="421" width="2.7136%" height="15" fill="rgb(234,202,34)" fg:x="29801" fg:w="6874"/><text x="12.0144%" y="431.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (248 samples, 0.10%)</title><rect x="14.3801%" y="405" width="0.0979%" height="15" fill="rgb(253,148,53)" fg:x="36427" fg:w="248"/><text x="14.6301%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (6,908 samples, 2.73%)</title><rect x="11.7644%" y="437" width="2.7270%" height="15" fill="rgb(218,129,16)" fg:x="29801" fg:w="6908"/><text x="12.0144%" y="447.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (27 samples, 0.01%)</title><rect x="14.4808%" y="421" width="0.0107%" height="15" fill="rgb(216,85,19)" fg:x="36682" fg:w="27"/><text x="14.7308%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (6,919 samples, 2.73%)</title><rect x="11.7644%" y="453" width="2.7314%" height="15" fill="rgb(235,228,7)" fg:x="29801" fg:w="6919"/><text x="12.0144%" y="463.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (130 samples, 0.05%)</title><rect x="14.5199%" y="405" width="0.0513%" height="15" fill="rgb(245,175,0)" fg:x="36781" fg:w="130"/><text x="14.7699%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (62 samples, 0.02%)</title><rect x="14.5467%" y="389" width="0.0245%" height="15" fill="rgb(208,168,36)" fg:x="36849" fg:w="62"/><text x="14.7967%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (62 samples, 0.02%)</title><rect x="14.5467%" y="373" width="0.0245%" height="15" fill="rgb(246,171,24)" fg:x="36849" fg:w="62"/><text x="14.7967%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (267 samples, 0.11%)</title><rect x="14.4958%" y="437" width="0.1054%" height="15" fill="rgb(215,142,24)" fg:x="36720" fg:w="267"/><text x="14.7458%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (253 samples, 0.10%)</title><rect x="14.5013%" y="421" width="0.0999%" height="15" fill="rgb(250,187,7)" fg:x="36734" fg:w="253"/><text x="14.7513%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (76 samples, 0.03%)</title><rect x="14.5712%" y="405" width="0.0300%" height="15" fill="rgb(228,66,33)" fg:x="36911" fg:w="76"/><text x="14.8212%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (45 samples, 0.02%)</title><rect x="14.5834%" y="389" width="0.0178%" height="15" fill="rgb(234,215,21)" fg:x="36942" fg:w="45"/><text x="14.8334%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (7,195 samples, 2.84%)</title><rect x="11.7644%" y="469" width="2.8403%" height="15" fill="rgb(222,191,20)" fg:x="29801" fg:w="7195"/><text x="12.0144%" y="479.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (276 samples, 0.11%)</title><rect x="14.4958%" y="453" width="0.1090%" height="15" fill="rgb(245,79,54)" fg:x="36720" fg:w="276"/><text x="14.7458%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (246 samples, 0.10%)</title><rect x="14.8179%" y="421" width="0.0971%" height="15" fill="rgb(240,10,37)" fg:x="37536" fg:w="246"/><text x="15.0679%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (51 samples, 0.02%)</title><rect x="14.8949%" y="405" width="0.0201%" height="15" fill="rgb(214,192,32)" fg:x="37731" fg:w="51"/><text x="15.1449%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (51 samples, 0.02%)</title><rect x="14.8949%" y="389" width="0.0201%" height="15" fill="rgb(209,36,54)" fg:x="37731" fg:w="51"/><text x="15.1449%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (852 samples, 0.34%)</title><rect x="14.6047%" y="469" width="0.3363%" height="15" fill="rgb(220,10,11)" fg:x="36996" fg:w="852"/><text x="14.8547%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (852 samples, 0.34%)</title><rect x="14.6047%" y="453" width="0.3363%" height="15" fill="rgb(221,106,17)" fg:x="36996" fg:w="852"/><text x="14.8547%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (312 samples, 0.12%)</title><rect x="14.8179%" y="437" width="0.1232%" height="15" fill="rgb(251,142,44)" fg:x="37536" fg:w="312"/><text x="15.0679%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (66 samples, 0.03%)</title><rect x="14.9150%" y="421" width="0.0261%" height="15" fill="rgb(238,13,15)" fg:x="37782" fg:w="66"/><text x="15.1650%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (66 samples, 0.03%)</title><rect x="14.9150%" y="405" width="0.0261%" height="15" fill="rgb(208,107,27)" fg:x="37782" fg:w="66"/><text x="15.1650%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (85 samples, 0.03%)</title><rect x="14.9411%" y="437" width="0.0336%" height="15" fill="rgb(205,136,37)" fg:x="37848" fg:w="85"/><text x="15.1911%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (106 samples, 0.04%)</title><rect x="14.9411%" y="469" width="0.0418%" height="15" fill="rgb(250,205,27)" fg:x="37848" fg:w="106"/><text x="15.1911%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (106 samples, 0.04%)</title><rect x="14.9411%" y="453" width="0.0418%" height="15" fill="rgb(210,80,43)" fg:x="37848" fg:w="106"/><text x="15.1911%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (346 samples, 0.14%)</title><rect x="14.9829%" y="469" width="0.1366%" height="15" fill="rgb(247,160,36)" fg:x="37954" fg:w="346"/><text x="15.2329%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (440 samples, 0.17%)</title><rect x="15.1195%" y="469" width="0.1737%" height="15" fill="rgb(234,13,49)" fg:x="38300" fg:w="440"/><text x="15.3695%" y="479.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (440 samples, 0.17%)</title><rect x="15.1195%" y="453" width="0.1737%" height="15" fill="rgb(234,122,0)" fg:x="38300" fg:w="440"/><text x="15.3695%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (440 samples, 0.17%)</title><rect x="15.1195%" y="437" width="0.1737%" height="15" fill="rgb(207,146,38)" fg:x="38300" fg:w="440"/><text x="15.3695%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (440 samples, 0.17%)</title><rect x="15.1195%" y="421" width="0.1737%" height="15" fill="rgb(207,177,25)" fg:x="38300" fg:w="440"/><text x="15.3695%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (440 samples, 0.17%)</title><rect x="15.1195%" y="405" width="0.1737%" height="15" fill="rgb(211,178,42)" fg:x="38300" fg:w="440"/><text x="15.3695%" y="415.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (35 samples, 0.01%)</title><rect x="15.2932%" y="469" width="0.0138%" height="15" fill="rgb(230,69,54)" fg:x="38740" fg:w="35"/><text x="15.5432%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (202 samples, 0.08%)</title><rect x="15.3761%" y="453" width="0.0797%" height="15" fill="rgb(214,135,41)" fg:x="38950" fg:w="202"/><text x="15.6261%" y="463.50"></text></g><g><title>project1::solver::types::Lit::var (459 samples, 0.18%)</title><rect x="15.3070%" y="469" width="0.1812%" height="15" fill="rgb(237,67,25)" fg:x="38775" fg:w="459"/><text x="15.5570%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (82 samples, 0.03%)</title><rect x="15.4559%" y="453" width="0.0324%" height="15" fill="rgb(222,189,50)" fg:x="39152" fg:w="82"/><text x="15.7059%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (159 samples, 0.06%)</title><rect x="15.5510%" y="453" width="0.0628%" height="15" fill="rgb(245,148,34)" fg:x="39393" fg:w="159"/><text x="15.8010%" y="463.50"></text></g><g><title>project1::solver::types::Lit::var_idx (344 samples, 0.14%)</title><rect x="15.4882%" y="469" width="0.1358%" height="15" fill="rgb(222,29,6)" fg:x="39234" fg:w="344"/><text x="15.7382%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (37,127 samples, 14.66%)</title><rect x="0.9688%" y="485" width="14.6565%" height="15" fill="rgb(221,189,43)" fg:x="2454" fg:w="37127"/><text x="1.2188%" y="495.50">project1::solver::cdcl..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (206 samples, 0.08%)</title><rect x="15.6252%" y="485" width="0.0813%" height="15" fill="rgb(207,36,27)" fg:x="39581" fg:w="206"/><text x="15.8752%" y="495.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (188 samples, 0.07%)</title><rect x="15.6323%" y="469" width="0.0742%" height="15" fill="rgb(217,90,24)" fg:x="39599" fg:w="188"/><text x="15.8823%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (182 samples, 0.07%)</title><rect x="15.6347%" y="453" width="0.0718%" height="15" fill="rgb(224,66,35)" fg:x="39605" fg:w="182"/><text x="15.8847%" y="463.50"></text></g><g><title>core::ptr::write (142 samples, 0.06%)</title><rect x="15.6505%" y="437" width="0.0561%" height="15" fill="rgb(221,13,50)" fg:x="39645" fg:w="142"/><text x="15.9005%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.02%)</title><rect x="15.8017%" y="469" width="0.0150%" height="15" fill="rgb(236,68,49)" fg:x="40028" fg:w="38"/><text x="16.0517%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (36 samples, 0.01%)</title><rect x="15.8025%" y="453" width="0.0142%" height="15" fill="rgb(229,146,28)" fg:x="40030" fg:w="36"/><text x="16.0525%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (36 samples, 0.01%)</title><rect x="15.8025%" y="437" width="0.0142%" height="15" fill="rgb(225,31,38)" fg:x="40030" fg:w="36"/><text x="16.0525%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (195 samples, 0.08%)</title><rect x="15.8167%" y="453" width="0.0770%" height="15" fill="rgb(250,208,3)" fg:x="40066" fg:w="195"/><text x="16.0667%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (127 samples, 0.05%)</title><rect x="15.8435%" y="437" width="0.0501%" height="15" fill="rgb(246,54,23)" fg:x="40134" fg:w="127"/><text x="16.0935%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (127 samples, 0.05%)</title><rect x="15.8435%" y="421" width="0.0501%" height="15" fill="rgb(243,76,11)" fg:x="40134" fg:w="127"/><text x="16.0935%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (284 samples, 0.11%)</title><rect x="15.8167%" y="469" width="0.1121%" height="15" fill="rgb(245,21,50)" fg:x="40066" fg:w="284"/><text x="16.0667%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (89 samples, 0.04%)</title><rect x="15.8937%" y="453" width="0.0351%" height="15" fill="rgb(228,9,43)" fg:x="40261" fg:w="89"/><text x="16.1437%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (89 samples, 0.04%)</title><rect x="15.8937%" y="437" width="0.0351%" height="15" fill="rgb(208,100,47)" fg:x="40261" fg:w="89"/><text x="16.1437%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::le (101 samples, 0.04%)</title><rect x="15.9292%" y="469" width="0.0399%" height="15" fill="rgb(232,26,8)" fg:x="40351" fg:w="101"/><text x="16.1792%" y="479.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (51 samples, 0.02%)</title><rect x="15.9489%" y="453" width="0.0201%" height="15" fill="rgb(216,166,38)" fg:x="40401" fg:w="51"/><text x="16.1989%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (51 samples, 0.02%)</title><rect x="15.9489%" y="437" width="0.0201%" height="15" fill="rgb(251,202,51)" fg:x="40401" fg:w="51"/><text x="16.1989%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (59 samples, 0.02%)</title><rect x="15.9900%" y="437" width="0.0233%" height="15" fill="rgb(254,216,34)" fg:x="40505" fg:w="59"/><text x="16.2400%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (98 samples, 0.04%)</title><rect x="15.9900%" y="453" width="0.0387%" height="15" fill="rgb(251,32,27)" fg:x="40505" fg:w="98"/><text x="16.2400%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (39 samples, 0.02%)</title><rect x="16.0133%" y="437" width="0.0154%" height="15" fill="rgb(208,127,28)" fg:x="40564" fg:w="39"/><text x="16.2633%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (39 samples, 0.02%)</title><rect x="16.0133%" y="421" width="0.0154%" height="15" fill="rgb(224,137,22)" fg:x="40564" fg:w="39"/><text x="16.2633%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (56 samples, 0.02%)</title><rect x="16.0287%" y="453" width="0.0221%" height="15" fill="rgb(254,70,32)" fg:x="40603" fg:w="56"/><text x="16.2787%" y="463.50"></text></g><g><title>core::ptr::write (42 samples, 0.02%)</title><rect x="16.0342%" y="437" width="0.0166%" height="15" fill="rgb(229,75,37)" fg:x="40617" fg:w="42"/><text x="16.2842%" y="447.50"></text></g><g><title>core::ptr::read (549 samples, 0.22%)</title><rect x="16.0508%" y="437" width="0.2167%" height="15" fill="rgb(252,64,23)" fg:x="40659" fg:w="549"/><text x="16.3008%" y="447.50"></text></g><g><title>core::mem::replace (724 samples, 0.29%)</title><rect x="16.0508%" y="453" width="0.2858%" height="15" fill="rgb(232,162,48)" fg:x="40659" fg:w="724"/><text x="16.3008%" y="463.50"></text></g><g><title>core::ptr::write (175 samples, 0.07%)</title><rect x="16.2675%" y="437" width="0.0691%" height="15" fill="rgb(246,160,12)" fg:x="41208" fg:w="175"/><text x="16.5175%" y="447.50"></text></g><g><title>core::mem::swap (68 samples, 0.03%)</title><rect x="16.3366%" y="453" width="0.0268%" height="15" fill="rgb(247,166,0)" fg:x="41383" fg:w="68"/><text x="16.5866%" y="463.50"></text></g><g><title>core::mem::swap_simple (68 samples, 0.03%)</title><rect x="16.3366%" y="437" width="0.0268%" height="15" fill="rgb(249,219,21)" fg:x="41383" fg:w="68"/><text x="16.5866%" y="447.50"></text></g><g><title>core::ptr::write (65 samples, 0.03%)</title><rect x="16.3378%" y="421" width="0.0257%" height="15" fill="rgb(205,209,3)" fg:x="41386" fg:w="65"/><text x="16.5878%" y="431.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (58 samples, 0.02%)</title><rect x="16.3634%" y="453" width="0.0229%" height="15" fill="rgb(243,44,1)" fg:x="41451" fg:w="58"/><text x="16.6134%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (149 samples, 0.06%)</title><rect x="16.4088%" y="405" width="0.0588%" height="15" fill="rgb(206,159,16)" fg:x="41566" fg:w="149"/><text x="16.6588%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (33 samples, 0.01%)</title><rect x="16.4834%" y="261" width="0.0130%" height="15" fill="rgb(244,77,30)" fg:x="41755" fg:w="33"/><text x="16.7334%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="16.4676%" y="325" width="0.0339%" height="15" fill="rgb(218,69,12)" fg:x="41715" fg:w="86"/><text x="16.7176%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="16.4676%" y="309" width="0.0339%" height="15" fill="rgb(212,87,7)" fg:x="41715" fg:w="86"/><text x="16.7176%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="16.4676%" y="293" width="0.0339%" height="15" fill="rgb(245,114,25)" fg:x="41715" fg:w="86"/><text x="16.7176%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (62 samples, 0.02%)</title><rect x="16.4771%" y="277" width="0.0245%" height="15" fill="rgb(210,61,42)" fg:x="41739" fg:w="62"/><text x="16.7271%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (126 samples, 0.05%)</title><rect x="16.4676%" y="357" width="0.0497%" height="15" fill="rgb(211,52,33)" fg:x="41715" fg:w="126"/><text x="16.7176%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (126 samples, 0.05%)</title><rect x="16.4676%" y="341" width="0.0497%" height="15" fill="rgb(234,58,33)" fg:x="41715" fg:w="126"/><text x="16.7176%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (32 samples, 0.01%)</title><rect x="16.5047%" y="325" width="0.0126%" height="15" fill="rgb(220,115,36)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (32 samples, 0.01%)</title><rect x="16.5047%" y="309" width="0.0126%" height="15" fill="rgb(243,153,54)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (32 samples, 0.01%)</title><rect x="16.5047%" y="293" width="0.0126%" height="15" fill="rgb(251,47,18)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (32 samples, 0.01%)</title><rect x="16.5047%" y="277" width="0.0126%" height="15" fill="rgb(242,102,42)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.01%)</title><rect x="16.5047%" y="261" width="0.0126%" height="15" fill="rgb(234,31,38)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (32 samples, 0.01%)</title><rect x="16.5047%" y="245" width="0.0126%" height="15" fill="rgb(221,117,51)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.01%)</title><rect x="16.5047%" y="229" width="0.0126%" height="15" fill="rgb(212,20,18)" fg:x="41809" fg:w="32"/><text x="16.7547%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (52 samples, 0.02%)</title><rect x="16.5174%" y="341" width="0.0205%" height="15" fill="rgb(245,133,36)" fg:x="41841" fg:w="52"/><text x="16.7674%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (52 samples, 0.02%)</title><rect x="16.5174%" y="325" width="0.0205%" height="15" fill="rgb(212,6,19)" fg:x="41841" fg:w="52"/><text x="16.7674%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (331 samples, 0.13%)</title><rect x="16.4080%" y="437" width="0.1307%" height="15" fill="rgb(218,1,36)" fg:x="41564" fg:w="331"/><text x="16.6580%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (331 samples, 0.13%)</title><rect x="16.4080%" y="421" width="0.1307%" height="15" fill="rgb(246,84,54)" fg:x="41564" fg:w="331"/><text x="16.6580%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (180 samples, 0.07%)</title><rect x="16.4676%" y="405" width="0.0711%" height="15" fill="rgb(242,110,6)" fg:x="41715" fg:w="180"/><text x="16.7176%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (180 samples, 0.07%)</title><rect x="16.4676%" y="389" width="0.0711%" height="15" fill="rgb(214,47,5)" fg:x="41715" fg:w="180"/><text x="16.7176%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (180 samples, 0.07%)</title><rect x="16.4676%" y="373" width="0.0711%" height="15" fill="rgb(218,159,25)" fg:x="41715" fg:w="180"/><text x="16.7176%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (54 samples, 0.02%)</title><rect x="16.5174%" y="357" width="0.0213%" height="15" fill="rgb(215,211,28)" fg:x="41841" fg:w="54"/><text x="16.7674%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (405 samples, 0.16%)</title><rect x="16.3879%" y="453" width="0.1599%" height="15" fill="rgb(238,59,32)" fg:x="41513" fg:w="405"/><text x="16.6379%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (128 samples, 0.05%)</title><rect x="16.6299%" y="277" width="0.0505%" height="15" fill="rgb(226,82,3)" fg:x="42126" fg:w="128"/><text x="16.8799%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (268 samples, 0.11%)</title><rect x="16.5995%" y="293" width="0.1058%" height="15" fill="rgb(240,164,32)" fg:x="42049" fg:w="268"/><text x="16.8495%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (63 samples, 0.02%)</title><rect x="16.6804%" y="277" width="0.0249%" height="15" fill="rgb(232,46,7)" fg:x="42254" fg:w="63"/><text x="16.9304%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (319 samples, 0.13%)</title><rect x="16.7779%" y="277" width="0.1259%" height="15" fill="rgb(229,129,53)" fg:x="42501" fg:w="319"/><text x="17.0279%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (188 samples, 0.07%)</title><rect x="16.9039%" y="277" width="0.0742%" height="15" fill="rgb(234,188,29)" fg:x="42820" fg:w="188"/><text x="17.1539%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (747 samples, 0.29%)</title><rect x="16.7053%" y="293" width="0.2949%" height="15" fill="rgb(246,141,4)" fg:x="42317" fg:w="747"/><text x="16.9553%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (56 samples, 0.02%)</title><rect x="16.9781%" y="277" width="0.0221%" height="15" fill="rgb(229,23,39)" fg:x="43008" fg:w="56"/><text x="17.2281%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,060 samples, 0.42%)</title><rect x="16.5821%" y="341" width="0.4185%" height="15" fill="rgb(206,12,3)" fg:x="42005" fg:w="1060"/><text x="16.8321%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,060 samples, 0.42%)</title><rect x="16.5821%" y="325" width="0.4185%" height="15" fill="rgb(252,226,20)" fg:x="42005" fg:w="1060"/><text x="16.8321%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,060 samples, 0.42%)</title><rect x="16.5821%" y="309" width="0.4185%" height="15" fill="rgb(216,123,35)" fg:x="42005" fg:w="1060"/><text x="16.8321%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (137 samples, 0.05%)</title><rect x="17.0006%" y="341" width="0.0541%" height="15" fill="rgb(212,68,40)" fg:x="43065" fg:w="137"/><text x="17.2506%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (77 samples, 0.03%)</title><rect x="17.0243%" y="325" width="0.0304%" height="15" fill="rgb(254,125,32)" fg:x="43125" fg:w="77"/><text x="17.2743%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (77 samples, 0.03%)</title><rect x="17.0243%" y="309" width="0.0304%" height="15" fill="rgb(253,97,22)" fg:x="43125" fg:w="77"/><text x="17.2743%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (77 samples, 0.03%)</title><rect x="17.0243%" y="293" width="0.0304%" height="15" fill="rgb(241,101,14)" fg:x="43125" fg:w="77"/><text x="17.2743%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (120 samples, 0.05%)</title><rect x="17.1198%" y="213" width="0.0474%" height="15" fill="rgb(238,103,29)" fg:x="43367" fg:w="120"/><text x="17.3698%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (1,562 samples, 0.62%)</title><rect x="16.5821%" y="373" width="0.6166%" height="15" fill="rgb(233,195,47)" fg:x="42005" fg:w="1562"/><text x="16.8321%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,562 samples, 0.62%)</title><rect x="16.5821%" y="357" width="0.6166%" height="15" fill="rgb(246,218,30)" fg:x="42005" fg:w="1562"/><text x="16.8321%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (365 samples, 0.14%)</title><rect x="17.0547%" y="341" width="0.1441%" height="15" fill="rgb(219,145,47)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (365 samples, 0.14%)</title><rect x="17.0547%" y="325" width="0.1441%" height="15" fill="rgb(243,12,26)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (365 samples, 0.14%)</title><rect x="17.0547%" y="309" width="0.1441%" height="15" fill="rgb(214,87,16)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (365 samples, 0.14%)</title><rect x="17.0547%" y="293" width="0.1441%" height="15" fill="rgb(208,99,42)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (365 samples, 0.14%)</title><rect x="17.0547%" y="277" width="0.1441%" height="15" fill="rgb(253,99,2)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (365 samples, 0.14%)</title><rect x="17.0547%" y="261" width="0.1441%" height="15" fill="rgb(220,168,23)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (365 samples, 0.14%)</title><rect x="17.0547%" y="245" width="0.1441%" height="15" fill="rgb(242,38,24)" fg:x="43202" fg:w="365"/><text x="17.3047%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (227 samples, 0.09%)</title><rect x="17.1091%" y="229" width="0.0896%" height="15" fill="rgb(225,182,9)" fg:x="43340" fg:w="227"/><text x="17.3591%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (80 samples, 0.03%)</title><rect x="17.1672%" y="213" width="0.0316%" height="15" fill="rgb(243,178,37)" fg:x="43487" fg:w="80"/><text x="17.4172%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.03%)</title><rect x="17.2331%" y="325" width="0.0296%" height="15" fill="rgb(232,139,19)" fg:x="43654" fg:w="75"/><text x="17.4831%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (62 samples, 0.02%)</title><rect x="17.2382%" y="309" width="0.0245%" height="15" fill="rgb(225,201,24)" fg:x="43667" fg:w="62"/><text x="17.4882%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (119 samples, 0.05%)</title><rect x="17.2627%" y="309" width="0.0470%" height="15" fill="rgb(221,47,46)" fg:x="43729" fg:w="119"/><text x="17.5127%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (119 samples, 0.05%)</title><rect x="17.2627%" y="293" width="0.0470%" height="15" fill="rgb(249,23,13)" fg:x="43729" fg:w="119"/><text x="17.5127%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (119 samples, 0.05%)</title><rect x="17.2627%" y="277" width="0.0470%" height="15" fill="rgb(219,9,5)" fg:x="43729" fg:w="119"/><text x="17.5127%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (119 samples, 0.05%)</title><rect x="17.2627%" y="261" width="0.0470%" height="15" fill="rgb(254,171,16)" fg:x="43729" fg:w="119"/><text x="17.5127%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (66 samples, 0.03%)</title><rect x="17.3097%" y="261" width="0.0261%" height="15" fill="rgb(230,171,20)" fg:x="43848" fg:w="66"/><text x="17.5597%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (210 samples, 0.08%)</title><rect x="17.2627%" y="325" width="0.0829%" height="15" fill="rgb(210,71,41)" fg:x="43729" fg:w="210"/><text x="17.5127%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (91 samples, 0.04%)</title><rect x="17.3097%" y="309" width="0.0359%" height="15" fill="rgb(206,173,20)" fg:x="43848" fg:w="91"/><text x="17.5597%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (91 samples, 0.04%)</title><rect x="17.3097%" y="293" width="0.0359%" height="15" fill="rgb(233,88,34)" fg:x="43848" fg:w="91"/><text x="17.5597%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (91 samples, 0.04%)</title><rect x="17.3097%" y="277" width="0.0359%" height="15" fill="rgb(223,209,46)" fg:x="43848" fg:w="91"/><text x="17.5597%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (156 samples, 0.06%)</title><rect x="17.3456%" y="325" width="0.0616%" height="15" fill="rgb(250,43,18)" fg:x="43939" fg:w="156"/><text x="17.5956%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (66 samples, 0.03%)</title><rect x="17.4072%" y="325" width="0.0261%" height="15" fill="rgb(208,13,10)" fg:x="44095" fg:w="66"/><text x="17.6572%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (672 samples, 0.27%)</title><rect x="17.1987%" y="357" width="0.2653%" height="15" fill="rgb(212,200,36)" fg:x="43567" fg:w="672"/><text x="17.4487%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (640 samples, 0.25%)</title><rect x="17.2114%" y="341" width="0.2526%" height="15" fill="rgb(225,90,30)" fg:x="43599" fg:w="640"/><text x="17.4614%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (72 samples, 0.03%)</title><rect x="17.4356%" y="325" width="0.0284%" height="15" fill="rgb(236,182,39)" fg:x="44167" fg:w="72"/><text x="17.6856%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (72 samples, 0.03%)</title><rect x="17.4356%" y="309" width="0.0284%" height="15" fill="rgb(212,144,35)" fg:x="44167" fg:w="72"/><text x="17.6856%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,252 samples, 0.89%)</title><rect x="16.5758%" y="389" width="0.8890%" height="15" fill="rgb(228,63,44)" fg:x="41989" fg:w="2252"/><text x="16.8258%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (674 samples, 0.27%)</title><rect x="17.1987%" y="373" width="0.2661%" height="15" fill="rgb(228,109,6)" fg:x="43567" fg:w="674"/><text x="17.4487%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2,318 samples, 0.92%)</title><rect x="16.5758%" y="437" width="0.9151%" height="15" fill="rgb(238,117,24)" fg:x="41989" fg:w="2318"/><text x="16.8258%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,318 samples, 0.92%)</title><rect x="16.5758%" y="421" width="0.9151%" height="15" fill="rgb(242,26,26)" fg:x="41989" fg:w="2318"/><text x="16.8258%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,318 samples, 0.92%)</title><rect x="16.5758%" y="405" width="0.9151%" height="15" fill="rgb(221,92,48)" fg:x="41989" fg:w="2318"/><text x="16.8258%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (66 samples, 0.03%)</title><rect x="17.4648%" y="389" width="0.0261%" height="15" fill="rgb(209,209,32)" fg:x="44241" fg:w="66"/><text x="17.7148%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (39 samples, 0.02%)</title><rect x="17.4909%" y="421" width="0.0154%" height="15" fill="rgb(221,70,22)" fg:x="44307" fg:w="39"/><text x="17.7409%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (44 samples, 0.02%)</title><rect x="17.5513%" y="405" width="0.0174%" height="15" fill="rgb(248,145,5)" fg:x="44460" fg:w="44"/><text x="17.8013%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (44 samples, 0.02%)</title><rect x="17.5513%" y="389" width="0.0174%" height="15" fill="rgb(226,116,26)" fg:x="44460" fg:w="44"/><text x="17.8013%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.02%)</title><rect x="17.5513%" y="373" width="0.0174%" height="15" fill="rgb(244,5,17)" fg:x="44460" fg:w="44"/><text x="17.8013%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (150 samples, 0.06%)</title><rect x="17.5686%" y="309" width="0.0592%" height="15" fill="rgb(252,159,33)" fg:x="44504" fg:w="150"/><text x="17.8186%" y="319.50"></text></g><g><title>compare::Compare::compares_ge (171 samples, 0.07%)</title><rect x="17.5686%" y="405" width="0.0675%" height="15" fill="rgb(206,71,0)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (171 samples, 0.07%)</title><rect x="17.5686%" y="389" width="0.0675%" height="15" fill="rgb(233,118,54)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (171 samples, 0.07%)</title><rect x="17.5686%" y="373" width="0.0675%" height="15" fill="rgb(234,83,48)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (171 samples, 0.07%)</title><rect x="17.5686%" y="357" width="0.0675%" height="15" fill="rgb(228,3,54)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (171 samples, 0.07%)</title><rect x="17.5686%" y="341" width="0.0675%" height="15" fill="rgb(226,155,13)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (171 samples, 0.07%)</title><rect x="17.5686%" y="325" width="0.0675%" height="15" fill="rgb(241,28,37)" fg:x="44504" fg:w="171"/><text x="17.8186%" y="335.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (212 samples, 0.08%)</title><rect x="17.6361%" y="389" width="0.0837%" height="15" fill="rgb(233,93,10)" fg:x="44675" fg:w="212"/><text x="17.8861%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (212 samples, 0.08%)</title><rect x="17.6361%" y="373" width="0.0837%" height="15" fill="rgb(225,113,19)" fg:x="44675" fg:w="212"/><text x="17.8861%" y="383.50"></text></g><g><title>compare::Compare::compares_le (243 samples, 0.10%)</title><rect x="17.6361%" y="405" width="0.0959%" height="15" fill="rgb(241,2,18)" fg:x="44675" fg:w="243"/><text x="17.8861%" y="415.50"></text></g><g><title>core::cmp::PartialEq::ne (31 samples, 0.01%)</title><rect x="17.7198%" y="389" width="0.0122%" height="15" fill="rgb(228,207,21)" fg:x="44887" fg:w="31"/><text x="17.9698%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (741 samples, 0.29%)</title><rect x="17.7463%" y="373" width="0.2925%" height="15" fill="rgb(213,211,35)" fg:x="44954" fg:w="741"/><text x="17.9963%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (37 samples, 0.01%)</title><rect x="18.0388%" y="373" width="0.0146%" height="15" fill="rgb(209,83,10)" fg:x="45695" fg:w="37"/><text x="18.2888%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (37 samples, 0.01%)</title><rect x="18.0388%" y="357" width="0.0146%" height="15" fill="rgb(209,164,1)" fg:x="45695" fg:w="37"/><text x="18.2888%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (37 samples, 0.01%)</title><rect x="18.0388%" y="341" width="0.0146%" height="15" fill="rgb(213,184,43)" fg:x="45695" fg:w="37"/><text x="18.2888%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (142 samples, 0.06%)</title><rect x="18.1296%" y="229" width="0.0561%" height="15" fill="rgb(231,61,34)" fg:x="45925" fg:w="142"/><text x="18.3796%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (342 samples, 0.14%)</title><rect x="18.1028%" y="245" width="0.1350%" height="15" fill="rgb(235,75,3)" fg:x="45857" fg:w="342"/><text x="18.3528%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (132 samples, 0.05%)</title><rect x="18.1857%" y="229" width="0.0521%" height="15" fill="rgb(220,106,47)" fg:x="46067" fg:w="132"/><text x="18.4357%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (334 samples, 0.13%)</title><rect x="18.3132%" y="229" width="0.1319%" height="15" fill="rgb(210,196,33)" fg:x="46390" fg:w="334"/><text x="18.5632%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,104 samples, 0.44%)</title><rect x="18.0613%" y="293" width="0.4358%" height="15" fill="rgb(229,154,42)" fg:x="45752" fg:w="1104"/><text x="18.3113%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,104 samples, 0.44%)</title><rect x="18.0613%" y="277" width="0.4358%" height="15" fill="rgb(228,114,26)" fg:x="45752" fg:w="1104"/><text x="18.3113%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,104 samples, 0.44%)</title><rect x="18.0613%" y="261" width="0.4358%" height="15" fill="rgb(208,144,1)" fg:x="45752" fg:w="1104"/><text x="18.3113%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (657 samples, 0.26%)</title><rect x="18.2378%" y="245" width="0.2594%" height="15" fill="rgb(239,112,37)" fg:x="46199" fg:w="657"/><text x="18.4878%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (132 samples, 0.05%)</title><rect x="18.4450%" y="229" width="0.0521%" height="15" fill="rgb(210,96,50)" fg:x="46724" fg:w="132"/><text x="18.6950%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (115 samples, 0.05%)</title><rect x="18.4971%" y="293" width="0.0454%" height="15" fill="rgb(222,178,2)" fg:x="46856" fg:w="115"/><text x="18.7471%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (70 samples, 0.03%)</title><rect x="18.5149%" y="277" width="0.0276%" height="15" fill="rgb(226,74,18)" fg:x="46901" fg:w="70"/><text x="18.7649%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (70 samples, 0.03%)</title><rect x="18.5149%" y="261" width="0.0276%" height="15" fill="rgb(225,67,54)" fg:x="46901" fg:w="70"/><text x="18.7649%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (70 samples, 0.03%)</title><rect x="18.5149%" y="245" width="0.0276%" height="15" fill="rgb(251,92,32)" fg:x="46901" fg:w="70"/><text x="18.7649%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (59 samples, 0.02%)</title><rect x="18.6373%" y="165" width="0.0233%" height="15" fill="rgb(228,149,22)" fg:x="47211" fg:w="59"/><text x="18.8873%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (1,536 samples, 0.61%)</title><rect x="18.0613%" y="325" width="0.6064%" height="15" fill="rgb(243,54,13)" fg:x="45752" fg:w="1536"/><text x="18.3113%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,536 samples, 0.61%)</title><rect x="18.0613%" y="309" width="0.6064%" height="15" fill="rgb(243,180,28)" fg:x="45752" fg:w="1536"/><text x="18.3113%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (317 samples, 0.13%)</title><rect x="18.5425%" y="293" width="0.1251%" height="15" fill="rgb(208,167,24)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (317 samples, 0.13%)</title><rect x="18.5425%" y="277" width="0.1251%" height="15" fill="rgb(245,73,45)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (317 samples, 0.13%)</title><rect x="18.5425%" y="261" width="0.1251%" height="15" fill="rgb(237,203,48)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (317 samples, 0.13%)</title><rect x="18.5425%" y="245" width="0.1251%" height="15" fill="rgb(211,197,16)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (317 samples, 0.13%)</title><rect x="18.5425%" y="229" width="0.1251%" height="15" fill="rgb(243,99,51)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (317 samples, 0.13%)</title><rect x="18.5425%" y="213" width="0.1251%" height="15" fill="rgb(215,123,29)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (317 samples, 0.13%)</title><rect x="18.5425%" y="197" width="0.1251%" height="15" fill="rgb(239,186,37)" fg:x="46971" fg:w="317"/><text x="18.7925%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (167 samples, 0.07%)</title><rect x="18.6017%" y="181" width="0.0659%" height="15" fill="rgb(252,136,39)" fg:x="47121" fg:w="167"/><text x="18.8517%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.04%)</title><rect x="18.6842%" y="277" width="0.0426%" height="15" fill="rgb(223,213,32)" fg:x="47330" fg:w="108"/><text x="18.9342%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (41 samples, 0.02%)</title><rect x="18.7107%" y="261" width="0.0162%" height="15" fill="rgb(233,115,5)" fg:x="47397" fg:w="41"/><text x="18.9607%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (241 samples, 0.10%)</title><rect x="18.7269%" y="261" width="0.0951%" height="15" fill="rgb(207,226,44)" fg:x="47438" fg:w="241"/><text x="18.9769%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (241 samples, 0.10%)</title><rect x="18.7269%" y="245" width="0.0951%" height="15" fill="rgb(208,126,0)" fg:x="47438" fg:w="241"/><text x="18.9769%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (241 samples, 0.10%)</title><rect x="18.7269%" y="229" width="0.0951%" height="15" fill="rgb(244,66,21)" fg:x="47438" fg:w="241"/><text x="18.9769%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (241 samples, 0.10%)</title><rect x="18.7269%" y="213" width="0.0951%" height="15" fill="rgb(222,97,12)" fg:x="47438" fg:w="241"/><text x="18.9769%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (104 samples, 0.04%)</title><rect x="18.8220%" y="213" width="0.0411%" height="15" fill="rgb(219,213,19)" fg:x="47679" fg:w="104"/><text x="19.0720%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (371 samples, 0.15%)</title><rect x="18.7269%" y="277" width="0.1465%" height="15" fill="rgb(252,169,30)" fg:x="47438" fg:w="371"/><text x="18.9769%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (130 samples, 0.05%)</title><rect x="18.8220%" y="261" width="0.0513%" height="15" fill="rgb(206,32,51)" fg:x="47679" fg:w="130"/><text x="19.0720%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (130 samples, 0.05%)</title><rect x="18.8220%" y="245" width="0.0513%" height="15" fill="rgb(250,172,42)" fg:x="47679" fg:w="130"/><text x="19.0720%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (130 samples, 0.05%)</title><rect x="18.8220%" y="229" width="0.0513%" height="15" fill="rgb(209,34,43)" fg:x="47679" fg:w="130"/><text x="19.0720%" y="239.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (26 samples, 0.01%)</title><rect x="18.8631%" y="213" width="0.0103%" height="15" fill="rgb(223,11,35)" fg:x="47783" fg:w="26"/><text x="19.1131%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (176 samples, 0.07%)</title><rect x="18.8733%" y="277" width="0.0695%" height="15" fill="rgb(251,219,26)" fg:x="47809" fg:w="176"/><text x="19.1233%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (49 samples, 0.02%)</title><rect x="18.9428%" y="277" width="0.0193%" height="15" fill="rgb(231,119,3)" fg:x="47985" fg:w="49"/><text x="19.1928%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (94 samples, 0.04%)</title><rect x="18.9622%" y="277" width="0.0371%" height="15" fill="rgb(216,97,11)" fg:x="48034" fg:w="94"/><text x="19.2122%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (94 samples, 0.04%)</title><rect x="18.9622%" y="261" width="0.0371%" height="15" fill="rgb(223,59,9)" fg:x="48034" fg:w="94"/><text x="19.2122%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.04%)</title><rect x="18.9622%" y="245" width="0.0371%" height="15" fill="rgb(233,93,31)" fg:x="48034" fg:w="94"/><text x="19.2122%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,047 samples, 0.41%)</title><rect x="18.6677%" y="293" width="0.4133%" height="15" fill="rgb(239,81,33)" fg:x="47288" fg:w="1047"/><text x="18.9177%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (207 samples, 0.08%)</title><rect x="18.9993%" y="277" width="0.0817%" height="15" fill="rgb(213,120,34)" fg:x="48128" fg:w="207"/><text x="19.2493%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (207 samples, 0.08%)</title><rect x="18.9993%" y="261" width="0.0817%" height="15" fill="rgb(243,49,53)" fg:x="48128" fg:w="207"/><text x="19.2493%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,053 samples, 0.42%)</title><rect x="18.6677%" y="309" width="0.4157%" height="15" fill="rgb(247,216,33)" fg:x="47288" fg:w="1053"/><text x="18.9177%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3,424 samples, 1.35%)</title><rect x="17.7337%" y="405" width="1.3517%" height="15" fill="rgb(226,26,14)" fg:x="44922" fg:w="3424"/><text x="17.9837%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3,424 samples, 1.35%)</title><rect x="17.7337%" y="389" width="1.3517%" height="15" fill="rgb(215,49,53)" fg:x="44922" fg:w="3424"/><text x="17.9837%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,614 samples, 1.03%)</title><rect x="18.0534%" y="373" width="1.0319%" height="15" fill="rgb(245,162,40)" fg:x="45732" fg:w="2614"/><text x="18.3034%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,614 samples, 1.03%)</title><rect x="18.0534%" y="357" width="1.0319%" height="15" fill="rgb(229,68,17)" fg:x="45732" fg:w="2614"/><text x="18.3034%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,614 samples, 1.03%)</title><rect x="18.0534%" y="341" width="1.0319%" height="15" fill="rgb(213,182,10)" fg:x="45732" fg:w="2614"/><text x="18.3034%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,058 samples, 0.42%)</title><rect x="18.6677%" y="325" width="0.4177%" height="15" fill="rgb(245,125,30)" fg:x="47288" fg:w="1058"/><text x="18.9177%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (4,194 samples, 1.66%)</title><rect x="17.5063%" y="421" width="1.6556%" height="15" fill="rgb(232,202,2)" fg:x="44346" fg:w="4194"/><text x="17.7563%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (194 samples, 0.08%)</title><rect x="19.0853%" y="405" width="0.0766%" height="15" fill="rgb(237,140,51)" fg:x="48346" fg:w="194"/><text x="19.3353%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (4,302 samples, 1.70%)</title><rect x="17.4909%" y="437" width="1.6983%" height="15" fill="rgb(236,157,25)" fg:x="44307" fg:w="4302"/><text x="17.7409%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (69 samples, 0.03%)</title><rect x="19.1619%" y="421" width="0.0272%" height="15" fill="rgb(219,209,0)" fg:x="48540" fg:w="69"/><text x="19.4119%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (30 samples, 0.01%)</title><rect x="19.2547%" y="421" width="0.0118%" height="15" fill="rgb(240,116,54)" fg:x="48775" fg:w="30"/><text x="19.5047%" y="431.50"></text></g><g><title>compare::Compare::compares_le (376 samples, 0.15%)</title><rect x="19.2665%" y="421" width="0.1484%" height="15" fill="rgb(216,10,36)" fg:x="48805" fg:w="376"/><text x="19.5165%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (376 samples, 0.15%)</title><rect x="19.2665%" y="405" width="0.1484%" height="15" fill="rgb(222,72,44)" fg:x="48805" fg:w="376"/><text x="19.5165%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (376 samples, 0.15%)</title><rect x="19.2665%" y="389" width="0.1484%" height="15" fill="rgb(232,159,9)" fg:x="48805" fg:w="376"/><text x="19.5165%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (595 samples, 0.23%)</title><rect x="19.4335%" y="389" width="0.2349%" height="15" fill="rgb(210,39,32)" fg:x="49228" fg:w="595"/><text x="19.6835%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.03%)</title><rect x="19.7612%" y="245" width="0.0264%" height="15" fill="rgb(216,194,45)" fg:x="50058" fg:w="67"/><text x="20.0112%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (72 samples, 0.03%)</title><rect x="19.7876%" y="245" width="0.0284%" height="15" fill="rgb(218,18,35)" fg:x="50125" fg:w="72"/><text x="20.0376%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (213 samples, 0.08%)</title><rect x="19.7335%" y="261" width="0.0841%" height="15" fill="rgb(207,83,51)" fg:x="49988" fg:w="213"/><text x="19.9835%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (358 samples, 0.14%)</title><rect x="19.8899%" y="245" width="0.1413%" height="15" fill="rgb(225,63,43)" fg:x="50384" fg:w="358"/><text x="20.1399%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,052 samples, 0.42%)</title><rect x="19.6763%" y="309" width="0.4153%" height="15" fill="rgb(207,57,36)" fg:x="49843" fg:w="1052"/><text x="19.9263%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,052 samples, 0.42%)</title><rect x="19.6763%" y="293" width="0.4153%" height="15" fill="rgb(216,99,33)" fg:x="49843" fg:w="1052"/><text x="19.9263%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,052 samples, 0.42%)</title><rect x="19.6763%" y="277" width="0.4153%" height="15" fill="rgb(225,42,16)" fg:x="49843" fg:w="1052"/><text x="19.9263%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (694 samples, 0.27%)</title><rect x="19.8176%" y="261" width="0.2740%" height="15" fill="rgb(220,201,45)" fg:x="50201" fg:w="694"/><text x="20.0676%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (153 samples, 0.06%)</title><rect x="20.0312%" y="245" width="0.0604%" height="15" fill="rgb(225,33,4)" fg:x="50742" fg:w="153"/><text x="20.2812%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (74 samples, 0.03%)</title><rect x="20.0916%" y="309" width="0.0292%" height="15" fill="rgb(224,33,50)" fg:x="50895" fg:w="74"/><text x="20.3416%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (145 samples, 0.06%)</title><rect x="20.2274%" y="181" width="0.0572%" height="15" fill="rgb(246,198,51)" fg:x="51239" fg:w="145"/><text x="20.4774%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,551 samples, 0.61%)</title><rect x="19.6763%" y="341" width="0.6123%" height="15" fill="rgb(205,22,4)" fg:x="49843" fg:w="1551"/><text x="19.9263%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,551 samples, 0.61%)</title><rect x="19.6763%" y="325" width="0.6123%" height="15" fill="rgb(206,3,8)" fg:x="49843" fg:w="1551"/><text x="19.9263%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (425 samples, 0.17%)</title><rect x="20.1208%" y="309" width="0.1678%" height="15" fill="rgb(251,23,15)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (425 samples, 0.17%)</title><rect x="20.1208%" y="293" width="0.1678%" height="15" fill="rgb(252,88,28)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (425 samples, 0.17%)</title><rect x="20.1208%" y="277" width="0.1678%" height="15" fill="rgb(212,127,14)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (425 samples, 0.17%)</title><rect x="20.1208%" y="261" width="0.1678%" height="15" fill="rgb(247,145,37)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (425 samples, 0.17%)</title><rect x="20.1208%" y="245" width="0.1678%" height="15" fill="rgb(209,117,53)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (425 samples, 0.17%)</title><rect x="20.1208%" y="229" width="0.1678%" height="15" fill="rgb(212,90,42)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (425 samples, 0.17%)</title><rect x="20.1208%" y="213" width="0.1678%" height="15" fill="rgb(218,164,37)" fg:x="50969" fg:w="425"/><text x="20.3708%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (220 samples, 0.09%)</title><rect x="20.2017%" y="197" width="0.0868%" height="15" fill="rgb(246,65,34)" fg:x="51174" fg:w="220"/><text x="20.4517%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.05%)</title><rect x="20.3130%" y="293" width="0.0533%" height="15" fill="rgb(231,100,33)" fg:x="51456" fg:w="135"/><text x="20.5630%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (90 samples, 0.04%)</title><rect x="20.3308%" y="277" width="0.0355%" height="15" fill="rgb(228,126,14)" fg:x="51501" fg:w="90"/><text x="20.5808%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (336 samples, 0.13%)</title><rect x="20.3663%" y="277" width="0.1326%" height="15" fill="rgb(215,173,21)" fg:x="51591" fg:w="336"/><text x="20.6163%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (336 samples, 0.13%)</title><rect x="20.3663%" y="261" width="0.1326%" height="15" fill="rgb(210,6,40)" fg:x="51591" fg:w="336"/><text x="20.6163%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (336 samples, 0.13%)</title><rect x="20.3663%" y="245" width="0.1326%" height="15" fill="rgb(212,48,18)" fg:x="51591" fg:w="336"/><text x="20.6163%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (336 samples, 0.13%)</title><rect x="20.3663%" y="229" width="0.1326%" height="15" fill="rgb(230,214,11)" fg:x="51591" fg:w="336"/><text x="20.6163%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (130 samples, 0.05%)</title><rect x="20.4990%" y="229" width="0.0513%" height="15" fill="rgb(254,105,39)" fg:x="51927" fg:w="130"/><text x="20.7490%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (473 samples, 0.19%)</title><rect x="20.3663%" y="293" width="0.1867%" height="15" fill="rgb(245,158,5)" fg:x="51591" fg:w="473"/><text x="20.6163%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (137 samples, 0.05%)</title><rect x="20.4990%" y="277" width="0.0541%" height="15" fill="rgb(249,208,11)" fg:x="51927" fg:w="137"/><text x="20.7490%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (137 samples, 0.05%)</title><rect x="20.4990%" y="261" width="0.0541%" height="15" fill="rgb(210,39,28)" fg:x="51927" fg:w="137"/><text x="20.7490%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (137 samples, 0.05%)</title><rect x="20.4990%" y="245" width="0.0541%" height="15" fill="rgb(211,56,53)" fg:x="51927" fg:w="137"/><text x="20.7490%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (70 samples, 0.03%)</title><rect x="20.5531%" y="293" width="0.0276%" height="15" fill="rgb(226,201,30)" fg:x="52064" fg:w="70"/><text x="20.8031%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (48 samples, 0.02%)</title><rect x="20.5807%" y="293" width="0.0189%" height="15" fill="rgb(239,101,34)" fg:x="52134" fg:w="48"/><text x="20.8307%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (48 samples, 0.02%)</title><rect x="20.5807%" y="277" width="0.0189%" height="15" fill="rgb(226,209,5)" fg:x="52134" fg:w="48"/><text x="20.8307%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.02%)</title><rect x="20.5807%" y="261" width="0.0189%" height="15" fill="rgb(250,105,47)" fg:x="52134" fg:w="48"/><text x="20.8307%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (186 samples, 0.07%)</title><rect x="20.5996%" y="293" width="0.0734%" height="15" fill="rgb(230,72,3)" fg:x="52182" fg:w="186"/><text x="20.8496%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (186 samples, 0.07%)</title><rect x="20.5996%" y="277" width="0.0734%" height="15" fill="rgb(232,218,39)" fg:x="52182" fg:w="186"/><text x="20.8496%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,073 samples, 0.42%)</title><rect x="20.2886%" y="309" width="0.4236%" height="15" fill="rgb(248,166,6)" fg:x="51394" fg:w="1073"/><text x="20.5386%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (99 samples, 0.04%)</title><rect x="20.6731%" y="293" width="0.0391%" height="15" fill="rgb(247,89,20)" fg:x="52368" fg:w="99"/><text x="20.9231%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,137 samples, 0.45%)</title><rect x="20.2886%" y="325" width="0.4488%" height="15" fill="rgb(248,130,54)" fg:x="51394" fg:w="1137"/><text x="20.5386%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (64 samples, 0.03%)</title><rect x="20.7122%" y="309" width="0.0253%" height="15" fill="rgb(234,196,4)" fg:x="52467" fg:w="64"/><text x="20.9622%" y="319.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3,353 samples, 1.32%)</title><rect x="19.4150%" y="405" width="1.3236%" height="15" fill="rgb(250,143,31)" fg:x="49181" fg:w="3353"/><text x="19.6650%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,698 samples, 1.07%)</title><rect x="19.6735%" y="389" width="1.0651%" height="15" fill="rgb(211,110,34)" fg:x="49836" fg:w="2698"/><text x="19.9235%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,698 samples, 1.07%)</title><rect x="19.6735%" y="373" width="1.0651%" height="15" fill="rgb(215,124,48)" fg:x="49836" fg:w="2698"/><text x="19.9235%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,698 samples, 1.07%)</title><rect x="19.6735%" y="357" width="1.0651%" height="15" fill="rgb(216,46,13)" fg:x="49836" fg:w="2698"/><text x="19.9235%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,140 samples, 0.45%)</title><rect x="20.2886%" y="341" width="0.4500%" height="15" fill="rgb(205,184,25)" fg:x="51394" fg:w="1140"/><text x="20.5386%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3,386 samples, 1.34%)</title><rect x="19.4150%" y="421" width="1.3367%" height="15" fill="rgb(228,1,10)" fg:x="49181" fg:w="3386"/><text x="19.6650%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (33 samples, 0.01%)</title><rect x="20.7386%" y="405" width="0.0130%" height="15" fill="rgb(213,116,27)" fg:x="52534" fg:w="33"/><text x="20.9886%" y="415.50"></text></g><g><title>core::ptr::read (180 samples, 0.07%)</title><rect x="20.8168%" y="405" width="0.0711%" height="15" fill="rgb(241,95,50)" fg:x="52732" fg:w="180"/><text x="21.0668%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (4,341 samples, 1.71%)</title><rect x="19.1892%" y="437" width="1.7137%" height="15" fill="rgb(238,48,32)" fg:x="48609" fg:w="4341"/><text x="19.4392%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (383 samples, 0.15%)</title><rect x="20.7516%" y="421" width="0.1512%" height="15" fill="rgb(235,113,49)" fg:x="52567" fg:w="383"/><text x="21.0016%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (38 samples, 0.02%)</title><rect x="20.8878%" y="405" width="0.0150%" height="15" fill="rgb(205,127,43)" fg:x="52912" fg:w="38"/><text x="21.1378%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (38 samples, 0.02%)</title><rect x="20.8878%" y="389" width="0.0150%" height="15" fill="rgb(250,162,2)" fg:x="52912" fg:w="38"/><text x="21.1378%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (38 samples, 0.02%)</title><rect x="20.8878%" y="373" width="0.0150%" height="15" fill="rgb(220,13,41)" fg:x="52912" fg:w="38"/><text x="21.1378%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (11,133 samples, 4.39%)</title><rect x="16.5478%" y="453" width="4.3949%" height="15" fill="rgb(249,221,25)" fg:x="41918" fg:w="11133"/><text x="16.7978%" y="463.50">mut_b..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (101 samples, 0.04%)</title><rect x="20.9028%" y="437" width="0.0399%" height="15" fill="rgb(215,208,19)" fg:x="52950" fg:w="101"/><text x="21.1528%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (122 samples, 0.05%)</title><rect x="21.0414%" y="309" width="0.0482%" height="15" fill="rgb(236,175,2)" fg:x="53301" fg:w="122"/><text x="21.2914%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (270 samples, 0.11%)</title><rect x="21.0130%" y="325" width="0.1066%" height="15" fill="rgb(241,52,2)" fg:x="53229" fg:w="270"/><text x="21.2630%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (76 samples, 0.03%)</title><rect x="21.0896%" y="309" width="0.0300%" height="15" fill="rgb(248,140,14)" fg:x="53423" fg:w="76"/><text x="21.3396%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (322 samples, 0.13%)</title><rect x="21.1906%" y="309" width="0.1271%" height="15" fill="rgb(253,22,42)" fg:x="53679" fg:w="322"/><text x="21.4406%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (713 samples, 0.28%)</title><rect x="21.1196%" y="325" width="0.2815%" height="15" fill="rgb(234,61,47)" fg:x="53499" fg:w="713"/><text x="21.3696%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (211 samples, 0.08%)</title><rect x="21.3177%" y="309" width="0.0833%" height="15" fill="rgb(208,226,15)" fg:x="54001" fg:w="211"/><text x="21.5677%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,130 samples, 0.45%)</title><rect x="20.9557%" y="373" width="0.4461%" height="15" fill="rgb(217,221,4)" fg:x="53084" fg:w="1130"/><text x="21.2057%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,130 samples, 0.45%)</title><rect x="20.9557%" y="357" width="0.4461%" height="15" fill="rgb(212,174,34)" fg:x="53084" fg:w="1130"/><text x="21.2057%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,130 samples, 0.45%)</title><rect x="20.9557%" y="341" width="0.4461%" height="15" fill="rgb(253,83,4)" fg:x="53084" fg:w="1130"/><text x="21.2057%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (158 samples, 0.06%)</title><rect x="21.4018%" y="373" width="0.0624%" height="15" fill="rgb(250,195,49)" fg:x="54214" fg:w="158"/><text x="21.6518%" y="383.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (145 samples, 0.06%)</title><rect x="21.4069%" y="357" width="0.0572%" height="15" fill="rgb(241,192,25)" fg:x="54227" fg:w="145"/><text x="21.6569%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (145 samples, 0.06%)</title><rect x="21.4069%" y="341" width="0.0572%" height="15" fill="rgb(208,124,10)" fg:x="54227" fg:w="145"/><text x="21.6569%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (145 samples, 0.06%)</title><rect x="21.4069%" y="325" width="0.0572%" height="15" fill="rgb(222,33,0)" fg:x="54227" fg:w="145"/><text x="21.6569%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (210 samples, 0.08%)</title><rect x="21.5238%" y="245" width="0.0829%" height="15" fill="rgb(234,209,28)" fg:x="54523" fg:w="210"/><text x="21.7738%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (304 samples, 0.12%)</title><rect x="21.5033%" y="261" width="0.1200%" height="15" fill="rgb(224,11,23)" fg:x="54471" fg:w="304"/><text x="21.7533%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (42 samples, 0.02%)</title><rect x="21.6067%" y="245" width="0.0166%" height="15" fill="rgb(232,99,1)" fg:x="54733" fg:w="42"/><text x="21.8567%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,692 samples, 0.67%)</title><rect x="20.9557%" y="405" width="0.6679%" height="15" fill="rgb(237,95,45)" fg:x="53084" fg:w="1692"/><text x="21.2057%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,692 samples, 0.67%)</title><rect x="20.9557%" y="389" width="0.6679%" height="15" fill="rgb(208,109,11)" fg:x="53084" fg:w="1692"/><text x="21.2057%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (404 samples, 0.16%)</title><rect x="21.4642%" y="373" width="0.1595%" height="15" fill="rgb(216,190,48)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (404 samples, 0.16%)</title><rect x="21.4642%" y="357" width="0.1595%" height="15" fill="rgb(251,171,36)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (404 samples, 0.16%)</title><rect x="21.4642%" y="341" width="0.1595%" height="15" fill="rgb(230,62,22)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (404 samples, 0.16%)</title><rect x="21.4642%" y="325" width="0.1595%" height="15" fill="rgb(225,114,35)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (404 samples, 0.16%)</title><rect x="21.4642%" y="309" width="0.1595%" height="15" fill="rgb(215,118,42)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (404 samples, 0.16%)</title><rect x="21.4642%" y="293" width="0.1595%" height="15" fill="rgb(243,119,21)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (404 samples, 0.16%)</title><rect x="21.4642%" y="277" width="0.1595%" height="15" fill="rgb(252,177,53)" fg:x="54372" fg:w="404"/><text x="21.7142%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.03%)</title><rect x="21.6912%" y="357" width="0.0264%" height="15" fill="rgb(237,209,29)" fg:x="54947" fg:w="67"/><text x="21.9412%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (62 samples, 0.02%)</title><rect x="21.6931%" y="341" width="0.0245%" height="15" fill="rgb(212,65,23)" fg:x="54952" fg:w="62"/><text x="21.9431%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (593 samples, 0.23%)</title><rect x="21.7176%" y="357" width="0.2341%" height="15" fill="rgb(230,222,46)" fg:x="55014" fg:w="593"/><text x="21.9676%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (593 samples, 0.23%)</title><rect x="21.7176%" y="341" width="0.2341%" height="15" fill="rgb(215,135,32)" fg:x="55014" fg:w="593"/><text x="21.9676%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (593 samples, 0.23%)</title><rect x="21.7176%" y="325" width="0.2341%" height="15" fill="rgb(246,101,22)" fg:x="55014" fg:w="593"/><text x="21.9676%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (593 samples, 0.23%)</title><rect x="21.7176%" y="309" width="0.2341%" height="15" fill="rgb(206,107,13)" fg:x="55014" fg:w="593"/><text x="21.9676%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (593 samples, 0.23%)</title><rect x="21.7176%" y="293" width="0.2341%" height="15" fill="rgb(250,100,44)" fg:x="55014" fg:w="593"/><text x="21.9676%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (169 samples, 0.07%)</title><rect x="21.9517%" y="357" width="0.0667%" height="15" fill="rgb(231,147,38)" fg:x="55607" fg:w="169"/><text x="22.2017%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (35 samples, 0.01%)</title><rect x="22.0184%" y="357" width="0.0138%" height="15" fill="rgb(229,8,40)" fg:x="55776" fg:w="35"/><text x="22.2684%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (41 samples, 0.02%)</title><rect x="22.0323%" y="357" width="0.0162%" height="15" fill="rgb(221,135,30)" fg:x="55811" fg:w="41"/><text x="22.2823%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (41 samples, 0.02%)</title><rect x="22.0323%" y="341" width="0.0162%" height="15" fill="rgb(249,193,18)" fg:x="55811" fg:w="41"/><text x="22.2823%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.02%)</title><rect x="22.0323%" y="325" width="0.0162%" height="15" fill="rgb(209,133,39)" fg:x="55811" fg:w="41"/><text x="22.2823%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (305 samples, 0.12%)</title><rect x="22.0484%" y="357" width="0.1204%" height="15" fill="rgb(232,100,14)" fg:x="55852" fg:w="305"/><text x="22.2984%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (305 samples, 0.12%)</title><rect x="22.0484%" y="341" width="0.1204%" height="15" fill="rgb(224,185,1)" fg:x="55852" fg:w="305"/><text x="22.2984%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (160 samples, 0.06%)</title><rect x="22.1688%" y="357" width="0.0632%" height="15" fill="rgb(223,139,8)" fg:x="56157" fg:w="160"/><text x="22.4188%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (160 samples, 0.06%)</title><rect x="22.1688%" y="341" width="0.0632%" height="15" fill="rgb(232,213,38)" fg:x="56157" fg:w="160"/><text x="22.4188%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (160 samples, 0.06%)</title><rect x="22.1688%" y="325" width="0.0632%" height="15" fill="rgb(207,94,22)" fg:x="56157" fg:w="160"/><text x="22.4188%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,572 samples, 0.62%)</title><rect x="21.6237%" y="373" width="0.6206%" height="15" fill="rgb(219,183,54)" fg:x="54776" fg:w="1572"/><text x="21.8737%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (31 samples, 0.01%)</title><rect x="22.2320%" y="357" width="0.0122%" height="15" fill="rgb(216,185,54)" fg:x="56317" fg:w="31"/><text x="22.4820%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,704 samples, 0.67%)</title><rect x="21.6237%" y="389" width="0.6727%" height="15" fill="rgb(254,217,39)" fg:x="54776" fg:w="1704"/><text x="21.8737%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (132 samples, 0.05%)</title><rect x="22.2442%" y="373" width="0.0521%" height="15" fill="rgb(240,178,23)" fg:x="56348" fg:w="132"/><text x="22.4942%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,430 samples, 1.35%)</title><rect x="20.9427%" y="453" width="1.3540%" height="15" fill="rgb(218,11,47)" fg:x="53051" fg:w="3430"/><text x="21.1927%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,430 samples, 1.35%)</title><rect x="20.9427%" y="437" width="1.3540%" height="15" fill="rgb(218,51,51)" fg:x="53051" fg:w="3430"/><text x="21.1927%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,430 samples, 1.35%)</title><rect x="20.9427%" y="421" width="1.3540%" height="15" fill="rgb(238,126,27)" fg:x="53051" fg:w="3430"/><text x="21.1927%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,705 samples, 0.67%)</title><rect x="21.6237%" y="405" width="0.6731%" height="15" fill="rgb(249,202,22)" fg:x="54776" fg:w="1705"/><text x="21.8737%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.01%)</title><rect x="22.3192%" y="389" width="0.0130%" height="15" fill="rgb(254,195,49)" fg:x="56538" fg:w="33"/><text x="22.5692%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (33 samples, 0.01%)</title><rect x="22.3192%" y="373" width="0.0130%" height="15" fill="rgb(208,123,14)" fg:x="56538" fg:w="33"/><text x="22.5692%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (139 samples, 0.05%)</title><rect x="22.2975%" y="421" width="0.0549%" height="15" fill="rgb(224,200,8)" fg:x="56483" fg:w="139"/><text x="22.5475%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (137 samples, 0.05%)</title><rect x="22.2983%" y="405" width="0.0541%" height="15" fill="rgb(217,61,36)" fg:x="56485" fg:w="137"/><text x="22.5483%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (37 samples, 0.01%)</title><rect x="22.3378%" y="389" width="0.0146%" height="15" fill="rgb(206,35,45)" fg:x="56585" fg:w="37"/><text x="22.5878%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (180 samples, 0.07%)</title><rect x="22.2967%" y="437" width="0.0711%" height="15" fill="rgb(217,65,33)" fg:x="56481" fg:w="180"/><text x="22.5467%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (39 samples, 0.02%)</title><rect x="22.3524%" y="421" width="0.0154%" height="15" fill="rgb(222,158,48)" fg:x="56622" fg:w="39"/><text x="22.6024%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (33 samples, 0.01%)</title><rect x="22.3548%" y="405" width="0.0130%" height="15" fill="rgb(254,2,54)" fg:x="56628" fg:w="33"/><text x="22.6048%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (16,350 samples, 6.45%)</title><rect x="15.9789%" y="469" width="6.4544%" height="15" fill="rgb(250,143,38)" fg:x="40477" fg:w="16350"/><text x="16.2289%" y="479.50">mut_bina..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (346 samples, 0.14%)</title><rect x="22.2967%" y="453" width="0.1366%" height="15" fill="rgb(248,25,0)" fg:x="56481" fg:w="346"/><text x="22.5467%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (166 samples, 0.07%)</title><rect x="22.3678%" y="437" width="0.0655%" height="15" fill="rgb(206,152,27)" fg:x="56661" fg:w="166"/><text x="22.6178%" y="447.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::dl_delim_idx (33 samples, 0.01%)</title><rect x="22.4333%" y="469" width="0.0130%" height="15" fill="rgb(240,77,30)" fg:x="56827" fg:w="33"/><text x="22.6833%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (80 samples, 0.03%)</title><rect x="22.4472%" y="469" width="0.0316%" height="15" fill="rgb(231,5,3)" fg:x="56862" fg:w="80"/><text x="22.6972%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (80 samples, 0.03%)</title><rect x="22.4472%" y="453" width="0.0316%" height="15" fill="rgb(207,226,32)" fg:x="56862" fg:w="80"/><text x="22.6972%" y="463.50"></text></g><g><title>core::ptr::read (50 samples, 0.02%)</title><rect x="22.4590%" y="437" width="0.0197%" height="15" fill="rgb(222,207,47)" fg:x="56892" fg:w="50"/><text x="22.7090%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_size (29 samples, 0.01%)</title><rect x="22.4787%" y="469" width="0.0114%" height="15" fill="rgb(229,115,45)" fg:x="56942" fg:w="29"/><text x="22.7287%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (29 samples, 0.01%)</title><rect x="22.4787%" y="453" width="0.0114%" height="15" fill="rgb(224,191,6)" fg:x="56942" fg:w="29"/><text x="22.7287%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (17,226 samples, 6.80%)</title><rect x="15.7065%" y="485" width="6.8002%" height="15" fill="rgb(230,227,24)" fg:x="39787" fg:w="17226"/><text x="15.9565%" y="495.50">project1:..</text></g><g><title>project1::solver::types::Lit::var (42 samples, 0.02%)</title><rect x="22.4902%" y="469" width="0.0166%" height="15" fill="rgb(228,80,19)" fg:x="56971" fg:w="42"/><text x="22.7402%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (42 samples, 0.02%)</title><rect x="22.4902%" y="453" width="0.0166%" height="15" fill="rgb(247,229,0)" fg:x="56971" fg:w="42"/><text x="22.7402%" y="463.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (41 samples, 0.02%)</title><rect x="22.5304%" y="469" width="0.0162%" height="15" fill="rgb(237,194,15)" fg:x="57073" fg:w="41"/><text x="22.7804%" y="479.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (41 samples, 0.02%)</title><rect x="22.5304%" y="453" width="0.0162%" height="15" fill="rgb(219,203,20)" fg:x="57073" fg:w="41"/><text x="22.7804%" y="463.50"></text></g><g><title>_int_free (72 samples, 0.03%)</title><rect x="22.5593%" y="277" width="0.0284%" height="15" fill="rgb(234,128,8)" fg:x="57146" fg:w="72"/><text x="22.8093%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (116 samples, 0.05%)</title><rect x="22.5494%" y="357" width="0.0458%" height="15" fill="rgb(248,202,8)" fg:x="57121" fg:w="116"/><text x="22.7994%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (115 samples, 0.05%)</title><rect x="22.5498%" y="341" width="0.0454%" height="15" fill="rgb(206,104,37)" fg:x="57122" fg:w="115"/><text x="22.7998%" y="351.50"></text></g><g><title>__rdl_dealloc (115 samples, 0.05%)</title><rect x="22.5498%" y="325" width="0.0454%" height="15" fill="rgb(223,8,27)" fg:x="57122" fg:w="115"/><text x="22.7998%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (115 samples, 0.05%)</title><rect x="22.5498%" y="309" width="0.0454%" height="15" fill="rgb(216,217,28)" fg:x="57122" fg:w="115"/><text x="22.7998%" y="319.50"></text></g><g><title>__GI___libc_free (115 samples, 0.05%)</title><rect x="22.5498%" y="293" width="0.0454%" height="15" fill="rgb(249,199,1)" fg:x="57122" fg:w="115"/><text x="22.7998%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (125 samples, 0.05%)</title><rect x="22.5490%" y="469" width="0.0493%" height="15" fill="rgb(240,85,17)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (125 samples, 0.05%)</title><rect x="22.5490%" y="453" width="0.0493%" height="15" fill="rgb(206,108,45)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (125 samples, 0.05%)</title><rect x="22.5490%" y="437" width="0.0493%" height="15" fill="rgb(245,210,41)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (125 samples, 0.05%)</title><rect x="22.5490%" y="421" width="0.0493%" height="15" fill="rgb(206,13,37)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.05%)</title><rect x="22.5490%" y="405" width="0.0493%" height="15" fill="rgb(250,61,18)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (125 samples, 0.05%)</title><rect x="22.5490%" y="389" width="0.0493%" height="15" fill="rgb(235,172,48)" fg:x="57120" fg:w="125"/><text x="22.7990%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (124 samples, 0.05%)</title><rect x="22.5494%" y="373" width="0.0490%" height="15" fill="rgb(249,201,17)" fg:x="57121" fg:w="124"/><text x="22.7994%" y="383.50"></text></g><g><title>log::max_level (30 samples, 0.01%)</title><rect x="22.5983%" y="469" width="0.0118%" height="15" fill="rgb(219,208,6)" fg:x="57245" fg:w="30"/><text x="22.8483%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.01%)</title><rect x="22.5983%" y="453" width="0.0118%" height="15" fill="rgb(248,31,23)" fg:x="57245" fg:w="30"/><text x="22.8483%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.01%)</title><rect x="22.5983%" y="437" width="0.0118%" height="15" fill="rgb(245,15,42)" fg:x="57245" fg:w="30"/><text x="22.8483%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (98 samples, 0.04%)</title><rect x="22.6165%" y="421" width="0.0387%" height="15" fill="rgb(222,217,39)" fg:x="57291" fg:w="98"/><text x="22.8665%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (34 samples, 0.01%)</title><rect x="22.6418%" y="405" width="0.0134%" height="15" fill="rgb(210,219,27)" fg:x="57355" fg:w="34"/><text x="22.8918%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (34 samples, 0.01%)</title><rect x="22.6418%" y="389" width="0.0134%" height="15" fill="rgb(252,166,36)" fg:x="57355" fg:w="34"/><text x="22.8918%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (134 samples, 0.05%)</title><rect x="22.6102%" y="469" width="0.0529%" height="15" fill="rgb(245,132,34)" fg:x="57275" fg:w="134"/><text x="22.8602%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (134 samples, 0.05%)</title><rect x="22.6102%" y="453" width="0.0529%" height="15" fill="rgb(236,54,3)" fg:x="57275" fg:w="134"/><text x="22.8602%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (118 samples, 0.05%)</title><rect x="22.6165%" y="437" width="0.0466%" height="15" fill="rgb(241,173,43)" fg:x="57291" fg:w="118"/><text x="22.8665%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (39 samples, 0.02%)</title><rect x="22.6631%" y="469" width="0.0154%" height="15" fill="rgb(215,190,9)" fg:x="57409" fg:w="39"/><text x="22.9131%" y="479.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (41 samples, 0.02%)</title><rect x="22.7606%" y="357" width="0.0162%" height="15" fill="rgb(242,101,16)" fg:x="57656" fg:w="41"/><text x="23.0106%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (68 samples, 0.03%)</title><rect x="22.7606%" y="421" width="0.0268%" height="15" fill="rgb(223,190,21)" fg:x="57656" fg:w="68"/><text x="23.0106%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (68 samples, 0.03%)</title><rect x="22.7606%" y="405" width="0.0268%" height="15" fill="rgb(215,228,25)" fg:x="57656" fg:w="68"/><text x="23.0106%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (68 samples, 0.03%)</title><rect x="22.7606%" y="389" width="0.0268%" height="15" fill="rgb(225,36,22)" fg:x="57656" fg:w="68"/><text x="23.0106%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (68 samples, 0.03%)</title><rect x="22.7606%" y="373" width="0.0268%" height="15" fill="rgb(251,106,46)" fg:x="57656" fg:w="68"/><text x="23.0106%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.01%)</title><rect x="22.7768%" y="357" width="0.0107%" height="15" fill="rgb(208,90,1)" fg:x="57697" fg:w="27"/><text x="23.0268%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.02%)</title><rect x="22.7874%" y="405" width="0.0189%" height="15" fill="rgb(243,10,4)" fg:x="57724" fg:w="48"/><text x="23.0374%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.03%)</title><rect x="22.8463%" y="341" width="0.0308%" height="15" fill="rgb(212,137,27)" fg:x="57873" fg:w="78"/><text x="23.0963%" y="351.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (64 samples, 0.03%)</title><rect x="22.8518%" y="325" width="0.0253%" height="15" fill="rgb(231,220,49)" fg:x="57887" fg:w="64"/><text x="23.1018%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.03%)</title><rect x="22.8518%" y="309" width="0.0253%" height="15" fill="rgb(237,96,20)" fg:x="57887" fg:w="64"/><text x="23.1018%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (62 samples, 0.02%)</title><rect x="22.8526%" y="293" width="0.0245%" height="15" fill="rgb(239,229,30)" fg:x="57889" fg:w="62"/><text x="23.1026%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.01%)</title><rect x="22.8771%" y="341" width="0.0146%" height="15" fill="rgb(219,65,33)" fg:x="57951" fg:w="37"/><text x="23.1271%" y="351.50"></text></g><g><title>_int_free (89 samples, 0.04%)</title><rect x="22.9015%" y="197" width="0.0351%" height="15" fill="rgb(243,134,7)" fg:x="58013" fg:w="89"/><text x="23.1515%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (134 samples, 0.05%)</title><rect x="22.8960%" y="277" width="0.0529%" height="15" fill="rgb(216,177,54)" fg:x="57999" fg:w="134"/><text x="23.1460%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (125 samples, 0.05%)</title><rect x="22.8996%" y="261" width="0.0493%" height="15" fill="rgb(211,160,20)" fg:x="58008" fg:w="125"/><text x="23.1496%" y="271.50"></text></g><g><title>__rdl_dealloc (125 samples, 0.05%)</title><rect x="22.8996%" y="245" width="0.0493%" height="15" fill="rgb(239,85,39)" fg:x="58008" fg:w="125"/><text x="23.1496%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (125 samples, 0.05%)</title><rect x="22.8996%" y="229" width="0.0493%" height="15" fill="rgb(232,125,22)" fg:x="58008" fg:w="125"/><text x="23.1496%" y="239.50"></text></g><g><title>__GI___libc_free (125 samples, 0.05%)</title><rect x="22.8996%" y="213" width="0.0493%" height="15" fill="rgb(244,57,34)" fg:x="58008" fg:w="125"/><text x="23.1496%" y="223.50"></text></g><g><title>arena_for_chunk (31 samples, 0.01%)</title><rect x="22.9367%" y="197" width="0.0122%" height="15" fill="rgb(214,203,32)" fg:x="58102" fg:w="31"/><text x="23.1867%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (146 samples, 0.06%)</title><rect x="22.8956%" y="341" width="0.0576%" height="15" fill="rgb(207,58,43)" fg:x="57998" fg:w="146"/><text x="23.1456%" y="351.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.06%)</title><rect x="22.8956%" y="325" width="0.0576%" height="15" fill="rgb(215,193,15)" fg:x="57998" fg:w="146"/><text x="23.1456%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (146 samples, 0.06%)</title><rect x="22.8956%" y="309" width="0.0576%" height="15" fill="rgb(232,15,44)" fg:x="57998" fg:w="146"/><text x="23.1456%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (145 samples, 0.06%)</title><rect x="22.8960%" y="293" width="0.0572%" height="15" fill="rgb(212,3,48)" fg:x="57999" fg:w="145"/><text x="23.1460%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (67 samples, 0.03%)</title><rect x="22.9532%" y="341" width="0.0264%" height="15" fill="rgb(218,128,7)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="351.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (67 samples, 0.03%)</title><rect x="22.9532%" y="325" width="0.0264%" height="15" fill="rgb(226,216,39)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (67 samples, 0.03%)</title><rect x="22.9532%" y="309" width="0.0264%" height="15" fill="rgb(243,47,51)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (67 samples, 0.03%)</title><rect x="22.9532%" y="293" width="0.0264%" height="15" fill="rgb(241,183,40)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (67 samples, 0.03%)</title><rect x="22.9532%" y="277" width="0.0264%" height="15" fill="rgb(231,217,32)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (67 samples, 0.03%)</title><rect x="22.9532%" y="261" width="0.0264%" height="15" fill="rgb(229,61,38)" fg:x="58144" fg:w="67"/><text x="23.2032%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (101 samples, 0.04%)</title><rect x="23.0259%" y="293" width="0.0399%" height="15" fill="rgb(225,210,5)" fg:x="58328" fg:w="101"/><text x="23.2759%" y="303.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (34 samples, 0.01%)</title><rect x="23.0523%" y="277" width="0.0134%" height="15" fill="rgb(231,79,45)" fg:x="58395" fg:w="34"/><text x="23.3023%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (386 samples, 0.15%)</title><rect x="22.9880%" y="309" width="0.1524%" height="15" fill="rgb(224,100,7)" fg:x="58232" fg:w="386"/><text x="23.2380%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (189 samples, 0.07%)</title><rect x="23.0657%" y="293" width="0.0746%" height="15" fill="rgb(241,198,18)" fg:x="58429" fg:w="189"/><text x="23.3157%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (189 samples, 0.07%)</title><rect x="23.0657%" y="277" width="0.0746%" height="15" fill="rgb(252,97,53)" fg:x="58429" fg:w="189"/><text x="23.3157%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (377 samples, 0.15%)</title><rect x="23.1404%" y="309" width="0.1488%" height="15" fill="rgb(220,88,7)" fg:x="58618" fg:w="377"/><text x="23.3904%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (328 samples, 0.13%)</title><rect x="23.1597%" y="293" width="0.1295%" height="15" fill="rgb(213,176,14)" fg:x="58667" fg:w="328"/><text x="23.4097%" y="303.50"></text></g><g><title>hashbrown::raw::is_full (328 samples, 0.13%)</title><rect x="23.1597%" y="277" width="0.1295%" height="15" fill="rgb(246,73,7)" fg:x="58667" fg:w="328"/><text x="23.4097%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (49 samples, 0.02%)</title><rect x="23.2892%" y="309" width="0.0193%" height="15" fill="rgb(245,64,36)" fg:x="58995" fg:w="49"/><text x="23.5392%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,288 samples, 0.51%)</title><rect x="22.9880%" y="325" width="0.5085%" height="15" fill="rgb(245,80,10)" fg:x="58232" fg:w="1288"/><text x="23.2380%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (476 samples, 0.19%)</title><rect x="23.3085%" y="309" width="0.1879%" height="15" fill="rgb(232,107,50)" fg:x="59044" fg:w="476"/><text x="23.5585%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (476 samples, 0.19%)</title><rect x="23.3085%" y="293" width="0.1879%" height="15" fill="rgb(253,3,0)" fg:x="59044" fg:w="476"/><text x="23.5585%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (476 samples, 0.19%)</title><rect x="23.3085%" y="277" width="0.1879%" height="15" fill="rgb(212,99,53)" fg:x="59044" fg:w="476"/><text x="23.5585%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (69 samples, 0.03%)</title><rect x="23.4964%" y="309" width="0.0272%" height="15" fill="rgb(249,111,54)" fg:x="59520" fg:w="69"/><text x="23.7464%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,404 samples, 0.55%)</title><rect x="22.9880%" y="341" width="0.5543%" height="15" fill="rgb(249,55,30)" fg:x="58232" fg:w="1404"/><text x="23.2380%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (116 samples, 0.05%)</title><rect x="23.4964%" y="325" width="0.0458%" height="15" fill="rgb(237,47,42)" fg:x="59520" fg:w="116"/><text x="23.7464%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (47 samples, 0.02%)</title><rect x="23.5237%" y="309" width="0.0186%" height="15" fill="rgb(211,20,18)" fg:x="59589" fg:w="47"/><text x="23.7737%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (43 samples, 0.02%)</title><rect x="23.5422%" y="309" width="0.0170%" height="15" fill="rgb(231,203,46)" fg:x="59636" fg:w="43"/><text x="23.7922%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (43 samples, 0.02%)</title><rect x="23.5422%" y="293" width="0.0170%" height="15" fill="rgb(237,142,3)" fg:x="59636" fg:w="43"/><text x="23.7922%" y="303.50"></text></g><g><title>__memset_evex_unaligned_erms (38 samples, 0.02%)</title><rect x="23.5442%" y="277" width="0.0150%" height="15" fill="rgb(241,107,1)" fg:x="59641" fg:w="38"/><text x="23.7942%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (35 samples, 0.01%)</title><rect x="23.5659%" y="293" width="0.0138%" height="15" fill="rgb(229,83,13)" fg:x="59696" fg:w="35"/><text x="23.8159%" y="303.50"></text></g><g><title>__rdl_alloc (447 samples, 0.18%)</title><rect x="23.5833%" y="229" width="0.1765%" height="15" fill="rgb(241,91,40)" fg:x="59740" fg:w="447"/><text x="23.8333%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (447 samples, 0.18%)</title><rect x="23.5833%" y="213" width="0.1765%" height="15" fill="rgb(225,3,45)" fg:x="59740" fg:w="447"/><text x="23.8333%" y="223.50"></text></g><g><title>__GI___libc_malloc (425 samples, 0.17%)</title><rect x="23.5920%" y="197" width="0.1678%" height="15" fill="rgb(244,223,14)" fg:x="59762" fg:w="425"/><text x="23.8420%" y="207.50"></text></g><g><title>tcache_get (284 samples, 0.11%)</title><rect x="23.6476%" y="181" width="0.1121%" height="15" fill="rgb(224,124,37)" fg:x="59903" fg:w="284"/><text x="23.8976%" y="191.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (469 samples, 0.19%)</title><rect x="23.5797%" y="293" width="0.1851%" height="15" fill="rgb(251,171,30)" fg:x="59731" fg:w="469"/><text x="23.8297%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (469 samples, 0.19%)</title><rect x="23.5797%" y="277" width="0.1851%" height="15" fill="rgb(236,46,54)" fg:x="59731" fg:w="469"/><text x="23.8297%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (469 samples, 0.19%)</title><rect x="23.5797%" y="261" width="0.1851%" height="15" fill="rgb(245,213,5)" fg:x="59731" fg:w="469"/><text x="23.8297%" y="271.50"></text></g><g><title>alloc::alloc::alloc (460 samples, 0.18%)</title><rect x="23.5833%" y="245" width="0.1816%" height="15" fill="rgb(230,144,27)" fg:x="59740" fg:w="460"/><text x="23.8333%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (532 samples, 0.21%)</title><rect x="23.5616%" y="309" width="0.2100%" height="15" fill="rgb(220,86,6)" fg:x="59685" fg:w="532"/><text x="23.8116%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,460 samples, 0.97%)</title><rect x="22.8419%" y="357" width="0.9711%" height="15" fill="rgb(240,20,13)" fg:x="57862" fg:w="2460"/><text x="23.0919%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (686 samples, 0.27%)</title><rect x="23.5422%" y="341" width="0.2708%" height="15" fill="rgb(217,89,34)" fg:x="59636" fg:w="686"/><text x="23.7922%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (686 samples, 0.27%)</title><rect x="23.5422%" y="325" width="0.2708%" height="15" fill="rgb(229,13,5)" fg:x="59636" fg:w="686"/><text x="23.7922%" y="335.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (105 samples, 0.04%)</title><rect x="23.7716%" y="309" width="0.0415%" height="15" fill="rgb(244,67,35)" fg:x="60217" fg:w="105"/><text x="24.0216%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (26 samples, 0.01%)</title><rect x="23.8028%" y="293" width="0.0103%" height="15" fill="rgb(221,40,2)" fg:x="60296" fg:w="26"/><text x="24.0528%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,575 samples, 1.02%)</title><rect x="22.8064%" y="405" width="1.0165%" height="15" fill="rgb(237,157,21)" fg:x="57772" fg:w="2575"/><text x="23.0564%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,556 samples, 1.01%)</title><rect x="22.8139%" y="389" width="1.0090%" height="15" fill="rgb(222,94,11)" fg:x="57791" fg:w="2556"/><text x="23.0639%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,537 samples, 1.00%)</title><rect x="22.8214%" y="373" width="1.0015%" height="15" fill="rgb(249,113,6)" fg:x="57810" fg:w="2537"/><text x="23.0714%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (261 samples, 0.10%)</title><rect x="23.8316%" y="389" width="0.1030%" height="15" fill="rgb(238,137,36)" fg:x="60369" fg:w="261"/><text x="24.0816%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (260 samples, 0.10%)</title><rect x="23.8320%" y="373" width="0.1026%" height="15" fill="rgb(210,102,26)" fg:x="60370" fg:w="260"/><text x="24.0820%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (186 samples, 0.07%)</title><rect x="23.9354%" y="389" width="0.0734%" height="15" fill="rgb(218,30,30)" fg:x="60632" fg:w="186"/><text x="24.1854%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (77 samples, 0.03%)</title><rect x="24.0088%" y="389" width="0.0304%" height="15" fill="rgb(214,67,26)" fg:x="60818" fg:w="77"/><text x="24.2588%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (77 samples, 0.03%)</title><rect x="24.0088%" y="373" width="0.0304%" height="15" fill="rgb(251,9,53)" fg:x="60818" fg:w="77"/><text x="24.2588%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (77 samples, 0.03%)</title><rect x="24.0088%" y="357" width="0.0304%" height="15" fill="rgb(228,204,25)" fg:x="60818" fg:w="77"/><text x="24.2588%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.03%)</title><rect x="24.0088%" y="341" width="0.0304%" height="15" fill="rgb(207,153,8)" fg:x="60818" fg:w="77"/><text x="24.2588%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (77 samples, 0.03%)</title><rect x="24.0088%" y="325" width="0.0304%" height="15" fill="rgb(242,9,16)" fg:x="60818" fg:w="77"/><text x="24.2588%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (88 samples, 0.03%)</title><rect x="24.0558%" y="373" width="0.0347%" height="15" fill="rgb(217,211,10)" fg:x="60937" fg:w="88"/><text x="24.3058%" y="383.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (72 samples, 0.03%)</title><rect x="24.0621%" y="357" width="0.0284%" height="15" fill="rgb(219,228,52)" fg:x="60953" fg:w="72"/><text x="24.3121%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (269 samples, 0.11%)</title><rect x="24.0392%" y="389" width="0.1062%" height="15" fill="rgb(231,92,29)" fg:x="60895" fg:w="269"/><text x="24.2892%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (139 samples, 0.05%)</title><rect x="24.0906%" y="373" width="0.0549%" height="15" fill="rgb(232,8,23)" fg:x="61025" fg:w="139"/><text x="24.3406%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (139 samples, 0.05%)</title><rect x="24.0906%" y="357" width="0.0549%" height="15" fill="rgb(216,211,34)" fg:x="61025" fg:w="139"/><text x="24.3406%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (170 samples, 0.07%)</title><rect x="24.1454%" y="373" width="0.0671%" height="15" fill="rgb(236,151,0)" fg:x="61164" fg:w="170"/><text x="24.3954%" y="383.50"></text></g><g><title>hashbrown::raw::is_full (43 samples, 0.02%)</title><rect x="24.1956%" y="357" width="0.0170%" height="15" fill="rgb(209,168,3)" fg:x="61291" fg:w="43"/><text x="24.4456%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (34 samples, 0.01%)</title><rect x="24.2129%" y="373" width="0.0134%" height="15" fill="rgb(208,129,28)" fg:x="61335" fg:w="34"/><text x="24.4629%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (34 samples, 0.01%)</title><rect x="24.2129%" y="357" width="0.0134%" height="15" fill="rgb(229,78,22)" fg:x="61335" fg:w="34"/><text x="24.4629%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (208 samples, 0.08%)</title><rect x="24.1454%" y="389" width="0.0821%" height="15" fill="rgb(228,187,13)" fg:x="61164" fg:w="208"/><text x="24.3954%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (33 samples, 0.01%)</title><rect x="24.2275%" y="389" width="0.0130%" height="15" fill="rgb(240,119,24)" fg:x="61372" fg:w="33"/><text x="24.4775%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.01%)</title><rect x="24.2418%" y="389" width="0.0130%" height="15" fill="rgb(209,194,42)" fg:x="61408" fg:w="33"/><text x="24.4918%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (179 samples, 0.07%)</title><rect x="24.2548%" y="389" width="0.0707%" height="15" fill="rgb(247,200,46)" fg:x="61441" fg:w="179"/><text x="24.5048%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (179 samples, 0.07%)</title><rect x="24.2548%" y="373" width="0.0707%" height="15" fill="rgb(218,76,16)" fg:x="61441" fg:w="179"/><text x="24.5048%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (179 samples, 0.07%)</title><rect x="24.2548%" y="357" width="0.0707%" height="15" fill="rgb(225,21,48)" fg:x="61441" fg:w="179"/><text x="24.5048%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (240 samples, 0.09%)</title><rect x="24.3254%" y="389" width="0.0947%" height="15" fill="rgb(239,223,50)" fg:x="61620" fg:w="240"/><text x="24.5754%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (240 samples, 0.09%)</title><rect x="24.3254%" y="373" width="0.0947%" height="15" fill="rgb(244,45,21)" fg:x="61620" fg:w="240"/><text x="24.5754%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4,182 samples, 1.65%)</title><rect x="22.7874%" y="421" width="1.6509%" height="15" fill="rgb(232,33,43)" fg:x="57724" fg:w="4182"/><text x="23.0374%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,559 samples, 0.62%)</title><rect x="23.8229%" y="405" width="0.6154%" height="15" fill="rgb(209,8,3)" fg:x="60347" fg:w="1559"/><text x="24.0729%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (46 samples, 0.02%)</title><rect x="24.4202%" y="389" width="0.0182%" height="15" fill="rgb(214,25,53)" fg:x="61860" fg:w="46"/><text x="24.6702%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (46 samples, 0.02%)</title><rect x="24.4202%" y="373" width="0.0182%" height="15" fill="rgb(254,186,54)" fg:x="61860" fg:w="46"/><text x="24.6702%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (46 samples, 0.02%)</title><rect x="24.4202%" y="357" width="0.0182%" height="15" fill="rgb(208,174,49)" fg:x="61860" fg:w="46"/><text x="24.6702%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (30 samples, 0.01%)</title><rect x="24.4462%" y="405" width="0.0118%" height="15" fill="rgb(233,191,51)" fg:x="61926" fg:w="30"/><text x="24.6962%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (30 samples, 0.01%)</title><rect x="24.4462%" y="389" width="0.0118%" height="15" fill="rgb(222,134,10)" fg:x="61926" fg:w="30"/><text x="24.6962%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 0.01%)</title><rect x="24.4462%" y="373" width="0.0118%" height="15" fill="rgb(230,226,20)" fg:x="61926" fg:w="30"/><text x="24.6962%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (30 samples, 0.01%)</title><rect x="24.4462%" y="357" width="0.0118%" height="15" fill="rgb(251,111,25)" fg:x="61926" fg:w="30"/><text x="24.6962%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (38 samples, 0.02%)</title><rect x="24.5110%" y="389" width="0.0150%" height="15" fill="rgb(224,40,46)" fg:x="62090" fg:w="38"/><text x="24.7610%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (74 samples, 0.03%)</title><rect x="24.5260%" y="389" width="0.0292%" height="15" fill="rgb(236,108,47)" fg:x="62128" fg:w="74"/><text x="24.7760%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (74 samples, 0.03%)</title><rect x="24.5260%" y="373" width="0.0292%" height="15" fill="rgb(234,93,0)" fg:x="62128" fg:w="74"/><text x="24.7760%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,649 samples, 1.84%)</title><rect x="22.7259%" y="437" width="1.8353%" height="15" fill="rgb(224,213,32)" fg:x="57568" fg:w="4649"/><text x="22.9759%" y="447.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (311 samples, 0.12%)</title><rect x="24.4383%" y="421" width="0.1228%" height="15" fill="rgb(251,11,48)" fg:x="61906" fg:w="311"/><text x="24.6883%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (261 samples, 0.10%)</title><rect x="24.4581%" y="405" width="0.1030%" height="15" fill="rgb(236,173,5)" fg:x="61956" fg:w="261"/><text x="24.7081%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (5,205 samples, 2.05%)</title><rect x="22.5068%" y="485" width="2.0548%" height="15" fill="rgb(230,95,12)" fg:x="57013" fg:w="5205"/><text x="22.7568%" y="495.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (4,770 samples, 1.88%)</title><rect x="22.6785%" y="469" width="1.8830%" height="15" fill="rgb(232,209,1)" fg:x="57448" fg:w="4770"/><text x="22.9285%" y="479.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (4,770 samples, 1.88%)</title><rect x="22.6785%" y="453" width="1.8830%" height="15" fill="rgb(232,6,1)" fg:x="57448" fg:w="4770"/><text x="22.9285%" y="463.50">h..</text></g><g><title>__irqentry_text_end (39 samples, 0.02%)</title><rect x="24.6113%" y="389" width="0.0154%" height="15" fill="rgb(210,224,50)" fg:x="62344" fg:w="39"/><text x="24.8613%" y="399.50"></text></g><g><title>charge_memcg (31 samples, 0.01%)</title><rect x="24.6709%" y="261" width="0.0122%" height="15" fill="rgb(228,127,35)" fg:x="62495" fg:w="31"/><text x="24.9209%" y="271.50"></text></g><g><title>get_mem_cgroup_from_mm (83 samples, 0.03%)</title><rect x="24.6831%" y="261" width="0.0328%" height="15" fill="rgb(245,102,45)" fg:x="62526" fg:w="83"/><text x="24.9331%" y="271.50"></text></g><g><title>__mem_cgroup_charge (132 samples, 0.05%)</title><rect x="24.6681%" y="277" width="0.0521%" height="15" fill="rgb(214,1,49)" fg:x="62488" fg:w="132"/><text x="24.9181%" y="287.50"></text></g><g><title>__mod_lruvec_page_state (30 samples, 0.01%)</title><rect x="24.7297%" y="261" width="0.0118%" height="15" fill="rgb(226,163,40)" fg:x="62644" fg:w="30"/><text x="24.9797%" y="271.50"></text></g><g><title>page_add_new_anon_rmap (33 samples, 0.01%)</title><rect x="24.7293%" y="277" width="0.0130%" height="15" fill="rgb(239,212,28)" fg:x="62643" fg:w="33"/><text x="24.9793%" y="287.50"></text></g><g><title>clear_page_erms (37 samples, 0.01%)</title><rect x="24.7526%" y="213" width="0.0146%" height="15" fill="rgb(220,20,13)" fg:x="62702" fg:w="37"/><text x="25.0026%" y="223.50"></text></g><g><title>__alloc_pages (86 samples, 0.03%)</title><rect x="24.7467%" y="245" width="0.0339%" height="15" fill="rgb(210,164,35)" fg:x="62687" fg:w="86"/><text x="24.9967%" y="255.50"></text></g><g><title>get_page_from_freelist (75 samples, 0.03%)</title><rect x="24.7510%" y="229" width="0.0296%" height="15" fill="rgb(248,109,41)" fg:x="62698" fg:w="75"/><text x="25.0010%" y="239.50"></text></g><g><title>rmqueue (32 samples, 0.01%)</title><rect x="24.7680%" y="213" width="0.0126%" height="15" fill="rgb(238,23,50)" fg:x="62741" fg:w="32"/><text x="25.0180%" y="223.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (30 samples, 0.01%)</title><rect x="24.7688%" y="197" width="0.0118%" height="15" fill="rgb(211,48,49)" fg:x="62743" fg:w="30"/><text x="25.0188%" y="207.50"></text></g><g><title>__folio_alloc (95 samples, 0.04%)</title><rect x="24.7467%" y="261" width="0.0375%" height="15" fill="rgb(223,36,21)" fg:x="62687" fg:w="95"/><text x="24.9967%" y="271.50"></text></g><g><title>do_anonymous_page (320 samples, 0.13%)</title><rect x="24.6582%" y="293" width="0.1263%" height="15" fill="rgb(207,123,46)" fg:x="62463" fg:w="320"/><text x="24.9082%" y="303.50"></text></g><g><title>vma_alloc_folio (106 samples, 0.04%)</title><rect x="24.7427%" y="277" width="0.0418%" height="15" fill="rgb(240,218,32)" fg:x="62677" fg:w="106"/><text x="24.9927%" y="287.50"></text></g><g><title>handle_pte_fault (350 samples, 0.14%)</title><rect x="24.6476%" y="309" width="0.1382%" height="15" fill="rgb(252,5,43)" fg:x="62436" fg:w="350"/><text x="24.8976%" y="319.50"></text></g><g><title>__handle_mm_fault (376 samples, 0.15%)</title><rect x="24.6381%" y="325" width="0.1484%" height="15" fill="rgb(252,84,19)" fg:x="62412" fg:w="376"/><text x="24.8881%" y="335.50"></text></g><g><title>count_memcg_events.constprop.0 (32 samples, 0.01%)</title><rect x="24.7865%" y="325" width="0.0126%" height="15" fill="rgb(243,152,39)" fg:x="62788" fg:w="32"/><text x="25.0365%" y="335.50"></text></g><g><title>__count_memcg_events (32 samples, 0.01%)</title><rect x="24.7865%" y="309" width="0.0126%" height="15" fill="rgb(234,160,15)" fg:x="62788" fg:w="32"/><text x="25.0365%" y="319.50"></text></g><g><title>handle_mm_fault (424 samples, 0.17%)</title><rect x="24.6345%" y="341" width="0.1674%" height="15" fill="rgb(237,34,20)" fg:x="62403" fg:w="424"/><text x="24.8845%" y="351.50"></text></g><g><title>do_user_addr_fault (451 samples, 0.18%)</title><rect x="24.6286%" y="357" width="0.1780%" height="15" fill="rgb(229,97,13)" fg:x="62388" fg:w="451"/><text x="24.8786%" y="367.50"></text></g><g><title>irqentry_exit (43 samples, 0.02%)</title><rect x="24.8071%" y="357" width="0.0170%" height="15" fill="rgb(234,71,50)" fg:x="62840" fg:w="43"/><text x="25.0571%" y="367.50"></text></g><g><title>irqentry_exit_to_user_mode (41 samples, 0.02%)</title><rect x="24.8078%" y="341" width="0.0162%" height="15" fill="rgb(253,155,4)" fg:x="62842" fg:w="41"/><text x="25.0578%" y="351.50"></text></g><g><title>asm_exc_page_fault (504 samples, 0.20%)</title><rect x="24.6267%" y="389" width="0.1990%" height="15" fill="rgb(222,185,37)" fg:x="62383" fg:w="504"/><text x="24.8767%" y="399.50"></text></g><g><title>exc_page_fault (504 samples, 0.20%)</title><rect x="24.6267%" y="373" width="0.1990%" height="15" fill="rgb(251,177,13)" fg:x="62383" fg:w="504"/><text x="24.8767%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (630 samples, 0.25%)</title><rect x="24.5880%" y="421" width="0.2487%" height="15" fill="rgb(250,179,40)" fg:x="62285" fg:w="630"/><text x="24.8380%" y="431.50"></text></g><g><title>core::ptr::write (617 samples, 0.24%)</title><rect x="24.5931%" y="405" width="0.2436%" height="15" fill="rgb(242,44,2)" fg:x="62298" fg:w="617"/><text x="24.8431%" y="415.50"></text></g><g><title>sync_regs (26 samples, 0.01%)</title><rect x="24.8264%" y="389" width="0.0103%" height="15" fill="rgb(216,177,13)" fg:x="62889" fg:w="26"/><text x="25.0764%" y="399.50"></text></g><g><title>asm_exc_page_fault (28 samples, 0.01%)</title><rect x="25.0080%" y="133" width="0.0111%" height="15" fill="rgb(216,106,43)" fg:x="63349" fg:w="28"/><text x="25.2580%" y="143.50"></text></g><g><title>exc_page_fault (28 samples, 0.01%)</title><rect x="25.0080%" y="117" width="0.0111%" height="15" fill="rgb(216,183,2)" fg:x="63349" fg:w="28"/><text x="25.2580%" y="127.50"></text></g><g><title>__x64_sys_mprotect (33 samples, 0.01%)</title><rect x="25.0198%" y="69" width="0.0130%" height="15" fill="rgb(249,75,3)" fg:x="63379" fg:w="33"/><text x="25.2698%" y="79.50"></text></g><g><title>do_mprotect_pkey (33 samples, 0.01%)</title><rect x="25.0198%" y="53" width="0.0130%" height="15" fill="rgb(219,67,39)" fg:x="63379" fg:w="33"/><text x="25.2698%" y="63.50"></text></g><g><title>mprotect_fixup (31 samples, 0.01%)</title><rect x="25.0206%" y="37" width="0.0122%" height="15" fill="rgb(253,228,2)" fg:x="63381" fg:w="31"/><text x="25.2706%" y="47.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (38 samples, 0.02%)</title><rect x="25.0190%" y="101" width="0.0150%" height="15" fill="rgb(235,138,27)" fg:x="63377" fg:w="38"/><text x="25.2690%" y="111.50"></text></g><g><title>do_syscall_64 (36 samples, 0.01%)</title><rect x="25.0198%" y="85" width="0.0142%" height="15" fill="rgb(236,97,51)" fg:x="63379" fg:w="36"/><text x="25.2698%" y="95.50"></text></g><g><title>_int_malloc (241 samples, 0.10%)</title><rect x="24.9409%" y="165" width="0.0951%" height="15" fill="rgb(240,80,30)" fg:x="63179" fg:w="241"/><text x="25.1909%" y="175.50"></text></g><g><title>sysmalloc (74 samples, 0.03%)</title><rect x="25.0068%" y="149" width="0.0292%" height="15" fill="rgb(230,178,19)" fg:x="63346" fg:w="74"/><text x="25.2568%" y="159.50"></text></g><g><title>grow_heap (43 samples, 0.02%)</title><rect x="25.0190%" y="133" width="0.0170%" height="15" fill="rgb(210,190,27)" fg:x="63377" fg:w="43"/><text x="25.2690%" y="143.50"></text></g><g><title>__GI___mprotect (43 samples, 0.02%)</title><rect x="25.0190%" y="117" width="0.0170%" height="15" fill="rgb(222,107,31)" fg:x="63377" fg:w="43"/><text x="25.2690%" y="127.50"></text></g><g><title>__rdl_alloc (530 samples, 0.21%)</title><rect x="24.8386%" y="213" width="0.2092%" height="15" fill="rgb(216,127,34)" fg:x="62920" fg:w="530"/><text x="25.0886%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (530 samples, 0.21%)</title><rect x="24.8386%" y="197" width="0.2092%" height="15" fill="rgb(234,116,52)" fg:x="62920" fg:w="530"/><text x="25.0886%" y="207.50"></text></g><g><title>__GI___libc_malloc (529 samples, 0.21%)</title><rect x="24.8390%" y="181" width="0.2088%" height="15" fill="rgb(222,124,15)" fg:x="62921" fg:w="529"/><text x="25.0890%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (532 samples, 0.21%)</title><rect x="24.8386%" y="261" width="0.2100%" height="15" fill="rgb(231,179,28)" fg:x="62920" fg:w="532"/><text x="25.0886%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (532 samples, 0.21%)</title><rect x="24.8386%" y="245" width="0.2100%" height="15" fill="rgb(226,93,45)" fg:x="62920" fg:w="532"/><text x="25.0886%" y="255.50"></text></g><g><title>alloc::alloc::alloc (532 samples, 0.21%)</title><rect x="24.8386%" y="229" width="0.2100%" height="15" fill="rgb(215,8,51)" fg:x="62920" fg:w="532"/><text x="25.0886%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (534 samples, 0.21%)</title><rect x="24.8382%" y="277" width="0.2108%" height="15" fill="rgb(223,106,5)" fg:x="62919" fg:w="534"/><text x="25.0882%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (535 samples, 0.21%)</title><rect x="24.8382%" y="309" width="0.2112%" height="15" fill="rgb(250,191,5)" fg:x="62919" fg:w="535"/><text x="25.0882%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (535 samples, 0.21%)</title><rect x="24.8382%" y="293" width="0.2112%" height="15" fill="rgb(242,132,44)" fg:x="62919" fg:w="535"/><text x="25.0882%" y="303.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (582 samples, 0.23%)</title><rect x="24.8371%" y="405" width="0.2298%" height="15" fill="rgb(251,152,29)" fg:x="62916" fg:w="582"/><text x="25.0871%" y="415.50"></text></g><g><title>project1::solver::clause::Clause::with_key (579 samples, 0.23%)</title><rect x="24.8382%" y="389" width="0.2286%" height="15" fill="rgb(218,179,5)" fg:x="62919" fg:w="579"/><text x="25.0882%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (579 samples, 0.23%)</title><rect x="24.8382%" y="373" width="0.2286%" height="15" fill="rgb(227,67,19)" fg:x="62919" fg:w="579"/><text x="25.0882%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (579 samples, 0.23%)</title><rect x="24.8382%" y="357" width="0.2286%" height="15" fill="rgb(233,119,31)" fg:x="62919" fg:w="579"/><text x="25.0882%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (579 samples, 0.23%)</title><rect x="24.8382%" y="341" width="0.2286%" height="15" fill="rgb(241,120,22)" fg:x="62919" fg:w="579"/><text x="25.0882%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (579 samples, 0.23%)</title><rect x="24.8382%" y="325" width="0.2286%" height="15" fill="rgb(224,102,30)" fg:x="62919" fg:w="579"/><text x="25.0882%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (44 samples, 0.02%)</title><rect x="25.0494%" y="309" width="0.0174%" height="15" fill="rgb(210,164,37)" fg:x="63454" fg:w="44"/><text x="25.2994%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.02%)</title><rect x="25.0494%" y="293" width="0.0174%" height="15" fill="rgb(226,191,16)" fg:x="63454" fg:w="44"/><text x="25.2994%" y="303.50"></text></g><g><title>__memcpy_evex_unaligned_erms (37 samples, 0.01%)</title><rect x="25.0522%" y="277" width="0.0146%" height="15" fill="rgb(214,40,45)" fg:x="63461" fg:w="37"/><text x="25.3022%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (1,281 samples, 0.51%)</title><rect x="24.5615%" y="485" width="0.5057%" height="15" fill="rgb(244,29,26)" fg:x="62218" fg:w="1281"/><text x="24.8115%" y="495.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (1,281 samples, 0.51%)</title><rect x="24.5615%" y="469" width="0.5057%" height="15" fill="rgb(216,16,5)" fg:x="62218" fg:w="1281"/><text x="24.8115%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (1,281 samples, 0.51%)</title><rect x="24.5615%" y="453" width="0.5057%" height="15" fill="rgb(249,76,35)" fg:x="62218" fg:w="1281"/><text x="24.8115%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (1,237 samples, 0.49%)</title><rect x="24.5789%" y="437" width="0.4883%" height="15" fill="rgb(207,11,44)" fg:x="62262" fg:w="1237"/><text x="24.8289%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (583 samples, 0.23%)</title><rect x="24.8371%" y="421" width="0.2301%" height="15" fill="rgb(228,190,49)" fg:x="62916" fg:w="583"/><text x="25.0871%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (89 samples, 0.04%)</title><rect x="25.0917%" y="453" width="0.0351%" height="15" fill="rgb(214,173,12)" fg:x="63561" fg:w="89"/><text x="25.3417%" y="463.50"></text></g><g><title>core::ptr::read (74 samples, 0.03%)</title><rect x="25.0976%" y="437" width="0.0292%" height="15" fill="rgb(218,26,35)" fg:x="63576" fg:w="74"/><text x="25.3476%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (75 samples, 0.03%)</title><rect x="25.1268%" y="341" width="0.0296%" height="15" fill="rgb(220,200,19)" fg:x="63650" fg:w="75"/><text x="25.3768%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (75 samples, 0.03%)</title><rect x="25.1268%" y="325" width="0.0296%" height="15" fill="rgb(239,95,49)" fg:x="63650" fg:w="75"/><text x="25.3768%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (75 samples, 0.03%)</title><rect x="25.1268%" y="309" width="0.0296%" height="15" fill="rgb(235,85,53)" fg:x="63650" fg:w="75"/><text x="25.3768%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (44 samples, 0.02%)</title><rect x="25.1391%" y="293" width="0.0174%" height="15" fill="rgb(233,133,31)" fg:x="63681" fg:w="44"/><text x="25.3891%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (108 samples, 0.04%)</title><rect x="25.1268%" y="373" width="0.0426%" height="15" fill="rgb(218,25,20)" fg:x="63650" fg:w="108"/><text x="25.3768%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (108 samples, 0.04%)</title><rect x="25.1268%" y="357" width="0.0426%" height="15" fill="rgb(252,210,38)" fg:x="63650" fg:w="108"/><text x="25.3768%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.01%)</title><rect x="25.1584%" y="341" width="0.0111%" height="15" fill="rgb(242,134,21)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (28 samples, 0.01%)</title><rect x="25.1584%" y="325" width="0.0111%" height="15" fill="rgb(213,28,48)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (28 samples, 0.01%)</title><rect x="25.1584%" y="309" width="0.0111%" height="15" fill="rgb(250,196,2)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (28 samples, 0.01%)</title><rect x="25.1584%" y="293" width="0.0111%" height="15" fill="rgb(227,5,17)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.01%)</title><rect x="25.1584%" y="277" width="0.0111%" height="15" fill="rgb(221,226,24)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28 samples, 0.01%)</title><rect x="25.1584%" y="261" width="0.0111%" height="15" fill="rgb(211,5,48)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28 samples, 0.01%)</title><rect x="25.1584%" y="245" width="0.0111%" height="15" fill="rgb(219,150,6)" fg:x="63730" fg:w="28"/><text x="25.4084%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (37 samples, 0.01%)</title><rect x="25.1773%" y="309" width="0.0146%" height="15" fill="rgb(251,46,16)" fg:x="63778" fg:w="37"/><text x="25.4273%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (37 samples, 0.01%)</title><rect x="25.1773%" y="293" width="0.0146%" height="15" fill="rgb(220,204,40)" fg:x="63778" fg:w="37"/><text x="25.4273%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (37 samples, 0.01%)</title><rect x="25.1773%" y="277" width="0.0146%" height="15" fill="rgb(211,85,2)" fg:x="63778" fg:w="37"/><text x="25.4273%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (37 samples, 0.01%)</title><rect x="25.1773%" y="261" width="0.0146%" height="15" fill="rgb(229,17,7)" fg:x="63778" fg:w="37"/><text x="25.4273%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (48 samples, 0.02%)</title><rect x="25.1773%" y="325" width="0.0189%" height="15" fill="rgb(239,72,28)" fg:x="63778" fg:w="48"/><text x="25.4273%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (106 samples, 0.04%)</title><rect x="25.1695%" y="357" width="0.0418%" height="15" fill="rgb(230,47,54)" fg:x="63758" fg:w="106"/><text x="25.4195%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (106 samples, 0.04%)</title><rect x="25.1695%" y="341" width="0.0418%" height="15" fill="rgb(214,50,8)" fg:x="63758" fg:w="106"/><text x="25.4195%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (85 samples, 0.03%)</title><rect x="25.2113%" y="325" width="0.0336%" height="15" fill="rgb(216,198,43)" fg:x="63864" fg:w="85"/><text x="25.4613%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (39 samples, 0.02%)</title><rect x="25.2295%" y="309" width="0.0154%" height="15" fill="rgb(234,20,35)" fg:x="63910" fg:w="39"/><text x="25.4795%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (39 samples, 0.02%)</title><rect x="25.2295%" y="293" width="0.0154%" height="15" fill="rgb(254,45,19)" fg:x="63910" fg:w="39"/><text x="25.4795%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (303 samples, 0.12%)</title><rect x="25.1268%" y="453" width="0.1196%" height="15" fill="rgb(219,14,44)" fg:x="63650" fg:w="303"/><text x="25.3768%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (303 samples, 0.12%)</title><rect x="25.1268%" y="437" width="0.1196%" height="15" fill="rgb(217,220,26)" fg:x="63650" fg:w="303"/><text x="25.3768%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (303 samples, 0.12%)</title><rect x="25.1268%" y="421" width="0.1196%" height="15" fill="rgb(213,158,28)" fg:x="63650" fg:w="303"/><text x="25.3768%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (303 samples, 0.12%)</title><rect x="25.1268%" y="405" width="0.1196%" height="15" fill="rgb(252,51,52)" fg:x="63650" fg:w="303"/><text x="25.3768%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (303 samples, 0.12%)</title><rect x="25.1268%" y="389" width="0.1196%" height="15" fill="rgb(246,89,16)" fg:x="63650" fg:w="303"/><text x="25.3768%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (195 samples, 0.08%)</title><rect x="25.1695%" y="373" width="0.0770%" height="15" fill="rgb(216,158,49)" fg:x="63758" fg:w="195"/><text x="25.4195%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (89 samples, 0.04%)</title><rect x="25.2113%" y="357" width="0.0351%" height="15" fill="rgb(236,107,19)" fg:x="63864" fg:w="89"/><text x="25.4613%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (89 samples, 0.04%)</title><rect x="25.2113%" y="341" width="0.0351%" height="15" fill="rgb(228,185,30)" fg:x="63864" fg:w="89"/><text x="25.4613%" y="351.50"></text></g><g><title>core::mem::swap (39 samples, 0.02%)</title><rect x="25.2464%" y="421" width="0.0154%" height="15" fill="rgb(246,134,8)" fg:x="63953" fg:w="39"/><text x="25.4964%" y="431.50"></text></g><g><title>core::mem::swap_simple (39 samples, 0.02%)</title><rect x="25.2464%" y="405" width="0.0154%" height="15" fill="rgb(214,143,50)" fg:x="63953" fg:w="39"/><text x="25.4964%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (149 samples, 0.06%)</title><rect x="25.2618%" y="421" width="0.0588%" height="15" fill="rgb(228,75,8)" fg:x="63992" fg:w="149"/><text x="25.5118%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="25.3376%" y="277" width="0.0347%" height="15" fill="rgb(207,175,4)" fg:x="64184" fg:w="88"/><text x="25.5876%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="25.3376%" y="261" width="0.0347%" height="15" fill="rgb(205,108,24)" fg:x="64184" fg:w="88"/><text x="25.5876%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (88 samples, 0.03%)</title><rect x="25.3376%" y="245" width="0.0347%" height="15" fill="rgb(244,120,49)" fg:x="64184" fg:w="88"/><text x="25.5876%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (53 samples, 0.02%)</title><rect x="25.3514%" y="229" width="0.0209%" height="15" fill="rgb(223,47,38)" fg:x="64219" fg:w="53"/><text x="25.6014%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (117 samples, 0.05%)</title><rect x="25.3376%" y="309" width="0.0462%" height="15" fill="rgb(229,179,11)" fg:x="64184" fg:w="117"/><text x="25.5876%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (117 samples, 0.05%)</title><rect x="25.3376%" y="293" width="0.0462%" height="15" fill="rgb(231,122,1)" fg:x="64184" fg:w="117"/><text x="25.5876%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (67 samples, 0.03%)</title><rect x="25.3921%" y="245" width="0.0264%" height="15" fill="rgb(245,119,9)" fg:x="64322" fg:w="67"/><text x="25.6421%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (67 samples, 0.03%)</title><rect x="25.3921%" y="229" width="0.0264%" height="15" fill="rgb(241,163,25)" fg:x="64322" fg:w="67"/><text x="25.6421%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (67 samples, 0.03%)</title><rect x="25.3921%" y="213" width="0.0264%" height="15" fill="rgb(217,214,3)" fg:x="64322" fg:w="67"/><text x="25.6421%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (67 samples, 0.03%)</title><rect x="25.3921%" y="197" width="0.0264%" height="15" fill="rgb(240,86,28)" fg:x="64322" fg:w="67"/><text x="25.6421%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (84 samples, 0.03%)</title><rect x="25.3921%" y="261" width="0.0332%" height="15" fill="rgb(215,47,9)" fg:x="64322" fg:w="84"/><text x="25.6421%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (134 samples, 0.05%)</title><rect x="25.3838%" y="277" width="0.0529%" height="15" fill="rgb(252,25,45)" fg:x="64301" fg:w="134"/><text x="25.6338%" y="287.50"></text></g><g><title>core::mem::drop (278 samples, 0.11%)</title><rect x="25.3278%" y="405" width="0.1097%" height="15" fill="rgb(251,164,9)" fg:x="64159" fg:w="278"/><text x="25.5778%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (278 samples, 0.11%)</title><rect x="25.3278%" y="389" width="0.1097%" height="15" fill="rgb(233,194,0)" fg:x="64159" fg:w="278"/><text x="25.5778%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (278 samples, 0.11%)</title><rect x="25.3278%" y="373" width="0.1097%" height="15" fill="rgb(249,111,24)" fg:x="64159" fg:w="278"/><text x="25.5778%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (254 samples, 0.10%)</title><rect x="25.3372%" y="357" width="0.1003%" height="15" fill="rgb(250,223,3)" fg:x="64183" fg:w="254"/><text x="25.5872%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (254 samples, 0.10%)</title><rect x="25.3372%" y="341" width="0.1003%" height="15" fill="rgb(236,178,37)" fg:x="64183" fg:w="254"/><text x="25.5872%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (254 samples, 0.10%)</title><rect x="25.3372%" y="325" width="0.1003%" height="15" fill="rgb(241,158,50)" fg:x="64183" fg:w="254"/><text x="25.5872%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (136 samples, 0.05%)</title><rect x="25.3838%" y="309" width="0.0537%" height="15" fill="rgb(213,121,41)" fg:x="64301" fg:w="136"/><text x="25.6338%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (136 samples, 0.05%)</title><rect x="25.3838%" y="293" width="0.0537%" height="15" fill="rgb(240,92,3)" fg:x="64301" fg:w="136"/><text x="25.6338%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.03%)</title><rect x="25.4632%" y="357" width="0.0343%" height="15" fill="rgb(205,123,3)" fg:x="64502" fg:w="87"/><text x="25.7132%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 0.01%)</title><rect x="25.5133%" y="213" width="0.0126%" height="15" fill="rgb(205,97,47)" fg:x="64629" fg:w="32"/><text x="25.7633%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (80 samples, 0.03%)</title><rect x="25.4975%" y="277" width="0.0316%" height="15" fill="rgb(247,152,14)" fg:x="64589" fg:w="80"/><text x="25.7475%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (80 samples, 0.03%)</title><rect x="25.4975%" y="261" width="0.0316%" height="15" fill="rgb(248,195,53)" fg:x="64589" fg:w="80"/><text x="25.7475%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (80 samples, 0.03%)</title><rect x="25.4975%" y="245" width="0.0316%" height="15" fill="rgb(226,201,16)" fg:x="64589" fg:w="80"/><text x="25.7475%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (60 samples, 0.02%)</title><rect x="25.5054%" y="229" width="0.0237%" height="15" fill="rgb(205,98,0)" fg:x="64609" fg:w="60"/><text x="25.7554%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (109 samples, 0.04%)</title><rect x="25.4975%" y="309" width="0.0430%" height="15" fill="rgb(214,191,48)" fg:x="64589" fg:w="109"/><text x="25.7475%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (109 samples, 0.04%)</title><rect x="25.4975%" y="293" width="0.0430%" height="15" fill="rgb(237,112,39)" fg:x="64589" fg:w="109"/><text x="25.7475%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (41 samples, 0.02%)</title><rect x="25.5405%" y="293" width="0.0162%" height="15" fill="rgb(247,203,27)" fg:x="64698" fg:w="41"/><text x="25.7905%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (41 samples, 0.02%)</title><rect x="25.5405%" y="277" width="0.0162%" height="15" fill="rgb(235,124,28)" fg:x="64698" fg:w="41"/><text x="25.7905%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (243 samples, 0.10%)</title><rect x="25.4632%" y="389" width="0.0959%" height="15" fill="rgb(208,207,46)" fg:x="64502" fg:w="243"/><text x="25.7132%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.10%)</title><rect x="25.4632%" y="373" width="0.0959%" height="15" fill="rgb(234,176,4)" fg:x="64502" fg:w="243"/><text x="25.7132%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (156 samples, 0.06%)</title><rect x="25.4975%" y="357" width="0.0616%" height="15" fill="rgb(230,133,28)" fg:x="64589" fg:w="156"/><text x="25.7475%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (156 samples, 0.06%)</title><rect x="25.4975%" y="341" width="0.0616%" height="15" fill="rgb(211,137,40)" fg:x="64589" fg:w="156"/><text x="25.7475%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (156 samples, 0.06%)</title><rect x="25.4975%" y="325" width="0.0616%" height="15" fill="rgb(254,35,13)" fg:x="64589" fg:w="156"/><text x="25.7475%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (47 samples, 0.02%)</title><rect x="25.5405%" y="309" width="0.0186%" height="15" fill="rgb(225,49,51)" fg:x="64698" fg:w="47"/><text x="25.7905%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (300 samples, 0.12%)</title><rect x="25.4442%" y="405" width="0.1184%" height="15" fill="rgb(251,10,15)" fg:x="64454" fg:w="300"/><text x="25.6942%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (31 samples, 0.01%)</title><rect x="25.6211%" y="245" width="0.0122%" height="15" fill="rgb(228,207,15)" fg:x="64902" fg:w="31"/><text x="25.8711%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.01%)</title><rect x="25.6333%" y="245" width="0.0103%" height="15" fill="rgb(241,99,19)" fg:x="64933" fg:w="26"/><text x="25.8833%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (96 samples, 0.04%)</title><rect x="25.6108%" y="261" width="0.0379%" height="15" fill="rgb(207,104,49)" fg:x="64876" fg:w="96"/><text x="25.8608%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (145 samples, 0.06%)</title><rect x="25.6905%" y="245" width="0.0572%" height="15" fill="rgb(234,99,18)" fg:x="65078" fg:w="145"/><text x="25.9405%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (504 samples, 0.20%)</title><rect x="25.5836%" y="309" width="0.1990%" height="15" fill="rgb(213,191,49)" fg:x="64807" fg:w="504"/><text x="25.8336%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (504 samples, 0.20%)</title><rect x="25.5836%" y="293" width="0.1990%" height="15" fill="rgb(210,226,19)" fg:x="64807" fg:w="504"/><text x="25.8336%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (504 samples, 0.20%)</title><rect x="25.5836%" y="277" width="0.1990%" height="15" fill="rgb(229,97,18)" fg:x="64807" fg:w="504"/><text x="25.8336%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (339 samples, 0.13%)</title><rect x="25.6487%" y="261" width="0.1338%" height="15" fill="rgb(211,167,15)" fg:x="64972" fg:w="339"/><text x="25.8987%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (88 samples, 0.03%)</title><rect x="25.7478%" y="245" width="0.0347%" height="15" fill="rgb(210,169,34)" fg:x="65223" fg:w="88"/><text x="25.9978%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (40 samples, 0.02%)</title><rect x="25.7825%" y="309" width="0.0158%" height="15" fill="rgb(241,121,31)" fg:x="65311" fg:w="40"/><text x="26.0325%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (40 samples, 0.02%)</title><rect x="25.8279%" y="181" width="0.0158%" height="15" fill="rgb(232,40,11)" fg:x="65426" fg:w="40"/><text x="26.0779%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (680 samples, 0.27%)</title><rect x="25.5836%" y="341" width="0.2684%" height="15" fill="rgb(205,86,26)" fg:x="64807" fg:w="680"/><text x="25.8336%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (680 samples, 0.27%)</title><rect x="25.5836%" y="325" width="0.2684%" height="15" fill="rgb(231,126,28)" fg:x="64807" fg:w="680"/><text x="25.8336%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (136 samples, 0.05%)</title><rect x="25.7983%" y="309" width="0.0537%" height="15" fill="rgb(219,221,18)" fg:x="65351" fg:w="136"/><text x="26.0483%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (136 samples, 0.05%)</title><rect x="25.7983%" y="293" width="0.0537%" height="15" fill="rgb(211,40,0)" fg:x="65351" fg:w="136"/><text x="26.0483%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (102 samples, 0.04%)</title><rect x="25.8117%" y="277" width="0.0403%" height="15" fill="rgb(239,85,43)" fg:x="65385" fg:w="102"/><text x="26.0617%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (102 samples, 0.04%)</title><rect x="25.8117%" y="261" width="0.0403%" height="15" fill="rgb(231,55,21)" fg:x="65385" fg:w="102"/><text x="26.0617%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (102 samples, 0.04%)</title><rect x="25.8117%" y="245" width="0.0403%" height="15" fill="rgb(225,184,43)" fg:x="65385" fg:w="102"/><text x="26.0617%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (102 samples, 0.04%)</title><rect x="25.8117%" y="229" width="0.0403%" height="15" fill="rgb(251,158,41)" fg:x="65385" fg:w="102"/><text x="26.0617%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (102 samples, 0.04%)</title><rect x="25.8117%" y="213" width="0.0403%" height="15" fill="rgb(234,159,37)" fg:x="65385" fg:w="102"/><text x="26.0617%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (89 samples, 0.04%)</title><rect x="25.8169%" y="197" width="0.0351%" height="15" fill="rgb(216,204,22)" fg:x="65398" fg:w="89"/><text x="26.0669%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.01%)</title><rect x="25.8765%" y="293" width="0.0103%" height="15" fill="rgb(214,17,3)" fg:x="65549" fg:w="26"/><text x="26.1265%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (167 samples, 0.07%)</title><rect x="25.8867%" y="277" width="0.0659%" height="15" fill="rgb(212,111,17)" fg:x="65575" fg:w="167"/><text x="26.1367%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (167 samples, 0.07%)</title><rect x="25.8867%" y="261" width="0.0659%" height="15" fill="rgb(221,157,24)" fg:x="65575" fg:w="167"/><text x="26.1367%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (167 samples, 0.07%)</title><rect x="25.8867%" y="245" width="0.0659%" height="15" fill="rgb(252,16,13)" fg:x="65575" fg:w="167"/><text x="26.1367%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (167 samples, 0.07%)</title><rect x="25.8867%" y="229" width="0.0659%" height="15" fill="rgb(221,62,2)" fg:x="65575" fg:w="167"/><text x="26.1367%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (213 samples, 0.08%)</title><rect x="25.8867%" y="293" width="0.0841%" height="15" fill="rgb(247,87,22)" fg:x="65575" fg:w="213"/><text x="26.1367%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (46 samples, 0.02%)</title><rect x="25.9527%" y="277" width="0.0182%" height="15" fill="rgb(215,73,9)" fg:x="65742" fg:w="46"/><text x="26.2027%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (46 samples, 0.02%)</title><rect x="25.9527%" y="261" width="0.0182%" height="15" fill="rgb(207,175,33)" fg:x="65742" fg:w="46"/><text x="26.2027%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (46 samples, 0.02%)</title><rect x="25.9527%" y="245" width="0.0182%" height="15" fill="rgb(243,129,54)" fg:x="65742" fg:w="46"/><text x="26.2027%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (46 samples, 0.02%)</title><rect x="25.9527%" y="229" width="0.0182%" height="15" fill="rgb(227,119,45)" fg:x="65742" fg:w="46"/><text x="26.2027%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (94 samples, 0.04%)</title><rect x="25.9708%" y="293" width="0.0371%" height="15" fill="rgb(205,109,36)" fg:x="65788" fg:w="94"/><text x="26.2208%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (72 samples, 0.03%)</title><rect x="26.0178%" y="293" width="0.0284%" height="15" fill="rgb(205,6,39)" fg:x="65907" fg:w="72"/><text x="26.2678%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (72 samples, 0.03%)</title><rect x="26.0178%" y="277" width="0.0284%" height="15" fill="rgb(221,32,16)" fg:x="65907" fg:w="72"/><text x="26.2678%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.03%)</title><rect x="26.0178%" y="261" width="0.0284%" height="15" fill="rgb(228,144,50)" fg:x="65907" fg:w="72"/><text x="26.2678%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (145 samples, 0.06%)</title><rect x="26.0462%" y="293" width="0.0572%" height="15" fill="rgb(229,201,53)" fg:x="65979" fg:w="145"/><text x="26.2962%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (145 samples, 0.06%)</title><rect x="26.0462%" y="277" width="0.0572%" height="15" fill="rgb(249,153,27)" fg:x="65979" fg:w="145"/><text x="26.2962%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (645 samples, 0.25%)</title><rect x="25.8520%" y="309" width="0.2546%" height="15" fill="rgb(227,106,25)" fg:x="65487" fg:w="645"/><text x="26.1020%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (671 samples, 0.26%)</title><rect x="25.8520%" y="325" width="0.2649%" height="15" fill="rgb(230,65,29)" fg:x="65487" fg:w="671"/><text x="26.1020%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (26 samples, 0.01%)</title><rect x="26.1066%" y="309" width="0.0103%" height="15" fill="rgb(221,57,46)" fg:x="66132" fg:w="26"/><text x="26.3566%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (1,407 samples, 0.56%)</title><rect x="25.5626%" y="405" width="0.5554%" height="15" fill="rgb(229,161,17)" fg:x="64754" fg:w="1407"/><text x="25.8126%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,359 samples, 0.54%)</title><rect x="25.5816%" y="389" width="0.5365%" height="15" fill="rgb(222,213,11)" fg:x="64802" fg:w="1359"/><text x="25.8316%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,359 samples, 0.54%)</title><rect x="25.5816%" y="373" width="0.5365%" height="15" fill="rgb(235,35,13)" fg:x="64802" fg:w="1359"/><text x="25.8316%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,359 samples, 0.54%)</title><rect x="25.5816%" y="357" width="0.5365%" height="15" fill="rgb(233,158,34)" fg:x="64802" fg:w="1359"/><text x="25.8316%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (674 samples, 0.27%)</title><rect x="25.8520%" y="341" width="0.2661%" height="15" fill="rgb(215,151,48)" fg:x="65487" fg:w="674"/><text x="26.1020%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,217 samples, 0.88%)</title><rect x="25.2464%" y="453" width="0.8752%" height="15" fill="rgb(229,84,14)" fg:x="63953" fg:w="2217"/><text x="25.4964%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (2,217 samples, 0.88%)</title><rect x="25.2464%" y="437" width="0.8752%" height="15" fill="rgb(229,68,14)" fg:x="63953" fg:w="2217"/><text x="25.4964%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (2,029 samples, 0.80%)</title><rect x="25.3206%" y="421" width="0.8010%" height="15" fill="rgb(243,106,26)" fg:x="64141" fg:w="2029"/><text x="25.5706%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2,628 samples, 1.04%)</title><rect x="25.0889%" y="469" width="1.0374%" height="15" fill="rgb(206,45,38)" fg:x="63554" fg:w="2628"/><text x="25.3389%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (2,677 samples, 1.06%)</title><rect x="25.0716%" y="485" width="1.0568%" height="15" fill="rgb(226,6,15)" fg:x="63510" fg:w="2677"/><text x="25.3216%" y="495.50"></text></g><g><title>__mem_cgroup_charge (27 samples, 0.01%)</title><rect x="26.1402%" y="117" width="0.0107%" height="15" fill="rgb(232,22,54)" fg:x="66217" fg:w="27"/><text x="26.3902%" y="127.50"></text></g><g><title>do_anonymous_page (63 samples, 0.02%)</title><rect x="26.1390%" y="133" width="0.0249%" height="15" fill="rgb(229,222,32)" fg:x="66214" fg:w="63"/><text x="26.3890%" y="143.50"></text></g><g><title>__handle_mm_fault (68 samples, 0.03%)</title><rect x="26.1374%" y="165" width="0.0268%" height="15" fill="rgb(228,62,29)" fg:x="66210" fg:w="68"/><text x="26.3874%" y="175.50"></text></g><g><title>handle_pte_fault (66 samples, 0.03%)</title><rect x="26.1382%" y="149" width="0.0261%" height="15" fill="rgb(251,103,34)" fg:x="66212" fg:w="66"/><text x="26.3882%" y="159.50"></text></g><g><title>do_user_addr_fault (73 samples, 0.03%)</title><rect x="26.1370%" y="197" width="0.0288%" height="15" fill="rgb(233,12,30)" fg:x="66209" fg:w="73"/><text x="26.3870%" y="207.50"></text></g><g><title>handle_mm_fault (72 samples, 0.03%)</title><rect x="26.1374%" y="181" width="0.0284%" height="15" fill="rgb(238,52,0)" fg:x="66210" fg:w="72"/><text x="26.3874%" y="191.50"></text></g><g><title>asm_exc_page_fault (84 samples, 0.03%)</title><rect x="26.1362%" y="229" width="0.0332%" height="15" fill="rgb(223,98,5)" fg:x="66207" fg:w="84"/><text x="26.3862%" y="239.50"></text></g><g><title>exc_page_fault (83 samples, 0.03%)</title><rect x="26.1366%" y="213" width="0.0328%" height="15" fill="rgb(228,75,37)" fg:x="66208" fg:w="83"/><text x="26.3866%" y="223.50"></text></g><g><title>perf_iterate_ctx (36 samples, 0.01%)</title><rect x="26.1777%" y="69" width="0.0142%" height="15" fill="rgb(205,115,49)" fg:x="66312" fg:w="36"/><text x="26.4277%" y="79.50"></text></g><g><title>perf_event_mmap_event (39 samples, 0.02%)</title><rect x="26.1773%" y="101" width="0.0154%" height="15" fill="rgb(250,154,43)" fg:x="66311" fg:w="39"/><text x="26.4273%" y="111.50"></text></g><g><title>perf_iterate_sb (38 samples, 0.02%)</title><rect x="26.1777%" y="85" width="0.0150%" height="15" fill="rgb(226,43,29)" fg:x="66312" fg:w="38"/><text x="26.4277%" y="95.50"></text></g><g><title>perf_event_mmap (42 samples, 0.02%)</title><rect x="26.1769%" y="117" width="0.0166%" height="15" fill="rgb(249,228,39)" fg:x="66310" fg:w="42"/><text x="26.4269%" y="127.50"></text></g><g><title>__x64_sys_mprotect (67 samples, 0.03%)</title><rect x="26.1706%" y="165" width="0.0264%" height="15" fill="rgb(216,79,43)" fg:x="66294" fg:w="67"/><text x="26.4206%" y="175.50"></text></g><g><title>do_mprotect_pkey (67 samples, 0.03%)</title><rect x="26.1706%" y="149" width="0.0264%" height="15" fill="rgb(228,95,12)" fg:x="66294" fg:w="67"/><text x="26.4206%" y="159.50"></text></g><g><title>mprotect_fixup (59 samples, 0.02%)</title><rect x="26.1737%" y="133" width="0.0233%" height="15" fill="rgb(249,221,15)" fg:x="66302" fg:w="59"/><text x="26.4237%" y="143.50"></text></g><g><title>do_syscall_64 (76 samples, 0.03%)</title><rect x="26.1706%" y="181" width="0.0300%" height="15" fill="rgb(233,34,13)" fg:x="66294" fg:w="76"/><text x="26.4206%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (79 samples, 0.03%)</title><rect x="26.1698%" y="197" width="0.0312%" height="15" fill="rgb(214,103,39)" fg:x="66292" fg:w="79"/><text x="26.4198%" y="207.50"></text></g><g><title>grow_heap (92 samples, 0.04%)</title><rect x="26.1694%" y="229" width="0.0363%" height="15" fill="rgb(251,126,39)" fg:x="66291" fg:w="92"/><text x="26.4194%" y="239.50"></text></g><g><title>__GI___mprotect (92 samples, 0.04%)</title><rect x="26.1694%" y="213" width="0.0363%" height="15" fill="rgb(214,216,36)" fg:x="66291" fg:w="92"/><text x="26.4194%" y="223.50"></text></g><g><title>__GI___libc_malloc (193 samples, 0.08%)</title><rect x="26.1303%" y="277" width="0.0762%" height="15" fill="rgb(220,221,8)" fg:x="66192" fg:w="193"/><text x="26.3803%" y="287.50"></text></g><g><title>_int_malloc (193 samples, 0.08%)</title><rect x="26.1303%" y="261" width="0.0762%" height="15" fill="rgb(240,216,3)" fg:x="66192" fg:w="193"/><text x="26.3803%" y="271.50"></text></g><g><title>sysmalloc (192 samples, 0.08%)</title><rect x="26.1307%" y="245" width="0.0758%" height="15" fill="rgb(232,218,17)" fg:x="66193" fg:w="192"/><text x="26.3807%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (196 samples, 0.08%)</title><rect x="26.1299%" y="405" width="0.0774%" height="15" fill="rgb(229,163,45)" fg:x="66191" fg:w="196"/><text x="26.3799%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (196 samples, 0.08%)</title><rect x="26.1299%" y="389" width="0.0774%" height="15" fill="rgb(231,110,42)" fg:x="66191" fg:w="196"/><text x="26.3799%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (196 samples, 0.08%)</title><rect x="26.1299%" y="373" width="0.0774%" height="15" fill="rgb(208,170,48)" fg:x="66191" fg:w="196"/><text x="26.3799%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (195 samples, 0.08%)</title><rect x="26.1303%" y="357" width="0.0770%" height="15" fill="rgb(239,116,25)" fg:x="66192" fg:w="195"/><text x="26.3803%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (195 samples, 0.08%)</title><rect x="26.1303%" y="341" width="0.0770%" height="15" fill="rgb(219,200,50)" fg:x="66192" fg:w="195"/><text x="26.3803%" y="351.50"></text></g><g><title>alloc::alloc::alloc (195 samples, 0.08%)</title><rect x="26.1303%" y="325" width="0.0770%" height="15" fill="rgb(245,200,0)" fg:x="66192" fg:w="195"/><text x="26.3803%" y="335.50"></text></g><g><title>__rdl_alloc (195 samples, 0.08%)</title><rect x="26.1303%" y="309" width="0.0770%" height="15" fill="rgb(245,119,33)" fg:x="66192" fg:w="195"/><text x="26.3803%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (195 samples, 0.08%)</title><rect x="26.1303%" y="293" width="0.0770%" height="15" fill="rgb(231,125,12)" fg:x="66192" fg:w="195"/><text x="26.3803%" y="303.50"></text></g><g><title>__irqentry_text_end (26 samples, 0.01%)</title><rect x="26.2183%" y="357" width="0.0103%" height="15" fill="rgb(216,96,41)" fg:x="66415" fg:w="26"/><text x="26.4683%" y="367.50"></text></g><g><title>charge_memcg (53 samples, 0.02%)</title><rect x="26.2480%" y="229" width="0.0209%" height="15" fill="rgb(248,43,45)" fg:x="66490" fg:w="53"/><text x="26.4980%" y="239.50"></text></g><g><title>__mem_cgroup_charge (75 samples, 0.03%)</title><rect x="26.2460%" y="245" width="0.0296%" height="15" fill="rgb(217,222,7)" fg:x="66485" fg:w="75"/><text x="26.4960%" y="255.50"></text></g><g><title>__alloc_pages (57 samples, 0.02%)</title><rect x="26.2851%" y="213" width="0.0225%" height="15" fill="rgb(233,28,6)" fg:x="66584" fg:w="57"/><text x="26.5351%" y="223.50"></text></g><g><title>get_page_from_freelist (51 samples, 0.02%)</title><rect x="26.2874%" y="197" width="0.0201%" height="15" fill="rgb(231,218,15)" fg:x="66590" fg:w="51"/><text x="26.5374%" y="207.50"></text></g><g><title>__folio_alloc (59 samples, 0.02%)</title><rect x="26.2847%" y="229" width="0.0233%" height="15" fill="rgb(226,171,48)" fg:x="66583" fg:w="59"/><text x="26.5347%" y="239.50"></text></g><g><title>do_anonymous_page (170 samples, 0.07%)</title><rect x="26.2420%" y="261" width="0.0671%" height="15" fill="rgb(235,201,9)" fg:x="66475" fg:w="170"/><text x="26.4920%" y="271.50"></text></g><g><title>vma_alloc_folio (68 samples, 0.03%)</title><rect x="26.2823%" y="245" width="0.0268%" height="15" fill="rgb(217,80,15)" fg:x="66577" fg:w="68"/><text x="26.5323%" y="255.50"></text></g><g><title>__handle_mm_fault (193 samples, 0.08%)</title><rect x="26.2333%" y="293" width="0.0762%" height="15" fill="rgb(219,152,8)" fg:x="66453" fg:w="193"/><text x="26.4833%" y="303.50"></text></g><g><title>handle_pte_fault (189 samples, 0.07%)</title><rect x="26.2349%" y="277" width="0.0746%" height="15" fill="rgb(243,107,38)" fg:x="66457" fg:w="189"/><text x="26.4849%" y="287.50"></text></g><g><title>do_user_addr_fault (211 samples, 0.08%)</title><rect x="26.2294%" y="325" width="0.0833%" height="15" fill="rgb(231,17,5)" fg:x="66443" fg:w="211"/><text x="26.4794%" y="335.50"></text></g><g><title>handle_mm_fault (202 samples, 0.08%)</title><rect x="26.2330%" y="309" width="0.0797%" height="15" fill="rgb(209,25,54)" fg:x="66452" fg:w="202"/><text x="26.4830%" y="319.50"></text></g><g><title>irqentry_exit (36 samples, 0.01%)</title><rect x="26.3131%" y="325" width="0.0142%" height="15" fill="rgb(219,0,2)" fg:x="66655" fg:w="36"/><text x="26.5631%" y="335.50"></text></g><g><title>irqentry_exit_to_user_mode (36 samples, 0.01%)</title><rect x="26.3131%" y="309" width="0.0142%" height="15" fill="rgb(246,9,5)" fg:x="66655" fg:w="36"/><text x="26.5631%" y="319.50"></text></g><g><title>asm_exc_page_fault (253 samples, 0.10%)</title><rect x="26.2286%" y="357" width="0.0999%" height="15" fill="rgb(226,159,4)" fg:x="66441" fg:w="253"/><text x="26.4786%" y="367.50"></text></g><g><title>exc_page_fault (253 samples, 0.10%)</title><rect x="26.2286%" y="341" width="0.0999%" height="15" fill="rgb(219,175,34)" fg:x="66441" fg:w="253"/><text x="26.4786%" y="351.50"></text></g><g><title>error_entry (27 samples, 0.01%)</title><rect x="26.3293%" y="357" width="0.0107%" height="15" fill="rgb(236,10,46)" fg:x="66696" fg:w="27"/><text x="26.5793%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (549 samples, 0.22%)</title><rect x="26.1299%" y="469" width="0.2167%" height="15" fill="rgb(240,211,16)" fg:x="66191" fg:w="549"/><text x="26.3799%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (549 samples, 0.22%)</title><rect x="26.1299%" y="453" width="0.2167%" height="15" fill="rgb(205,3,43)" fg:x="66191" fg:w="549"/><text x="26.3799%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (549 samples, 0.22%)</title><rect x="26.1299%" y="437" width="0.2167%" height="15" fill="rgb(245,7,22)" fg:x="66191" fg:w="549"/><text x="26.3799%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (549 samples, 0.22%)</title><rect x="26.1299%" y="421" width="0.2167%" height="15" fill="rgb(239,132,32)" fg:x="66191" fg:w="549"/><text x="26.3799%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (353 samples, 0.14%)</title><rect x="26.2073%" y="405" width="0.1394%" height="15" fill="rgb(228,202,34)" fg:x="66387" fg:w="353"/><text x="26.4573%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (353 samples, 0.14%)</title><rect x="26.2073%" y="389" width="0.1394%" height="15" fill="rgb(254,200,22)" fg:x="66387" fg:w="353"/><text x="26.4573%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (346 samples, 0.14%)</title><rect x="26.2101%" y="373" width="0.1366%" height="15" fill="rgb(219,10,39)" fg:x="66394" fg:w="346"/><text x="26.4601%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (140 samples, 0.06%)</title><rect x="26.4418%" y="405" width="0.0553%" height="15" fill="rgb(226,210,39)" fg:x="66981" fg:w="140"/><text x="26.6918%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (140 samples, 0.06%)</title><rect x="26.4418%" y="389" width="0.0553%" height="15" fill="rgb(208,219,16)" fg:x="66981" fg:w="140"/><text x="26.6918%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (170 samples, 0.07%)</title><rect x="26.4418%" y="437" width="0.0671%" height="15" fill="rgb(216,158,51)" fg:x="66981" fg:w="170"/><text x="26.6918%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (170 samples, 0.07%)</title><rect x="26.4418%" y="421" width="0.0671%" height="15" fill="rgb(233,14,44)" fg:x="66981" fg:w="170"/><text x="26.6918%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (30 samples, 0.01%)</title><rect x="26.4970%" y="405" width="0.0118%" height="15" fill="rgb(237,97,39)" fg:x="67121" fg:w="30"/><text x="26.7470%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (30 samples, 0.01%)</title><rect x="26.4970%" y="389" width="0.0118%" height="15" fill="rgb(218,198,43)" fg:x="67121" fg:w="30"/><text x="26.7470%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (404 samples, 0.16%)</title><rect x="26.3553%" y="453" width="0.1595%" height="15" fill="rgb(231,104,20)" fg:x="66762" fg:w="404"/><text x="26.6053%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (437 samples, 0.17%)</title><rect x="26.3466%" y="469" width="0.1725%" height="15" fill="rgb(254,36,13)" fg:x="66740" fg:w="437"/><text x="26.5966%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (310 samples, 0.12%)</title><rect x="26.7035%" y="341" width="0.1224%" height="15" fill="rgb(248,14,50)" fg:x="67644" fg:w="310"/><text x="26.9535%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (310 samples, 0.12%)</title><rect x="26.7035%" y="325" width="0.1224%" height="15" fill="rgb(217,107,29)" fg:x="67644" fg:w="310"/><text x="26.9535%" y="335.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (317 samples, 0.13%)</title><rect x="26.7031%" y="373" width="0.1251%" height="15" fill="rgb(251,169,33)" fg:x="67643" fg:w="317"/><text x="26.9531%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (317 samples, 0.13%)</title><rect x="26.7031%" y="357" width="0.1251%" height="15" fill="rgb(217,108,32)" fg:x="67643" fg:w="317"/><text x="26.9531%" y="367.50"></text></g><g><title>core::slice::sort::find_streak (594 samples, 0.23%)</title><rect x="26.5950%" y="421" width="0.2345%" height="15" fill="rgb(219,66,42)" fg:x="67369" fg:w="594"/><text x="26.8450%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (569 samples, 0.22%)</title><rect x="26.6048%" y="405" width="0.2246%" height="15" fill="rgb(206,180,7)" fg:x="67394" fg:w="569"/><text x="26.8548%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (545 samples, 0.22%)</title><rect x="26.6143%" y="389" width="0.2151%" height="15" fill="rgb(208,226,31)" fg:x="67418" fg:w="545"/><text x="26.8643%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (93 samples, 0.04%)</title><rect x="26.9759%" y="389" width="0.0367%" height="15" fill="rgb(218,26,49)" fg:x="68334" fg:w="93"/><text x="27.2259%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (78 samples, 0.03%)</title><rect x="27.5988%" y="341" width="0.0308%" height="15" fill="rgb(233,197,48)" fg:x="69912" fg:w="78"/><text x="27.8488%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1,934 samples, 0.76%)</title><rect x="27.6296%" y="341" width="0.7635%" height="15" fill="rgb(252,181,51)" fg:x="69990" fg:w="1934"/><text x="27.8796%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1,934 samples, 0.76%)</title><rect x="27.6296%" y="325" width="0.7635%" height="15" fill="rgb(253,90,19)" fg:x="69990" fg:w="1934"/><text x="27.8796%" y="335.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (2,178 samples, 0.86%)</title><rect x="27.5988%" y="373" width="0.8598%" height="15" fill="rgb(215,171,30)" fg:x="69912" fg:w="2178"/><text x="27.8488%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (2,178 samples, 0.86%)</title><rect x="27.5988%" y="357" width="0.8598%" height="15" fill="rgb(214,222,9)" fg:x="69912" fg:w="2178"/><text x="27.8488%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (166 samples, 0.07%)</title><rect x="28.3931%" y="341" width="0.0655%" height="15" fill="rgb(223,3,22)" fg:x="71924" fg:w="166"/><text x="28.6431%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (166 samples, 0.07%)</title><rect x="28.3931%" y="325" width="0.0655%" height="15" fill="rgb(225,196,46)" fg:x="71924" fg:w="166"/><text x="28.6431%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (94 samples, 0.04%)</title><rect x="28.4590%" y="373" width="0.0371%" height="15" fill="rgb(209,110,37)" fg:x="72091" fg:w="94"/><text x="28.7090%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (4,024 samples, 1.59%)</title><rect x="26.9759%" y="405" width="1.5885%" height="15" fill="rgb(249,89,12)" fg:x="68334" fg:w="4024"/><text x="27.2259%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3,931 samples, 1.55%)</title><rect x="27.0126%" y="389" width="1.5518%" height="15" fill="rgb(226,27,33)" fg:x="68427" fg:w="3931"/><text x="27.2626%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (171 samples, 0.07%)</title><rect x="28.4969%" y="373" width="0.0675%" height="15" fill="rgb(213,82,22)" fg:x="72187" fg:w="171"/><text x="28.7469%" y="383.50"></text></g><g><title>__mem_cgroup_charge (45 samples, 0.02%)</title><rect x="28.8771%" y="261" width="0.0178%" height="15" fill="rgb(248,140,0)" fg:x="73150" fg:w="45"/><text x="29.1271%" y="271.50"></text></g><g><title>do_anonymous_page (86 samples, 0.03%)</title><rect x="28.8763%" y="277" width="0.0339%" height="15" fill="rgb(228,106,3)" fg:x="73148" fg:w="86"/><text x="29.1263%" y="287.50"></text></g><g><title>__handle_mm_fault (92 samples, 0.04%)</title><rect x="28.8743%" y="309" width="0.0363%" height="15" fill="rgb(209,23,37)" fg:x="73143" fg:w="92"/><text x="29.1243%" y="319.50"></text></g><g><title>handle_pte_fault (89 samples, 0.04%)</title><rect x="28.8755%" y="293" width="0.0351%" height="15" fill="rgb(241,93,50)" fg:x="73146" fg:w="89"/><text x="29.1255%" y="303.50"></text></g><g><title>handle_mm_fault (97 samples, 0.04%)</title><rect x="28.8739%" y="325" width="0.0383%" height="15" fill="rgb(253,46,43)" fg:x="73142" fg:w="97"/><text x="29.1239%" y="335.50"></text></g><g><title>do_user_addr_fault (98 samples, 0.04%)</title><rect x="28.8739%" y="341" width="0.0387%" height="15" fill="rgb(226,206,43)" fg:x="73142" fg:w="98"/><text x="29.1239%" y="351.50"></text></g><g><title>asm_exc_page_fault (103 samples, 0.04%)</title><rect x="28.8735%" y="373" width="0.0407%" height="15" fill="rgb(217,54,7)" fg:x="73141" fg:w="103"/><text x="29.1235%" y="383.50"></text></g><g><title>exc_page_fault (102 samples, 0.04%)</title><rect x="28.8739%" y="357" width="0.0403%" height="15" fill="rgb(223,5,52)" fg:x="73142" fg:w="102"/><text x="29.1239%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (276 samples, 0.11%)</title><rect x="28.8080%" y="389" width="0.1090%" height="15" fill="rgb(206,52,46)" fg:x="72975" fg:w="276"/><text x="29.0580%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (894 samples, 0.35%)</title><rect x="28.5648%" y="405" width="0.3529%" height="15" fill="rgb(253,136,11)" fg:x="72359" fg:w="894"/><text x="28.8148%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (113 samples, 0.04%)</title><rect x="28.9260%" y="405" width="0.0446%" height="15" fill="rgb(208,106,33)" fg:x="73274" fg:w="113"/><text x="29.1760%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (71 samples, 0.03%)</title><rect x="28.9706%" y="389" width="0.0280%" height="15" fill="rgb(206,54,4)" fg:x="73387" fg:w="71"/><text x="29.2206%" y="399.50"></text></g><g><title>core::slice::sort::merge (5,522 samples, 2.18%)</title><rect x="26.8294%" y="421" width="2.1799%" height="15" fill="rgb(213,3,15)" fg:x="67963" fg:w="5522"/><text x="27.0794%" y="431.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (98 samples, 0.04%)</title><rect x="28.9706%" y="405" width="0.0387%" height="15" fill="rgb(252,211,39)" fg:x="73387" fg:w="98"/><text x="29.2206%" y="415.50"></text></g><g><title>core::slice::sort::merge_sort (27 samples, 0.01%)</title><rect x="28.9987%" y="389" width="0.0107%" height="15" fill="rgb(223,6,36)" fg:x="73458" fg:w="27"/><text x="29.2487%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (555 samples, 0.22%)</title><rect x="29.0093%" y="421" width="0.2191%" height="15" fill="rgb(252,169,45)" fg:x="73485" fg:w="555"/><text x="29.2593%" y="431.50"></text></g><g><title>__mem_cgroup_charge (26 samples, 0.01%)</title><rect x="29.2442%" y="181" width="0.0103%" height="15" fill="rgb(212,48,26)" fg:x="74080" fg:w="26"/><text x="29.4942%" y="191.50"></text></g><g><title>handle_pte_fault (61 samples, 0.02%)</title><rect x="29.2411%" y="213" width="0.0241%" height="15" fill="rgb(251,102,48)" fg:x="74072" fg:w="61"/><text x="29.4911%" y="223.50"></text></g><g><title>do_anonymous_page (55 samples, 0.02%)</title><rect x="29.2434%" y="197" width="0.0217%" height="15" fill="rgb(243,208,16)" fg:x="74078" fg:w="55"/><text x="29.4934%" y="207.50"></text></g><g><title>do_user_addr_fault (73 samples, 0.03%)</title><rect x="29.2367%" y="261" width="0.0288%" height="15" fill="rgb(219,96,24)" fg:x="74061" fg:w="73"/><text x="29.4867%" y="271.50"></text></g><g><title>handle_mm_fault (69 samples, 0.03%)</title><rect x="29.2383%" y="245" width="0.0272%" height="15" fill="rgb(219,33,29)" fg:x="74065" fg:w="69"/><text x="29.4883%" y="255.50"></text></g><g><title>__handle_mm_fault (66 samples, 0.03%)</title><rect x="29.2395%" y="229" width="0.0261%" height="15" fill="rgb(223,176,5)" fg:x="74068" fg:w="66"/><text x="29.4895%" y="239.50"></text></g><g><title>asm_exc_page_fault (84 samples, 0.03%)</title><rect x="29.2367%" y="293" width="0.0332%" height="15" fill="rgb(228,140,14)" fg:x="74061" fg:w="84"/><text x="29.4867%" y="303.50"></text></g><g><title>exc_page_fault (84 samples, 0.03%)</title><rect x="29.2367%" y="277" width="0.0332%" height="15" fill="rgb(217,179,31)" fg:x="74061" fg:w="84"/><text x="29.4867%" y="287.50"></text></g><g><title>perf_event_mmap (39 samples, 0.02%)</title><rect x="29.2754%" y="181" width="0.0154%" height="15" fill="rgb(230,9,30)" fg:x="74159" fg:w="39"/><text x="29.5254%" y="191.50"></text></g><g><title>perf_event_mmap_event (38 samples, 0.02%)</title><rect x="29.2758%" y="165" width="0.0150%" height="15" fill="rgb(230,136,20)" fg:x="74160" fg:w="38"/><text x="29.5258%" y="175.50"></text></g><g><title>perf_iterate_sb (38 samples, 0.02%)</title><rect x="29.2758%" y="149" width="0.0150%" height="15" fill="rgb(215,210,22)" fg:x="74160" fg:w="38"/><text x="29.5258%" y="159.50"></text></g><g><title>perf_iterate_ctx (37 samples, 0.01%)</title><rect x="29.2762%" y="133" width="0.0146%" height="15" fill="rgb(218,43,5)" fg:x="74161" fg:w="37"/><text x="29.5262%" y="143.50"></text></g><g><title>__x64_sys_mprotect (52 samples, 0.02%)</title><rect x="29.2730%" y="229" width="0.0205%" height="15" fill="rgb(216,11,5)" fg:x="74153" fg:w="52"/><text x="29.5230%" y="239.50"></text></g><g><title>do_mprotect_pkey (52 samples, 0.02%)</title><rect x="29.2730%" y="213" width="0.0205%" height="15" fill="rgb(209,82,29)" fg:x="74153" fg:w="52"/><text x="29.5230%" y="223.50"></text></g><g><title>mprotect_fixup (49 samples, 0.02%)</title><rect x="29.2742%" y="197" width="0.0193%" height="15" fill="rgb(244,115,12)" fg:x="74156" fg:w="49"/><text x="29.5242%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (66 samples, 0.03%)</title><rect x="29.2707%" y="261" width="0.0261%" height="15" fill="rgb(222,82,18)" fg:x="74147" fg:w="66"/><text x="29.5207%" y="271.50"></text></g><g><title>do_syscall_64 (61 samples, 0.02%)</title><rect x="29.2726%" y="245" width="0.0241%" height="15" fill="rgb(249,227,8)" fg:x="74152" fg:w="61"/><text x="29.5226%" y="255.50"></text></g><g><title>grow_heap (95 samples, 0.04%)</title><rect x="29.2699%" y="293" width="0.0375%" height="15" fill="rgb(253,141,45)" fg:x="74145" fg:w="95"/><text x="29.5199%" y="303.50"></text></g><g><title>__GI___mprotect (94 samples, 0.04%)</title><rect x="29.2703%" y="277" width="0.0371%" height="15" fill="rgb(234,184,4)" fg:x="74146" fg:w="94"/><text x="29.5203%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (202 samples, 0.08%)</title><rect x="29.2284%" y="421" width="0.0797%" height="15" fill="rgb(218,194,23)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="431.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (202 samples, 0.08%)</title><rect x="29.2284%" y="405" width="0.0797%" height="15" fill="rgb(235,66,41)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="415.50"></text></g><g><title>alloc::alloc::alloc (202 samples, 0.08%)</title><rect x="29.2284%" y="389" width="0.0797%" height="15" fill="rgb(245,217,1)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="399.50"></text></g><g><title>__rdl_alloc (202 samples, 0.08%)</title><rect x="29.2284%" y="373" width="0.0797%" height="15" fill="rgb(229,91,1)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (202 samples, 0.08%)</title><rect x="29.2284%" y="357" width="0.0797%" height="15" fill="rgb(207,101,30)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="367.50"></text></g><g><title>__GI___libc_malloc (202 samples, 0.08%)</title><rect x="29.2284%" y="341" width="0.0797%" height="15" fill="rgb(223,82,49)" fg:x="74040" fg:w="202"/><text x="29.4784%" y="351.50"></text></g><g><title>_int_malloc (198 samples, 0.08%)</title><rect x="29.2300%" y="325" width="0.0782%" height="15" fill="rgb(218,167,17)" fg:x="74044" fg:w="198"/><text x="29.4800%" y="335.50"></text></g><g><title>sysmalloc (198 samples, 0.08%)</title><rect x="29.2300%" y="309" width="0.0782%" height="15" fill="rgb(208,103,14)" fg:x="74044" fg:w="198"/><text x="29.4800%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::push (32 samples, 0.01%)</title><rect x="29.3086%" y="421" width="0.0126%" height="15" fill="rgb(238,20,8)" fg:x="74243" fg:w="32"/><text x="29.5586%" y="431.50"></text></g><g><title>core::intrinsics::copy (61 samples, 0.02%)</title><rect x="29.3236%" y="405" width="0.0241%" height="15" fill="rgb(218,80,54)" fg:x="74281" fg:w="61"/><text x="29.5736%" y="415.50"></text></g><g><title>__memcpy_evex_unaligned_erms (61 samples, 0.02%)</title><rect x="29.3236%" y="389" width="0.0241%" height="15" fill="rgb(240,144,17)" fg:x="74281" fg:w="61"/><text x="29.5736%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (70 samples, 0.03%)</title><rect x="29.3212%" y="421" width="0.0276%" height="15" fill="rgb(245,27,50)" fg:x="74275" fg:w="70"/><text x="29.5712%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (96 samples, 0.04%)</title><rect x="29.3488%" y="421" width="0.0379%" height="15" fill="rgb(251,51,7)" fg:x="74345" fg:w="96"/><text x="29.5988%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (55 samples, 0.02%)</title><rect x="29.4108%" y="373" width="0.0217%" height="15" fill="rgb(245,217,29)" fg:x="74502" fg:w="55"/><text x="29.6608%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (42 samples, 0.02%)</title><rect x="29.4159%" y="357" width="0.0166%" height="15" fill="rgb(221,176,29)" fg:x="74515" fg:w="42"/><text x="29.6659%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (68 samples, 0.03%)</title><rect x="29.4108%" y="389" width="0.0268%" height="15" fill="rgb(212,180,24)" fg:x="74502" fg:w="68"/><text x="29.6608%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.01%)</title><rect x="29.4392%" y="373" width="0.0122%" height="15" fill="rgb(254,24,2)" fg:x="74574" fg:w="31"/><text x="29.6892%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (31 samples, 0.01%)</title><rect x="29.4392%" y="357" width="0.0122%" height="15" fill="rgb(230,100,2)" fg:x="74574" fg:w="31"/><text x="29.6892%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (31 samples, 0.01%)</title><rect x="29.4392%" y="341" width="0.0122%" height="15" fill="rgb(219,142,25)" fg:x="74574" fg:w="31"/><text x="29.6892%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (31 samples, 0.01%)</title><rect x="29.4392%" y="325" width="0.0122%" height="15" fill="rgb(240,73,43)" fg:x="74574" fg:w="31"/><text x="29.6892%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (132 samples, 0.05%)</title><rect x="29.4515%" y="357" width="0.0521%" height="15" fill="rgb(214,114,15)" fg:x="74605" fg:w="132"/><text x="29.7015%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (480 samples, 0.19%)</title><rect x="29.6824%" y="309" width="0.1895%" height="15" fill="rgb(207,130,4)" fg:x="75190" fg:w="480"/><text x="29.9324%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (480 samples, 0.19%)</title><rect x="29.6824%" y="293" width="0.1895%" height="15" fill="rgb(221,25,40)" fg:x="75190" fg:w="480"/><text x="29.9324%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (60 samples, 0.02%)</title><rect x="29.8719%" y="309" width="0.0237%" height="15" fill="rgb(241,184,7)" fg:x="75670" fg:w="60"/><text x="30.1219%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (60 samples, 0.02%)</title><rect x="29.8719%" y="293" width="0.0237%" height="15" fill="rgb(235,159,4)" fg:x="75670" fg:w="60"/><text x="30.1219%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (567 samples, 0.22%)</title><rect x="29.6800%" y="341" width="0.2238%" height="15" fill="rgb(214,87,48)" fg:x="75184" fg:w="567"/><text x="29.9300%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (561 samples, 0.22%)</title><rect x="29.6824%" y="325" width="0.2215%" height="15" fill="rgb(246,198,24)" fg:x="75190" fg:w="561"/><text x="29.9324%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1,161 samples, 0.46%)</title><rect x="29.4515%" y="373" width="0.4583%" height="15" fill="rgb(209,66,40)" fg:x="74605" fg:w="1161"/><text x="29.7015%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (1,029 samples, 0.41%)</title><rect x="29.5036%" y="357" width="0.4062%" height="15" fill="rgb(233,147,39)" fg:x="74737" fg:w="1029"/><text x="29.7536%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (120 samples, 0.05%)</title><rect x="29.9098%" y="373" width="0.0474%" height="15" fill="rgb(231,145,52)" fg:x="75766" fg:w="120"/><text x="30.1598%" y="383.50"></text></g><g><title>core::slice::sort::insert_tail (1,405 samples, 0.55%)</title><rect x="29.4377%" y="389" width="0.5546%" height="15" fill="rgb(206,20,26)" fg:x="74570" fg:w="1405"/><text x="29.6877%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (89 samples, 0.04%)</title><rect x="29.9572%" y="373" width="0.0351%" height="15" fill="rgb(238,220,4)" fg:x="75886" fg:w="89"/><text x="30.2072%" y="383.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.04%)</title><rect x="29.9572%" y="357" width="0.0351%" height="15" fill="rgb(252,195,42)" fg:x="75886" fg:w="89"/><text x="30.2072%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (89 samples, 0.04%)</title><rect x="29.9572%" y="341" width="0.0351%" height="15" fill="rgb(209,10,6)" fg:x="75886" fg:w="89"/><text x="30.2072%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (8,998 samples, 3.55%)</title><rect x="26.5192%" y="469" width="3.5521%" height="15" fill="rgb(229,3,52)" fg:x="67177" fg:w="8998"/><text x="26.7692%" y="479.50">allo..</text></g><g><title>alloc::slice::stable_sort (8,998 samples, 3.55%)</title><rect x="26.5192%" y="453" width="3.5521%" height="15" fill="rgb(253,49,37)" fg:x="67177" fg:w="8998"/><text x="26.7692%" y="463.50">allo..</text></g><g><title>core::slice::sort::merge_sort (8,992 samples, 3.55%)</title><rect x="26.5215%" y="437" width="3.5497%" height="15" fill="rgb(240,103,49)" fg:x="67183" fg:w="8992"/><text x="26.7715%" y="447.50">core..</text></g><g><title>core::slice::sort::provide_sorted_batch (1,733 samples, 0.68%)</title><rect x="29.3871%" y="421" width="0.6841%" height="15" fill="rgb(250,182,30)" fg:x="74442" fg:w="1733"/><text x="29.6371%" y="431.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,711 samples, 0.68%)</title><rect x="29.3958%" y="405" width="0.6754%" height="15" fill="rgb(248,8,30)" fg:x="74464" fg:w="1711"/><text x="29.6458%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (200 samples, 0.08%)</title><rect x="29.9923%" y="389" width="0.0790%" height="15" fill="rgb(237,120,30)" fg:x="75975" fg:w="200"/><text x="30.2423%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (163 samples, 0.06%)</title><rect x="30.1285%" y="357" width="0.0643%" height="15" fill="rgb(221,146,34)" fg:x="76320" fg:w="163"/><text x="30.3785%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (163 samples, 0.06%)</title><rect x="30.1285%" y="341" width="0.0643%" height="15" fill="rgb(242,55,13)" fg:x="76320" fg:w="163"/><text x="30.3785%" y="351.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (168 samples, 0.07%)</title><rect x="30.1285%" y="389" width="0.0663%" height="15" fill="rgb(242,112,31)" fg:x="76320" fg:w="168"/><text x="30.3785%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (168 samples, 0.07%)</title><rect x="30.1285%" y="373" width="0.0663%" height="15" fill="rgb(249,192,27)" fg:x="76320" fg:w="168"/><text x="30.3785%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (313 samples, 0.12%)</title><rect x="30.0827%" y="421" width="0.1236%" height="15" fill="rgb(208,204,44)" fg:x="76204" fg:w="313"/><text x="30.3327%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (313 samples, 0.12%)</title><rect x="30.0827%" y="405" width="0.1236%" height="15" fill="rgb(208,93,54)" fg:x="76204" fg:w="313"/><text x="30.3327%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (347 samples, 0.14%)</title><rect x="30.0713%" y="469" width="0.1370%" height="15" fill="rgb(242,1,31)" fg:x="76175" fg:w="347"/><text x="30.3213%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (347 samples, 0.14%)</title><rect x="30.0713%" y="453" width="0.1370%" height="15" fill="rgb(241,83,25)" fg:x="76175" fg:w="347"/><text x="30.3213%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (345 samples, 0.14%)</title><rect x="30.0720%" y="437" width="0.1362%" height="15" fill="rgb(205,169,50)" fg:x="76177" fg:w="345"/><text x="30.3220%" y="447.50"></text></g><g><title>do_anonymous_page (57 samples, 0.02%)</title><rect x="30.2169%" y="181" width="0.0225%" height="15" fill="rgb(239,186,37)" fg:x="76544" fg:w="57"/><text x="30.4669%" y="191.50"></text></g><g><title>handle_pte_fault (63 samples, 0.02%)</title><rect x="30.2153%" y="197" width="0.0249%" height="15" fill="rgb(205,221,10)" fg:x="76540" fg:w="63"/><text x="30.4653%" y="207.50"></text></g><g><title>__handle_mm_fault (66 samples, 0.03%)</title><rect x="30.2146%" y="213" width="0.0261%" height="15" fill="rgb(218,196,15)" fg:x="76538" fg:w="66"/><text x="30.4646%" y="223.50"></text></g><g><title>handle_mm_fault (67 samples, 0.03%)</title><rect x="30.2146%" y="229" width="0.0264%" height="15" fill="rgb(218,196,35)" fg:x="76538" fg:w="67"/><text x="30.4646%" y="239.50"></text></g><g><title>do_user_addr_fault (70 samples, 0.03%)</title><rect x="30.2138%" y="245" width="0.0276%" height="15" fill="rgb(233,63,24)" fg:x="76536" fg:w="70"/><text x="30.4638%" y="255.50"></text></g><g><title>asm_exc_page_fault (77 samples, 0.03%)</title><rect x="30.2134%" y="277" width="0.0304%" height="15" fill="rgb(225,8,4)" fg:x="76535" fg:w="77"/><text x="30.4634%" y="287.50"></text></g><g><title>exc_page_fault (77 samples, 0.03%)</title><rect x="30.2134%" y="261" width="0.0304%" height="15" fill="rgb(234,105,35)" fg:x="76535" fg:w="77"/><text x="30.4634%" y="271.50"></text></g><g><title>perf_event_mmap (55 samples, 0.02%)</title><rect x="30.2517%" y="165" width="0.0217%" height="15" fill="rgb(236,21,32)" fg:x="76632" fg:w="55"/><text x="30.5017%" y="175.50"></text></g><g><title>perf_event_mmap_event (54 samples, 0.02%)</title><rect x="30.2521%" y="149" width="0.0213%" height="15" fill="rgb(228,109,6)" fg:x="76633" fg:w="54"/><text x="30.5021%" y="159.50"></text></g><g><title>perf_iterate_sb (52 samples, 0.02%)</title><rect x="30.2528%" y="133" width="0.0205%" height="15" fill="rgb(229,215,31)" fg:x="76635" fg:w="52"/><text x="30.5028%" y="143.50"></text></g><g><title>perf_iterate_ctx (49 samples, 0.02%)</title><rect x="30.2540%" y="117" width="0.0193%" height="15" fill="rgb(221,52,54)" fg:x="76638" fg:w="49"/><text x="30.5040%" y="127.50"></text></g><g><title>mprotect_fixup (68 samples, 0.03%)</title><rect x="30.2489%" y="181" width="0.0268%" height="15" fill="rgb(252,129,43)" fg:x="76625" fg:w="68"/><text x="30.4989%" y="191.50"></text></g><g><title>do_mprotect_pkey (75 samples, 0.03%)</title><rect x="30.2473%" y="197" width="0.0296%" height="15" fill="rgb(248,183,27)" fg:x="76621" fg:w="75"/><text x="30.4973%" y="207.50"></text></g><g><title>__x64_sys_mprotect (78 samples, 0.03%)</title><rect x="30.2469%" y="213" width="0.0308%" height="15" fill="rgb(250,0,22)" fg:x="76620" fg:w="78"/><text x="30.4969%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (101 samples, 0.04%)</title><rect x="30.2442%" y="245" width="0.0399%" height="15" fill="rgb(213,166,10)" fg:x="76613" fg:w="101"/><text x="30.4942%" y="255.50"></text></g><g><title>do_syscall_64 (95 samples, 0.04%)</title><rect x="30.2465%" y="229" width="0.0375%" height="15" fill="rgb(207,163,36)" fg:x="76619" fg:w="95"/><text x="30.4965%" y="239.50"></text></g><g><title>grow_heap (122 samples, 0.05%)</title><rect x="30.2438%" y="277" width="0.0482%" height="15" fill="rgb(208,122,22)" fg:x="76612" fg:w="122"/><text x="30.4938%" y="287.50"></text></g><g><title>__GI___mprotect (122 samples, 0.05%)</title><rect x="30.2438%" y="261" width="0.0482%" height="15" fill="rgb(207,104,49)" fg:x="76612" fg:w="122"/><text x="30.4938%" y="271.50"></text></g><g><title>__GI___libc_malloc (215 samples, 0.08%)</title><rect x="30.2082%" y="325" width="0.0849%" height="15" fill="rgb(248,211,50)" fg:x="76522" fg:w="215"/><text x="30.4582%" y="335.50"></text></g><g><title>_int_malloc (214 samples, 0.08%)</title><rect x="30.2086%" y="309" width="0.0845%" height="15" fill="rgb(217,13,45)" fg:x="76523" fg:w="214"/><text x="30.4586%" y="319.50"></text></g><g><title>sysmalloc (212 samples, 0.08%)</title><rect x="30.2094%" y="293" width="0.0837%" height="15" fill="rgb(211,216,49)" fg:x="76525" fg:w="212"/><text x="30.4594%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (216 samples, 0.09%)</title><rect x="30.2082%" y="469" width="0.0853%" height="15" fill="rgb(221,58,53)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (216 samples, 0.09%)</title><rect x="30.2082%" y="453" width="0.0853%" height="15" fill="rgb(220,112,41)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (216 samples, 0.09%)</title><rect x="30.2082%" y="437" width="0.0853%" height="15" fill="rgb(236,38,28)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (216 samples, 0.09%)</title><rect x="30.2082%" y="421" width="0.0853%" height="15" fill="rgb(227,195,22)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (216 samples, 0.09%)</title><rect x="30.2082%" y="405" width="0.0853%" height="15" fill="rgb(214,55,33)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (216 samples, 0.09%)</title><rect x="30.2082%" y="389" width="0.0853%" height="15" fill="rgb(248,80,13)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="399.50"></text></g><g><title>alloc::alloc::alloc (216 samples, 0.09%)</title><rect x="30.2082%" y="373" width="0.0853%" height="15" fill="rgb(238,52,6)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="383.50"></text></g><g><title>__rdl_alloc (216 samples, 0.09%)</title><rect x="30.2082%" y="357" width="0.0853%" height="15" fill="rgb(224,198,47)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (216 samples, 0.09%)</title><rect x="30.2082%" y="341" width="0.0853%" height="15" fill="rgb(233,171,20)" fg:x="76522" fg:w="216"/><text x="30.4582%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (10,554 samples, 4.17%)</title><rect x="26.1283%" y="485" width="4.1664%" height="15" fill="rgb(241,30,25)" fg:x="66187" fg:w="10554"/><text x="26.3783%" y="495.50">proje..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (37 samples, 0.01%)</title><rect x="30.2994%" y="469" width="0.0146%" height="15" fill="rgb(207,171,38)" fg:x="76753" fg:w="37"/><text x="30.5494%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (75 samples, 0.03%)</title><rect x="30.3140%" y="469" width="0.0296%" height="15" fill="rgb(234,70,1)" fg:x="76790" fg:w="75"/><text x="30.5640%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (127 samples, 0.05%)</title><rect x="30.2947%" y="485" width="0.0501%" height="15" fill="rgb(232,178,18)" fg:x="76741" fg:w="127"/><text x="30.5447%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (32 samples, 0.01%)</title><rect x="30.5023%" y="437" width="0.0126%" height="15" fill="rgb(241,78,40)" fg:x="77267" fg:w="32"/><text x="30.7523%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.01%)</title><rect x="30.5023%" y="421" width="0.0126%" height="15" fill="rgb(222,35,25)" fg:x="77267" fg:w="32"/><text x="30.7523%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (32 samples, 0.01%)</title><rect x="30.5023%" y="405" width="0.0126%" height="15" fill="rgb(207,92,16)" fg:x="77267" fg:w="32"/><text x="30.7523%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (32 samples, 0.01%)</title><rect x="30.5023%" y="389" width="0.0126%" height="15" fill="rgb(216,59,51)" fg:x="77267" fg:w="32"/><text x="30.7523%" y="399.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (192 samples, 0.08%)</title><rect x="30.4400%" y="453" width="0.0758%" height="15" fill="rgb(213,80,28)" fg:x="77109" fg:w="192"/><text x="30.6900%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (241 samples, 0.10%)</title><rect x="30.4400%" y="469" width="0.0951%" height="15" fill="rgb(220,93,7)" fg:x="77109" fg:w="241"/><text x="30.6900%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (49 samples, 0.02%)</title><rect x="30.5158%" y="453" width="0.0193%" height="15" fill="rgb(225,24,44)" fg:x="77301" fg:w="49"/><text x="30.7658%" y="463.50"></text></g><g><title>__hrtimer_run_queues (36 samples, 0.01%)</title><rect x="37.5426%" y="389" width="0.0142%" height="15" fill="rgb(243,74,40)" fg:x="95101" fg:w="36"/><text x="37.7926%" y="399.50"></text></g><g><title>tick_sched_timer (35 samples, 0.01%)</title><rect x="37.5430%" y="373" width="0.0138%" height="15" fill="rgb(228,39,7)" fg:x="95102" fg:w="35"/><text x="37.7930%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (42 samples, 0.02%)</title><rect x="37.5426%" y="421" width="0.0166%" height="15" fill="rgb(227,79,8)" fg:x="95101" fg:w="42"/><text x="37.7926%" y="431.50"></text></g><g><title>hrtimer_interrupt (42 samples, 0.02%)</title><rect x="37.5426%" y="405" width="0.0166%" height="15" fill="rgb(236,58,11)" fg:x="95101" fg:w="42"/><text x="37.7926%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (51 samples, 0.02%)</title><rect x="37.5426%" y="453" width="0.0201%" height="15" fill="rgb(249,63,35)" fg:x="95101" fg:w="51"/><text x="37.7926%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (51 samples, 0.02%)</title><rect x="37.5426%" y="437" width="0.0201%" height="15" fill="rgb(252,114,16)" fg:x="95101" fg:w="51"/><text x="37.7926%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (17,806 samples, 7.03%)</title><rect x="30.5351%" y="469" width="7.0292%" height="15" fill="rgb(254,151,24)" fg:x="77350" fg:w="17806"/><text x="30.7851%" y="479.50">project1:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (668 samples, 0.26%)</title><rect x="52.5760%" y="453" width="0.2637%" height="15" fill="rgb(253,54,39)" fg:x="133183" fg:w="668"/><text x="52.8260%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (668 samples, 0.26%)</title><rect x="52.5760%" y="437" width="0.2637%" height="15" fill="rgb(243,25,45)" fg:x="133183" fg:w="668"/><text x="52.8260%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (668 samples, 0.26%)</title><rect x="52.5760%" y="421" width="0.2637%" height="15" fill="rgb(234,134,9)" fg:x="133183" fg:w="668"/><text x="52.8260%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (95 samples, 0.04%)</title><rect x="52.8397%" y="453" width="0.0375%" height="15" fill="rgb(227,166,31)" fg:x="133851" fg:w="95"/><text x="53.0897%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (95 samples, 0.04%)</title><rect x="52.8397%" y="437" width="0.0375%" height="15" fill="rgb(245,143,41)" fg:x="133851" fg:w="95"/><text x="53.0897%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (84 samples, 0.03%)</title><rect x="52.8441%" y="421" width="0.0332%" height="15" fill="rgb(238,181,32)" fg:x="133862" fg:w="84"/><text x="53.0941%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2,589 samples, 1.02%)</title><rect x="52.8772%" y="421" width="1.0220%" height="15" fill="rgb(224,113,18)" fg:x="133946" fg:w="2589"/><text x="53.1272%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,695 samples, 1.46%)</title><rect x="52.8772%" y="453" width="1.4587%" height="15" fill="rgb(240,229,28)" fg:x="133946" fg:w="3695"/><text x="53.1272%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,695 samples, 1.46%)</title><rect x="52.8772%" y="437" width="1.4587%" height="15" fill="rgb(250,185,3)" fg:x="133946" fg:w="3695"/><text x="53.1272%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1,106 samples, 0.44%)</title><rect x="53.8993%" y="421" width="0.4366%" height="15" fill="rgb(212,59,25)" fg:x="136535" fg:w="1106"/><text x="54.1493%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,256 samples, 0.50%)</title><rect x="55.3895%" y="405" width="0.4958%" height="15" fill="rgb(221,87,20)" fg:x="140310" fg:w="1256"/><text x="55.6395%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,256 samples, 0.50%)</title><rect x="55.3895%" y="389" width="0.4958%" height="15" fill="rgb(213,74,28)" fg:x="140310" fg:w="1256"/><text x="55.6395%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,937 samples, 1.55%)</title><rect x="54.3359%" y="421" width="1.5542%" height="15" fill="rgb(224,132,34)" fg:x="137641" fg:w="3937"/><text x="54.5859%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (5,977 samples, 2.36%)</title><rect x="54.3359%" y="453" width="2.3595%" height="15" fill="rgb(222,101,24)" fg:x="137641" fg:w="5977"/><text x="54.5859%" y="463.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,977 samples, 2.36%)</title><rect x="54.3359%" y="437" width="2.3595%" height="15" fill="rgb(254,142,4)" fg:x="137641" fg:w="5977"/><text x="54.5859%" y="447.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,040 samples, 0.81%)</title><rect x="55.8901%" y="421" width="0.8053%" height="15" fill="rgb(230,229,49)" fg:x="141578" fg:w="2040"/><text x="56.1401%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,040 samples, 0.81%)</title><rect x="55.8901%" y="405" width="0.8053%" height="15" fill="rgb(238,70,47)" fg:x="141578" fg:w="2040"/><text x="56.1401%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,884 samples, 0.74%)</title><rect x="56.7065%" y="389" width="0.7437%" height="15" fill="rgb(231,160,17)" fg:x="143646" fg:w="1884"/><text x="56.9565%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,043 samples, 0.81%)</title><rect x="56.7065%" y="405" width="0.8065%" height="15" fill="rgb(218,68,53)" fg:x="143646" fg:w="2043"/><text x="56.9565%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (159 samples, 0.06%)</title><rect x="57.4502%" y="389" width="0.0628%" height="15" fill="rgb(236,111,10)" fg:x="145530" fg:w="159"/><text x="57.7002%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2,084 samples, 0.82%)</title><rect x="56.6954%" y="421" width="0.8227%" height="15" fill="rgb(224,34,41)" fg:x="143618" fg:w="2084"/><text x="56.9454%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,526 samples, 1.00%)</title><rect x="56.6954%" y="453" width="0.9972%" height="15" fill="rgb(241,118,19)" fg:x="143618" fg:w="2526"/><text x="56.9454%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,526 samples, 1.00%)</title><rect x="56.6954%" y="437" width="0.9972%" height="15" fill="rgb(238,129,25)" fg:x="143618" fg:w="2526"/><text x="56.9454%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (442 samples, 0.17%)</title><rect x="57.5181%" y="421" width="0.1745%" height="15" fill="rgb(238,22,31)" fg:x="145702" fg:w="442"/><text x="57.7681%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (442 samples, 0.17%)</title><rect x="57.5181%" y="405" width="0.1745%" height="15" fill="rgb(222,174,48)" fg:x="145702" fg:w="442"/><text x="57.7681%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (224 samples, 0.09%)</title><rect x="57.6926%" y="421" width="0.0884%" height="15" fill="rgb(206,152,40)" fg:x="146144" fg:w="224"/><text x="57.9426%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (26,807 samples, 10.58%)</title><rect x="57.7810%" y="421" width="10.5825%" height="15" fill="rgb(218,99,54)" fg:x="146368" fg:w="26807"/><text x="58.0310%" y="431.50">core::option::O..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (26,807 samples, 10.58%)</title><rect x="57.7810%" y="405" width="10.5825%" height="15" fill="rgb(220,174,26)" fg:x="146368" fg:w="26807"/><text x="58.0310%" y="415.50">slotmap::basic:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,184 samples, 0.47%)</title><rect x="68.3635%" y="421" width="0.4674%" height="15" fill="rgb(245,116,9)" fg:x="173175" fg:w="1184"/><text x="68.6135%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,184 samples, 0.47%)</title><rect x="68.3635%" y="405" width="0.4674%" height="15" fill="rgb(209,72,35)" fg:x="173175" fg:w="1184"/><text x="68.6135%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (28,663 samples, 11.32%)</title><rect x="57.6926%" y="453" width="11.3152%" height="15" fill="rgb(226,126,21)" fg:x="146144" fg:w="28663"/><text x="57.9426%" y="463.50">&lt;project1::solver..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (28,663 samples, 11.32%)</title><rect x="57.6926%" y="437" width="11.3152%" height="15" fill="rgb(227,192,1)" fg:x="146144" fg:w="28663"/><text x="57.9426%" y="447.50">slotmap::basic::S..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (448 samples, 0.18%)</title><rect x="68.8309%" y="421" width="0.1769%" height="15" fill="rgb(237,180,29)" fg:x="174359" fg:w="448"/><text x="69.0809%" y="431.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (22,911 samples, 9.04%)</title><rect x="69.0078%" y="453" width="9.0445%" height="15" fill="rgb(230,197,35)" fg:x="174807" fg:w="22911"/><text x="69.2578%" y="463.50">&lt;project1::so..</text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (32 samples, 0.01%)</title><rect x="78.0522%" y="437" width="0.0126%" height="15" fill="rgb(246,193,31)" fg:x="197718" fg:w="32"/><text x="78.3022%" y="447.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (99 samples, 0.04%)</title><rect x="78.0522%" y="453" width="0.0391%" height="15" fill="rgb(241,36,4)" fg:x="197718" fg:w="99"/><text x="78.3022%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (67 samples, 0.03%)</title><rect x="78.0649%" y="437" width="0.0264%" height="15" fill="rgb(241,130,17)" fg:x="197750" fg:w="67"/><text x="78.3149%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (129 samples, 0.05%)</title><rect x="79.3593%" y="437" width="0.0509%" height="15" fill="rgb(206,137,32)" fg:x="201029" fg:w="129"/><text x="79.6093%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (129 samples, 0.05%)</title><rect x="79.3593%" y="421" width="0.0509%" height="15" fill="rgb(237,228,51)" fg:x="201029" fg:w="129"/><text x="79.6093%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (30 samples, 0.01%)</title><rect x="79.4106%" y="405" width="0.0118%" height="15" fill="rgb(243,6,42)" fg:x="201159" fg:w="30"/><text x="79.6606%" y="415.50"></text></g><g><title>hrtimer_interrupt (29 samples, 0.01%)</title><rect x="79.4110%" y="389" width="0.0114%" height="15" fill="rgb(251,74,28)" fg:x="201160" fg:w="29"/><text x="79.6610%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (36 samples, 0.01%)</title><rect x="79.4102%" y="437" width="0.0142%" height="15" fill="rgb(218,20,49)" fg:x="201158" fg:w="36"/><text x="79.6602%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (35 samples, 0.01%)</title><rect x="79.4106%" y="421" width="0.0138%" height="15" fill="rgb(238,28,14)" fg:x="201159" fg:w="35"/><text x="79.6606%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (34 samples, 0.01%)</title><rect x="79.4244%" y="437" width="0.0134%" height="15" fill="rgb(229,40,46)" fg:x="201194" fg:w="34"/><text x="79.6744%" y="447.50"></text></g><g><title>core::ptr::write (8,231 samples, 3.25%)</title><rect x="79.4379%" y="437" width="3.2493%" height="15" fill="rgb(244,195,20)" fg:x="201228" fg:w="8231"/><text x="79.6879%" y="447.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11,628 samples, 4.59%)</title><rect x="78.0976%" y="453" width="4.5903%" height="15" fill="rgb(253,56,35)" fg:x="197833" fg:w="11628"/><text x="78.3476%" y="463.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (83 samples, 0.03%)</title><rect x="82.6880%" y="453" width="0.0328%" height="15" fill="rgb(210,149,44)" fg:x="209461" fg:w="83"/><text x="82.9380%" y="463.50"></text></g><g><title>tick_sched_do_timer (54 samples, 0.02%)</title><rect x="82.7282%" y="357" width="0.0213%" height="15" fill="rgb(240,135,12)" fg:x="209563" fg:w="54"/><text x="82.9782%" y="367.50"></text></g><g><title>tick_do_update_jiffies64 (51 samples, 0.02%)</title><rect x="82.7294%" y="341" width="0.0201%" height="15" fill="rgb(251,24,50)" fg:x="209566" fg:w="51"/><text x="82.9794%" y="351.50"></text></g><g><title>update_wall_time (49 samples, 0.02%)</title><rect x="82.7302%" y="325" width="0.0193%" height="15" fill="rgb(243,200,47)" fg:x="209568" fg:w="49"/><text x="82.9802%" y="335.50"></text></g><g><title>timekeeping_advance (48 samples, 0.02%)</title><rect x="82.7306%" y="309" width="0.0189%" height="15" fill="rgb(224,166,26)" fg:x="209569" fg:w="48"/><text x="82.9806%" y="319.50"></text></g><g><title>task_tick_fair (51 samples, 0.02%)</title><rect x="82.7661%" y="309" width="0.0201%" height="15" fill="rgb(233,0,47)" fg:x="209659" fg:w="51"/><text x="83.0161%" y="319.50"></text></g><g><title>__hrtimer_run_queues (181 samples, 0.07%)</title><rect x="82.7247%" y="389" width="0.0715%" height="15" fill="rgb(253,80,5)" fg:x="209554" fg:w="181"/><text x="82.9747%" y="399.50"></text></g><g><title>tick_sched_timer (177 samples, 0.07%)</title><rect x="82.7262%" y="373" width="0.0699%" height="15" fill="rgb(214,133,25)" fg:x="209558" fg:w="177"/><text x="82.9762%" y="383.50"></text></g><g><title>tick_sched_handle (118 samples, 0.05%)</title><rect x="82.7495%" y="357" width="0.0466%" height="15" fill="rgb(209,27,14)" fg:x="209617" fg:w="118"/><text x="82.9995%" y="367.50"></text></g><g><title>update_process_times (118 samples, 0.05%)</title><rect x="82.7495%" y="341" width="0.0466%" height="15" fill="rgb(219,102,51)" fg:x="209617" fg:w="118"/><text x="82.9995%" y="351.50"></text></g><g><title>scheduler_tick (97 samples, 0.04%)</title><rect x="82.7578%" y="325" width="0.0383%" height="15" fill="rgb(237,18,16)" fg:x="209638" fg:w="97"/><text x="83.0078%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (200 samples, 0.08%)</title><rect x="82.7219%" y="421" width="0.0790%" height="15" fill="rgb(241,85,17)" fg:x="209547" fg:w="200"/><text x="82.9719%" y="431.50"></text></g><g><title>hrtimer_interrupt (193 samples, 0.08%)</title><rect x="82.7247%" y="405" width="0.0762%" height="15" fill="rgb(236,90,42)" fg:x="209554" fg:w="193"/><text x="82.9747%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (229 samples, 0.09%)</title><rect x="82.7207%" y="453" width="0.0904%" height="15" fill="rgb(249,57,21)" fg:x="209544" fg:w="229"/><text x="82.9707%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (226 samples, 0.09%)</title><rect x="82.7219%" y="437" width="0.0892%" height="15" fill="rgb(243,12,36)" fg:x="209547" fg:w="226"/><text x="82.9719%" y="447.50"></text></g><g><title>core::cmp::PartialEq::ne (126 samples, 0.05%)</title><rect x="82.8111%" y="453" width="0.0497%" height="15" fill="rgb(253,128,47)" fg:x="209773" fg:w="126"/><text x="83.0611%" y="463.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (126 samples, 0.05%)</title><rect x="82.8111%" y="437" width="0.0497%" height="15" fill="rgb(207,33,20)" fg:x="209773" fg:w="126"/><text x="83.0611%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::le (2,213 samples, 0.87%)</title><rect x="82.8609%" y="453" width="0.8736%" height="15" fill="rgb(233,215,35)" fg:x="209899" fg:w="2213"/><text x="83.1109%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,887 samples, 1.14%)</title><rect x="83.7345%" y="453" width="1.1397%" height="15" fill="rgb(249,188,52)" fg:x="212112" fg:w="2887"/><text x="83.9845%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,887 samples, 1.14%)</title><rect x="83.7345%" y="437" width="1.1397%" height="15" fill="rgb(225,12,32)" fg:x="212112" fg:w="2887"/><text x="83.9845%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,887 samples, 1.14%)</title><rect x="83.7345%" y="421" width="1.1397%" height="15" fill="rgb(247,98,14)" fg:x="212112" fg:w="2887"/><text x="83.9845%" y="431.50"></text></g><g><title>core::intrinsics::copy (1,457 samples, 0.58%)</title><rect x="84.9567%" y="421" width="0.5752%" height="15" fill="rgb(247,219,48)" fg:x="215208" fg:w="1457"/><text x="85.2067%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (2,509 samples, 0.99%)</title><rect x="84.8742%" y="453" width="0.9905%" height="15" fill="rgb(253,60,48)" fg:x="214999" fg:w="2509"/><text x="85.1242%" y="463.50"></text></g><g><title>core::ptr::swap (2,300 samples, 0.91%)</title><rect x="84.9567%" y="437" width="0.9080%" height="15" fill="rgb(245,15,52)" fg:x="215208" fg:w="2300"/><text x="85.2067%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (843 samples, 0.33%)</title><rect x="85.5318%" y="421" width="0.3328%" height="15" fill="rgb(220,133,28)" fg:x="216665" fg:w="843"/><text x="85.7818%" y="431.50"></text></g><g><title>log::__private_api::log (63 samples, 0.02%)</title><rect x="85.8646%" y="453" width="0.0249%" height="15" fill="rgb(217,180,4)" fg:x="217508" fg:w="63"/><text x="86.1146%" y="463.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (63 samples, 0.02%)</title><rect x="85.8646%" y="437" width="0.0249%" height="15" fill="rgb(251,24,1)" fg:x="217508" fg:w="63"/><text x="86.1146%" y="447.50"></text></g><g><title>__sysvec_apic_timer_interrupt (28 samples, 0.01%)</title><rect x="89.7211%" y="373" width="0.0111%" height="15" fill="rgb(212,185,49)" fg:x="227277" fg:w="28"/><text x="89.9711%" y="383.50"></text></g><g><title>hrtimer_interrupt (27 samples, 0.01%)</title><rect x="89.7215%" y="357" width="0.0107%" height="15" fill="rgb(215,175,22)" fg:x="227278" fg:w="27"/><text x="89.9715%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (9,739 samples, 3.84%)</title><rect x="85.8895%" y="421" width="3.8446%" height="15" fill="rgb(250,205,14)" fg:x="217571" fg:w="9739"/><text x="86.1395%" y="431.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (33 samples, 0.01%)</title><rect x="89.7211%" y="405" width="0.0130%" height="15" fill="rgb(225,211,22)" fg:x="227277" fg:w="33"/><text x="89.9711%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (33 samples, 0.01%)</title><rect x="89.7211%" y="389" width="0.0130%" height="15" fill="rgb(251,179,42)" fg:x="227277" fg:w="33"/><text x="89.9711%" y="399.50"></text></g><g><title>log::max_level (9,824 samples, 3.88%)</title><rect x="85.8895%" y="453" width="3.8782%" height="15" fill="rgb(208,216,51)" fg:x="217571" fg:w="9824"/><text x="86.1395%" y="463.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (9,824 samples, 3.88%)</title><rect x="85.8895%" y="437" width="3.8782%" height="15" fill="rgb(235,36,11)" fg:x="217571" fg:w="9824"/><text x="86.1395%" y="447.50">core..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (85 samples, 0.03%)</title><rect x="89.7341%" y="421" width="0.0336%" height="15" fill="rgb(213,189,28)" fg:x="227310" fg:w="85"/><text x="89.9841%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (38 samples, 0.02%)</title><rect x="90.1664%" y="421" width="0.0150%" height="15" fill="rgb(227,203,42)" fg:x="228405" fg:w="38"/><text x="90.4164%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37 samples, 0.01%)</title><rect x="90.1668%" y="405" width="0.0146%" height="15" fill="rgb(244,72,36)" fg:x="228406" fg:w="37"/><text x="90.4168%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37 samples, 0.01%)</title><rect x="90.1668%" y="389" width="0.0146%" height="15" fill="rgb(213,53,17)" fg:x="228406" fg:w="37"/><text x="90.4168%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (73 samples, 0.03%)</title><rect x="90.1664%" y="437" width="0.0288%" height="15" fill="rgb(207,167,3)" fg:x="228405" fg:w="73"/><text x="90.4164%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (35 samples, 0.01%)</title><rect x="90.1814%" y="421" width="0.0138%" height="15" fill="rgb(216,98,30)" fg:x="228443" fg:w="35"/><text x="90.4314%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (35 samples, 0.01%)</title><rect x="90.1814%" y="405" width="0.0138%" height="15" fill="rgb(236,123,15)" fg:x="228443" fg:w="35"/><text x="90.4314%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (116 samples, 0.05%)</title><rect x="90.1960%" y="437" width="0.0458%" height="15" fill="rgb(248,81,50)" fg:x="228480" fg:w="116"/><text x="90.4460%" y="447.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (56 samples, 0.02%)</title><rect x="90.2197%" y="421" width="0.0221%" height="15" fill="rgb(214,120,4)" fg:x="228540" fg:w="56"/><text x="90.4697%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (56 samples, 0.02%)</title><rect x="90.2197%" y="405" width="0.0221%" height="15" fill="rgb(208,179,34)" fg:x="228540" fg:w="56"/><text x="90.4697%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (110 samples, 0.04%)</title><rect x="90.2442%" y="421" width="0.0434%" height="15" fill="rgb(227,140,7)" fg:x="228602" fg:w="110"/><text x="90.4942%" y="431.50"></text></g><g><title>core::ptr::write (57 samples, 0.02%)</title><rect x="90.2651%" y="405" width="0.0225%" height="15" fill="rgb(214,22,6)" fg:x="228655" fg:w="57"/><text x="90.5151%" y="415.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (167 samples, 0.07%)</title><rect x="90.2442%" y="437" width="0.0659%" height="15" fill="rgb(207,137,27)" fg:x="228602" fg:w="167"/><text x="90.4942%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (57 samples, 0.02%)</title><rect x="90.2876%" y="421" width="0.0225%" height="15" fill="rgb(210,8,46)" fg:x="228712" fg:w="57"/><text x="90.5376%" y="431.50"></text></g><g><title>project1::solver::types::LBool::from_sign (30 samples, 0.01%)</title><rect x="90.3101%" y="437" width="0.0118%" height="15" fill="rgb(240,16,54)" fg:x="228769" fg:w="30"/><text x="90.5601%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (30 samples, 0.01%)</title><rect x="90.3101%" y="421" width="0.0118%" height="15" fill="rgb(211,209,29)" fg:x="228769" fg:w="30"/><text x="90.5601%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1,447 samples, 0.57%)</title><rect x="89.7677%" y="453" width="0.5712%" height="15" fill="rgb(226,228,24)" fg:x="227395" fg:w="1447"/><text x="90.0177%" y="463.50"></text></g><g><title>project1::solver::types::Lit::var_idx (43 samples, 0.02%)</title><rect x="90.3219%" y="437" width="0.0170%" height="15" fill="rgb(222,84,9)" fg:x="228799" fg:w="43"/><text x="90.5719%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (43 samples, 0.02%)</title><rect x="90.3219%" y="421" width="0.0170%" height="15" fill="rgb(234,203,30)" fg:x="228799" fg:w="43"/><text x="90.5719%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (43 samples, 0.02%)</title><rect x="90.3389%" y="453" width="0.0170%" height="15" fill="rgb(238,109,14)" fg:x="228842" fg:w="43"/><text x="90.5889%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (267 samples, 0.11%)</title><rect x="90.3559%" y="421" width="0.1054%" height="15" fill="rgb(233,206,34)" fg:x="228885" fg:w="267"/><text x="90.6059%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,620 samples, 0.64%)</title><rect x="90.3559%" y="437" width="0.6395%" height="15" fill="rgb(220,167,47)" fg:x="228885" fg:w="1620"/><text x="90.6059%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,353 samples, 0.53%)</title><rect x="90.4613%" y="421" width="0.5341%" height="15" fill="rgb(238,105,10)" fg:x="229152" fg:w="1353"/><text x="90.7113%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,353 samples, 0.53%)</title><rect x="90.4613%" y="405" width="0.5341%" height="15" fill="rgb(213,227,17)" fg:x="229152" fg:w="1353"/><text x="90.7113%" y="415.50"></text></g><g><title>__hrtimer_run_queues (30 samples, 0.01%)</title><rect x="94.3063%" y="341" width="0.0118%" height="15" fill="rgb(217,132,38)" fg:x="238892" fg:w="30"/><text x="94.5563%" y="351.50"></text></g><g><title>tick_sched_timer (29 samples, 0.01%)</title><rect x="94.3067%" y="325" width="0.0114%" height="15" fill="rgb(242,146,4)" fg:x="238893" fg:w="29"/><text x="94.5567%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (38 samples, 0.02%)</title><rect x="94.3051%" y="373" width="0.0150%" height="15" fill="rgb(212,61,9)" fg:x="238889" fg:w="38"/><text x="94.5551%" y="383.50"></text></g><g><title>hrtimer_interrupt (36 samples, 0.01%)</title><rect x="94.3059%" y="357" width="0.0142%" height="15" fill="rgb(247,126,22)" fg:x="238891" fg:w="36"/><text x="94.5559%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (47 samples, 0.02%)</title><rect x="94.3051%" y="405" width="0.0186%" height="15" fill="rgb(220,196,2)" fg:x="238889" fg:w="47"/><text x="94.5551%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (47 samples, 0.02%)</title><rect x="94.3051%" y="389" width="0.0186%" height="15" fill="rgb(208,46,4)" fg:x="238889" fg:w="47"/><text x="94.5551%" y="399.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (8,432 samples, 3.33%)</title><rect x="90.9954%" y="421" width="3.3287%" height="15" fill="rgb(252,104,46)" fg:x="230505" fg:w="8432"/><text x="91.2454%" y="431.50">&lt;pr..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (12,455 samples, 4.92%)</title><rect x="90.9954%" y="437" width="4.9168%" height="15" fill="rgb(237,152,48)" fg:x="230505" fg:w="12455"/><text x="91.2454%" y="447.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (4,023 samples, 1.59%)</title><rect x="94.3241%" y="421" width="1.5881%" height="15" fill="rgb(221,59,37)" fg:x="238937" fg:w="4023"/><text x="94.5741%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (656 samples, 0.26%)</title><rect x="95.9122%" y="437" width="0.2590%" height="15" fill="rgb(209,202,51)" fg:x="242960" fg:w="656"/><text x="96.1622%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (4,445 samples, 1.75%)</title><rect x="96.1712%" y="421" width="1.7547%" height="15" fill="rgb(228,81,30)" fg:x="243616" fg:w="4445"/><text x="96.4212%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (19,995 samples, 7.89%)</title><rect x="90.3559%" y="453" width="7.8933%" height="15" fill="rgb(227,42,39)" fg:x="228885" fg:w="19995"/><text x="90.6059%" y="463.50">project1::s..</text></g><g><title>project1::solver::types::Lit::var_idx (5,264 samples, 2.08%)</title><rect x="96.1712%" y="437" width="2.0780%" height="15" fill="rgb(221,26,2)" fg:x="243616" fg:w="5264"/><text x="96.4212%" y="447.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (819 samples, 0.32%)</title><rect x="97.9259%" y="421" width="0.3233%" height="15" fill="rgb(254,61,31)" fg:x="248061" fg:w="819"/><text x="98.1759%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (222 samples, 0.09%)</title><rect x="98.2492%" y="421" width="0.0876%" height="15" fill="rgb(222,173,38)" fg:x="248880" fg:w="222"/><text x="98.4992%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (48 samples, 0.02%)</title><rect x="98.3179%" y="405" width="0.0189%" height="15" fill="rgb(218,50,12)" fg:x="249054" fg:w="48"/><text x="98.5679%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (48 samples, 0.02%)</title><rect x="98.3179%" y="389" width="0.0189%" height="15" fill="rgb(223,88,40)" fg:x="249054" fg:w="48"/><text x="98.5679%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (1,061 samples, 0.42%)</title><rect x="98.2492%" y="453" width="0.4188%" height="15" fill="rgb(237,54,19)" fg:x="248880" fg:w="1061"/><text x="98.4992%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,061 samples, 0.42%)</title><rect x="98.2492%" y="437" width="0.4188%" height="15" fill="rgb(251,129,25)" fg:x="248880" fg:w="1061"/><text x="98.4992%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (839 samples, 0.33%)</title><rect x="98.3369%" y="421" width="0.3312%" height="15" fill="rgb(238,97,19)" fg:x="249102" fg:w="839"/><text x="98.5869%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (839 samples, 0.33%)</title><rect x="98.3369%" y="405" width="0.3312%" height="15" fill="rgb(240,169,18)" fg:x="249102" fg:w="839"/><text x="98.5869%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (126 samples, 0.05%)</title><rect x="98.7000%" y="421" width="0.0497%" height="15" fill="rgb(230,187,49)" fg:x="250022" fg:w="126"/><text x="98.9500%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (211 samples, 0.08%)</title><rect x="98.7000%" y="437" width="0.0833%" height="15" fill="rgb(209,44,26)" fg:x="250022" fg:w="211"/><text x="98.9500%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (85 samples, 0.03%)</title><rect x="98.7498%" y="421" width="0.0336%" height="15" fill="rgb(244,0,6)" fg:x="250148" fg:w="85"/><text x="98.9998%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (85 samples, 0.03%)</title><rect x="98.7498%" y="405" width="0.0336%" height="15" fill="rgb(248,18,21)" fg:x="250148" fg:w="85"/><text x="98.9998%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (214 samples, 0.08%)</title><rect x="98.8007%" y="389" width="0.0845%" height="15" fill="rgb(245,180,19)" fg:x="250277" fg:w="214"/><text x="99.0507%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (552 samples, 0.22%)</title><rect x="98.6681%" y="453" width="0.2179%" height="15" fill="rgb(252,118,36)" fg:x="249941" fg:w="552"/><text x="98.9181%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (260 samples, 0.10%)</title><rect x="98.7833%" y="437" width="0.1026%" height="15" fill="rgb(210,224,19)" fg:x="250233" fg:w="260"/><text x="99.0333%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (260 samples, 0.10%)</title><rect x="98.7833%" y="421" width="0.1026%" height="15" fill="rgb(218,30,24)" fg:x="250233" fg:w="260"/><text x="99.0333%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (260 samples, 0.10%)</title><rect x="98.7833%" y="405" width="0.1026%" height="15" fill="rgb(219,75,50)" fg:x="250233" fg:w="260"/><text x="99.0333%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (43 samples, 0.02%)</title><rect x="98.8860%" y="437" width="0.0170%" height="15" fill="rgb(234,72,50)" fg:x="250493" fg:w="43"/><text x="99.1360%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (32 samples, 0.01%)</title><rect x="98.8903%" y="421" width="0.0126%" height="15" fill="rgb(219,100,48)" fg:x="250504" fg:w="32"/><text x="99.1403%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (32 samples, 0.01%)</title><rect x="98.8903%" y="405" width="0.0126%" height="15" fill="rgb(253,5,41)" fg:x="250504" fg:w="32"/><text x="99.1403%" y="415.50"></text></g><g><title>core::ptr::read (370 samples, 0.15%)</title><rect x="98.9029%" y="405" width="0.1461%" height="15" fill="rgb(247,181,11)" fg:x="250536" fg:w="370"/><text x="99.1529%" y="415.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (501 samples, 0.20%)</title><rect x="98.8860%" y="453" width="0.1978%" height="15" fill="rgb(222,223,25)" fg:x="250493" fg:w="501"/><text x="99.1360%" y="463.50"></text></g><g><title>core::mem::take (458 samples, 0.18%)</title><rect x="98.9029%" y="437" width="0.1808%" height="15" fill="rgb(214,198,28)" fg:x="250536" fg:w="458"/><text x="99.1529%" y="447.50"></text></g><g><title>core::mem::replace (458 samples, 0.18%)</title><rect x="98.9029%" y="421" width="0.1808%" height="15" fill="rgb(230,46,43)" fg:x="250536" fg:w="458"/><text x="99.1529%" y="431.50"></text></g><g><title>core::ptr::write (88 samples, 0.03%)</title><rect x="99.0490%" y="405" width="0.0347%" height="15" fill="rgb(233,65,53)" fg:x="250906" fg:w="88"/><text x="99.2990%" y="415.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (767 samples, 0.30%)</title><rect x="99.0837%" y="453" width="0.3028%" height="15" fill="rgb(221,121,27)" fg:x="250994" fg:w="767"/><text x="99.3337%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (174,905 samples, 69.05%)</title><rect x="30.3448%" y="485" width="69.0464%" height="15" fill="rgb(247,70,47)" fg:x="76868" fg:w="174905"/><text x="30.5948%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (156,617 samples, 61.83%)</title><rect x="37.5643%" y="469" width="61.8270%" height="15" fill="rgb(228,85,35)" fg:x="95156" fg:w="156617"/><text x="37.8143%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (44 samples, 0.02%)</title><rect x="99.3913%" y="485" width="0.0174%" height="15" fill="rgb(209,50,18)" fg:x="251773" fg:w="44"/><text x="99.6413%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (766 samples, 0.30%)</title><rect x="99.4086%" y="485" width="0.3024%" height="15" fill="rgb(250,19,35)" fg:x="251817" fg:w="766"/><text x="99.6586%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (250,565 samples, 98.91%)</title><rect x="0.8101%" y="501" width="98.9144%" height="15" fill="rgb(253,107,29)" fg:x="2052" fg:w="250565"/><text x="1.0601%" y="511.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>std::panic::catch_unwind (250,664 samples, 98.95%)</title><rect x="0.8097%" y="629" width="98.9535%" height="15" fill="rgb(252,179,29)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (250,664 samples, 98.95%)</title><rect x="0.8097%" y="613" width="98.9535%" height="15" fill="rgb(238,194,6)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (250,664 samples, 98.95%)</title><rect x="0.8097%" y="597" width="98.9535%" height="15" fill="rgb(238,164,29)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="607.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (250,664 samples, 98.95%)</title><rect x="0.8097%" y="581" width="98.9535%" height="15" fill="rgb(224,25,9)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="591.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (250,664 samples, 98.95%)</title><rect x="0.8097%" y="565" width="98.9535%" height="15" fill="rgb(244,153,23)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="575.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (250,664 samples, 98.95%)</title><rect x="0.8097%" y="549" width="98.9535%" height="15" fill="rgb(212,203,14)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (250,664 samples, 98.95%)</title><rect x="0.8097%" y="533" width="98.9535%" height="15" fill="rgb(220,164,20)" fg:x="2051" fg:w="250664"/><text x="1.0597%" y="543.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (250,663 samples, 98.95%)</title><rect x="0.8101%" y="517" width="98.9531%" height="15" fill="rgb(222,203,48)" fg:x="2052" fg:w="250663"/><text x="1.0601%" y="527.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (98 samples, 0.04%)</title><rect x="99.7245%" y="501" width="0.0387%" height="15" fill="rgb(215,159,22)" fg:x="252617" fg:w="98"/><text x="99.9745%" y="511.50"></text></g><g><title>__clone3 (250,665 samples, 98.95%)</title><rect x="0.8097%" y="741" width="98.9539%" height="15" fill="rgb(216,183,47)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="751.50">__clone3</text></g><g><title>start_thread (250,665 samples, 98.95%)</title><rect x="0.8097%" y="725" width="98.9539%" height="15" fill="rgb(229,195,25)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="735.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (250,665 samples, 98.95%)</title><rect x="0.8097%" y="709" width="98.9539%" height="15" fill="rgb(224,132,51)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="719.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (250,665 samples, 98.95%)</title><rect x="0.8097%" y="693" width="98.9539%" height="15" fill="rgb(240,63,7)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="703.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (250,665 samples, 98.95%)</title><rect x="0.8097%" y="677" width="98.9539%" height="15" fill="rgb(249,182,41)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (250,665 samples, 98.95%)</title><rect x="0.8097%" y="661" width="98.9539%" height="15" fill="rgb(243,47,26)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="671.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (250,665 samples, 98.95%)</title><rect x="0.8097%" y="645" width="98.9539%" height="15" fill="rgb(233,48,2)" fg:x="2051" fg:w="250665"/><text x="1.0597%" y="655.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>asm_exc_page_fault (222 samples, 0.09%)</title><rect x="99.7667%" y="741" width="0.0876%" height="15" fill="rgb(244,165,34)" fg:x="252724" fg:w="222"/><text x="100.0167%" y="751.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (49 samples, 0.02%)</title><rect x="99.8543%" y="741" width="0.0193%" height="15" fill="rgb(207,89,7)" fg:x="252946" fg:w="49"/><text x="100.1043%" y="751.50"></text></g><g><title>page_remove_rmap (50 samples, 0.02%)</title><rect x="99.9017%" y="533" width="0.0197%" height="15" fill="rgb(244,117,36)" fg:x="253066" fg:w="50"/><text x="100.1517%" y="543.50"></text></g><g><title>free_unref_page_list (82 samples, 0.03%)</title><rect x="99.9491%" y="469" width="0.0324%" height="15" fill="rgb(226,144,34)" fg:x="253186" fg:w="82"/><text x="100.1991%" y="479.50"></text></g><g><title>free_unref_page_commit (70 samples, 0.03%)</title><rect x="99.9538%" y="453" width="0.0276%" height="15" fill="rgb(213,23,19)" fg:x="253198" fg:w="70"/><text x="100.2038%" y="463.50"></text></g><g><title>free_pcppages_bulk (60 samples, 0.02%)</title><rect x="99.9578%" y="437" width="0.0237%" height="15" fill="rgb(217,75,12)" fg:x="253208" fg:w="60"/><text x="100.2078%" y="447.50"></text></g><g><title>__free_one_page (54 samples, 0.02%)</title><rect x="99.9601%" y="421" width="0.0213%" height="15" fill="rgb(224,159,17)" fg:x="253214" fg:w="54"/><text x="100.2101%" y="431.50"></text></g><g><title>tlb_flush_mmu (157 samples, 0.06%)</title><rect x="99.9214%" y="533" width="0.0620%" height="15" fill="rgb(217,118,1)" fg:x="253116" fg:w="157"/><text x="100.1714%" y="543.50"></text></g><g><title>tlb_batch_pages_flush (157 samples, 0.06%)</title><rect x="99.9214%" y="517" width="0.0620%" height="15" fill="rgb(232,180,48)" fg:x="253116" fg:w="157"/><text x="100.1714%" y="527.50"></text></g><g><title>free_pages_and_swap_cache (157 samples, 0.06%)</title><rect x="99.9214%" y="501" width="0.0620%" height="15" fill="rgb(230,27,33)" fg:x="253116" fg:w="157"/><text x="100.1714%" y="511.50"></text></g><g><title>release_pages (146 samples, 0.06%)</title><rect x="99.9258%" y="485" width="0.0576%" height="15" fill="rgb(205,31,21)" fg:x="253127" fg:w="146"/><text x="100.1758%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (279 samples, 0.11%)</title><rect x="99.8737%" y="741" width="0.1101%" height="15" fill="rgb(253,59,4)" fg:x="252995" fg:w="279"/><text x="100.1237%" y="751.50"></text></g><g><title>do_syscall_64 (279 samples, 0.11%)</title><rect x="99.8737%" y="725" width="0.1101%" height="15" fill="rgb(224,201,9)" fg:x="252995" fg:w="279"/><text x="100.1237%" y="735.50"></text></g><g><title>__x64_sys_exit_group (278 samples, 0.11%)</title><rect x="99.8741%" y="709" width="0.1097%" height="15" fill="rgb(229,206,30)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="719.50"></text></g><g><title>do_group_exit (278 samples, 0.11%)</title><rect x="99.8741%" y="693" width="0.1097%" height="15" fill="rgb(212,67,47)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="703.50"></text></g><g><title>do_exit (278 samples, 0.11%)</title><rect x="99.8741%" y="677" width="0.1097%" height="15" fill="rgb(211,96,50)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="687.50"></text></g><g><title>exit_mm (278 samples, 0.11%)</title><rect x="99.8741%" y="661" width="0.1097%" height="15" fill="rgb(252,114,18)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="671.50"></text></g><g><title>mmput (278 samples, 0.11%)</title><rect x="99.8741%" y="645" width="0.1097%" height="15" fill="rgb(223,58,37)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="655.50"></text></g><g><title>exit_mmap (278 samples, 0.11%)</title><rect x="99.8741%" y="629" width="0.1097%" height="15" fill="rgb(237,70,4)" fg:x="252996" fg:w="278"/><text x="100.1241%" y="639.50"></text></g><g><title>unmap_vmas (276 samples, 0.11%)</title><rect x="99.8749%" y="613" width="0.1090%" height="15" fill="rgb(244,85,46)" fg:x="252998" fg:w="276"/><text x="100.1249%" y="623.50"></text></g><g><title>unmap_single_vma (276 samples, 0.11%)</title><rect x="99.8749%" y="597" width="0.1090%" height="15" fill="rgb(223,39,52)" fg:x="252998" fg:w="276"/><text x="100.1249%" y="607.50"></text></g><g><title>unmap_page_range (276 samples, 0.11%)</title><rect x="99.8749%" y="581" width="0.1090%" height="15" fill="rgb(218,200,14)" fg:x="252998" fg:w="276"/><text x="100.1249%" y="591.50"></text></g><g><title>zap_pmd_range.isra.0 (276 samples, 0.11%)</title><rect x="99.8749%" y="565" width="0.1090%" height="15" fill="rgb(208,171,16)" fg:x="252998" fg:w="276"/><text x="100.1249%" y="575.50"></text></g><g><title>zap_pte_range (271 samples, 0.11%)</title><rect x="99.8768%" y="549" width="0.1070%" height="15" fill="rgb(234,200,18)" fg:x="253003" fg:w="271"/><text x="100.1268%" y="559.50"></text></g><g><title>all (253,315 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(228,45,11)" fg:x="0" fg:w="253315"/><text x="0.2500%" y="783.50"></text></g><g><title>project1 (253,309 samples, 100.00%)</title><rect x="0.0024%" y="757" width="99.9976%" height="15" fill="rgb(237,182,11)" fg:x="6" fg:w="253309"/><text x="0.2524%" y="767.50">project1</text></g></svg></svg>