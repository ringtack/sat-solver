<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="2838"><g><title>perf-exec (6 samples, 0.21%)</title><rect x="0.0000%" y="725" width="0.2114%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.21%)</title><rect x="0.0000%" y="709" width="0.2114%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>do_syscall_64 (6 samples, 0.21%)</title><rect x="0.0000%" y="693" width="0.2114%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.21%)</title><rect x="0.0000%" y="677" width="0.2114%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.21%)</title><rect x="0.0000%" y="661" width="0.2114%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>bprm_execve (6 samples, 0.21%)</title><rect x="0.0000%" y="645" width="0.2114%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.21%)</title><rect x="0.0000%" y="629" width="0.2114%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>exec_binprm (6 samples, 0.21%)</title><rect x="0.0000%" y="613" width="0.2114%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>search_binary_handler (6 samples, 0.21%)</title><rect x="0.0000%" y="597" width="0.2114%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>load_elf_binary (6 samples, 0.21%)</title><rect x="0.0000%" y="581" width="0.2114%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>begin_new_exec (6 samples, 0.21%)</title><rect x="0.0000%" y="565" width="0.2114%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50"></text></g><g><title>perf_event_exec (6 samples, 0.21%)</title><rect x="0.0000%" y="549" width="0.2114%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>perf_event_enable_on_exec (6 samples, 0.21%)</title><rect x="0.0000%" y="533" width="0.2114%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>ctx_resched (6 samples, 0.21%)</title><rect x="0.0000%" y="517" width="0.2114%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.21%)</title><rect x="0.0000%" y="501" width="0.2114%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.21%)</title><rect x="0.0000%" y="485" width="0.2114%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>native_write_msr (6 samples, 0.21%)</title><rect x="0.0000%" y="469" width="0.2114%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>[[heap]] (1 samples, 0.04%)</title><rect x="0.2114%" y="709" width="0.0352%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.4614%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="0.2114%" y="693" width="0.0352%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.4614%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="0.2467%" y="693" width="0.0352%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.4967%" y="703.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.07%)</title><rect x="0.2819%" y="693" width="0.0705%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="2"/><text x="0.5319%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="0.3524%" y="693" width="0.0352%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="0.6024%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="0.3524%" y="677" width="0.0352%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="1"/><text x="0.6024%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.04%)</title><rect x="0.3876%" y="661" width="0.0352%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="1"/><text x="0.6376%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.04%)</title><rect x="0.3876%" y="645" width="0.0352%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="0.6376%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.3876%" y="629" width="0.0352%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="0.6376%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="0.3876%" y="613" width="0.0352%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="0.6376%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="0.3876%" y="597" width="0.0352%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="0.6376%" y="607.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="0.3876%" y="581" width="0.0352%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="0.6376%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="0.3876%" y="565" width="0.0352%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="0.6376%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.07%)</title><rect x="0.4228%" y="645" width="0.0705%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="2"/><text x="0.6728%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="0.4228%" y="629" width="0.0705%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="2"/><text x="0.6728%" y="639.50"></text></g><g><title>[anon] (8 samples, 0.28%)</title><rect x="0.2467%" y="709" width="0.2819%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="8"/><text x="0.4967%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (4 samples, 0.14%)</title><rect x="0.3876%" y="693" width="0.1409%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="4"/><text x="0.6376%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (4 samples, 0.14%)</title><rect x="0.3876%" y="677" width="0.1409%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="4"/><text x="0.6376%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (3 samples, 0.11%)</title><rect x="0.4228%" y="661" width="0.1057%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="3"/><text x="0.6728%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (1 samples, 0.04%)</title><rect x="0.4933%" y="645" width="0.0352%" height="15" fill="rgb(226,3,54)" fg:x="14" fg:w="1"/><text x="0.7433%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (1 samples, 0.04%)</title><rect x="0.4933%" y="629" width="0.0352%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="0.7433%" y="639.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.4933%" y="613" width="0.0352%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="0.7433%" y="623.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="0.5285%" y="693" width="0.0352%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="0.7785%" y="703.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.04%)</title><rect x="0.5638%" y="693" width="0.0352%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="1"/><text x="0.8138%" y="703.50"></text></g><g><title>core::slice::sort::provide_sorted_batch (1 samples, 0.04%)</title><rect x="0.5638%" y="677" width="0.0352%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="1"/><text x="0.8138%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="0.5990%" y="693" width="0.0352%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="1"/><text x="0.8490%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="0.5990%" y="677" width="0.0352%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="1"/><text x="0.8490%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2 samples, 0.07%)</title><rect x="0.6342%" y="693" width="0.0705%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="2"/><text x="0.8842%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (3 samples, 0.11%)</title><rect x="0.7047%" y="693" width="0.1057%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="3"/><text x="0.9547%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2 samples, 0.07%)</title><rect x="0.7400%" y="677" width="0.0705%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="2"/><text x="0.9900%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.07%)</title><rect x="0.7400%" y="661" width="0.0705%" height="15" fill="rgb(250,191,14)" fg:x="21" fg:w="2"/><text x="0.9900%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.07%)</title><rect x="0.7400%" y="645" width="0.0705%" height="15" fill="rgb(239,60,40)" fg:x="21" fg:w="2"/><text x="0.9900%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.07%)</title><rect x="0.7400%" y="629" width="0.0705%" height="15" fill="rgb(206,27,48)" fg:x="21" fg:w="2"/><text x="0.9900%" y="639.50"></text></g><g><title>[unknown] (9 samples, 0.32%)</title><rect x="0.5285%" y="709" width="0.3171%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="9"/><text x="0.7785%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.04%)</title><rect x="0.8104%" y="693" width="0.0352%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="1"/><text x="1.0604%" y="703.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="0.8457%" y="709" width="0.0352%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="1"/><text x="1.0957%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::new (1 samples, 0.04%)</title><rect x="0.8809%" y="485" width="0.0352%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="1"/><text x="1.1309%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::init (1 samples, 0.04%)</title><rect x="0.8809%" y="469" width="0.0352%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="1"/><text x="1.1309%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_clause (1 samples, 0.04%)</title><rect x="0.8809%" y="453" width="0.0352%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="1"/><text x="1.1309%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="0.8809%" y="437" width="0.0352%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="1"/><text x="1.1309%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="0.8809%" y="421" width="0.0352%" height="15" fill="rgb(247,81,37)" fg:x="25" fg:w="1"/><text x="1.1309%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="0.8809%" y="405" width="0.0352%" height="15" fill="rgb(209,12,38)" fg:x="25" fg:w="1"/><text x="1.1309%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="0.8809%" y="389" width="0.0352%" height="15" fill="rgb(227,1,9)" fg:x="25" fg:w="1"/><text x="1.1309%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="0.8809%" y="373" width="0.0352%" height="15" fill="rgb(248,47,43)" fg:x="25" fg:w="1"/><text x="1.1309%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="0.8809%" y="357" width="0.0352%" height="15" fill="rgb(221,10,30)" fg:x="25" fg:w="1"/><text x="1.1309%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="0.8809%" y="341" width="0.0352%" height="15" fill="rgb(210,229,1)" fg:x="25" fg:w="1"/><text x="1.1309%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="0.8809%" y="325" width="0.0352%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="1"/><text x="1.1309%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="0.8809%" y="309" width="0.0352%" height="15" fill="rgb(234,67,33)" fg:x="25" fg:w="1"/><text x="1.1309%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="0.8809%" y="293" width="0.0352%" height="15" fill="rgb(247,98,35)" fg:x="25" fg:w="1"/><text x="1.1309%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="0.8809%" y="277" width="0.0352%" height="15" fill="rgb(247,138,52)" fg:x="25" fg:w="1"/><text x="1.1309%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="0.8809%" y="261" width="0.0352%" height="15" fill="rgb(213,79,30)" fg:x="25" fg:w="1"/><text x="1.1309%" y="271.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="0.8809%" y="245" width="0.0352%" height="15" fill="rgb(246,177,23)" fg:x="25" fg:w="1"/><text x="1.1309%" y="255.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="0.8809%" y="229" width="0.0352%" height="15" fill="rgb(230,62,27)" fg:x="25" fg:w="1"/><text x="1.1309%" y="239.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="0.8809%" y="213" width="0.0352%" height="15" fill="rgb(216,154,8)" fg:x="25" fg:w="1"/><text x="1.1309%" y="223.50"></text></g><g><title>vmacache_find (1 samples, 0.04%)</title><rect x="0.8809%" y="197" width="0.0352%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="1"/><text x="1.1309%" y="207.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (3 samples, 0.11%)</title><rect x="1.0571%" y="453" width="0.1057%" height="15" fill="rgb(251,115,12)" fg:x="30" fg:w="3"/><text x="1.3071%" y="463.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="2.7484%" y="229" width="0.0352%" height="15" fill="rgb(240,54,50)" fg:x="78" fg:w="1"/><text x="2.9984%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.18%)</title><rect x="2.6427%" y="437" width="0.1762%" height="15" fill="rgb(233,84,52)" fg:x="75" fg:w="5"/><text x="2.8927%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.18%)</title><rect x="2.6427%" y="421" width="0.1762%" height="15" fill="rgb(207,117,47)" fg:x="75" fg:w="5"/><text x="2.8927%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.18%)</title><rect x="2.6427%" y="405" width="0.1762%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="5"/><text x="2.8927%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.18%)</title><rect x="2.6427%" y="389" width="0.1762%" height="15" fill="rgb(209,38,44)" fg:x="75" fg:w="5"/><text x="2.8927%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.18%)</title><rect x="2.6427%" y="373" width="0.1762%" height="15" fill="rgb(236,212,23)" fg:x="75" fg:w="5"/><text x="2.8927%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.18%)</title><rect x="2.6427%" y="357" width="0.1762%" height="15" fill="rgb(242,79,21)" fg:x="75" fg:w="5"/><text x="2.8927%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.18%)</title><rect x="2.6427%" y="341" width="0.1762%" height="15" fill="rgb(211,96,35)" fg:x="75" fg:w="5"/><text x="2.8927%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="2.7132%" y="325" width="0.1057%" height="15" fill="rgb(253,215,40)" fg:x="77" fg:w="3"/><text x="2.9632%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="2.7132%" y="309" width="0.1057%" height="15" fill="rgb(211,81,21)" fg:x="77" fg:w="3"/><text x="2.9632%" y="319.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="2.7132%" y="293" width="0.1057%" height="15" fill="rgb(208,190,38)" fg:x="77" fg:w="3"/><text x="2.9632%" y="303.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="2.7132%" y="277" width="0.1057%" height="15" fill="rgb(235,213,38)" fg:x="77" fg:w="3"/><text x="2.9632%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.11%)</title><rect x="2.7132%" y="261" width="0.1057%" height="15" fill="rgb(237,122,38)" fg:x="77" fg:w="3"/><text x="2.9632%" y="271.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="2.7132%" y="245" width="0.1057%" height="15" fill="rgb(244,218,35)" fg:x="77" fg:w="3"/><text x="2.9632%" y="255.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="2.7837%" y="229" width="0.0352%" height="15" fill="rgb(240,68,47)" fg:x="79" fg:w="1"/><text x="3.0337%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="2.8189%" y="437" width="0.0352%" height="15" fill="rgb(210,16,53)" fg:x="80" fg:w="1"/><text x="3.0689%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="2.8541%" y="405" width="0.0352%" height="15" fill="rgb(235,124,12)" fg:x="81" fg:w="1"/><text x="3.1041%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="2.8541%" y="389" width="0.0352%" height="15" fill="rgb(224,169,11)" fg:x="81" fg:w="1"/><text x="3.1041%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="2.8541%" y="373" width="0.0352%" height="15" fill="rgb(250,166,2)" fg:x="81" fg:w="1"/><text x="3.1041%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="2.8541%" y="357" width="0.0352%" height="15" fill="rgb(242,216,29)" fg:x="81" fg:w="1"/><text x="3.1041%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="2.8541%" y="437" width="0.0705%" height="15" fill="rgb(230,116,27)" fg:x="81" fg:w="2"/><text x="3.1041%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="2.8541%" y="421" width="0.0705%" height="15" fill="rgb(228,99,48)" fg:x="81" fg:w="2"/><text x="3.1041%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="2.8894%" y="405" width="0.0352%" height="15" fill="rgb(253,11,6)" fg:x="82" fg:w="1"/><text x="3.1394%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.28%)</title><rect x="2.9246%" y="437" width="0.2819%" height="15" fill="rgb(247,143,39)" fg:x="83" fg:w="8"/><text x="3.1746%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.28%)</title><rect x="2.9246%" y="421" width="0.2819%" height="15" fill="rgb(236,97,10)" fg:x="83" fg:w="8"/><text x="3.1746%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (3 samples, 0.11%)</title><rect x="3.2065%" y="437" width="0.1057%" height="15" fill="rgb(233,208,19)" fg:x="91" fg:w="3"/><text x="3.4565%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (3 samples, 0.11%)</title><rect x="3.2065%" y="421" width="0.1057%" height="15" fill="rgb(216,164,2)" fg:x="91" fg:w="3"/><text x="3.4565%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (3 samples, 0.11%)</title><rect x="3.2065%" y="405" width="0.1057%" height="15" fill="rgb(220,129,5)" fg:x="91" fg:w="3"/><text x="3.4565%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (3 samples, 0.11%)</title><rect x="3.2065%" y="389" width="0.1057%" height="15" fill="rgb(242,17,10)" fg:x="91" fg:w="3"/><text x="3.4565%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="3.3122%" y="437" width="0.0705%" height="15" fill="rgb(242,107,0)" fg:x="94" fg:w="2"/><text x="3.5622%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (2 samples, 0.07%)</title><rect x="3.3122%" y="421" width="0.0705%" height="15" fill="rgb(251,28,31)" fg:x="94" fg:w="2"/><text x="3.5622%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (2 samples, 0.07%)</title><rect x="3.3122%" y="405" width="0.0705%" height="15" fill="rgb(233,223,10)" fg:x="94" fg:w="2"/><text x="3.5622%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (2 samples, 0.07%)</title><rect x="3.3122%" y="389" width="0.0705%" height="15" fill="rgb(215,21,27)" fg:x="94" fg:w="2"/><text x="3.5622%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (2 samples, 0.07%)</title><rect x="3.3827%" y="437" width="0.0705%" height="15" fill="rgb(232,23,21)" fg:x="96" fg:w="2"/><text x="3.6327%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="3.5588%" y="421" width="0.0352%" height="15" fill="rgb(244,5,23)" fg:x="101" fg:w="1"/><text x="3.8088%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="3.5588%" y="405" width="0.0352%" height="15" fill="rgb(226,81,46)" fg:x="101" fg:w="1"/><text x="3.8088%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="3.5588%" y="389" width="0.0352%" height="15" fill="rgb(247,70,30)" fg:x="101" fg:w="1"/><text x="3.8088%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="3.5588%" y="373" width="0.0352%" height="15" fill="rgb(212,68,19)" fg:x="101" fg:w="1"/><text x="3.8088%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="3.5588%" y="357" width="0.0352%" height="15" fill="rgb(240,187,13)" fg:x="101" fg:w="1"/><text x="3.8088%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="3.5588%" y="341" width="0.0352%" height="15" fill="rgb(223,113,26)" fg:x="101" fg:w="1"/><text x="3.8088%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="3.5588%" y="325" width="0.0352%" height="15" fill="rgb(206,192,2)" fg:x="101" fg:w="1"/><text x="3.8088%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="3.5588%" y="309" width="0.0352%" height="15" fill="rgb(241,108,4)" fg:x="101" fg:w="1"/><text x="3.8088%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="3.5588%" y="293" width="0.0352%" height="15" fill="rgb(247,173,49)" fg:x="101" fg:w="1"/><text x="3.8088%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="3.5588%" y="277" width="0.0352%" height="15" fill="rgb(224,114,35)" fg:x="101" fg:w="1"/><text x="3.8088%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="3.5588%" y="261" width="0.0352%" height="15" fill="rgb(245,159,27)" fg:x="101" fg:w="1"/><text x="3.8088%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.39%)</title><rect x="3.4531%" y="437" width="0.3876%" height="15" fill="rgb(245,172,44)" fg:x="98" fg:w="11"/><text x="3.7031%" y="447.50"></text></g><g><title>core::ptr::write (7 samples, 0.25%)</title><rect x="3.5941%" y="421" width="0.2467%" height="15" fill="rgb(236,23,11)" fg:x="102" fg:w="7"/><text x="3.8441%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.07%)</title><rect x="3.8407%" y="437" width="0.0705%" height="15" fill="rgb(205,117,38)" fg:x="109" fg:w="2"/><text x="4.0907%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.04%)</title><rect x="3.8760%" y="421" width="0.0352%" height="15" fill="rgb(237,72,25)" fg:x="110" fg:w="1"/><text x="4.1260%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="3.9817%" y="277" width="0.0352%" height="15" fill="rgb(244,70,9)" fg:x="113" fg:w="1"/><text x="4.2317%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="3.9817%" y="261" width="0.0352%" height="15" fill="rgb(217,125,39)" fg:x="113" fg:w="1"/><text x="4.2317%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="3.9817%" y="245" width="0.0352%" height="15" fill="rgb(235,36,10)" fg:x="113" fg:w="1"/><text x="4.2317%" y="255.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="3.9817%" y="229" width="0.0352%" height="15" fill="rgb(251,123,47)" fg:x="113" fg:w="1"/><text x="4.2317%" y="239.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="3.9817%" y="213" width="0.0352%" height="15" fill="rgb(221,13,13)" fg:x="113" fg:w="1"/><text x="4.2317%" y="223.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="3.9817%" y="197" width="0.0352%" height="15" fill="rgb(238,131,9)" fg:x="113" fg:w="1"/><text x="4.2317%" y="207.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="3.9817%" y="181" width="0.0352%" height="15" fill="rgb(211,50,8)" fg:x="113" fg:w="1"/><text x="4.2317%" y="191.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="3.9817%" y="165" width="0.0352%" height="15" fill="rgb(245,182,24)" fg:x="113" fg:w="1"/><text x="4.2317%" y="175.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="3.9817%" y="149" width="0.0352%" height="15" fill="rgb(242,14,37)" fg:x="113" fg:w="1"/><text x="4.2317%" y="159.50"></text></g><g><title>trigger_load_balance (1 samples, 0.04%)</title><rect x="3.9817%" y="133" width="0.0352%" height="15" fill="rgb(246,228,12)" fg:x="113" fg:w="1"/><text x="4.2317%" y="143.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.04%)</title><rect x="3.9817%" y="117" width="0.0352%" height="15" fill="rgb(213,55,15)" fg:x="113" fg:w="1"/><text x="4.2317%" y="127.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.04%)</title><rect x="3.9817%" y="101" width="0.0352%" height="15" fill="rgb(209,9,3)" fg:x="113" fg:w="1"/><text x="4.2317%" y="111.50"></text></g><g><title>generic_exec_single (1 samples, 0.04%)</title><rect x="3.9817%" y="85" width="0.0352%" height="15" fill="rgb(230,59,30)" fg:x="113" fg:w="1"/><text x="4.2317%" y="95.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.04%)</title><rect x="3.9817%" y="69" width="0.0352%" height="15" fill="rgb(209,121,21)" fg:x="113" fg:w="1"/><text x="4.2317%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.14%)</title><rect x="3.9112%" y="437" width="0.1409%" height="15" fill="rgb(220,109,13)" fg:x="111" fg:w="4"/><text x="4.1612%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.14%)</title><rect x="3.9112%" y="421" width="0.1409%" height="15" fill="rgb(232,18,1)" fg:x="111" fg:w="4"/><text x="4.1612%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.14%)</title><rect x="3.9112%" y="405" width="0.1409%" height="15" fill="rgb(215,41,42)" fg:x="111" fg:w="4"/><text x="4.1612%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.14%)</title><rect x="3.9112%" y="389" width="0.1409%" height="15" fill="rgb(224,123,36)" fg:x="111" fg:w="4"/><text x="4.1612%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.14%)</title><rect x="3.9112%" y="373" width="0.1409%" height="15" fill="rgb(240,125,3)" fg:x="111" fg:w="4"/><text x="4.1612%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.14%)</title><rect x="3.9112%" y="357" width="0.1409%" height="15" fill="rgb(205,98,50)" fg:x="111" fg:w="4"/><text x="4.1612%" y="367.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="3.9112%" y="341" width="0.1409%" height="15" fill="rgb(205,185,37)" fg:x="111" fg:w="4"/><text x="4.1612%" y="351.50"></text></g><g><title>__rdl_alloc (4 samples, 0.14%)</title><rect x="3.9112%" y="325" width="0.1409%" height="15" fill="rgb(238,207,15)" fg:x="111" fg:w="4"/><text x="4.1612%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.14%)</title><rect x="3.9112%" y="309" width="0.1409%" height="15" fill="rgb(213,199,42)" fg:x="111" fg:w="4"/><text x="4.1612%" y="319.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.14%)</title><rect x="3.9112%" y="293" width="0.1409%" height="15" fill="rgb(235,201,11)" fg:x="111" fg:w="4"/><text x="4.1612%" y="303.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="4.0169%" y="277" width="0.0352%" height="15" fill="rgb(207,46,11)" fg:x="114" fg:w="1"/><text x="4.2669%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.04%)</title><rect x="4.0521%" y="437" width="0.0352%" height="15" fill="rgb(241,35,35)" fg:x="115" fg:w="1"/><text x="4.3021%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (6 samples, 0.21%)</title><rect x="4.0874%" y="437" width="0.2114%" height="15" fill="rgb(243,32,47)" fg:x="116" fg:w="6"/><text x="4.3374%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6 samples, 0.21%)</title><rect x="4.0874%" y="421" width="0.2114%" height="15" fill="rgb(247,202,23)" fg:x="116" fg:w="6"/><text x="4.3374%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.21%)</title><rect x="4.0874%" y="405" width="0.2114%" height="15" fill="rgb(219,102,11)" fg:x="116" fg:w="6"/><text x="4.3374%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.21%)</title><rect x="4.0874%" y="389" width="0.2114%" height="15" fill="rgb(243,110,44)" fg:x="116" fg:w="6"/><text x="4.3374%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (3 samples, 0.11%)</title><rect x="4.1931%" y="373" width="0.1057%" height="15" fill="rgb(222,74,54)" fg:x="119" fg:w="3"/><text x="4.4431%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (3 samples, 0.11%)</title><rect x="4.1931%" y="357" width="0.1057%" height="15" fill="rgb(216,99,12)" fg:x="119" fg:w="3"/><text x="4.4431%" y="367.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.11%)</title><rect x="4.1931%" y="341" width="0.1057%" height="15" fill="rgb(226,22,26)" fg:x="119" fg:w="3"/><text x="4.4431%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.04%)</title><rect x="4.2636%" y="325" width="0.0352%" height="15" fill="rgb(217,163,10)" fg:x="121" fg:w="1"/><text x="4.5136%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (1 samples, 0.04%)</title><rect x="4.2636%" y="309" width="0.0352%" height="15" fill="rgb(213,25,53)" fg:x="121" fg:w="1"/><text x="4.5136%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.04%)</title><rect x="4.2636%" y="293" width="0.0352%" height="15" fill="rgb(252,105,26)" fg:x="121" fg:w="1"/><text x="4.5136%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.04%)</title><rect x="4.2636%" y="277" width="0.0352%" height="15" fill="rgb(220,39,43)" fg:x="121" fg:w="1"/><text x="4.5136%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="4.2988%" y="405" width="0.0352%" height="15" fill="rgb(229,68,48)" fg:x="122" fg:w="1"/><text x="4.5488%" y="415.50"></text></g><g><title>core::mem::take (2 samples, 0.07%)</title><rect x="4.2988%" y="437" width="0.0705%" height="15" fill="rgb(252,8,32)" fg:x="122" fg:w="2"/><text x="4.5488%" y="447.50"></text></g><g><title>core::mem::replace (2 samples, 0.07%)</title><rect x="4.2988%" y="421" width="0.0705%" height="15" fill="rgb(223,20,43)" fg:x="122" fg:w="2"/><text x="4.5488%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.04%)</title><rect x="4.3340%" y="405" width="0.0352%" height="15" fill="rgb(229,81,49)" fg:x="123" fg:w="1"/><text x="4.5840%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (2 samples, 0.07%)</title><rect x="4.3693%" y="405" width="0.0705%" height="15" fill="rgb(236,28,36)" fg:x="124" fg:w="2"/><text x="4.6193%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.07%)</title><rect x="4.3693%" y="389" width="0.0705%" height="15" fill="rgb(249,185,26)" fg:x="124" fg:w="2"/><text x="4.6193%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.11%)</title><rect x="4.3693%" y="437" width="0.1057%" height="15" fill="rgb(249,174,33)" fg:x="124" fg:w="3"/><text x="4.6193%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (3 samples, 0.11%)</title><rect x="4.3693%" y="421" width="0.1057%" height="15" fill="rgb(233,201,37)" fg:x="124" fg:w="3"/><text x="4.6193%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.04%)</title><rect x="4.4397%" y="405" width="0.0352%" height="15" fill="rgb(221,78,26)" fg:x="126" fg:w="1"/><text x="4.6897%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (2 samples, 0.07%)</title><rect x="4.4750%" y="437" width="0.0705%" height="15" fill="rgb(250,127,30)" fg:x="127" fg:w="2"/><text x="4.7250%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (2 samples, 0.07%)</title><rect x="4.4750%" y="421" width="0.0705%" height="15" fill="rgb(230,49,44)" fg:x="127" fg:w="2"/><text x="4.7250%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="4.4750%" y="405" width="0.0705%" height="15" fill="rgb(229,67,23)" fg:x="127" fg:w="2"/><text x="4.7250%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="4.4750%" y="389" width="0.0705%" height="15" fill="rgb(249,83,47)" fg:x="127" fg:w="2"/><text x="4.7250%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="4.4750%" y="373" width="0.0705%" height="15" fill="rgb(215,43,3)" fg:x="127" fg:w="2"/><text x="4.7250%" y="383.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.07%)</title><rect x="4.4750%" y="357" width="0.0705%" height="15" fill="rgb(238,154,13)" fg:x="127" fg:w="2"/><text x="4.7250%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.07%)</title><rect x="4.4750%" y="341" width="0.0705%" height="15" fill="rgb(219,56,2)" fg:x="127" fg:w="2"/><text x="4.7250%" y="351.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="4.4750%" y="325" width="0.0705%" height="15" fill="rgb(233,0,4)" fg:x="127" fg:w="2"/><text x="4.7250%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="4.4750%" y="309" width="0.0705%" height="15" fill="rgb(235,30,7)" fg:x="127" fg:w="2"/><text x="4.7250%" y="319.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="4.4750%" y="293" width="0.0705%" height="15" fill="rgb(250,79,13)" fg:x="127" fg:w="2"/><text x="4.7250%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.04%)</title><rect x="4.5455%" y="437" width="0.0352%" height="15" fill="rgb(211,146,34)" fg:x="129" fg:w="1"/><text x="4.7955%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.04%)</title><rect x="4.5455%" y="421" width="0.0352%" height="15" fill="rgb(228,22,38)" fg:x="129" fg:w="1"/><text x="4.7955%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="4.5455%" y="405" width="0.0352%" height="15" fill="rgb(235,168,5)" fg:x="129" fg:w="1"/><text x="4.7955%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="4.5455%" y="389" width="0.0352%" height="15" fill="rgb(221,155,16)" fg:x="129" fg:w="1"/><text x="4.7955%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 0.28%)</title><rect x="4.5807%" y="437" width="0.2819%" height="15" fill="rgb(215,215,53)" fg:x="130" fg:w="8"/><text x="4.8307%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.28%)</title><rect x="4.5807%" y="421" width="0.2819%" height="15" fill="rgb(223,4,10)" fg:x="130" fg:w="8"/><text x="4.8307%" y="431.50"></text></g><g><title>__memcpy_evex_unaligned_erms (8 samples, 0.28%)</title><rect x="4.5807%" y="405" width="0.2819%" height="15" fill="rgb(234,103,6)" fg:x="130" fg:w="8"/><text x="4.8307%" y="415.50"></text></g><g><title>log::max_level (2 samples, 0.07%)</title><rect x="4.8626%" y="437" width="0.0705%" height="15" fill="rgb(227,97,0)" fg:x="138" fg:w="2"/><text x="5.1126%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.07%)</title><rect x="4.8626%" y="421" width="0.0705%" height="15" fill="rgb(234,150,53)" fg:x="138" fg:w="2"/><text x="5.1126%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.07%)</title><rect x="4.8626%" y="405" width="0.0705%" height="15" fill="rgb(228,201,54)" fg:x="138" fg:w="2"/><text x="5.1126%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="4.9331%" y="405" width="0.0352%" height="15" fill="rgb(222,22,37)" fg:x="140" fg:w="1"/><text x="5.1831%" y="415.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (2 samples, 0.07%)</title><rect x="4.9331%" y="437" width="0.0705%" height="15" fill="rgb(237,53,32)" fg:x="140" fg:w="2"/><text x="5.1831%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="4.9331%" y="421" width="0.0705%" height="15" fill="rgb(233,25,53)" fg:x="140" fg:w="2"/><text x="5.1831%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="4.9683%" y="405" width="0.0352%" height="15" fill="rgb(210,40,34)" fg:x="141" fg:w="1"/><text x="5.2183%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="4.9683%" y="389" width="0.0352%" height="15" fill="rgb(241,220,44)" fg:x="141" fg:w="1"/><text x="5.2183%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="5.1445%" y="389" width="0.0352%" height="15" fill="rgb(235,28,35)" fg:x="146" fg:w="1"/><text x="5.3945%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.11%)</title><rect x="5.1445%" y="421" width="0.1057%" height="15" fill="rgb(210,56,17)" fg:x="146" fg:w="3"/><text x="5.3945%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="5.1445%" y="405" width="0.1057%" height="15" fill="rgb(224,130,29)" fg:x="146" fg:w="3"/><text x="5.3945%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="5.1797%" y="389" width="0.0705%" height="15" fill="rgb(235,212,8)" fg:x="147" fg:w="2"/><text x="5.4297%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="5.1797%" y="373" width="0.0705%" height="15" fill="rgb(223,33,50)" fg:x="147" fg:w="2"/><text x="5.4297%" y="383.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (6 samples, 0.21%)</title><rect x="5.2502%" y="421" width="0.2114%" height="15" fill="rgb(219,149,13)" fg:x="149" fg:w="6"/><text x="5.5002%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (4 samples, 0.14%)</title><rect x="5.3206%" y="405" width="0.1409%" height="15" fill="rgb(250,156,29)" fg:x="151" fg:w="4"/><text x="5.5706%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="5.4968%" y="213" width="0.0705%" height="15" fill="rgb(216,193,19)" fg:x="156" fg:w="2"/><text x="5.7468%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="5.4616%" y="229" width="0.1409%" height="15" fill="rgb(216,135,14)" fg:x="155" fg:w="4"/><text x="5.7116%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="5.5673%" y="213" width="0.0352%" height="15" fill="rgb(241,47,5)" fg:x="158" fg:w="1"/><text x="5.8173%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="5.7082%" y="213" width="0.1057%" height="15" fill="rgb(233,42,35)" fg:x="162" fg:w="3"/><text x="5.9582%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.46%)</title><rect x="5.4616%" y="277" width="0.4581%" height="15" fill="rgb(231,13,6)" fg:x="155" fg:w="13"/><text x="5.7116%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.46%)</title><rect x="5.4616%" y="261" width="0.4581%" height="15" fill="rgb(207,181,40)" fg:x="155" fg:w="13"/><text x="5.7116%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.46%)</title><rect x="5.4616%" y="245" width="0.4581%" height="15" fill="rgb(254,173,49)" fg:x="155" fg:w="13"/><text x="5.7116%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.32%)</title><rect x="5.6025%" y="229" width="0.3171%" height="15" fill="rgb(221,1,38)" fg:x="159" fg:w="9"/><text x="5.8525%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="5.8140%" y="213" width="0.1057%" height="15" fill="rgb(206,124,46)" fg:x="165" fg:w="3"/><text x="6.0640%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.07%)</title><rect x="5.9197%" y="277" width="0.0705%" height="15" fill="rgb(249,21,11)" fg:x="168" fg:w="2"/><text x="6.1697%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.07%)</title><rect x="5.9197%" y="261" width="0.0705%" height="15" fill="rgb(222,201,40)" fg:x="168" fg:w="2"/><text x="6.1697%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.07%)</title><rect x="5.9197%" y="245" width="0.0705%" height="15" fill="rgb(235,61,29)" fg:x="168" fg:w="2"/><text x="6.1697%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.07%)</title><rect x="5.9197%" y="229" width="0.0705%" height="15" fill="rgb(219,207,3)" fg:x="168" fg:w="2"/><text x="6.1697%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.67%)</title><rect x="5.4616%" y="309" width="0.6695%" height="15" fill="rgb(222,56,46)" fg:x="155" fg:w="19"/><text x="5.7116%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.67%)</title><rect x="5.4616%" y="293" width="0.6695%" height="15" fill="rgb(239,76,54)" fg:x="155" fg:w="19"/><text x="5.7116%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.14%)</title><rect x="5.9901%" y="277" width="0.1409%" height="15" fill="rgb(231,124,27)" fg:x="170" fg:w="4"/><text x="6.2401%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (4 samples, 0.14%)</title><rect x="5.9901%" y="261" width="0.1409%" height="15" fill="rgb(249,195,6)" fg:x="170" fg:w="4"/><text x="6.2401%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (4 samples, 0.14%)</title><rect x="5.9901%" y="245" width="0.1409%" height="15" fill="rgb(237,174,47)" fg:x="170" fg:w="4"/><text x="6.2401%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.14%)</title><rect x="5.9901%" y="229" width="0.1409%" height="15" fill="rgb(206,201,31)" fg:x="170" fg:w="4"/><text x="6.2401%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="5.9901%" y="213" width="0.1409%" height="15" fill="rgb(231,57,52)" fg:x="170" fg:w="4"/><text x="6.2401%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="5.9901%" y="197" width="0.1409%" height="15" fill="rgb(248,177,22)" fg:x="170" fg:w="4"/><text x="6.2401%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="5.9901%" y="181" width="0.1409%" height="15" fill="rgb(215,211,37)" fg:x="170" fg:w="4"/><text x="6.2401%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.11%)</title><rect x="6.0254%" y="165" width="0.1057%" height="15" fill="rgb(241,128,51)" fg:x="171" fg:w="3"/><text x="6.2754%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="6.0254%" y="149" width="0.1057%" height="15" fill="rgb(227,165,31)" fg:x="171" fg:w="3"/><text x="6.2754%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="6.2368%" y="261" width="0.0352%" height="15" fill="rgb(228,167,24)" fg:x="177" fg:w="1"/><text x="6.4868%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.07%)</title><rect x="6.2720%" y="261" width="0.0705%" height="15" fill="rgb(228,143,12)" fg:x="178" fg:w="2"/><text x="6.5220%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="6.2720%" y="245" width="0.0705%" height="15" fill="rgb(249,149,8)" fg:x="178" fg:w="2"/><text x="6.5220%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.07%)</title><rect x="6.2720%" y="229" width="0.0705%" height="15" fill="rgb(243,35,44)" fg:x="178" fg:w="2"/><text x="6.5220%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.07%)</title><rect x="6.2720%" y="213" width="0.0705%" height="15" fill="rgb(246,89,9)" fg:x="178" fg:w="2"/><text x="6.5220%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.07%)</title><rect x="6.2720%" y="197" width="0.0705%" height="15" fill="rgb(233,213,13)" fg:x="178" fg:w="2"/><text x="6.5220%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (26 samples, 0.92%)</title><rect x="5.4616%" y="373" width="0.9161%" height="15" fill="rgb(233,141,41)" fg:x="155" fg:w="26"/><text x="5.7116%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26 samples, 0.92%)</title><rect x="5.4616%" y="357" width="0.9161%" height="15" fill="rgb(239,167,4)" fg:x="155" fg:w="26"/><text x="5.7116%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (26 samples, 0.92%)</title><rect x="5.4616%" y="341" width="0.9161%" height="15" fill="rgb(209,217,16)" fg:x="155" fg:w="26"/><text x="5.7116%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26 samples, 0.92%)</title><rect x="5.4616%" y="325" width="0.9161%" height="15" fill="rgb(219,88,35)" fg:x="155" fg:w="26"/><text x="5.7116%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.25%)</title><rect x="6.1311%" y="309" width="0.2467%" height="15" fill="rgb(220,193,23)" fg:x="174" fg:w="7"/><text x="6.3811%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.25%)</title><rect x="6.1311%" y="293" width="0.2467%" height="15" fill="rgb(230,90,52)" fg:x="174" fg:w="7"/><text x="6.3811%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.25%)</title><rect x="6.1311%" y="277" width="0.2467%" height="15" fill="rgb(252,106,19)" fg:x="174" fg:w="7"/><text x="6.3811%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="6.3425%" y="261" width="0.0352%" height="15" fill="rgb(206,74,20)" fg:x="180" fg:w="1"/><text x="6.5925%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="6.3425%" y="245" width="0.0352%" height="15" fill="rgb(230,138,44)" fg:x="180" fg:w="1"/><text x="6.5925%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="6.3777%" y="357" width="0.0352%" height="15" fill="rgb(235,182,43)" fg:x="181" fg:w="1"/><text x="6.6277%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (1 samples, 0.04%)</title><rect x="6.4834%" y="245" width="0.0352%" height="15" fill="rgb(242,16,51)" fg:x="184" fg:w="1"/><text x="6.7334%" y="255.50"></text></g><g><title>compare::Compare::compares_ge (2 samples, 0.07%)</title><rect x="6.4834%" y="341" width="0.0705%" height="15" fill="rgb(248,9,4)" fg:x="184" fg:w="2"/><text x="6.7334%" y="351.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (2 samples, 0.07%)</title><rect x="6.4834%" y="325" width="0.0705%" height="15" fill="rgb(210,31,22)" fg:x="184" fg:w="2"/><text x="6.7334%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.07%)</title><rect x="6.4834%" y="309" width="0.0705%" height="15" fill="rgb(239,54,39)" fg:x="184" fg:w="2"/><text x="6.7334%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (2 samples, 0.07%)</title><rect x="6.4834%" y="293" width="0.0705%" height="15" fill="rgb(230,99,41)" fg:x="184" fg:w="2"/><text x="6.7334%" y="303.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (2 samples, 0.07%)</title><rect x="6.4834%" y="277" width="0.0705%" height="15" fill="rgb(253,106,12)" fg:x="184" fg:w="2"/><text x="6.7334%" y="287.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (2 samples, 0.07%)</title><rect x="6.4834%" y="261" width="0.0705%" height="15" fill="rgb(213,46,41)" fg:x="184" fg:w="2"/><text x="6.7334%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="6.5187%" y="245" width="0.0352%" height="15" fill="rgb(215,133,35)" fg:x="185" fg:w="1"/><text x="6.7687%" y="255.50"></text></g><g><title>compare::Compare::compares_le (2 samples, 0.07%)</title><rect x="6.5539%" y="341" width="0.0705%" height="15" fill="rgb(213,28,5)" fg:x="186" fg:w="2"/><text x="6.8039%" y="351.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (2 samples, 0.07%)</title><rect x="6.5539%" y="325" width="0.0705%" height="15" fill="rgb(215,77,49)" fg:x="186" fg:w="2"/><text x="6.8039%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.07%)</title><rect x="6.5539%" y="309" width="0.0705%" height="15" fill="rgb(248,100,22)" fg:x="186" fg:w="2"/><text x="6.8039%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.28%)</title><rect x="6.6244%" y="309" width="0.2819%" height="15" fill="rgb(208,67,9)" fg:x="188" fg:w="8"/><text x="6.8744%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="6.9415%" y="181" width="0.1409%" height="15" fill="rgb(219,133,21)" fg:x="197" fg:w="4"/><text x="7.1915%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="6.9767%" y="165" width="0.1057%" height="15" fill="rgb(246,46,29)" fg:x="198" fg:w="3"/><text x="7.2267%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.18%)</title><rect x="7.0825%" y="165" width="0.1762%" height="15" fill="rgb(246,185,52)" fg:x="201" fg:w="5"/><text x="7.3325%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.39%)</title><rect x="6.9063%" y="229" width="0.3876%" height="15" fill="rgb(252,136,11)" fg:x="196" fg:w="11"/><text x="7.1563%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.39%)</title><rect x="6.9063%" y="213" width="0.3876%" height="15" fill="rgb(219,138,53)" fg:x="196" fg:w="11"/><text x="7.1563%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.39%)</title><rect x="6.9063%" y="197" width="0.3876%" height="15" fill="rgb(211,51,23)" fg:x="196" fg:w="11"/><text x="7.1563%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.21%)</title><rect x="7.0825%" y="181" width="0.2114%" height="15" fill="rgb(247,221,28)" fg:x="201" fg:w="6"/><text x="7.3325%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="7.2586%" y="165" width="0.0352%" height="15" fill="rgb(251,222,45)" fg:x="206" fg:w="1"/><text x="7.5086%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.56%)</title><rect x="6.9063%" y="261" width="0.5638%" height="15" fill="rgb(217,162,53)" fg:x="196" fg:w="16"/><text x="7.1563%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.56%)</title><rect x="6.9063%" y="245" width="0.5638%" height="15" fill="rgb(229,93,14)" fg:x="196" fg:w="16"/><text x="7.1563%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.18%)</title><rect x="7.2939%" y="229" width="0.1762%" height="15" fill="rgb(209,67,49)" fg:x="207" fg:w="5"/><text x="7.5439%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.18%)</title><rect x="7.2939%" y="213" width="0.1762%" height="15" fill="rgb(213,87,29)" fg:x="207" fg:w="5"/><text x="7.5439%" y="223.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.18%)</title><rect x="7.2939%" y="197" width="0.1762%" height="15" fill="rgb(205,151,52)" fg:x="207" fg:w="5"/><text x="7.5439%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.18%)</title><rect x="7.2939%" y="181" width="0.1762%" height="15" fill="rgb(253,215,39)" fg:x="207" fg:w="5"/><text x="7.5439%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="7.2939%" y="165" width="0.1762%" height="15" fill="rgb(221,220,41)" fg:x="207" fg:w="5"/><text x="7.5439%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="7.2939%" y="149" width="0.1762%" height="15" fill="rgb(218,133,21)" fg:x="207" fg:w="5"/><text x="7.5439%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="7.2939%" y="133" width="0.1762%" height="15" fill="rgb(221,193,43)" fg:x="207" fg:w="5"/><text x="7.5439%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="7.3996%" y="117" width="0.0705%" height="15" fill="rgb(240,128,52)" fg:x="210" fg:w="2"/><text x="7.6496%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="7.3996%" y="101" width="0.0705%" height="15" fill="rgb(253,114,12)" fg:x="210" fg:w="2"/><text x="7.6496%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="7.4700%" y="213" width="0.0705%" height="15" fill="rgb(215,223,47)" fg:x="212" fg:w="2"/><text x="7.7200%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="7.4700%" y="197" width="0.0705%" height="15" fill="rgb(248,225,23)" fg:x="212" fg:w="2"/><text x="7.7200%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="7.5405%" y="197" width="0.0705%" height="15" fill="rgb(250,108,0)" fg:x="214" fg:w="2"/><text x="7.7905%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.07%)</title><rect x="7.5405%" y="181" width="0.0705%" height="15" fill="rgb(228,208,7)" fg:x="214" fg:w="2"/><text x="7.7905%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.07%)</title><rect x="7.5405%" y="165" width="0.0705%" height="15" fill="rgb(244,45,10)" fg:x="214" fg:w="2"/><text x="7.7905%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.07%)</title><rect x="7.5405%" y="149" width="0.0705%" height="15" fill="rgb(207,125,25)" fg:x="214" fg:w="2"/><text x="7.7905%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.14%)</title><rect x="7.5405%" y="213" width="0.1409%" height="15" fill="rgb(210,195,18)" fg:x="214" fg:w="4"/><text x="7.7905%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="7.6110%" y="197" width="0.0705%" height="15" fill="rgb(249,80,12)" fg:x="216" fg:w="2"/><text x="7.8610%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="7.6110%" y="181" width="0.0705%" height="15" fill="rgb(221,65,9)" fg:x="216" fg:w="2"/><text x="7.8610%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="7.6110%" y="165" width="0.0705%" height="15" fill="rgb(235,49,36)" fg:x="216" fg:w="2"/><text x="7.8610%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="7.6110%" y="149" width="0.0705%" height="15" fill="rgb(225,32,20)" fg:x="216" fg:w="2"/><text x="7.8610%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (31 samples, 1.09%)</title><rect x="6.6244%" y="341" width="1.0923%" height="15" fill="rgb(215,141,46)" fg:x="188" fg:w="31"/><text x="6.8744%" y="351.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 1.09%)</title><rect x="6.6244%" y="325" width="1.0923%" height="15" fill="rgb(250,160,47)" fg:x="188" fg:w="31"/><text x="6.8744%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (23 samples, 0.81%)</title><rect x="6.9063%" y="309" width="0.8104%" height="15" fill="rgb(216,222,40)" fg:x="196" fg:w="23"/><text x="7.1563%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (23 samples, 0.81%)</title><rect x="6.9063%" y="293" width="0.8104%" height="15" fill="rgb(234,217,39)" fg:x="196" fg:w="23"/><text x="7.1563%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (23 samples, 0.81%)</title><rect x="6.9063%" y="277" width="0.8104%" height="15" fill="rgb(207,178,40)" fg:x="196" fg:w="23"/><text x="7.1563%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.25%)</title><rect x="7.4700%" y="261" width="0.2467%" height="15" fill="rgb(221,136,13)" fg:x="212" fg:w="7"/><text x="7.7200%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.25%)</title><rect x="7.4700%" y="245" width="0.2467%" height="15" fill="rgb(249,199,10)" fg:x="212" fg:w="7"/><text x="7.7200%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.25%)</title><rect x="7.4700%" y="229" width="0.2467%" height="15" fill="rgb(249,222,13)" fg:x="212" fg:w="7"/><text x="7.7200%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="7.6815%" y="213" width="0.0352%" height="15" fill="rgb(244,185,38)" fg:x="218" fg:w="1"/><text x="7.9315%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="7.6815%" y="197" width="0.0352%" height="15" fill="rgb(236,202,9)" fg:x="218" fg:w="1"/><text x="7.9315%" y="207.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="7.6815%" y="181" width="0.0352%" height="15" fill="rgb(250,229,37)" fg:x="218" fg:w="1"/><text x="7.9315%" y="191.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="7.6815%" y="165" width="0.0352%" height="15" fill="rgb(206,174,23)" fg:x="218" fg:w="1"/><text x="7.9315%" y="175.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.04%)</title><rect x="7.6815%" y="149" width="0.0352%" height="15" fill="rgb(211,33,43)" fg:x="218" fg:w="1"/><text x="7.9315%" y="159.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (40 samples, 1.41%)</title><rect x="6.3777%" y="373" width="1.4094%" height="15" fill="rgb(245,58,50)" fg:x="181" fg:w="40"/><text x="6.6277%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (39 samples, 1.37%)</title><rect x="6.4130%" y="357" width="1.3742%" height="15" fill="rgb(244,68,36)" fg:x="182" fg:w="39"/><text x="6.6630%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.07%)</title><rect x="7.7167%" y="341" width="0.0705%" height="15" fill="rgb(232,229,15)" fg:x="219" fg:w="2"/><text x="7.9667%" y="351.50"></text></g><g><title>compare::Compare::compares_le (8 samples, 0.28%)</title><rect x="7.8224%" y="357" width="0.2819%" height="15" fill="rgb(254,30,23)" fg:x="222" fg:w="8"/><text x="8.0724%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (8 samples, 0.28%)</title><rect x="7.8224%" y="341" width="0.2819%" height="15" fill="rgb(235,160,14)" fg:x="222" fg:w="8"/><text x="8.0724%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.28%)</title><rect x="7.8224%" y="325" width="0.2819%" height="15" fill="rgb(212,155,44)" fg:x="222" fg:w="8"/><text x="8.0724%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (5 samples, 0.18%)</title><rect x="7.9281%" y="309" width="0.1762%" height="15" fill="rgb(226,2,50)" fg:x="225" fg:w="5"/><text x="8.1781%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (5 samples, 0.18%)</title><rect x="7.9281%" y="293" width="0.1762%" height="15" fill="rgb(234,177,6)" fg:x="225" fg:w="5"/><text x="8.1781%" y="303.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (5 samples, 0.18%)</title><rect x="7.9281%" y="277" width="0.1762%" height="15" fill="rgb(217,24,9)" fg:x="225" fg:w="5"/><text x="8.1781%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (5 samples, 0.18%)</title><rect x="7.9281%" y="261" width="0.1762%" height="15" fill="rgb(220,13,46)" fg:x="225" fg:w="5"/><text x="8.1781%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="8.1043%" y="325" width="0.0352%" height="15" fill="rgb(239,221,27)" fg:x="230" fg:w="1"/><text x="8.3543%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="8.1748%" y="197" width="0.0352%" height="15" fill="rgb(222,198,25)" fg:x="232" fg:w="1"/><text x="8.4248%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="8.1748%" y="181" width="0.0352%" height="15" fill="rgb(211,99,13)" fg:x="232" fg:w="1"/><text x="8.4248%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="8.1395%" y="245" width="0.1762%" height="15" fill="rgb(232,111,31)" fg:x="231" fg:w="5"/><text x="8.3895%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="8.1395%" y="229" width="0.1762%" height="15" fill="rgb(245,82,37)" fg:x="231" fg:w="5"/><text x="8.3895%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="8.1395%" y="213" width="0.1762%" height="15" fill="rgb(227,149,46)" fg:x="231" fg:w="5"/><text x="8.3895%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.11%)</title><rect x="8.2100%" y="197" width="0.1057%" height="15" fill="rgb(218,36,50)" fg:x="233" fg:w="3"/><text x="8.4600%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="8.2100%" y="181" width="0.1057%" height="15" fill="rgb(226,80,48)" fg:x="233" fg:w="3"/><text x="8.4600%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.21%)</title><rect x="8.1395%" y="277" width="0.2114%" height="15" fill="rgb(238,224,15)" fg:x="231" fg:w="6"/><text x="8.3895%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.21%)</title><rect x="8.1395%" y="261" width="0.2114%" height="15" fill="rgb(241,136,10)" fg:x="231" fg:w="6"/><text x="8.3895%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="8.3157%" y="245" width="0.0352%" height="15" fill="rgb(208,32,45)" fg:x="236" fg:w="1"/><text x="8.5657%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.04%)</title><rect x="8.3157%" y="229" width="0.0352%" height="15" fill="rgb(207,135,9)" fg:x="236" fg:w="1"/><text x="8.5657%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.04%)</title><rect x="8.3157%" y="213" width="0.0352%" height="15" fill="rgb(206,86,44)" fg:x="236" fg:w="1"/><text x="8.5657%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.04%)</title><rect x="8.3157%" y="197" width="0.0352%" height="15" fill="rgb(245,177,15)" fg:x="236" fg:w="1"/><text x="8.5657%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="8.3157%" y="181" width="0.0352%" height="15" fill="rgb(206,64,50)" fg:x="236" fg:w="1"/><text x="8.5657%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="8.3157%" y="165" width="0.0352%" height="15" fill="rgb(234,36,40)" fg:x="236" fg:w="1"/><text x="8.5657%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="8.3157%" y="149" width="0.0352%" height="15" fill="rgb(213,64,8)" fg:x="236" fg:w="1"/><text x="8.5657%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="8.3157%" y="133" width="0.0352%" height="15" fill="rgb(210,75,36)" fg:x="236" fg:w="1"/><text x="8.5657%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="8.3157%" y="117" width="0.0352%" height="15" fill="rgb(229,88,21)" fg:x="236" fg:w="1"/><text x="8.5657%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="8.3510%" y="229" width="0.0352%" height="15" fill="rgb(252,204,47)" fg:x="237" fg:w="1"/><text x="8.6010%" y="239.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.53%)</title><rect x="8.1043%" y="341" width="0.5285%" height="15" fill="rgb(208,77,27)" fg:x="230" fg:w="15"/><text x="8.3543%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (14 samples, 0.49%)</title><rect x="8.1395%" y="325" width="0.4933%" height="15" fill="rgb(221,76,26)" fg:x="231" fg:w="14"/><text x="8.3895%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (14 samples, 0.49%)</title><rect x="8.1395%" y="309" width="0.4933%" height="15" fill="rgb(225,139,18)" fg:x="231" fg:w="14"/><text x="8.3895%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (14 samples, 0.49%)</title><rect x="8.1395%" y="293" width="0.4933%" height="15" fill="rgb(230,137,11)" fg:x="231" fg:w="14"/><text x="8.3895%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (8 samples, 0.28%)</title><rect x="8.3510%" y="277" width="0.2819%" height="15" fill="rgb(212,28,1)" fg:x="237" fg:w="8"/><text x="8.6010%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.28%)</title><rect x="8.3510%" y="261" width="0.2819%" height="15" fill="rgb(248,164,17)" fg:x="237" fg:w="8"/><text x="8.6010%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.28%)</title><rect x="8.3510%" y="245" width="0.2819%" height="15" fill="rgb(222,171,42)" fg:x="237" fg:w="8"/><text x="8.6010%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.25%)</title><rect x="8.3862%" y="229" width="0.2467%" height="15" fill="rgb(243,84,45)" fg:x="238" fg:w="7"/><text x="8.6362%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7 samples, 0.25%)</title><rect x="8.3862%" y="213" width="0.2467%" height="15" fill="rgb(252,49,23)" fg:x="238" fg:w="7"/><text x="8.6362%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.25%)</title><rect x="8.3862%" y="197" width="0.2467%" height="15" fill="rgb(215,19,7)" fg:x="238" fg:w="7"/><text x="8.6362%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.25%)</title><rect x="8.3862%" y="181" width="0.2467%" height="15" fill="rgb(238,81,41)" fg:x="238" fg:w="7"/><text x="8.6362%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (7 samples, 0.25%)</title><rect x="8.3862%" y="165" width="0.2467%" height="15" fill="rgb(210,199,37)" fg:x="238" fg:w="7"/><text x="8.6362%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (16 samples, 0.56%)</title><rect x="8.1043%" y="357" width="0.5638%" height="15" fill="rgb(244,192,49)" fg:x="230" fg:w="16"/><text x="8.3543%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="8.6328%" y="341" width="0.0352%" height="15" fill="rgb(226,211,11)" fg:x="245" fg:w="1"/><text x="8.8828%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (28 samples, 0.99%)</title><rect x="7.7872%" y="373" width="0.9866%" height="15" fill="rgb(236,162,54)" fg:x="221" fg:w="28"/><text x="8.0372%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (3 samples, 0.11%)</title><rect x="8.6681%" y="357" width="0.1057%" height="15" fill="rgb(220,229,9)" fg:x="246" fg:w="3"/><text x="8.9181%" y="367.50"></text></g><g><title>core::ptr::read (2 samples, 0.07%)</title><rect x="8.7033%" y="341" width="0.0705%" height="15" fill="rgb(250,87,22)" fg:x="247" fg:w="2"/><text x="8.9533%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (95 samples, 3.35%)</title><rect x="5.4616%" y="421" width="3.3474%" height="15" fill="rgb(239,43,17)" fg:x="155" fg:w="95"/><text x="5.7116%" y="431.50">cor..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 3.35%)</title><rect x="5.4616%" y="405" width="3.3474%" height="15" fill="rgb(231,177,25)" fg:x="155" fg:w="95"/><text x="5.7116%" y="415.50">&lt;mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (95 samples, 3.35%)</title><rect x="5.4616%" y="389" width="3.3474%" height="15" fill="rgb(219,179,1)" fg:x="155" fg:w="95"/><text x="5.7116%" y="399.50">mut..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="8.7738%" y="373" width="0.0352%" height="15" fill="rgb(238,219,53)" fg:x="249" fg:w="1"/><text x="9.0238%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="8.9852%" y="261" width="0.0352%" height="15" fill="rgb(232,167,36)" fg:x="255" fg:w="1"/><text x="9.2352%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.21%)</title><rect x="8.9500%" y="277" width="0.2114%" height="15" fill="rgb(244,19,51)" fg:x="254" fg:w="6"/><text x="9.2000%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.14%)</title><rect x="9.0204%" y="261" width="0.1409%" height="15" fill="rgb(224,6,22)" fg:x="256" fg:w="4"/><text x="9.2704%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.28%)</title><rect x="9.3023%" y="261" width="0.2819%" height="15" fill="rgb(224,145,5)" fg:x="264" fg:w="8"/><text x="9.5523%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (23 samples, 0.81%)</title><rect x="8.8795%" y="325" width="0.8104%" height="15" fill="rgb(234,130,49)" fg:x="252" fg:w="23"/><text x="9.1295%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (23 samples, 0.81%)</title><rect x="8.8795%" y="309" width="0.8104%" height="15" fill="rgb(254,6,2)" fg:x="252" fg:w="23"/><text x="9.1295%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.81%)</title><rect x="8.8795%" y="293" width="0.8104%" height="15" fill="rgb(208,96,46)" fg:x="252" fg:w="23"/><text x="9.1295%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.53%)</title><rect x="9.1614%" y="277" width="0.5285%" height="15" fill="rgb(239,3,39)" fg:x="260" fg:w="15"/><text x="9.4114%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="9.5842%" y="261" width="0.1057%" height="15" fill="rgb(233,210,1)" fg:x="272" fg:w="3"/><text x="9.8342%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.14%)</title><rect x="9.6899%" y="325" width="0.1409%" height="15" fill="rgb(244,137,37)" fg:x="275" fg:w="4"/><text x="9.9399%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.11%)</title><rect x="9.7252%" y="309" width="0.1057%" height="15" fill="rgb(240,136,2)" fg:x="276" fg:w="3"/><text x="9.9752%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.11%)</title><rect x="9.7252%" y="293" width="0.1057%" height="15" fill="rgb(239,18,37)" fg:x="276" fg:w="3"/><text x="9.9752%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.11%)</title><rect x="9.7252%" y="277" width="0.1057%" height="15" fill="rgb(218,185,22)" fg:x="276" fg:w="3"/><text x="9.9752%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 1.20%)</title><rect x="8.8795%" y="357" width="1.1980%" height="15" fill="rgb(225,218,4)" fg:x="252" fg:w="34"/><text x="9.1295%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (34 samples, 1.20%)</title><rect x="8.8795%" y="341" width="1.1980%" height="15" fill="rgb(230,182,32)" fg:x="252" fg:w="34"/><text x="9.1295%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.25%)</title><rect x="9.8309%" y="325" width="0.2467%" height="15" fill="rgb(242,56,43)" fg:x="279" fg:w="7"/><text x="10.0809%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (7 samples, 0.25%)</title><rect x="9.8309%" y="309" width="0.2467%" height="15" fill="rgb(233,99,24)" fg:x="279" fg:w="7"/><text x="10.0809%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (6 samples, 0.21%)</title><rect x="9.8661%" y="293" width="0.2114%" height="15" fill="rgb(234,209,42)" fg:x="280" fg:w="6"/><text x="10.1161%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (6 samples, 0.21%)</title><rect x="9.8661%" y="277" width="0.2114%" height="15" fill="rgb(227,7,12)" fg:x="280" fg:w="6"/><text x="10.1161%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="9.8661%" y="261" width="0.2114%" height="15" fill="rgb(245,203,43)" fg:x="280" fg:w="6"/><text x="10.1161%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="9.8661%" y="245" width="0.2114%" height="15" fill="rgb(238,205,33)" fg:x="280" fg:w="6"/><text x="10.1161%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="9.8661%" y="229" width="0.2114%" height="15" fill="rgb(231,56,7)" fg:x="280" fg:w="6"/><text x="10.1161%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="9.9366%" y="213" width="0.1409%" height="15" fill="rgb(244,186,29)" fg:x="282" fg:w="4"/><text x="10.1866%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="10.0423%" y="197" width="0.0352%" height="15" fill="rgb(234,111,31)" fg:x="285" fg:w="1"/><text x="10.2923%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="10.2537%" y="309" width="0.0705%" height="15" fill="rgb(241,149,10)" fg:x="291" fg:w="2"/><text x="10.5037%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="10.2537%" y="293" width="0.0705%" height="15" fill="rgb(249,206,44)" fg:x="291" fg:w="2"/><text x="10.5037%" y="303.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="10.3242%" y="309" width="0.0352%" height="15" fill="rgb(251,153,30)" fg:x="293" fg:w="1"/><text x="10.5742%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.18%)</title><rect x="10.3594%" y="309" width="0.1762%" height="15" fill="rgb(239,152,38)" fg:x="294" fg:w="5"/><text x="10.6094%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.18%)</title><rect x="10.3594%" y="293" width="0.1762%" height="15" fill="rgb(249,139,47)" fg:x="294" fg:w="5"/><text x="10.6094%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.18%)</title><rect x="10.3594%" y="277" width="0.1762%" height="15" fill="rgb(244,64,35)" fg:x="294" fg:w="5"/><text x="10.6094%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.18%)</title><rect x="10.3594%" y="261" width="0.1762%" height="15" fill="rgb(216,46,15)" fg:x="294" fg:w="5"/><text x="10.6094%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.18%)</title><rect x="10.3594%" y="245" width="0.1762%" height="15" fill="rgb(250,74,19)" fg:x="294" fg:w="5"/><text x="10.6094%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.07%)</title><rect x="10.5356%" y="309" width="0.0705%" height="15" fill="rgb(249,42,33)" fg:x="299" fg:w="2"/><text x="10.7856%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.14%)</title><rect x="10.6061%" y="309" width="0.1409%" height="15" fill="rgb(242,149,17)" fg:x="301" fg:w="4"/><text x="10.8561%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.14%)</title><rect x="10.6061%" y="293" width="0.1409%" height="15" fill="rgb(244,29,21)" fg:x="301" fg:w="4"/><text x="10.8561%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="10.6061%" y="277" width="0.1409%" height="15" fill="rgb(220,130,37)" fg:x="301" fg:w="4"/><text x="10.8561%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="10.7470%" y="309" width="0.0352%" height="15" fill="rgb(211,67,2)" fg:x="305" fg:w="1"/><text x="10.9970%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="10.7470%" y="293" width="0.0352%" height="15" fill="rgb(235,68,52)" fg:x="305" fg:w="1"/><text x="10.9970%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (28 samples, 0.99%)</title><rect x="10.0775%" y="325" width="0.9866%" height="15" fill="rgb(246,142,3)" fg:x="286" fg:w="28"/><text x="10.3275%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.28%)</title><rect x="10.7822%" y="309" width="0.2819%" height="15" fill="rgb(241,25,7)" fg:x="306" fg:w="8"/><text x="11.0322%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.28%)</title><rect x="10.7822%" y="293" width="0.2819%" height="15" fill="rgb(242,119,39)" fg:x="306" fg:w="8"/><text x="11.0322%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.28%)</title><rect x="10.7822%" y="277" width="0.2819%" height="15" fill="rgb(241,98,45)" fg:x="306" fg:w="8"/><text x="11.0322%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (65 samples, 2.29%)</title><rect x="8.8090%" y="421" width="2.2903%" height="15" fill="rgb(254,28,30)" fg:x="250" fg:w="65"/><text x="9.0590%" y="431.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (65 samples, 2.29%)</title><rect x="8.8090%" y="405" width="2.2903%" height="15" fill="rgb(241,142,54)" fg:x="250" fg:w="65"/><text x="9.0590%" y="415.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (65 samples, 2.29%)</title><rect x="8.8090%" y="389" width="2.2903%" height="15" fill="rgb(222,85,15)" fg:x="250" fg:w="65"/><text x="9.0590%" y="399.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (65 samples, 2.29%)</title><rect x="8.8090%" y="373" width="2.2903%" height="15" fill="rgb(210,85,47)" fg:x="250" fg:w="65"/><text x="9.0590%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (29 samples, 1.02%)</title><rect x="10.0775%" y="357" width="1.0218%" height="15" fill="rgb(224,206,25)" fg:x="286" fg:w="29"/><text x="10.3275%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (29 samples, 1.02%)</title><rect x="10.0775%" y="341" width="1.0218%" height="15" fill="rgb(243,201,19)" fg:x="286" fg:w="29"/><text x="10.3275%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.04%)</title><rect x="11.0641%" y="325" width="0.0352%" height="15" fill="rgb(236,59,4)" fg:x="314" fg:w="1"/><text x="11.3141%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (174 samples, 6.13%)</title><rect x="5.0035%" y="437" width="6.1311%" height="15" fill="rgb(254,179,45)" fg:x="142" fg:w="174"/><text x="5.2535%" y="447.50">project1..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.04%)</title><rect x="11.0994%" y="421" width="0.0352%" height="15" fill="rgb(226,14,10)" fg:x="315" fg:w="1"/><text x="11.3494%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.11%)</title><rect x="11.4517%" y="341" width="0.1057%" height="15" fill="rgb(244,27,41)" fg:x="325" fg:w="3"/><text x="11.7017%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.11%)</title><rect x="11.4517%" y="325" width="0.1057%" height="15" fill="rgb(235,35,32)" fg:x="325" fg:w="3"/><text x="11.7017%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="11.9098%" y="293" width="0.0705%" height="15" fill="rgb(218,68,31)" fg:x="338" fg:w="2"/><text x="12.1598%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.14%)</title><rect x="11.9098%" y="325" width="0.1409%" height="15" fill="rgb(207,120,37)" fg:x="338" fg:w="4"/><text x="12.1598%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.14%)</title><rect x="11.9098%" y="309" width="0.1409%" height="15" fill="rgb(227,98,0)" fg:x="338" fg:w="4"/><text x="12.1598%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="11.9803%" y="293" width="0.0705%" height="15" fill="rgb(207,7,3)" fg:x="340" fg:w="2"/><text x="12.2303%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="12.0507%" y="325" width="0.1057%" height="15" fill="rgb(206,98,19)" fg:x="342" fg:w="3"/><text x="12.3007%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.11%)</title><rect x="12.0507%" y="309" width="0.1057%" height="15" fill="rgb(217,5,26)" fg:x="342" fg:w="3"/><text x="12.3007%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (5 samples, 0.18%)</title><rect x="12.1564%" y="325" width="0.1762%" height="15" fill="rgb(235,190,38)" fg:x="345" fg:w="5"/><text x="12.4064%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (5 samples, 0.18%)</title><rect x="12.1564%" y="309" width="0.1762%" height="15" fill="rgb(247,86,24)" fg:x="345" fg:w="5"/><text x="12.4064%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (5 samples, 0.18%)</title><rect x="12.1564%" y="293" width="0.1762%" height="15" fill="rgb(205,101,16)" fg:x="345" fg:w="5"/><text x="12.4064%" y="303.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (5 samples, 0.18%)</title><rect x="12.1564%" y="277" width="0.1762%" height="15" fill="rgb(246,168,33)" fg:x="345" fg:w="5"/><text x="12.4064%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="12.3326%" y="325" width="0.0352%" height="15" fill="rgb(231,114,1)" fg:x="350" fg:w="1"/><text x="12.5826%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.07%)</title><rect x="12.3679%" y="325" width="0.0705%" height="15" fill="rgb(207,184,53)" fg:x="351" fg:w="2"/><text x="12.6179%" y="335.50"></text></g><g><title>core::ptr::read (2 samples, 0.07%)</title><rect x="12.3679%" y="309" width="0.0705%" height="15" fill="rgb(224,95,51)" fg:x="351" fg:w="2"/><text x="12.6179%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="12.4736%" y="309" width="0.0352%" height="15" fill="rgb(212,188,45)" fg:x="354" fg:w="1"/><text x="12.7236%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="12.4736%" y="293" width="0.0352%" height="15" fill="rgb(223,154,38)" fg:x="354" fg:w="1"/><text x="12.7236%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.14%)</title><rect x="12.4383%" y="325" width="0.1409%" height="15" fill="rgb(251,22,52)" fg:x="353" fg:w="4"/><text x="12.6883%" y="335.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="12.5088%" y="309" width="0.0705%" height="15" fill="rgb(229,209,22)" fg:x="355" fg:w="2"/><text x="12.7588%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="12.5793%" y="325" width="0.0352%" height="15" fill="rgb(234,138,34)" fg:x="357" fg:w="1"/><text x="12.8293%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="12.5793%" y="309" width="0.0352%" height="15" fill="rgb(212,95,11)" fg:x="357" fg:w="1"/><text x="12.8293%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="12.5793%" y="293" width="0.0352%" height="15" fill="rgb(240,179,47)" fg:x="357" fg:w="1"/><text x="12.8293%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="12.5793%" y="277" width="0.0352%" height="15" fill="rgb(240,163,11)" fg:x="357" fg:w="1"/><text x="12.8293%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="12.5793%" y="261" width="0.0352%" height="15" fill="rgb(236,37,12)" fg:x="357" fg:w="1"/><text x="12.8293%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="12.5793%" y="245" width="0.0352%" height="15" fill="rgb(232,164,16)" fg:x="357" fg:w="1"/><text x="12.8293%" y="255.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.04%)</title><rect x="12.5793%" y="229" width="0.0352%" height="15" fill="rgb(244,205,15)" fg:x="357" fg:w="1"/><text x="12.8293%" y="239.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (2 samples, 0.07%)</title><rect x="12.6145%" y="325" width="0.0705%" height="15" fill="rgb(223,117,47)" fg:x="358" fg:w="2"/><text x="12.8645%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.07%)</title><rect x="12.6145%" y="309" width="0.0705%" height="15" fill="rgb(244,107,35)" fg:x="358" fg:w="2"/><text x="12.8645%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="12.6145%" y="293" width="0.0705%" height="15" fill="rgb(205,140,8)" fg:x="358" fg:w="2"/><text x="12.8645%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="12.6145%" y="277" width="0.0705%" height="15" fill="rgb(228,84,46)" fg:x="358" fg:w="2"/><text x="12.8645%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="12.6145%" y="261" width="0.0705%" height="15" fill="rgb(254,188,9)" fg:x="358" fg:w="2"/><text x="12.8645%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (1 samples, 0.04%)</title><rect x="12.6850%" y="325" width="0.0352%" height="15" fill="rgb(206,112,54)" fg:x="360" fg:w="1"/><text x="12.9350%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.04%)</title><rect x="12.6850%" y="309" width="0.0352%" height="15" fill="rgb(216,84,49)" fg:x="360" fg:w="1"/><text x="12.9350%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (45 samples, 1.59%)</title><rect x="11.5574%" y="341" width="1.5856%" height="15" fill="rgb(214,194,35)" fg:x="328" fg:w="45"/><text x="11.8074%" y="351.50"></text></g><g><title>project1::solver::types::Lit::var (12 samples, 0.42%)</title><rect x="12.7202%" y="325" width="0.4228%" height="15" fill="rgb(249,28,3)" fg:x="361" fg:w="12"/><text x="12.9702%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.04%)</title><rect x="13.1078%" y="309" width="0.0352%" height="15" fill="rgb(222,56,52)" fg:x="372" fg:w="1"/><text x="13.3578%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.07%)</title><rect x="13.1431%" y="341" width="0.0705%" height="15" fill="rgb(245,217,50)" fg:x="373" fg:w="2"/><text x="13.3931%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="13.1431%" y="325" width="0.0705%" height="15" fill="rgb(213,201,24)" fg:x="373" fg:w="2"/><text x="13.3931%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="13.1431%" y="309" width="0.0705%" height="15" fill="rgb(248,116,28)" fg:x="373" fg:w="2"/><text x="13.3931%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (56 samples, 1.97%)</title><rect x="11.3460%" y="357" width="1.9732%" height="15" fill="rgb(219,72,43)" fg:x="322" fg:w="56"/><text x="11.5960%" y="367.50">p..</text></g><g><title>project1::solver::types::Lit::var (3 samples, 0.11%)</title><rect x="13.2135%" y="341" width="0.1057%" height="15" fill="rgb(209,138,14)" fg:x="375" fg:w="3"/><text x="13.4635%" y="351.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.04%)</title><rect x="13.2840%" y="325" width="0.0352%" height="15" fill="rgb(222,18,33)" fg:x="377" fg:w="1"/><text x="13.5340%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (58 samples, 2.04%)</title><rect x="11.3460%" y="373" width="2.0437%" height="15" fill="rgb(213,199,7)" fg:x="322" fg:w="58"/><text x="11.5960%" y="383.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.07%)</title><rect x="13.3192%" y="357" width="0.0705%" height="15" fill="rgb(250,110,10)" fg:x="378" fg:w="2"/><text x="13.5692%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (66 samples, 2.33%)</title><rect x="11.1346%" y="421" width="2.3256%" height="15" fill="rgb(248,123,6)" fg:x="316" fg:w="66"/><text x="11.3846%" y="431.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (66 samples, 2.33%)</title><rect x="11.1346%" y="405" width="2.3256%" height="15" fill="rgb(206,91,31)" fg:x="316" fg:w="66"/><text x="11.3846%" y="415.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (66 samples, 2.33%)</title><rect x="11.1346%" y="389" width="2.3256%" height="15" fill="rgb(211,154,13)" fg:x="316" fg:w="66"/><text x="11.3846%" y="399.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="13.3897%" y="373" width="0.0705%" height="15" fill="rgb(225,148,7)" fg:x="380" fg:w="2"/><text x="13.6397%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (68 samples, 2.40%)</title><rect x="11.1346%" y="437" width="2.3961%" height="15" fill="rgb(220,160,43)" fg:x="316" fg:w="68"/><text x="11.3846%" y="447.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (2 samples, 0.07%)</title><rect x="13.4602%" y="421" width="0.0705%" height="15" fill="rgb(213,52,39)" fg:x="382" fg:w="2"/><text x="13.7102%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2 samples, 0.07%)</title><rect x="13.4602%" y="405" width="0.0705%" height="15" fill="rgb(243,137,7)" fg:x="382" fg:w="2"/><text x="13.7102%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (2 samples, 0.07%)</title><rect x="13.4602%" y="389" width="0.0705%" height="15" fill="rgb(230,79,13)" fg:x="382" fg:w="2"/><text x="13.7102%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (2 samples, 0.07%)</title><rect x="13.4602%" y="373" width="0.0705%" height="15" fill="rgb(247,105,23)" fg:x="382" fg:w="2"/><text x="13.7102%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.04%)</title><rect x="13.4954%" y="357" width="0.0352%" height="15" fill="rgb(223,179,41)" fg:x="383" fg:w="1"/><text x="13.7454%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.04%)</title><rect x="13.4954%" y="341" width="0.0352%" height="15" fill="rgb(218,9,34)" fg:x="383" fg:w="1"/><text x="13.7454%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="13.6364%" y="389" width="0.0705%" height="15" fill="rgb(222,106,8)" fg:x="387" fg:w="2"/><text x="13.8864%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="13.6716%" y="373" width="0.0352%" height="15" fill="rgb(211,220,0)" fg:x="388" fg:w="1"/><text x="13.9216%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="13.6716%" y="357" width="0.0352%" height="15" fill="rgb(229,52,16)" fg:x="388" fg:w="1"/><text x="13.9216%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (7 samples, 0.25%)</title><rect x="13.5307%" y="437" width="0.2467%" height="15" fill="rgb(212,155,18)" fg:x="384" fg:w="7"/><text x="13.7807%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (7 samples, 0.25%)</title><rect x="13.5307%" y="421" width="0.2467%" height="15" fill="rgb(242,21,14)" fg:x="384" fg:w="7"/><text x="13.7807%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.14%)</title><rect x="13.6364%" y="405" width="0.1409%" height="15" fill="rgb(222,19,48)" fg:x="387" fg:w="4"/><text x="13.8864%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="13.7068%" y="389" width="0.0705%" height="15" fill="rgb(232,45,27)" fg:x="389" fg:w="2"/><text x="13.9568%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="13.7068%" y="373" width="0.0705%" height="15" fill="rgb(249,103,42)" fg:x="389" fg:w="2"/><text x="13.9568%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (5 samples, 0.18%)</title><rect x="13.7773%" y="437" width="0.1762%" height="15" fill="rgb(246,81,33)" fg:x="391" fg:w="5"/><text x="14.0273%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (8 samples, 0.28%)</title><rect x="13.9535%" y="437" width="0.2819%" height="15" fill="rgb(252,33,42)" fg:x="396" fg:w="8"/><text x="14.2035%" y="447.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (8 samples, 0.28%)</title><rect x="13.9535%" y="421" width="0.2819%" height="15" fill="rgb(209,212,41)" fg:x="396" fg:w="8"/><text x="14.2035%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.28%)</title><rect x="13.9535%" y="405" width="0.2819%" height="15" fill="rgb(207,154,6)" fg:x="396" fg:w="8"/><text x="14.2035%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.28%)</title><rect x="13.9535%" y="389" width="0.2819%" height="15" fill="rgb(223,64,47)" fg:x="396" fg:w="8"/><text x="14.2035%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.28%)</title><rect x="13.9535%" y="373" width="0.2819%" height="15" fill="rgb(211,161,38)" fg:x="396" fg:w="8"/><text x="14.2035%" y="383.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (1 samples, 0.04%)</title><rect x="14.2354%" y="437" width="0.0352%" height="15" fill="rgb(219,138,40)" fg:x="404" fg:w="1"/><text x="14.4854%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.07%)</title><rect x="14.4116%" y="421" width="0.0705%" height="15" fill="rgb(241,228,46)" fg:x="409" fg:w="2"/><text x="14.6616%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (7 samples, 0.25%)</title><rect x="14.2706%" y="437" width="0.2467%" height="15" fill="rgb(223,209,38)" fg:x="405" fg:w="7"/><text x="14.5206%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.04%)</title><rect x="14.4820%" y="421" width="0.0352%" height="15" fill="rgb(236,164,45)" fg:x="411" fg:w="1"/><text x="14.7320%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (380 samples, 13.39%)</title><rect x="1.1628%" y="453" width="13.3897%" height="15" fill="rgb(231,15,5)" fg:x="33" fg:w="380"/><text x="1.4128%" y="463.50">project1::solver::cd..</text></g><g><title>project1::solver::types::Lit::var_idx (1 samples, 0.04%)</title><rect x="14.5173%" y="437" width="0.0352%" height="15" fill="rgb(252,35,15)" fg:x="412" fg:w="1"/><text x="14.7673%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (1 samples, 0.04%)</title><rect x="14.5525%" y="453" width="0.0352%" height="15" fill="rgb(248,181,18)" fg:x="413" fg:w="1"/><text x="14.8025%" y="463.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (1 samples, 0.04%)</title><rect x="14.5525%" y="437" width="0.0352%" height="15" fill="rgb(233,39,42)" fg:x="413" fg:w="1"/><text x="14.8025%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="14.5525%" y="421" width="0.0352%" height="15" fill="rgb(238,110,33)" fg:x="413" fg:w="1"/><text x="14.8025%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="14.5525%" y="405" width="0.0352%" height="15" fill="rgb(233,195,10)" fg:x="413" fg:w="1"/><text x="14.8025%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="14.7287%" y="437" width="0.0352%" height="15" fill="rgb(254,105,3)" fg:x="418" fg:w="1"/><text x="14.9787%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="14.7287%" y="421" width="0.0352%" height="15" fill="rgb(221,225,9)" fg:x="418" fg:w="1"/><text x="14.9787%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="14.7287%" y="405" width="0.0352%" height="15" fill="rgb(224,227,45)" fg:x="418" fg:w="1"/><text x="14.9787%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="14.7639%" y="437" width="0.0352%" height="15" fill="rgb(229,198,43)" fg:x="419" fg:w="1"/><text x="15.0139%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="14.7639%" y="421" width="0.0352%" height="15" fill="rgb(206,209,35)" fg:x="419" fg:w="1"/><text x="15.0139%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="14.7639%" y="405" width="0.0352%" height="15" fill="rgb(245,195,53)" fg:x="419" fg:w="1"/><text x="15.0139%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="14.7639%" y="389" width="0.0352%" height="15" fill="rgb(240,92,26)" fg:x="419" fg:w="1"/><text x="15.0139%" y="399.50"></text></g><g><title>core::mem::replace (7 samples, 0.25%)</title><rect x="14.7992%" y="421" width="0.2467%" height="15" fill="rgb(207,40,23)" fg:x="420" fg:w="7"/><text x="15.0492%" y="431.50"></text></g><g><title>core::ptr::read (7 samples, 0.25%)</title><rect x="14.7992%" y="405" width="0.2467%" height="15" fill="rgb(223,111,35)" fg:x="420" fg:w="7"/><text x="15.0492%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.18%)</title><rect x="15.1163%" y="373" width="0.1762%" height="15" fill="rgb(229,147,28)" fg:x="429" fg:w="5"/><text x="15.3663%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="15.2925%" y="293" width="0.0352%" height="15" fill="rgb(211,29,28)" fg:x="434" fg:w="1"/><text x="15.5425%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="15.2925%" y="277" width="0.0352%" height="15" fill="rgb(228,72,33)" fg:x="434" fg:w="1"/><text x="15.5425%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="15.2925%" y="261" width="0.0352%" height="15" fill="rgb(205,214,31)" fg:x="434" fg:w="1"/><text x="15.5425%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="15.2925%" y="245" width="0.0352%" height="15" fill="rgb(224,111,15)" fg:x="434" fg:w="1"/><text x="15.5425%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="15.2925%" y="229" width="0.0352%" height="15" fill="rgb(253,21,26)" fg:x="434" fg:w="1"/><text x="15.5425%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="15.3277%" y="293" width="0.0352%" height="15" fill="rgb(245,139,43)" fg:x="435" fg:w="1"/><text x="15.5777%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="15.2925%" y="325" width="0.1057%" height="15" fill="rgb(252,170,7)" fg:x="434" fg:w="3"/><text x="15.5425%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="15.2925%" y="309" width="0.1057%" height="15" fill="rgb(231,118,14)" fg:x="434" fg:w="3"/><text x="15.5425%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="15.3629%" y="293" width="0.0352%" height="15" fill="rgb(238,83,0)" fg:x="436" fg:w="1"/><text x="15.6129%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.04%)</title><rect x="15.3629%" y="277" width="0.0352%" height="15" fill="rgb(221,39,39)" fg:x="436" fg:w="1"/><text x="15.6129%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.04%)</title><rect x="15.3629%" y="261" width="0.0352%" height="15" fill="rgb(222,119,46)" fg:x="436" fg:w="1"/><text x="15.6129%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.04%)</title><rect x="15.3629%" y="245" width="0.0352%" height="15" fill="rgb(222,165,49)" fg:x="436" fg:w="1"/><text x="15.6129%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.3629%" y="229" width="0.0352%" height="15" fill="rgb(219,113,52)" fg:x="436" fg:w="1"/><text x="15.6129%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.3629%" y="213" width="0.0352%" height="15" fill="rgb(214,7,15)" fg:x="436" fg:w="1"/><text x="15.6129%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.3629%" y="197" width="0.0352%" height="15" fill="rgb(235,32,4)" fg:x="436" fg:w="1"/><text x="15.6129%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (9 samples, 0.32%)</title><rect x="15.1163%" y="405" width="0.3171%" height="15" fill="rgb(238,90,54)" fg:x="429" fg:w="9"/><text x="15.3663%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.32%)</title><rect x="15.1163%" y="389" width="0.3171%" height="15" fill="rgb(213,208,19)" fg:x="429" fg:w="9"/><text x="15.3663%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.14%)</title><rect x="15.2925%" y="373" width="0.1409%" height="15" fill="rgb(233,156,4)" fg:x="434" fg:w="4"/><text x="15.5425%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.14%)</title><rect x="15.2925%" y="357" width="0.1409%" height="15" fill="rgb(207,194,5)" fg:x="434" fg:w="4"/><text x="15.5425%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.14%)</title><rect x="15.2925%" y="341" width="0.1409%" height="15" fill="rgb(206,111,30)" fg:x="434" fg:w="4"/><text x="15.5425%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="15.3982%" y="325" width="0.0352%" height="15" fill="rgb(243,70,54)" fg:x="437" fg:w="1"/><text x="15.6482%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="15.3982%" y="309" width="0.0352%" height="15" fill="rgb(242,28,8)" fg:x="437" fg:w="1"/><text x="15.6482%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="15.3982%" y="293" width="0.0352%" height="15" fill="rgb(219,106,18)" fg:x="437" fg:w="1"/><text x="15.6482%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="15.3982%" y="277" width="0.0352%" height="15" fill="rgb(244,222,10)" fg:x="437" fg:w="1"/><text x="15.6482%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="15.3982%" y="261" width="0.0352%" height="15" fill="rgb(236,179,52)" fg:x="437" fg:w="1"/><text x="15.6482%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="15.3982%" y="245" width="0.0352%" height="15" fill="rgb(213,23,39)" fg:x="437" fg:w="1"/><text x="15.6482%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="15.3982%" y="229" width="0.0352%" height="15" fill="rgb(238,48,10)" fg:x="437" fg:w="1"/><text x="15.6482%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="15.3982%" y="213" width="0.0352%" height="15" fill="rgb(251,196,23)" fg:x="437" fg:w="1"/><text x="15.6482%" y="223.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (12 samples, 0.42%)</title><rect x="15.0458%" y="421" width="0.4228%" height="15" fill="rgb(250,152,24)" fg:x="427" fg:w="12"/><text x="15.2958%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.04%)</title><rect x="15.4334%" y="405" width="0.0352%" height="15" fill="rgb(209,150,17)" fg:x="438" fg:w="1"/><text x="15.6834%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="15.4334%" y="389" width="0.0352%" height="15" fill="rgb(234,202,34)" fg:x="438" fg:w="1"/><text x="15.6834%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="15.4334%" y="373" width="0.0352%" height="15" fill="rgb(253,148,53)" fg:x="438" fg:w="1"/><text x="15.6834%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="15.4334%" y="357" width="0.0352%" height="15" fill="rgb(218,129,16)" fg:x="438" fg:w="1"/><text x="15.6834%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="15.5039%" y="261" width="0.0352%" height="15" fill="rgb(216,85,19)" fg:x="440" fg:w="1"/><text x="15.7539%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="15.5039%" y="245" width="0.0352%" height="15" fill="rgb(235,228,7)" fg:x="440" fg:w="1"/><text x="15.7539%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="15.6448%" y="245" width="0.0705%" height="15" fill="rgb(245,175,0)" fg:x="444" fg:w="2"/><text x="15.8948%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.28%)</title><rect x="15.5039%" y="309" width="0.2819%" height="15" fill="rgb(208,168,36)" fg:x="440" fg:w="8"/><text x="15.7539%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.28%)</title><rect x="15.5039%" y="293" width="0.2819%" height="15" fill="rgb(246,171,24)" fg:x="440" fg:w="8"/><text x="15.7539%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.28%)</title><rect x="15.5039%" y="277" width="0.2819%" height="15" fill="rgb(215,142,24)" fg:x="440" fg:w="8"/><text x="15.7539%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.25%)</title><rect x="15.5391%" y="261" width="0.2467%" height="15" fill="rgb(250,187,7)" fg:x="441" fg:w="7"/><text x="15.7891%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="15.7153%" y="245" width="0.0705%" height="15" fill="rgb(228,66,33)" fg:x="446" fg:w="2"/><text x="15.9653%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.14%)</title><rect x="15.7858%" y="309" width="0.1409%" height="15" fill="rgb(234,215,21)" fg:x="448" fg:w="4"/><text x="16.0358%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.07%)</title><rect x="15.8562%" y="293" width="0.0705%" height="15" fill="rgb(222,191,20)" fg:x="450" fg:w="2"/><text x="16.1062%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.07%)</title><rect x="15.8562%" y="277" width="0.0705%" height="15" fill="rgb(245,79,54)" fg:x="450" fg:w="2"/><text x="16.1062%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.07%)</title><rect x="15.8562%" y="261" width="0.0705%" height="15" fill="rgb(240,10,37)" fg:x="450" fg:w="2"/><text x="16.1062%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="15.9972%" y="181" width="0.0352%" height="15" fill="rgb(214,192,32)" fg:x="454" fg:w="1"/><text x="16.2472%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.60%)</title><rect x="15.5039%" y="341" width="0.5990%" height="15" fill="rgb(209,36,54)" fg:x="440" fg:w="17"/><text x="15.7539%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.60%)</title><rect x="15.5039%" y="325" width="0.5990%" height="15" fill="rgb(220,10,11)" fg:x="440" fg:w="17"/><text x="15.7539%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.18%)</title><rect x="15.9267%" y="309" width="0.1762%" height="15" fill="rgb(221,106,17)" fg:x="452" fg:w="5"/><text x="16.1767%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.18%)</title><rect x="15.9267%" y="293" width="0.1762%" height="15" fill="rgb(251,142,44)" fg:x="452" fg:w="5"/><text x="16.1767%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.18%)</title><rect x="15.9267%" y="277" width="0.1762%" height="15" fill="rgb(238,13,15)" fg:x="452" fg:w="5"/><text x="16.1767%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.18%)</title><rect x="15.9267%" y="261" width="0.1762%" height="15" fill="rgb(208,107,27)" fg:x="452" fg:w="5"/><text x="16.1767%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="15.9267%" y="245" width="0.1762%" height="15" fill="rgb(205,136,37)" fg:x="452" fg:w="5"/><text x="16.1767%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="15.9267%" y="229" width="0.1762%" height="15" fill="rgb(250,205,27)" fg:x="452" fg:w="5"/><text x="16.1767%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="15.9267%" y="213" width="0.1762%" height="15" fill="rgb(210,80,43)" fg:x="452" fg:w="5"/><text x="16.1767%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="15.9619%" y="197" width="0.1409%" height="15" fill="rgb(247,160,36)" fg:x="453" fg:w="4"/><text x="16.2119%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="16.0324%" y="181" width="0.0705%" height="15" fill="rgb(234,13,49)" fg:x="455" fg:w="2"/><text x="16.2824%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="16.1029%" y="293" width="0.0352%" height="15" fill="rgb(234,122,0)" fg:x="457" fg:w="1"/><text x="16.3529%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="16.1381%" y="277" width="0.0705%" height="15" fill="rgb(207,146,38)" fg:x="458" fg:w="2"/><text x="16.3881%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.07%)</title><rect x="16.1381%" y="261" width="0.0705%" height="15" fill="rgb(207,177,25)" fg:x="458" fg:w="2"/><text x="16.3881%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.07%)</title><rect x="16.1381%" y="245" width="0.0705%" height="15" fill="rgb(211,178,42)" fg:x="458" fg:w="2"/><text x="16.3881%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.07%)</title><rect x="16.1381%" y="229" width="0.0705%" height="15" fill="rgb(230,69,54)" fg:x="458" fg:w="2"/><text x="16.3881%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="16.2086%" y="229" width="0.0352%" height="15" fill="rgb(214,135,41)" fg:x="460" fg:w="1"/><text x="16.4586%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.14%)</title><rect x="16.1381%" y="293" width="0.1409%" height="15" fill="rgb(237,67,25)" fg:x="458" fg:w="4"/><text x="16.3881%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="16.2086%" y="277" width="0.0705%" height="15" fill="rgb(222,189,50)" fg:x="460" fg:w="2"/><text x="16.4586%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="16.2086%" y="261" width="0.0705%" height="15" fill="rgb(245,148,34)" fg:x="460" fg:w="2"/><text x="16.4586%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="16.2086%" y="245" width="0.0705%" height="15" fill="rgb(222,29,6)" fg:x="460" fg:w="2"/><text x="16.4586%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="16.2438%" y="229" width="0.0352%" height="15" fill="rgb(221,189,43)" fg:x="461" fg:w="1"/><text x="16.4938%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="16.2791%" y="293" width="0.0352%" height="15" fill="rgb(207,36,27)" fg:x="462" fg:w="1"/><text x="16.5291%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="16.3143%" y="293" width="0.0352%" height="15" fill="rgb(217,90,24)" fg:x="463" fg:w="1"/><text x="16.5643%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (26 samples, 0.92%)</title><rect x="15.4686%" y="405" width="0.9161%" height="15" fill="rgb(224,66,35)" fg:x="439" fg:w="26"/><text x="15.7186%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26 samples, 0.92%)</title><rect x="15.4686%" y="389" width="0.9161%" height="15" fill="rgb(221,13,50)" fg:x="439" fg:w="26"/><text x="15.7186%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (26 samples, 0.92%)</title><rect x="15.4686%" y="373" width="0.9161%" height="15" fill="rgb(236,68,49)" fg:x="439" fg:w="26"/><text x="15.7186%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26 samples, 0.92%)</title><rect x="15.4686%" y="357" width="0.9161%" height="15" fill="rgb(229,146,28)" fg:x="439" fg:w="26"/><text x="15.7186%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.28%)</title><rect x="16.1029%" y="341" width="0.2819%" height="15" fill="rgb(225,31,38)" fg:x="457" fg:w="8"/><text x="16.3529%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.28%)</title><rect x="16.1029%" y="325" width="0.2819%" height="15" fill="rgb(250,208,3)" fg:x="457" fg:w="8"/><text x="16.3529%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.28%)</title><rect x="16.1029%" y="309" width="0.2819%" height="15" fill="rgb(246,54,23)" fg:x="457" fg:w="8"/><text x="16.3529%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="16.3495%" y="293" width="0.0352%" height="15" fill="rgb(243,76,11)" fg:x="464" fg:w="1"/><text x="16.5995%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="16.3495%" y="277" width="0.0352%" height="15" fill="rgb(245,21,50)" fg:x="464" fg:w="1"/><text x="16.5995%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="16.3848%" y="389" width="0.0352%" height="15" fill="rgb(228,9,43)" fg:x="465" fg:w="1"/><text x="16.6348%" y="399.50"></text></g><g><title>compare::Compare::compares_ge (4 samples, 0.14%)</title><rect x="16.5257%" y="373" width="0.1409%" height="15" fill="rgb(208,100,47)" fg:x="469" fg:w="4"/><text x="16.7757%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (4 samples, 0.14%)</title><rect x="16.5257%" y="357" width="0.1409%" height="15" fill="rgb(232,26,8)" fg:x="469" fg:w="4"/><text x="16.7757%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.14%)</title><rect x="16.5257%" y="341" width="0.1409%" height="15" fill="rgb(216,166,38)" fg:x="469" fg:w="4"/><text x="16.7757%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (4 samples, 0.14%)</title><rect x="16.5257%" y="325" width="0.1409%" height="15" fill="rgb(251,202,51)" fg:x="469" fg:w="4"/><text x="16.7757%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (4 samples, 0.14%)</title><rect x="16.5257%" y="309" width="0.1409%" height="15" fill="rgb(254,216,34)" fg:x="469" fg:w="4"/><text x="16.7757%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (4 samples, 0.14%)</title><rect x="16.5257%" y="293" width="0.1409%" height="15" fill="rgb(251,32,27)" fg:x="469" fg:w="4"/><text x="16.7757%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (4 samples, 0.14%)</title><rect x="16.5257%" y="277" width="0.1409%" height="15" fill="rgb(208,127,28)" fg:x="469" fg:w="4"/><text x="16.7757%" y="287.50"></text></g><g><title>compare::Compare::compares_le (3 samples, 0.11%)</title><rect x="16.6667%" y="373" width="0.1057%" height="15" fill="rgb(224,137,22)" fg:x="473" fg:w="3"/><text x="16.9167%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.11%)</title><rect x="16.6667%" y="357" width="0.1057%" height="15" fill="rgb(254,70,32)" fg:x="473" fg:w="3"/><text x="16.9167%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.11%)</title><rect x="16.6667%" y="341" width="0.1057%" height="15" fill="rgb(229,75,37)" fg:x="473" fg:w="3"/><text x="16.9167%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="16.7724%" y="341" width="0.2467%" height="15" fill="rgb(252,64,23)" fg:x="476" fg:w="7"/><text x="17.0224%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.18%)</title><rect x="17.0190%" y="213" width="0.1762%" height="15" fill="rgb(232,162,48)" fg:x="483" fg:w="5"/><text x="17.2690%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="17.0895%" y="197" width="0.1057%" height="15" fill="rgb(246,160,12)" fg:x="485" fg:w="3"/><text x="17.3395%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.18%)</title><rect x="17.3009%" y="197" width="0.1762%" height="15" fill="rgb(247,166,0)" fg:x="491" fg:w="5"/><text x="17.5509%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.53%)</title><rect x="17.0190%" y="261" width="0.5285%" height="15" fill="rgb(249,219,21)" fg:x="483" fg:w="15"/><text x="17.2690%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.53%)</title><rect x="17.0190%" y="245" width="0.5285%" height="15" fill="rgb(205,209,3)" fg:x="483" fg:w="15"/><text x="17.2690%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.53%)</title><rect x="17.0190%" y="229" width="0.5285%" height="15" fill="rgb(243,44,1)" fg:x="483" fg:w="15"/><text x="17.2690%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.35%)</title><rect x="17.1952%" y="213" width="0.3524%" height="15" fill="rgb(206,159,16)" fg:x="488" fg:w="10"/><text x="17.4452%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="17.4771%" y="197" width="0.0705%" height="15" fill="rgb(244,77,30)" fg:x="496" fg:w="2"/><text x="17.7271%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="17.5476%" y="261" width="0.0352%" height="15" fill="rgb(218,69,12)" fg:x="498" fg:w="1"/><text x="17.7976%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="17.6885%" y="133" width="0.0705%" height="15" fill="rgb(212,87,7)" fg:x="502" fg:w="2"/><text x="17.9385%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.78%)</title><rect x="17.0190%" y="293" width="0.7752%" height="15" fill="rgb(245,114,25)" fg:x="483" fg:w="22"/><text x="17.2690%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.78%)</title><rect x="17.0190%" y="277" width="0.7752%" height="15" fill="rgb(210,61,42)" fg:x="483" fg:w="22"/><text x="17.2690%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.21%)</title><rect x="17.5828%" y="261" width="0.2114%" height="15" fill="rgb(211,52,33)" fg:x="499" fg:w="6"/><text x="17.8328%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (6 samples, 0.21%)</title><rect x="17.5828%" y="245" width="0.2114%" height="15" fill="rgb(234,58,33)" fg:x="499" fg:w="6"/><text x="17.8328%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (6 samples, 0.21%)</title><rect x="17.5828%" y="229" width="0.2114%" height="15" fill="rgb(220,115,36)" fg:x="499" fg:w="6"/><text x="17.8328%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (6 samples, 0.21%)</title><rect x="17.5828%" y="213" width="0.2114%" height="15" fill="rgb(243,153,54)" fg:x="499" fg:w="6"/><text x="17.8328%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="17.5828%" y="197" width="0.2114%" height="15" fill="rgb(251,47,18)" fg:x="499" fg:w="6"/><text x="17.8328%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="17.5828%" y="181" width="0.2114%" height="15" fill="rgb(242,102,42)" fg:x="499" fg:w="6"/><text x="17.8328%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.21%)</title><rect x="17.5828%" y="165" width="0.2114%" height="15" fill="rgb(234,31,38)" fg:x="499" fg:w="6"/><text x="17.8328%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="17.6533%" y="149" width="0.1409%" height="15" fill="rgb(221,117,51)" fg:x="501" fg:w="4"/><text x="17.9033%" y="159.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="17.7590%" y="133" width="0.0352%" height="15" fill="rgb(212,20,18)" fg:x="504" fg:w="1"/><text x="18.0090%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="17.8295%" y="245" width="0.0352%" height="15" fill="rgb(245,133,36)" fg:x="506" fg:w="1"/><text x="18.0795%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="17.8647%" y="229" width="0.0352%" height="15" fill="rgb(212,6,19)" fg:x="507" fg:w="1"/><text x="18.1147%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="17.8647%" y="213" width="0.0352%" height="15" fill="rgb(218,1,36)" fg:x="507" fg:w="1"/><text x="18.1147%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="17.8647%" y="197" width="0.0352%" height="15" fill="rgb(246,84,54)" fg:x="507" fg:w="1"/><text x="18.1147%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.04%)</title><rect x="17.8647%" y="181" width="0.0352%" height="15" fill="rgb(242,110,6)" fg:x="507" fg:w="1"/><text x="18.1147%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.07%)</title><rect x="17.8647%" y="245" width="0.0705%" height="15" fill="rgb(214,47,5)" fg:x="507" fg:w="2"/><text x="18.1147%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="17.8999%" y="229" width="0.0352%" height="15" fill="rgb(218,159,25)" fg:x="508" fg:w="1"/><text x="18.1499%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="17.8999%" y="213" width="0.0352%" height="15" fill="rgb(215,211,28)" fg:x="508" fg:w="1"/><text x="18.1499%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="17.8999%" y="197" width="0.0352%" height="15" fill="rgb(238,59,32)" fg:x="508" fg:w="1"/><text x="18.1499%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="17.8999%" y="181" width="0.0352%" height="15" fill="rgb(226,82,3)" fg:x="508" fg:w="1"/><text x="18.1499%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.07%)</title><rect x="17.9352%" y="245" width="0.0705%" height="15" fill="rgb(240,164,32)" fg:x="509" fg:w="2"/><text x="18.1852%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="18.0056%" y="245" width="0.0352%" height="15" fill="rgb(232,46,7)" fg:x="511" fg:w="1"/><text x="18.2556%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="18.0409%" y="245" width="0.0352%" height="15" fill="rgb(229,129,53)" fg:x="512" fg:w="1"/><text x="18.2909%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="18.0409%" y="229" width="0.0352%" height="15" fill="rgb(234,188,29)" fg:x="512" fg:w="1"/><text x="18.2909%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="18.0409%" y="213" width="0.0352%" height="15" fill="rgb(246,141,4)" fg:x="512" fg:w="1"/><text x="18.2909%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (42 samples, 1.48%)</title><rect x="16.7724%" y="373" width="1.4799%" height="15" fill="rgb(229,23,39)" fg:x="476" fg:w="42"/><text x="17.0224%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 1.48%)</title><rect x="16.7724%" y="357" width="1.4799%" height="15" fill="rgb(206,12,3)" fg:x="476" fg:w="42"/><text x="17.0224%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (35 samples, 1.23%)</title><rect x="17.0190%" y="341" width="1.2333%" height="15" fill="rgb(252,226,20)" fg:x="483" fg:w="35"/><text x="17.2690%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (35 samples, 1.23%)</title><rect x="17.0190%" y="325" width="1.2333%" height="15" fill="rgb(216,123,35)" fg:x="483" fg:w="35"/><text x="17.2690%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (35 samples, 1.23%)</title><rect x="17.0190%" y="309" width="1.2333%" height="15" fill="rgb(212,68,40)" fg:x="483" fg:w="35"/><text x="17.2690%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.46%)</title><rect x="17.7942%" y="293" width="0.4581%" height="15" fill="rgb(254,125,32)" fg:x="505" fg:w="13"/><text x="18.0442%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.46%)</title><rect x="17.7942%" y="277" width="0.4581%" height="15" fill="rgb(253,97,22)" fg:x="505" fg:w="13"/><text x="18.0442%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13 samples, 0.46%)</title><rect x="17.7942%" y="261" width="0.4581%" height="15" fill="rgb(241,101,14)" fg:x="505" fg:w="13"/><text x="18.0442%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.18%)</title><rect x="18.0761%" y="245" width="0.1762%" height="15" fill="rgb(238,103,29)" fg:x="513" fg:w="5"/><text x="18.3261%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.18%)</title><rect x="18.0761%" y="229" width="0.1762%" height="15" fill="rgb(233,195,47)" fg:x="513" fg:w="5"/><text x="18.3261%" y="239.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (53 samples, 1.87%)</title><rect x="16.4200%" y="389" width="1.8675%" height="15" fill="rgb(246,218,30)" fg:x="466" fg:w="53"/><text x="16.6700%" y="399.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.04%)</title><rect x="18.2523%" y="373" width="0.0352%" height="15" fill="rgb(219,145,47)" fg:x="518" fg:w="1"/><text x="18.5023%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (56 samples, 1.97%)</title><rect x="16.3848%" y="405" width="1.9732%" height="15" fill="rgb(243,12,26)" fg:x="465" fg:w="56"/><text x="16.6348%" y="415.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.07%)</title><rect x="18.2875%" y="389" width="0.0705%" height="15" fill="rgb(214,87,16)" fg:x="519" fg:w="2"/><text x="18.5375%" y="399.50"></text></g><g><title>compare::Compare::compares_le (6 samples, 0.21%)</title><rect x="18.3932%" y="389" width="0.2114%" height="15" fill="rgb(208,99,42)" fg:x="522" fg:w="6"/><text x="18.6432%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (6 samples, 0.21%)</title><rect x="18.3932%" y="373" width="0.2114%" height="15" fill="rgb(253,99,2)" fg:x="522" fg:w="6"/><text x="18.6432%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.21%)</title><rect x="18.3932%" y="357" width="0.2114%" height="15" fill="rgb(220,168,23)" fg:x="522" fg:w="6"/><text x="18.6432%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.04%)</title><rect x="18.5694%" y="341" width="0.0352%" height="15" fill="rgb(242,38,24)" fg:x="527" fg:w="1"/><text x="18.8194%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (1 samples, 0.04%)</title><rect x="18.5694%" y="325" width="0.0352%" height="15" fill="rgb(225,182,9)" fg:x="527" fg:w="1"/><text x="18.8194%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.04%)</title><rect x="18.5694%" y="309" width="0.0352%" height="15" fill="rgb(243,178,37)" fg:x="527" fg:w="1"/><text x="18.8194%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (1 samples, 0.04%)</title><rect x="18.5694%" y="293" width="0.0352%" height="15" fill="rgb(232,139,19)" fg:x="527" fg:w="1"/><text x="18.8194%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.32%)</title><rect x="18.6047%" y="357" width="0.3171%" height="15" fill="rgb(225,201,24)" fg:x="528" fg:w="9"/><text x="18.8547%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="19.0275%" y="213" width="0.0705%" height="15" fill="rgb(221,47,46)" fg:x="540" fg:w="2"/><text x="19.2775%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.21%)</title><rect x="18.9922%" y="229" width="0.2114%" height="15" fill="rgb(249,23,13)" fg:x="539" fg:w="6"/><text x="19.2422%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="19.0980%" y="213" width="0.1057%" height="15" fill="rgb(219,9,5)" fg:x="542" fg:w="3"/><text x="19.3480%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.14%)</title><rect x="19.3094%" y="213" width="0.1409%" height="15" fill="rgb(254,171,16)" fg:x="548" fg:w="4"/><text x="19.5594%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.60%)</title><rect x="18.9218%" y="277" width="0.5990%" height="15" fill="rgb(230,171,20)" fg:x="537" fg:w="17"/><text x="19.1718%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.60%)</title><rect x="18.9218%" y="261" width="0.5990%" height="15" fill="rgb(210,71,41)" fg:x="537" fg:w="17"/><text x="19.1718%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.60%)</title><rect x="18.9218%" y="245" width="0.5990%" height="15" fill="rgb(206,173,20)" fg:x="537" fg:w="17"/><text x="19.1718%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.32%)</title><rect x="19.2037%" y="229" width="0.3171%" height="15" fill="rgb(233,88,34)" fg:x="545" fg:w="9"/><text x="19.4537%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="19.4503%" y="213" width="0.0705%" height="15" fill="rgb(223,209,46)" fg:x="552" fg:w="2"/><text x="19.7003%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.78%)</title><rect x="18.9218%" y="309" width="0.7752%" height="15" fill="rgb(250,43,18)" fg:x="537" fg:w="22"/><text x="19.1718%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.78%)</title><rect x="18.9218%" y="293" width="0.7752%" height="15" fill="rgb(208,13,10)" fg:x="537" fg:w="22"/><text x="19.1718%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.18%)</title><rect x="19.5208%" y="277" width="0.1762%" height="15" fill="rgb(212,200,36)" fg:x="554" fg:w="5"/><text x="19.7708%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.18%)</title><rect x="19.5208%" y="261" width="0.1762%" height="15" fill="rgb(225,90,30)" fg:x="554" fg:w="5"/><text x="19.7708%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.18%)</title><rect x="19.5208%" y="245" width="0.1762%" height="15" fill="rgb(236,182,39)" fg:x="554" fg:w="5"/><text x="19.7708%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.18%)</title><rect x="19.5208%" y="229" width="0.1762%" height="15" fill="rgb(212,144,35)" fg:x="554" fg:w="5"/><text x="19.7708%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="19.5208%" y="213" width="0.1762%" height="15" fill="rgb(228,63,44)" fg:x="554" fg:w="5"/><text x="19.7708%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="19.5208%" y="197" width="0.1762%" height="15" fill="rgb(228,109,6)" fg:x="554" fg:w="5"/><text x="19.7708%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="19.5208%" y="181" width="0.1762%" height="15" fill="rgb(238,117,24)" fg:x="554" fg:w="5"/><text x="19.7708%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="19.6265%" y="165" width="0.0705%" height="15" fill="rgb(242,26,26)" fg:x="557" fg:w="2"/><text x="19.8765%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="19.6617%" y="149" width="0.0352%" height="15" fill="rgb(221,92,48)" fg:x="558" fg:w="1"/><text x="19.9117%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.14%)</title><rect x="19.6970%" y="261" width="0.1409%" height="15" fill="rgb(209,209,32)" fg:x="559" fg:w="4"/><text x="19.9470%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.14%)</title><rect x="19.6970%" y="245" width="0.1409%" height="15" fill="rgb(221,70,22)" fg:x="559" fg:w="4"/><text x="19.9470%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.14%)</title><rect x="19.6970%" y="229" width="0.1409%" height="15" fill="rgb(248,145,5)" fg:x="559" fg:w="4"/><text x="19.9470%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.14%)</title><rect x="19.6970%" y="213" width="0.1409%" height="15" fill="rgb(226,116,26)" fg:x="559" fg:w="4"/><text x="19.9470%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4 samples, 0.14%)</title><rect x="19.6970%" y="197" width="0.1409%" height="15" fill="rgb(244,5,17)" fg:x="559" fg:w="4"/><text x="19.9470%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="19.8379%" y="261" width="0.0352%" height="15" fill="rgb(252,159,33)" fg:x="563" fg:w="1"/><text x="20.0879%" y="271.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 1.30%)</title><rect x="18.6047%" y="373" width="1.3037%" height="15" fill="rgb(206,71,0)" fg:x="528" fg:w="37"/><text x="18.8547%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (28 samples, 0.99%)</title><rect x="18.9218%" y="357" width="0.9866%" height="15" fill="rgb(233,118,54)" fg:x="537" fg:w="28"/><text x="19.1718%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (28 samples, 0.99%)</title><rect x="18.9218%" y="341" width="0.9866%" height="15" fill="rgb(234,83,48)" fg:x="537" fg:w="28"/><text x="19.1718%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (28 samples, 0.99%)</title><rect x="18.9218%" y="325" width="0.9866%" height="15" fill="rgb(228,3,54)" fg:x="537" fg:w="28"/><text x="19.1718%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 0.21%)</title><rect x="19.6970%" y="309" width="0.2114%" height="15" fill="rgb(226,155,13)" fg:x="559" fg:w="6"/><text x="19.9470%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.21%)</title><rect x="19.6970%" y="293" width="0.2114%" height="15" fill="rgb(241,28,37)" fg:x="559" fg:w="6"/><text x="19.9470%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.21%)</title><rect x="19.6970%" y="277" width="0.2114%" height="15" fill="rgb(233,93,10)" fg:x="559" fg:w="6"/><text x="19.9470%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="19.8732%" y="261" width="0.0352%" height="15" fill="rgb(225,113,19)" fg:x="564" fg:w="1"/><text x="20.1232%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="19.8732%" y="245" width="0.0352%" height="15" fill="rgb(241,2,18)" fg:x="564" fg:w="1"/><text x="20.1232%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (38 samples, 1.34%)</title><rect x="18.6047%" y="389" width="1.3390%" height="15" fill="rgb(228,207,21)" fg:x="528" fg:w="38"/><text x="18.8547%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="19.9084%" y="373" width="0.0352%" height="15" fill="rgb(213,211,35)" fg:x="565" fg:w="1"/><text x="20.1584%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (133 samples, 4.69%)</title><rect x="15.4686%" y="421" width="4.6864%" height="15" fill="rgb(209,83,10)" fg:x="439" fg:w="133"/><text x="15.7186%" y="431.50">mut_b..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (51 samples, 1.80%)</title><rect x="18.3580%" y="405" width="1.7970%" height="15" fill="rgb(209,164,1)" fg:x="521" fg:w="51"/><text x="18.6080%" y="415.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (6 samples, 0.21%)</title><rect x="19.9436%" y="389" width="0.2114%" height="15" fill="rgb(213,184,43)" fg:x="566" fg:w="6"/><text x="20.1936%" y="399.50"></text></g><g><title>core::ptr::read (4 samples, 0.14%)</title><rect x="20.0141%" y="373" width="0.1409%" height="15" fill="rgb(231,61,34)" fg:x="568" fg:w="4"/><text x="20.2641%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="20.2607%" y="293" width="0.0705%" height="15" fill="rgb(235,75,3)" fg:x="575" fg:w="2"/><text x="20.5107%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="20.2607%" y="277" width="0.0705%" height="15" fill="rgb(220,106,47)" fg:x="575" fg:w="2"/><text x="20.5107%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="20.4017%" y="277" width="0.1057%" height="15" fill="rgb(210,196,33)" fg:x="579" fg:w="3"/><text x="20.6517%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.42%)</title><rect x="20.1903%" y="341" width="0.4228%" height="15" fill="rgb(229,154,42)" fg:x="573" fg:w="12"/><text x="20.4403%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.42%)</title><rect x="20.1903%" y="325" width="0.4228%" height="15" fill="rgb(228,114,26)" fg:x="573" fg:w="12"/><text x="20.4403%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.42%)</title><rect x="20.1903%" y="309" width="0.4228%" height="15" fill="rgb(208,144,1)" fg:x="573" fg:w="12"/><text x="20.4403%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.28%)</title><rect x="20.3312%" y="293" width="0.2819%" height="15" fill="rgb(239,112,37)" fg:x="577" fg:w="8"/><text x="20.5812%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="20.5074%" y="277" width="0.1057%" height="15" fill="rgb(210,96,50)" fg:x="582" fg:w="3"/><text x="20.7574%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="20.6131%" y="341" width="0.0352%" height="15" fill="rgb(222,178,2)" fg:x="585" fg:w="1"/><text x="20.8631%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="20.6131%" y="325" width="0.0352%" height="15" fill="rgb(226,74,18)" fg:x="585" fg:w="1"/><text x="20.8631%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="20.6131%" y="309" width="0.0352%" height="15" fill="rgb(225,67,54)" fg:x="585" fg:w="1"/><text x="20.8631%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="20.6131%" y="293" width="0.0352%" height="15" fill="rgb(251,92,32)" fg:x="585" fg:w="1"/><text x="20.8631%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.53%)</title><rect x="20.1903%" y="373" width="0.5285%" height="15" fill="rgb(228,149,22)" fg:x="573" fg:w="15"/><text x="20.4403%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.53%)</title><rect x="20.1903%" y="357" width="0.5285%" height="15" fill="rgb(243,54,13)" fg:x="573" fg:w="15"/><text x="20.4403%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.07%)</title><rect x="20.6483%" y="341" width="0.0705%" height="15" fill="rgb(243,180,28)" fg:x="586" fg:w="2"/><text x="20.8983%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.07%)</title><rect x="20.6483%" y="325" width="0.0705%" height="15" fill="rgb(208,167,24)" fg:x="586" fg:w="2"/><text x="20.8983%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.07%)</title><rect x="20.6483%" y="309" width="0.0705%" height="15" fill="rgb(245,73,45)" fg:x="586" fg:w="2"/><text x="20.8983%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.07%)</title><rect x="20.6483%" y="293" width="0.0705%" height="15" fill="rgb(237,203,48)" fg:x="586" fg:w="2"/><text x="20.8983%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="20.6483%" y="277" width="0.0705%" height="15" fill="rgb(211,197,16)" fg:x="586" fg:w="2"/><text x="20.8983%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="20.6483%" y="261" width="0.0705%" height="15" fill="rgb(243,99,51)" fg:x="586" fg:w="2"/><text x="20.8983%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="20.6483%" y="245" width="0.0705%" height="15" fill="rgb(215,123,29)" fg:x="586" fg:w="2"/><text x="20.8983%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="20.6836%" y="229" width="0.0352%" height="15" fill="rgb(239,186,37)" fg:x="587" fg:w="1"/><text x="20.9336%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.14%)</title><rect x="20.7893%" y="325" width="0.1409%" height="15" fill="rgb(252,136,39)" fg:x="590" fg:w="4"/><text x="21.0393%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.14%)</title><rect x="20.7893%" y="309" width="0.1409%" height="15" fill="rgb(223,213,32)" fg:x="590" fg:w="4"/><text x="21.0393%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.14%)</title><rect x="20.7893%" y="293" width="0.1409%" height="15" fill="rgb(233,115,5)" fg:x="590" fg:w="4"/><text x="21.0393%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.14%)</title><rect x="20.7893%" y="277" width="0.1409%" height="15" fill="rgb(207,226,44)" fg:x="590" fg:w="4"/><text x="21.0393%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4 samples, 0.14%)</title><rect x="20.7893%" y="261" width="0.1409%" height="15" fill="rgb(208,126,0)" fg:x="590" fg:w="4"/><text x="21.0393%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4 samples, 0.14%)</title><rect x="20.9302%" y="325" width="0.1409%" height="15" fill="rgb(244,66,21)" fg:x="594" fg:w="4"/><text x="21.1802%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.07%)</title><rect x="21.0712%" y="325" width="0.0705%" height="15" fill="rgb(222,97,12)" fg:x="598" fg:w="2"/><text x="21.3212%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="21.1416%" y="325" width="0.0705%" height="15" fill="rgb(219,213,19)" fg:x="600" fg:w="2"/><text x="21.3916%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="21.1416%" y="309" width="0.0705%" height="15" fill="rgb(252,169,30)" fg:x="600" fg:w="2"/><text x="21.3916%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (17 samples, 0.60%)</title><rect x="20.7188%" y="341" width="0.5990%" height="15" fill="rgb(206,32,51)" fg:x="588" fg:w="17"/><text x="20.9688%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.11%)</title><rect x="21.2121%" y="325" width="0.1057%" height="15" fill="rgb(250,172,42)" fg:x="602" fg:w="3"/><text x="21.4621%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="21.2121%" y="309" width="0.1057%" height="15" fill="rgb(209,34,43)" fg:x="602" fg:w="3"/><text x="21.4621%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="21.2121%" y="293" width="0.1057%" height="15" fill="rgb(223,11,35)" fg:x="602" fg:w="3"/><text x="21.4621%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (34 samples, 1.20%)</title><rect x="20.1550%" y="421" width="1.1980%" height="15" fill="rgb(251,219,26)" fg:x="572" fg:w="34"/><text x="20.4050%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (34 samples, 1.20%)</title><rect x="20.1550%" y="405" width="1.1980%" height="15" fill="rgb(231,119,3)" fg:x="572" fg:w="34"/><text x="20.4050%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (34 samples, 1.20%)</title><rect x="20.1550%" y="389" width="1.1980%" height="15" fill="rgb(216,97,11)" fg:x="572" fg:w="34"/><text x="20.4050%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 0.63%)</title><rect x="20.7188%" y="373" width="0.6342%" height="15" fill="rgb(223,59,9)" fg:x="588" fg:w="18"/><text x="20.9688%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.63%)</title><rect x="20.7188%" y="357" width="0.6342%" height="15" fill="rgb(233,93,31)" fg:x="588" fg:w="18"/><text x="20.9688%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.04%)</title><rect x="21.3178%" y="341" width="0.0352%" height="15" fill="rgb(239,81,33)" fg:x="605" fg:w="1"/><text x="21.5678%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="21.3531%" y="357" width="0.0352%" height="15" fill="rgb(213,120,34)" fg:x="606" fg:w="1"/><text x="21.6031%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="21.3531%" y="341" width="0.0352%" height="15" fill="rgb(243,49,53)" fg:x="606" fg:w="1"/><text x="21.6031%" y="351.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="21.3531%" y="325" width="0.0352%" height="15" fill="rgb(247,216,33)" fg:x="606" fg:w="1"/><text x="21.6031%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.07%)</title><rect x="21.3531%" y="389" width="0.0705%" height="15" fill="rgb(226,26,14)" fg:x="606" fg:w="2"/><text x="21.6031%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.07%)</title><rect x="21.3531%" y="373" width="0.0705%" height="15" fill="rgb(215,49,53)" fg:x="606" fg:w="2"/><text x="21.6031%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.04%)</title><rect x="21.3883%" y="357" width="0.0352%" height="15" fill="rgb(245,162,40)" fg:x="607" fg:w="1"/><text x="21.6383%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.11%)</title><rect x="21.3531%" y="405" width="0.1057%" height="15" fill="rgb(229,68,17)" fg:x="606" fg:w="3"/><text x="21.6031%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="21.4235%" y="389" width="0.0352%" height="15" fill="rgb(213,182,10)" fg:x="608" fg:w="1"/><text x="21.6735%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.04%)</title><rect x="21.4235%" y="373" width="0.0352%" height="15" fill="rgb(245,125,30)" fg:x="608" fg:w="1"/><text x="21.6735%" y="383.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (1 samples, 0.04%)</title><rect x="21.4235%" y="357" width="0.0352%" height="15" fill="rgb(232,202,2)" fg:x="608" fg:w="1"/><text x="21.6735%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (191 samples, 6.73%)</title><rect x="14.7992%" y="437" width="6.7301%" height="15" fill="rgb(237,140,51)" fg:x="420" fg:w="191"/><text x="15.0492%" y="447.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.18%)</title><rect x="21.3531%" y="421" width="0.1762%" height="15" fill="rgb(236,157,25)" fg:x="606" fg:w="5"/><text x="21.6031%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (2 samples, 0.07%)</title><rect x="21.4588%" y="405" width="0.0705%" height="15" fill="rgb(219,209,0)" fg:x="609" fg:w="2"/><text x="21.7088%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (198 samples, 6.98%)</title><rect x="14.5877%" y="453" width="6.9767%" height="15" fill="rgb(240,116,54)" fg:x="414" fg:w="198"/><text x="14.8377%" y="463.50">project1:..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (1 samples, 0.04%)</title><rect x="21.5292%" y="437" width="0.0352%" height="15" fill="rgb(216,10,36)" fg:x="611" fg:w="1"/><text x="21.7792%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="21.5292%" y="421" width="0.0352%" height="15" fill="rgb(222,72,44)" fg:x="611" fg:w="1"/><text x="21.7792%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="21.5292%" y="405" width="0.0352%" height="15" fill="rgb(232,159,9)" fg:x="611" fg:w="1"/><text x="21.7792%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="21.5645%" y="437" width="0.1057%" height="15" fill="rgb(210,39,32)" fg:x="612" fg:w="3"/><text x="21.8145%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="21.5645%" y="421" width="0.1057%" height="15" fill="rgb(216,194,45)" fg:x="612" fg:w="3"/><text x="21.8145%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="21.5645%" y="405" width="0.1057%" height="15" fill="rgb(218,18,35)" fg:x="612" fg:w="3"/><text x="21.8145%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (3 samples, 0.11%)</title><rect x="21.5645%" y="389" width="0.1057%" height="15" fill="rgb(207,83,51)" fg:x="612" fg:w="3"/><text x="21.8145%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="21.5645%" y="373" width="0.1057%" height="15" fill="rgb(225,63,43)" fg:x="612" fg:w="3"/><text x="21.8145%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.11%)</title><rect x="21.5645%" y="357" width="0.1057%" height="15" fill="rgb(207,57,36)" fg:x="612" fg:w="3"/><text x="21.8145%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.11%)</title><rect x="21.5645%" y="341" width="0.1057%" height="15" fill="rgb(216,99,33)" fg:x="612" fg:w="3"/><text x="21.8145%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="21.5645%" y="325" width="0.1057%" height="15" fill="rgb(225,42,16)" fg:x="612" fg:w="3"/><text x="21.8145%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="21.5645%" y="309" width="0.1057%" height="15" fill="rgb(220,201,45)" fg:x="612" fg:w="3"/><text x="21.8145%" y="319.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.11%)</title><rect x="21.5645%" y="293" width="0.1057%" height="15" fill="rgb(225,33,4)" fg:x="612" fg:w="3"/><text x="21.8145%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.11%)</title><rect x="21.5645%" y="277" width="0.1057%" height="15" fill="rgb(224,33,50)" fg:x="612" fg:w="3"/><text x="21.8145%" y="287.50"></text></g><g><title>__GI___libc_free (3 samples, 0.11%)</title><rect x="21.5645%" y="261" width="0.1057%" height="15" fill="rgb(246,198,51)" fg:x="612" fg:w="3"/><text x="21.8145%" y="271.50"></text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="21.5645%" y="245" width="0.1057%" height="15" fill="rgb(205,22,4)" fg:x="612" fg:w="3"/><text x="21.8145%" y="255.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="21.5997%" y="229" width="0.0705%" height="15" fill="rgb(206,3,8)" fg:x="613" fg:w="2"/><text x="21.8497%" y="239.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.04%)</title><rect x="21.6702%" y="437" width="0.0352%" height="15" fill="rgb(251,23,15)" fg:x="615" fg:w="1"/><text x="21.9202%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.04%)</title><rect x="21.6702%" y="421" width="0.0352%" height="15" fill="rgb(252,88,28)" fg:x="615" fg:w="1"/><text x="21.9202%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="21.6702%" y="405" width="0.0352%" height="15" fill="rgb(212,127,14)" fg:x="615" fg:w="1"/><text x="21.9202%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="21.6702%" y="389" width="0.0352%" height="15" fill="rgb(247,145,37)" fg:x="615" fg:w="1"/><text x="21.9202%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="21.7759%" y="389" width="0.0352%" height="15" fill="rgb(209,117,53)" fg:x="618" fg:w="1"/><text x="22.0259%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="21.8111%" y="389" width="0.0705%" height="15" fill="rgb(212,90,42)" fg:x="619" fg:w="2"/><text x="22.0611%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="21.8111%" y="373" width="0.0705%" height="15" fill="rgb(218,164,37)" fg:x="619" fg:w="2"/><text x="22.0611%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.07%)</title><rect x="21.8111%" y="357" width="0.0705%" height="15" fill="rgb(246,65,34)" fg:x="619" fg:w="2"/><text x="22.0611%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2 samples, 0.07%)</title><rect x="21.8111%" y="341" width="0.0705%" height="15" fill="rgb(231,100,33)" fg:x="619" fg:w="2"/><text x="22.0611%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="21.8111%" y="325" width="0.0705%" height="15" fill="rgb(228,126,14)" fg:x="619" fg:w="2"/><text x="22.0611%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="21.8816%" y="309" width="0.0705%" height="15" fill="rgb(215,173,21)" fg:x="621" fg:w="2"/><text x="22.1316%" y="319.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (2 samples, 0.07%)</title><rect x="21.8816%" y="293" width="0.0705%" height="15" fill="rgb(210,6,40)" fg:x="621" fg:w="2"/><text x="22.1316%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="21.8816%" y="277" width="0.0705%" height="15" fill="rgb(212,48,18)" fg:x="621" fg:w="2"/><text x="22.1316%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="21.8816%" y="261" width="0.0705%" height="15" fill="rgb(230,214,11)" fg:x="621" fg:w="2"/><text x="22.1316%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2 samples, 0.07%)</title><rect x="21.9521%" y="309" width="0.0705%" height="15" fill="rgb(254,105,39)" fg:x="623" fg:w="2"/><text x="22.2021%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="21.9521%" y="293" width="0.0705%" height="15" fill="rgb(245,158,5)" fg:x="623" fg:w="2"/><text x="22.2021%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (2 samples, 0.07%)</title><rect x="21.9521%" y="277" width="0.0705%" height="15" fill="rgb(249,208,11)" fg:x="623" fg:w="2"/><text x="22.2021%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.07%)</title><rect x="21.9521%" y="261" width="0.0705%" height="15" fill="rgb(210,39,28)" fg:x="623" fg:w="2"/><text x="22.2021%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="21.9521%" y="245" width="0.0705%" height="15" fill="rgb(211,56,53)" fg:x="623" fg:w="2"/><text x="22.2021%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="21.9873%" y="229" width="0.0352%" height="15" fill="rgb(226,201,30)" fg:x="624" fg:w="1"/><text x="22.2373%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="21.9873%" y="213" width="0.0352%" height="15" fill="rgb(239,101,34)" fg:x="624" fg:w="1"/><text x="22.2373%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="21.9873%" y="197" width="0.0352%" height="15" fill="rgb(226,209,5)" fg:x="624" fg:w="1"/><text x="22.2373%" y="207.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="21.9873%" y="181" width="0.0352%" height="15" fill="rgb(250,105,47)" fg:x="624" fg:w="1"/><text x="22.2373%" y="191.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="21.9873%" y="165" width="0.0352%" height="15" fill="rgb(230,72,3)" fg:x="624" fg:w="1"/><text x="22.2373%" y="175.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="21.9873%" y="149" width="0.0352%" height="15" fill="rgb(232,218,39)" fg:x="624" fg:w="1"/><text x="22.2373%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.11%)</title><rect x="22.0226%" y="277" width="0.1057%" height="15" fill="rgb(248,166,6)" fg:x="625" fg:w="3"/><text x="22.2726%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.14%)</title><rect x="22.1283%" y="277" width="0.1409%" height="15" fill="rgb(247,89,20)" fg:x="628" fg:w="4"/><text x="22.3783%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.14%)</title><rect x="22.1283%" y="261" width="0.1409%" height="15" fill="rgb(248,130,54)" fg:x="628" fg:w="4"/><text x="22.3783%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 0.14%)</title><rect x="22.1283%" y="245" width="0.1409%" height="15" fill="rgb(234,196,4)" fg:x="628" fg:w="4"/><text x="22.3783%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (14 samples, 0.49%)</title><rect x="22.0226%" y="293" width="0.4933%" height="15" fill="rgb(250,143,31)" fg:x="625" fg:w="14"/><text x="22.2726%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.25%)</title><rect x="22.2692%" y="277" width="0.2467%" height="15" fill="rgb(211,110,34)" fg:x="632" fg:w="7"/><text x="22.5192%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.25%)</title><rect x="22.2692%" y="261" width="0.2467%" height="15" fill="rgb(215,124,48)" fg:x="632" fg:w="7"/><text x="22.5192%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="22.2692%" y="245" width="0.2467%" height="15" fill="rgb(216,46,13)" fg:x="632" fg:w="7"/><text x="22.5192%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (15 samples, 0.53%)</title><rect x="22.0226%" y="309" width="0.5285%" height="15" fill="rgb(205,184,25)" fg:x="625" fg:w="15"/><text x="22.2726%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="22.5159%" y="293" width="0.0352%" height="15" fill="rgb(228,1,10)" fg:x="639" fg:w="1"/><text x="22.7659%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="22.5159%" y="277" width="0.0352%" height="15" fill="rgb(213,116,27)" fg:x="639" fg:w="1"/><text x="22.7659%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="22.5511%" y="261" width="0.0352%" height="15" fill="rgb(241,95,50)" fg:x="640" fg:w="1"/><text x="22.8011%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="22.5511%" y="245" width="0.0352%" height="15" fill="rgb(238,48,32)" fg:x="640" fg:w="1"/><text x="22.8011%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="22.5511%" y="229" width="0.0352%" height="15" fill="rgb(235,113,49)" fg:x="640" fg:w="1"/><text x="22.8011%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.18%)</title><rect x="22.5511%" y="277" width="0.1762%" height="15" fill="rgb(205,127,43)" fg:x="640" fg:w="5"/><text x="22.8011%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.14%)</title><rect x="22.5863%" y="261" width="0.1409%" height="15" fill="rgb(250,162,2)" fg:x="641" fg:w="4"/><text x="22.8363%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.14%)</title><rect x="22.5863%" y="245" width="0.1409%" height="15" fill="rgb(220,13,41)" fg:x="641" fg:w="4"/><text x="22.8363%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.14%)</title><rect x="22.5863%" y="229" width="0.1409%" height="15" fill="rgb(249,221,25)" fg:x="641" fg:w="4"/><text x="22.8363%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="22.5863%" y="213" width="0.1409%" height="15" fill="rgb(215,208,19)" fg:x="641" fg:w="4"/><text x="22.8363%" y="223.50"></text></g><g><title>__rdl_alloc (4 samples, 0.14%)</title><rect x="22.5863%" y="197" width="0.1409%" height="15" fill="rgb(236,175,2)" fg:x="641" fg:w="4"/><text x="22.8363%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.14%)</title><rect x="22.5863%" y="181" width="0.1409%" height="15" fill="rgb(241,52,2)" fg:x="641" fg:w="4"/><text x="22.8363%" y="191.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.14%)</title><rect x="22.5863%" y="165" width="0.1409%" height="15" fill="rgb(248,140,14)" fg:x="641" fg:w="4"/><text x="22.8363%" y="175.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="22.6568%" y="149" width="0.0705%" height="15" fill="rgb(253,22,42)" fg:x="643" fg:w="2"/><text x="22.9068%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (25 samples, 0.88%)</title><rect x="21.8816%" y="373" width="0.8809%" height="15" fill="rgb(234,61,47)" fg:x="621" fg:w="25"/><text x="22.1316%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.88%)</title><rect x="21.8816%" y="357" width="0.8809%" height="15" fill="rgb(208,226,15)" fg:x="621" fg:w="25"/><text x="22.1316%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (25 samples, 0.88%)</title><rect x="21.8816%" y="341" width="0.8809%" height="15" fill="rgb(217,221,4)" fg:x="621" fg:w="25"/><text x="22.1316%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (25 samples, 0.88%)</title><rect x="21.8816%" y="325" width="0.8809%" height="15" fill="rgb(212,174,34)" fg:x="621" fg:w="25"/><text x="22.1316%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (6 samples, 0.21%)</title><rect x="22.5511%" y="309" width="0.2114%" height="15" fill="rgb(253,83,4)" fg:x="640" fg:w="6"/><text x="22.8011%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.21%)</title><rect x="22.5511%" y="293" width="0.2114%" height="15" fill="rgb(250,195,49)" fg:x="640" fg:w="6"/><text x="22.8011%" y="303.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.04%)</title><rect x="22.7273%" y="277" width="0.0352%" height="15" fill="rgb(241,192,25)" fg:x="645" fg:w="1"/><text x="22.9773%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="22.7625%" y="357" width="0.0705%" height="15" fill="rgb(208,124,10)" fg:x="646" fg:w="2"/><text x="23.0125%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (1 samples, 0.04%)</title><rect x="22.8330%" y="357" width="0.0352%" height="15" fill="rgb(222,33,0)" fg:x="648" fg:w="1"/><text x="23.0830%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="22.8330%" y="341" width="0.0352%" height="15" fill="rgb(234,209,28)" fg:x="648" fg:w="1"/><text x="23.0830%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="22.8330%" y="325" width="0.0352%" height="15" fill="rgb(224,11,23)" fg:x="648" fg:w="1"/><text x="23.0830%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="22.8330%" y="309" width="0.0352%" height="15" fill="rgb(232,99,1)" fg:x="648" fg:w="1"/><text x="23.0830%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (1 samples, 0.04%)</title><rect x="22.8330%" y="293" width="0.0352%" height="15" fill="rgb(237,95,45)" fg:x="648" fg:w="1"/><text x="23.0830%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.07%)</title><rect x="22.8682%" y="357" width="0.0705%" height="15" fill="rgb(208,109,11)" fg:x="649" fg:w="2"/><text x="23.1182%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.07%)</title><rect x="22.8682%" y="341" width="0.0705%" height="15" fill="rgb(216,190,48)" fg:x="649" fg:w="2"/><text x="23.1182%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="22.8682%" y="325" width="0.0705%" height="15" fill="rgb(251,171,36)" fg:x="649" fg:w="2"/><text x="23.1182%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="22.9387%" y="357" width="0.0352%" height="15" fill="rgb(230,62,22)" fg:x="651" fg:w="1"/><text x="23.1887%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.07%)</title><rect x="22.9739%" y="357" width="0.0705%" height="15" fill="rgb(225,114,35)" fg:x="652" fg:w="2"/><text x="23.2239%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.07%)</title><rect x="22.9739%" y="341" width="0.0705%" height="15" fill="rgb(215,118,42)" fg:x="652" fg:w="2"/><text x="23.2239%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="22.9739%" y="325" width="0.0705%" height="15" fill="rgb(243,119,21)" fg:x="652" fg:w="2"/><text x="23.2239%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="23.0444%" y="357" width="0.1057%" height="15" fill="rgb(252,177,53)" fg:x="654" fg:w="3"/><text x="23.2944%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="23.0444%" y="341" width="0.1057%" height="15" fill="rgb(237,209,29)" fg:x="654" fg:w="3"/><text x="23.2944%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (48 samples, 1.69%)</title><rect x="21.5645%" y="453" width="1.6913%" height="15" fill="rgb(212,65,23)" fg:x="612" fg:w="48"/><text x="21.8145%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (44 samples, 1.55%)</title><rect x="21.7054%" y="437" width="1.5504%" height="15" fill="rgb(230,222,46)" fg:x="616" fg:w="44"/><text x="21.9554%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (44 samples, 1.55%)</title><rect x="21.7054%" y="421" width="1.5504%" height="15" fill="rgb(215,135,32)" fg:x="616" fg:w="44"/><text x="21.9554%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 1.48%)</title><rect x="21.7759%" y="405" width="1.4799%" height="15" fill="rgb(246,101,22)" fg:x="618" fg:w="42"/><text x="22.0259%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (39 samples, 1.37%)</title><rect x="21.8816%" y="389" width="1.3742%" height="15" fill="rgb(206,107,13)" fg:x="621" fg:w="39"/><text x="22.1316%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (14 samples, 0.49%)</title><rect x="22.7625%" y="373" width="0.4933%" height="15" fill="rgb(250,100,44)" fg:x="646" fg:w="14"/><text x="23.0125%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.11%)</title><rect x="23.1501%" y="357" width="0.1057%" height="15" fill="rgb(231,147,38)" fg:x="657" fg:w="3"/><text x="23.4001%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="23.1501%" y="341" width="0.1057%" height="15" fill="rgb(229,8,40)" fg:x="657" fg:w="3"/><text x="23.4001%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="23.1501%" y="325" width="0.1057%" height="15" fill="rgb(221,135,30)" fg:x="657" fg:w="3"/><text x="23.4001%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.04%)</title><rect x="23.2558%" y="405" width="0.0352%" height="15" fill="rgb(249,193,18)" fg:x="660" fg:w="1"/><text x="23.5058%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (1 samples, 0.04%)</title><rect x="23.2558%" y="389" width="0.0352%" height="15" fill="rgb(209,133,39)" fg:x="660" fg:w="1"/><text x="23.5058%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (1 samples, 0.04%)</title><rect x="23.2558%" y="373" width="0.0352%" height="15" fill="rgb(232,100,14)" fg:x="660" fg:w="1"/><text x="23.5058%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="23.2558%" y="357" width="0.0352%" height="15" fill="rgb(224,185,1)" fg:x="660" fg:w="1"/><text x="23.5058%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="23.2558%" y="341" width="0.0352%" height="15" fill="rgb(223,139,8)" fg:x="660" fg:w="1"/><text x="23.5058%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.04%)</title><rect x="23.2558%" y="325" width="0.0352%" height="15" fill="rgb(232,213,38)" fg:x="660" fg:w="1"/><text x="23.5058%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="23.2558%" y="309" width="0.0352%" height="15" fill="rgb(207,94,22)" fg:x="660" fg:w="1"/><text x="23.5058%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.04%)</title><rect x="23.2558%" y="293" width="0.0352%" height="15" fill="rgb(219,183,54)" fg:x="660" fg:w="1"/><text x="23.5058%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="23.2558%" y="277" width="0.0352%" height="15" fill="rgb(216,185,54)" fg:x="660" fg:w="1"/><text x="23.5058%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="23.2558%" y="261" width="0.0352%" height="15" fill="rgb(254,217,39)" fg:x="660" fg:w="1"/><text x="23.5058%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="23.2558%" y="245" width="0.0352%" height="15" fill="rgb(240,178,23)" fg:x="660" fg:w="1"/><text x="23.5058%" y="255.50"></text></g><g><title>error_entry (1 samples, 0.04%)</title><rect x="23.2558%" y="229" width="0.0352%" height="15" fill="rgb(218,11,47)" fg:x="660" fg:w="1"/><text x="23.5058%" y="239.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.04%)</title><rect x="23.2911%" y="357" width="0.0352%" height="15" fill="rgb(218,51,51)" fg:x="661" fg:w="1"/><text x="23.5411%" y="367.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="23.3263%" y="245" width="0.0352%" height="15" fill="rgb(238,126,27)" fg:x="662" fg:w="1"/><text x="23.5763%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.04%)</title><rect x="23.3263%" y="229" width="0.0352%" height="15" fill="rgb(249,202,22)" fg:x="662" fg:w="1"/><text x="23.5763%" y="239.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.04%)</title><rect x="23.3615%" y="245" width="0.0352%" height="15" fill="rgb(254,195,49)" fg:x="663" fg:w="1"/><text x="23.6115%" y="255.50"></text></g><g><title>lru_cache_add (1 samples, 0.04%)</title><rect x="23.3615%" y="229" width="0.0352%" height="15" fill="rgb(208,123,14)" fg:x="663" fg:w="1"/><text x="23.6115%" y="239.50"></text></g><g><title>folio_add_lru (1 samples, 0.04%)</title><rect x="23.3615%" y="213" width="0.0352%" height="15" fill="rgb(224,200,8)" fg:x="663" fg:w="1"/><text x="23.6115%" y="223.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.04%)</title><rect x="23.3615%" y="197" width="0.0352%" height="15" fill="rgb(217,61,36)" fg:x="663" fg:w="1"/><text x="23.6115%" y="207.50"></text></g><g><title>folio_mapping (1 samples, 0.04%)</title><rect x="23.3615%" y="181" width="0.0352%" height="15" fill="rgb(206,35,45)" fg:x="663" fg:w="1"/><text x="23.6115%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.14%)</title><rect x="23.2911%" y="389" width="0.1409%" height="15" fill="rgb(217,65,33)" fg:x="661" fg:w="4"/><text x="23.5411%" y="399.50"></text></g><g><title>core::ptr::write (4 samples, 0.14%)</title><rect x="23.2911%" y="373" width="0.1409%" height="15" fill="rgb(222,158,48)" fg:x="661" fg:w="4"/><text x="23.5411%" y="383.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="357" width="0.1057%" height="15" fill="rgb(254,2,54)" fg:x="662" fg:w="3"/><text x="23.5763%" y="367.50"></text></g><g><title>exc_page_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="341" width="0.1057%" height="15" fill="rgb(250,143,38)" fg:x="662" fg:w="3"/><text x="23.5763%" y="351.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="325" width="0.1057%" height="15" fill="rgb(248,25,0)" fg:x="662" fg:w="3"/><text x="23.5763%" y="335.50"></text></g><g><title>handle_mm_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="309" width="0.1057%" height="15" fill="rgb(206,152,27)" fg:x="662" fg:w="3"/><text x="23.5763%" y="319.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="293" width="0.1057%" height="15" fill="rgb(240,77,30)" fg:x="662" fg:w="3"/><text x="23.5763%" y="303.50"></text></g><g><title>handle_pte_fault (3 samples, 0.11%)</title><rect x="23.3263%" y="277" width="0.1057%" height="15" fill="rgb(231,5,3)" fg:x="662" fg:w="3"/><text x="23.5763%" y="287.50"></text></g><g><title>do_anonymous_page (3 samples, 0.11%)</title><rect x="23.3263%" y="261" width="0.1057%" height="15" fill="rgb(207,226,32)" fg:x="662" fg:w="3"/><text x="23.5763%" y="271.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.04%)</title><rect x="23.3968%" y="245" width="0.0352%" height="15" fill="rgb(222,207,47)" fg:x="664" fg:w="1"/><text x="23.6468%" y="255.50"></text></g><g><title>policy_nodemask (1 samples, 0.04%)</title><rect x="23.3968%" y="229" width="0.0352%" height="15" fill="rgb(229,115,45)" fg:x="664" fg:w="1"/><text x="23.6468%" y="239.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="23.6082%" y="133" width="0.1057%" height="15" fill="rgb(224,191,6)" fg:x="670" fg:w="3"/><text x="23.8582%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.32%)</title><rect x="23.4320%" y="277" width="0.3171%" height="15" fill="rgb(230,227,24)" fg:x="665" fg:w="9"/><text x="23.6820%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.32%)</title><rect x="23.4320%" y="261" width="0.3171%" height="15" fill="rgb(228,80,19)" fg:x="665" fg:w="9"/><text x="23.6820%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.32%)</title><rect x="23.4320%" y="245" width="0.3171%" height="15" fill="rgb(247,229,0)" fg:x="665" fg:w="9"/><text x="23.6820%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.32%)</title><rect x="23.4320%" y="229" width="0.3171%" height="15" fill="rgb(237,194,15)" fg:x="665" fg:w="9"/><text x="23.6820%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.32%)</title><rect x="23.4320%" y="213" width="0.3171%" height="15" fill="rgb(219,203,20)" fg:x="665" fg:w="9"/><text x="23.6820%" y="223.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.32%)</title><rect x="23.4320%" y="197" width="0.3171%" height="15" fill="rgb(234,128,8)" fg:x="665" fg:w="9"/><text x="23.6820%" y="207.50"></text></g><g><title>__rdl_alloc (9 samples, 0.32%)</title><rect x="23.4320%" y="181" width="0.3171%" height="15" fill="rgb(248,202,8)" fg:x="665" fg:w="9"/><text x="23.6820%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.32%)</title><rect x="23.4320%" y="165" width="0.3171%" height="15" fill="rgb(206,104,37)" fg:x="665" fg:w="9"/><text x="23.6820%" y="175.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.32%)</title><rect x="23.4320%" y="149" width="0.3171%" height="15" fill="rgb(223,8,27)" fg:x="665" fg:w="9"/><text x="23.6820%" y="159.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="23.7139%" y="133" width="0.0352%" height="15" fill="rgb(216,217,28)" fg:x="673" fg:w="1"/><text x="23.9639%" y="143.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (15 samples, 0.53%)</title><rect x="23.2558%" y="453" width="0.5285%" height="15" fill="rgb(249,199,1)" fg:x="660" fg:w="15"/><text x="23.5058%" y="463.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (15 samples, 0.53%)</title><rect x="23.2558%" y="437" width="0.5285%" height="15" fill="rgb(240,85,17)" fg:x="660" fg:w="15"/><text x="23.5058%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (15 samples, 0.53%)</title><rect x="23.2558%" y="421" width="0.5285%" height="15" fill="rgb(206,108,45)" fg:x="660" fg:w="15"/><text x="23.5058%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (14 samples, 0.49%)</title><rect x="23.2911%" y="405" width="0.4933%" height="15" fill="rgb(245,210,41)" fg:x="661" fg:w="14"/><text x="23.5411%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (10 samples, 0.35%)</title><rect x="23.4320%" y="389" width="0.3524%" height="15" fill="rgb(206,13,37)" fg:x="665" fg:w="10"/><text x="23.6820%" y="399.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (10 samples, 0.35%)</title><rect x="23.4320%" y="373" width="0.3524%" height="15" fill="rgb(250,61,18)" fg:x="665" fg:w="10"/><text x="23.6820%" y="383.50"></text></g><g><title>project1::solver::clause::Clause::with_key (10 samples, 0.35%)</title><rect x="23.4320%" y="357" width="0.3524%" height="15" fill="rgb(235,172,48)" fg:x="665" fg:w="10"/><text x="23.6820%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.35%)</title><rect x="23.4320%" y="341" width="0.3524%" height="15" fill="rgb(249,201,17)" fg:x="665" fg:w="10"/><text x="23.6820%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.35%)</title><rect x="23.4320%" y="325" width="0.3524%" height="15" fill="rgb(219,208,6)" fg:x="665" fg:w="10"/><text x="23.6820%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.35%)</title><rect x="23.4320%" y="309" width="0.3524%" height="15" fill="rgb(248,31,23)" fg:x="665" fg:w="10"/><text x="23.6820%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.35%)</title><rect x="23.4320%" y="293" width="0.3524%" height="15" fill="rgb(245,15,42)" fg:x="665" fg:w="10"/><text x="23.6820%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="23.7491%" y="277" width="0.0352%" height="15" fill="rgb(222,217,39)" fg:x="674" fg:w="1"/><text x="23.9991%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="23.7491%" y="261" width="0.0352%" height="15" fill="rgb(210,219,27)" fg:x="674" fg:w="1"/><text x="23.9991%" y="271.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="23.7491%" y="245" width="0.0352%" height="15" fill="rgb(252,166,36)" fg:x="674" fg:w="1"/><text x="23.9991%" y="255.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.04%)</title><rect x="23.8548%" y="437" width="0.0352%" height="15" fill="rgb(245,132,34)" fg:x="677" fg:w="1"/><text x="24.1048%" y="447.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="23.8548%" y="421" width="0.0352%" height="15" fill="rgb(236,54,3)" fg:x="677" fg:w="1"/><text x="24.1048%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="23.8901%" y="341" width="0.0352%" height="15" fill="rgb(241,173,43)" fg:x="678" fg:w="1"/><text x="24.1401%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="23.8901%" y="325" width="0.0352%" height="15" fill="rgb(215,190,9)" fg:x="678" fg:w="1"/><text x="24.1401%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="23.8901%" y="309" width="0.0352%" height="15" fill="rgb(242,101,16)" fg:x="678" fg:w="1"/><text x="24.1401%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.04%)</title><rect x="23.8901%" y="293" width="0.0352%" height="15" fill="rgb(223,190,21)" fg:x="678" fg:w="1"/><text x="24.1401%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.04%)</title><rect x="23.8901%" y="277" width="0.0352%" height="15" fill="rgb(215,228,25)" fg:x="678" fg:w="1"/><text x="24.1401%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.04%)</title><rect x="23.8901%" y="261" width="0.0352%" height="15" fill="rgb(225,36,22)" fg:x="678" fg:w="1"/><text x="24.1401%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="23.8901%" y="245" width="0.0352%" height="15" fill="rgb(251,106,46)" fg:x="678" fg:w="1"/><text x="24.1401%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="23.8901%" y="229" width="0.0352%" height="15" fill="rgb(208,90,1)" fg:x="678" fg:w="1"/><text x="24.1401%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="23.8901%" y="213" width="0.0352%" height="15" fill="rgb(243,10,4)" fg:x="678" fg:w="1"/><text x="24.1401%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="23.8901%" y="197" width="0.0352%" height="15" fill="rgb(212,137,27)" fg:x="678" fg:w="1"/><text x="24.1401%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="23.8901%" y="181" width="0.0352%" height="15" fill="rgb(231,220,49)" fg:x="678" fg:w="1"/><text x="24.1401%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="23.9253%" y="293" width="0.0352%" height="15" fill="rgb(237,96,20)" fg:x="679" fg:w="1"/><text x="24.1753%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.07%)</title><rect x="23.9253%" y="325" width="0.0705%" height="15" fill="rgb(239,229,30)" fg:x="679" fg:w="2"/><text x="24.1753%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.07%)</title><rect x="23.9253%" y="309" width="0.0705%" height="15" fill="rgb(219,65,33)" fg:x="679" fg:w="2"/><text x="24.1753%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="23.9605%" y="293" width="0.0352%" height="15" fill="rgb(243,134,7)" fg:x="680" fg:w="1"/><text x="24.2105%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="23.9605%" y="277" width="0.0352%" height="15" fill="rgb(216,177,54)" fg:x="680" fg:w="1"/><text x="24.2105%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (2 samples, 0.07%)</title><rect x="23.9958%" y="293" width="0.0705%" height="15" fill="rgb(211,160,20)" fg:x="681" fg:w="2"/><text x="24.2458%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.07%)</title><rect x="23.9958%" y="277" width="0.0705%" height="15" fill="rgb(239,85,39)" fg:x="681" fg:w="2"/><text x="24.2458%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="23.9958%" y="261" width="0.0705%" height="15" fill="rgb(232,125,22)" fg:x="681" fg:w="2"/><text x="24.2458%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="23.9958%" y="245" width="0.0705%" height="15" fill="rgb(244,57,34)" fg:x="681" fg:w="2"/><text x="24.2458%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6 samples, 0.21%)</title><rect x="23.8901%" y="421" width="0.2114%" height="15" fill="rgb(214,203,32)" fg:x="678" fg:w="6"/><text x="24.1401%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (6 samples, 0.21%)</title><rect x="23.8901%" y="405" width="0.2114%" height="15" fill="rgb(207,58,43)" fg:x="678" fg:w="6"/><text x="24.1401%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.21%)</title><rect x="23.8901%" y="389" width="0.2114%" height="15" fill="rgb(215,193,15)" fg:x="678" fg:w="6"/><text x="24.1401%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (6 samples, 0.21%)</title><rect x="23.8901%" y="373" width="0.2114%" height="15" fill="rgb(232,15,44)" fg:x="678" fg:w="6"/><text x="24.1401%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (6 samples, 0.21%)</title><rect x="23.8901%" y="357" width="0.2114%" height="15" fill="rgb(212,3,48)" fg:x="678" fg:w="6"/><text x="24.1401%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (5 samples, 0.18%)</title><rect x="23.9253%" y="341" width="0.1762%" height="15" fill="rgb(218,128,7)" fg:x="679" fg:w="5"/><text x="24.1753%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (3 samples, 0.11%)</title><rect x="23.9958%" y="325" width="0.1057%" height="15" fill="rgb(226,216,39)" fg:x="681" fg:w="3"/><text x="24.2458%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (3 samples, 0.11%)</title><rect x="23.9958%" y="309" width="0.1057%" height="15" fill="rgb(243,47,51)" fg:x="681" fg:w="3"/><text x="24.2458%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.04%)</title><rect x="24.0662%" y="293" width="0.0352%" height="15" fill="rgb(241,183,40)" fg:x="683" fg:w="1"/><text x="24.3162%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.04%)</title><rect x="24.1015%" y="389" width="0.0352%" height="15" fill="rgb(231,217,32)" fg:x="684" fg:w="1"/><text x="24.3515%" y="399.50"></text></g><g><title>core::mem::drop (1 samples, 0.04%)</title><rect x="24.1367%" y="373" width="0.0352%" height="15" fill="rgb(229,61,38)" fg:x="685" fg:w="1"/><text x="24.3867%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="24.1367%" y="357" width="0.0352%" height="15" fill="rgb(225,210,5)" fg:x="685" fg:w="1"/><text x="24.3867%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="24.1367%" y="341" width="0.0352%" height="15" fill="rgb(231,79,45)" fg:x="685" fg:w="1"/><text x="24.3867%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.04%)</title><rect x="24.1367%" y="325" width="0.0352%" height="15" fill="rgb(224,100,7)" fg:x="685" fg:w="1"/><text x="24.3867%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="24.1367%" y="309" width="0.0352%" height="15" fill="rgb(241,198,18)" fg:x="685" fg:w="1"/><text x="24.3867%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.04%)</title><rect x="24.1367%" y="293" width="0.0352%" height="15" fill="rgb(252,97,53)" fg:x="685" fg:w="1"/><text x="24.3867%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="24.1367%" y="277" width="0.0352%" height="15" fill="rgb(220,88,7)" fg:x="685" fg:w="1"/><text x="24.3867%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="24.1367%" y="261" width="0.0352%" height="15" fill="rgb(213,176,14)" fg:x="685" fg:w="1"/><text x="24.3867%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="24.1367%" y="245" width="0.0352%" height="15" fill="rgb(246,73,7)" fg:x="685" fg:w="1"/><text x="24.3867%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="24.1367%" y="229" width="0.0352%" height="15" fill="rgb(245,64,36)" fg:x="685" fg:w="1"/><text x="24.3867%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="24.1367%" y="213" width="0.0352%" height="15" fill="rgb(245,80,10)" fg:x="685" fg:w="1"/><text x="24.3867%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="24.1367%" y="197" width="0.0352%" height="15" fill="rgb(232,107,50)" fg:x="685" fg:w="1"/><text x="24.3867%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="24.1367%" y="181" width="0.0352%" height="15" fill="rgb(253,3,0)" fg:x="685" fg:w="1"/><text x="24.3867%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.04%)</title><rect x="24.1367%" y="165" width="0.0352%" height="15" fill="rgb(212,99,53)" fg:x="685" fg:w="1"/><text x="24.3867%" y="175.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.04%)</title><rect x="24.1720%" y="373" width="0.0352%" height="15" fill="rgb(249,111,54)" fg:x="686" fg:w="1"/><text x="24.4220%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="24.2072%" y="325" width="0.2114%" height="15" fill="rgb(249,55,30)" fg:x="687" fg:w="6"/><text x="24.4572%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="24.4186%" y="245" width="0.0705%" height="15" fill="rgb(237,47,42)" fg:x="693" fg:w="2"/><text x="24.6686%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="24.4186%" y="229" width="0.0705%" height="15" fill="rgb(211,20,18)" fg:x="693" fg:w="2"/><text x="24.6686%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="24.4186%" y="213" width="0.0705%" height="15" fill="rgb(231,203,46)" fg:x="693" fg:w="2"/><text x="24.6686%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.07%)</title><rect x="24.4186%" y="197" width="0.0705%" height="15" fill="rgb(237,142,3)" fg:x="693" fg:w="2"/><text x="24.6686%" y="207.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (9 samples, 0.32%)</title><rect x="24.2072%" y="373" width="0.3171%" height="15" fill="rgb(241,107,1)" fg:x="687" fg:w="9"/><text x="24.4572%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (9 samples, 0.32%)</title><rect x="24.2072%" y="357" width="0.3171%" height="15" fill="rgb(229,83,13)" fg:x="687" fg:w="9"/><text x="24.4572%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.32%)</title><rect x="24.2072%" y="341" width="0.3171%" height="15" fill="rgb(241,91,40)" fg:x="687" fg:w="9"/><text x="24.4572%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.11%)</title><rect x="24.4186%" y="325" width="0.1057%" height="15" fill="rgb(225,3,45)" fg:x="693" fg:w="3"/><text x="24.6686%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.11%)</title><rect x="24.4186%" y="309" width="0.1057%" height="15" fill="rgb(244,223,14)" fg:x="693" fg:w="3"/><text x="24.6686%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.11%)</title><rect x="24.4186%" y="293" width="0.1057%" height="15" fill="rgb(224,124,37)" fg:x="693" fg:w="3"/><text x="24.6686%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="24.4186%" y="277" width="0.1057%" height="15" fill="rgb(251,171,30)" fg:x="693" fg:w="3"/><text x="24.6686%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="24.4186%" y="261" width="0.1057%" height="15" fill="rgb(236,46,54)" fg:x="693" fg:w="3"/><text x="24.6686%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="24.4891%" y="245" width="0.0352%" height="15" fill="rgb(245,213,5)" fg:x="695" fg:w="1"/><text x="24.7391%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="24.5243%" y="229" width="0.1409%" height="15" fill="rgb(230,144,27)" fg:x="696" fg:w="4"/><text x="24.7743%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="24.5595%" y="213" width="0.1057%" height="15" fill="rgb(220,86,6)" fg:x="697" fg:w="3"/><text x="24.8095%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="24.7005%" y="213" width="0.1057%" height="15" fill="rgb(240,20,13)" fg:x="701" fg:w="3"/><text x="24.9505%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="24.5243%" y="277" width="0.3171%" height="15" fill="rgb(217,89,34)" fg:x="696" fg:w="9"/><text x="24.7743%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="24.5243%" y="261" width="0.3171%" height="15" fill="rgb(229,13,5)" fg:x="696" fg:w="9"/><text x="24.7743%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="24.5243%" y="245" width="0.3171%" height="15" fill="rgb(244,67,35)" fg:x="696" fg:w="9"/><text x="24.7743%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.18%)</title><rect x="24.6653%" y="229" width="0.1762%" height="15" fill="rgb(221,40,2)" fg:x="700" fg:w="5"/><text x="24.9153%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="24.8062%" y="213" width="0.0352%" height="15" fill="rgb(237,157,21)" fg:x="704" fg:w="1"/><text x="25.0562%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.42%)</title><rect x="24.5243%" y="309" width="0.4228%" height="15" fill="rgb(222,94,11)" fg:x="696" fg:w="12"/><text x="24.7743%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.42%)</title><rect x="24.5243%" y="293" width="0.4228%" height="15" fill="rgb(249,113,6)" fg:x="696" fg:w="12"/><text x="24.7743%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.11%)</title><rect x="24.8414%" y="277" width="0.1057%" height="15" fill="rgb(238,137,36)" fg:x="705" fg:w="3"/><text x="25.0914%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.11%)</title><rect x="24.8414%" y="261" width="0.1057%" height="15" fill="rgb(210,102,26)" fg:x="705" fg:w="3"/><text x="25.0914%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.07%)</title><rect x="24.8767%" y="245" width="0.0705%" height="15" fill="rgb(218,30,30)" fg:x="706" fg:w="2"/><text x="25.1267%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.07%)</title><rect x="24.8767%" y="229" width="0.0705%" height="15" fill="rgb(214,67,26)" fg:x="706" fg:w="2"/><text x="25.1267%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="24.8767%" y="213" width="0.0705%" height="15" fill="rgb(251,9,53)" fg:x="706" fg:w="2"/><text x="25.1267%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="24.8767%" y="197" width="0.0705%" height="15" fill="rgb(228,204,25)" fg:x="706" fg:w="2"/><text x="25.1267%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="24.8767%" y="181" width="0.0705%" height="15" fill="rgb(207,153,8)" fg:x="706" fg:w="2"/><text x="25.1267%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="24.8767%" y="165" width="0.0705%" height="15" fill="rgb(242,9,16)" fg:x="706" fg:w="2"/><text x="25.1267%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="24.8767%" y="149" width="0.0705%" height="15" fill="rgb(217,211,10)" fg:x="706" fg:w="2"/><text x="25.1267%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="24.9471%" y="261" width="0.0352%" height="15" fill="rgb(219,228,52)" fg:x="708" fg:w="1"/><text x="25.1971%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="24.9471%" y="245" width="0.0352%" height="15" fill="rgb(231,92,29)" fg:x="708" fg:w="1"/><text x="25.1971%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="24.9471%" y="229" width="0.0352%" height="15" fill="rgb(232,8,23)" fg:x="708" fg:w="1"/><text x="25.1971%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="24.9471%" y="213" width="0.0352%" height="15" fill="rgb(216,211,34)" fg:x="708" fg:w="1"/><text x="25.1971%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.04%)</title><rect x="24.9471%" y="197" width="0.0352%" height="15" fill="rgb(236,151,0)" fg:x="708" fg:w="1"/><text x="25.1971%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.07%)</title><rect x="24.9824%" y="261" width="0.0705%" height="15" fill="rgb(209,168,3)" fg:x="709" fg:w="2"/><text x="25.2324%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="25.0529%" y="261" width="0.0705%" height="15" fill="rgb(208,129,28)" fg:x="711" fg:w="2"/><text x="25.3029%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="25.0529%" y="245" width="0.0705%" height="15" fill="rgb(229,78,22)" fg:x="711" fg:w="2"/><text x="25.3029%" y="255.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (39 samples, 1.37%)</title><rect x="23.7844%" y="453" width="1.3742%" height="15" fill="rgb(228,187,13)" fg:x="675" fg:w="39"/><text x="24.0344%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (36 samples, 1.27%)</title><rect x="23.8901%" y="437" width="1.2685%" height="15" fill="rgb(240,119,24)" fg:x="678" fg:w="36"/><text x="24.1401%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (30 samples, 1.06%)</title><rect x="24.1015%" y="421" width="1.0571%" height="15" fill="rgb(209,194,42)" fg:x="684" fg:w="30"/><text x="24.3515%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (30 samples, 1.06%)</title><rect x="24.1015%" y="405" width="1.0571%" height="15" fill="rgb(247,200,46)" fg:x="684" fg:w="30"/><text x="24.3515%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (29 samples, 1.02%)</title><rect x="24.1367%" y="389" width="1.0218%" height="15" fill="rgb(218,76,16)" fg:x="685" fg:w="29"/><text x="24.3867%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (18 samples, 0.63%)</title><rect x="24.5243%" y="373" width="0.6342%" height="15" fill="rgb(225,21,48)" fg:x="696" fg:w="18"/><text x="24.7743%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (18 samples, 0.63%)</title><rect x="24.5243%" y="357" width="0.6342%" height="15" fill="rgb(239,223,50)" fg:x="696" fg:w="18"/><text x="24.7743%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (18 samples, 0.63%)</title><rect x="24.5243%" y="341" width="0.6342%" height="15" fill="rgb(244,45,21)" fg:x="696" fg:w="18"/><text x="24.7743%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (18 samples, 0.63%)</title><rect x="24.5243%" y="325" width="0.6342%" height="15" fill="rgb(232,33,43)" fg:x="696" fg:w="18"/><text x="24.7743%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (6 samples, 0.21%)</title><rect x="24.9471%" y="309" width="0.2114%" height="15" fill="rgb(209,8,3)" fg:x="708" fg:w="6"/><text x="25.1971%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.21%)</title><rect x="24.9471%" y="293" width="0.2114%" height="15" fill="rgb(214,25,53)" fg:x="708" fg:w="6"/><text x="25.1971%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.21%)</title><rect x="24.9471%" y="277" width="0.2114%" height="15" fill="rgb(254,186,54)" fg:x="708" fg:w="6"/><text x="25.1971%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.04%)</title><rect x="25.1233%" y="261" width="0.0352%" height="15" fill="rgb(208,174,49)" fg:x="713" fg:w="1"/><text x="25.3733%" y="271.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="25.1586%" y="85" width="0.0352%" height="15" fill="rgb(233,191,51)" fg:x="714" fg:w="1"/><text x="25.4086%" y="95.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.04%)</title><rect x="25.1586%" y="69" width="0.0352%" height="15" fill="rgb(222,134,10)" fg:x="714" fg:w="1"/><text x="25.4086%" y="79.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.04%)</title><rect x="25.1586%" y="53" width="0.0352%" height="15" fill="rgb(230,226,20)" fg:x="714" fg:w="1"/><text x="25.4086%" y="63.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="197" width="0.0705%" height="15" fill="rgb(251,111,25)" fg:x="714" fg:w="2"/><text x="25.4086%" y="207.50"></text></g><g><title>exc_page_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="181" width="0.0705%" height="15" fill="rgb(224,40,46)" fg:x="714" fg:w="2"/><text x="25.4086%" y="191.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="165" width="0.0705%" height="15" fill="rgb(236,108,47)" fg:x="714" fg:w="2"/><text x="25.4086%" y="175.50"></text></g><g><title>handle_mm_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="149" width="0.0705%" height="15" fill="rgb(234,93,0)" fg:x="714" fg:w="2"/><text x="25.4086%" y="159.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="133" width="0.0705%" height="15" fill="rgb(224,213,32)" fg:x="714" fg:w="2"/><text x="25.4086%" y="143.50"></text></g><g><title>handle_pte_fault (2 samples, 0.07%)</title><rect x="25.1586%" y="117" width="0.0705%" height="15" fill="rgb(251,11,48)" fg:x="714" fg:w="2"/><text x="25.4086%" y="127.50"></text></g><g><title>do_anonymous_page (2 samples, 0.07%)</title><rect x="25.1586%" y="101" width="0.0705%" height="15" fill="rgb(236,173,5)" fg:x="714" fg:w="2"/><text x="25.4086%" y="111.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.04%)</title><rect x="25.1938%" y="85" width="0.0352%" height="15" fill="rgb(230,95,12)" fg:x="715" fg:w="1"/><text x="25.4438%" y="95.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="25.1586%" y="245" width="0.1057%" height="15" fill="rgb(232,209,1)" fg:x="714" fg:w="3"/><text x="25.4086%" y="255.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="25.1586%" y="229" width="0.1057%" height="15" fill="rgb(232,6,1)" fg:x="714" fg:w="3"/><text x="25.4086%" y="239.50"></text></g><g><title>sysmalloc (3 samples, 0.11%)</title><rect x="25.1586%" y="213" width="0.1057%" height="15" fill="rgb(210,224,50)" fg:x="714" fg:w="3"/><text x="25.4086%" y="223.50"></text></g><g><title>grow_heap (1 samples, 0.04%)</title><rect x="25.2290%" y="197" width="0.0352%" height="15" fill="rgb(228,127,35)" fg:x="716" fg:w="1"/><text x="25.4790%" y="207.50"></text></g><g><title>__GI___mprotect (1 samples, 0.04%)</title><rect x="25.2290%" y="181" width="0.0352%" height="15" fill="rgb(245,102,45)" fg:x="716" fg:w="1"/><text x="25.4790%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="25.2290%" y="165" width="0.0352%" height="15" fill="rgb(214,1,49)" fg:x="716" fg:w="1"/><text x="25.4790%" y="175.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="25.2290%" y="149" width="0.0352%" height="15" fill="rgb(226,163,40)" fg:x="716" fg:w="1"/><text x="25.4790%" y="159.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.04%)</title><rect x="25.2290%" y="133" width="0.0352%" height="15" fill="rgb(239,212,28)" fg:x="716" fg:w="1"/><text x="25.4790%" y="143.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.04%)</title><rect x="25.2290%" y="117" width="0.0352%" height="15" fill="rgb(220,20,13)" fg:x="716" fg:w="1"/><text x="25.4790%" y="127.50"></text></g><g><title>mprotect_fixup (1 samples, 0.04%)</title><rect x="25.2290%" y="101" width="0.0352%" height="15" fill="rgb(210,164,35)" fg:x="716" fg:w="1"/><text x="25.4790%" y="111.50"></text></g><g><title>perf_event_mmap (1 samples, 0.04%)</title><rect x="25.2290%" y="85" width="0.0352%" height="15" fill="rgb(248,109,41)" fg:x="716" fg:w="1"/><text x="25.4790%" y="95.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.04%)</title><rect x="25.2290%" y="69" width="0.0352%" height="15" fill="rgb(238,23,50)" fg:x="716" fg:w="1"/><text x="25.4790%" y="79.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.04%)</title><rect x="25.2290%" y="53" width="0.0352%" height="15" fill="rgb(211,48,49)" fg:x="716" fg:w="1"/><text x="25.4790%" y="63.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.04%)</title><rect x="25.2290%" y="37" width="0.0352%" height="15" fill="rgb(223,36,21)" fg:x="716" fg:w="1"/><text x="25.4790%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.14%)</title><rect x="25.1586%" y="373" width="0.1409%" height="15" fill="rgb(207,123,46)" fg:x="714" fg:w="4"/><text x="25.4086%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.14%)</title><rect x="25.1586%" y="357" width="0.1409%" height="15" fill="rgb(240,218,32)" fg:x="714" fg:w="4"/><text x="25.4086%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.14%)</title><rect x="25.1586%" y="341" width="0.1409%" height="15" fill="rgb(252,5,43)" fg:x="714" fg:w="4"/><text x="25.4086%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.14%)</title><rect x="25.1586%" y="325" width="0.1409%" height="15" fill="rgb(252,84,19)" fg:x="714" fg:w="4"/><text x="25.4086%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.14%)</title><rect x="25.1586%" y="309" width="0.1409%" height="15" fill="rgb(243,152,39)" fg:x="714" fg:w="4"/><text x="25.4086%" y="319.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="25.1586%" y="293" width="0.1409%" height="15" fill="rgb(234,160,15)" fg:x="714" fg:w="4"/><text x="25.4086%" y="303.50"></text></g><g><title>__rdl_alloc (4 samples, 0.14%)</title><rect x="25.1586%" y="277" width="0.1409%" height="15" fill="rgb(237,34,20)" fg:x="714" fg:w="4"/><text x="25.4086%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.14%)</title><rect x="25.1586%" y="261" width="0.1409%" height="15" fill="rgb(229,97,13)" fg:x="714" fg:w="4"/><text x="25.4086%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.04%)</title><rect x="25.2643%" y="245" width="0.0352%" height="15" fill="rgb(234,71,50)" fg:x="717" fg:w="1"/><text x="25.5143%" y="255.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (1 samples, 0.04%)</title><rect x="25.2643%" y="229" width="0.0352%" height="15" fill="rgb(253,155,4)" fg:x="717" fg:w="1"/><text x="25.5143%" y="239.50"></text></g><g><title>__entry_text_start (1 samples, 0.04%)</title><rect x="25.2643%" y="213" width="0.0352%" height="15" fill="rgb(222,185,37)" fg:x="717" fg:w="1"/><text x="25.5143%" y="223.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="325" width="0.0705%" height="15" fill="rgb(251,177,13)" fg:x="718" fg:w="2"/><text x="25.5495%" y="335.50"></text></g><g><title>exc_page_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="309" width="0.0705%" height="15" fill="rgb(250,179,40)" fg:x="718" fg:w="2"/><text x="25.5495%" y="319.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="293" width="0.0705%" height="15" fill="rgb(242,44,2)" fg:x="718" fg:w="2"/><text x="25.5495%" y="303.50"></text></g><g><title>handle_mm_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="277" width="0.0705%" height="15" fill="rgb(216,177,13)" fg:x="718" fg:w="2"/><text x="25.5495%" y="287.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="261" width="0.0705%" height="15" fill="rgb(216,106,43)" fg:x="718" fg:w="2"/><text x="25.5495%" y="271.50"></text></g><g><title>handle_pte_fault (2 samples, 0.07%)</title><rect x="25.2995%" y="245" width="0.0705%" height="15" fill="rgb(216,183,2)" fg:x="718" fg:w="2"/><text x="25.5495%" y="255.50"></text></g><g><title>do_anonymous_page (2 samples, 0.07%)</title><rect x="25.2995%" y="229" width="0.0705%" height="15" fill="rgb(249,75,3)" fg:x="718" fg:w="2"/><text x="25.5495%" y="239.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="25.3347%" y="213" width="0.0352%" height="15" fill="rgb(219,67,39)" fg:x="719" fg:w="1"/><text x="25.5847%" y="223.50"></text></g><g><title>charge_memcg (1 samples, 0.04%)</title><rect x="25.3347%" y="197" width="0.0352%" height="15" fill="rgb(253,228,2)" fg:x="719" fg:w="1"/><text x="25.5847%" y="207.50"></text></g><g><title>try_charge_memcg (1 samples, 0.04%)</title><rect x="25.3347%" y="181" width="0.0352%" height="15" fill="rgb(235,138,27)" fg:x="719" fg:w="1"/><text x="25.5847%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.25%)</title><rect x="25.1586%" y="437" width="0.2467%" height="15" fill="rgb(236,97,51)" fg:x="714" fg:w="7"/><text x="25.4086%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.25%)</title><rect x="25.1586%" y="421" width="0.2467%" height="15" fill="rgb(240,80,30)" fg:x="714" fg:w="7"/><text x="25.4086%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.25%)</title><rect x="25.1586%" y="405" width="0.2467%" height="15" fill="rgb(230,178,19)" fg:x="714" fg:w="7"/><text x="25.4086%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.25%)</title><rect x="25.1586%" y="389" width="0.2467%" height="15" fill="rgb(210,190,27)" fg:x="714" fg:w="7"/><text x="25.4086%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.11%)</title><rect x="25.2995%" y="373" width="0.1057%" height="15" fill="rgb(222,107,31)" fg:x="718" fg:w="3"/><text x="25.5495%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="25.2995%" y="357" width="0.1057%" height="15" fill="rgb(216,127,34)" fg:x="718" fg:w="3"/><text x="25.5495%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (3 samples, 0.11%)</title><rect x="25.2995%" y="341" width="0.1057%" height="15" fill="rgb(234,116,52)" fg:x="718" fg:w="3"/><text x="25.5495%" y="351.50"></text></g><g><title>error_entry (1 samples, 0.04%)</title><rect x="25.3700%" y="325" width="0.0352%" height="15" fill="rgb(222,124,15)" fg:x="720" fg:w="1"/><text x="25.6200%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.04%)</title><rect x="25.4757%" y="373" width="0.0352%" height="15" fill="rgb(231,179,28)" fg:x="723" fg:w="1"/><text x="25.7257%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (1 samples, 0.04%)</title><rect x="25.4757%" y="357" width="0.0352%" height="15" fill="rgb(226,93,45)" fg:x="723" fg:w="1"/><text x="25.7257%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.14%)</title><rect x="25.4052%" y="437" width="0.1409%" height="15" fill="rgb(215,8,51)" fg:x="721" fg:w="4"/><text x="25.6552%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (4 samples, 0.14%)</title><rect x="25.4052%" y="421" width="0.1409%" height="15" fill="rgb(223,106,5)" fg:x="721" fg:w="4"/><text x="25.6552%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="25.4757%" y="405" width="0.0705%" height="15" fill="rgb(250,191,5)" fg:x="723" fg:w="2"/><text x="25.7257%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (2 samples, 0.07%)</title><rect x="25.4757%" y="389" width="0.0705%" height="15" fill="rgb(242,132,44)" fg:x="723" fg:w="2"/><text x="25.7257%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.04%)</title><rect x="25.5109%" y="373" width="0.0352%" height="15" fill="rgb(251,152,29)" fg:x="724" fg:w="1"/><text x="25.7609%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.04%)</title><rect x="25.5109%" y="357" width="0.0352%" height="15" fill="rgb(218,179,5)" fg:x="724" fg:w="1"/><text x="25.7609%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="25.6166%" y="389" width="0.0352%" height="15" fill="rgb(227,67,19)" fg:x="727" fg:w="1"/><text x="25.8666%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="25.6166%" y="373" width="0.0352%" height="15" fill="rgb(233,119,31)" fg:x="727" fg:w="1"/><text x="25.8666%" y="383.50"></text></g><g><title>core::slice::sort::find_streak (3 samples, 0.11%)</title><rect x="25.6519%" y="389" width="0.1057%" height="15" fill="rgb(241,120,22)" fg:x="728" fg:w="3"/><text x="25.9019%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (2 samples, 0.07%)</title><rect x="25.6871%" y="373" width="0.0705%" height="15" fill="rgb(224,102,30)" fg:x="729" fg:w="2"/><text x="25.9371%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (2 samples, 0.07%)</title><rect x="25.6871%" y="357" width="0.0705%" height="15" fill="rgb(210,164,37)" fg:x="729" fg:w="2"/><text x="25.9371%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.04%)</title><rect x="25.7223%" y="341" width="0.0352%" height="15" fill="rgb(226,191,16)" fg:x="730" fg:w="1"/><text x="25.9723%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.04%)</title><rect x="25.7223%" y="325" width="0.0352%" height="15" fill="rgb(214,40,45)" fg:x="730" fg:w="1"/><text x="25.9723%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.04%)</title><rect x="25.7223%" y="309" width="0.0352%" height="15" fill="rgb(244,29,26)" fg:x="730" fg:w="1"/><text x="25.9723%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1 samples, 0.04%)</title><rect x="25.7223%" y="293" width="0.0352%" height="15" fill="rgb(216,16,5)" fg:x="730" fg:w="1"/><text x="25.9723%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="26.3918%" y="309" width="0.0705%" height="15" fill="rgb(249,76,35)" fg:x="749" fg:w="2"/><text x="26.6418%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (25 samples, 0.88%)</title><rect x="26.4623%" y="309" width="0.8809%" height="15" fill="rgb(207,11,44)" fg:x="751" fg:w="25"/><text x="26.7123%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (25 samples, 0.88%)</title><rect x="26.4623%" y="293" width="0.8809%" height="15" fill="rgb(228,190,49)" fg:x="751" fg:w="25"/><text x="26.7123%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (32 samples, 1.13%)</title><rect x="26.3918%" y="341" width="1.1276%" height="15" fill="rgb(214,173,12)" fg:x="749" fg:w="32"/><text x="26.6418%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (32 samples, 1.13%)</title><rect x="26.3918%" y="325" width="1.1276%" height="15" fill="rgb(218,26,35)" fg:x="749" fg:w="32"/><text x="26.6418%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.18%)</title><rect x="27.3432%" y="309" width="0.1762%" height="15" fill="rgb(220,200,19)" fg:x="776" fg:w="5"/><text x="27.5932%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.18%)</title><rect x="27.3432%" y="293" width="0.1762%" height="15" fill="rgb(239,95,49)" fg:x="776" fg:w="5"/><text x="27.5932%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="27.5194%" y="341" width="0.0352%" height="15" fill="rgb(235,85,53)" fg:x="781" fg:w="1"/><text x="27.7694%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (47 samples, 1.66%)</title><rect x="25.9690%" y="373" width="1.6561%" height="15" fill="rgb(233,133,31)" fg:x="737" fg:w="47"/><text x="26.2190%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (47 samples, 1.66%)</title><rect x="25.9690%" y="357" width="1.6561%" height="15" fill="rgb(218,25,20)" fg:x="737" fg:w="47"/><text x="26.2190%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.07%)</title><rect x="27.5546%" y="341" width="0.0705%" height="15" fill="rgb(252,210,38)" fg:x="782" fg:w="2"/><text x="27.8046%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.35%)</title><rect x="27.6251%" y="373" width="0.3524%" height="15" fill="rgb(242,134,21)" fg:x="784" fg:w="10"/><text x="27.8751%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4 samples, 0.14%)</title><rect x="27.8365%" y="357" width="0.1409%" height="15" fill="rgb(213,28,48)" fg:x="790" fg:w="4"/><text x="28.0865%" y="367.50"></text></g><g><title>core::slice::sort::merge (66 samples, 2.33%)</title><rect x="25.7576%" y="389" width="2.3256%" height="15" fill="rgb(250,196,2)" fg:x="731" fg:w="66"/><text x="26.0076%" y="399.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.11%)</title><rect x="27.9774%" y="373" width="0.1057%" height="15" fill="rgb(227,5,17)" fg:x="794" fg:w="3"/><text x="28.2274%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.0479%" y="357" width="0.0352%" height="15" fill="rgb(221,226,24)" fg:x="796" fg:w="1"/><text x="28.2979%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.0479%" y="341" width="0.0352%" height="15" fill="rgb(211,5,48)" fg:x="796" fg:w="1"/><text x="28.2979%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.0479%" y="325" width="0.0352%" height="15" fill="rgb(219,150,6)" fg:x="796" fg:w="1"/><text x="28.2979%" y="335.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="28.0479%" y="309" width="0.0352%" height="15" fill="rgb(251,46,16)" fg:x="796" fg:w="1"/><text x="28.2979%" y="319.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="28.0479%" y="293" width="0.0352%" height="15" fill="rgb(220,204,40)" fg:x="796" fg:w="1"/><text x="28.2979%" y="303.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="28.0479%" y="277" width="0.0352%" height="15" fill="rgb(211,85,2)" fg:x="796" fg:w="1"/><text x="28.2979%" y="287.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="28.0479%" y="261" width="0.0352%" height="15" fill="rgb(229,17,7)" fg:x="796" fg:w="1"/><text x="28.2979%" y="271.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="28.0479%" y="245" width="0.0352%" height="15" fill="rgb(239,72,28)" fg:x="796" fg:w="1"/><text x="28.2979%" y="255.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="28.0479%" y="229" width="0.0352%" height="15" fill="rgb(230,47,54)" fg:x="796" fg:w="1"/><text x="28.2979%" y="239.50"></text></g><g><title>task_tick_fair (1 samples, 0.04%)</title><rect x="28.0479%" y="213" width="0.0352%" height="15" fill="rgb(214,50,8)" fg:x="796" fg:w="1"/><text x="28.2979%" y="223.50"></text></g><g><title>hrtimer_active (1 samples, 0.04%)</title><rect x="28.0479%" y="197" width="0.0352%" height="15" fill="rgb(216,198,43)" fg:x="796" fg:w="1"/><text x="28.2979%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (14 samples, 0.49%)</title><rect x="28.0832%" y="389" width="0.4933%" height="15" fill="rgb(234,20,35)" fg:x="797" fg:w="14"/><text x="28.3332%" y="399.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="261" width="0.0352%" height="15" fill="rgb(254,45,19)" fg:x="811" fg:w="1"/><text x="28.8265%" y="271.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="245" width="0.0352%" height="15" fill="rgb(219,14,44)" fg:x="811" fg:w="1"/><text x="28.8265%" y="255.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="229" width="0.0352%" height="15" fill="rgb(217,220,26)" fg:x="811" fg:w="1"/><text x="28.8265%" y="239.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="213" width="0.0352%" height="15" fill="rgb(213,158,28)" fg:x="811" fg:w="1"/><text x="28.8265%" y="223.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="197" width="0.0352%" height="15" fill="rgb(252,51,52)" fg:x="811" fg:w="1"/><text x="28.8265%" y="207.50"></text></g><g><title>handle_pte_fault (1 samples, 0.04%)</title><rect x="28.5765%" y="181" width="0.0352%" height="15" fill="rgb(246,89,16)" fg:x="811" fg:w="1"/><text x="28.8265%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.04%)</title><rect x="28.5765%" y="165" width="0.0352%" height="15" fill="rgb(216,158,49)" fg:x="811" fg:w="1"/><text x="28.8265%" y="175.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="28.5765%" y="149" width="0.0352%" height="15" fill="rgb(236,107,19)" fg:x="811" fg:w="1"/><text x="28.8265%" y="159.50"></text></g><g><title>charge_memcg (1 samples, 0.04%)</title><rect x="28.5765%" y="133" width="0.0352%" height="15" fill="rgb(228,185,30)" fg:x="811" fg:w="1"/><text x="28.8265%" y="143.50"></text></g><g><title>try_charge_memcg (1 samples, 0.04%)</title><rect x="28.5765%" y="117" width="0.0352%" height="15" fill="rgb(246,134,8)" fg:x="811" fg:w="1"/><text x="28.8265%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="28.6117%" y="229" width="0.0352%" height="15" fill="rgb(214,143,50)" fg:x="812" fg:w="1"/><text x="28.8617%" y="239.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="28.6117%" y="213" width="0.0352%" height="15" fill="rgb(228,75,8)" fg:x="812" fg:w="1"/><text x="28.8617%" y="223.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.04%)</title><rect x="28.6117%" y="197" width="0.0352%" height="15" fill="rgb(207,175,4)" fg:x="812" fg:w="1"/><text x="28.8617%" y="207.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.04%)</title><rect x="28.6117%" y="181" width="0.0352%" height="15" fill="rgb(205,108,24)" fg:x="812" fg:w="1"/><text x="28.8617%" y="191.50"></text></g><g><title>mprotect_fixup (1 samples, 0.04%)</title><rect x="28.6117%" y="165" width="0.0352%" height="15" fill="rgb(244,120,49)" fg:x="812" fg:w="1"/><text x="28.8617%" y="175.50"></text></g><g><title>vma_set_page_prot (1 samples, 0.04%)</title><rect x="28.6117%" y="149" width="0.0352%" height="15" fill="rgb(223,47,38)" fg:x="812" fg:w="1"/><text x="28.8617%" y="159.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (3 samples, 0.11%)</title><rect x="28.5765%" y="389" width="0.1057%" height="15" fill="rgb(229,179,11)" fg:x="811" fg:w="3"/><text x="28.8265%" y="399.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (3 samples, 0.11%)</title><rect x="28.5765%" y="373" width="0.1057%" height="15" fill="rgb(231,122,1)" fg:x="811" fg:w="3"/><text x="28.8265%" y="383.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="28.5765%" y="357" width="0.1057%" height="15" fill="rgb(245,119,9)" fg:x="811" fg:w="3"/><text x="28.8265%" y="367.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="28.5765%" y="341" width="0.1057%" height="15" fill="rgb(241,163,25)" fg:x="811" fg:w="3"/><text x="28.8265%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.11%)</title><rect x="28.5765%" y="325" width="0.1057%" height="15" fill="rgb(217,214,3)" fg:x="811" fg:w="3"/><text x="28.8265%" y="335.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="28.5765%" y="309" width="0.1057%" height="15" fill="rgb(240,86,28)" fg:x="811" fg:w="3"/><text x="28.8265%" y="319.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="28.5765%" y="293" width="0.1057%" height="15" fill="rgb(215,47,9)" fg:x="811" fg:w="3"/><text x="28.8265%" y="303.50"></text></g><g><title>sysmalloc (3 samples, 0.11%)</title><rect x="28.5765%" y="277" width="0.1057%" height="15" fill="rgb(252,25,45)" fg:x="811" fg:w="3"/><text x="28.8265%" y="287.50"></text></g><g><title>grow_heap (2 samples, 0.07%)</title><rect x="28.6117%" y="261" width="0.0705%" height="15" fill="rgb(251,164,9)" fg:x="812" fg:w="2"/><text x="28.8617%" y="271.50"></text></g><g><title>__GI___mprotect (2 samples, 0.07%)</title><rect x="28.6117%" y="245" width="0.0705%" height="15" fill="rgb(233,194,0)" fg:x="812" fg:w="2"/><text x="28.8617%" y="255.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.04%)</title><rect x="28.6469%" y="229" width="0.0352%" height="15" fill="rgb(249,111,24)" fg:x="813" fg:w="1"/><text x="28.8969%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (2 samples, 0.07%)</title><rect x="28.6822%" y="389" width="0.0705%" height="15" fill="rgb(250,223,3)" fg:x="814" fg:w="2"/><text x="28.9322%" y="399.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.07%)</title><rect x="28.6822%" y="373" width="0.0705%" height="15" fill="rgb(236,178,37)" fg:x="814" fg:w="2"/><text x="28.9322%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.07%)</title><rect x="28.6822%" y="357" width="0.0705%" height="15" fill="rgb(241,158,50)" fg:x="814" fg:w="2"/><text x="28.9322%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (2 samples, 0.07%)</title><rect x="28.7526%" y="389" width="0.0705%" height="15" fill="rgb(213,121,41)" fg:x="816" fg:w="2"/><text x="29.0026%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="28.8584%" y="357" width="0.0352%" height="15" fill="rgb(240,92,3)" fg:x="819" fg:w="1"/><text x="29.1084%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="28.8584%" y="341" width="0.0352%" height="15" fill="rgb(205,123,3)" fg:x="819" fg:w="1"/><text x="29.1084%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.04%)</title><rect x="28.8584%" y="325" width="0.0352%" height="15" fill="rgb(205,97,47)" fg:x="819" fg:w="1"/><text x="29.1084%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (4 samples, 0.14%)</title><rect x="28.9288%" y="325" width="0.1409%" height="15" fill="rgb(247,152,14)" fg:x="821" fg:w="4"/><text x="29.1788%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (7 samples, 0.25%)</title><rect x="29.2812%" y="277" width="0.2467%" height="15" fill="rgb(248,195,53)" fg:x="831" fg:w="7"/><text x="29.5312%" y="287.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (7 samples, 0.25%)</title><rect x="29.2812%" y="261" width="0.2467%" height="15" fill="rgb(226,201,16)" fg:x="831" fg:w="7"/><text x="29.5312%" y="271.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (11 samples, 0.39%)</title><rect x="29.2812%" y="309" width="0.3876%" height="15" fill="rgb(205,98,0)" fg:x="831" fg:w="11"/><text x="29.5312%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (11 samples, 0.39%)</title><rect x="29.2812%" y="293" width="0.3876%" height="15" fill="rgb(214,191,48)" fg:x="831" fg:w="11"/><text x="29.5312%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.14%)</title><rect x="29.5278%" y="277" width="0.1409%" height="15" fill="rgb(237,112,39)" fg:x="838" fg:w="4"/><text x="29.7778%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.14%)</title><rect x="29.5278%" y="261" width="0.1409%" height="15" fill="rgb(247,203,27)" fg:x="838" fg:w="4"/><text x="29.7778%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (22 samples, 0.78%)</title><rect x="28.9288%" y="341" width="0.7752%" height="15" fill="rgb(235,124,28)" fg:x="821" fg:w="22"/><text x="29.1788%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (18 samples, 0.63%)</title><rect x="29.0698%" y="325" width="0.6342%" height="15" fill="rgb(208,207,46)" fg:x="825" fg:w="18"/><text x="29.3198%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="29.6688%" y="309" width="0.0352%" height="15" fill="rgb(234,176,4)" fg:x="842" fg:w="1"/><text x="29.9188%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="29.7040%" y="341" width="0.1057%" height="15" fill="rgb(230,133,28)" fg:x="843" fg:w="3"/><text x="29.9540%" y="351.50"></text></g><g><title>core::slice::sort::insert_tail (32 samples, 1.13%)</title><rect x="28.8936%" y="357" width="1.1276%" height="15" fill="rgb(211,137,40)" fg:x="820" fg:w="32"/><text x="29.1436%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (6 samples, 0.21%)</title><rect x="29.8097%" y="341" width="0.2114%" height="15" fill="rgb(254,35,13)" fg:x="846" fg:w="6"/><text x="30.0597%" y="351.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.21%)</title><rect x="29.8097%" y="325" width="0.2114%" height="15" fill="rgb(225,49,51)" fg:x="846" fg:w="6"/><text x="30.0597%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="29.8097%" y="309" width="0.2114%" height="15" fill="rgb(251,10,15)" fg:x="846" fg:w="6"/><text x="30.0597%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (130 samples, 4.58%)</title><rect x="25.5462%" y="437" width="4.5807%" height="15" fill="rgb(228,207,15)" fg:x="725" fg:w="130"/><text x="25.7962%" y="447.50">alloc..</text></g><g><title>alloc::slice::stable_sort (130 samples, 4.58%)</title><rect x="25.5462%" y="421" width="4.5807%" height="15" fill="rgb(241,99,19)" fg:x="725" fg:w="130"/><text x="25.7962%" y="431.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (130 samples, 4.58%)</title><rect x="25.5462%" y="405" width="4.5807%" height="15" fill="rgb(207,104,49)" fg:x="725" fg:w="130"/><text x="25.7962%" y="415.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (37 samples, 1.30%)</title><rect x="28.8231%" y="389" width="1.3037%" height="15" fill="rgb(234,99,18)" fg:x="818" fg:w="37"/><text x="29.0731%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (37 samples, 1.30%)</title><rect x="28.8231%" y="373" width="1.3037%" height="15" fill="rgb(213,191,49)" fg:x="818" fg:w="37"/><text x="29.0731%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (3 samples, 0.11%)</title><rect x="30.0211%" y="357" width="0.1057%" height="15" fill="rgb(210,226,19)" fg:x="852" fg:w="3"/><text x="30.2711%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (4 samples, 0.14%)</title><rect x="30.1268%" y="437" width="0.1409%" height="15" fill="rgb(229,97,18)" fg:x="855" fg:w="4"/><text x="30.3768%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (4 samples, 0.14%)</title><rect x="30.1268%" y="421" width="0.1409%" height="15" fill="rgb(211,167,15)" fg:x="855" fg:w="4"/><text x="30.3768%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (4 samples, 0.14%)</title><rect x="30.1268%" y="405" width="0.1409%" height="15" fill="rgb(210,169,34)" fg:x="855" fg:w="4"/><text x="30.3768%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (4 samples, 0.14%)</title><rect x="30.1268%" y="389" width="0.1409%" height="15" fill="rgb(241,121,31)" fg:x="855" fg:w="4"/><text x="30.3768%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (4 samples, 0.14%)</title><rect x="30.1268%" y="373" width="0.1409%" height="15" fill="rgb(232,40,11)" fg:x="855" fg:w="4"/><text x="30.3768%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.04%)</title><rect x="30.2326%" y="357" width="0.0352%" height="15" fill="rgb(205,86,26)" fg:x="858" fg:w="1"/><text x="30.4826%" y="367.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="30.2326%" y="341" width="0.0352%" height="15" fill="rgb(231,126,28)" fg:x="858" fg:w="1"/><text x="30.4826%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="30.2326%" y="325" width="0.0352%" height="15" fill="rgb(219,221,18)" fg:x="858" fg:w="1"/><text x="30.4826%" y="335.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="30.2678%" y="133" width="0.0352%" height="15" fill="rgb(211,40,0)" fg:x="859" fg:w="1"/><text x="30.5178%" y="143.50"></text></g><g><title>charge_memcg (1 samples, 0.04%)</title><rect x="30.2678%" y="117" width="0.0352%" height="15" fill="rgb(239,85,43)" fg:x="859" fg:w="1"/><text x="30.5178%" y="127.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.04%)</title><rect x="30.2678%" y="101" width="0.0352%" height="15" fill="rgb(231,55,21)" fg:x="859" fg:w="1"/><text x="30.5178%" y="111.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (147 samples, 5.18%)</title><rect x="25.1586%" y="453" width="5.1797%" height="15" fill="rgb(225,184,43)" fg:x="714" fg:w="147"/><text x="25.4086%" y="463.50">projec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.07%)</title><rect x="30.2678%" y="437" width="0.0705%" height="15" fill="rgb(251,158,41)" fg:x="859" fg:w="2"/><text x="30.5178%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="30.2678%" y="421" width="0.0705%" height="15" fill="rgb(234,159,37)" fg:x="859" fg:w="2"/><text x="30.5178%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="30.2678%" y="405" width="0.0705%" height="15" fill="rgb(216,204,22)" fg:x="859" fg:w="2"/><text x="30.5178%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.07%)</title><rect x="30.2678%" y="389" width="0.0705%" height="15" fill="rgb(214,17,3)" fg:x="859" fg:w="2"/><text x="30.5178%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="30.2678%" y="373" width="0.0705%" height="15" fill="rgb(212,111,17)" fg:x="859" fg:w="2"/><text x="30.5178%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="30.2678%" y="357" width="0.0705%" height="15" fill="rgb(221,157,24)" fg:x="859" fg:w="2"/><text x="30.5178%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="30.2678%" y="341" width="0.0705%" height="15" fill="rgb(252,16,13)" fg:x="859" fg:w="2"/><text x="30.5178%" y="351.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="30.2678%" y="325" width="0.0705%" height="15" fill="rgb(221,62,2)" fg:x="859" fg:w="2"/><text x="30.5178%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="30.2678%" y="309" width="0.0705%" height="15" fill="rgb(247,87,22)" fg:x="859" fg:w="2"/><text x="30.5178%" y="319.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="30.2678%" y="293" width="0.0705%" height="15" fill="rgb(215,73,9)" fg:x="859" fg:w="2"/><text x="30.5178%" y="303.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="30.2678%" y="277" width="0.0705%" height="15" fill="rgb(207,175,33)" fg:x="859" fg:w="2"/><text x="30.5178%" y="287.50"></text></g><g><title>sysmalloc (2 samples, 0.07%)</title><rect x="30.2678%" y="261" width="0.0705%" height="15" fill="rgb(243,129,54)" fg:x="859" fg:w="2"/><text x="30.5178%" y="271.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="245" width="0.0705%" height="15" fill="rgb(227,119,45)" fg:x="859" fg:w="2"/><text x="30.5178%" y="255.50"></text></g><g><title>exc_page_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="229" width="0.0705%" height="15" fill="rgb(205,109,36)" fg:x="859" fg:w="2"/><text x="30.5178%" y="239.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="213" width="0.0705%" height="15" fill="rgb(205,6,39)" fg:x="859" fg:w="2"/><text x="30.5178%" y="223.50"></text></g><g><title>handle_mm_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="197" width="0.0705%" height="15" fill="rgb(221,32,16)" fg:x="859" fg:w="2"/><text x="30.5178%" y="207.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="181" width="0.0705%" height="15" fill="rgb(228,144,50)" fg:x="859" fg:w="2"/><text x="30.5178%" y="191.50"></text></g><g><title>handle_pte_fault (2 samples, 0.07%)</title><rect x="30.2678%" y="165" width="0.0705%" height="15" fill="rgb(229,201,53)" fg:x="859" fg:w="2"/><text x="30.5178%" y="175.50"></text></g><g><title>do_anonymous_page (2 samples, 0.07%)</title><rect x="30.2678%" y="149" width="0.0705%" height="15" fill="rgb(249,153,27)" fg:x="859" fg:w="2"/><text x="30.5178%" y="159.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.04%)</title><rect x="30.3030%" y="133" width="0.0352%" height="15" fill="rgb(227,106,25)" fg:x="860" fg:w="1"/><text x="30.5530%" y="143.50"></text></g><g><title>__folio_alloc (1 samples, 0.04%)</title><rect x="30.3030%" y="117" width="0.0352%" height="15" fill="rgb(230,65,29)" fg:x="860" fg:w="1"/><text x="30.5530%" y="127.50"></text></g><g><title>__alloc_pages (1 samples, 0.04%)</title><rect x="30.3030%" y="101" width="0.0352%" height="15" fill="rgb(221,57,46)" fg:x="860" fg:w="1"/><text x="30.5530%" y="111.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.04%)</title><rect x="30.3030%" y="85" width="0.0352%" height="15" fill="rgb(229,161,17)" fg:x="860" fg:w="1"/><text x="30.5530%" y="95.50"></text></g><g><title>rmqueue (1 samples, 0.04%)</title><rect x="30.3030%" y="69" width="0.0352%" height="15" fill="rgb(222,213,11)" fg:x="860" fg:w="1"/><text x="30.5530%" y="79.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.04%)</title><rect x="30.3030%" y="53" width="0.0352%" height="15" fill="rgb(235,35,13)" fg:x="860" fg:w="1"/><text x="30.5530%" y="63.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (2 samples, 0.07%)</title><rect x="30.3383%" y="453" width="0.0705%" height="15" fill="rgb(233,158,34)" fg:x="861" fg:w="2"/><text x="30.5883%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.07%)</title><rect x="30.3383%" y="437" width="0.0705%" height="15" fill="rgb(215,151,48)" fg:x="861" fg:w="2"/><text x="30.5883%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (2 samples, 0.07%)</title><rect x="30.4792%" y="437" width="0.0705%" height="15" fill="rgb(229,84,14)" fg:x="865" fg:w="2"/><text x="30.7292%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.07%)</title><rect x="30.4792%" y="421" width="0.0705%" height="15" fill="rgb(229,68,14)" fg:x="865" fg:w="2"/><text x="30.7292%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (218 samples, 7.68%)</title><rect x="30.5497%" y="437" width="7.6815%" height="15" fill="rgb(243,106,26)" fg:x="867" fg:w="218"/><text x="30.7997%" y="447.50">project1::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.32%)</title><rect x="55.2149%" y="421" width="0.3171%" height="15" fill="rgb(206,45,38)" fg:x="1567" fg:w="9"/><text x="55.4649%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.32%)</title><rect x="55.2149%" y="405" width="0.3171%" height="15" fill="rgb(226,6,15)" fg:x="1567" fg:w="9"/><text x="55.4649%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.32%)</title><rect x="55.2149%" y="389" width="0.3171%" height="15" fill="rgb(232,22,54)" fg:x="1567" fg:w="9"/><text x="55.4649%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="55.5321%" y="421" width="0.0352%" height="15" fill="rgb(229,222,32)" fg:x="1576" fg:w="1"/><text x="55.7821%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="55.5321%" y="405" width="0.0352%" height="15" fill="rgb(228,62,29)" fg:x="1576" fg:w="1"/><text x="55.7821%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.04%)</title><rect x="55.5321%" y="389" width="0.0352%" height="15" fill="rgb(251,103,34)" fg:x="1576" fg:w="1"/><text x="55.7821%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (38 samples, 1.34%)</title><rect x="55.5673%" y="389" width="1.3390%" height="15" fill="rgb(233,12,30)" fg:x="1577" fg:w="38"/><text x="55.8173%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (56 samples, 1.97%)</title><rect x="55.5673%" y="421" width="1.9732%" height="15" fill="rgb(238,52,0)" fg:x="1577" fg:w="56"/><text x="55.8173%" y="431.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (56 samples, 1.97%)</title><rect x="55.5673%" y="405" width="1.9732%" height="15" fill="rgb(223,98,5)" fg:x="1577" fg:w="56"/><text x="55.8173%" y="415.50">c..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (18 samples, 0.63%)</title><rect x="56.9063%" y="389" width="0.6342%" height="15" fill="rgb(228,75,37)" fg:x="1615" fg:w="18"/><text x="57.1563%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 1.83%)</title><rect x="57.5405%" y="389" width="1.8323%" height="15" fill="rgb(205,115,49)" fg:x="1633" fg:w="52"/><text x="57.7905%" y="399.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.74%)</title><rect x="58.6328%" y="373" width="0.7400%" height="15" fill="rgb(250,154,43)" fg:x="1664" fg:w="21"/><text x="58.8828%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (21 samples, 0.74%)</title><rect x="58.6328%" y="357" width="0.7400%" height="15" fill="rgb(226,43,29)" fg:x="1664" fg:w="21"/><text x="58.8828%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (72 samples, 2.54%)</title><rect x="57.5405%" y="421" width="2.5370%" height="15" fill="rgb(249,228,39)" fg:x="1633" fg:w="72"/><text x="57.7905%" y="431.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (72 samples, 2.54%)</title><rect x="57.5405%" y="405" width="2.5370%" height="15" fill="rgb(216,79,43)" fg:x="1633" fg:w="72"/><text x="57.7905%" y="415.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (20 samples, 0.70%)</title><rect x="59.3728%" y="389" width="0.7047%" height="15" fill="rgb(228,95,12)" fg:x="1685" fg:w="20"/><text x="59.6228%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20 samples, 0.70%)</title><rect x="59.3728%" y="373" width="0.7047%" height="15" fill="rgb(249,221,15)" fg:x="1685" fg:w="20"/><text x="59.6228%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19 samples, 0.67%)</title><rect x="60.0775%" y="357" width="0.6695%" height="15" fill="rgb(233,34,13)" fg:x="1705" fg:w="19"/><text x="60.3275%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.81%)</title><rect x="60.0775%" y="389" width="0.8104%" height="15" fill="rgb(214,103,39)" fg:x="1705" fg:w="23"/><text x="60.3275%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (23 samples, 0.81%)</title><rect x="60.0775%" y="373" width="0.8104%" height="15" fill="rgb(251,126,39)" fg:x="1705" fg:w="23"/><text x="60.3275%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (4 samples, 0.14%)</title><rect x="60.7470%" y="357" width="0.1409%" height="15" fill="rgb(214,216,36)" fg:x="1724" fg:w="4"/><text x="60.9970%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (26 samples, 0.92%)</title><rect x="60.0775%" y="421" width="0.9161%" height="15" fill="rgb(220,221,8)" fg:x="1705" fg:w="26"/><text x="60.3275%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.92%)</title><rect x="60.0775%" y="405" width="0.9161%" height="15" fill="rgb(240,216,3)" fg:x="1705" fg:w="26"/><text x="60.3275%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.11%)</title><rect x="60.8879%" y="389" width="0.1057%" height="15" fill="rgb(232,218,17)" fg:x="1728" fg:w="3"/><text x="61.1379%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="60.8879%" y="373" width="0.1057%" height="15" fill="rgb(229,163,45)" fg:x="1728" fg:w="3"/><text x="61.1379%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="60.9937%" y="389" width="0.0352%" height="15" fill="rgb(231,110,42)" fg:x="1731" fg:w="1"/><text x="61.2437%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (227 samples, 8.00%)</title><rect x="61.0289%" y="389" width="7.9986%" height="15" fill="rgb(208,170,48)" fg:x="1732" fg:w="227"/><text x="61.2789%" y="399.50">core::optio..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (227 samples, 8.00%)</title><rect x="61.0289%" y="373" width="7.9986%" height="15" fill="rgb(239,116,25)" fg:x="1732" fg:w="227"/><text x="61.2789%" y="383.50">slotmap::ba..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (14 samples, 0.49%)</title><rect x="69.0275%" y="389" width="0.4933%" height="15" fill="rgb(219,200,50)" fg:x="1959" fg:w="14"/><text x="69.2775%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (14 samples, 0.49%)</title><rect x="69.0275%" y="373" width="0.4933%" height="15" fill="rgb(245,200,0)" fg:x="1959" fg:w="14"/><text x="69.2775%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (245 samples, 8.63%)</title><rect x="60.9937%" y="421" width="8.6328%" height="15" fill="rgb(245,119,33)" fg:x="1731" fg:w="245"/><text x="61.2437%" y="431.50">&lt;project1::s..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (245 samples, 8.63%)</title><rect x="60.9937%" y="405" width="8.6328%" height="15" fill="rgb(231,125,12)" fg:x="1731" fg:w="245"/><text x="61.2437%" y="415.50">slotmap::bas..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (3 samples, 0.11%)</title><rect x="69.5208%" y="389" width="0.1057%" height="15" fill="rgb(216,96,41)" fg:x="1973" fg:w="3"/><text x="69.7708%" y="399.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (182 samples, 6.41%)</title><rect x="69.6265%" y="421" width="6.4130%" height="15" fill="rgb(248,43,45)" fg:x="1976" fg:w="182"/><text x="69.8765%" y="431.50">&lt;project..</text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (1 samples, 0.04%)</title><rect x="76.0395%" y="421" width="0.0352%" height="15" fill="rgb(217,222,7)" fg:x="2158" fg:w="1"/><text x="76.2895%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.04%)</title><rect x="76.0395%" y="405" width="0.0352%" height="15" fill="rgb(233,28,6)" fg:x="2158" fg:w="1"/><text x="76.2895%" y="415.50"></text></g><g><title>__irqentry_text_end (2 samples, 0.07%)</title><rect x="77.2375%" y="213" width="0.0705%" height="15" fill="rgb(231,218,15)" fg:x="2192" fg:w="2"/><text x="77.4875%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.11%)</title><rect x="77.2375%" y="405" width="0.1057%" height="15" fill="rgb(226,171,48)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.11%)</title><rect x="77.2375%" y="389" width="0.1057%" height="15" fill="rgb(235,201,9)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="77.2375%" y="373" width="0.1057%" height="15" fill="rgb(217,80,15)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.11%)</title><rect x="77.2375%" y="357" width="0.1057%" height="15" fill="rgb(219,152,8)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.11%)</title><rect x="77.2375%" y="341" width="0.1057%" height="15" fill="rgb(243,107,38)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="351.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.11%)</title><rect x="77.2375%" y="325" width="0.1057%" height="15" fill="rgb(231,17,5)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="335.50"></text></g><g><title>__rdl_realloc (3 samples, 0.11%)</title><rect x="77.2375%" y="309" width="0.1057%" height="15" fill="rgb(209,25,54)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.11%)</title><rect x="77.2375%" y="293" width="0.1057%" height="15" fill="rgb(219,0,2)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="303.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.11%)</title><rect x="77.2375%" y="277" width="0.1057%" height="15" fill="rgb(246,9,5)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="287.50"></text></g><g><title>_int_realloc (3 samples, 0.11%)</title><rect x="77.2375%" y="261" width="0.1057%" height="15" fill="rgb(226,159,4)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="271.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="77.2375%" y="245" width="0.1057%" height="15" fill="rgb(219,175,34)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="255.50"></text></g><g><title>sysmalloc (3 samples, 0.11%)</title><rect x="77.2375%" y="229" width="0.1057%" height="15" fill="rgb(236,10,46)" fg:x="2192" fg:w="3"/><text x="77.4875%" y="239.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="77.3080%" y="213" width="0.0352%" height="15" fill="rgb(240,211,16)" fg:x="2194" fg:w="1"/><text x="77.5580%" y="223.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="77.3080%" y="197" width="0.0352%" height="15" fill="rgb(205,3,43)" fg:x="2194" fg:w="1"/><text x="77.5580%" y="207.50"></text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="77.3080%" y="181" width="0.0352%" height="15" fill="rgb(245,7,22)" fg:x="2194" fg:w="1"/><text x="77.5580%" y="191.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="77.3080%" y="165" width="0.0352%" height="15" fill="rgb(239,132,32)" fg:x="2194" fg:w="1"/><text x="77.5580%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.07%)</title><rect x="77.3432%" y="405" width="0.0705%" height="15" fill="rgb(228,202,34)" fg:x="2195" fg:w="2"/><text x="77.5932%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.07%)</title><rect x="77.3432%" y="389" width="0.0705%" height="15" fill="rgb(254,200,22)" fg:x="2195" fg:w="2"/><text x="77.5932%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (132 samples, 4.65%)</title><rect x="76.0747%" y="421" width="4.6512%" height="15" fill="rgb(219,10,39)" fg:x="2159" fg:w="132"/><text x="76.3247%" y="431.50">alloc..</text></g><g><title>core::ptr::write (94 samples, 3.31%)</title><rect x="77.4137%" y="405" width="3.3122%" height="15" fill="rgb(226,210,39)" fg:x="2197" fg:w="94"/><text x="77.6637%" y="415.50">cor..</text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="80.6906%" y="389" width="0.0352%" height="15" fill="rgb(208,219,16)" fg:x="2290" fg:w="1"/><text x="80.9406%" y="399.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="80.6906%" y="373" width="0.0352%" height="15" fill="rgb(216,158,51)" fg:x="2290" fg:w="1"/><text x="80.9406%" y="383.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="80.6906%" y="357" width="0.0352%" height="15" fill="rgb(233,14,44)" fg:x="2290" fg:w="1"/><text x="80.9406%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.07%)</title><rect x="80.7259%" y="421" width="0.0705%" height="15" fill="rgb(237,97,39)" fg:x="2291" fg:w="2"/><text x="80.9759%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="80.7963%" y="421" width="0.0352%" height="15" fill="rgb(218,198,43)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="80.7963%" y="405" width="0.0352%" height="15" fill="rgb(231,104,20)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="80.7963%" y="389" width="0.0352%" height="15" fill="rgb(254,36,13)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="399.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="80.7963%" y="373" width="0.0352%" height="15" fill="rgb(248,14,50)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="383.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="80.7963%" y="357" width="0.0352%" height="15" fill="rgb(217,107,29)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="367.50"></text></g><g><title>tick_sched_timer (1 samples, 0.04%)</title><rect x="80.7963%" y="341" width="0.0352%" height="15" fill="rgb(251,169,33)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="351.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.04%)</title><rect x="80.7963%" y="325" width="0.0352%" height="15" fill="rgb(217,108,32)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="335.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="80.7963%" y="309" width="0.0352%" height="15" fill="rgb(219,66,42)" fg:x="2293" fg:w="1"/><text x="81.0463%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::le (34 samples, 1.20%)</title><rect x="80.8316%" y="421" width="1.1980%" height="15" fill="rgb(206,180,7)" fg:x="2294" fg:w="34"/><text x="81.0816%" y="431.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.04%)</title><rect x="81.9944%" y="405" width="0.0352%" height="15" fill="rgb(208,226,31)" fg:x="2327" fg:w="1"/><text x="82.2444%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (27 samples, 0.95%)</title><rect x="82.0296%" y="421" width="0.9514%" height="15" fill="rgb(218,26,49)" fg:x="2328" fg:w="27"/><text x="82.2796%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (27 samples, 0.95%)</title><rect x="82.0296%" y="405" width="0.9514%" height="15" fill="rgb(233,197,48)" fg:x="2328" fg:w="27"/><text x="82.2796%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (27 samples, 0.95%)</title><rect x="82.0296%" y="389" width="0.9514%" height="15" fill="rgb(252,181,51)" fg:x="2328" fg:w="27"/><text x="82.2796%" y="399.50"></text></g><g><title>core::intrinsics::copy (12 samples, 0.42%)</title><rect x="83.0514%" y="389" width="0.4228%" height="15" fill="rgb(253,90,19)" fg:x="2357" fg:w="12"/><text x="83.3014%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (22 samples, 0.78%)</title><rect x="82.9810%" y="421" width="0.7752%" height="15" fill="rgb(215,171,30)" fg:x="2355" fg:w="22"/><text x="83.2310%" y="431.50"></text></g><g><title>core::ptr::swap (20 samples, 0.70%)</title><rect x="83.0514%" y="405" width="0.7047%" height="15" fill="rgb(214,222,9)" fg:x="2357" fg:w="20"/><text x="83.3014%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.28%)</title><rect x="83.4743%" y="389" width="0.2819%" height="15" fill="rgb(223,3,22)" fg:x="2369" fg:w="8"/><text x="83.7243%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (139 samples, 4.90%)</title><rect x="83.7562%" y="389" width="4.8978%" height="15" fill="rgb(225,196,46)" fg:x="2377" fg:w="139"/><text x="84.0062%" y="399.50">core::..</text></g><g><title>log::max_level (140 samples, 4.93%)</title><rect x="83.7562%" y="421" width="4.9331%" height="15" fill="rgb(209,110,37)" fg:x="2377" fg:w="140"/><text x="84.0062%" y="431.50">log::m..</text></g><g><title>core::sync::atomic::AtomicUsize::load (140 samples, 4.93%)</title><rect x="83.7562%" y="405" width="4.9331%" height="15" fill="rgb(249,89,12)" fg:x="2377" fg:w="140"/><text x="84.0062%" y="415.50">core::..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.04%)</title><rect x="88.6540%" y="389" width="0.0352%" height="15" fill="rgb(226,27,33)" fg:x="2516" fg:w="1"/><text x="88.9040%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (12 samples, 0.42%)</title><rect x="88.6892%" y="421" width="0.4228%" height="15" fill="rgb(213,82,22)" fg:x="2517" fg:w="12"/><text x="88.9392%" y="431.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (2 samples, 0.07%)</title><rect x="89.0416%" y="405" width="0.0705%" height="15" fill="rgb(248,140,0)" fg:x="2527" fg:w="2"/><text x="89.2916%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.07%)</title><rect x="89.0416%" y="389" width="0.0705%" height="15" fill="rgb(228,106,3)" fg:x="2527" fg:w="2"/><text x="89.2916%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="89.1121%" y="389" width="0.1057%" height="15" fill="rgb(209,23,37)" fg:x="2529" fg:w="3"/><text x="89.3621%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.74%)</title><rect x="89.1121%" y="405" width="0.7400%" height="15" fill="rgb(241,93,50)" fg:x="2529" fg:w="21"/><text x="89.3621%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (18 samples, 0.63%)</title><rect x="89.2178%" y="389" width="0.6342%" height="15" fill="rgb(253,46,43)" fg:x="2532" fg:w="18"/><text x="89.4678%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (18 samples, 0.63%)</title><rect x="89.2178%" y="373" width="0.6342%" height="15" fill="rgb(226,206,43)" fg:x="2532" fg:w="18"/><text x="89.4678%" y="383.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (120 samples, 4.23%)</title><rect x="89.8520%" y="389" width="4.2283%" height="15" fill="rgb(217,54,7)" fg:x="2550" fg:w="120"/><text x="90.1020%" y="399.50">&lt;proj..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="94.0451%" y="373" width="0.0352%" height="15" fill="rgb(223,5,52)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="94.0451%" y="357" width="0.0352%" height="15" fill="rgb(206,52,46)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="367.50"></text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="94.0451%" y="341" width="0.0352%" height="15" fill="rgb(253,136,11)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="94.0451%" y="325" width="0.0352%" height="15" fill="rgb(208,106,33)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="335.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="94.0451%" y="309" width="0.0352%" height="15" fill="rgb(206,54,4)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="319.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.04%)</title><rect x="94.0451%" y="293" width="0.0352%" height="15" fill="rgb(213,3,15)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="303.50"></text></g><g><title>task_work_run (1 samples, 0.04%)</title><rect x="94.0451%" y="277" width="0.0352%" height="15" fill="rgb(252,211,39)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="287.50"></text></g><g><title>task_numa_work (1 samples, 0.04%)</title><rect x="94.0451%" y="261" width="0.0352%" height="15" fill="rgb(223,6,36)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="271.50"></text></g><g><title>change_prot_numa (1 samples, 0.04%)</title><rect x="94.0451%" y="245" width="0.0352%" height="15" fill="rgb(252,169,45)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="255.50"></text></g><g><title>change_protection (1 samples, 0.04%)</title><rect x="94.0451%" y="229" width="0.0352%" height="15" fill="rgb(212,48,26)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="239.50"></text></g><g><title>change_protection_range (1 samples, 0.04%)</title><rect x="94.0451%" y="213" width="0.0352%" height="15" fill="rgb(251,102,48)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="223.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.04%)</title><rect x="94.0451%" y="197" width="0.0352%" height="15" fill="rgb(243,208,16)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="207.50"></text></g><g><title>change_pte_range (1 samples, 0.04%)</title><rect x="94.0451%" y="181" width="0.0352%" height="15" fill="rgb(219,96,24)" fg:x="2669" fg:w="1"/><text x="94.2951%" y="191.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (170 samples, 5.99%)</title><rect x="89.8520%" y="405" width="5.9901%" height="15" fill="rgb(219,33,29)" fg:x="2550" fg:w="170"/><text x="90.1020%" y="415.50">&lt;project..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (50 samples, 1.76%)</title><rect x="94.0803%" y="389" width="1.7618%" height="15" fill="rgb(223,176,5)" fg:x="2670" fg:w="50"/><text x="94.3303%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (9 samples, 0.32%)</title><rect x="95.8421%" y="405" width="0.3171%" height="15" fill="rgb(228,140,14)" fg:x="2720" fg:w="9"/><text x="96.0921%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (44 samples, 1.55%)</title><rect x="96.1593%" y="389" width="1.5504%" height="15" fill="rgb(217,179,31)" fg:x="2729" fg:w="44"/><text x="96.4093%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (250 samples, 8.81%)</title><rect x="89.1121%" y="421" width="8.8090%" height="15" fill="rgb(230,9,30)" fg:x="2529" fg:w="250"/><text x="89.3621%" y="431.50">project1::so..</text></g><g><title>project1::solver::types::Lit::var_idx (50 samples, 1.76%)</title><rect x="96.1593%" y="405" width="1.7618%" height="15" fill="rgb(230,136,20)" fg:x="2729" fg:w="50"/><text x="96.4093%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (6 samples, 0.21%)</title><rect x="97.7097%" y="389" width="0.2114%" height="15" fill="rgb(215,210,22)" fg:x="2773" fg:w="6"/><text x="97.9597%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="97.9211%" y="389" width="0.0352%" height="15" fill="rgb(218,43,5)" fg:x="2779" fg:w="1"/><text x="98.1711%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (12 samples, 0.42%)</title><rect x="97.9211%" y="421" width="0.4228%" height="15" fill="rgb(216,11,5)" fg:x="2779" fg:w="12"/><text x="98.1711%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.42%)</title><rect x="97.9211%" y="405" width="0.4228%" height="15" fill="rgb(209,82,29)" fg:x="2779" fg:w="12"/><text x="98.1711%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.39%)</title><rect x="97.9563%" y="389" width="0.3876%" height="15" fill="rgb(244,115,12)" fg:x="2780" fg:w="11"/><text x="98.2063%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.39%)</title><rect x="97.9563%" y="373" width="0.3876%" height="15" fill="rgb(222,82,18)" fg:x="2780" fg:w="11"/><text x="98.2063%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="98.3791%" y="405" width="0.1057%" height="15" fill="rgb(249,227,8)" fg:x="2792" fg:w="3"/><text x="98.6291%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.11%)</title><rect x="98.3791%" y="389" width="0.1057%" height="15" fill="rgb(253,141,45)" fg:x="2792" fg:w="3"/><text x="98.6291%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="98.3791%" y="373" width="0.1057%" height="15" fill="rgb(234,184,4)" fg:x="2792" fg:w="3"/><text x="98.6291%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (8 samples, 0.28%)</title><rect x="98.3439%" y="421" width="0.2819%" height="15" fill="rgb(218,194,23)" fg:x="2791" fg:w="8"/><text x="98.5939%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.14%)</title><rect x="98.4848%" y="405" width="0.1409%" height="15" fill="rgb(235,66,41)" fg:x="2795" fg:w="4"/><text x="98.7348%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.14%)</title><rect x="98.4848%" y="389" width="0.1409%" height="15" fill="rgb(245,217,1)" fg:x="2795" fg:w="4"/><text x="98.7348%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="98.4848%" y="373" width="0.1409%" height="15" fill="rgb(229,91,1)" fg:x="2795" fg:w="4"/><text x="98.7348%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.14%)</title><rect x="98.4848%" y="357" width="0.1409%" height="15" fill="rgb(207,101,30)" fg:x="2795" fg:w="4"/><text x="98.7348%" y="367.50"></text></g><g><title>core::ptr::read (6 samples, 0.21%)</title><rect x="98.6258%" y="373" width="0.2114%" height="15" fill="rgb(223,82,49)" fg:x="2799" fg:w="6"/><text x="98.8758%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (7 samples, 0.25%)</title><rect x="98.6258%" y="421" width="0.2467%" height="15" fill="rgb(218,167,17)" fg:x="2799" fg:w="7"/><text x="98.8758%" y="431.50"></text></g><g><title>core::mem::take (7 samples, 0.25%)</title><rect x="98.6258%" y="405" width="0.2467%" height="15" fill="rgb(208,103,14)" fg:x="2799" fg:w="7"/><text x="98.8758%" y="415.50"></text></g><g><title>core::mem::replace (7 samples, 0.25%)</title><rect x="98.6258%" y="389" width="0.2467%" height="15" fill="rgb(238,20,8)" fg:x="2799" fg:w="7"/><text x="98.8758%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="98.8372%" y="373" width="0.0352%" height="15" fill="rgb(218,80,54)" fg:x="2805" fg:w="1"/><text x="99.0872%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1,949 samples, 68.68%)</title><rect x="30.4087%" y="453" width="68.6751%" height="15" fill="rgb(240,144,17)" fg:x="863" fg:w="1949"/><text x="30.6587%" y="463.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (1,727 samples, 60.85%)</title><rect x="38.2311%" y="437" width="60.8527%" height="15" fill="rgb(245,27,50)" fg:x="1085" fg:w="1727"/><text x="38.4811%" y="447.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::watch_list::Watcher::new (6 samples, 0.21%)</title><rect x="98.8724%" y="421" width="0.2114%" height="15" fill="rgb(251,51,7)" fg:x="2806" fg:w="6"/><text x="99.1224%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::simplify (1 samples, 0.04%)</title><rect x="99.0839%" y="453" width="0.0352%" height="15" fill="rgb(245,217,29)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_learnts (1 samples, 0.04%)</title><rect x="99.0839%" y="437" width="0.0352%" height="15" fill="rgb(221,176,29)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::satisfied (1 samples, 0.04%)</title><rect x="99.0839%" y="421" width="0.0352%" height="15" fill="rgb(212,180,24)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.04%)</title><rect x="99.0839%" y="405" width="0.0352%" height="15" fill="rgb(254,24,2)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::satisfied::{{closure}} (1 samples, 0.04%)</title><rect x="99.0839%" y="389" width="0.0352%" height="15" fill="rgb(230,100,2)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="399.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="99.0839%" y="373" width="0.0352%" height="15" fill="rgb(219,142,25)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="383.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="99.0839%" y="357" width="0.0352%" height="15" fill="rgb(240,73,43)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="367.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="99.0839%" y="341" width="0.0352%" height="15" fill="rgb(214,114,15)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="351.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="99.0839%" y="325" width="0.0352%" height="15" fill="rgb(207,130,4)" fg:x="2812" fg:w="1"/><text x="99.3339%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (6 samples, 0.21%)</title><rect x="99.1191%" y="453" width="0.2114%" height="15" fill="rgb(221,25,40)" fg:x="2813" fg:w="6"/><text x="99.3691%" y="463.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (1 samples, 0.04%)</title><rect x="99.3305%" y="453" width="0.0352%" height="15" fill="rgb(241,184,7)" fg:x="2819" fg:w="1"/><text x="99.5805%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (2,795 samples, 98.48%)</title><rect x="0.9161%" y="469" width="98.4848%" height="15" fill="rgb(235,159,4)" fg:x="26" fg:w="2795"/><text x="1.1661%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (1 samples, 0.04%)</title><rect x="99.3658%" y="453" width="0.0352%" height="15" fill="rgb(214,87,48)" fg:x="2820" fg:w="1"/><text x="99.6158%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="99.3658%" y="437" width="0.0352%" height="15" fill="rgb(246,198,24)" fg:x="2820" fg:w="1"/><text x="99.6158%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="99.3658%" y="421" width="0.0352%" height="15" fill="rgb(209,66,40)" fg:x="2820" fg:w="1"/><text x="99.6158%" y="431.50"></text></g><g><title>error_entry (1 samples, 0.04%)</title><rect x="99.3658%" y="405" width="0.0352%" height="15" fill="rgb(233,147,39)" fg:x="2820" fg:w="1"/><text x="99.6158%" y="415.50"></text></g><g><title>std::panic::catch_unwind (2,798 samples, 98.59%)</title><rect x="0.8809%" y="597" width="98.5906%" height="15" fill="rgb(231,145,52)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,798 samples, 98.59%)</title><rect x="0.8809%" y="581" width="98.5906%" height="15" fill="rgb(206,20,26)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,798 samples, 98.59%)</title><rect x="0.8809%" y="565" width="98.5906%" height="15" fill="rgb(238,220,4)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="575.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,798 samples, 98.59%)</title><rect x="0.8809%" y="549" width="98.5906%" height="15" fill="rgb(252,195,42)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="559.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2,798 samples, 98.59%)</title><rect x="0.8809%" y="533" width="98.5906%" height="15" fill="rgb(209,10,6)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="543.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,798 samples, 98.59%)</title><rect x="0.8809%" y="517" width="98.5906%" height="15" fill="rgb(229,3,52)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (2,798 samples, 98.59%)</title><rect x="0.8809%" y="501" width="98.5906%" height="15" fill="rgb(253,49,37)" fg:x="25" fg:w="2798"/><text x="1.1309%" y="511.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2,797 samples, 98.56%)</title><rect x="0.9161%" y="485" width="98.5553%" height="15" fill="rgb(240,103,49)" fg:x="26" fg:w="2797"/><text x="1.1661%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.07%)</title><rect x="99.4010%" y="469" width="0.0705%" height="15" fill="rgb(250,182,30)" fg:x="2821" fg:w="2"/><text x="99.6510%" y="479.50"></text></g><g><title>__clone3 (2,799 samples, 98.63%)</title><rect x="0.8809%" y="709" width="98.6258%" height="15" fill="rgb(248,8,30)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="719.50">__clone3</text></g><g><title>start_thread (2,799 samples, 98.63%)</title><rect x="0.8809%" y="693" width="98.6258%" height="15" fill="rgb(237,120,30)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="703.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2,799 samples, 98.63%)</title><rect x="0.8809%" y="677" width="98.6258%" height="15" fill="rgb(221,146,34)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="687.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,799 samples, 98.63%)</title><rect x="0.8809%" y="661" width="98.6258%" height="15" fill="rgb(242,55,13)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,799 samples, 98.63%)</title><rect x="0.8809%" y="645" width="98.6258%" height="15" fill="rgb(242,112,31)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,799 samples, 98.63%)</title><rect x="0.8809%" y="629" width="98.6258%" height="15" fill="rgb(249,192,27)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="639.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2,799 samples, 98.63%)</title><rect x="0.8809%" y="613" width="98.6258%" height="15" fill="rgb(208,204,44)" fg:x="25" fg:w="2799"/><text x="1.1309%" y="623.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.04%)</title><rect x="99.4715%" y="597" width="0.0352%" height="15" fill="rgb(208,93,54)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="607.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.04%)</title><rect x="99.4715%" y="581" width="0.0352%" height="15" fill="rgb(242,1,31)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="99.4715%" y="565" width="0.0352%" height="15" fill="rgb(241,83,25)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="575.50"></text></g><g><title>tcache_init (1 samples, 0.04%)</title><rect x="99.4715%" y="549" width="0.0352%" height="15" fill="rgb(205,169,50)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="559.50"></text></g><g><title>tcache_init (1 samples, 0.04%)</title><rect x="99.4715%" y="533" width="0.0352%" height="15" fill="rgb(239,186,37)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="543.50"></text></g><g><title>arena_get2 (1 samples, 0.04%)</title><rect x="99.4715%" y="517" width="0.0352%" height="15" fill="rgb(205,221,10)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="527.50"></text></g><g><title>arena_get2 (1 samples, 0.04%)</title><rect x="99.4715%" y="501" width="0.0352%" height="15" fill="rgb(218,196,15)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="511.50"></text></g><g><title>_int_new_arena (1 samples, 0.04%)</title><rect x="99.4715%" y="485" width="0.0352%" height="15" fill="rgb(218,196,35)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="495.50"></text></g><g><title>new_heap (1 samples, 0.04%)</title><rect x="99.4715%" y="469" width="0.0352%" height="15" fill="rgb(233,63,24)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="479.50"></text></g><g><title>alloc_new_heap (1 samples, 0.04%)</title><rect x="99.4715%" y="453" width="0.0352%" height="15" fill="rgb(225,8,4)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="463.50"></text></g><g><title>__GI___munmap (1 samples, 0.04%)</title><rect x="99.4715%" y="437" width="0.0352%" height="15" fill="rgb(234,105,35)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="447.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="99.4715%" y="421" width="0.0352%" height="15" fill="rgb(236,21,32)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="431.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="99.4715%" y="405" width="0.0352%" height="15" fill="rgb(228,109,6)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="415.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.04%)</title><rect x="99.4715%" y="389" width="0.0352%" height="15" fill="rgb(229,215,31)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="399.50"></text></g><g><title>__vm_munmap (1 samples, 0.04%)</title><rect x="99.4715%" y="373" width="0.0352%" height="15" fill="rgb(221,52,54)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="383.50"></text></g><g><title>__do_munmap (1 samples, 0.04%)</title><rect x="99.4715%" y="357" width="0.0352%" height="15" fill="rgb(252,129,43)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="367.50"></text></g><g><title>unmap_region (1 samples, 0.04%)</title><rect x="99.4715%" y="341" width="0.0352%" height="15" fill="rgb(248,183,27)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="351.50"></text></g><g><title>lru_add_drain (1 samples, 0.04%)</title><rect x="99.4715%" y="325" width="0.0352%" height="15" fill="rgb(250,0,22)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="335.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.04%)</title><rect x="99.4715%" y="309" width="0.0352%" height="15" fill="rgb(213,166,10)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="319.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.04%)</title><rect x="99.4715%" y="293" width="0.0352%" height="15" fill="rgb(207,163,36)" fg:x="2823" fg:w="1"/><text x="99.7215%" y="303.50"></text></g><g><title>_start (1 samples, 0.04%)</title><rect x="99.5067%" y="709" width="0.0352%" height="15" fill="rgb(208,122,22)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="719.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="99.5067%" y="693" width="0.0352%" height="15" fill="rgb(207,104,49)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="703.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="99.5067%" y="677" width="0.0352%" height="15" fill="rgb(248,211,50)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="687.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.5067%" y="661" width="0.0352%" height="15" fill="rgb(217,13,45)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="671.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="99.5067%" y="645" width="0.0352%" height="15" fill="rgb(211,216,49)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="655.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.04%)</title><rect x="99.5067%" y="629" width="0.0352%" height="15" fill="rgb(221,58,53)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="639.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="99.5067%" y="613" width="0.0352%" height="15" fill="rgb(220,112,41)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="623.50"></text></g><g><title>openaux (1 samples, 0.04%)</title><rect x="99.5067%" y="597" width="0.0352%" height="15" fill="rgb(236,38,28)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="607.50"></text></g><g><title>_dl_map_object (1 samples, 0.04%)</title><rect x="99.5067%" y="581" width="0.0352%" height="15" fill="rgb(227,195,22)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="591.50"></text></g><g><title>open_path (1 samples, 0.04%)</title><rect x="99.5067%" y="565" width="0.0352%" height="15" fill="rgb(214,55,33)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="575.50"></text></g><g><title>open_verify (1 samples, 0.04%)</title><rect x="99.5067%" y="549" width="0.0352%" height="15" fill="rgb(248,80,13)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="559.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.04%)</title><rect x="99.5067%" y="533" width="0.0352%" height="15" fill="rgb(238,52,6)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="99.5067%" y="517" width="0.0352%" height="15" fill="rgb(224,198,47)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="99.5067%" y="501" width="0.0352%" height="15" fill="rgb(233,171,20)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="511.50"></text></g><g><title>__x64_sys_read (1 samples, 0.04%)</title><rect x="99.5067%" y="485" width="0.0352%" height="15" fill="rgb(241,30,25)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="495.50"></text></g><g><title>ksys_read (1 samples, 0.04%)</title><rect x="99.5067%" y="469" width="0.0352%" height="15" fill="rgb(207,171,38)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="479.50"></text></g><g><title>vfs_read (1 samples, 0.04%)</title><rect x="99.5067%" y="453" width="0.0352%" height="15" fill="rgb(234,70,1)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="463.50"></text></g><g><title>new_sync_read (1 samples, 0.04%)</title><rect x="99.5067%" y="437" width="0.0352%" height="15" fill="rgb(232,178,18)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="447.50"></text></g><g><title>ext4_file_read_iter (1 samples, 0.04%)</title><rect x="99.5067%" y="421" width="0.0352%" height="15" fill="rgb(241,78,40)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="431.50"></text></g><g><title>generic_file_read_iter (1 samples, 0.04%)</title><rect x="99.5067%" y="405" width="0.0352%" height="15" fill="rgb(222,35,25)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="415.50"></text></g><g><title>filemap_read (1 samples, 0.04%)</title><rect x="99.5067%" y="389" width="0.0352%" height="15" fill="rgb(207,92,16)" fg:x="2824" fg:w="1"/><text x="99.7567%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="99.5419%" y="709" width="0.0352%" height="15" fill="rgb(216,59,51)" fg:x="2825" fg:w="1"/><text x="99.7919%" y="719.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="99.5772%" y="677" width="0.0352%" height="15" fill="rgb(213,80,28)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="687.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.04%)</title><rect x="99.5772%" y="661" width="0.0352%" height="15" fill="rgb(220,93,7)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="671.50"></text></g><g><title>bprm_execve (1 samples, 0.04%)</title><rect x="99.5772%" y="645" width="0.0352%" height="15" fill="rgb(225,24,44)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="655.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.04%)</title><rect x="99.5772%" y="629" width="0.0352%" height="15" fill="rgb(243,74,40)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="639.50"></text></g><g><title>exec_binprm (1 samples, 0.04%)</title><rect x="99.5772%" y="613" width="0.0352%" height="15" fill="rgb(228,39,7)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="623.50"></text></g><g><title>search_binary_handler (1 samples, 0.04%)</title><rect x="99.5772%" y="597" width="0.0352%" height="15" fill="rgb(227,79,8)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="607.50"></text></g><g><title>load_elf_binary (1 samples, 0.04%)</title><rect x="99.5772%" y="581" width="0.0352%" height="15" fill="rgb(236,58,11)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="591.50"></text></g><g><title>setup_arg_pages (1 samples, 0.04%)</title><rect x="99.5772%" y="565" width="0.0352%" height="15" fill="rgb(249,63,35)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="575.50"></text></g><g><title>mprotect_fixup (1 samples, 0.04%)</title><rect x="99.5772%" y="549" width="0.0352%" height="15" fill="rgb(252,114,16)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="559.50"></text></g><g><title>perf_event_mmap (1 samples, 0.04%)</title><rect x="99.5772%" y="533" width="0.0352%" height="15" fill="rgb(254,151,24)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="543.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.04%)</title><rect x="99.5772%" y="517" width="0.0352%" height="15" fill="rgb(253,54,39)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="527.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.04%)</title><rect x="99.5772%" y="501" width="0.0352%" height="15" fill="rgb(243,25,45)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="511.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.04%)</title><rect x="99.5772%" y="485" width="0.0352%" height="15" fill="rgb(234,134,9)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="495.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.04%)</title><rect x="99.5772%" y="469" width="0.0352%" height="15" fill="rgb(227,166,31)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="479.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.04%)</title><rect x="99.5772%" y="453" width="0.0352%" height="15" fill="rgb(245,143,41)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="463.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.04%)</title><rect x="99.5772%" y="437" width="0.0352%" height="15" fill="rgb(238,181,32)" fg:x="2826" fg:w="1"/><text x="99.8272%" y="447.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.04%)</title><rect x="99.6124%" y="581" width="0.0352%" height="15" fill="rgb(224,113,18)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="591.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.04%)</title><rect x="99.6124%" y="565" width="0.0352%" height="15" fill="rgb(240,229,28)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="575.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.04%)</title><rect x="99.6124%" y="549" width="0.0352%" height="15" fill="rgb(250,185,3)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="559.50"></text></g><g><title>release_pages (1 samples, 0.04%)</title><rect x="99.6124%" y="533" width="0.0352%" height="15" fill="rgb(212,59,25)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="543.50"></text></g><g><title>free_unref_page_list (1 samples, 0.04%)</title><rect x="99.6124%" y="517" width="0.0352%" height="15" fill="rgb(221,87,20)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="527.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.04%)</title><rect x="99.6124%" y="501" width="0.0352%" height="15" fill="rgb(213,74,28)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="511.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.04%)</title><rect x="99.6124%" y="485" width="0.0352%" height="15" fill="rgb(224,132,34)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="495.50"></text></g><g><title>__free_one_page (1 samples, 0.04%)</title><rect x="99.6124%" y="469" width="0.0352%" height="15" fill="rgb(222,101,24)" fg:x="2827" fg:w="1"/><text x="99.8624%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.11%)</title><rect x="99.5772%" y="709" width="0.1057%" height="15" fill="rgb(254,142,4)" fg:x="2826" fg:w="3"/><text x="99.8272%" y="719.50"></text></g><g><title>do_syscall_64 (3 samples, 0.11%)</title><rect x="99.5772%" y="693" width="0.1057%" height="15" fill="rgb(230,229,49)" fg:x="2826" fg:w="3"/><text x="99.8272%" y="703.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.07%)</title><rect x="99.6124%" y="677" width="0.0705%" height="15" fill="rgb(238,70,47)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="687.50"></text></g><g><title>do_group_exit (2 samples, 0.07%)</title><rect x="99.6124%" y="661" width="0.0705%" height="15" fill="rgb(231,160,17)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="671.50"></text></g><g><title>do_exit (2 samples, 0.07%)</title><rect x="99.6124%" y="645" width="0.0705%" height="15" fill="rgb(218,68,53)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="655.50"></text></g><g><title>exit_mm (2 samples, 0.07%)</title><rect x="99.6124%" y="629" width="0.0705%" height="15" fill="rgb(236,111,10)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="639.50"></text></g><g><title>mmput (2 samples, 0.07%)</title><rect x="99.6124%" y="613" width="0.0705%" height="15" fill="rgb(224,34,41)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="623.50"></text></g><g><title>exit_mmap (2 samples, 0.07%)</title><rect x="99.6124%" y="597" width="0.0705%" height="15" fill="rgb(241,118,19)" fg:x="2827" fg:w="2"/><text x="99.8624%" y="607.50"></text></g><g><title>unmap_vmas (1 samples, 0.04%)</title><rect x="99.6476%" y="581" width="0.0352%" height="15" fill="rgb(238,129,25)" fg:x="2828" fg:w="1"/><text x="99.8976%" y="591.50"></text></g><g><title>unmap_single_vma (1 samples, 0.04%)</title><rect x="99.6476%" y="565" width="0.0352%" height="15" fill="rgb(238,22,31)" fg:x="2828" fg:w="1"/><text x="99.8976%" y="575.50"></text></g><g><title>unmap_page_range (1 samples, 0.04%)</title><rect x="99.6476%" y="549" width="0.0352%" height="15" fill="rgb(222,174,48)" fg:x="2828" fg:w="1"/><text x="99.8976%" y="559.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.04%)</title><rect x="99.6476%" y="533" width="0.0352%" height="15" fill="rgb(206,152,40)" fg:x="2828" fg:w="1"/><text x="99.8976%" y="543.50"></text></g><g><title>zap_pte_range (1 samples, 0.04%)</title><rect x="99.6476%" y="517" width="0.0352%" height="15" fill="rgb(218,99,54)" fg:x="2828" fg:w="1"/><text x="99.8976%" y="527.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (1 samples, 0.04%)</title><rect x="99.6829%" y="709" width="0.0352%" height="15" fill="rgb(220,174,26)" fg:x="2829" fg:w="1"/><text x="99.9329%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.04%)</title><rect x="99.7181%" y="709" width="0.0352%" height="15" fill="rgb(245,116,9)" fg:x="2830" fg:w="1"/><text x="99.9681%" y="719.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.04%)</title><rect x="99.7533%" y="613" width="0.0352%" height="15" fill="rgb(209,72,35)" fg:x="2831" fg:w="1"/><text x="100.0033%" y="623.50"></text></g><g><title>all (2,838 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(226,126,21)" fg:x="0" fg:w="2838"/><text x="0.2500%" y="751.50"></text></g><g><title>project1 (2,832 samples, 99.79%)</title><rect x="0.2114%" y="725" width="99.7886%" height="15" fill="rgb(227,192,1)" fg:x="6" fg:w="2832"/><text x="0.4614%" y="735.50">project1</text></g><g><title>ret_from_fork (7 samples, 0.25%)</title><rect x="99.7533%" y="709" width="0.2467%" height="15" fill="rgb(237,180,29)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="719.50"></text></g><g><title>schedule_tail (7 samples, 0.25%)</title><rect x="99.7533%" y="693" width="0.2467%" height="15" fill="rgb(230,197,35)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="703.50"></text></g><g><title>finish_task_switch.isra.0 (7 samples, 0.25%)</title><rect x="99.7533%" y="677" width="0.2467%" height="15" fill="rgb(246,193,31)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="687.50"></text></g><g><title>__perf_event_task_sched_in (7 samples, 0.25%)</title><rect x="99.7533%" y="661" width="0.2467%" height="15" fill="rgb(241,36,4)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="671.50"></text></g><g><title>x86_pmu_enable (7 samples, 0.25%)</title><rect x="99.7533%" y="645" width="0.2467%" height="15" fill="rgb(241,130,17)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="655.50"></text></g><g><title>intel_tfa_pmu_enable_all (7 samples, 0.25%)</title><rect x="99.7533%" y="629" width="0.2467%" height="15" fill="rgb(206,137,32)" fg:x="2831" fg:w="7"/><text x="100.0033%" y="639.50"></text></g><g><title>native_write_msr (6 samples, 0.21%)</title><rect x="99.7886%" y="613" width="0.2114%" height="15" fill="rgb(237,228,51)" fg:x="2832" fg:w="6"/><text x="100.0386%" y="623.50"></text></g></svg></svg>