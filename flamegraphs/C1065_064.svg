<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="3251"><g><title>perf-exec (6 samples, 0.18%)</title><rect x="0.0000%" y="821" width="0.1846%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.18%)</title><rect x="0.0000%" y="805" width="0.1846%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>do_syscall_64 (6 samples, 0.18%)</title><rect x="0.0000%" y="789" width="0.1846%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.18%)</title><rect x="0.0000%" y="773" width="0.1846%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.18%)</title><rect x="0.0000%" y="757" width="0.1846%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>bprm_execve (6 samples, 0.18%)</title><rect x="0.0000%" y="741" width="0.1846%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.18%)</title><rect x="0.0000%" y="725" width="0.1846%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>exec_binprm (6 samples, 0.18%)</title><rect x="0.0000%" y="709" width="0.1846%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>search_binary_handler (6 samples, 0.18%)</title><rect x="0.0000%" y="693" width="0.1846%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>load_elf_binary (6 samples, 0.18%)</title><rect x="0.0000%" y="677" width="0.1846%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>begin_new_exec (6 samples, 0.18%)</title><rect x="0.0000%" y="661" width="0.1846%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>perf_event_exec (6 samples, 0.18%)</title><rect x="0.0000%" y="645" width="0.1846%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>perf_event_enable_on_exec (6 samples, 0.18%)</title><rect x="0.0000%" y="629" width="0.1846%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>ctx_resched (6 samples, 0.18%)</title><rect x="0.0000%" y="613" width="0.1846%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.18%)</title><rect x="0.0000%" y="597" width="0.1846%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.18%)</title><rect x="0.0000%" y="581" width="0.1846%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>native_write_msr (6 samples, 0.18%)</title><rect x="0.0000%" y="565" width="0.1846%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50"></text></g><g><title>[[heap]] (1 samples, 0.03%)</title><rect x="0.1846%" y="805" width="0.0308%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.4346%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.03%)</title><rect x="0.1846%" y="789" width="0.0308%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.4346%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="0.2153%" y="789" width="0.0615%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="2"/><text x="0.4653%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.03%)</title><rect x="0.2461%" y="773" width="0.0308%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="0.4961%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="0.2461%" y="757" width="0.0308%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="0.4961%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="0.2768%" y="741" width="0.0308%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="0.5268%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="0.2768%" y="725" width="0.0308%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="0.5268%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.2768%" y="709" width="0.0308%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5268%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.2768%" y="693" width="0.0308%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="0.5268%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="0.2768%" y="677" width="0.0308%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="0.5268%" y="687.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="0.2768%" y="661" width="0.0308%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="0.5268%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="0.2768%" y="645" width="0.0308%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="0.5268%" y="655.50"></text></g><g><title>[anon] (4 samples, 0.12%)</title><rect x="0.2153%" y="805" width="0.1230%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="4"/><text x="0.4653%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.06%)</title><rect x="0.2768%" y="789" width="0.0615%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="2"/><text x="0.5268%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (2 samples, 0.06%)</title><rect x="0.2768%" y="773" width="0.0615%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="2"/><text x="0.5268%" y="783.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (2 samples, 0.06%)</title><rect x="0.2768%" y="757" width="0.0615%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="2"/><text x="0.5268%" y="767.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (1 samples, 0.03%)</title><rect x="0.3076%" y="741" width="0.0308%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="0.5576%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (1 samples, 0.03%)</title><rect x="0.3076%" y="725" width="0.0308%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="0.5576%" y="735.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.3076%" y="709" width="0.0308%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="0.5576%" y="719.50"></text></g><g><title>__GI___libc_free (2 samples, 0.06%)</title><rect x="0.3384%" y="789" width="0.0615%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="2"/><text x="0.5884%" y="799.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="0.3999%" y="789" width="0.0308%" height="15" fill="rgb(245,192,40)" fg:x="13" fg:w="1"/><text x="0.6499%" y="799.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="0.4306%" y="789" width="0.0308%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="0.6806%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="0.4614%" y="789" width="0.0308%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="0.7114%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (5 samples, 0.15%)</title><rect x="0.4922%" y="789" width="0.1538%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="5"/><text x="0.7422%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2 samples, 0.06%)</title><rect x="0.5844%" y="773" width="0.0615%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="2"/><text x="0.8344%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.06%)</title><rect x="0.5844%" y="757" width="0.0615%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="2"/><text x="0.8344%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.06%)</title><rect x="0.5844%" y="741" width="0.0615%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="2"/><text x="0.8344%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.06%)</title><rect x="0.5844%" y="725" width="0.0615%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="2"/><text x="0.8344%" y="735.50"></text></g><g><title>[unknown] (12 samples, 0.37%)</title><rect x="0.3384%" y="805" width="0.3691%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="12"/><text x="0.5884%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (2 samples, 0.06%)</title><rect x="0.6460%" y="789" width="0.0615%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="2"/><text x="0.8960%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::cdcl_solver::CDCLSolver&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="581" width="0.0308%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="1"/><text x="0.9575%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::clause::ClauseAllocator&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="565" width="0.0308%" height="15" fill="rgb(239,60,40)" fg:x="23" fg:w="1"/><text x="0.9575%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;slotmap::basic::SlotMap&lt;project1::solver::clause::ClauseKey,project1::solver::clause::Clause&gt;&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="549" width="0.0308%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="1"/><text x="0.9575%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="533" width="0.0308%" height="15" fill="rgb(225,35,8)" fg:x="23" fg:w="1"/><text x="0.9575%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.7075%" y="517" width="0.0308%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="1"/><text x="0.9575%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;]&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="501" width="0.0308%" height="15" fill="rgb(247,123,22)" fg:x="23" fg:w="1"/><text x="0.9575%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="485" width="0.0308%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="1"/><text x="0.9575%" y="495.50"></text></g><g><title>&lt;slotmap::basic::Slot&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.7075%" y="469" width="0.0308%" height="15" fill="rgb(231,145,46)" fg:x="23" fg:w="1"/><text x="0.9575%" y="479.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (1 samples, 0.03%)</title><rect x="0.7075%" y="453" width="0.0308%" height="15" fill="rgb(251,118,11)" fg:x="23" fg:w="1"/><text x="0.9575%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::clause::Clause&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="437" width="0.0308%" height="15" fill="rgb(217,147,25)" fg:x="23" fg:w="1"/><text x="0.9575%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="421" width="0.0308%" height="15" fill="rgb(247,81,37)" fg:x="23" fg:w="1"/><text x="0.9575%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="0.7075%" y="405" width="0.0308%" height="15" fill="rgb(209,12,38)" fg:x="23" fg:w="1"/><text x="0.9575%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.7075%" y="389" width="0.0308%" height="15" fill="rgb(227,1,9)" fg:x="23" fg:w="1"/><text x="0.9575%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.7075%" y="373" width="0.0308%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="1"/><text x="0.9575%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="0.7075%" y="357" width="0.0308%" height="15" fill="rgb(221,10,30)" fg:x="23" fg:w="1"/><text x="0.9575%" y="367.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="0.7075%" y="341" width="0.0308%" height="15" fill="rgb(210,229,1)" fg:x="23" fg:w="1"/><text x="0.9575%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="0.7075%" y="325" width="0.0308%" height="15" fill="rgb(222,148,37)" fg:x="23" fg:w="1"/><text x="0.9575%" y="335.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="0.7075%" y="309" width="0.0308%" height="15" fill="rgb(234,67,33)" fg:x="23" fg:w="1"/><text x="0.9575%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="0.7075%" y="293" width="0.0308%" height="15" fill="rgb(247,98,35)" fg:x="23" fg:w="1"/><text x="0.9575%" y="303.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="0.7075%" y="277" width="0.0308%" height="15" fill="rgb(247,138,52)" fg:x="23" fg:w="1"/><text x="0.9575%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::new (1 samples, 0.03%)</title><rect x="0.7382%" y="581" width="0.0308%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="0.9882%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::init (1 samples, 0.03%)</title><rect x="0.7382%" y="565" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="0.9882%" y="575.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_clause (1 samples, 0.03%)</title><rect x="0.7382%" y="549" width="0.0308%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="0.9882%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="0.7382%" y="533" width="0.0308%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="1"/><text x="0.9882%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="0.7382%" y="517" width="0.0308%" height="15" fill="rgb(244,35,45)" fg:x="24" fg:w="1"/><text x="0.9882%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="0.7382%" y="501" width="0.0308%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="1"/><text x="0.9882%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="0.7382%" y="485" width="0.0308%" height="15" fill="rgb(240,54,50)" fg:x="24" fg:w="1"/><text x="0.9882%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="0.7382%" y="469" width="0.0308%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="0.9882%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="0.7382%" y="453" width="0.0308%" height="15" fill="rgb(207,117,47)" fg:x="24" fg:w="1"/><text x="0.9882%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="0.7382%" y="437" width="0.0308%" height="15" fill="rgb(249,43,39)" fg:x="24" fg:w="1"/><text x="0.9882%" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="0.7382%" y="421" width="0.0308%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="1"/><text x="0.9882%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="0.7382%" y="405" width="0.0308%" height="15" fill="rgb(236,212,23)" fg:x="24" fg:w="1"/><text x="0.9882%" y="415.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="0.7382%" y="389" width="0.0308%" height="15" fill="rgb(242,79,21)" fg:x="24" fg:w="1"/><text x="0.9882%" y="399.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="0.7382%" y="373" width="0.0308%" height="15" fill="rgb(211,96,35)" fg:x="24" fg:w="1"/><text x="0.9882%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="0.7382%" y="357" width="0.0308%" height="15" fill="rgb(253,215,40)" fg:x="24" fg:w="1"/><text x="0.9882%" y="367.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="0.7382%" y="341" width="0.0308%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="1"/><text x="0.9882%" y="351.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="0.7382%" y="325" width="0.0308%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="1"/><text x="0.9882%" y="335.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="0.7382%" y="309" width="0.0308%" height="15" fill="rgb(235,213,38)" fg:x="24" fg:w="1"/><text x="0.9882%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="0.7382%" y="293" width="0.0308%" height="15" fill="rgb(237,122,38)" fg:x="24" fg:w="1"/><text x="0.9882%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="0.7382%" y="277" width="0.0308%" height="15" fill="rgb(244,218,35)" fg:x="24" fg:w="1"/><text x="0.9882%" y="287.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="0.7382%" y="261" width="0.0308%" height="15" fill="rgb(240,68,47)" fg:x="24" fg:w="1"/><text x="0.9882%" y="271.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="0.7382%" y="245" width="0.0308%" height="15" fill="rgb(210,16,53)" fg:x="24" fg:w="1"/><text x="0.9882%" y="255.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="0.7382%" y="229" width="0.0308%" height="15" fill="rgb(235,124,12)" fg:x="24" fg:w="1"/><text x="0.9882%" y="239.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="0.7382%" y="213" width="0.0308%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="1"/><text x="0.9882%" y="223.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="0.7382%" y="197" width="0.0308%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="1"/><text x="0.9882%" y="207.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="0.7382%" y="181" width="0.0308%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="1"/><text x="0.9882%" y="191.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="0.7382%" y="165" width="0.0308%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="1"/><text x="0.9882%" y="175.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="0.9536%" y="549" width="0.0308%" height="15" fill="rgb(228,99,48)" fg:x="31" fg:w="1"/><text x="1.2036%" y="559.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (1 samples, 0.03%)</title><rect x="0.9536%" y="533" width="0.0308%" height="15" fill="rgb(253,11,6)" fg:x="31" fg:w="1"/><text x="1.2036%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.03%)</title><rect x="0.9536%" y="517" width="0.0308%" height="15" fill="rgb(247,143,39)" fg:x="31" fg:w="1"/><text x="1.2036%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (1 samples, 0.03%)</title><rect x="0.9536%" y="501" width="0.0308%" height="15" fill="rgb(236,97,10)" fg:x="31" fg:w="1"/><text x="1.2036%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="0.9843%" y="549" width="0.0615%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="2"/><text x="1.2343%" y="559.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="0.9843%" y="533" width="0.0615%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="2"/><text x="1.2343%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1 samples, 0.03%)</title><rect x="1.0458%" y="549" width="0.0308%" height="15" fill="rgb(220,129,5)" fg:x="34" fg:w="1"/><text x="1.2958%" y="559.50"></text></g><g><title>__rdl_alloc (8 samples, 0.25%)</title><rect x="2.7069%" y="373" width="0.2461%" height="15" fill="rgb(242,17,10)" fg:x="88" fg:w="8"/><text x="2.9569%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.25%)</title><rect x="2.7069%" y="357" width="0.2461%" height="15" fill="rgb(242,107,0)" fg:x="88" fg:w="8"/><text x="2.9569%" y="367.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.25%)</title><rect x="2.7069%" y="341" width="0.2461%" height="15" fill="rgb(251,28,31)" fg:x="88" fg:w="8"/><text x="2.9569%" y="351.50"></text></g><g><title>tcache_get (5 samples, 0.15%)</title><rect x="2.7991%" y="325" width="0.1538%" height="15" fill="rgb(233,223,10)" fg:x="91" fg:w="5"/><text x="3.0491%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.28%)</title><rect x="2.7069%" y="533" width="0.2768%" height="15" fill="rgb(215,21,27)" fg:x="88" fg:w="9"/><text x="2.9569%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.28%)</title><rect x="2.7069%" y="517" width="0.2768%" height="15" fill="rgb(232,23,21)" fg:x="88" fg:w="9"/><text x="2.9569%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.28%)</title><rect x="2.7069%" y="501" width="0.2768%" height="15" fill="rgb(244,5,23)" fg:x="88" fg:w="9"/><text x="2.9569%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.28%)</title><rect x="2.7069%" y="485" width="0.2768%" height="15" fill="rgb(226,81,46)" fg:x="88" fg:w="9"/><text x="2.9569%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="2.7069%" y="469" width="0.2768%" height="15" fill="rgb(247,70,30)" fg:x="88" fg:w="9"/><text x="2.9569%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="2.7069%" y="453" width="0.2768%" height="15" fill="rgb(212,68,19)" fg:x="88" fg:w="9"/><text x="2.9569%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.28%)</title><rect x="2.7069%" y="437" width="0.2768%" height="15" fill="rgb(240,187,13)" fg:x="88" fg:w="9"/><text x="2.9569%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.28%)</title><rect x="2.7069%" y="421" width="0.2768%" height="15" fill="rgb(223,113,26)" fg:x="88" fg:w="9"/><text x="2.9569%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.28%)</title><rect x="2.7069%" y="405" width="0.2768%" height="15" fill="rgb(206,192,2)" fg:x="88" fg:w="9"/><text x="2.9569%" y="415.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.28%)</title><rect x="2.7069%" y="389" width="0.2768%" height="15" fill="rgb(241,108,4)" fg:x="88" fg:w="9"/><text x="2.9569%" y="399.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="2.9529%" y="373" width="0.0308%" height="15" fill="rgb(247,173,49)" fg:x="96" fg:w="1"/><text x="3.2029%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="2.9837%" y="533" width="0.0615%" height="15" fill="rgb(224,114,35)" fg:x="97" fg:w="2"/><text x="3.2337%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.15%)</title><rect x="3.0452%" y="517" width="0.1538%" height="15" fill="rgb(245,159,27)" fg:x="99" fg:w="5"/><text x="3.2952%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.18%)</title><rect x="3.0452%" y="533" width="0.1846%" height="15" fill="rgb(245,172,44)" fg:x="99" fg:w="6"/><text x="3.2952%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="3.1990%" y="517" width="0.0308%" height="15" fill="rgb(236,23,11)" fg:x="104" fg:w="1"/><text x="3.4490%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="3.1990%" y="501" width="0.0308%" height="15" fill="rgb(205,117,38)" fg:x="104" fg:w="1"/><text x="3.4490%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="3.2298%" y="517" width="0.0308%" height="15" fill="rgb(237,72,25)" fg:x="105" fg:w="1"/><text x="3.4798%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.12%)</title><rect x="3.2298%" y="533" width="0.1230%" height="15" fill="rgb(244,70,9)" fg:x="105" fg:w="4"/><text x="3.4798%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.09%)</title><rect x="3.2605%" y="517" width="0.0923%" height="15" fill="rgb(217,125,39)" fg:x="106" fg:w="3"/><text x="3.5105%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="3.2605%" y="501" width="0.0923%" height="15" fill="rgb(235,36,10)" fg:x="106" fg:w="3"/><text x="3.5105%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.46%)</title><rect x="3.3528%" y="533" width="0.4614%" height="15" fill="rgb(251,123,47)" fg:x="109" fg:w="15"/><text x="3.6028%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.40%)</title><rect x="3.4143%" y="517" width="0.3999%" height="15" fill="rgb(221,13,13)" fg:x="111" fg:w="13"/><text x="3.6643%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (6 samples, 0.18%)</title><rect x="3.9373%" y="501" width="0.1846%" height="15" fill="rgb(238,131,9)" fg:x="128" fg:w="6"/><text x="4.1873%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (6 samples, 0.18%)</title><rect x="3.9373%" y="485" width="0.1846%" height="15" fill="rgb(211,50,8)" fg:x="128" fg:w="6"/><text x="4.1873%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (11 samples, 0.34%)</title><rect x="3.8142%" y="533" width="0.3384%" height="15" fill="rgb(245,182,24)" fg:x="124" fg:w="11"/><text x="4.0642%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (11 samples, 0.34%)</title><rect x="3.8142%" y="517" width="0.3384%" height="15" fill="rgb(242,14,37)" fg:x="124" fg:w="11"/><text x="4.0642%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="4.1218%" y="501" width="0.0308%" height="15" fill="rgb(246,228,12)" fg:x="134" fg:w="1"/><text x="4.3718%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="4.1218%" y="485" width="0.0308%" height="15" fill="rgb(213,55,15)" fg:x="134" fg:w="1"/><text x="4.3718%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (3 samples, 0.09%)</title><rect x="4.1526%" y="533" width="0.0923%" height="15" fill="rgb(209,9,3)" fg:x="135" fg:w="3"/><text x="4.4026%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="4.5217%" y="517" width="0.0308%" height="15" fill="rgb(230,59,30)" fg:x="147" fg:w="1"/><text x="4.7717%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="4.5217%" y="501" width="0.0308%" height="15" fill="rgb(209,121,21)" fg:x="147" fg:w="1"/><text x="4.7717%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.62%)</title><rect x="4.2448%" y="533" width="0.6152%" height="15" fill="rgb(220,109,13)" fg:x="138" fg:w="20"/><text x="4.4948%" y="543.50"></text></g><g><title>core::ptr::write (10 samples, 0.31%)</title><rect x="4.5524%" y="517" width="0.3076%" height="15" fill="rgb(232,18,1)" fg:x="148" fg:w="10"/><text x="4.8024%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.06%)</title><rect x="4.8600%" y="533" width="0.0615%" height="15" fill="rgb(215,41,42)" fg:x="158" fg:w="2"/><text x="5.1100%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.15%)</title><rect x="4.9216%" y="533" width="0.1538%" height="15" fill="rgb(224,123,36)" fg:x="160" fg:w="5"/><text x="5.1716%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.15%)</title><rect x="4.9216%" y="517" width="0.1538%" height="15" fill="rgb(240,125,3)" fg:x="160" fg:w="5"/><text x="5.1716%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.15%)</title><rect x="4.9216%" y="501" width="0.1538%" height="15" fill="rgb(205,98,50)" fg:x="160" fg:w="5"/><text x="5.1716%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.15%)</title><rect x="4.9216%" y="485" width="0.1538%" height="15" fill="rgb(205,185,37)" fg:x="160" fg:w="5"/><text x="5.1716%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.15%)</title><rect x="4.9216%" y="469" width="0.1538%" height="15" fill="rgb(238,207,15)" fg:x="160" fg:w="5"/><text x="5.1716%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.15%)</title><rect x="4.9216%" y="453" width="0.1538%" height="15" fill="rgb(213,199,42)" fg:x="160" fg:w="5"/><text x="5.1716%" y="463.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.15%)</title><rect x="4.9216%" y="437" width="0.1538%" height="15" fill="rgb(235,201,11)" fg:x="160" fg:w="5"/><text x="5.1716%" y="447.50"></text></g><g><title>__rdl_alloc (5 samples, 0.15%)</title><rect x="4.9216%" y="421" width="0.1538%" height="15" fill="rgb(207,46,11)" fg:x="160" fg:w="5"/><text x="5.1716%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.15%)</title><rect x="4.9216%" y="405" width="0.1538%" height="15" fill="rgb(241,35,35)" fg:x="160" fg:w="5"/><text x="5.1716%" y="415.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.15%)</title><rect x="4.9216%" y="389" width="0.1538%" height="15" fill="rgb(243,32,47)" fg:x="160" fg:w="5"/><text x="5.1716%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="5.0754%" y="533" width="0.0308%" height="15" fill="rgb(247,202,23)" fg:x="165" fg:w="1"/><text x="5.3254%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (6 samples, 0.18%)</title><rect x="5.1061%" y="533" width="0.1846%" height="15" fill="rgb(219,102,11)" fg:x="166" fg:w="6"/><text x="5.3561%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (6 samples, 0.18%)</title><rect x="5.1061%" y="517" width="0.1846%" height="15" fill="rgb(243,110,44)" fg:x="166" fg:w="6"/><text x="5.3561%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.18%)</title><rect x="5.1061%" y="501" width="0.1846%" height="15" fill="rgb(222,74,54)" fg:x="166" fg:w="6"/><text x="5.3561%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.18%)</title><rect x="5.1061%" y="485" width="0.1846%" height="15" fill="rgb(216,99,12)" fg:x="166" fg:w="6"/><text x="5.3561%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (3 samples, 0.09%)</title><rect x="5.1984%" y="469" width="0.0923%" height="15" fill="rgb(226,22,26)" fg:x="169" fg:w="3"/><text x="5.4484%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (3 samples, 0.09%)</title><rect x="5.1984%" y="453" width="0.0923%" height="15" fill="rgb(217,163,10)" fg:x="169" fg:w="3"/><text x="5.4484%" y="463.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.09%)</title><rect x="5.1984%" y="437" width="0.0923%" height="15" fill="rgb(213,25,53)" fg:x="169" fg:w="3"/><text x="5.4484%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.09%)</title><rect x="5.1984%" y="421" width="0.0923%" height="15" fill="rgb(252,105,26)" fg:x="169" fg:w="3"/><text x="5.4484%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (3 samples, 0.09%)</title><rect x="5.1984%" y="405" width="0.0923%" height="15" fill="rgb(220,39,43)" fg:x="169" fg:w="3"/><text x="5.4484%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (3 samples, 0.09%)</title><rect x="5.1984%" y="389" width="0.0923%" height="15" fill="rgb(229,68,48)" fg:x="169" fg:w="3"/><text x="5.4484%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (3 samples, 0.09%)</title><rect x="5.1984%" y="373" width="0.0923%" height="15" fill="rgb(252,8,32)" fg:x="169" fg:w="3"/><text x="5.4484%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="5.2292%" y="357" width="0.0615%" height="15" fill="rgb(223,20,43)" fg:x="170" fg:w="2"/><text x="5.4792%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="5.2292%" y="341" width="0.0615%" height="15" fill="rgb(229,81,49)" fg:x="170" fg:w="2"/><text x="5.4792%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="5.2292%" y="325" width="0.0615%" height="15" fill="rgb(236,28,36)" fg:x="170" fg:w="2"/><text x="5.4792%" y="335.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="5.2907%" y="501" width="0.0308%" height="15" fill="rgb(249,185,26)" fg:x="172" fg:w="1"/><text x="5.5407%" y="511.50"></text></g><g><title>core::mem::take (2 samples, 0.06%)</title><rect x="5.2907%" y="533" width="0.0615%" height="15" fill="rgb(249,174,33)" fg:x="172" fg:w="2"/><text x="5.5407%" y="543.50"></text></g><g><title>core::mem::replace (2 samples, 0.06%)</title><rect x="5.2907%" y="517" width="0.0615%" height="15" fill="rgb(233,201,37)" fg:x="172" fg:w="2"/><text x="5.5407%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="5.3214%" y="501" width="0.0308%" height="15" fill="rgb(221,78,26)" fg:x="173" fg:w="1"/><text x="5.5714%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="5.3522%" y="533" width="0.0308%" height="15" fill="rgb(250,127,30)" fg:x="174" fg:w="1"/><text x="5.6022%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (1 samples, 0.03%)</title><rect x="5.3522%" y="517" width="0.0308%" height="15" fill="rgb(230,49,44)" fg:x="174" fg:w="1"/><text x="5.6022%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="5.3522%" y="501" width="0.0308%" height="15" fill="rgb(229,67,23)" fg:x="174" fg:w="1"/><text x="5.6022%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (2 samples, 0.06%)</title><rect x="5.3830%" y="533" width="0.0615%" height="15" fill="rgb(249,83,47)" fg:x="175" fg:w="2"/><text x="5.6330%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (2 samples, 0.06%)</title><rect x="5.3830%" y="517" width="0.0615%" height="15" fill="rgb(215,43,3)" fg:x="175" fg:w="2"/><text x="5.6330%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="5.3830%" y="501" width="0.0615%" height="15" fill="rgb(238,154,13)" fg:x="175" fg:w="2"/><text x="5.6330%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="5.3830%" y="485" width="0.0615%" height="15" fill="rgb(219,56,2)" fg:x="175" fg:w="2"/><text x="5.6330%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="5.3830%" y="469" width="0.0615%" height="15" fill="rgb(233,0,4)" fg:x="175" fg:w="2"/><text x="5.6330%" y="479.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.06%)</title><rect x="5.3830%" y="453" width="0.0615%" height="15" fill="rgb(235,30,7)" fg:x="175" fg:w="2"/><text x="5.6330%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.06%)</title><rect x="5.3830%" y="437" width="0.0615%" height="15" fill="rgb(250,79,13)" fg:x="175" fg:w="2"/><text x="5.6330%" y="447.50"></text></g><g><title>__GI___libc_free (2 samples, 0.06%)</title><rect x="5.3830%" y="421" width="0.0615%" height="15" fill="rgb(211,146,34)" fg:x="175" fg:w="2"/><text x="5.6330%" y="431.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="5.4137%" y="405" width="0.0308%" height="15" fill="rgb(228,22,38)" fg:x="176" fg:w="1"/><text x="5.6637%" y="415.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="5.4137%" y="389" width="0.0308%" height="15" fill="rgb(235,168,5)" fg:x="176" fg:w="1"/><text x="5.6637%" y="399.50"></text></g><g><title>heap_for_ptr (1 samples, 0.03%)</title><rect x="5.4137%" y="373" width="0.0308%" height="15" fill="rgb(221,155,16)" fg:x="176" fg:w="1"/><text x="5.6637%" y="383.50"></text></g><g><title>heap_max_size (1 samples, 0.03%)</title><rect x="5.4137%" y="357" width="0.0308%" height="15" fill="rgb(215,215,53)" fg:x="176" fg:w="1"/><text x="5.6637%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 0.31%)</title><rect x="5.4445%" y="533" width="0.3076%" height="15" fill="rgb(223,4,10)" fg:x="177" fg:w="10"/><text x="5.6945%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="5.4752%" y="517" width="0.2768%" height="15" fill="rgb(234,103,6)" fg:x="178" fg:w="9"/><text x="5.7252%" y="527.50"></text></g><g><title>__memcpy_evex_unaligned_erms (9 samples, 0.28%)</title><rect x="5.4752%" y="501" width="0.2768%" height="15" fill="rgb(227,97,0)" fg:x="178" fg:w="9"/><text x="5.7252%" y="511.50"></text></g><g><title>log::max_level (6 samples, 0.18%)</title><rect x="5.7521%" y="533" width="0.1846%" height="15" fill="rgb(234,150,53)" fg:x="187" fg:w="6"/><text x="6.0021%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.18%)</title><rect x="5.7521%" y="517" width="0.1846%" height="15" fill="rgb(228,201,54)" fg:x="187" fg:w="6"/><text x="6.0021%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.18%)</title><rect x="5.7521%" y="501" width="0.1846%" height="15" fill="rgb(222,22,37)" fg:x="187" fg:w="6"/><text x="6.0021%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="5.9982%" y="501" width="0.0615%" height="15" fill="rgb(237,53,32)" fg:x="195" fg:w="2"/><text x="6.2482%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="5.9982%" y="517" width="0.0923%" height="15" fill="rgb(233,25,53)" fg:x="195" fg:w="3"/><text x="6.2482%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="6.0597%" y="501" width="0.0308%" height="15" fill="rgb(210,40,34)" fg:x="197" fg:w="1"/><text x="6.3097%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="6.0597%" y="485" width="0.0308%" height="15" fill="rgb(241,220,44)" fg:x="197" fg:w="1"/><text x="6.3097%" y="495.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (6 samples, 0.18%)</title><rect x="5.9366%" y="533" width="0.1846%" height="15" fill="rgb(235,28,35)" fg:x="193" fg:w="6"/><text x="6.1866%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="6.0904%" y="517" width="0.0308%" height="15" fill="rgb(210,56,17)" fg:x="198" fg:w="1"/><text x="6.3404%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="6.2750%" y="501" width="0.0923%" height="15" fill="rgb(224,130,29)" fg:x="204" fg:w="3"/><text x="6.5250%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="6.3365%" y="485" width="0.0308%" height="15" fill="rgb(235,212,8)" fg:x="206" fg:w="1"/><text x="6.5865%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="6.3365%" y="469" width="0.0308%" height="15" fill="rgb(223,33,50)" fg:x="206" fg:w="1"/><text x="6.5865%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.12%)</title><rect x="6.2750%" y="517" width="0.1230%" height="15" fill="rgb(219,149,13)" fg:x="204" fg:w="4"/><text x="6.5250%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="6.3673%" y="501" width="0.0308%" height="15" fill="rgb(250,156,29)" fg:x="207" fg:w="1"/><text x="6.6173%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="6.3673%" y="485" width="0.0308%" height="15" fill="rgb(216,193,19)" fg:x="207" fg:w="1"/><text x="6.6173%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="6.3980%" y="517" width="0.0308%" height="15" fill="rgb(216,135,14)" fg:x="208" fg:w="1"/><text x="6.6480%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="6.3980%" y="501" width="0.0308%" height="15" fill="rgb(241,47,5)" fg:x="208" fg:w="1"/><text x="6.6480%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="6.3980%" y="485" width="0.0308%" height="15" fill="rgb(233,42,35)" fg:x="208" fg:w="1"/><text x="6.6480%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="6.3980%" y="469" width="0.0308%" height="15" fill="rgb(231,13,6)" fg:x="208" fg:w="1"/><text x="6.6480%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.03%)</title><rect x="6.4288%" y="517" width="0.0308%" height="15" fill="rgb(207,181,40)" fg:x="209" fg:w="1"/><text x="6.6788%" y="527.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (1 samples, 0.03%)</title><rect x="6.4288%" y="501" width="0.0308%" height="15" fill="rgb(254,173,49)" fg:x="209" fg:w="1"/><text x="6.6788%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (1 samples, 0.03%)</title><rect x="6.4288%" y="485" width="0.0308%" height="15" fill="rgb(221,1,38)" fg:x="209" fg:w="1"/><text x="6.6788%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (1 samples, 0.03%)</title><rect x="6.4596%" y="517" width="0.0308%" height="15" fill="rgb(206,124,46)" fg:x="210" fg:w="1"/><text x="6.7096%" y="527.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="6.4596%" y="501" width="0.0308%" height="15" fill="rgb(249,21,11)" fg:x="210" fg:w="1"/><text x="6.7096%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (3 samples, 0.09%)</title><rect x="6.4903%" y="517" width="0.0923%" height="15" fill="rgb(222,201,40)" fg:x="211" fg:w="3"/><text x="6.7403%" y="527.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (2 samples, 0.06%)</title><rect x="6.5211%" y="501" width="0.0615%" height="15" fill="rgb(235,61,29)" fg:x="212" fg:w="2"/><text x="6.7711%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="6.6133%" y="373" width="0.0923%" height="15" fill="rgb(219,207,3)" fg:x="215" fg:w="3"/><text x="6.8633%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="6.6133%" y="357" width="0.0923%" height="15" fill="rgb(222,56,46)" fg:x="215" fg:w="3"/><text x="6.8633%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="6.6133%" y="341" width="0.0923%" height="15" fill="rgb(239,76,54)" fg:x="215" fg:w="3"/><text x="6.8633%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.09%)</title><rect x="6.6133%" y="325" width="0.0923%" height="15" fill="rgb(231,124,27)" fg:x="215" fg:w="3"/><text x="6.8633%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="6.6441%" y="309" width="0.0615%" height="15" fill="rgb(249,195,6)" fg:x="216" fg:w="2"/><text x="6.8941%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.18%)</title><rect x="6.6133%" y="405" width="0.1846%" height="15" fill="rgb(237,174,47)" fg:x="215" fg:w="6"/><text x="6.8633%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.18%)</title><rect x="6.6133%" y="389" width="0.1846%" height="15" fill="rgb(206,201,31)" fg:x="215" fg:w="6"/><text x="6.8633%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="6.7056%" y="373" width="0.0923%" height="15" fill="rgb(231,57,52)" fg:x="218" fg:w="3"/><text x="6.9556%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="6.7056%" y="357" width="0.0923%" height="15" fill="rgb(248,177,22)" fg:x="218" fg:w="3"/><text x="6.9556%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="6.7056%" y="341" width="0.0923%" height="15" fill="rgb(215,211,37)" fg:x="218" fg:w="3"/><text x="6.9556%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="6.7056%" y="325" width="0.0923%" height="15" fill="rgb(241,128,51)" fg:x="218" fg:w="3"/><text x="6.9556%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="6.7056%" y="309" width="0.0923%" height="15" fill="rgb(227,165,31)" fg:x="218" fg:w="3"/><text x="6.9556%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="6.7056%" y="293" width="0.0923%" height="15" fill="rgb(228,167,24)" fg:x="218" fg:w="3"/><text x="6.9556%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="6.7056%" y="277" width="0.0923%" height="15" fill="rgb(228,143,12)" fg:x="218" fg:w="3"/><text x="6.9556%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="6.7364%" y="261" width="0.0615%" height="15" fill="rgb(249,149,8)" fg:x="219" fg:w="2"/><text x="6.9864%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="6.7364%" y="245" width="0.0615%" height="15" fill="rgb(243,35,44)" fg:x="219" fg:w="2"/><text x="6.9864%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.7979%" y="357" width="0.0308%" height="15" fill="rgb(246,89,9)" fg:x="221" fg:w="1"/><text x="7.0479%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="6.7979%" y="341" width="0.0308%" height="15" fill="rgb(233,213,13)" fg:x="221" fg:w="1"/><text x="7.0479%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="6.8287%" y="341" width="0.0615%" height="15" fill="rgb(233,141,41)" fg:x="222" fg:w="2"/><text x="7.0787%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="6.8287%" y="325" width="0.0615%" height="15" fill="rgb(239,167,4)" fg:x="222" fg:w="2"/><text x="7.0787%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="6.8287%" y="309" width="0.0615%" height="15" fill="rgb(209,217,16)" fg:x="222" fg:w="2"/><text x="7.0787%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="6.8287%" y="293" width="0.0615%" height="15" fill="rgb(219,88,35)" fg:x="222" fg:w="2"/><text x="7.0787%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.12%)</title><rect x="6.8287%" y="357" width="0.1230%" height="15" fill="rgb(220,193,23)" fg:x="222" fg:w="4"/><text x="7.0787%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="6.8902%" y="341" width="0.0615%" height="15" fill="rgb(230,90,52)" fg:x="224" fg:w="2"/><text x="7.1402%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="6.8902%" y="325" width="0.0615%" height="15" fill="rgb(252,106,19)" fg:x="224" fg:w="2"/><text x="7.1402%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="6.8902%" y="309" width="0.0615%" height="15" fill="rgb(206,74,20)" fg:x="224" fg:w="2"/><text x="7.1402%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="6.8902%" y="293" width="0.0615%" height="15" fill="rgb(230,138,44)" fg:x="224" fg:w="2"/><text x="7.1402%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.40%)</title><rect x="6.6133%" y="421" width="0.3999%" height="15" fill="rgb(235,182,43)" fg:x="215" fg:w="13"/><text x="6.8633%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.22%)</title><rect x="6.7979%" y="405" width="0.2153%" height="15" fill="rgb(242,16,51)" fg:x="221" fg:w="7"/><text x="7.0479%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.22%)</title><rect x="6.7979%" y="389" width="0.2153%" height="15" fill="rgb(248,9,4)" fg:x="221" fg:w="7"/><text x="7.0479%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.22%)</title><rect x="6.7979%" y="373" width="0.2153%" height="15" fill="rgb(210,31,22)" fg:x="221" fg:w="7"/><text x="7.0479%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="6.9517%" y="357" width="0.0615%" height="15" fill="rgb(239,54,39)" fg:x="226" fg:w="2"/><text x="7.2017%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (14 samples, 0.43%)</title><rect x="6.6133%" y="469" width="0.4306%" height="15" fill="rgb(230,99,41)" fg:x="215" fg:w="14"/><text x="6.8633%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14 samples, 0.43%)</title><rect x="6.6133%" y="453" width="0.4306%" height="15" fill="rgb(253,106,12)" fg:x="215" fg:w="14"/><text x="6.8633%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (14 samples, 0.43%)</title><rect x="6.6133%" y="437" width="0.4306%" height="15" fill="rgb(213,46,41)" fg:x="215" fg:w="14"/><text x="6.8633%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="7.0132%" y="421" width="0.0308%" height="15" fill="rgb(215,133,35)" fg:x="228" fg:w="1"/><text x="7.2632%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="7.0440%" y="453" width="0.0308%" height="15" fill="rgb(213,28,5)" fg:x="229" fg:w="1"/><text x="7.2940%" y="463.50"></text></g><g><title>compare::Compare::compares_ge (2 samples, 0.06%)</title><rect x="7.0747%" y="437" width="0.0615%" height="15" fill="rgb(215,77,49)" fg:x="230" fg:w="2"/><text x="7.3247%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (2 samples, 0.06%)</title><rect x="7.0747%" y="421" width="0.0615%" height="15" fill="rgb(248,100,22)" fg:x="230" fg:w="2"/><text x="7.3247%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.06%)</title><rect x="7.0747%" y="405" width="0.0615%" height="15" fill="rgb(208,67,9)" fg:x="230" fg:w="2"/><text x="7.3247%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (2 samples, 0.06%)</title><rect x="7.0747%" y="389" width="0.0615%" height="15" fill="rgb(219,133,21)" fg:x="230" fg:w="2"/><text x="7.3247%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (2 samples, 0.06%)</title><rect x="7.0747%" y="373" width="0.0615%" height="15" fill="rgb(246,46,29)" fg:x="230" fg:w="2"/><text x="7.3247%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (2 samples, 0.06%)</title><rect x="7.0747%" y="357" width="0.0615%" height="15" fill="rgb(246,185,52)" fg:x="230" fg:w="2"/><text x="7.3247%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (2 samples, 0.06%)</title><rect x="7.0747%" y="341" width="0.0615%" height="15" fill="rgb(252,136,11)" fg:x="230" fg:w="2"/><text x="7.3247%" y="351.50"></text></g><g><title>compare::Compare::compares_le (1 samples, 0.03%)</title><rect x="7.1363%" y="437" width="0.0308%" height="15" fill="rgb(219,138,53)" fg:x="232" fg:w="1"/><text x="7.3863%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="7.1363%" y="421" width="0.0308%" height="15" fill="rgb(211,51,23)" fg:x="232" fg:w="1"/><text x="7.3863%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="7.1363%" y="405" width="0.0308%" height="15" fill="rgb(247,221,28)" fg:x="232" fg:w="1"/><text x="7.3863%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.18%)</title><rect x="7.1670%" y="405" width="0.1846%" height="15" fill="rgb(251,222,45)" fg:x="233" fg:w="6"/><text x="7.4170%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="7.4439%" y="261" width="0.0615%" height="15" fill="rgb(217,162,53)" fg:x="242" fg:w="2"/><text x="7.6939%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="7.4131%" y="277" width="0.1230%" height="15" fill="rgb(229,93,14)" fg:x="241" fg:w="4"/><text x="7.6631%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="7.5054%" y="261" width="0.0308%" height="15" fill="rgb(209,67,49)" fg:x="244" fg:w="1"/><text x="7.7554%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.25%)</title><rect x="7.3516%" y="325" width="0.2461%" height="15" fill="rgb(213,87,29)" fg:x="239" fg:w="8"/><text x="7.6016%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.25%)</title><rect x="7.3516%" y="309" width="0.2461%" height="15" fill="rgb(205,151,52)" fg:x="239" fg:w="8"/><text x="7.6016%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.25%)</title><rect x="7.3516%" y="293" width="0.2461%" height="15" fill="rgb(253,215,39)" fg:x="239" fg:w="8"/><text x="7.6016%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.06%)</title><rect x="7.5361%" y="277" width="0.0615%" height="15" fill="rgb(221,220,41)" fg:x="245" fg:w="2"/><text x="7.7861%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="7.5361%" y="261" width="0.0615%" height="15" fill="rgb(218,133,21)" fg:x="245" fg:w="2"/><text x="7.7861%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="7.5977%" y="325" width="0.0308%" height="15" fill="rgb(221,193,43)" fg:x="247" fg:w="1"/><text x="7.8477%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.34%)</title><rect x="7.3516%" y="357" width="0.3384%" height="15" fill="rgb(240,128,52)" fg:x="239" fg:w="11"/><text x="7.6016%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.34%)</title><rect x="7.3516%" y="341" width="0.3384%" height="15" fill="rgb(253,114,12)" fg:x="239" fg:w="11"/><text x="7.6016%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="7.6284%" y="325" width="0.0615%" height="15" fill="rgb(215,223,47)" fg:x="248" fg:w="2"/><text x="7.8784%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="7.6284%" y="309" width="0.0615%" height="15" fill="rgb(248,225,23)" fg:x="248" fg:w="2"/><text x="7.8784%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="7.6284%" y="293" width="0.0615%" height="15" fill="rgb(250,108,0)" fg:x="248" fg:w="2"/><text x="7.8784%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="7.6284%" y="277" width="0.0615%" height="15" fill="rgb(228,208,7)" fg:x="248" fg:w="2"/><text x="7.8784%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.6284%" y="261" width="0.0615%" height="15" fill="rgb(244,45,10)" fg:x="248" fg:w="2"/><text x="7.8784%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.6284%" y="245" width="0.0615%" height="15" fill="rgb(207,125,25)" fg:x="248" fg:w="2"/><text x="7.8784%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.6284%" y="229" width="0.0615%" height="15" fill="rgb(210,195,18)" fg:x="248" fg:w="2"/><text x="7.8784%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="7.6284%" y="213" width="0.0615%" height="15" fill="rgb(249,80,12)" fg:x="248" fg:w="2"/><text x="7.8784%" y="223.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="7.6592%" y="197" width="0.0308%" height="15" fill="rgb(221,65,9)" fg:x="249" fg:w="1"/><text x="7.9092%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.22%)</title><rect x="7.7207%" y="309" width="0.2153%" height="15" fill="rgb(235,49,36)" fg:x="251" fg:w="7"/><text x="7.9707%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7 samples, 0.22%)</title><rect x="7.7207%" y="293" width="0.2153%" height="15" fill="rgb(225,32,20)" fg:x="251" fg:w="7"/><text x="7.9707%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.22%)</title><rect x="7.7207%" y="277" width="0.2153%" height="15" fill="rgb(215,141,46)" fg:x="251" fg:w="7"/><text x="7.9707%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (7 samples, 0.22%)</title><rect x="7.7207%" y="261" width="0.2153%" height="15" fill="rgb(250,160,47)" fg:x="251" fg:w="7"/><text x="7.9707%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (7 samples, 0.22%)</title><rect x="7.7207%" y="245" width="0.2153%" height="15" fill="rgb(216,222,40)" fg:x="251" fg:w="7"/><text x="7.9707%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="7.9360%" y="309" width="0.0308%" height="15" fill="rgb(234,217,39)" fg:x="258" fg:w="1"/><text x="8.1860%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (30 samples, 0.92%)</title><rect x="7.1670%" y="437" width="0.9228%" height="15" fill="rgb(207,178,40)" fg:x="233" fg:w="30"/><text x="7.4170%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.92%)</title><rect x="7.1670%" y="421" width="0.9228%" height="15" fill="rgb(221,136,13)" fg:x="233" fg:w="30"/><text x="7.4170%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (24 samples, 0.74%)</title><rect x="7.3516%" y="405" width="0.7382%" height="15" fill="rgb(249,199,10)" fg:x="239" fg:w="24"/><text x="7.6016%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (24 samples, 0.74%)</title><rect x="7.3516%" y="389" width="0.7382%" height="15" fill="rgb(249,222,13)" fg:x="239" fg:w="24"/><text x="7.6016%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (24 samples, 0.74%)</title><rect x="7.3516%" y="373" width="0.7382%" height="15" fill="rgb(244,185,38)" fg:x="239" fg:w="24"/><text x="7.6016%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.40%)</title><rect x="7.6899%" y="357" width="0.3999%" height="15" fill="rgb(236,202,9)" fg:x="250" fg:w="13"/><text x="7.9399%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.40%)</title><rect x="7.6899%" y="341" width="0.3999%" height="15" fill="rgb(250,229,37)" fg:x="250" fg:w="13"/><text x="7.9399%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13 samples, 0.40%)</title><rect x="7.6899%" y="325" width="0.3999%" height="15" fill="rgb(206,174,23)" fg:x="250" fg:w="13"/><text x="7.9399%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.12%)</title><rect x="7.9668%" y="309" width="0.1230%" height="15" fill="rgb(211,33,43)" fg:x="259" fg:w="4"/><text x="8.2168%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.12%)</title><rect x="7.9668%" y="293" width="0.1230%" height="15" fill="rgb(245,58,50)" fg:x="259" fg:w="4"/><text x="8.2168%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (34 samples, 1.05%)</title><rect x="7.0747%" y="453" width="1.0458%" height="15" fill="rgb(244,68,36)" fg:x="230" fg:w="34"/><text x="7.3247%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.03%)</title><rect x="8.0898%" y="437" width="0.0308%" height="15" fill="rgb(232,229,15)" fg:x="263" fg:w="1"/><text x="8.3398%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="8.0898%" y="421" width="0.0308%" height="15" fill="rgb(254,30,23)" fg:x="263" fg:w="1"/><text x="8.3398%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (36 samples, 1.11%)</title><rect x="7.0440%" y="469" width="1.1074%" height="15" fill="rgb(235,160,14)" fg:x="229" fg:w="36"/><text x="7.2940%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="8.1206%" y="453" width="0.0308%" height="15" fill="rgb(212,155,44)" fg:x="264" fg:w="1"/><text x="8.3706%" y="463.50"></text></g><g><title>compare::Compare::compares_le (3 samples, 0.09%)</title><rect x="8.1821%" y="453" width="0.0923%" height="15" fill="rgb(226,2,50)" fg:x="266" fg:w="3"/><text x="8.4321%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.09%)</title><rect x="8.1821%" y="437" width="0.0923%" height="15" fill="rgb(234,177,6)" fg:x="266" fg:w="3"/><text x="8.4321%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.09%)</title><rect x="8.1821%" y="421" width="0.0923%" height="15" fill="rgb(217,24,9)" fg:x="266" fg:w="3"/><text x="8.4321%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="8.2744%" y="421" width="0.0615%" height="15" fill="rgb(220,13,46)" fg:x="269" fg:w="2"/><text x="8.5244%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="8.3974%" y="293" width="0.0615%" height="15" fill="rgb(239,221,27)" fg:x="273" fg:w="2"/><text x="8.6474%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="8.4282%" y="277" width="0.0308%" height="15" fill="rgb(222,198,25)" fg:x="274" fg:w="1"/><text x="8.6782%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.40%)</title><rect x="8.3359%" y="341" width="0.3999%" height="15" fill="rgb(211,99,13)" fg:x="271" fg:w="13"/><text x="8.5859%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.40%)</title><rect x="8.3359%" y="325" width="0.3999%" height="15" fill="rgb(232,111,31)" fg:x="271" fg:w="13"/><text x="8.5859%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.40%)</title><rect x="8.3359%" y="309" width="0.3999%" height="15" fill="rgb(245,82,37)" fg:x="271" fg:w="13"/><text x="8.5859%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.28%)</title><rect x="8.4589%" y="293" width="0.2768%" height="15" fill="rgb(227,149,46)" fg:x="275" fg:w="9"/><text x="8.7089%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.12%)</title><rect x="8.6127%" y="277" width="0.1230%" height="15" fill="rgb(218,36,50)" fg:x="280" fg:w="4"/><text x="8.8627%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="8.7358%" y="341" width="0.0308%" height="15" fill="rgb(226,80,48)" fg:x="284" fg:w="1"/><text x="8.9858%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.49%)</title><rect x="8.3359%" y="373" width="0.4922%" height="15" fill="rgb(238,224,15)" fg:x="271" fg:w="16"/><text x="8.5859%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.49%)</title><rect x="8.3359%" y="357" width="0.4922%" height="15" fill="rgb(241,136,10)" fg:x="271" fg:w="16"/><text x="8.5859%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="8.7665%" y="341" width="0.0615%" height="15" fill="rgb(208,32,45)" fg:x="285" fg:w="2"/><text x="9.0165%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="8.7665%" y="325" width="0.0615%" height="15" fill="rgb(207,135,9)" fg:x="285" fg:w="2"/><text x="9.0165%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="8.7665%" y="309" width="0.0615%" height="15" fill="rgb(206,86,44)" fg:x="285" fg:w="2"/><text x="9.0165%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="8.7665%" y="293" width="0.0615%" height="15" fill="rgb(245,177,15)" fg:x="285" fg:w="2"/><text x="9.0165%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="8.7665%" y="277" width="0.0615%" height="15" fill="rgb(206,64,50)" fg:x="285" fg:w="2"/><text x="9.0165%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="8.7665%" y="261" width="0.0615%" height="15" fill="rgb(234,36,40)" fg:x="285" fg:w="2"/><text x="9.0165%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="8.7665%" y="245" width="0.0615%" height="15" fill="rgb(213,64,8)" fg:x="285" fg:w="2"/><text x="9.0165%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="8.7665%" y="229" width="0.0615%" height="15" fill="rgb(210,75,36)" fg:x="285" fg:w="2"/><text x="9.0165%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="8.8281%" y="325" width="0.0308%" height="15" fill="rgb(229,88,21)" fg:x="287" fg:w="1"/><text x="9.0781%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.12%)</title><rect x="8.8588%" y="309" width="0.1230%" height="15" fill="rgb(252,204,47)" fg:x="288" fg:w="4"/><text x="9.1088%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.12%)</title><rect x="8.8588%" y="293" width="0.1230%" height="15" fill="rgb(208,77,27)" fg:x="288" fg:w="4"/><text x="9.1088%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.12%)</title><rect x="8.8588%" y="277" width="0.1230%" height="15" fill="rgb(221,76,26)" fg:x="288" fg:w="4"/><text x="9.1088%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4 samples, 0.12%)</title><rect x="8.8588%" y="261" width="0.1230%" height="15" fill="rgb(225,139,18)" fg:x="288" fg:w="4"/><text x="9.1088%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.15%)</title><rect x="8.8588%" y="325" width="0.1538%" height="15" fill="rgb(230,137,11)" fg:x="288" fg:w="5"/><text x="9.1088%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="8.9819%" y="309" width="0.0308%" height="15" fill="rgb(212,28,1)" fg:x="292" fg:w="1"/><text x="9.2319%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="8.9819%" y="293" width="0.0308%" height="15" fill="rgb(248,164,17)" fg:x="292" fg:w="1"/><text x="9.2319%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="8.9819%" y="277" width="0.0308%" height="15" fill="rgb(222,171,42)" fg:x="292" fg:w="1"/><text x="9.2319%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="8.9819%" y="261" width="0.0308%" height="15" fill="rgb(243,84,45)" fg:x="292" fg:w="1"/><text x="9.2319%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="9.0126%" y="325" width="0.0923%" height="15" fill="rgb(252,49,23)" fg:x="293" fg:w="3"/><text x="9.2626%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="9.0126%" y="309" width="0.0923%" height="15" fill="rgb(215,19,7)" fg:x="293" fg:w="3"/><text x="9.2626%" y="319.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.86%)</title><rect x="8.2744%" y="437" width="0.8613%" height="15" fill="rgb(238,81,41)" fg:x="269" fg:w="28"/><text x="8.5244%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (26 samples, 0.80%)</title><rect x="8.3359%" y="421" width="0.7998%" height="15" fill="rgb(210,199,37)" fg:x="271" fg:w="26"/><text x="8.5859%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (26 samples, 0.80%)</title><rect x="8.3359%" y="405" width="0.7998%" height="15" fill="rgb(244,192,49)" fg:x="271" fg:w="26"/><text x="8.5859%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (26 samples, 0.80%)</title><rect x="8.3359%" y="389" width="0.7998%" height="15" fill="rgb(226,211,11)" fg:x="271" fg:w="26"/><text x="8.5859%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (10 samples, 0.31%)</title><rect x="8.8281%" y="373" width="0.3076%" height="15" fill="rgb(236,162,54)" fg:x="287" fg:w="10"/><text x="9.0781%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.31%)</title><rect x="8.8281%" y="357" width="0.3076%" height="15" fill="rgb(220,229,9)" fg:x="287" fg:w="10"/><text x="9.0781%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.31%)</title><rect x="8.8281%" y="341" width="0.3076%" height="15" fill="rgb(250,87,22)" fg:x="287" fg:w="10"/><text x="9.0781%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="9.1049%" y="325" width="0.0308%" height="15" fill="rgb(239,43,17)" fg:x="296" fg:w="1"/><text x="9.3549%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (29 samples, 0.89%)</title><rect x="8.2744%" y="453" width="0.8920%" height="15" fill="rgb(231,177,25)" fg:x="269" fg:w="29"/><text x="8.5244%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="9.1357%" y="437" width="0.0308%" height="15" fill="rgb(219,179,1)" fg:x="297" fg:w="1"/><text x="9.3857%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (35 samples, 1.08%)</title><rect x="8.1513%" y="469" width="1.0766%" height="15" fill="rgb(238,219,53)" fg:x="265" fg:w="35"/><text x="8.4013%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="9.1664%" y="453" width="0.0615%" height="15" fill="rgb(232,167,36)" fg:x="298" fg:w="2"/><text x="9.4164%" y="463.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="9.1972%" y="437" width="0.0308%" height="15" fill="rgb(244,19,51)" fg:x="299" fg:w="1"/><text x="9.4472%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (87 samples, 2.68%)</title><rect x="6.5826%" y="517" width="2.6761%" height="15" fill="rgb(224,6,22)" fg:x="214" fg:w="87"/><text x="6.8326%" y="527.50">co..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 2.68%)</title><rect x="6.5826%" y="501" width="2.6761%" height="15" fill="rgb(224,145,5)" fg:x="214" fg:w="87"/><text x="6.8326%" y="511.50">&lt;m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (86 samples, 2.65%)</title><rect x="6.6133%" y="485" width="2.6453%" height="15" fill="rgb(234,130,49)" fg:x="215" fg:w="86"/><text x="6.8633%" y="495.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="9.2279%" y="469" width="0.0308%" height="15" fill="rgb(254,6,2)" fg:x="300" fg:w="1"/><text x="9.4779%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="9.2894%" y="373" width="0.0308%" height="15" fill="rgb(208,96,46)" fg:x="302" fg:w="1"/><text x="9.5394%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.2894%" y="357" width="0.0308%" height="15" fill="rgb(239,3,39)" fg:x="302" fg:w="1"/><text x="9.5394%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.22%)</title><rect x="9.5048%" y="357" width="0.2153%" height="15" fill="rgb(233,210,1)" fg:x="309" fg:w="7"/><text x="9.7548%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="9.2587%" y="421" width="0.5229%" height="15" fill="rgb(244,137,37)" fg:x="301" fg:w="17"/><text x="9.5087%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="9.2587%" y="405" width="0.5229%" height="15" fill="rgb(240,136,2)" fg:x="301" fg:w="17"/><text x="9.5087%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="9.2587%" y="389" width="0.5229%" height="15" fill="rgb(239,18,37)" fg:x="301" fg:w="17"/><text x="9.5087%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.46%)</title><rect x="9.3202%" y="373" width="0.4614%" height="15" fill="rgb(218,185,22)" fg:x="303" fg:w="15"/><text x="9.5702%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="9.7201%" y="357" width="0.0615%" height="15" fill="rgb(225,218,4)" fg:x="316" fg:w="2"/><text x="9.9701%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.06%)</title><rect x="9.7816%" y="421" width="0.0615%" height="15" fill="rgb(230,182,32)" fg:x="318" fg:w="2"/><text x="10.0316%" y="431.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.06%)</title><rect x="9.7816%" y="405" width="0.0615%" height="15" fill="rgb(242,56,43)" fg:x="318" fg:w="2"/><text x="10.0316%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.06%)</title><rect x="9.7816%" y="389" width="0.0615%" height="15" fill="rgb(233,99,24)" fg:x="318" fg:w="2"/><text x="10.0316%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.06%)</title><rect x="9.7816%" y="373" width="0.0615%" height="15" fill="rgb(234,209,42)" fg:x="318" fg:w="2"/><text x="10.0316%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="10.0584%" y="293" width="0.0615%" height="15" fill="rgb(227,7,12)" fg:x="327" fg:w="2"/><text x="10.3084%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.89%)</title><rect x="9.2587%" y="453" width="0.8920%" height="15" fill="rgb(245,203,43)" fg:x="301" fg:w="29"/><text x="9.5087%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.89%)</title><rect x="9.2587%" y="437" width="0.8920%" height="15" fill="rgb(238,205,33)" fg:x="301" fg:w="29"/><text x="9.5087%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.31%)</title><rect x="9.8431%" y="421" width="0.3076%" height="15" fill="rgb(231,56,7)" fg:x="320" fg:w="10"/><text x="10.0931%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (10 samples, 0.31%)</title><rect x="9.8431%" y="405" width="0.3076%" height="15" fill="rgb(244,186,29)" fg:x="320" fg:w="10"/><text x="10.0931%" y="415.50"></text></g><g><title>core::hash::Hasher::write_i64 (9 samples, 0.28%)</title><rect x="9.8739%" y="389" width="0.2768%" height="15" fill="rgb(234,111,31)" fg:x="321" fg:w="9"/><text x="10.1239%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (9 samples, 0.28%)</title><rect x="9.8739%" y="373" width="0.2768%" height="15" fill="rgb(241,149,10)" fg:x="321" fg:w="9"/><text x="10.1239%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.28%)</title><rect x="9.8739%" y="357" width="0.2768%" height="15" fill="rgb(249,206,44)" fg:x="321" fg:w="9"/><text x="10.1239%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.28%)</title><rect x="9.8739%" y="341" width="0.2768%" height="15" fill="rgb(251,153,30)" fg:x="321" fg:w="9"/><text x="10.1239%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.28%)</title><rect x="9.8739%" y="325" width="0.2768%" height="15" fill="rgb(239,152,38)" fg:x="321" fg:w="9"/><text x="10.1239%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="10.0277%" y="309" width="0.1230%" height="15" fill="rgb(249,139,47)" fg:x="326" fg:w="4"/><text x="10.2777%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="10.1200%" y="293" width="0.0308%" height="15" fill="rgb(244,64,35)" fg:x="329" fg:w="1"/><text x="10.3700%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="10.3353%" y="405" width="0.0615%" height="15" fill="rgb(216,46,15)" fg:x="336" fg:w="2"/><text x="10.5853%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="10.3353%" y="389" width="0.0615%" height="15" fill="rgb(250,74,19)" fg:x="336" fg:w="2"/><text x="10.5853%" y="399.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.03%)</title><rect x="10.3968%" y="405" width="0.0308%" height="15" fill="rgb(249,42,33)" fg:x="338" fg:w="1"/><text x="10.6468%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (10 samples, 0.31%)</title><rect x="10.4276%" y="405" width="0.3076%" height="15" fill="rgb(242,149,17)" fg:x="339" fg:w="10"/><text x="10.6776%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (10 samples, 0.31%)</title><rect x="10.4276%" y="389" width="0.3076%" height="15" fill="rgb(244,29,21)" fg:x="339" fg:w="10"/><text x="10.6776%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (10 samples, 0.31%)</title><rect x="10.4276%" y="373" width="0.3076%" height="15" fill="rgb(220,130,37)" fg:x="339" fg:w="10"/><text x="10.6776%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.31%)</title><rect x="10.4276%" y="357" width="0.3076%" height="15" fill="rgb(211,67,2)" fg:x="339" fg:w="10"/><text x="10.6776%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (10 samples, 0.31%)</title><rect x="10.4276%" y="341" width="0.3076%" height="15" fill="rgb(235,68,52)" fg:x="339" fg:w="10"/><text x="10.6776%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (5 samples, 0.15%)</title><rect x="10.7352%" y="405" width="0.1538%" height="15" fill="rgb(246,142,3)" fg:x="349" fg:w="5"/><text x="10.9852%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="10.8890%" y="405" width="0.0308%" height="15" fill="rgb(241,25,7)" fg:x="354" fg:w="1"/><text x="11.1390%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.18%)</title><rect x="10.9197%" y="405" width="0.1846%" height="15" fill="rgb(242,119,39)" fg:x="355" fg:w="6"/><text x="11.1697%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.18%)</title><rect x="10.9197%" y="389" width="0.1846%" height="15" fill="rgb(241,98,45)" fg:x="355" fg:w="6"/><text x="11.1697%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.18%)</title><rect x="10.9197%" y="373" width="0.1846%" height="15" fill="rgb(254,28,30)" fg:x="355" fg:w="6"/><text x="11.1697%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.12%)</title><rect x="11.1043%" y="405" width="0.1230%" height="15" fill="rgb(241,142,54)" fg:x="361" fg:w="4"/><text x="11.3543%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.12%)</title><rect x="11.1043%" y="389" width="0.1230%" height="15" fill="rgb(222,85,15)" fg:x="361" fg:w="4"/><text x="11.3543%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 0.22%)</title><rect x="11.2273%" y="405" width="0.2153%" height="15" fill="rgb(210,85,47)" fg:x="365" fg:w="7"/><text x="11.4773%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.22%)</title><rect x="11.2273%" y="389" width="0.2153%" height="15" fill="rgb(224,206,25)" fg:x="365" fg:w="7"/><text x="11.4773%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.22%)</title><rect x="11.2273%" y="373" width="0.2153%" height="15" fill="rgb(243,201,19)" fg:x="365" fg:w="7"/><text x="11.4773%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43 samples, 1.32%)</title><rect x="10.1507%" y="421" width="1.3227%" height="15" fill="rgb(236,59,4)" fg:x="330" fg:w="43"/><text x="10.4007%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="11.4426%" y="405" width="0.0308%" height="15" fill="rgb(254,179,45)" fg:x="372" fg:w="1"/><text x="11.6926%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (175 samples, 5.38%)</title><rect x="6.1212%" y="533" width="5.3830%" height="15" fill="rgb(226,14,10)" fg:x="199" fg:w="175"/><text x="6.3712%" y="543.50">project..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (73 samples, 2.25%)</title><rect x="9.2587%" y="517" width="2.2455%" height="15" fill="rgb(244,27,41)" fg:x="301" fg:w="73"/><text x="9.5087%" y="527.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (73 samples, 2.25%)</title><rect x="9.2587%" y="501" width="2.2455%" height="15" fill="rgb(235,35,32)" fg:x="301" fg:w="73"/><text x="9.5087%" y="511.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (73 samples, 2.25%)</title><rect x="9.2587%" y="485" width="2.2455%" height="15" fill="rgb(218,68,31)" fg:x="301" fg:w="73"/><text x="9.5087%" y="495.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (73 samples, 2.25%)</title><rect x="9.2587%" y="469" width="2.2455%" height="15" fill="rgb(207,120,37)" fg:x="301" fg:w="73"/><text x="9.5087%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (44 samples, 1.35%)</title><rect x="10.1507%" y="453" width="1.3534%" height="15" fill="rgb(227,98,0)" fg:x="330" fg:w="44"/><text x="10.4007%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (44 samples, 1.35%)</title><rect x="10.1507%" y="437" width="1.3534%" height="15" fill="rgb(207,7,3)" fg:x="330" fg:w="44"/><text x="10.4007%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="11.4734%" y="421" width="0.0308%" height="15" fill="rgb(206,98,19)" fg:x="373" fg:w="1"/><text x="11.7234%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.09%)</title><rect x="11.6580%" y="437" width="0.0923%" height="15" fill="rgb(217,5,26)" fg:x="379" fg:w="3"/><text x="11.9080%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.09%)</title><rect x="11.6580%" y="421" width="0.0923%" height="15" fill="rgb(235,190,38)" fg:x="379" fg:w="3"/><text x="11.9080%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="12.1193%" y="405" width="0.0308%" height="15" fill="rgb(247,86,24)" fg:x="394" fg:w="1"/><text x="12.3693%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="12.1193%" y="421" width="0.0923%" height="15" fill="rgb(205,101,16)" fg:x="394" fg:w="3"/><text x="12.3693%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="12.1501%" y="405" width="0.0615%" height="15" fill="rgb(246,168,33)" fg:x="395" fg:w="2"/><text x="12.4001%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="12.1501%" y="389" width="0.0615%" height="15" fill="rgb(231,114,1)" fg:x="395" fg:w="2"/><text x="12.4001%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="12.2116%" y="421" width="0.0308%" height="15" fill="rgb(207,184,53)" fg:x="397" fg:w="1"/><text x="12.4616%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="12.2116%" y="405" width="0.0308%" height="15" fill="rgb(224,95,51)" fg:x="397" fg:w="1"/><text x="12.4616%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="12.2116%" y="389" width="0.0308%" height="15" fill="rgb(212,188,45)" fg:x="397" fg:w="1"/><text x="12.4616%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.15%)</title><rect x="12.2424%" y="421" width="0.1538%" height="15" fill="rgb(223,154,38)" fg:x="398" fg:w="5"/><text x="12.4924%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.15%)</title><rect x="12.2424%" y="405" width="0.1538%" height="15" fill="rgb(251,22,52)" fg:x="398" fg:w="5"/><text x="12.4924%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (11 samples, 0.34%)</title><rect x="12.3962%" y="389" width="0.3384%" height="15" fill="rgb(229,209,22)" fg:x="403" fg:w="11"/><text x="12.6462%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (11 samples, 0.34%)</title><rect x="12.3962%" y="373" width="0.3384%" height="15" fill="rgb(234,138,34)" fg:x="403" fg:w="11"/><text x="12.6462%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (12 samples, 0.37%)</title><rect x="12.3962%" y="421" width="0.3691%" height="15" fill="rgb(212,95,11)" fg:x="403" fg:w="12"/><text x="12.6462%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (12 samples, 0.37%)</title><rect x="12.3962%" y="405" width="0.3691%" height="15" fill="rgb(240,179,47)" fg:x="403" fg:w="12"/><text x="12.6462%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="12.7345%" y="389" width="0.0308%" height="15" fill="rgb(240,163,11)" fg:x="414" fg:w="1"/><text x="12.9845%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="12.7345%" y="373" width="0.0308%" height="15" fill="rgb(236,37,12)" fg:x="414" fg:w="1"/><text x="12.9845%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="12.7653%" y="421" width="0.0308%" height="15" fill="rgb(232,164,16)" fg:x="415" fg:w="1"/><text x="13.0153%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="12.7653%" y="405" width="0.0308%" height="15" fill="rgb(244,205,15)" fg:x="415" fg:w="1"/><text x="13.0153%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="12.8576%" y="405" width="0.0308%" height="15" fill="rgb(223,117,47)" fg:x="418" fg:w="1"/><text x="13.1076%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="12.8576%" y="389" width="0.0308%" height="15" fill="rgb(244,107,35)" fg:x="418" fg:w="1"/><text x="13.1076%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.12%)</title><rect x="12.7961%" y="421" width="0.1230%" height="15" fill="rgb(205,140,8)" fg:x="416" fg:w="4"/><text x="13.0461%" y="431.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="12.8883%" y="405" width="0.0308%" height="15" fill="rgb(228,84,46)" fg:x="419" fg:w="1"/><text x="13.1383%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (1 samples, 0.03%)</title><rect x="12.9191%" y="421" width="0.0308%" height="15" fill="rgb(254,188,9)" fg:x="420" fg:w="1"/><text x="13.1691%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.12%)</title><rect x="12.9499%" y="421" width="0.1230%" height="15" fill="rgb(206,112,54)" fg:x="421" fg:w="4"/><text x="13.1999%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="13.0729%" y="421" width="0.0308%" height="15" fill="rgb(216,84,49)" fg:x="425" fg:w="1"/><text x="13.3229%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="13.0729%" y="405" width="0.0308%" height="15" fill="rgb(214,194,35)" fg:x="425" fg:w="1"/><text x="13.3229%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.0729%" y="389" width="0.0308%" height="15" fill="rgb(249,28,3)" fg:x="425" fg:w="1"/><text x="13.3229%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.0729%" y="373" width="0.0308%" height="15" fill="rgb(222,56,52)" fg:x="425" fg:w="1"/><text x="13.3229%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.0729%" y="357" width="0.0308%" height="15" fill="rgb(245,217,50)" fg:x="425" fg:w="1"/><text x="13.3229%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (3 samples, 0.09%)</title><rect x="13.1037%" y="421" width="0.0923%" height="15" fill="rgb(213,201,24)" fg:x="426" fg:w="3"/><text x="13.3537%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (3 samples, 0.09%)</title><rect x="13.1037%" y="405" width="0.0923%" height="15" fill="rgb(248,116,28)" fg:x="426" fg:w="3"/><text x="13.3537%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.1652%" y="389" width="0.0308%" height="15" fill="rgb(219,72,43)" fg:x="428" fg:w="1"/><text x="13.4152%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.1652%" y="373" width="0.0308%" height="15" fill="rgb(209,138,14)" fg:x="428" fg:w="1"/><text x="13.4152%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.1652%" y="357" width="0.0308%" height="15" fill="rgb(222,18,33)" fg:x="428" fg:w="1"/><text x="13.4152%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (58 samples, 1.78%)</title><rect x="11.7502%" y="437" width="1.7841%" height="15" fill="rgb(213,199,7)" fg:x="382" fg:w="58"/><text x="12.0002%" y="447.50">p..</text></g><g><title>project1::solver::types::Lit::var (11 samples, 0.34%)</title><rect x="13.1959%" y="421" width="0.3384%" height="15" fill="rgb(250,110,10)" fg:x="429" fg:w="11"/><text x="13.4459%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="13.5035%" y="405" width="0.0308%" height="15" fill="rgb(248,123,6)" fg:x="439" fg:w="1"/><text x="13.7535%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (3 samples, 0.09%)</title><rect x="13.5343%" y="437" width="0.0923%" height="15" fill="rgb(206,91,31)" fg:x="440" fg:w="3"/><text x="13.7843%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="13.5343%" y="421" width="0.0923%" height="15" fill="rgb(211,154,13)" fg:x="440" fg:w="3"/><text x="13.7843%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="13.5343%" y="405" width="0.0923%" height="15" fill="rgb(225,148,7)" fg:x="440" fg:w="3"/><text x="13.7843%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (67 samples, 2.06%)</title><rect x="11.5964%" y="469" width="2.0609%" height="15" fill="rgb(220,160,43)" fg:x="377" fg:w="67"/><text x="11.8464%" y="479.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (67 samples, 2.06%)</title><rect x="11.5964%" y="453" width="2.0609%" height="15" fill="rgb(213,52,39)" fg:x="377" fg:w="67"/><text x="11.8464%" y="463.50">p..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="13.6266%" y="437" width="0.0308%" height="15" fill="rgb(243,137,7)" fg:x="443" fg:w="1"/><text x="13.8766%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (72 samples, 2.21%)</title><rect x="11.5042%" y="517" width="2.2147%" height="15" fill="rgb(230,79,13)" fg:x="374" fg:w="72"/><text x="11.7542%" y="527.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (72 samples, 2.21%)</title><rect x="11.5042%" y="501" width="2.2147%" height="15" fill="rgb(247,105,23)" fg:x="374" fg:w="72"/><text x="11.7542%" y="511.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (72 samples, 2.21%)</title><rect x="11.5042%" y="485" width="2.2147%" height="15" fill="rgb(223,179,41)" fg:x="374" fg:w="72"/><text x="11.7542%" y="495.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="13.6573%" y="469" width="0.0615%" height="15" fill="rgb(218,9,34)" fg:x="444" fg:w="2"/><text x="13.9073%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.03%)</title><rect x="13.7189%" y="501" width="0.0308%" height="15" fill="rgb(222,106,8)" fg:x="446" fg:w="1"/><text x="13.9689%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (1 samples, 0.03%)</title><rect x="13.7189%" y="485" width="0.0308%" height="15" fill="rgb(211,220,0)" fg:x="446" fg:w="1"/><text x="13.9689%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (1 samples, 0.03%)</title><rect x="13.7189%" y="469" width="0.0308%" height="15" fill="rgb(229,52,16)" fg:x="446" fg:w="1"/><text x="13.9689%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="13.7189%" y="453" width="0.0308%" height="15" fill="rgb(212,155,18)" fg:x="446" fg:w="1"/><text x="13.9689%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="13.7189%" y="437" width="0.0308%" height="15" fill="rgb(242,21,14)" fg:x="446" fg:w="1"/><text x="13.9689%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (74 samples, 2.28%)</title><rect x="11.5042%" y="533" width="2.2762%" height="15" fill="rgb(222,19,48)" fg:x="374" fg:w="74"/><text x="11.7542%" y="543.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (2 samples, 0.06%)</title><rect x="13.7189%" y="517" width="0.0615%" height="15" fill="rgb(232,45,27)" fg:x="446" fg:w="2"/><text x="13.9689%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="13.7496%" y="501" width="0.0308%" height="15" fill="rgb(249,103,42)" fg:x="447" fg:w="1"/><text x="13.9996%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (12 samples, 0.37%)</title><rect x="13.7804%" y="533" width="0.3691%" height="15" fill="rgb(246,81,33)" fg:x="448" fg:w="12"/><text x="14.0304%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (12 samples, 0.37%)</title><rect x="13.7804%" y="517" width="0.3691%" height="15" fill="rgb(252,33,42)" fg:x="448" fg:w="12"/><text x="14.0304%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.18%)</title><rect x="13.9649%" y="501" width="0.1846%" height="15" fill="rgb(209,212,41)" fg:x="454" fg:w="6"/><text x="14.2149%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.18%)</title><rect x="13.9649%" y="485" width="0.1846%" height="15" fill="rgb(207,154,6)" fg:x="454" fg:w="6"/><text x="14.2149%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.06%)</title><rect x="14.0880%" y="469" width="0.0615%" height="15" fill="rgb(223,64,47)" fg:x="458" fg:w="2"/><text x="14.3380%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="14.0880%" y="453" width="0.0615%" height="15" fill="rgb(211,161,38)" fg:x="458" fg:w="2"/><text x="14.3380%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (1 samples, 0.03%)</title><rect x="14.1495%" y="533" width="0.0308%" height="15" fill="rgb(219,138,40)" fg:x="460" fg:w="1"/><text x="14.3995%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.1495%" y="517" width="0.0308%" height="15" fill="rgb(241,228,46)" fg:x="460" fg:w="1"/><text x="14.3995%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.1495%" y="501" width="0.0308%" height="15" fill="rgb(223,209,38)" fg:x="460" fg:w="1"/><text x="14.3995%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.1495%" y="485" width="0.0308%" height="15" fill="rgb(236,164,45)" fg:x="460" fg:w="1"/><text x="14.3995%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="14.1803%" y="533" width="0.0308%" height="15" fill="rgb(231,15,5)" fg:x="461" fg:w="1"/><text x="14.4303%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (4 samples, 0.12%)</title><rect x="14.2110%" y="533" width="0.1230%" height="15" fill="rgb(252,35,15)" fg:x="462" fg:w="4"/><text x="14.4610%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (4 samples, 0.12%)</title><rect x="14.2110%" y="517" width="0.1230%" height="15" fill="rgb(248,181,18)" fg:x="462" fg:w="4"/><text x="14.4610%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.12%)</title><rect x="14.2110%" y="501" width="0.1230%" height="15" fill="rgb(233,39,42)" fg:x="462" fg:w="4"/><text x="14.4610%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.12%)</title><rect x="14.2110%" y="485" width="0.1230%" height="15" fill="rgb(238,110,33)" fg:x="462" fg:w="4"/><text x="14.4610%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.12%)</title><rect x="14.2110%" y="469" width="0.1230%" height="15" fill="rgb(233,195,10)" fg:x="462" fg:w="4"/><text x="14.4610%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.06%)</title><rect x="14.3341%" y="517" width="0.0615%" height="15" fill="rgb(254,105,3)" fg:x="466" fg:w="2"/><text x="14.5841%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (435 samples, 13.38%)</title><rect x="1.0766%" y="549" width="13.3805%" height="15" fill="rgb(221,225,9)" fg:x="35" fg:w="435"/><text x="1.3266%" y="559.50">project1::solver::cd..</text></g><g><title>project1::solver::types::Lit::var (4 samples, 0.12%)</title><rect x="14.3341%" y="533" width="0.1230%" height="15" fill="rgb(224,227,45)" fg:x="466" fg:w="4"/><text x="14.5841%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.06%)</title><rect x="14.3956%" y="517" width="0.0615%" height="15" fill="rgb(229,198,43)" fg:x="468" fg:w="2"/><text x="14.6456%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.4571%" y="533" width="0.0308%" height="15" fill="rgb(206,209,35)" fg:x="470" fg:w="1"/><text x="14.7071%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.03%)</title><rect x="14.4571%" y="517" width="0.0308%" height="15" fill="rgb(245,195,53)" fg:x="470" fg:w="1"/><text x="14.7071%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="14.4571%" y="501" width="0.0308%" height="15" fill="rgb(240,92,26)" fg:x="470" fg:w="1"/><text x="14.7071%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="14.4571%" y="485" width="0.0308%" height="15" fill="rgb(207,40,23)" fg:x="470" fg:w="1"/><text x="14.7071%" y="495.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (1 samples, 0.03%)</title><rect x="14.4878%" y="533" width="0.0308%" height="15" fill="rgb(223,111,35)" fg:x="471" fg:w="1"/><text x="14.7378%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (1 samples, 0.03%)</title><rect x="14.4878%" y="517" width="0.0308%" height="15" fill="rgb(229,147,28)" fg:x="471" fg:w="1"/><text x="14.7378%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (6 samples, 0.18%)</title><rect x="14.4571%" y="549" width="0.1846%" height="15" fill="rgb(211,29,28)" fg:x="470" fg:w="6"/><text x="14.7071%" y="559.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (4 samples, 0.12%)</title><rect x="14.5186%" y="533" width="0.1230%" height="15" fill="rgb(228,72,33)" fg:x="472" fg:w="4"/><text x="14.7686%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.12%)</title><rect x="14.5186%" y="517" width="0.1230%" height="15" fill="rgb(205,214,31)" fg:x="472" fg:w="4"/><text x="14.7686%" y="527.50"></text></g><g><title>core::ptr::write (4 samples, 0.12%)</title><rect x="14.5186%" y="501" width="0.1230%" height="15" fill="rgb(224,111,15)" fg:x="472" fg:w="4"/><text x="14.7686%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.7647%" y="533" width="0.0308%" height="15" fill="rgb(253,21,26)" fg:x="480" fg:w="1"/><text x="15.0147%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.7647%" y="517" width="0.0308%" height="15" fill="rgb(245,139,43)" fg:x="480" fg:w="1"/><text x="15.0147%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.7647%" y="501" width="0.0308%" height="15" fill="rgb(252,170,7)" fg:x="480" fg:w="1"/><text x="15.0147%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.09%)</title><rect x="14.7954%" y="517" width="0.0923%" height="15" fill="rgb(231,118,14)" fg:x="481" fg:w="3"/><text x="15.0454%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.09%)</title><rect x="14.7954%" y="501" width="0.0923%" height="15" fill="rgb(238,83,0)" fg:x="481" fg:w="3"/><text x="15.0454%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.09%)</title><rect x="14.7954%" y="485" width="0.0923%" height="15" fill="rgb(221,39,39)" fg:x="481" fg:w="3"/><text x="15.0454%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.12%)</title><rect x="14.7954%" y="533" width="0.1230%" height="15" fill="rgb(222,119,46)" fg:x="481" fg:w="4"/><text x="15.0454%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.8877%" y="517" width="0.0308%" height="15" fill="rgb(222,165,49)" fg:x="484" fg:w="1"/><text x="15.1377%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.8877%" y="501" width="0.0308%" height="15" fill="rgb(219,113,52)" fg:x="484" fg:w="1"/><text x="15.1377%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="14.9185%" y="533" width="0.0308%" height="15" fill="rgb(214,7,15)" fg:x="485" fg:w="1"/><text x="15.1685%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="14.9185%" y="517" width="0.0308%" height="15" fill="rgb(235,32,4)" fg:x="485" fg:w="1"/><text x="15.1685%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="14.9185%" y="501" width="0.0308%" height="15" fill="rgb(238,90,54)" fg:x="485" fg:w="1"/><text x="15.1685%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="14.9185%" y="485" width="0.0308%" height="15" fill="rgb(213,208,19)" fg:x="485" fg:w="1"/><text x="15.1685%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="14.9185%" y="469" width="0.0308%" height="15" fill="rgb(233,156,4)" fg:x="485" fg:w="1"/><text x="15.1685%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="14.9185%" y="453" width="0.0308%" height="15" fill="rgb(207,194,5)" fg:x="485" fg:w="1"/><text x="15.1685%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="14.9185%" y="437" width="0.0308%" height="15" fill="rgb(206,111,30)" fg:x="485" fg:w="1"/><text x="15.1685%" y="447.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="14.9185%" y="421" width="0.0308%" height="15" fill="rgb(243,70,54)" fg:x="485" fg:w="1"/><text x="15.1685%" y="431.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="14.9185%" y="405" width="0.0308%" height="15" fill="rgb(242,28,8)" fg:x="485" fg:w="1"/><text x="15.1685%" y="415.50"></text></g><g><title>account_process_tick (1 samples, 0.03%)</title><rect x="14.9185%" y="389" width="0.0308%" height="15" fill="rgb(219,106,18)" fg:x="485" fg:w="1"/><text x="15.1685%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.9492%" y="517" width="0.0308%" height="15" fill="rgb(244,222,10)" fg:x="486" fg:w="1"/><text x="15.1992%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="14.9492%" y="501" width="0.0308%" height="15" fill="rgb(236,179,52)" fg:x="486" fg:w="1"/><text x="15.1992%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="14.9800%" y="501" width="0.0308%" height="15" fill="rgb(213,23,39)" fg:x="487" fg:w="1"/><text x="15.2300%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="14.9800%" y="517" width="0.0615%" height="15" fill="rgb(238,48,10)" fg:x="487" fg:w="2"/><text x="15.2300%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="15.0108%" y="501" width="0.0308%" height="15" fill="rgb(251,196,23)" fg:x="488" fg:w="1"/><text x="15.2608%" y="511.50"></text></g><g><title>core::ptr::read (13 samples, 0.40%)</title><rect x="15.0415%" y="501" width="0.3999%" height="15" fill="rgb(250,152,24)" fg:x="489" fg:w="13"/><text x="15.2915%" y="511.50"></text></g><g><title>core::mem::replace (17 samples, 0.52%)</title><rect x="15.0415%" y="517" width="0.5229%" height="15" fill="rgb(209,150,17)" fg:x="489" fg:w="17"/><text x="15.2915%" y="527.50"></text></g><g><title>core::ptr::write (4 samples, 0.12%)</title><rect x="15.4414%" y="501" width="0.1230%" height="15" fill="rgb(234,202,34)" fg:x="502" fg:w="4"/><text x="15.6914%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="15.5644%" y="485" width="0.0308%" height="15" fill="rgb(253,148,53)" fg:x="506" fg:w="1"/><text x="15.8144%" y="495.50"></text></g><g><title>core::mem::swap (2 samples, 0.06%)</title><rect x="15.5644%" y="517" width="0.0615%" height="15" fill="rgb(218,129,16)" fg:x="506" fg:w="2"/><text x="15.8144%" y="527.50"></text></g><g><title>core::mem::swap_simple (2 samples, 0.06%)</title><rect x="15.5644%" y="501" width="0.0615%" height="15" fill="rgb(216,85,19)" fg:x="506" fg:w="2"/><text x="15.8144%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="15.5952%" y="485" width="0.0308%" height="15" fill="rgb(235,228,7)" fg:x="507" fg:w="1"/><text x="15.8452%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::len (1 samples, 0.03%)</title><rect x="15.6260%" y="517" width="0.0308%" height="15" fill="rgb(245,175,0)" fg:x="508" fg:w="1"/><text x="15.8760%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.03%)</title><rect x="15.6260%" y="501" width="0.0308%" height="15" fill="rgb(208,168,36)" fg:x="508" fg:w="1"/><text x="15.8760%" y="511.50"></text></g><g><title>compare::Compare::compares_le (1 samples, 0.03%)</title><rect x="15.7182%" y="501" width="0.0308%" height="15" fill="rgb(246,171,24)" fg:x="511" fg:w="1"/><text x="15.9682%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="15.7182%" y="485" width="0.0308%" height="15" fill="rgb(215,142,24)" fg:x="511" fg:w="1"/><text x="15.9682%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="15.7182%" y="469" width="0.0308%" height="15" fill="rgb(250,187,7)" fg:x="511" fg:w="1"/><text x="15.9682%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="15.7490%" y="469" width="0.0615%" height="15" fill="rgb(228,66,33)" fg:x="512" fg:w="2"/><text x="15.9990%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (6 samples, 0.18%)</title><rect x="15.6567%" y="517" width="0.1846%" height="15" fill="rgb(234,215,21)" fg:x="509" fg:w="6"/><text x="15.9067%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3 samples, 0.09%)</title><rect x="15.7490%" y="501" width="0.0923%" height="15" fill="rgb(222,191,20)" fg:x="512" fg:w="3"/><text x="15.9990%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="15.7490%" y="485" width="0.0923%" height="15" fill="rgb(245,79,54)" fg:x="512" fg:w="3"/><text x="15.9990%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="15.8105%" y="469" width="0.0308%" height="15" fill="rgb(240,10,37)" fg:x="514" fg:w="1"/><text x="16.0605%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="15.8105%" y="453" width="0.0308%" height="15" fill="rgb(214,192,32)" fg:x="514" fg:w="1"/><text x="16.0605%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.03%)</title><rect x="15.8105%" y="437" width="0.0308%" height="15" fill="rgb(209,36,54)" fg:x="514" fg:w="1"/><text x="16.0605%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="15.8105%" y="421" width="0.0308%" height="15" fill="rgb(220,10,11)" fg:x="514" fg:w="1"/><text x="16.0605%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="15.8105%" y="405" width="0.0308%" height="15" fill="rgb(221,106,17)" fg:x="514" fg:w="1"/><text x="16.0605%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="15.8105%" y="389" width="0.0308%" height="15" fill="rgb(251,142,44)" fg:x="514" fg:w="1"/><text x="16.0605%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="15.8105%" y="373" width="0.0308%" height="15" fill="rgb(238,13,15)" fg:x="514" fg:w="1"/><text x="16.0605%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="15.8105%" y="357" width="0.0308%" height="15" fill="rgb(208,107,27)" fg:x="514" fg:w="1"/><text x="16.0605%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="15.8105%" y="341" width="0.0308%" height="15" fill="rgb(205,136,37)" fg:x="514" fg:w="1"/><text x="16.0605%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="15.8105%" y="325" width="0.0308%" height="15" fill="rgb(250,205,27)" fg:x="514" fg:w="1"/><text x="16.0605%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="15.9028%" y="357" width="0.0308%" height="15" fill="rgb(210,80,43)" fg:x="517" fg:w="1"/><text x="16.1528%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="15.9028%" y="341" width="0.0308%" height="15" fill="rgb(247,160,36)" fg:x="517" fg:w="1"/><text x="16.1528%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.22%)</title><rect x="15.9643%" y="341" width="0.2153%" height="15" fill="rgb(234,13,49)" fg:x="519" fg:w="7"/><text x="16.2143%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.12%)</title><rect x="16.1796%" y="341" width="0.1230%" height="15" fill="rgb(234,122,0)" fg:x="526" fg:w="4"/><text x="16.4296%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="15.8413%" y="405" width="0.5229%" height="15" fill="rgb(207,146,38)" fg:x="515" fg:w="17"/><text x="16.0913%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="15.8413%" y="389" width="0.5229%" height="15" fill="rgb(207,177,25)" fg:x="515" fg:w="17"/><text x="16.0913%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="15.8413%" y="373" width="0.5229%" height="15" fill="rgb(211,178,42)" fg:x="515" fg:w="17"/><text x="16.0913%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.43%)</title><rect x="15.9336%" y="357" width="0.4306%" height="15" fill="rgb(230,69,54)" fg:x="518" fg:w="14"/><text x="16.1836%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="16.3027%" y="341" width="0.0615%" height="15" fill="rgb(214,135,41)" fg:x="530" fg:w="2"/><text x="16.5527%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="16.3642%" y="405" width="0.0308%" height="15" fill="rgb(237,67,25)" fg:x="532" fg:w="1"/><text x="16.6142%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="16.3642%" y="389" width="0.0308%" height="15" fill="rgb(222,189,50)" fg:x="532" fg:w="1"/><text x="16.6142%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="16.3642%" y="373" width="0.0308%" height="15" fill="rgb(245,148,34)" fg:x="532" fg:w="1"/><text x="16.6142%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.03%)</title><rect x="16.3642%" y="357" width="0.0308%" height="15" fill="rgb(222,29,6)" fg:x="532" fg:w="1"/><text x="16.6142%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.62%)</title><rect x="15.8413%" y="437" width="0.6152%" height="15" fill="rgb(221,189,43)" fg:x="515" fg:w="20"/><text x="16.0913%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.62%)</title><rect x="15.8413%" y="421" width="0.6152%" height="15" fill="rgb(207,36,27)" fg:x="515" fg:w="20"/><text x="16.0913%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="16.3950%" y="405" width="0.0615%" height="15" fill="rgb(217,90,24)" fg:x="533" fg:w="2"/><text x="16.6450%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="16.3950%" y="389" width="0.0615%" height="15" fill="rgb(224,66,35)" fg:x="533" fg:w="2"/><text x="16.6450%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="16.3950%" y="373" width="0.0615%" height="15" fill="rgb(221,13,50)" fg:x="533" fg:w="2"/><text x="16.6450%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="16.3950%" y="357" width="0.0615%" height="15" fill="rgb(236,68,49)" fg:x="533" fg:w="2"/><text x="16.6450%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="16.3950%" y="341" width="0.0615%" height="15" fill="rgb(229,146,28)" fg:x="533" fg:w="2"/><text x="16.6450%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="16.3950%" y="325" width="0.0615%" height="15" fill="rgb(225,31,38)" fg:x="533" fg:w="2"/><text x="16.6450%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="16.3950%" y="309" width="0.0615%" height="15" fill="rgb(250,208,3)" fg:x="533" fg:w="2"/><text x="16.6450%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="16.4257%" y="293" width="0.0308%" height="15" fill="rgb(246,54,23)" fg:x="534" fg:w="1"/><text x="16.6757%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="16.4257%" y="277" width="0.0308%" height="15" fill="rgb(243,76,11)" fg:x="534" fg:w="1"/><text x="16.6757%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="16.4565%" y="389" width="0.0923%" height="15" fill="rgb(245,21,50)" fg:x="535" fg:w="3"/><text x="16.7065%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.09%)</title><rect x="16.4565%" y="373" width="0.0923%" height="15" fill="rgb(228,9,43)" fg:x="535" fg:w="3"/><text x="16.7065%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.86%)</title><rect x="15.8413%" y="453" width="0.8613%" height="15" fill="rgb(208,100,47)" fg:x="515" fg:w="28"/><text x="16.0913%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.25%)</title><rect x="16.4565%" y="437" width="0.2461%" height="15" fill="rgb(232,26,8)" fg:x="535" fg:w="8"/><text x="16.7065%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.25%)</title><rect x="16.4565%" y="421" width="0.2461%" height="15" fill="rgb(216,166,38)" fg:x="535" fg:w="8"/><text x="16.7065%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.25%)</title><rect x="16.4565%" y="405" width="0.2461%" height="15" fill="rgb(251,202,51)" fg:x="535" fg:w="8"/><text x="16.7065%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.15%)</title><rect x="16.5488%" y="389" width="0.1538%" height="15" fill="rgb(254,216,34)" fg:x="538" fg:w="5"/><text x="16.7988%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.15%)</title><rect x="16.5488%" y="373" width="0.1538%" height="15" fill="rgb(251,32,27)" fg:x="538" fg:w="5"/><text x="16.7988%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.15%)</title><rect x="16.5488%" y="357" width="0.1538%" height="15" fill="rgb(208,127,28)" fg:x="538" fg:w="5"/><text x="16.7988%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.15%)</title><rect x="16.5488%" y="341" width="0.1538%" height="15" fill="rgb(224,137,22)" fg:x="538" fg:w="5"/><text x="16.7988%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.15%)</title><rect x="16.5488%" y="325" width="0.1538%" height="15" fill="rgb(254,70,32)" fg:x="538" fg:w="5"/><text x="16.7988%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (29 samples, 0.89%)</title><rect x="15.8413%" y="501" width="0.8920%" height="15" fill="rgb(229,75,37)" fg:x="515" fg:w="29"/><text x="16.0913%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (29 samples, 0.89%)</title><rect x="15.8413%" y="485" width="0.8920%" height="15" fill="rgb(252,64,23)" fg:x="515" fg:w="29"/><text x="16.0913%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (29 samples, 0.89%)</title><rect x="15.8413%" y="469" width="0.8920%" height="15" fill="rgb(232,162,48)" fg:x="515" fg:w="29"/><text x="16.0913%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="16.7026%" y="453" width="0.0308%" height="15" fill="rgb(246,160,12)" fg:x="543" fg:w="1"/><text x="16.9526%" y="463.50"></text></g><g><title>compare::Compare::compares_ge (5 samples, 0.15%)</title><rect x="16.7641%" y="469" width="0.1538%" height="15" fill="rgb(247,166,0)" fg:x="545" fg:w="5"/><text x="17.0141%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.15%)</title><rect x="16.7641%" y="453" width="0.1538%" height="15" fill="rgb(249,219,21)" fg:x="545" fg:w="5"/><text x="17.0141%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.15%)</title><rect x="16.7641%" y="437" width="0.1538%" height="15" fill="rgb(205,209,3)" fg:x="545" fg:w="5"/><text x="17.0141%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (5 samples, 0.15%)</title><rect x="16.7641%" y="421" width="0.1538%" height="15" fill="rgb(243,44,1)" fg:x="545" fg:w="5"/><text x="17.0141%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (5 samples, 0.15%)</title><rect x="16.7641%" y="405" width="0.1538%" height="15" fill="rgb(206,159,16)" fg:x="545" fg:w="5"/><text x="17.0141%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (5 samples, 0.15%)</title><rect x="16.7641%" y="389" width="0.1538%" height="15" fill="rgb(244,77,30)" fg:x="545" fg:w="5"/><text x="17.0141%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (5 samples, 0.15%)</title><rect x="16.7641%" y="373" width="0.1538%" height="15" fill="rgb(218,69,12)" fg:x="545" fg:w="5"/><text x="17.0141%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.09%)</title><rect x="16.9179%" y="453" width="0.0923%" height="15" fill="rgb(212,87,7)" fg:x="550" fg:w="3"/><text x="17.1679%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.09%)</title><rect x="16.9179%" y="437" width="0.0923%" height="15" fill="rgb(245,114,25)" fg:x="550" fg:w="3"/><text x="17.1679%" y="447.50"></text></g><g><title>compare::Compare::compares_le (4 samples, 0.12%)</title><rect x="16.9179%" y="469" width="0.1230%" height="15" fill="rgb(210,61,42)" fg:x="550" fg:w="4"/><text x="17.1679%" y="479.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.03%)</title><rect x="17.0102%" y="453" width="0.0308%" height="15" fill="rgb(211,52,33)" fg:x="553" fg:w="1"/><text x="17.2602%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="17.0102%" y="437" width="0.0308%" height="15" fill="rgb(234,58,33)" fg:x="553" fg:w="1"/><text x="17.2602%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="17.0717%" y="437" width="0.2768%" height="15" fill="rgb(220,115,36)" fg:x="555" fg:w="9"/><text x="17.3217%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="17.5331%" y="293" width="0.0308%" height="15" fill="rgb(243,153,54)" fg:x="570" fg:w="1"/><text x="17.7831%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.15%)</title><rect x="17.5023%" y="309" width="0.1538%" height="15" fill="rgb(251,47,18)" fg:x="569" fg:w="5"/><text x="17.7523%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="17.5638%" y="293" width="0.0923%" height="15" fill="rgb(242,102,42)" fg:x="571" fg:w="3"/><text x="17.8138%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.15%)</title><rect x="17.7484%" y="293" width="0.1538%" height="15" fill="rgb(234,31,38)" fg:x="577" fg:w="5"/><text x="17.9984%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="17.4715%" y="357" width="0.5229%" height="15" fill="rgb(221,117,51)" fg:x="568" fg:w="17"/><text x="17.7215%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="17.4715%" y="341" width="0.5229%" height="15" fill="rgb(212,20,18)" fg:x="568" fg:w="17"/><text x="17.7215%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.52%)</title><rect x="17.4715%" y="325" width="0.5229%" height="15" fill="rgb(245,133,36)" fg:x="568" fg:w="17"/><text x="17.7215%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.34%)</title><rect x="17.6561%" y="309" width="0.3384%" height="15" fill="rgb(212,6,19)" fg:x="574" fg:w="11"/><text x="17.9061%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="17.9022%" y="293" width="0.0923%" height="15" fill="rgb(218,1,36)" fg:x="582" fg:w="3"/><text x="18.1522%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="17.9945%" y="357" width="0.0308%" height="15" fill="rgb(246,84,54)" fg:x="585" fg:w="1"/><text x="18.2445%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.68%)</title><rect x="17.4715%" y="389" width="0.6767%" height="15" fill="rgb(242,110,6)" fg:x="568" fg:w="22"/><text x="17.7215%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.68%)</title><rect x="17.4715%" y="373" width="0.6767%" height="15" fill="rgb(214,47,5)" fg:x="568" fg:w="22"/><text x="17.7215%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.12%)</title><rect x="18.0252%" y="357" width="0.1230%" height="15" fill="rgb(218,159,25)" fg:x="586" fg:w="4"/><text x="18.2752%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (4 samples, 0.12%)</title><rect x="18.0252%" y="341" width="0.1230%" height="15" fill="rgb(215,211,28)" fg:x="586" fg:w="4"/><text x="18.2752%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (4 samples, 0.12%)</title><rect x="18.0252%" y="325" width="0.1230%" height="15" fill="rgb(238,59,32)" fg:x="586" fg:w="4"/><text x="18.2752%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.12%)</title><rect x="18.0252%" y="309" width="0.1230%" height="15" fill="rgb(226,82,3)" fg:x="586" fg:w="4"/><text x="18.2752%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.12%)</title><rect x="18.0252%" y="293" width="0.1230%" height="15" fill="rgb(240,164,32)" fg:x="586" fg:w="4"/><text x="18.2752%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.12%)</title><rect x="18.0252%" y="277" width="0.1230%" height="15" fill="rgb(232,46,7)" fg:x="586" fg:w="4"/><text x="18.2752%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.12%)</title><rect x="18.0252%" y="261" width="0.1230%" height="15" fill="rgb(229,129,53)" fg:x="586" fg:w="4"/><text x="18.2752%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="18.1175%" y="245" width="0.0308%" height="15" fill="rgb(234,188,29)" fg:x="589" fg:w="1"/><text x="18.3675%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="18.1175%" y="229" width="0.0308%" height="15" fill="rgb(246,141,4)" fg:x="589" fg:w="1"/><text x="18.3675%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="18.1790%" y="325" width="0.0923%" height="15" fill="rgb(229,23,39)" fg:x="591" fg:w="3"/><text x="18.4290%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="18.1790%" y="309" width="0.0923%" height="15" fill="rgb(206,12,3)" fg:x="591" fg:w="3"/><text x="18.4290%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="18.1790%" y="293" width="0.0923%" height="15" fill="rgb(252,226,20)" fg:x="591" fg:w="3"/><text x="18.4290%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="18.1790%" y="277" width="0.0923%" height="15" fill="rgb(216,123,35)" fg:x="591" fg:w="3"/><text x="18.4290%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.15%)</title><rect x="18.1790%" y="341" width="0.1538%" height="15" fill="rgb(212,68,40)" fg:x="591" fg:w="5"/><text x="18.4290%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="18.2713%" y="325" width="0.0615%" height="15" fill="rgb(254,125,32)" fg:x="594" fg:w="2"/><text x="18.5213%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="18.2713%" y="309" width="0.0615%" height="15" fill="rgb(253,97,22)" fg:x="594" fg:w="2"/><text x="18.5213%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="18.2713%" y="293" width="0.0615%" height="15" fill="rgb(241,101,14)" fg:x="594" fg:w="2"/><text x="18.5213%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="18.2713%" y="277" width="0.0615%" height="15" fill="rgb(238,103,29)" fg:x="594" fg:w="2"/><text x="18.5213%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="18.3328%" y="341" width="0.0308%" height="15" fill="rgb(233,195,47)" fg:x="596" fg:w="1"/><text x="18.5828%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="18.3636%" y="341" width="0.0308%" height="15" fill="rgb(246,218,30)" fg:x="597" fg:w="1"/><text x="18.6136%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="18.3943%" y="341" width="0.0615%" height="15" fill="rgb(219,145,47)" fg:x="598" fg:w="2"/><text x="18.6443%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="18.3943%" y="325" width="0.0615%" height="15" fill="rgb(243,12,26)" fg:x="598" fg:w="2"/><text x="18.6443%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="18.3943%" y="309" width="0.0615%" height="15" fill="rgb(214,87,16)" fg:x="598" fg:w="2"/><text x="18.6443%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (48 samples, 1.48%)</title><rect x="17.0409%" y="469" width="1.4765%" height="15" fill="rgb(208,99,42)" fg:x="554" fg:w="48"/><text x="17.2909%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 1.48%)</title><rect x="17.0409%" y="453" width="1.4765%" height="15" fill="rgb(253,99,2)" fg:x="554" fg:w="48"/><text x="17.2909%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (38 samples, 1.17%)</title><rect x="17.3485%" y="437" width="1.1689%" height="15" fill="rgb(220,168,23)" fg:x="564" fg:w="38"/><text x="17.5985%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (38 samples, 1.17%)</title><rect x="17.3485%" y="421" width="1.1689%" height="15" fill="rgb(242,38,24)" fg:x="564" fg:w="38"/><text x="17.5985%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (38 samples, 1.17%)</title><rect x="17.3485%" y="405" width="1.1689%" height="15" fill="rgb(225,182,9)" fg:x="564" fg:w="38"/><text x="17.5985%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.37%)</title><rect x="18.1483%" y="389" width="0.3691%" height="15" fill="rgb(243,178,37)" fg:x="590" fg:w="12"/><text x="18.3983%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.37%)</title><rect x="18.1483%" y="373" width="0.3691%" height="15" fill="rgb(232,139,19)" fg:x="590" fg:w="12"/><text x="18.3983%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.37%)</title><rect x="18.1483%" y="357" width="0.3691%" height="15" fill="rgb(225,201,24)" fg:x="590" fg:w="12"/><text x="18.3983%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="18.4559%" y="341" width="0.0615%" height="15" fill="rgb(221,47,46)" fg:x="600" fg:w="2"/><text x="18.7059%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="18.4559%" y="325" width="0.0615%" height="15" fill="rgb(249,23,13)" fg:x="600" fg:w="2"/><text x="18.7059%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (61 samples, 1.88%)</title><rect x="16.7333%" y="485" width="1.8763%" height="15" fill="rgb(219,9,5)" fg:x="544" fg:w="61"/><text x="16.9833%" y="495.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (3 samples, 0.09%)</title><rect x="18.5174%" y="469" width="0.0923%" height="15" fill="rgb(254,171,16)" fg:x="602" fg:w="3"/><text x="18.7674%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (66 samples, 2.03%)</title><rect x="16.7333%" y="501" width="2.0301%" height="15" fill="rgb(230,171,20)" fg:x="544" fg:w="66"/><text x="16.9833%" y="511.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (5 samples, 0.15%)</title><rect x="18.6097%" y="485" width="0.1538%" height="15" fill="rgb(210,71,41)" fg:x="605" fg:w="5"/><text x="18.8597%" y="495.50"></text></g><g><title>compare::Compare::compares_le (4 samples, 0.12%)</title><rect x="18.7942%" y="485" width="0.1230%" height="15" fill="rgb(206,173,20)" fg:x="611" fg:w="4"/><text x="19.0442%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (4 samples, 0.12%)</title><rect x="18.7942%" y="469" width="0.1230%" height="15" fill="rgb(233,88,34)" fg:x="611" fg:w="4"/><text x="19.0442%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.12%)</title><rect x="18.7942%" y="453" width="0.1230%" height="15" fill="rgb(223,209,46)" fg:x="611" fg:w="4"/><text x="19.0442%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.22%)</title><rect x="18.9173%" y="453" width="0.2153%" height="15" fill="rgb(250,43,18)" fg:x="615" fg:w="7"/><text x="19.1673%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="19.2249%" y="309" width="0.0308%" height="15" fill="rgb(208,13,10)" fg:x="625" fg:w="1"/><text x="19.4749%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="19.1941%" y="325" width="0.0923%" height="15" fill="rgb(212,200,36)" fg:x="624" fg:w="3"/><text x="19.4441%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="19.2556%" y="309" width="0.0308%" height="15" fill="rgb(225,90,30)" fg:x="626" fg:w="1"/><text x="19.5056%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="19.3171%" y="309" width="0.0615%" height="15" fill="rgb(236,182,39)" fg:x="628" fg:w="2"/><text x="19.5671%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="19.1326%" y="373" width="0.3076%" height="15" fill="rgb(212,144,35)" fg:x="622" fg:w="10"/><text x="19.3826%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="19.1326%" y="357" width="0.3076%" height="15" fill="rgb(228,63,44)" fg:x="622" fg:w="10"/><text x="19.3826%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="19.1326%" y="341" width="0.3076%" height="15" fill="rgb(228,109,6)" fg:x="622" fg:w="10"/><text x="19.3826%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.15%)</title><rect x="19.2864%" y="325" width="0.1538%" height="15" fill="rgb(238,117,24)" fg:x="627" fg:w="5"/><text x="19.5364%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="19.3787%" y="309" width="0.0615%" height="15" fill="rgb(242,26,26)" fg:x="630" fg:w="2"/><text x="19.6287%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.62%)</title><rect x="19.1326%" y="405" width="0.6152%" height="15" fill="rgb(221,92,48)" fg:x="622" fg:w="20"/><text x="19.3826%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.62%)</title><rect x="19.1326%" y="389" width="0.6152%" height="15" fill="rgb(209,209,32)" fg:x="622" fg:w="20"/><text x="19.3826%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.31%)</title><rect x="19.4402%" y="373" width="0.3076%" height="15" fill="rgb(221,70,22)" fg:x="632" fg:w="10"/><text x="19.6902%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (10 samples, 0.31%)</title><rect x="19.4402%" y="357" width="0.3076%" height="15" fill="rgb(248,145,5)" fg:x="632" fg:w="10"/><text x="19.6902%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (10 samples, 0.31%)</title><rect x="19.4402%" y="341" width="0.3076%" height="15" fill="rgb(226,116,26)" fg:x="632" fg:w="10"/><text x="19.6902%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (10 samples, 0.31%)</title><rect x="19.4402%" y="325" width="0.3076%" height="15" fill="rgb(244,5,17)" fg:x="632" fg:w="10"/><text x="19.6902%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.31%)</title><rect x="19.4402%" y="309" width="0.3076%" height="15" fill="rgb(252,159,33)" fg:x="632" fg:w="10"/><text x="19.6902%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.31%)</title><rect x="19.4402%" y="293" width="0.3076%" height="15" fill="rgb(206,71,0)" fg:x="632" fg:w="10"/><text x="19.6902%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.31%)</title><rect x="19.4402%" y="277" width="0.3076%" height="15" fill="rgb(233,118,54)" fg:x="632" fg:w="10"/><text x="19.6902%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="19.6247%" y="261" width="0.1230%" height="15" fill="rgb(234,83,48)" fg:x="638" fg:w="4"/><text x="19.8747%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="19.6555%" y="245" width="0.0923%" height="15" fill="rgb(228,3,54)" fg:x="639" fg:w="3"/><text x="19.9055%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="19.7478%" y="357" width="0.1230%" height="15" fill="rgb(226,155,13)" fg:x="642" fg:w="4"/><text x="19.9978%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.09%)</title><rect x="19.7785%" y="341" width="0.0923%" height="15" fill="rgb(241,28,37)" fg:x="643" fg:w="3"/><text x="20.0285%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.18%)</title><rect x="19.8708%" y="341" width="0.1846%" height="15" fill="rgb(233,93,10)" fg:x="646" fg:w="6"/><text x="20.1208%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.18%)</title><rect x="19.8708%" y="325" width="0.1846%" height="15" fill="rgb(225,113,19)" fg:x="646" fg:w="6"/><text x="20.1208%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.18%)</title><rect x="19.8708%" y="309" width="0.1846%" height="15" fill="rgb(241,2,18)" fg:x="646" fg:w="6"/><text x="20.1208%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (6 samples, 0.18%)</title><rect x="19.8708%" y="293" width="0.1846%" height="15" fill="rgb(228,207,21)" fg:x="646" fg:w="6"/><text x="20.1208%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.22%)</title><rect x="19.8708%" y="357" width="0.2153%" height="15" fill="rgb(213,211,35)" fg:x="646" fg:w="7"/><text x="20.1208%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="20.0554%" y="341" width="0.0308%" height="15" fill="rgb(209,83,10)" fg:x="652" fg:w="1"/><text x="20.3054%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="20.0554%" y="325" width="0.0308%" height="15" fill="rgb(209,164,1)" fg:x="652" fg:w="1"/><text x="20.3054%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="20.0554%" y="309" width="0.0308%" height="15" fill="rgb(213,184,43)" fg:x="652" fg:w="1"/><text x="20.3054%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="20.0554%" y="293" width="0.0308%" height="15" fill="rgb(231,61,34)" fg:x="652" fg:w="1"/><text x="20.3054%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="20.0861%" y="357" width="0.0308%" height="15" fill="rgb(235,75,3)" fg:x="653" fg:w="1"/><text x="20.3361%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="20.1169%" y="357" width="0.0615%" height="15" fill="rgb(220,106,47)" fg:x="654" fg:w="2"/><text x="20.3669%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="20.1169%" y="341" width="0.0615%" height="15" fill="rgb(210,196,33)" fg:x="654" fg:w="2"/><text x="20.3669%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="20.1169%" y="325" width="0.0615%" height="15" fill="rgb(229,154,42)" fg:x="654" fg:w="2"/><text x="20.3669%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16 samples, 0.49%)</title><rect x="19.7478%" y="373" width="0.4922%" height="15" fill="rgb(228,114,26)" fg:x="642" fg:w="16"/><text x="19.9978%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="20.1784%" y="357" width="0.0615%" height="15" fill="rgb(208,144,1)" fg:x="656" fg:w="2"/><text x="20.4284%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (45 samples, 1.38%)</title><rect x="18.9173%" y="485" width="1.3842%" height="15" fill="rgb(239,112,37)" fg:x="615" fg:w="45"/><text x="19.1673%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 1.38%)</title><rect x="18.9173%" y="469" width="1.3842%" height="15" fill="rgb(210,96,50)" fg:x="615" fg:w="45"/><text x="19.1673%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (38 samples, 1.17%)</title><rect x="19.1326%" y="453" width="1.1689%" height="15" fill="rgb(222,178,2)" fg:x="622" fg:w="38"/><text x="19.3826%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (38 samples, 1.17%)</title><rect x="19.1326%" y="437" width="1.1689%" height="15" fill="rgb(226,74,18)" fg:x="622" fg:w="38"/><text x="19.3826%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (38 samples, 1.17%)</title><rect x="19.1326%" y="421" width="1.1689%" height="15" fill="rgb(225,67,54)" fg:x="622" fg:w="38"/><text x="19.3826%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (18 samples, 0.55%)</title><rect x="19.7478%" y="405" width="0.5537%" height="15" fill="rgb(251,92,32)" fg:x="642" fg:w="18"/><text x="19.9978%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.55%)</title><rect x="19.7478%" y="389" width="0.5537%" height="15" fill="rgb(228,149,22)" fg:x="642" fg:w="18"/><text x="19.9978%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="20.2399%" y="373" width="0.0615%" height="15" fill="rgb(243,54,13)" fg:x="658" fg:w="2"/><text x="20.4899%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (54 samples, 1.66%)</title><rect x="18.7635%" y="501" width="1.6610%" height="15" fill="rgb(243,180,28)" fg:x="610" fg:w="54"/><text x="19.0135%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (4 samples, 0.12%)</title><rect x="20.3014%" y="485" width="0.1230%" height="15" fill="rgb(208,167,24)" fg:x="660" fg:w="4"/><text x="20.5514%" y="495.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="20.3630%" y="469" width="0.0615%" height="15" fill="rgb(245,73,45)" fg:x="662" fg:w="2"/><text x="20.6130%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (150 samples, 4.61%)</title><rect x="15.8413%" y="517" width="4.6140%" height="15" fill="rgb(237,203,48)" fg:x="515" fg:w="150"/><text x="16.0913%" y="527.50">mut_b..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="20.4245%" y="501" width="0.0308%" height="15" fill="rgb(211,197,16)" fg:x="664" fg:w="1"/><text x="20.6745%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="20.5475%" y="373" width="0.0308%" height="15" fill="rgb(243,99,51)" fg:x="668" fg:w="1"/><text x="20.7975%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="20.4860%" y="389" width="0.1230%" height="15" fill="rgb(215,123,29)" fg:x="666" fg:w="4"/><text x="20.7360%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="20.5783%" y="373" width="0.0308%" height="15" fill="rgb(239,186,37)" fg:x="669" fg:w="1"/><text x="20.8283%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.12%)</title><rect x="20.7321%" y="373" width="0.1230%" height="15" fill="rgb(252,136,39)" fg:x="674" fg:w="4"/><text x="20.9821%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.43%)</title><rect x="20.4552%" y="437" width="0.4306%" height="15" fill="rgb(223,213,32)" fg:x="665" fg:w="14"/><text x="20.7052%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.43%)</title><rect x="20.4552%" y="421" width="0.4306%" height="15" fill="rgb(233,115,5)" fg:x="665" fg:w="14"/><text x="20.7052%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.43%)</title><rect x="20.4552%" y="405" width="0.4306%" height="15" fill="rgb(207,226,44)" fg:x="665" fg:w="14"/><text x="20.7052%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.28%)</title><rect x="20.6090%" y="389" width="0.2768%" height="15" fill="rgb(208,126,0)" fg:x="670" fg:w="9"/><text x="20.8590%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="20.8551%" y="373" width="0.0308%" height="15" fill="rgb(244,66,21)" fg:x="678" fg:w="1"/><text x="21.1051%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="20.9166%" y="309" width="0.0308%" height="15" fill="rgb(222,97,12)" fg:x="680" fg:w="1"/><text x="21.1666%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.52%)</title><rect x="20.4552%" y="469" width="0.5229%" height="15" fill="rgb(219,213,19)" fg:x="665" fg:w="17"/><text x="20.7052%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17 samples, 0.52%)</title><rect x="20.4552%" y="453" width="0.5229%" height="15" fill="rgb(252,169,30)" fg:x="665" fg:w="17"/><text x="20.7052%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="20.8859%" y="437" width="0.0923%" height="15" fill="rgb(206,32,51)" fg:x="679" fg:w="3"/><text x="21.1359%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="20.8859%" y="421" width="0.0923%" height="15" fill="rgb(250,172,42)" fg:x="679" fg:w="3"/><text x="21.1359%" y="431.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="20.8859%" y="405" width="0.0923%" height="15" fill="rgb(209,34,43)" fg:x="679" fg:w="3"/><text x="21.1359%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="20.8859%" y="389" width="0.0923%" height="15" fill="rgb(223,11,35)" fg:x="679" fg:w="3"/><text x="21.1359%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="20.8859%" y="373" width="0.0923%" height="15" fill="rgb(251,219,26)" fg:x="679" fg:w="3"/><text x="21.1359%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="20.8859%" y="357" width="0.0923%" height="15" fill="rgb(231,119,3)" fg:x="679" fg:w="3"/><text x="21.1359%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="20.8859%" y="341" width="0.0923%" height="15" fill="rgb(216,97,11)" fg:x="679" fg:w="3"/><text x="21.1359%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="20.8859%" y="325" width="0.0923%" height="15" fill="rgb(223,59,9)" fg:x="679" fg:w="3"/><text x="21.1359%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="20.9474%" y="309" width="0.0308%" height="15" fill="rgb(233,93,31)" fg:x="681" fg:w="1"/><text x="21.1974%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="21.0089%" y="421" width="0.0615%" height="15" fill="rgb(239,81,33)" fg:x="683" fg:w="2"/><text x="21.2589%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="21.0397%" y="405" width="0.0308%" height="15" fill="rgb(213,120,34)" fg:x="684" fg:w="1"/><text x="21.2897%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8 samples, 0.25%)</title><rect x="21.0704%" y="421" width="0.2461%" height="15" fill="rgb(243,49,53)" fg:x="685" fg:w="8"/><text x="21.3204%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.25%)</title><rect x="21.0704%" y="405" width="0.2461%" height="15" fill="rgb(247,216,33)" fg:x="685" fg:w="8"/><text x="21.3204%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8 samples, 0.25%)</title><rect x="21.0704%" y="389" width="0.2461%" height="15" fill="rgb(226,26,14)" fg:x="685" fg:w="8"/><text x="21.3204%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.25%)</title><rect x="21.0704%" y="373" width="0.2461%" height="15" fill="rgb(215,49,53)" fg:x="685" fg:w="8"/><text x="21.3204%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (8 samples, 0.25%)</title><rect x="21.0704%" y="357" width="0.2461%" height="15" fill="rgb(245,162,40)" fg:x="685" fg:w="8"/><text x="21.3204%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3 samples, 0.09%)</title><rect x="21.3165%" y="421" width="0.0923%" height="15" fill="rgb(229,68,17)" fg:x="693" fg:w="3"/><text x="21.5665%" y="431.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="21.4088%" y="421" width="0.0308%" height="15" fill="rgb(213,182,10)" fg:x="696" fg:w="1"/><text x="21.6588%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.18%)</title><rect x="21.4396%" y="421" width="0.1846%" height="15" fill="rgb(245,125,30)" fg:x="697" fg:w="6"/><text x="21.6896%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.18%)</title><rect x="21.4396%" y="405" width="0.1846%" height="15" fill="rgb(232,202,2)" fg:x="697" fg:w="6"/><text x="21.6896%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41 samples, 1.26%)</title><rect x="20.4552%" y="517" width="1.2612%" height="15" fill="rgb(237,140,51)" fg:x="665" fg:w="41"/><text x="20.7052%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41 samples, 1.26%)</title><rect x="20.4552%" y="501" width="1.2612%" height="15" fill="rgb(236,157,25)" fg:x="665" fg:w="41"/><text x="20.7052%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 1.26%)</title><rect x="20.4552%" y="485" width="1.2612%" height="15" fill="rgb(219,209,0)" fg:x="665" fg:w="41"/><text x="20.7052%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (24 samples, 0.74%)</title><rect x="20.9782%" y="469" width="0.7382%" height="15" fill="rgb(240,116,54)" fg:x="682" fg:w="24"/><text x="21.2282%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 0.74%)</title><rect x="20.9782%" y="453" width="0.7382%" height="15" fill="rgb(216,10,36)" fg:x="682" fg:w="24"/><text x="21.2282%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (24 samples, 0.74%)</title><rect x="20.9782%" y="437" width="0.7382%" height="15" fill="rgb(222,72,44)" fg:x="682" fg:w="24"/><text x="21.2282%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.09%)</title><rect x="21.6241%" y="421" width="0.0923%" height="15" fill="rgb(232,159,9)" fg:x="703" fg:w="3"/><text x="21.8741%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="21.6241%" y="405" width="0.0923%" height="15" fill="rgb(210,39,32)" fg:x="703" fg:w="3"/><text x="21.8741%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="21.6241%" y="389" width="0.0923%" height="15" fill="rgb(216,194,45)" fg:x="703" fg:w="3"/><text x="21.8741%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="21.7164%" y="453" width="0.0308%" height="15" fill="rgb(218,18,35)" fg:x="706" fg:w="1"/><text x="21.9664%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="21.7164%" y="437" width="0.0308%" height="15" fill="rgb(207,83,51)" fg:x="706" fg:w="1"/><text x="21.9664%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="21.7164%" y="421" width="0.0308%" height="15" fill="rgb(225,63,43)" fg:x="706" fg:w="1"/><text x="21.9664%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="21.7164%" y="501" width="0.0615%" height="15" fill="rgb(207,57,36)" fg:x="706" fg:w="2"/><text x="21.9664%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.06%)</title><rect x="21.7164%" y="485" width="0.0615%" height="15" fill="rgb(216,99,33)" fg:x="706" fg:w="2"/><text x="21.9664%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.06%)</title><rect x="21.7164%" y="469" width="0.0615%" height="15" fill="rgb(225,42,16)" fg:x="706" fg:w="2"/><text x="21.9664%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="21.7472%" y="453" width="0.0308%" height="15" fill="rgb(220,201,45)" fg:x="707" fg:w="1"/><text x="21.9972%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.03%)</title><rect x="21.7472%" y="437" width="0.0308%" height="15" fill="rgb(225,33,4)" fg:x="707" fg:w="1"/><text x="21.9972%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (224 samples, 6.89%)</title><rect x="14.9492%" y="533" width="6.8902%" height="15" fill="rgb(224,33,50)" fg:x="486" fg:w="224"/><text x="15.1992%" y="543.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.12%)</title><rect x="21.7164%" y="517" width="0.1230%" height="15" fill="rgb(246,198,51)" fg:x="706" fg:w="4"/><text x="21.9664%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (2 samples, 0.06%)</title><rect x="21.7779%" y="501" width="0.0615%" height="15" fill="rgb(205,22,4)" fg:x="708" fg:w="2"/><text x="22.0279%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (2 samples, 0.06%)</title><rect x="21.8394%" y="533" width="0.0615%" height="15" fill="rgb(206,3,8)" fg:x="710" fg:w="2"/><text x="22.0894%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.06%)</title><rect x="21.8394%" y="517" width="0.0615%" height="15" fill="rgb(251,23,15)" fg:x="710" fg:w="2"/><text x="22.0894%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="21.8702%" y="501" width="0.0308%" height="15" fill="rgb(252,88,28)" fg:x="711" fg:w="1"/><text x="22.1202%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_size (1 samples, 0.03%)</title><rect x="21.9010%" y="533" width="0.0308%" height="15" fill="rgb(212,127,14)" fg:x="712" fg:w="1"/><text x="22.1510%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="21.9010%" y="517" width="0.0308%" height="15" fill="rgb(247,145,37)" fg:x="712" fg:w="1"/><text x="22.1510%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (238 samples, 7.32%)</title><rect x="14.6416%" y="549" width="7.3208%" height="15" fill="rgb(209,117,53)" fg:x="476" fg:w="238"/><text x="14.8916%" y="559.50">project1::..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="21.9317%" y="533" width="0.0308%" height="15" fill="rgb(212,90,42)" fg:x="713" fg:w="1"/><text x="22.1817%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="21.9317%" y="517" width="0.0308%" height="15" fill="rgb(218,164,37)" fg:x="713" fg:w="1"/><text x="22.1817%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="22.0240%" y="533" width="0.0308%" height="15" fill="rgb(246,65,34)" fg:x="716" fg:w="1"/><text x="22.2740%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="22.0240%" y="517" width="0.0308%" height="15" fill="rgb(231,100,33)" fg:x="716" fg:w="1"/><text x="22.2740%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="22.0548%" y="533" width="0.0308%" height="15" fill="rgb(228,126,14)" fg:x="717" fg:w="1"/><text x="22.3048%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="22.0548%" y="517" width="0.0308%" height="15" fill="rgb(215,173,21)" fg:x="717" fg:w="1"/><text x="22.3048%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="22.1778%" y="485" width="0.0308%" height="15" fill="rgb(210,6,40)" fg:x="721" fg:w="1"/><text x="22.4278%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="22.1778%" y="469" width="0.0308%" height="15" fill="rgb(212,48,18)" fg:x="721" fg:w="1"/><text x="22.4278%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="22.1778%" y="453" width="0.0308%" height="15" fill="rgb(230,214,11)" fg:x="721" fg:w="1"/><text x="22.4278%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1 samples, 0.03%)</title><rect x="22.1778%" y="437" width="0.0308%" height="15" fill="rgb(254,105,39)" fg:x="721" fg:w="1"/><text x="22.4278%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (1 samples, 0.03%)</title><rect x="22.1778%" y="421" width="0.0308%" height="15" fill="rgb(245,158,5)" fg:x="721" fg:w="1"/><text x="22.4278%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="22.2086%" y="469" width="0.0615%" height="15" fill="rgb(249,208,11)" fg:x="722" fg:w="2"/><text x="22.4586%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="22.2701%" y="405" width="0.0615%" height="15" fill="rgb(210,39,28)" fg:x="724" fg:w="2"/><text x="22.5201%" y="415.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (2 samples, 0.06%)</title><rect x="22.2701%" y="389" width="0.0615%" height="15" fill="rgb(211,56,53)" fg:x="724" fg:w="2"/><text x="22.5201%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="22.2701%" y="373" width="0.0615%" height="15" fill="rgb(226,201,30)" fg:x="724" fg:w="2"/><text x="22.5201%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="22.2701%" y="357" width="0.0615%" height="15" fill="rgb(239,101,34)" fg:x="724" fg:w="2"/><text x="22.5201%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="22.3316%" y="341" width="0.0615%" height="15" fill="rgb(226,209,5)" fg:x="726" fg:w="2"/><text x="22.5816%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="22.3624%" y="325" width="0.0308%" height="15" fill="rgb(250,105,47)" fg:x="727" fg:w="1"/><text x="22.6124%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="22.3624%" y="309" width="0.0308%" height="15" fill="rgb(230,72,3)" fg:x="727" fg:w="1"/><text x="22.6124%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="22.3624%" y="293" width="0.0308%" height="15" fill="rgb(232,218,39)" fg:x="727" fg:w="1"/><text x="22.6124%" y="303.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="22.3624%" y="277" width="0.0308%" height="15" fill="rgb(248,166,6)" fg:x="727" fg:w="1"/><text x="22.6124%" y="287.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="22.3624%" y="261" width="0.0308%" height="15" fill="rgb(247,89,20)" fg:x="727" fg:w="1"/><text x="22.6124%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.09%)</title><rect x="22.3316%" y="405" width="0.0923%" height="15" fill="rgb(248,130,54)" fg:x="726" fg:w="3"/><text x="22.5816%" y="415.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="22.3316%" y="389" width="0.0923%" height="15" fill="rgb(234,196,4)" fg:x="726" fg:w="3"/><text x="22.5816%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (3 samples, 0.09%)</title><rect x="22.3316%" y="373" width="0.0923%" height="15" fill="rgb(250,143,31)" fg:x="726" fg:w="3"/><text x="22.5816%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.09%)</title><rect x="22.3316%" y="357" width="0.0923%" height="15" fill="rgb(211,110,34)" fg:x="726" fg:w="3"/><text x="22.5816%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (1 samples, 0.03%)</title><rect x="22.3931%" y="341" width="0.0308%" height="15" fill="rgb(215,124,48)" fg:x="728" fg:w="1"/><text x="22.6431%" y="351.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.03%)</title><rect x="22.3931%" y="325" width="0.0308%" height="15" fill="rgb(216,46,13)" fg:x="728" fg:w="1"/><text x="22.6431%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="22.3931%" y="309" width="0.0308%" height="15" fill="rgb(205,184,25)" fg:x="728" fg:w="1"/><text x="22.6431%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="22.3931%" y="293" width="0.0308%" height="15" fill="rgb(228,1,10)" fg:x="728" fg:w="1"/><text x="22.6431%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.09%)</title><rect x="22.4239%" y="357" width="0.0923%" height="15" fill="rgb(213,116,27)" fg:x="729" fg:w="3"/><text x="22.6739%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.03%)</title><rect x="22.4854%" y="341" width="0.0308%" height="15" fill="rgb(241,95,50)" fg:x="731" fg:w="1"/><text x="22.7354%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.12%)</title><rect x="22.4239%" y="373" width="0.1230%" height="15" fill="rgb(238,48,32)" fg:x="729" fg:w="4"/><text x="22.6739%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="22.5161%" y="357" width="0.0308%" height="15" fill="rgb(235,113,49)" fg:x="732" fg:w="1"/><text x="22.7661%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="22.5161%" y="341" width="0.0308%" height="15" fill="rgb(205,127,43)" fg:x="732" fg:w="1"/><text x="22.7661%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (5 samples, 0.15%)</title><rect x="22.5469%" y="373" width="0.1538%" height="15" fill="rgb(250,162,2)" fg:x="733" fg:w="5"/><text x="22.7969%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (5 samples, 0.15%)</title><rect x="22.5469%" y="357" width="0.1538%" height="15" fill="rgb(220,13,41)" fg:x="733" fg:w="5"/><text x="22.7969%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (5 samples, 0.15%)</title><rect x="22.5469%" y="341" width="0.1538%" height="15" fill="rgb(249,221,25)" fg:x="733" fg:w="5"/><text x="22.7969%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (14 samples, 0.43%)</title><rect x="22.4239%" y="389" width="0.4306%" height="15" fill="rgb(215,208,19)" fg:x="729" fg:w="14"/><text x="22.6739%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.15%)</title><rect x="22.7007%" y="373" width="0.1538%" height="15" fill="rgb(236,175,2)" fg:x="738" fg:w="5"/><text x="22.9507%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.15%)</title><rect x="22.7007%" y="357" width="0.1538%" height="15" fill="rgb(241,52,2)" fg:x="738" fg:w="5"/><text x="22.9507%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.15%)</title><rect x="22.7007%" y="341" width="0.1538%" height="15" fill="rgb(248,140,14)" fg:x="738" fg:w="5"/><text x="22.9507%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="22.8545%" y="373" width="0.0308%" height="15" fill="rgb(253,22,42)" fg:x="743" fg:w="1"/><text x="23.1045%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (17 samples, 0.52%)</title><rect x="22.4239%" y="405" width="0.5229%" height="15" fill="rgb(234,61,47)" fg:x="729" fg:w="17"/><text x="22.6739%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (3 samples, 0.09%)</title><rect x="22.8545%" y="389" width="0.0923%" height="15" fill="rgb(208,226,15)" fg:x="743" fg:w="3"/><text x="23.1045%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.06%)</title><rect x="22.8853%" y="373" width="0.0615%" height="15" fill="rgb(217,221,4)" fg:x="744" fg:w="2"/><text x="23.1353%" y="383.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="23.0083%" y="245" width="0.0615%" height="15" fill="rgb(212,174,34)" fg:x="748" fg:w="2"/><text x="23.2583%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.15%)</title><rect x="22.9468%" y="357" width="0.1538%" height="15" fill="rgb(253,83,4)" fg:x="746" fg:w="5"/><text x="23.1968%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.15%)</title><rect x="22.9468%" y="341" width="0.1538%" height="15" fill="rgb(250,195,49)" fg:x="746" fg:w="5"/><text x="23.1968%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.15%)</title><rect x="22.9468%" y="325" width="0.1538%" height="15" fill="rgb(241,192,25)" fg:x="746" fg:w="5"/><text x="23.1968%" y="335.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.15%)</title><rect x="22.9468%" y="309" width="0.1538%" height="15" fill="rgb(208,124,10)" fg:x="746" fg:w="5"/><text x="23.1968%" y="319.50"></text></g><g><title>__rdl_alloc (5 samples, 0.15%)</title><rect x="22.9468%" y="293" width="0.1538%" height="15" fill="rgb(222,33,0)" fg:x="746" fg:w="5"/><text x="23.1968%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.15%)</title><rect x="22.9468%" y="277" width="0.1538%" height="15" fill="rgb(234,209,28)" fg:x="746" fg:w="5"/><text x="23.1968%" y="287.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.15%)</title><rect x="22.9468%" y="261" width="0.1538%" height="15" fill="rgb(224,11,23)" fg:x="746" fg:w="5"/><text x="23.1968%" y="271.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="23.0698%" y="245" width="0.0308%" height="15" fill="rgb(232,99,1)" fg:x="750" fg:w="1"/><text x="23.3198%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (28 samples, 0.86%)</title><rect x="22.2701%" y="469" width="0.8613%" height="15" fill="rgb(237,95,45)" fg:x="724" fg:w="28"/><text x="22.5201%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.86%)</title><rect x="22.2701%" y="453" width="0.8613%" height="15" fill="rgb(208,109,11)" fg:x="724" fg:w="28"/><text x="22.5201%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (28 samples, 0.86%)</title><rect x="22.2701%" y="437" width="0.8613%" height="15" fill="rgb(216,190,48)" fg:x="724" fg:w="28"/><text x="22.5201%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (28 samples, 0.86%)</title><rect x="22.2701%" y="421" width="0.8613%" height="15" fill="rgb(251,171,36)" fg:x="724" fg:w="28"/><text x="22.5201%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (6 samples, 0.18%)</title><rect x="22.9468%" y="405" width="0.1846%" height="15" fill="rgb(230,62,22)" fg:x="746" fg:w="6"/><text x="23.1968%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.18%)</title><rect x="22.9468%" y="389" width="0.1846%" height="15" fill="rgb(225,114,35)" fg:x="746" fg:w="6"/><text x="23.1968%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (6 samples, 0.18%)</title><rect x="22.9468%" y="373" width="0.1846%" height="15" fill="rgb(215,118,42)" fg:x="746" fg:w="6"/><text x="23.1968%" y="383.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="23.1006%" y="357" width="0.0308%" height="15" fill="rgb(243,119,21)" fg:x="751" fg:w="1"/><text x="23.3506%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="23.1313%" y="453" width="0.0615%" height="15" fill="rgb(252,177,53)" fg:x="752" fg:w="2"/><text x="23.3813%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="23.1313%" y="437" width="0.0615%" height="15" fill="rgb(237,209,29)" fg:x="752" fg:w="2"/><text x="23.3813%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="23.1929%" y="453" width="0.0615%" height="15" fill="rgb(212,65,23)" fg:x="754" fg:w="2"/><text x="23.4429%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.09%)</title><rect x="23.2544%" y="453" width="0.0923%" height="15" fill="rgb(230,222,46)" fg:x="756" fg:w="3"/><text x="23.5044%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.09%)</title><rect x="23.2544%" y="437" width="0.0923%" height="15" fill="rgb(215,135,32)" fg:x="756" fg:w="3"/><text x="23.5044%" y="447.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (3 samples, 0.09%)</title><rect x="23.2544%" y="421" width="0.0923%" height="15" fill="rgb(246,101,22)" fg:x="756" fg:w="3"/><text x="23.5044%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="23.3467%" y="453" width="0.0308%" height="15" fill="rgb(206,107,13)" fg:x="759" fg:w="1"/><text x="23.5967%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.03%)</title><rect x="23.3467%" y="437" width="0.0308%" height="15" fill="rgb(250,100,44)" fg:x="759" fg:w="1"/><text x="23.5967%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="23.3774%" y="453" width="0.0308%" height="15" fill="rgb(231,147,38)" fg:x="760" fg:w="1"/><text x="23.6274%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.15%)</title><rect x="23.4082%" y="453" width="0.1538%" height="15" fill="rgb(229,8,40)" fg:x="761" fg:w="5"/><text x="23.6582%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.15%)</title><rect x="23.4082%" y="437" width="0.1538%" height="15" fill="rgb(221,135,30)" fg:x="761" fg:w="5"/><text x="23.6582%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.15%)</title><rect x="23.4082%" y="421" width="0.1538%" height="15" fill="rgb(249,193,18)" fg:x="761" fg:w="5"/><text x="23.6582%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="23.5620%" y="453" width="0.0923%" height="15" fill="rgb(209,133,39)" fg:x="766" fg:w="3"/><text x="23.8120%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="23.5620%" y="437" width="0.0923%" height="15" fill="rgb(232,100,14)" fg:x="766" fg:w="3"/><text x="23.8120%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (48 samples, 1.48%)</title><rect x="22.2086%" y="485" width="1.4765%" height="15" fill="rgb(224,185,1)" fg:x="722" fg:w="48"/><text x="22.4586%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (18 samples, 0.55%)</title><rect x="23.1313%" y="469" width="0.5537%" height="15" fill="rgb(223,139,8)" fg:x="752" fg:w="18"/><text x="23.3813%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="23.6543%" y="453" width="0.0308%" height="15" fill="rgb(232,213,38)" fg:x="769" fg:w="1"/><text x="23.9043%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="23.6543%" y="437" width="0.0308%" height="15" fill="rgb(207,94,22)" fg:x="769" fg:w="1"/><text x="23.9043%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="23.6543%" y="421" width="0.0308%" height="15" fill="rgb(219,183,54)" fg:x="769" fg:w="1"/><text x="23.9043%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.03%)</title><rect x="23.7158%" y="469" width="0.0308%" height="15" fill="rgb(216,185,54)" fg:x="771" fg:w="1"/><text x="23.9658%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.03%)</title><rect x="23.7158%" y="453" width="0.0308%" height="15" fill="rgb(254,217,39)" fg:x="771" fg:w="1"/><text x="23.9658%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="23.7158%" y="437" width="0.0308%" height="15" fill="rgb(240,178,23)" fg:x="771" fg:w="1"/><text x="23.9658%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="23.7158%" y="421" width="0.0308%" height="15" fill="rgb(218,11,47)" fg:x="771" fg:w="1"/><text x="23.9658%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (62 samples, 1.91%)</title><rect x="21.9625%" y="549" width="1.9071%" height="15" fill="rgb(218,51,51)" fg:x="714" fg:w="62"/><text x="22.2125%" y="559.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (58 samples, 1.78%)</title><rect x="22.0855%" y="533" width="1.7841%" height="15" fill="rgb(238,126,27)" fg:x="718" fg:w="58"/><text x="22.3355%" y="543.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (58 samples, 1.78%)</title><rect x="22.0855%" y="517" width="1.7841%" height="15" fill="rgb(249,202,22)" fg:x="718" fg:w="58"/><text x="22.3355%" y="527.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (57 samples, 1.75%)</title><rect x="22.1163%" y="501" width="1.7533%" height="15" fill="rgb(254,195,49)" fg:x="719" fg:w="57"/><text x="22.3663%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.18%)</title><rect x="23.6850%" y="485" width="0.1846%" height="15" fill="rgb(208,123,14)" fg:x="770" fg:w="6"/><text x="23.9350%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (4 samples, 0.12%)</title><rect x="23.7465%" y="469" width="0.1230%" height="15" fill="rgb(224,200,8)" fg:x="772" fg:w="4"/><text x="23.9965%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.06%)</title><rect x="23.8081%" y="453" width="0.0615%" height="15" fill="rgb(217,61,36)" fg:x="774" fg:w="2"/><text x="24.0581%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.06%)</title><rect x="23.8081%" y="437" width="0.0615%" height="15" fill="rgb(206,35,45)" fg:x="774" fg:w="2"/><text x="24.0581%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="23.9003%" y="309" width="0.0308%" height="15" fill="rgb(217,65,33)" fg:x="777" fg:w="1"/><text x="24.1503%" y="319.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="23.9003%" y="293" width="0.0308%" height="15" fill="rgb(222,158,48)" fg:x="777" fg:w="1"/><text x="24.1503%" y="303.50"></text></g><g><title>do_anonymous_page (3 samples, 0.09%)</title><rect x="23.9003%" y="357" width="0.0923%" height="15" fill="rgb(254,2,54)" fg:x="777" fg:w="3"/><text x="24.1503%" y="367.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.09%)</title><rect x="23.9003%" y="341" width="0.0923%" height="15" fill="rgb(250,143,38)" fg:x="777" fg:w="3"/><text x="24.1503%" y="351.50"></text></g><g><title>__folio_alloc (3 samples, 0.09%)</title><rect x="23.9003%" y="325" width="0.0923%" height="15" fill="rgb(248,25,0)" fg:x="777" fg:w="3"/><text x="24.1503%" y="335.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.06%)</title><rect x="23.9311%" y="309" width="0.0615%" height="15" fill="rgb(206,152,27)" fg:x="778" fg:w="2"/><text x="24.1811%" y="319.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.12%)</title><rect x="23.9003%" y="421" width="0.1230%" height="15" fill="rgb(240,77,30)" fg:x="777" fg:w="4"/><text x="24.1503%" y="431.50"></text></g><g><title>handle_mm_fault (4 samples, 0.12%)</title><rect x="23.9003%" y="405" width="0.1230%" height="15" fill="rgb(231,5,3)" fg:x="777" fg:w="4"/><text x="24.1503%" y="415.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.12%)</title><rect x="23.9003%" y="389" width="0.1230%" height="15" fill="rgb(207,226,32)" fg:x="777" fg:w="4"/><text x="24.1503%" y="399.50"></text></g><g><title>handle_pte_fault (4 samples, 0.12%)</title><rect x="23.9003%" y="373" width="0.1230%" height="15" fill="rgb(222,207,47)" fg:x="777" fg:w="4"/><text x="24.1503%" y="383.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.03%)</title><rect x="23.9926%" y="357" width="0.0308%" height="15" fill="rgb(229,115,45)" fg:x="780" fg:w="1"/><text x="24.2426%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.15%)</title><rect x="23.9003%" y="485" width="0.1538%" height="15" fill="rgb(224,191,6)" fg:x="777" fg:w="5"/><text x="24.1503%" y="495.50"></text></g><g><title>core::ptr::write (5 samples, 0.15%)</title><rect x="23.9003%" y="469" width="0.1538%" height="15" fill="rgb(230,227,24)" fg:x="777" fg:w="5"/><text x="24.1503%" y="479.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.15%)</title><rect x="23.9003%" y="453" width="0.1538%" height="15" fill="rgb(228,80,19)" fg:x="777" fg:w="5"/><text x="24.1503%" y="463.50"></text></g><g><title>exc_page_fault (5 samples, 0.15%)</title><rect x="23.9003%" y="437" width="0.1538%" height="15" fill="rgb(247,229,0)" fg:x="777" fg:w="5"/><text x="24.1503%" y="447.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="24.0234%" y="421" width="0.0308%" height="15" fill="rgb(237,194,15)" fg:x="781" fg:w="1"/><text x="24.2734%" y="431.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="24.0234%" y="405" width="0.0308%" height="15" fill="rgb(219,203,20)" fg:x="781" fg:w="1"/><text x="24.2734%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (10 samples, 0.31%)</title><rect x="23.8696%" y="549" width="0.3076%" height="15" fill="rgb(234,128,8)" fg:x="776" fg:w="10"/><text x="24.1196%" y="559.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (10 samples, 0.31%)</title><rect x="23.8696%" y="533" width="0.3076%" height="15" fill="rgb(248,202,8)" fg:x="776" fg:w="10"/><text x="24.1196%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (10 samples, 0.31%)</title><rect x="23.8696%" y="517" width="0.3076%" height="15" fill="rgb(206,104,37)" fg:x="776" fg:w="10"/><text x="24.1196%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (10 samples, 0.31%)</title><rect x="23.8696%" y="501" width="0.3076%" height="15" fill="rgb(223,8,27)" fg:x="776" fg:w="10"/><text x="24.1196%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (4 samples, 0.12%)</title><rect x="24.0541%" y="485" width="0.1230%" height="15" fill="rgb(216,217,28)" fg:x="782" fg:w="4"/><text x="24.3041%" y="495.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (4 samples, 0.12%)</title><rect x="24.0541%" y="469" width="0.1230%" height="15" fill="rgb(249,199,1)" fg:x="782" fg:w="4"/><text x="24.3041%" y="479.50"></text></g><g><title>project1::solver::clause::Clause::with_key (4 samples, 0.12%)</title><rect x="24.0541%" y="453" width="0.1230%" height="15" fill="rgb(240,85,17)" fg:x="782" fg:w="4"/><text x="24.3041%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.12%)</title><rect x="24.0541%" y="437" width="0.1230%" height="15" fill="rgb(206,108,45)" fg:x="782" fg:w="4"/><text x="24.3041%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.12%)</title><rect x="24.0541%" y="421" width="0.1230%" height="15" fill="rgb(245,210,41)" fg:x="782" fg:w="4"/><text x="24.3041%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.12%)</title><rect x="24.0541%" y="405" width="0.1230%" height="15" fill="rgb(206,13,37)" fg:x="782" fg:w="4"/><text x="24.3041%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.12%)</title><rect x="24.0541%" y="389" width="0.1230%" height="15" fill="rgb(250,61,18)" fg:x="782" fg:w="4"/><text x="24.3041%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="24.0541%" y="373" width="0.1230%" height="15" fill="rgb(235,172,48)" fg:x="782" fg:w="4"/><text x="24.3041%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="24.0541%" y="357" width="0.1230%" height="15" fill="rgb(249,201,17)" fg:x="782" fg:w="4"/><text x="24.3041%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.12%)</title><rect x="24.0541%" y="341" width="0.1230%" height="15" fill="rgb(219,208,6)" fg:x="782" fg:w="4"/><text x="24.3041%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.12%)</title><rect x="24.0541%" y="325" width="0.1230%" height="15" fill="rgb(248,31,23)" fg:x="782" fg:w="4"/><text x="24.3041%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.12%)</title><rect x="24.0541%" y="309" width="0.1230%" height="15" fill="rgb(245,15,42)" fg:x="782" fg:w="4"/><text x="24.3041%" y="319.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.12%)</title><rect x="24.0541%" y="293" width="0.1230%" height="15" fill="rgb(222,217,39)" fg:x="782" fg:w="4"/><text x="24.3041%" y="303.50"></text></g><g><title>__rdl_alloc (4 samples, 0.12%)</title><rect x="24.0541%" y="277" width="0.1230%" height="15" fill="rgb(210,219,27)" fg:x="782" fg:w="4"/><text x="24.3041%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.12%)</title><rect x="24.0541%" y="261" width="0.1230%" height="15" fill="rgb(252,166,36)" fg:x="782" fg:w="4"/><text x="24.3041%" y="271.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.12%)</title><rect x="24.0541%" y="245" width="0.1230%" height="15" fill="rgb(245,132,34)" fg:x="782" fg:w="4"/><text x="24.3041%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="24.1464%" y="229" width="0.0308%" height="15" fill="rgb(236,54,3)" fg:x="785" fg:w="1"/><text x="24.3964%" y="239.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="213" width="0.0308%" height="15" fill="rgb(241,173,43)" fg:x="785" fg:w="1"/><text x="24.3964%" y="223.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="197" width="0.0308%" height="15" fill="rgb(215,190,9)" fg:x="785" fg:w="1"/><text x="24.3964%" y="207.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="181" width="0.0308%" height="15" fill="rgb(242,101,16)" fg:x="785" fg:w="1"/><text x="24.3964%" y="191.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="165" width="0.0308%" height="15" fill="rgb(223,190,21)" fg:x="785" fg:w="1"/><text x="24.3964%" y="175.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="149" width="0.0308%" height="15" fill="rgb(215,228,25)" fg:x="785" fg:w="1"/><text x="24.3964%" y="159.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="24.1464%" y="133" width="0.0308%" height="15" fill="rgb(225,36,22)" fg:x="785" fg:w="1"/><text x="24.3964%" y="143.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="24.1464%" y="117" width="0.0308%" height="15" fill="rgb(251,106,46)" fg:x="785" fg:w="1"/><text x="24.3964%" y="127.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.03%)</title><rect x="24.1464%" y="101" width="0.0308%" height="15" fill="rgb(208,90,1)" fg:x="785" fg:w="1"/><text x="24.3964%" y="111.50"></text></g><g><title>__folio_alloc (1 samples, 0.03%)</title><rect x="24.1464%" y="85" width="0.0308%" height="15" fill="rgb(243,10,4)" fg:x="785" fg:w="1"/><text x="24.3964%" y="95.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="24.1464%" y="69" width="0.0308%" height="15" fill="rgb(212,137,27)" fg:x="785" fg:w="1"/><text x="24.3964%" y="79.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="24.1464%" y="53" width="0.0308%" height="15" fill="rgb(231,220,49)" fg:x="785" fg:w="1"/><text x="24.3964%" y="63.50"></text></g><g><title>clear_page_erms (1 samples, 0.03%)</title><rect x="24.1464%" y="37" width="0.0308%" height="15" fill="rgb(237,96,20)" fg:x="785" fg:w="1"/><text x="24.3964%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.03%)</title><rect x="24.2079%" y="533" width="0.0308%" height="15" fill="rgb(239,229,30)" fg:x="787" fg:w="1"/><text x="24.4579%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.06%)</title><rect x="24.2695%" y="437" width="0.0615%" height="15" fill="rgb(219,65,33)" fg:x="789" fg:w="2"/><text x="24.5195%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="24.2695%" y="421" width="0.0615%" height="15" fill="rgb(243,134,7)" fg:x="789" fg:w="2"/><text x="24.5195%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.2695%" y="405" width="0.0615%" height="15" fill="rgb(216,177,54)" fg:x="789" fg:w="2"/><text x="24.5195%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.2695%" y="389" width="0.0615%" height="15" fill="rgb(211,160,20)" fg:x="789" fg:w="2"/><text x="24.5195%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.2695%" y="373" width="0.0615%" height="15" fill="rgb(239,85,39)" fg:x="789" fg:w="2"/><text x="24.5195%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.3002%" y="357" width="0.0308%" height="15" fill="rgb(232,125,22)" fg:x="790" fg:w="1"/><text x="24.5502%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="24.3310%" y="421" width="0.0308%" height="15" fill="rgb(244,57,34)" fg:x="791" fg:w="1"/><text x="24.5810%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="24.3310%" y="405" width="0.0308%" height="15" fill="rgb(214,203,32)" fg:x="791" fg:w="1"/><text x="24.5810%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="24.3310%" y="389" width="0.0308%" height="15" fill="rgb(207,58,43)" fg:x="791" fg:w="1"/><text x="24.5810%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="24.3310%" y="373" width="0.0308%" height="15" fill="rgb(215,193,15)" fg:x="791" fg:w="1"/><text x="24.5810%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="24.3617%" y="373" width="0.0308%" height="15" fill="rgb(232,15,44)" fg:x="792" fg:w="1"/><text x="24.6117%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.15%)</title><rect x="24.2695%" y="517" width="0.1538%" height="15" fill="rgb(212,3,48)" fg:x="789" fg:w="5"/><text x="24.5195%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (5 samples, 0.15%)</title><rect x="24.2695%" y="501" width="0.1538%" height="15" fill="rgb(218,128,7)" fg:x="789" fg:w="5"/><text x="24.5195%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (5 samples, 0.15%)</title><rect x="24.2695%" y="485" width="0.1538%" height="15" fill="rgb(226,216,39)" fg:x="789" fg:w="5"/><text x="24.5195%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (5 samples, 0.15%)</title><rect x="24.2695%" y="469" width="0.1538%" height="15" fill="rgb(243,47,51)" fg:x="789" fg:w="5"/><text x="24.5195%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (5 samples, 0.15%)</title><rect x="24.2695%" y="453" width="0.1538%" height="15" fill="rgb(241,183,40)" fg:x="789" fg:w="5"/><text x="24.5195%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.09%)</title><rect x="24.3310%" y="437" width="0.0923%" height="15" fill="rgb(231,217,32)" fg:x="791" fg:w="3"/><text x="24.5810%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.06%)</title><rect x="24.3617%" y="421" width="0.0615%" height="15" fill="rgb(229,61,38)" fg:x="792" fg:w="2"/><text x="24.6117%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.06%)</title><rect x="24.3617%" y="405" width="0.0615%" height="15" fill="rgb(225,210,5)" fg:x="792" fg:w="2"/><text x="24.6117%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (2 samples, 0.06%)</title><rect x="24.3617%" y="389" width="0.0615%" height="15" fill="rgb(231,79,45)" fg:x="792" fg:w="2"/><text x="24.6117%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::leading_zeros (1 samples, 0.03%)</title><rect x="24.3925%" y="373" width="0.0308%" height="15" fill="rgb(224,100,7)" fg:x="793" fg:w="1"/><text x="24.6425%" y="383.50"></text></g><g><title>core::num::&lt;impl u16&gt;::leading_zeros (1 samples, 0.03%)</title><rect x="24.3925%" y="357" width="0.0308%" height="15" fill="rgb(241,198,18)" fg:x="793" fg:w="1"/><text x="24.6425%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2 samples, 0.06%)</title><rect x="24.4233%" y="485" width="0.0615%" height="15" fill="rgb(252,97,53)" fg:x="794" fg:w="2"/><text x="24.6733%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="24.4540%" y="469" width="0.0308%" height="15" fill="rgb(220,88,7)" fg:x="795" fg:w="1"/><text x="24.7040%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="24.4540%" y="453" width="0.0308%" height="15" fill="rgb(213,176,14)" fg:x="795" fg:w="1"/><text x="24.7040%" y="463.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="24.4540%" y="437" width="0.0308%" height="15" fill="rgb(246,73,7)" fg:x="795" fg:w="1"/><text x="24.7040%" y="447.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="24.4540%" y="421" width="0.0308%" height="15" fill="rgb(245,64,36)" fg:x="795" fg:w="1"/><text x="24.7040%" y="431.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="24.4540%" y="405" width="0.0308%" height="15" fill="rgb(245,80,10)" fg:x="795" fg:w="1"/><text x="24.7040%" y="415.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="24.4540%" y="389" width="0.0308%" height="15" fill="rgb(232,107,50)" fg:x="795" fg:w="1"/><text x="24.7040%" y="399.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="24.4540%" y="373" width="0.0308%" height="15" fill="rgb(253,3,0)" fg:x="795" fg:w="1"/><text x="24.7040%" y="383.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="24.4540%" y="357" width="0.0308%" height="15" fill="rgb(212,99,53)" fg:x="795" fg:w="1"/><text x="24.7040%" y="367.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="24.4540%" y="341" width="0.0308%" height="15" fill="rgb(249,111,54)" fg:x="795" fg:w="1"/><text x="24.7040%" y="351.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="24.4540%" y="325" width="0.0308%" height="15" fill="rgb(249,55,30)" fg:x="795" fg:w="1"/><text x="24.7040%" y="335.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="24.4540%" y="309" width="0.0308%" height="15" fill="rgb(237,47,42)" fg:x="795" fg:w="1"/><text x="24.7040%" y="319.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="24.4540%" y="293" width="0.0308%" height="15" fill="rgb(211,20,18)" fg:x="795" fg:w="1"/><text x="24.7040%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="24.4848%" y="373" width="0.0308%" height="15" fill="rgb(231,203,46)" fg:x="796" fg:w="1"/><text x="24.7348%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="24.4848%" y="357" width="0.0308%" height="15" fill="rgb(237,142,3)" fg:x="796" fg:w="1"/><text x="24.7348%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4848%" y="341" width="0.0308%" height="15" fill="rgb(241,107,1)" fg:x="796" fg:w="1"/><text x="24.7348%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4848%" y="325" width="0.0308%" height="15" fill="rgb(229,83,13)" fg:x="796" fg:w="1"/><text x="24.7348%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4848%" y="309" width="0.0308%" height="15" fill="rgb(241,91,40)" fg:x="796" fg:w="1"/><text x="24.7348%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.4848%" y="293" width="0.0308%" height="15" fill="rgb(225,3,45)" fg:x="796" fg:w="1"/><text x="24.7348%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.06%)</title><rect x="24.5155%" y="325" width="0.0615%" height="15" fill="rgb(244,223,14)" fg:x="797" fg:w="2"/><text x="24.7655%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="24.5155%" y="309" width="0.0615%" height="15" fill="rgb(224,124,37)" fg:x="797" fg:w="2"/><text x="24.7655%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="24.5155%" y="293" width="0.0615%" height="15" fill="rgb(251,171,30)" fg:x="797" fg:w="2"/><text x="24.7655%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="24.5155%" y="277" width="0.0615%" height="15" fill="rgb(236,46,54)" fg:x="797" fg:w="2"/><text x="24.7655%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="24.5155%" y="261" width="0.0615%" height="15" fill="rgb(245,213,5)" fg:x="797" fg:w="2"/><text x="24.7655%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="24.5771%" y="325" width="0.0308%" height="15" fill="rgb(230,144,27)" fg:x="799" fg:w="1"/><text x="24.8271%" y="335.50"></text></g><g><title>core::mem::drop (5 samples, 0.15%)</title><rect x="24.4848%" y="469" width="0.1538%" height="15" fill="rgb(220,86,6)" fg:x="796" fg:w="5"/><text x="24.7348%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (5 samples, 0.15%)</title><rect x="24.4848%" y="453" width="0.1538%" height="15" fill="rgb(240,20,13)" fg:x="796" fg:w="5"/><text x="24.7348%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.15%)</title><rect x="24.4848%" y="437" width="0.1538%" height="15" fill="rgb(217,89,34)" fg:x="796" fg:w="5"/><text x="24.7348%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.15%)</title><rect x="24.4848%" y="421" width="0.1538%" height="15" fill="rgb(229,13,5)" fg:x="796" fg:w="5"/><text x="24.7348%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.15%)</title><rect x="24.4848%" y="405" width="0.1538%" height="15" fill="rgb(244,67,35)" fg:x="796" fg:w="5"/><text x="24.7348%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.15%)</title><rect x="24.4848%" y="389" width="0.1538%" height="15" fill="rgb(221,40,2)" fg:x="796" fg:w="5"/><text x="24.7348%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.12%)</title><rect x="24.5155%" y="373" width="0.1230%" height="15" fill="rgb(237,157,21)" fg:x="797" fg:w="4"/><text x="24.7655%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.12%)</title><rect x="24.5155%" y="357" width="0.1230%" height="15" fill="rgb(222,94,11)" fg:x="797" fg:w="4"/><text x="24.7655%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.12%)</title><rect x="24.5155%" y="341" width="0.1230%" height="15" fill="rgb(249,113,6)" fg:x="797" fg:w="4"/><text x="24.7655%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="24.6078%" y="325" width="0.0308%" height="15" fill="rgb(238,137,36)" fg:x="800" fg:w="1"/><text x="24.8578%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="24.6078%" y="309" width="0.0308%" height="15" fill="rgb(210,102,26)" fg:x="800" fg:w="1"/><text x="24.8578%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.6386%" y="469" width="0.0308%" height="15" fill="rgb(218,30,30)" fg:x="801" fg:w="1"/><text x="24.8886%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6693%" y="341" width="0.0308%" height="15" fill="rgb(214,67,26)" fg:x="802" fg:w="1"/><text x="24.9193%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6693%" y="325" width="0.0308%" height="15" fill="rgb(251,9,53)" fg:x="802" fg:w="1"/><text x="24.9193%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6693%" y="309" width="0.0308%" height="15" fill="rgb(228,204,25)" fg:x="802" fg:w="1"/><text x="24.9193%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.6693%" y="293" width="0.0308%" height="15" fill="rgb(207,153,8)" fg:x="802" fg:w="1"/><text x="24.9193%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.6693%" y="277" width="0.0308%" height="15" fill="rgb(242,9,16)" fg:x="802" fg:w="1"/><text x="24.9193%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="24.6693%" y="373" width="0.0923%" height="15" fill="rgb(217,211,10)" fg:x="802" fg:w="3"/><text x="24.9193%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="24.6693%" y="357" width="0.0923%" height="15" fill="rgb(219,228,52)" fg:x="802" fg:w="3"/><text x="24.9193%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="24.7001%" y="341" width="0.0615%" height="15" fill="rgb(231,92,29)" fg:x="803" fg:w="2"/><text x="24.9501%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="24.7001%" y="325" width="0.0615%" height="15" fill="rgb(232,8,23)" fg:x="803" fg:w="2"/><text x="24.9501%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="24.7001%" y="309" width="0.0615%" height="15" fill="rgb(216,211,34)" fg:x="803" fg:w="2"/><text x="24.9501%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="24.7001%" y="293" width="0.0615%" height="15" fill="rgb(236,151,0)" fg:x="803" fg:w="2"/><text x="24.9501%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.7001%" y="277" width="0.0615%" height="15" fill="rgb(209,168,3)" fg:x="803" fg:w="2"/><text x="24.9501%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.7001%" y="261" width="0.0615%" height="15" fill="rgb(208,129,28)" fg:x="803" fg:w="2"/><text x="24.9501%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.7001%" y="245" width="0.0615%" height="15" fill="rgb(229,78,22)" fg:x="803" fg:w="2"/><text x="24.9501%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="24.7616%" y="357" width="0.0308%" height="15" fill="rgb(228,187,13)" fg:x="805" fg:w="1"/><text x="25.0116%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="24.7616%" y="341" width="0.0308%" height="15" fill="rgb(240,119,24)" fg:x="805" fg:w="1"/><text x="25.0116%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="24.7616%" y="325" width="0.0308%" height="15" fill="rgb(209,194,42)" fg:x="805" fg:w="1"/><text x="25.0116%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="24.7616%" y="309" width="0.0308%" height="15" fill="rgb(247,200,46)" fg:x="805" fg:w="1"/><text x="25.0116%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="24.7616%" y="293" width="0.0308%" height="15" fill="rgb(218,76,16)" fg:x="805" fg:w="1"/><text x="25.0116%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="24.7616%" y="277" width="0.0308%" height="15" fill="rgb(225,21,48)" fg:x="805" fg:w="1"/><text x="25.0116%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="24.7616%" y="261" width="0.0308%" height="15" fill="rgb(239,223,50)" fg:x="805" fg:w="1"/><text x="25.0116%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (5 samples, 0.15%)</title><rect x="24.6693%" y="469" width="0.1538%" height="15" fill="rgb(244,45,21)" fg:x="802" fg:w="5"/><text x="24.9193%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (5 samples, 0.15%)</title><rect x="24.6693%" y="453" width="0.1538%" height="15" fill="rgb(232,33,43)" fg:x="802" fg:w="5"/><text x="24.9193%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.15%)</title><rect x="24.6693%" y="437" width="0.1538%" height="15" fill="rgb(209,8,3)" fg:x="802" fg:w="5"/><text x="24.9193%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.15%)</title><rect x="24.6693%" y="421" width="0.1538%" height="15" fill="rgb(214,25,53)" fg:x="802" fg:w="5"/><text x="24.9193%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.15%)</title><rect x="24.6693%" y="405" width="0.1538%" height="15" fill="rgb(254,186,54)" fg:x="802" fg:w="5"/><text x="24.9193%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.15%)</title><rect x="24.6693%" y="389" width="0.1538%" height="15" fill="rgb(208,174,49)" fg:x="802" fg:w="5"/><text x="24.9193%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="24.7616%" y="373" width="0.0615%" height="15" fill="rgb(233,191,51)" fg:x="805" fg:w="2"/><text x="25.0116%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (1 samples, 0.03%)</title><rect x="24.7924%" y="357" width="0.0308%" height="15" fill="rgb(222,134,10)" fg:x="806" fg:w="1"/><text x="25.0424%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.8847%" y="325" width="0.0308%" height="15" fill="rgb(230,226,20)" fg:x="809" fg:w="1"/><text x="25.1347%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.8847%" y="309" width="0.0308%" height="15" fill="rgb(251,111,25)" fg:x="809" fg:w="1"/><text x="25.1347%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.15%)</title><rect x="24.8539%" y="405" width="0.1538%" height="15" fill="rgb(224,40,46)" fg:x="808" fg:w="5"/><text x="25.1039%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.15%)</title><rect x="24.8539%" y="389" width="0.1538%" height="15" fill="rgb(236,108,47)" fg:x="808" fg:w="5"/><text x="25.1039%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="24.8539%" y="373" width="0.1538%" height="15" fill="rgb(234,93,0)" fg:x="808" fg:w="5"/><text x="25.1039%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="24.8539%" y="357" width="0.1538%" height="15" fill="rgb(224,213,32)" fg:x="808" fg:w="5"/><text x="25.1039%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.15%)</title><rect x="24.8539%" y="341" width="0.1538%" height="15" fill="rgb(251,11,48)" fg:x="808" fg:w="5"/><text x="25.1039%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.09%)</title><rect x="24.9154%" y="325" width="0.0923%" height="15" fill="rgb(236,173,5)" fg:x="810" fg:w="3"/><text x="25.1654%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.9769%" y="309" width="0.0308%" height="15" fill="rgb(230,95,12)" fg:x="812" fg:w="1"/><text x="25.2269%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="25.0384%" y="357" width="0.0308%" height="15" fill="rgb(232,209,1)" fg:x="814" fg:w="1"/><text x="25.2884%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="25.0384%" y="341" width="0.0308%" height="15" fill="rgb(232,6,1)" fg:x="814" fg:w="1"/><text x="25.2884%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.12%)</title><rect x="25.0692%" y="341" width="0.1230%" height="15" fill="rgb(210,224,50)" fg:x="815" fg:w="4"/><text x="25.3192%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.12%)</title><rect x="25.0692%" y="325" width="0.1230%" height="15" fill="rgb(228,127,35)" fg:x="815" fg:w="4"/><text x="25.3192%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.12%)</title><rect x="25.0692%" y="309" width="0.1230%" height="15" fill="rgb(245,102,45)" fg:x="815" fg:w="4"/><text x="25.3192%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4 samples, 0.12%)</title><rect x="25.0692%" y="293" width="0.1230%" height="15" fill="rgb(214,1,49)" fg:x="815" fg:w="4"/><text x="25.3192%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.15%)</title><rect x="25.0692%" y="357" width="0.1538%" height="15" fill="rgb(226,163,40)" fg:x="815" fg:w="5"/><text x="25.3192%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="25.1922%" y="341" width="0.0308%" height="15" fill="rgb(239,212,28)" fg:x="819" fg:w="1"/><text x="25.4422%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="25.1922%" y="325" width="0.0308%" height="15" fill="rgb(220,20,13)" fg:x="819" fg:w="1"/><text x="25.4422%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="25.1922%" y="309" width="0.0308%" height="15" fill="rgb(210,164,35)" fg:x="819" fg:w="1"/><text x="25.4422%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="25.1922%" y="293" width="0.0308%" height="15" fill="rgb(248,109,41)" fg:x="819" fg:w="1"/><text x="25.4422%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="25.2230%" y="357" width="0.0615%" height="15" fill="rgb(238,23,50)" fg:x="820" fg:w="2"/><text x="25.4730%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="25.2845%" y="357" width="0.0308%" height="15" fill="rgb(211,48,49)" fg:x="822" fg:w="1"/><text x="25.5345%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="25.3153%" y="357" width="0.0308%" height="15" fill="rgb(223,36,21)" fg:x="823" fg:w="1"/><text x="25.5653%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="25.3153%" y="341" width="0.0308%" height="15" fill="rgb(207,123,46)" fg:x="823" fg:w="1"/><text x="25.5653%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="25.3153%" y="325" width="0.0308%" height="15" fill="rgb(240,218,32)" fg:x="823" fg:w="1"/><text x="25.5653%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13 samples, 0.40%)</title><rect x="25.0077%" y="373" width="0.3999%" height="15" fill="rgb(252,5,43)" fg:x="813" fg:w="13"/><text x="25.2577%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="25.3460%" y="357" width="0.0615%" height="15" fill="rgb(252,84,19)" fg:x="824" fg:w="2"/><text x="25.5960%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="25.3460%" y="341" width="0.0615%" height="15" fill="rgb(243,152,39)" fg:x="824" fg:w="2"/><text x="25.5960%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (41 samples, 1.26%)</title><rect x="24.1772%" y="549" width="1.2612%" height="15" fill="rgb(234,160,15)" fg:x="786" fg:w="41"/><text x="24.4272%" y="559.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (39 samples, 1.20%)</title><rect x="24.2387%" y="533" width="1.1996%" height="15" fill="rgb(237,34,20)" fg:x="788" fg:w="39"/><text x="24.4887%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (33 samples, 1.02%)</title><rect x="24.4233%" y="517" width="1.0151%" height="15" fill="rgb(229,97,13)" fg:x="794" fg:w="33"/><text x="24.6733%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (33 samples, 1.02%)</title><rect x="24.4233%" y="501" width="1.0151%" height="15" fill="rgb(234,71,50)" fg:x="794" fg:w="33"/><text x="24.6733%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (31 samples, 0.95%)</title><rect x="24.4848%" y="485" width="0.9536%" height="15" fill="rgb(253,155,4)" fg:x="796" fg:w="31"/><text x="24.7348%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (20 samples, 0.62%)</title><rect x="24.8231%" y="469" width="0.6152%" height="15" fill="rgb(222,185,37)" fg:x="807" fg:w="20"/><text x="25.0731%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (19 samples, 0.58%)</title><rect x="24.8539%" y="453" width="0.5844%" height="15" fill="rgb(251,177,13)" fg:x="808" fg:w="19"/><text x="25.1039%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (19 samples, 0.58%)</title><rect x="24.8539%" y="437" width="0.5844%" height="15" fill="rgb(250,179,40)" fg:x="808" fg:w="19"/><text x="25.1039%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (19 samples, 0.58%)</title><rect x="24.8539%" y="421" width="0.5844%" height="15" fill="rgb(242,44,2)" fg:x="808" fg:w="19"/><text x="25.1039%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (14 samples, 0.43%)</title><rect x="25.0077%" y="405" width="0.4306%" height="15" fill="rgb(216,177,13)" fg:x="813" fg:w="14"/><text x="25.2577%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.43%)</title><rect x="25.0077%" y="389" width="0.4306%" height="15" fill="rgb(216,106,43)" fg:x="813" fg:w="14"/><text x="25.2577%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="25.4076%" y="373" width="0.0308%" height="15" fill="rgb(216,183,2)" fg:x="826" fg:w="1"/><text x="25.6576%" y="383.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="25.4383%" y="293" width="0.0308%" height="15" fill="rgb(249,75,3)" fg:x="827" fg:w="1"/><text x="25.6883%" y="303.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="25.4383%" y="277" width="0.0308%" height="15" fill="rgb(219,67,39)" fg:x="827" fg:w="1"/><text x="25.6883%" y="287.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="25.4383%" y="261" width="0.0308%" height="15" fill="rgb(253,228,2)" fg:x="827" fg:w="1"/><text x="25.6883%" y="271.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="25.4383%" y="245" width="0.0308%" height="15" fill="rgb(235,138,27)" fg:x="827" fg:w="1"/><text x="25.6883%" y="255.50"></text></g><g><title>__perf_event__output_id_sample (1 samples, 0.03%)</title><rect x="25.4998%" y="101" width="0.0308%" height="15" fill="rgb(236,97,51)" fg:x="829" fg:w="1"/><text x="25.7498%" y="111.50"></text></g><g><title>memcpy_erms (1 samples, 0.03%)</title><rect x="25.4998%" y="85" width="0.0308%" height="15" fill="rgb(240,80,30)" fg:x="829" fg:w="1"/><text x="25.7498%" y="95.50"></text></g><g><title>perf_event_mmap (3 samples, 0.09%)</title><rect x="25.4691%" y="181" width="0.0923%" height="15" fill="rgb(230,178,19)" fg:x="828" fg:w="3"/><text x="25.7191%" y="191.50"></text></g><g><title>perf_event_mmap_event (3 samples, 0.09%)</title><rect x="25.4691%" y="165" width="0.0923%" height="15" fill="rgb(210,190,27)" fg:x="828" fg:w="3"/><text x="25.7191%" y="175.50"></text></g><g><title>perf_iterate_sb (2 samples, 0.06%)</title><rect x="25.4998%" y="149" width="0.0615%" height="15" fill="rgb(222,107,31)" fg:x="829" fg:w="2"/><text x="25.7498%" y="159.50"></text></g><g><title>perf_iterate_ctx (2 samples, 0.06%)</title><rect x="25.4998%" y="133" width="0.0615%" height="15" fill="rgb(216,127,34)" fg:x="829" fg:w="2"/><text x="25.7498%" y="143.50"></text></g><g><title>perf_event_mmap_output (2 samples, 0.06%)</title><rect x="25.4998%" y="117" width="0.0615%" height="15" fill="rgb(234,116,52)" fg:x="829" fg:w="2"/><text x="25.7498%" y="127.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.03%)</title><rect x="25.5306%" y="101" width="0.0308%" height="15" fill="rgb(222,124,15)" fg:x="830" fg:w="1"/><text x="25.7806%" y="111.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="25.5306%" y="85" width="0.0308%" height="15" fill="rgb(231,179,28)" fg:x="830" fg:w="1"/><text x="25.7806%" y="95.50"></text></g><g><title>__x64_sys_mprotect (4 samples, 0.12%)</title><rect x="25.4691%" y="229" width="0.1230%" height="15" fill="rgb(226,93,45)" fg:x="828" fg:w="4"/><text x="25.7191%" y="239.50"></text></g><g><title>do_mprotect_pkey (4 samples, 0.12%)</title><rect x="25.4691%" y="213" width="0.1230%" height="15" fill="rgb(215,8,51)" fg:x="828" fg:w="4"/><text x="25.7191%" y="223.50"></text></g><g><title>mprotect_fixup (4 samples, 0.12%)</title><rect x="25.4691%" y="197" width="0.1230%" height="15" fill="rgb(223,106,5)" fg:x="828" fg:w="4"/><text x="25.7191%" y="207.50"></text></g><g><title>vma_merge (1 samples, 0.03%)</title><rect x="25.5614%" y="181" width="0.0308%" height="15" fill="rgb(250,191,5)" fg:x="831" fg:w="1"/><text x="25.8114%" y="191.50"></text></g><g><title>__vma_adjust (1 samples, 0.03%)</title><rect x="25.5614%" y="165" width="0.0308%" height="15" fill="rgb(242,132,44)" fg:x="831" fg:w="1"/><text x="25.8114%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.18%)</title><rect x="25.4383%" y="469" width="0.1846%" height="15" fill="rgb(251,152,29)" fg:x="827" fg:w="6"/><text x="25.6883%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.18%)</title><rect x="25.4383%" y="453" width="0.1846%" height="15" fill="rgb(218,179,5)" fg:x="827" fg:w="6"/><text x="25.6883%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.18%)</title><rect x="25.4383%" y="437" width="0.1846%" height="15" fill="rgb(227,67,19)" fg:x="827" fg:w="6"/><text x="25.6883%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.18%)</title><rect x="25.4383%" y="421" width="0.1846%" height="15" fill="rgb(233,119,31)" fg:x="827" fg:w="6"/><text x="25.6883%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.18%)</title><rect x="25.4383%" y="405" width="0.1846%" height="15" fill="rgb(241,120,22)" fg:x="827" fg:w="6"/><text x="25.6883%" y="415.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.18%)</title><rect x="25.4383%" y="389" width="0.1846%" height="15" fill="rgb(224,102,30)" fg:x="827" fg:w="6"/><text x="25.6883%" y="399.50"></text></g><g><title>__rdl_alloc (6 samples, 0.18%)</title><rect x="25.4383%" y="373" width="0.1846%" height="15" fill="rgb(210,164,37)" fg:x="827" fg:w="6"/><text x="25.6883%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.18%)</title><rect x="25.4383%" y="357" width="0.1846%" height="15" fill="rgb(226,191,16)" fg:x="827" fg:w="6"/><text x="25.6883%" y="367.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.18%)</title><rect x="25.4383%" y="341" width="0.1846%" height="15" fill="rgb(214,40,45)" fg:x="827" fg:w="6"/><text x="25.6883%" y="351.50"></text></g><g><title>_int_malloc (6 samples, 0.18%)</title><rect x="25.4383%" y="325" width="0.1846%" height="15" fill="rgb(244,29,26)" fg:x="827" fg:w="6"/><text x="25.6883%" y="335.50"></text></g><g><title>sysmalloc (6 samples, 0.18%)</title><rect x="25.4383%" y="309" width="0.1846%" height="15" fill="rgb(216,16,5)" fg:x="827" fg:w="6"/><text x="25.6883%" y="319.50"></text></g><g><title>grow_heap (5 samples, 0.15%)</title><rect x="25.4691%" y="293" width="0.1538%" height="15" fill="rgb(249,76,35)" fg:x="828" fg:w="5"/><text x="25.7191%" y="303.50"></text></g><g><title>__GI___mprotect (5 samples, 0.15%)</title><rect x="25.4691%" y="277" width="0.1538%" height="15" fill="rgb(207,11,44)" fg:x="828" fg:w="5"/><text x="25.7191%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.15%)</title><rect x="25.4691%" y="261" width="0.1538%" height="15" fill="rgb(228,190,49)" fg:x="828" fg:w="5"/><text x="25.7191%" y="271.50"></text></g><g><title>do_syscall_64 (5 samples, 0.15%)</title><rect x="25.4691%" y="245" width="0.1538%" height="15" fill="rgb(214,173,12)" fg:x="828" fg:w="5"/><text x="25.7191%" y="255.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="25.5921%" y="229" width="0.0308%" height="15" fill="rgb(218,26,35)" fg:x="832" fg:w="1"/><text x="25.8421%" y="239.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="25.6229%" y="389" width="0.0308%" height="15" fill="rgb(220,200,19)" fg:x="833" fg:w="1"/><text x="25.8729%" y="399.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="25.6229%" y="373" width="0.0308%" height="15" fill="rgb(239,95,49)" fg:x="833" fg:w="1"/><text x="25.8729%" y="383.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="25.6229%" y="357" width="0.0308%" height="15" fill="rgb(235,85,53)" fg:x="833" fg:w="1"/><text x="25.8729%" y="367.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="25.6229%" y="341" width="0.0308%" height="15" fill="rgb(233,133,31)" fg:x="833" fg:w="1"/><text x="25.8729%" y="351.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="25.6229%" y="325" width="0.0308%" height="15" fill="rgb(218,25,20)" fg:x="833" fg:w="1"/><text x="25.8729%" y="335.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="25.6229%" y="309" width="0.0308%" height="15" fill="rgb(252,210,38)" fg:x="833" fg:w="1"/><text x="25.8729%" y="319.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="25.6229%" y="293" width="0.0308%" height="15" fill="rgb(242,134,21)" fg:x="833" fg:w="1"/><text x="25.8729%" y="303.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="25.6229%" y="277" width="0.0308%" height="15" fill="rgb(213,28,48)" fg:x="833" fg:w="1"/><text x="25.8729%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.25%)</title><rect x="25.4383%" y="533" width="0.2461%" height="15" fill="rgb(250,196,2)" fg:x="827" fg:w="8"/><text x="25.6883%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.25%)</title><rect x="25.4383%" y="517" width="0.2461%" height="15" fill="rgb(227,5,17)" fg:x="827" fg:w="8"/><text x="25.6883%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.25%)</title><rect x="25.4383%" y="501" width="0.2461%" height="15" fill="rgb(221,226,24)" fg:x="827" fg:w="8"/><text x="25.6883%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.25%)</title><rect x="25.4383%" y="485" width="0.2461%" height="15" fill="rgb(211,5,48)" fg:x="827" fg:w="8"/><text x="25.6883%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.06%)</title><rect x="25.6229%" y="469" width="0.0615%" height="15" fill="rgb(219,150,6)" fg:x="833" fg:w="2"/><text x="25.8729%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="25.6229%" y="453" width="0.0615%" height="15" fill="rgb(251,46,16)" fg:x="833" fg:w="2"/><text x="25.8729%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="25.6229%" y="437" width="0.0615%" height="15" fill="rgb(220,204,40)" fg:x="833" fg:w="2"/><text x="25.8729%" y="447.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="25.6229%" y="421" width="0.0615%" height="15" fill="rgb(211,85,2)" fg:x="833" fg:w="2"/><text x="25.8729%" y="431.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="25.6229%" y="405" width="0.0615%" height="15" fill="rgb(229,17,7)" fg:x="833" fg:w="2"/><text x="25.8729%" y="415.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="25.6536%" y="389" width="0.0308%" height="15" fill="rgb(239,72,28)" fg:x="834" fg:w="1"/><text x="25.9036%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="25.6536%" y="373" width="0.0308%" height="15" fill="rgb(230,47,54)" fg:x="834" fg:w="1"/><text x="25.9036%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (4 samples, 0.12%)</title><rect x="25.7459%" y="469" width="0.1230%" height="15" fill="rgb(214,50,8)" fg:x="837" fg:w="4"/><text x="25.9959%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (4 samples, 0.12%)</title><rect x="25.7459%" y="453" width="0.1230%" height="15" fill="rgb(216,198,43)" fg:x="837" fg:w="4"/><text x="25.9959%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (7 samples, 0.22%)</title><rect x="25.6844%" y="517" width="0.2153%" height="15" fill="rgb(234,20,35)" fg:x="835" fg:w="7"/><text x="25.9344%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (5 samples, 0.15%)</title><rect x="25.7459%" y="501" width="0.1538%" height="15" fill="rgb(254,45,19)" fg:x="837" fg:w="5"/><text x="25.9959%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (5 samples, 0.15%)</title><rect x="25.7459%" y="485" width="0.1538%" height="15" fill="rgb(219,14,44)" fg:x="837" fg:w="5"/><text x="25.9959%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.8690%" y="469" width="0.0308%" height="15" fill="rgb(217,220,26)" fg:x="841" fg:w="1"/><text x="26.1190%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.8690%" y="453" width="0.0308%" height="15" fill="rgb(213,158,28)" fg:x="841" fg:w="1"/><text x="26.1190%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (8 samples, 0.25%)</title><rect x="25.6844%" y="533" width="0.2461%" height="15" fill="rgb(252,51,52)" fg:x="835" fg:w="8"/><text x="25.9344%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="25.8997%" y="517" width="0.0308%" height="15" fill="rgb(246,89,16)" fg:x="842" fg:w="1"/><text x="26.1497%" y="527.50"></text></g><g><title>core::slice::sort::find_streak (4 samples, 0.12%)</title><rect x="25.9612%" y="485" width="0.1230%" height="15" fill="rgb(216,158,49)" fg:x="844" fg:w="4"/><text x="26.2112%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (4 samples, 0.12%)</title><rect x="25.9612%" y="469" width="0.1230%" height="15" fill="rgb(236,107,19)" fg:x="844" fg:w="4"/><text x="26.2112%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (4 samples, 0.12%)</title><rect x="25.9612%" y="453" width="0.1230%" height="15" fill="rgb(228,185,30)" fg:x="844" fg:w="4"/><text x="26.2112%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (2 samples, 0.06%)</title><rect x="26.0228%" y="437" width="0.0615%" height="15" fill="rgb(246,134,8)" fg:x="846" fg:w="2"/><text x="26.2728%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (2 samples, 0.06%)</title><rect x="26.0228%" y="421" width="0.0615%" height="15" fill="rgb(214,143,50)" fg:x="846" fg:w="2"/><text x="26.2728%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (2 samples, 0.06%)</title><rect x="26.0228%" y="405" width="0.0615%" height="15" fill="rgb(228,75,8)" fg:x="846" fg:w="2"/><text x="26.2728%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (2 samples, 0.06%)</title><rect x="26.0228%" y="389" width="0.0615%" height="15" fill="rgb(207,175,4)" fg:x="846" fg:w="2"/><text x="26.2728%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.09%)</title><rect x="26.3611%" y="453" width="0.0923%" height="15" fill="rgb(205,108,24)" fg:x="857" fg:w="3"/><text x="26.6111%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="27.1916%" y="405" width="0.0615%" height="15" fill="rgb(244,120,49)" fg:x="884" fg:w="2"/><text x="27.4416%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (21 samples, 0.65%)</title><rect x="27.2532%" y="405" width="0.6460%" height="15" fill="rgb(223,47,38)" fg:x="886" fg:w="21"/><text x="27.5032%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (21 samples, 0.65%)</title><rect x="27.2532%" y="389" width="0.6460%" height="15" fill="rgb(229,179,11)" fg:x="886" fg:w="21"/><text x="27.5032%" y="399.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="27.8683%" y="373" width="0.0308%" height="15" fill="rgb(231,122,1)" fg:x="906" fg:w="1"/><text x="28.1183%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (24 samples, 0.74%)</title><rect x="27.1916%" y="437" width="0.7382%" height="15" fill="rgb(245,119,9)" fg:x="884" fg:w="24"/><text x="27.4416%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (24 samples, 0.74%)</title><rect x="27.1916%" y="421" width="0.7382%" height="15" fill="rgb(241,163,25)" fg:x="884" fg:w="24"/><text x="27.4416%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="27.8991%" y="405" width="0.0308%" height="15" fill="rgb(217,214,3)" fg:x="907" fg:w="1"/><text x="28.1491%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="27.8991%" y="389" width="0.0308%" height="15" fill="rgb(240,86,28)" fg:x="907" fg:w="1"/><text x="28.1491%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (53 samples, 1.63%)</title><rect x="26.3611%" y="469" width="1.6303%" height="15" fill="rgb(215,47,9)" fg:x="857" fg:w="53"/><text x="26.6111%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (50 samples, 1.54%)</title><rect x="26.4534%" y="453" width="1.5380%" height="15" fill="rgb(252,25,45)" fg:x="860" fg:w="50"/><text x="26.7034%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.06%)</title><rect x="27.9299%" y="437" width="0.0615%" height="15" fill="rgb(251,164,9)" fg:x="908" fg:w="2"/><text x="28.1799%" y="447.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="28.4220%" y="293" width="0.0308%" height="15" fill="rgb(233,194,0)" fg:x="924" fg:w="1"/><text x="28.6720%" y="303.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="28.4220%" y="405" width="0.0615%" height="15" fill="rgb(249,111,24)" fg:x="924" fg:w="2"/><text x="28.6720%" y="415.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="28.4220%" y="389" width="0.0615%" height="15" fill="rgb(250,223,3)" fg:x="924" fg:w="2"/><text x="28.6720%" y="399.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="28.4220%" y="373" width="0.0615%" height="15" fill="rgb(236,178,37)" fg:x="924" fg:w="2"/><text x="28.6720%" y="383.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="28.4220%" y="357" width="0.0615%" height="15" fill="rgb(241,158,50)" fg:x="924" fg:w="2"/><text x="28.6720%" y="367.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="28.4220%" y="341" width="0.0615%" height="15" fill="rgb(213,121,41)" fg:x="924" fg:w="2"/><text x="28.6720%" y="351.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.06%)</title><rect x="28.4220%" y="325" width="0.0615%" height="15" fill="rgb(240,92,3)" fg:x="924" fg:w="2"/><text x="28.6720%" y="335.50"></text></g><g><title>charge_memcg (2 samples, 0.06%)</title><rect x="28.4220%" y="309" width="0.0615%" height="15" fill="rgb(205,123,3)" fg:x="924" fg:w="2"/><text x="28.6720%" y="319.50"></text></g><g><title>consume_stock (1 samples, 0.03%)</title><rect x="28.4528%" y="293" width="0.0308%" height="15" fill="rgb(205,97,47)" fg:x="925" fg:w="1"/><text x="28.7028%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.52%)</title><rect x="27.9914%" y="469" width="0.5229%" height="15" fill="rgb(247,152,14)" fg:x="910" fg:w="17"/><text x="28.2414%" y="479.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5 samples, 0.15%)</title><rect x="28.3605%" y="453" width="0.1538%" height="15" fill="rgb(248,195,53)" fg:x="922" fg:w="5"/><text x="28.6105%" y="463.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.09%)</title><rect x="28.4220%" y="437" width="0.0923%" height="15" fill="rgb(226,201,16)" fg:x="924" fg:w="3"/><text x="28.6720%" y="447.50"></text></g><g><title>exc_page_fault (3 samples, 0.09%)</title><rect x="28.4220%" y="421" width="0.0923%" height="15" fill="rgb(205,98,0)" fg:x="924" fg:w="3"/><text x="28.6720%" y="431.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="28.4835%" y="405" width="0.0308%" height="15" fill="rgb(214,191,48)" fg:x="926" fg:w="1"/><text x="28.7335%" y="415.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="28.4835%" y="389" width="0.0308%" height="15" fill="rgb(237,112,39)" fg:x="926" fg:w="1"/><text x="28.7335%" y="399.50"></text></g><g><title>core::slice::sort::merge (81 samples, 2.49%)</title><rect x="26.0843%" y="485" width="2.4915%" height="15" fill="rgb(247,203,27)" fg:x="848" fg:w="81"/><text x="26.3343%" y="495.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.06%)</title><rect x="28.5143%" y="469" width="0.0615%" height="15" fill="rgb(235,124,28)" fg:x="927" fg:w="2"/><text x="28.7643%" y="479.50"></text></g><g><title>core::slice::sort::merge_sort (12 samples, 0.37%)</title><rect x="28.5758%" y="485" width="0.3691%" height="15" fill="rgb(208,207,46)" fg:x="929" fg:w="12"/><text x="28.8258%" y="495.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="28.9449%" y="229" width="0.0308%" height="15" fill="rgb(234,176,4)" fg:x="941" fg:w="1"/><text x="29.1949%" y="239.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="357" width="0.0615%" height="15" fill="rgb(230,133,28)" fg:x="941" fg:w="2"/><text x="29.1949%" y="367.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="341" width="0.0615%" height="15" fill="rgb(211,137,40)" fg:x="941" fg:w="2"/><text x="29.1949%" y="351.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="325" width="0.0615%" height="15" fill="rgb(254,35,13)" fg:x="941" fg:w="2"/><text x="29.1949%" y="335.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="309" width="0.0615%" height="15" fill="rgb(225,49,51)" fg:x="941" fg:w="2"/><text x="29.1949%" y="319.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="293" width="0.0615%" height="15" fill="rgb(251,10,15)" fg:x="941" fg:w="2"/><text x="29.1949%" y="303.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="28.9449%" y="277" width="0.0615%" height="15" fill="rgb(228,207,15)" fg:x="941" fg:w="2"/><text x="29.1949%" y="287.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="28.9449%" y="261" width="0.0615%" height="15" fill="rgb(241,99,19)" fg:x="941" fg:w="2"/><text x="29.1949%" y="271.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.06%)</title><rect x="28.9449%" y="245" width="0.0615%" height="15" fill="rgb(207,104,49)" fg:x="941" fg:w="2"/><text x="29.1949%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="28.9757%" y="229" width="0.0308%" height="15" fill="rgb(234,99,18)" fg:x="942" fg:w="1"/><text x="29.2257%" y="239.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="29.0065%" y="293" width="0.0308%" height="15" fill="rgb(213,191,49)" fg:x="943" fg:w="1"/><text x="29.2565%" y="303.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="29.0065%" y="277" width="0.0308%" height="15" fill="rgb(210,226,19)" fg:x="943" fg:w="1"/><text x="29.2565%" y="287.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="29.0065%" y="261" width="0.0308%" height="15" fill="rgb(229,97,18)" fg:x="943" fg:w="1"/><text x="29.2565%" y="271.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="29.0065%" y="245" width="0.0308%" height="15" fill="rgb(211,167,15)" fg:x="943" fg:w="1"/><text x="29.2565%" y="255.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="29.0065%" y="229" width="0.0308%" height="15" fill="rgb(210,169,34)" fg:x="943" fg:w="1"/><text x="29.2565%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="29.0065%" y="325" width="0.0615%" height="15" fill="rgb(241,121,31)" fg:x="943" fg:w="2"/><text x="29.2565%" y="335.50"></text></g><g><title>do_syscall_64 (2 samples, 0.06%)</title><rect x="29.0065%" y="309" width="0.0615%" height="15" fill="rgb(232,40,11)" fg:x="943" fg:w="2"/><text x="29.2565%" y="319.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="29.0372%" y="293" width="0.0308%" height="15" fill="rgb(205,86,26)" fg:x="944" fg:w="1"/><text x="29.2872%" y="303.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="29.0680%" y="325" width="0.0308%" height="15" fill="rgb(231,126,28)" fg:x="945" fg:w="1"/><text x="29.3180%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (6 samples, 0.18%)</title><rect x="28.9449%" y="485" width="0.1846%" height="15" fill="rgb(219,221,18)" fg:x="941" fg:w="6"/><text x="29.1949%" y="495.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (6 samples, 0.18%)</title><rect x="28.9449%" y="469" width="0.1846%" height="15" fill="rgb(211,40,0)" fg:x="941" fg:w="6"/><text x="29.1949%" y="479.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.18%)</title><rect x="28.9449%" y="453" width="0.1846%" height="15" fill="rgb(239,85,43)" fg:x="941" fg:w="6"/><text x="29.1949%" y="463.50"></text></g><g><title>__rdl_alloc (6 samples, 0.18%)</title><rect x="28.9449%" y="437" width="0.1846%" height="15" fill="rgb(231,55,21)" fg:x="941" fg:w="6"/><text x="29.1949%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.18%)</title><rect x="28.9449%" y="421" width="0.1846%" height="15" fill="rgb(225,184,43)" fg:x="941" fg:w="6"/><text x="29.1949%" y="431.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.18%)</title><rect x="28.9449%" y="405" width="0.1846%" height="15" fill="rgb(251,158,41)" fg:x="941" fg:w="6"/><text x="29.1949%" y="415.50"></text></g><g><title>_int_malloc (6 samples, 0.18%)</title><rect x="28.9449%" y="389" width="0.1846%" height="15" fill="rgb(234,159,37)" fg:x="941" fg:w="6"/><text x="29.1949%" y="399.50"></text></g><g><title>sysmalloc (6 samples, 0.18%)</title><rect x="28.9449%" y="373" width="0.1846%" height="15" fill="rgb(216,204,22)" fg:x="941" fg:w="6"/><text x="29.1949%" y="383.50"></text></g><g><title>grow_heap (4 samples, 0.12%)</title><rect x="29.0065%" y="357" width="0.1230%" height="15" fill="rgb(214,17,3)" fg:x="943" fg:w="4"/><text x="29.2565%" y="367.50"></text></g><g><title>__GI___mprotect (4 samples, 0.12%)</title><rect x="29.0065%" y="341" width="0.1230%" height="15" fill="rgb(212,111,17)" fg:x="943" fg:w="4"/><text x="29.2565%" y="351.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.03%)</title><rect x="29.0987%" y="325" width="0.0308%" height="15" fill="rgb(221,157,24)" fg:x="946" fg:w="1"/><text x="29.3487%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (3 samples, 0.09%)</title><rect x="29.1295%" y="485" width="0.0923%" height="15" fill="rgb(252,16,13)" fg:x="947" fg:w="3"/><text x="29.3795%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="29.2525%" y="453" width="0.0308%" height="15" fill="rgb(221,62,2)" fg:x="951" fg:w="1"/><text x="29.5025%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="29.2525%" y="437" width="0.0308%" height="15" fill="rgb(247,87,22)" fg:x="951" fg:w="1"/><text x="29.5025%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="29.2525%" y="421" width="0.0308%" height="15" fill="rgb(215,73,9)" fg:x="951" fg:w="1"/><text x="29.5025%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="29.2525%" y="405" width="0.0308%" height="15" fill="rgb(207,175,33)" fg:x="951" fg:w="1"/><text x="29.5025%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="29.2525%" y="389" width="0.0308%" height="15" fill="rgb(243,129,54)" fg:x="951" fg:w="1"/><text x="29.5025%" y="399.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="29.2525%" y="373" width="0.0308%" height="15" fill="rgb(227,119,45)" fg:x="951" fg:w="1"/><text x="29.5025%" y="383.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="29.2525%" y="357" width="0.0308%" height="15" fill="rgb(205,109,36)" fg:x="951" fg:w="1"/><text x="29.5025%" y="367.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="29.2525%" y="341" width="0.0308%" height="15" fill="rgb(205,6,39)" fg:x="951" fg:w="1"/><text x="29.5025%" y="351.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.03%)</title><rect x="29.2525%" y="325" width="0.0308%" height="15" fill="rgb(221,32,16)" fg:x="951" fg:w="1"/><text x="29.5025%" y="335.50"></text></g><g><title>task_work_run (1 samples, 0.03%)</title><rect x="29.2525%" y="309" width="0.0308%" height="15" fill="rgb(228,144,50)" fg:x="951" fg:w="1"/><text x="29.5025%" y="319.50"></text></g><g><title>task_numa_work (1 samples, 0.03%)</title><rect x="29.2525%" y="293" width="0.0308%" height="15" fill="rgb(229,201,53)" fg:x="951" fg:w="1"/><text x="29.5025%" y="303.50"></text></g><g><title>change_prot_numa (1 samples, 0.03%)</title><rect x="29.2525%" y="277" width="0.0308%" height="15" fill="rgb(249,153,27)" fg:x="951" fg:w="1"/><text x="29.5025%" y="287.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="29.2525%" y="261" width="0.0308%" height="15" fill="rgb(227,106,25)" fg:x="951" fg:w="1"/><text x="29.5025%" y="271.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="29.2525%" y="245" width="0.0308%" height="15" fill="rgb(230,65,29)" fg:x="951" fg:w="1"/><text x="29.5025%" y="255.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="29.2525%" y="229" width="0.0308%" height="15" fill="rgb(221,57,46)" fg:x="951" fg:w="1"/><text x="29.5025%" y="239.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="29.2525%" y="213" width="0.0308%" height="15" fill="rgb(229,161,17)" fg:x="951" fg:w="1"/><text x="29.5025%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="29.2833%" y="437" width="0.0308%" height="15" fill="rgb(222,213,11)" fg:x="952" fg:w="1"/><text x="29.5333%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1 samples, 0.03%)</title><rect x="29.2833%" y="421" width="0.0308%" height="15" fill="rgb(235,35,13)" fg:x="952" fg:w="1"/><text x="29.5333%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1 samples, 0.03%)</title><rect x="29.2833%" y="405" width="0.0308%" height="15" fill="rgb(233,158,34)" fg:x="952" fg:w="1"/><text x="29.5333%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="29.2833%" y="389" width="0.0308%" height="15" fill="rgb(215,151,48)" fg:x="952" fg:w="1"/><text x="29.5333%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (4 samples, 0.12%)</title><rect x="29.3141%" y="421" width="0.1230%" height="15" fill="rgb(229,84,14)" fg:x="953" fg:w="4"/><text x="29.5641%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (13 samples, 0.40%)</title><rect x="29.8370%" y="373" width="0.3999%" height="15" fill="rgb(229,68,14)" fg:x="970" fg:w="13"/><text x="30.0870%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (13 samples, 0.40%)</title><rect x="29.8370%" y="357" width="0.3999%" height="15" fill="rgb(243,106,26)" fg:x="970" fg:w="13"/><text x="30.0870%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (14 samples, 0.43%)</title><rect x="29.8370%" y="405" width="0.4306%" height="15" fill="rgb(206,45,38)" fg:x="970" fg:w="14"/><text x="30.0870%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (14 samples, 0.43%)</title><rect x="29.8370%" y="389" width="0.4306%" height="15" fill="rgb(226,6,15)" fg:x="970" fg:w="14"/><text x="30.0870%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="30.2369%" y="373" width="0.0308%" height="15" fill="rgb(232,22,54)" fg:x="983" fg:w="1"/><text x="30.4869%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="30.2369%" y="357" width="0.0308%" height="15" fill="rgb(229,222,32)" fg:x="983" fg:w="1"/><text x="30.4869%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="30.2676%" y="405" width="0.0308%" height="15" fill="rgb(228,62,29)" fg:x="984" fg:w="1"/><text x="30.5176%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (33 samples, 1.02%)</title><rect x="29.3141%" y="437" width="1.0151%" height="15" fill="rgb(251,103,34)" fg:x="953" fg:w="33"/><text x="29.5641%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (29 samples, 0.89%)</title><rect x="29.4371%" y="421" width="0.8920%" height="15" fill="rgb(233,12,30)" fg:x="957" fg:w="29"/><text x="29.6871%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="30.2984%" y="405" width="0.0308%" height="15" fill="rgb(238,52,0)" fg:x="985" fg:w="1"/><text x="30.5484%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="30.2984%" y="389" width="0.0308%" height="15" fill="rgb(223,98,5)" fg:x="985" fg:w="1"/><text x="30.5484%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="30.2984%" y="373" width="0.0308%" height="15" fill="rgb(228,75,37)" fg:x="985" fg:w="1"/><text x="30.5484%" y="383.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="30.2984%" y="357" width="0.0308%" height="15" fill="rgb(205,115,49)" fg:x="985" fg:w="1"/><text x="30.5484%" y="367.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="30.2984%" y="341" width="0.0308%" height="15" fill="rgb(250,154,43)" fg:x="985" fg:w="1"/><text x="30.5484%" y="351.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="30.2984%" y="325" width="0.0308%" height="15" fill="rgb(226,43,29)" fg:x="985" fg:w="1"/><text x="30.5484%" y="335.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="30.2984%" y="309" width="0.0308%" height="15" fill="rgb(249,228,39)" fg:x="985" fg:w="1"/><text x="30.5484%" y="319.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="30.2984%" y="293" width="0.0308%" height="15" fill="rgb(216,79,43)" fg:x="985" fg:w="1"/><text x="30.5484%" y="303.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="30.2984%" y="277" width="0.0308%" height="15" fill="rgb(228,95,12)" fg:x="985" fg:w="1"/><text x="30.5484%" y="287.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="30.2984%" y="261" width="0.0308%" height="15" fill="rgb(249,221,15)" fg:x="985" fg:w="1"/><text x="30.5484%" y="271.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="30.2984%" y="245" width="0.0308%" height="15" fill="rgb(233,34,13)" fg:x="985" fg:w="1"/><text x="30.5484%" y="255.50"></text></g><g><title>idle_cpu (1 samples, 0.03%)</title><rect x="30.2984%" y="229" width="0.0308%" height="15" fill="rgb(214,103,39)" fg:x="985" fg:w="1"/><text x="30.5484%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="30.3291%" y="437" width="0.1230%" height="15" fill="rgb(251,126,39)" fg:x="986" fg:w="4"/><text x="30.5791%" y="447.50"></text></g><g><title>core::slice::sort::insert_tail (39 samples, 1.20%)</title><rect x="29.2833%" y="453" width="1.1996%" height="15" fill="rgb(214,216,36)" fg:x="952" fg:w="39"/><text x="29.5333%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (1 samples, 0.03%)</title><rect x="30.4522%" y="437" width="0.0308%" height="15" fill="rgb(220,221,8)" fg:x="990" fg:w="1"/><text x="30.7022%" y="447.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="30.4522%" y="421" width="0.0308%" height="15" fill="rgb(240,216,3)" fg:x="990" fg:w="1"/><text x="30.7022%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="30.4522%" y="405" width="0.0308%" height="15" fill="rgb(232,218,17)" fg:x="990" fg:w="1"/><text x="30.7022%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (152 samples, 4.68%)</title><rect x="25.9305%" y="533" width="4.6755%" height="15" fill="rgb(229,163,45)" fg:x="843" fg:w="152"/><text x="26.1805%" y="543.50">alloc..</text></g><g><title>alloc::slice::stable_sort (152 samples, 4.68%)</title><rect x="25.9305%" y="517" width="4.6755%" height="15" fill="rgb(231,110,42)" fg:x="843" fg:w="152"/><text x="26.1805%" y="527.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (152 samples, 4.68%)</title><rect x="25.9305%" y="501" width="4.6755%" height="15" fill="rgb(208,170,48)" fg:x="843" fg:w="152"/><text x="26.1805%" y="511.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (45 samples, 1.38%)</title><rect x="29.2218%" y="485" width="1.3842%" height="15" fill="rgb(239,116,25)" fg:x="950" fg:w="45"/><text x="29.4718%" y="495.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (45 samples, 1.38%)</title><rect x="29.2218%" y="469" width="1.3842%" height="15" fill="rgb(219,200,50)" fg:x="950" fg:w="45"/><text x="29.4718%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (4 samples, 0.12%)</title><rect x="30.4829%" y="453" width="0.1230%" height="15" fill="rgb(245,200,0)" fg:x="991" fg:w="4"/><text x="30.7329%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (2 samples, 0.06%)</title><rect x="30.6060%" y="533" width="0.0615%" height="15" fill="rgb(245,119,33)" fg:x="995" fg:w="2"/><text x="30.8560%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (2 samples, 0.06%)</title><rect x="30.6060%" y="517" width="0.0615%" height="15" fill="rgb(231,125,12)" fg:x="995" fg:w="2"/><text x="30.8560%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (2 samples, 0.06%)</title><rect x="30.6060%" y="501" width="0.0615%" height="15" fill="rgb(216,96,41)" fg:x="995" fg:w="2"/><text x="30.8560%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (2 samples, 0.06%)</title><rect x="30.6060%" y="485" width="0.0615%" height="15" fill="rgb(248,43,45)" fg:x="995" fg:w="2"/><text x="30.8560%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (2 samples, 0.06%)</title><rect x="30.6060%" y="469" width="0.0615%" height="15" fill="rgb(217,222,7)" fg:x="995" fg:w="2"/><text x="30.8560%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="30.6367%" y="453" width="0.0308%" height="15" fill="rgb(233,28,6)" fg:x="996" fg:w="1"/><text x="30.8867%" y="463.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="30.6367%" y="437" width="0.0308%" height="15" fill="rgb(231,218,15)" fg:x="996" fg:w="1"/><text x="30.8867%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="30.6367%" y="421" width="0.0308%" height="15" fill="rgb(226,171,48)" fg:x="996" fg:w="1"/><text x="30.8867%" y="431.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="30.6675%" y="213" width="0.0308%" height="15" fill="rgb(235,201,9)" fg:x="997" fg:w="1"/><text x="30.9175%" y="223.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="30.6675%" y="197" width="0.0308%" height="15" fill="rgb(217,80,15)" fg:x="997" fg:w="1"/><text x="30.9175%" y="207.50"></text></g><g><title>consume_stock (1 samples, 0.03%)</title><rect x="30.6675%" y="181" width="0.0308%" height="15" fill="rgb(219,152,8)" fg:x="997" fg:w="1"/><text x="30.9175%" y="191.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="341" width="0.0615%" height="15" fill="rgb(243,107,38)" fg:x="997" fg:w="2"/><text x="30.9175%" y="351.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="325" width="0.0615%" height="15" fill="rgb(231,17,5)" fg:x="997" fg:w="2"/><text x="30.9175%" y="335.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="309" width="0.0615%" height="15" fill="rgb(209,25,54)" fg:x="997" fg:w="2"/><text x="30.9175%" y="319.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="293" width="0.0615%" height="15" fill="rgb(219,0,2)" fg:x="997" fg:w="2"/><text x="30.9175%" y="303.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="277" width="0.0615%" height="15" fill="rgb(246,9,5)" fg:x="997" fg:w="2"/><text x="30.9175%" y="287.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="30.6675%" y="261" width="0.0615%" height="15" fill="rgb(226,159,4)" fg:x="997" fg:w="2"/><text x="30.9175%" y="271.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="30.6675%" y="245" width="0.0615%" height="15" fill="rgb(219,175,34)" fg:x="997" fg:w="2"/><text x="30.9175%" y="255.50"></text></g><g><title>__mem_cgroup_charge (2 samples, 0.06%)</title><rect x="30.6675%" y="229" width="0.0615%" height="15" fill="rgb(236,10,46)" fg:x="997" fg:w="2"/><text x="30.9175%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="30.6982%" y="213" width="0.0308%" height="15" fill="rgb(240,211,16)" fg:x="998" fg:w="1"/><text x="30.9482%" y="223.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (173 samples, 5.32%)</title><rect x="25.4383%" y="549" width="5.3214%" height="15" fill="rgb(205,3,43)" fg:x="827" fg:w="173"/><text x="25.6883%" y="559.50">project..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.09%)</title><rect x="30.6675%" y="533" width="0.0923%" height="15" fill="rgb(245,7,22)" fg:x="997" fg:w="3"/><text x="30.9175%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="30.6675%" y="517" width="0.0923%" height="15" fill="rgb(239,132,32)" fg:x="997" fg:w="3"/><text x="30.9175%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="30.6675%" y="501" width="0.0923%" height="15" fill="rgb(228,202,34)" fg:x="997" fg:w="3"/><text x="30.9175%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="30.6675%" y="485" width="0.0923%" height="15" fill="rgb(254,200,22)" fg:x="997" fg:w="3"/><text x="30.9175%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="30.6675%" y="469" width="0.0923%" height="15" fill="rgb(219,10,39)" fg:x="997" fg:w="3"/><text x="30.9175%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="30.6675%" y="453" width="0.0923%" height="15" fill="rgb(226,210,39)" fg:x="997" fg:w="3"/><text x="30.9175%" y="463.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="30.6675%" y="437" width="0.0923%" height="15" fill="rgb(208,219,16)" fg:x="997" fg:w="3"/><text x="30.9175%" y="447.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="30.6675%" y="421" width="0.0923%" height="15" fill="rgb(216,158,51)" fg:x="997" fg:w="3"/><text x="30.9175%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="30.6675%" y="405" width="0.0923%" height="15" fill="rgb(233,14,44)" fg:x="997" fg:w="3"/><text x="30.9175%" y="415.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="30.6675%" y="389" width="0.0923%" height="15" fill="rgb(237,97,39)" fg:x="997" fg:w="3"/><text x="30.9175%" y="399.50"></text></g><g><title>_int_malloc (3 samples, 0.09%)</title><rect x="30.6675%" y="373" width="0.0923%" height="15" fill="rgb(218,198,43)" fg:x="997" fg:w="3"/><text x="30.9175%" y="383.50"></text></g><g><title>sysmalloc (3 samples, 0.09%)</title><rect x="30.6675%" y="357" width="0.0923%" height="15" fill="rgb(231,104,20)" fg:x="997" fg:w="3"/><text x="30.9175%" y="367.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="30.7290%" y="341" width="0.0308%" height="15" fill="rgb(254,36,13)" fg:x="999" fg:w="1"/><text x="30.9790%" y="351.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="30.7290%" y="325" width="0.0308%" height="15" fill="rgb(248,14,50)" fg:x="999" fg:w="1"/><text x="30.9790%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="30.7290%" y="309" width="0.0308%" height="15" fill="rgb(217,107,29)" fg:x="999" fg:w="1"/><text x="30.9790%" y="319.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="30.7290%" y="293" width="0.0308%" height="15" fill="rgb(251,169,33)" fg:x="999" fg:w="1"/><text x="30.9790%" y="303.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="30.7290%" y="277" width="0.0308%" height="15" fill="rgb(217,108,32)" fg:x="999" fg:w="1"/><text x="30.9790%" y="287.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="30.7290%" y="261" width="0.0308%" height="15" fill="rgb(219,66,42)" fg:x="999" fg:w="1"/><text x="30.9790%" y="271.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="30.7290%" y="245" width="0.0308%" height="15" fill="rgb(206,180,7)" fg:x="999" fg:w="1"/><text x="30.9790%" y="255.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="30.7290%" y="229" width="0.0308%" height="15" fill="rgb(208,226,31)" fg:x="999" fg:w="1"/><text x="30.9790%" y="239.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="30.7290%" y="213" width="0.0308%" height="15" fill="rgb(218,26,49)" fg:x="999" fg:w="1"/><text x="30.9790%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="30.7598%" y="533" width="0.0308%" height="15" fill="rgb(233,197,48)" fg:x="1000" fg:w="1"/><text x="31.0098%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="30.7598%" y="517" width="0.0308%" height="15" fill="rgb(252,181,51)" fg:x="1000" fg:w="1"/><text x="31.0098%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (4 samples, 0.12%)</title><rect x="30.7598%" y="549" width="0.1230%" height="15" fill="rgb(253,90,19)" fg:x="1000" fg:w="4"/><text x="31.0098%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3 samples, 0.09%)</title><rect x="30.7905%" y="533" width="0.0923%" height="15" fill="rgb(215,171,30)" fg:x="1001" fg:w="3"/><text x="31.0405%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::set_bcp_idx_to_trail_head (1 samples, 0.03%)</title><rect x="30.9443%" y="533" width="0.0308%" height="15" fill="rgb(214,222,9)" fg:x="1006" fg:w="1"/><text x="31.1943%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (3 samples, 0.09%)</title><rect x="30.9751%" y="517" width="0.0923%" height="15" fill="rgb(223,3,22)" fg:x="1007" fg:w="3"/><text x="31.2251%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (4 samples, 0.12%)</title><rect x="30.9751%" y="533" width="0.1230%" height="15" fill="rgb(225,196,46)" fg:x="1007" fg:w="4"/><text x="31.2251%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="31.0674%" y="517" width="0.0308%" height="15" fill="rgb(209,110,37)" fg:x="1010" fg:w="1"/><text x="31.3174%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (258 samples, 7.94%)</title><rect x="31.0981%" y="533" width="7.9360%" height="15" fill="rgb(249,89,12)" fg:x="1011" fg:w="258"/><text x="31.3481%" y="543.50">project1::s..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="39.0034%" y="517" width="0.0308%" height="15" fill="rgb(226,27,33)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="39.0034%" y="501" width="0.0308%" height="15" fill="rgb(213,82,22)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="39.0034%" y="485" width="0.0308%" height="15" fill="rgb(248,140,0)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="39.0034%" y="469" width="0.0308%" height="15" fill="rgb(228,106,3)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="39.0034%" y="453" width="0.0308%" height="15" fill="rgb(209,23,37)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="39.0034%" y="437" width="0.0308%" height="15" fill="rgb(241,93,50)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="447.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="39.0034%" y="421" width="0.0308%" height="15" fill="rgb(253,46,43)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="431.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="39.0034%" y="405" width="0.0308%" height="15" fill="rgb(226,206,43)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="415.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="39.0034%" y="389" width="0.0308%" height="15" fill="rgb(217,54,7)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="399.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="39.0034%" y="373" width="0.0308%" height="15" fill="rgb(223,5,52)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="383.50"></text></g><g><title>timekeeping_update (1 samples, 0.03%)</title><rect x="39.0034%" y="357" width="0.0308%" height="15" fill="rgb(206,52,46)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="367.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.03%)</title><rect x="39.0034%" y="341" width="0.0308%" height="15" fill="rgb(253,136,11)" fg:x="1268" fg:w="1"/><text x="39.2534%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.22%)</title><rect x="54.6601%" y="517" width="0.2153%" height="15" fill="rgb(208,106,33)" fg:x="1777" fg:w="7"/><text x="54.9101%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.22%)</title><rect x="54.6601%" y="501" width="0.2153%" height="15" fill="rgb(206,54,4)" fg:x="1777" fg:w="7"/><text x="54.9101%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.22%)</title><rect x="54.6601%" y="485" width="0.2153%" height="15" fill="rgb(213,3,15)" fg:x="1777" fg:w="7"/><text x="54.9101%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="54.8754%" y="517" width="0.0615%" height="15" fill="rgb(252,211,39)" fg:x="1784" fg:w="2"/><text x="55.1254%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="54.8754%" y="501" width="0.0615%" height="15" fill="rgb(223,6,36)" fg:x="1784" fg:w="2"/><text x="55.1254%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="54.8754%" y="485" width="0.0615%" height="15" fill="rgb(252,169,45)" fg:x="1784" fg:w="2"/><text x="55.1254%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (38 samples, 1.17%)</title><rect x="54.9369%" y="485" width="1.1689%" height="15" fill="rgb(212,48,26)" fg:x="1786" fg:w="38"/><text x="55.1869%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (53 samples, 1.63%)</title><rect x="54.9369%" y="517" width="1.6303%" height="15" fill="rgb(251,102,48)" fg:x="1786" fg:w="53"/><text x="55.1869%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (53 samples, 1.63%)</title><rect x="54.9369%" y="501" width="1.6303%" height="15" fill="rgb(243,208,16)" fg:x="1786" fg:w="53"/><text x="55.1869%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (15 samples, 0.46%)</title><rect x="56.1058%" y="485" width="0.4614%" height="15" fill="rgb(219,96,24)" fg:x="1824" fg:w="15"/><text x="56.3558%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 1.38%)</title><rect x="56.5672%" y="485" width="1.3842%" height="15" fill="rgb(219,33,29)" fg:x="1839" fg:w="45"/><text x="56.8172%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.49%)</title><rect x="57.4592%" y="469" width="0.4922%" height="15" fill="rgb(223,176,5)" fg:x="1868" fg:w="16"/><text x="57.7092%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.49%)</title><rect x="57.4592%" y="453" width="0.4922%" height="15" fill="rgb(228,140,14)" fg:x="1868" fg:w="16"/><text x="57.7092%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (77 samples, 2.37%)</title><rect x="56.5672%" y="517" width="2.3685%" height="15" fill="rgb(217,179,31)" fg:x="1839" fg:w="77"/><text x="56.8172%" y="527.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (77 samples, 2.37%)</title><rect x="56.5672%" y="501" width="2.3685%" height="15" fill="rgb(230,9,30)" fg:x="1839" fg:w="77"/><text x="56.8172%" y="511.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32 samples, 0.98%)</title><rect x="57.9514%" y="485" width="0.9843%" height="15" fill="rgb(230,136,20)" fg:x="1884" fg:w="32"/><text x="58.2014%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.98%)</title><rect x="57.9514%" y="469" width="0.9843%" height="15" fill="rgb(215,210,22)" fg:x="1884" fg:w="32"/><text x="58.2014%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (38 samples, 1.17%)</title><rect x="58.9357%" y="453" width="1.1689%" height="15" fill="rgb(218,43,5)" fg:x="1916" fg:w="38"/><text x="59.1857%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (41 samples, 1.26%)</title><rect x="58.9357%" y="485" width="1.2612%" height="15" fill="rgb(216,11,5)" fg:x="1916" fg:w="41"/><text x="59.1857%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (41 samples, 1.26%)</title><rect x="58.9357%" y="469" width="1.2612%" height="15" fill="rgb(209,82,29)" fg:x="1916" fg:w="41"/><text x="59.1857%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (3 samples, 0.09%)</title><rect x="60.1046%" y="453" width="0.0923%" height="15" fill="rgb(244,115,12)" fg:x="1954" fg:w="3"/><text x="60.3546%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (44 samples, 1.35%)</title><rect x="58.9357%" y="517" width="1.3534%" height="15" fill="rgb(222,82,18)" fg:x="1916" fg:w="44"/><text x="59.1857%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (44 samples, 1.35%)</title><rect x="58.9357%" y="501" width="1.3534%" height="15" fill="rgb(249,227,8)" fg:x="1916" fg:w="44"/><text x="59.1857%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.09%)</title><rect x="60.1969%" y="485" width="0.0923%" height="15" fill="rgb(253,141,45)" fg:x="1957" fg:w="3"/><text x="60.4469%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="60.1969%" y="469" width="0.0923%" height="15" fill="rgb(234,184,4)" fg:x="1957" fg:w="3"/><text x="60.4469%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.18%)</title><rect x="60.2891%" y="485" width="0.1846%" height="15" fill="rgb(218,194,23)" fg:x="1960" fg:w="6"/><text x="60.5391%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (261 samples, 8.03%)</title><rect x="60.4737%" y="485" width="8.0283%" height="15" fill="rgb(235,66,41)" fg:x="1966" fg:w="261"/><text x="60.7237%" y="495.50">core::optio..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (261 samples, 8.03%)</title><rect x="60.4737%" y="469" width="8.0283%" height="15" fill="rgb(245,217,1)" fg:x="1966" fg:w="261"/><text x="60.7237%" y="479.50">slotmap::ba..</text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="68.4712%" y="453" width="0.0308%" height="15" fill="rgb(229,91,1)" fg:x="2226" fg:w="1"/><text x="68.7212%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (19 samples, 0.58%)</title><rect x="68.5020%" y="485" width="0.5844%" height="15" fill="rgb(207,101,30)" fg:x="2227" fg:w="19"/><text x="68.7520%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (19 samples, 0.58%)</title><rect x="68.5020%" y="469" width="0.5844%" height="15" fill="rgb(223,82,49)" fg:x="2227" fg:w="19"/><text x="68.7520%" y="479.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (290 samples, 8.92%)</title><rect x="60.2891%" y="517" width="8.9203%" height="15" fill="rgb(218,167,17)" fg:x="1960" fg:w="290"/><text x="60.5391%" y="527.50">&lt;project1::so..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (290 samples, 8.92%)</title><rect x="60.2891%" y="501" width="8.9203%" height="15" fill="rgb(208,103,14)" fg:x="1960" fg:w="290"/><text x="60.5391%" y="511.50">slotmap::basi..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (4 samples, 0.12%)</title><rect x="69.0864%" y="485" width="0.1230%" height="15" fill="rgb(238,20,8)" fg:x="2246" fg:w="4"/><text x="69.3364%" y="495.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="501" width="0.0308%" height="15" fill="rgb(218,80,54)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="511.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="485" width="0.0308%" height="15" fill="rgb(240,144,17)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="495.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="469" width="0.0308%" height="15" fill="rgb(245,27,50)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="479.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="453" width="0.0308%" height="15" fill="rgb(251,51,7)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="463.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="437" width="0.0308%" height="15" fill="rgb(245,217,29)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="447.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="75.8536%" y="421" width="0.0308%" height="15" fill="rgb(221,176,29)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="431.50"></text></g><g><title>do_numa_page (1 samples, 0.03%)</title><rect x="75.8536%" y="405" width="0.0308%" height="15" fill="rgb(212,180,24)" fg:x="2466" fg:w="1"/><text x="76.1036%" y="415.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (218 samples, 6.71%)</title><rect x="69.2095%" y="517" width="6.7056%" height="15" fill="rgb(254,24,2)" fg:x="2250" fg:w="218"/><text x="69.4595%" y="527.50">&lt;project1..</text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="75.8843%" y="501" width="0.0308%" height="15" fill="rgb(230,100,2)" fg:x="2467" fg:w="1"/><text x="76.1343%" y="511.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (2 samples, 0.06%)</title><rect x="75.9151%" y="517" width="0.0615%" height="15" fill="rgb(219,142,25)" fg:x="2468" fg:w="2"/><text x="76.1651%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="75.9151%" y="501" width="0.0615%" height="15" fill="rgb(240,73,43)" fg:x="2468" fg:w="2"/><text x="76.1651%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="76.7149%" y="501" width="0.0308%" height="15" fill="rgb(214,114,15)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="76.7149%" y="485" width="0.0308%" height="15" fill="rgb(207,130,4)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="76.7149%" y="469" width="0.0308%" height="15" fill="rgb(221,25,40)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="76.7149%" y="453" width="0.0308%" height="15" fill="rgb(241,184,7)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="76.7149%" y="437" width="0.0308%" height="15" fill="rgb(235,159,4)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="76.7149%" y="421" width="0.0308%" height="15" fill="rgb(214,87,48)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="431.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="76.7149%" y="405" width="0.0308%" height="15" fill="rgb(246,198,24)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="76.7149%" y="389" width="0.0308%" height="15" fill="rgb(209,66,40)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="399.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="76.7149%" y="373" width="0.0308%" height="15" fill="rgb(233,147,39)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="383.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="76.7149%" y="357" width="0.0308%" height="15" fill="rgb(231,145,52)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.03%)</title><rect x="76.7149%" y="341" width="0.0308%" height="15" fill="rgb(206,20,26)" fg:x="2494" fg:w="1"/><text x="76.9649%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.06%)</title><rect x="76.7456%" y="501" width="0.0615%" height="15" fill="rgb(238,220,4)" fg:x="2495" fg:w="2"/><text x="76.9956%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (147 samples, 4.52%)</title><rect x="75.9766%" y="517" width="4.5217%" height="15" fill="rgb(252,195,42)" fg:x="2470" fg:w="147"/><text x="76.2266%" y="527.50">alloc..</text></g><g><title>core::ptr::write (120 samples, 3.69%)</title><rect x="76.8071%" y="501" width="3.6912%" height="15" fill="rgb(209,10,6)" fg:x="2497" fg:w="120"/><text x="77.0571%" y="511.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.4675%" y="485" width="0.0308%" height="15" fill="rgb(229,3,52)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.4675%" y="469" width="0.0308%" height="15" fill="rgb(253,49,37)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.4675%" y="453" width="0.0308%" height="15" fill="rgb(240,103,49)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="80.4675%" y="437" width="0.0308%" height="15" fill="rgb(250,182,30)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="80.4675%" y="421" width="0.0308%" height="15" fill="rgb(248,8,30)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="431.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="80.4675%" y="405" width="0.0308%" height="15" fill="rgb(237,120,30)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="415.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="80.4675%" y="389" width="0.0308%" height="15" fill="rgb(221,146,34)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="399.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="80.4675%" y="373" width="0.0308%" height="15" fill="rgb(242,55,13)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="383.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="80.4675%" y="357" width="0.0308%" height="15" fill="rgb(242,112,31)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="367.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="80.4675%" y="341" width="0.0308%" height="15" fill="rgb(249,192,27)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="351.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="80.4675%" y="325" width="0.0308%" height="15" fill="rgb(208,204,44)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="335.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.03%)</title><rect x="80.4675%" y="309" width="0.0308%" height="15" fill="rgb(208,93,54)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="319.50"></text></g><g><title>generic_exec_single (1 samples, 0.03%)</title><rect x="80.4675%" y="293" width="0.0308%" height="15" fill="rgb(242,1,31)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="303.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.03%)</title><rect x="80.4675%" y="277" width="0.0308%" height="15" fill="rgb(241,83,25)" fg:x="2616" fg:w="1"/><text x="80.7175%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.4983%" y="485" width="0.0308%" height="15" fill="rgb(205,169,50)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="80.4983%" y="469" width="0.0308%" height="15" fill="rgb(239,186,37)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="80.4983%" y="453" width="0.0308%" height="15" fill="rgb(205,221,10)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="80.4983%" y="437" width="0.0308%" height="15" fill="rgb(218,196,15)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="447.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="80.4983%" y="421" width="0.0308%" height="15" fill="rgb(218,196,35)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="431.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="80.4983%" y="405" width="0.0308%" height="15" fill="rgb(233,63,24)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="415.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="80.4983%" y="389" width="0.0308%" height="15" fill="rgb(225,8,4)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="399.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="80.4983%" y="373" width="0.0308%" height="15" fill="rgb(234,105,35)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="383.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="80.4983%" y="357" width="0.0308%" height="15" fill="rgb(236,21,32)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="367.50"></text></g><g><title>cpufreq_this_cpu_can_update (1 samples, 0.03%)</title><rect x="80.4983%" y="341" width="0.0308%" height="15" fill="rgb(228,109,6)" fg:x="2617" fg:w="1"/><text x="80.7483%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.06%)</title><rect x="80.4983%" y="517" width="0.0615%" height="15" fill="rgb(229,215,31)" fg:x="2617" fg:w="2"/><text x="80.7483%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.06%)</title><rect x="80.4983%" y="501" width="0.0615%" height="15" fill="rgb(221,52,54)" fg:x="2617" fg:w="2"/><text x="80.7483%" y="511.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="80.5291%" y="485" width="0.0308%" height="15" fill="rgb(252,129,43)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="495.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="80.5291%" y="469" width="0.0308%" height="15" fill="rgb(248,183,27)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="479.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="80.5291%" y="453" width="0.0308%" height="15" fill="rgb(250,0,22)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="463.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.03%)</title><rect x="80.5291%" y="437" width="0.0308%" height="15" fill="rgb(213,166,10)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="447.50"></text></g><g><title>task_work_run (1 samples, 0.03%)</title><rect x="80.5291%" y="421" width="0.0308%" height="15" fill="rgb(207,163,36)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="431.50"></text></g><g><title>task_numa_work (1 samples, 0.03%)</title><rect x="80.5291%" y="405" width="0.0308%" height="15" fill="rgb(208,122,22)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="415.50"></text></g><g><title>change_prot_numa (1 samples, 0.03%)</title><rect x="80.5291%" y="389" width="0.0308%" height="15" fill="rgb(207,104,49)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="399.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="80.5291%" y="373" width="0.0308%" height="15" fill="rgb(248,211,50)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="383.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="80.5291%" y="357" width="0.0308%" height="15" fill="rgb(217,13,45)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="367.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="80.5291%" y="341" width="0.0308%" height="15" fill="rgb(211,216,49)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="351.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="80.5291%" y="325" width="0.0308%" height="15" fill="rgb(221,58,53)" fg:x="2618" fg:w="1"/><text x="80.7791%" y="335.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.03%)</title><rect x="80.5598%" y="517" width="0.0308%" height="15" fill="rgb(220,112,41)" fg:x="2619" fg:w="1"/><text x="80.8098%" y="527.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="80.5598%" y="501" width="0.0308%" height="15" fill="rgb(236,38,28)" fg:x="2619" fg:w="1"/><text x="80.8098%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (35 samples, 1.08%)</title><rect x="80.5906%" y="517" width="1.0766%" height="15" fill="rgb(227,195,22)" fg:x="2620" fg:w="35"/><text x="80.8406%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (44 samples, 1.35%)</title><rect x="81.6672%" y="517" width="1.3534%" height="15" fill="rgb(214,55,33)" fg:x="2655" fg:w="44"/><text x="81.9172%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (44 samples, 1.35%)</title><rect x="81.6672%" y="501" width="1.3534%" height="15" fill="rgb(248,80,13)" fg:x="2655" fg:w="44"/><text x="81.9172%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (44 samples, 1.35%)</title><rect x="81.6672%" y="485" width="1.3534%" height="15" fill="rgb(238,52,6)" fg:x="2655" fg:w="44"/><text x="81.9172%" y="495.50"></text></g><g><title>core::intrinsics::copy (17 samples, 0.52%)</title><rect x="83.1129%" y="485" width="0.5229%" height="15" fill="rgb(224,198,47)" fg:x="2702" fg:w="17"/><text x="83.3629%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (35 samples, 1.08%)</title><rect x="83.0206%" y="517" width="1.0766%" height="15" fill="rgb(233,171,20)" fg:x="2699" fg:w="35"/><text x="83.2706%" y="527.50"></text></g><g><title>core::ptr::swap (32 samples, 0.98%)</title><rect x="83.1129%" y="501" width="0.9843%" height="15" fill="rgb(241,30,25)" fg:x="2702" fg:w="32"/><text x="83.3629%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.46%)</title><rect x="83.6358%" y="485" width="0.4614%" height="15" fill="rgb(207,171,38)" fg:x="2719" fg:w="15"/><text x="83.8858%" y="495.50"></text></g><g><title>log::__private_api::log (1 samples, 0.03%)</title><rect x="84.0972%" y="517" width="0.0308%" height="15" fill="rgb(234,70,1)" fg:x="2734" fg:w="1"/><text x="84.3472%" y="527.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (1 samples, 0.03%)</title><rect x="84.0972%" y="501" width="0.0308%" height="15" fill="rgb(232,178,18)" fg:x="2734" fg:w="1"/><text x="84.3472%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (142 samples, 4.37%)</title><rect x="84.1280%" y="485" width="4.3679%" height="15" fill="rgb(241,78,40)" fg:x="2735" fg:w="142"/><text x="84.3780%" y="495.50">core:..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="88.4651%" y="469" width="0.0308%" height="15" fill="rgb(222,35,25)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="88.4651%" y="453" width="0.0308%" height="15" fill="rgb(207,92,16)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="463.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="88.4651%" y="437" width="0.0308%" height="15" fill="rgb(216,59,51)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="447.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="88.4651%" y="421" width="0.0308%" height="15" fill="rgb(213,80,28)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="431.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="88.4651%" y="405" width="0.0308%" height="15" fill="rgb(220,93,7)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="415.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="88.4651%" y="389" width="0.0308%" height="15" fill="rgb(225,24,44)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="399.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="88.4651%" y="373" width="0.0308%" height="15" fill="rgb(243,74,40)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="383.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="88.4651%" y="357" width="0.0308%" height="15" fill="rgb(228,39,7)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="367.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="88.4651%" y="341" width="0.0308%" height="15" fill="rgb(227,79,8)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="351.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="88.4651%" y="325" width="0.0308%" height="15" fill="rgb(236,58,11)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="335.50"></text></g><g><title>timekeeping_update (1 samples, 0.03%)</title><rect x="88.4651%" y="309" width="0.0308%" height="15" fill="rgb(249,63,35)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="319.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.03%)</title><rect x="88.4651%" y="293" width="0.0308%" height="15" fill="rgb(252,114,16)" fg:x="2876" fg:w="1"/><text x="88.7151%" y="303.50"></text></g><g><title>log::max_level (143 samples, 4.40%)</title><rect x="84.1280%" y="517" width="4.3986%" height="15" fill="rgb(254,151,24)" fg:x="2735" fg:w="143"/><text x="84.3780%" y="527.50">log::..</text></g><g><title>core::sync::atomic::AtomicUsize::load (143 samples, 4.40%)</title><rect x="84.1280%" y="501" width="4.3986%" height="15" fill="rgb(253,54,39)" fg:x="2735" fg:w="143"/><text x="84.3780%" y="511.50">core:..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="88.4958%" y="485" width="0.0308%" height="15" fill="rgb(243,25,45)" fg:x="2877" fg:w="1"/><text x="88.7458%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.09%)</title><rect x="88.8342%" y="485" width="0.0923%" height="15" fill="rgb(234,134,9)" fg:x="2888" fg:w="3"/><text x="89.0842%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.09%)</title><rect x="88.8342%" y="469" width="0.0923%" height="15" fill="rgb(227,166,31)" fg:x="2888" fg:w="3"/><text x="89.0842%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.09%)</title><rect x="88.8342%" y="453" width="0.0923%" height="15" fill="rgb(245,143,41)" fg:x="2888" fg:w="3"/><text x="89.0842%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.12%)</title><rect x="88.8342%" y="501" width="0.1230%" height="15" fill="rgb(238,181,32)" fg:x="2888" fg:w="4"/><text x="89.0842%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.9265%" y="485" width="0.0308%" height="15" fill="rgb(224,113,18)" fg:x="2891" fg:w="1"/><text x="89.1765%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.9265%" y="469" width="0.0308%" height="15" fill="rgb(240,229,28)" fg:x="2891" fg:w="1"/><text x="89.1765%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="88.9572%" y="501" width="0.0308%" height="15" fill="rgb(250,185,3)" fg:x="2892" fg:w="1"/><text x="89.2072%" y="511.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="88.9572%" y="485" width="0.0308%" height="15" fill="rgb(212,59,25)" fg:x="2892" fg:w="1"/><text x="89.2072%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="88.9572%" y="469" width="0.0308%" height="15" fill="rgb(221,87,20)" fg:x="2892" fg:w="1"/><text x="89.2072%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="88.9880%" y="485" width="0.0615%" height="15" fill="rgb(213,74,28)" fg:x="2893" fg:w="2"/><text x="89.2380%" y="495.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="89.0188%" y="469" width="0.0308%" height="15" fill="rgb(224,132,34)" fg:x="2894" fg:w="1"/><text x="89.2688%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (18 samples, 0.55%)</title><rect x="88.5266%" y="517" width="0.5537%" height="15" fill="rgb(222,101,24)" fg:x="2878" fg:w="18"/><text x="88.7766%" y="527.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (3 samples, 0.09%)</title><rect x="88.9880%" y="501" width="0.0923%" height="15" fill="rgb(254,142,4)" fg:x="2893" fg:w="3"/><text x="89.2380%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="89.0495%" y="485" width="0.0308%" height="15" fill="rgb(230,229,49)" fg:x="2895" fg:w="1"/><text x="89.2995%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.15%)</title><rect x="89.0803%" y="485" width="0.1538%" height="15" fill="rgb(238,70,47)" fg:x="2896" fg:w="5"/><text x="89.3303%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.62%)</title><rect x="89.0803%" y="501" width="0.6152%" height="15" fill="rgb(231,160,17)" fg:x="2896" fg:w="20"/><text x="89.3303%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15 samples, 0.46%)</title><rect x="89.2341%" y="485" width="0.4614%" height="15" fill="rgb(218,68,53)" fg:x="2901" fg:w="15"/><text x="89.4841%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15 samples, 0.46%)</title><rect x="89.2341%" y="469" width="0.4614%" height="15" fill="rgb(236,111,10)" fg:x="2901" fg:w="15"/><text x="89.4841%" y="479.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (132 samples, 4.06%)</title><rect x="89.6955%" y="485" width="4.0603%" height="15" fill="rgb(224,34,41)" fg:x="2916" fg:w="132"/><text x="89.9455%" y="495.50">&lt;pro..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7250%" y="469" width="0.0308%" height="15" fill="rgb(241,118,19)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7250%" y="453" width="0.0308%" height="15" fill="rgb(238,129,25)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="463.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7250%" y="437" width="0.0308%" height="15" fill="rgb(238,22,31)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="447.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="93.7250%" y="421" width="0.0308%" height="15" fill="rgb(222,174,48)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="431.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="93.7250%" y="405" width="0.0308%" height="15" fill="rgb(206,152,40)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="415.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="93.7250%" y="389" width="0.0308%" height="15" fill="rgb(218,99,54)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="399.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="93.7250%" y="373" width="0.0308%" height="15" fill="rgb(220,174,26)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="383.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="93.7250%" y="357" width="0.0308%" height="15" fill="rgb(245,116,9)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="367.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="93.7250%" y="341" width="0.0308%" height="15" fill="rgb(209,72,35)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="351.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="93.7250%" y="325" width="0.0308%" height="15" fill="rgb(226,126,21)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="335.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="93.7250%" y="309" width="0.0308%" height="15" fill="rgb(227,192,1)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="319.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.03%)</title><rect x="93.7250%" y="293" width="0.0308%" height="15" fill="rgb(237,180,29)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="303.50"></text></g><g><title>generic_exec_single (1 samples, 0.03%)</title><rect x="93.7250%" y="277" width="0.0308%" height="15" fill="rgb(230,197,35)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="287.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.03%)</title><rect x="93.7250%" y="261" width="0.0308%" height="15" fill="rgb(246,193,31)" fg:x="3047" fg:w="1"/><text x="93.9750%" y="271.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (187 samples, 5.75%)</title><rect x="89.6955%" y="501" width="5.7521%" height="15" fill="rgb(241,36,4)" fg:x="2916" fg:w="187"/><text x="89.9455%" y="511.50">&lt;projec..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (55 samples, 1.69%)</title><rect x="93.7558%" y="485" width="1.6918%" height="15" fill="rgb(241,130,17)" fg:x="3048" fg:w="55"/><text x="94.0058%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (8 samples, 0.25%)</title><rect x="95.4476%" y="501" width="0.2461%" height="15" fill="rgb(206,137,32)" fg:x="3103" fg:w="8"/><text x="95.6976%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (57 samples, 1.75%)</title><rect x="95.6936%" y="485" width="1.7533%" height="15" fill="rgb(237,228,51)" fg:x="3111" fg:w="57"/><text x="95.9436%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (283 samples, 8.71%)</title><rect x="89.0803%" y="517" width="8.7050%" height="15" fill="rgb(243,6,42)" fg:x="2896" fg:w="283"/><text x="89.3303%" y="527.50">project1::so..</text></g><g><title>project1::solver::types::Lit::var_idx (68 samples, 2.09%)</title><rect x="95.6936%" y="501" width="2.0917%" height="15" fill="rgb(251,74,28)" fg:x="3111" fg:w="68"/><text x="95.9436%" y="511.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (11 samples, 0.34%)</title><rect x="97.4469%" y="485" width="0.3384%" height="15" fill="rgb(218,20,49)" fg:x="3168" fg:w="11"/><text x="97.6969%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.06%)</title><rect x="97.7853%" y="485" width="0.0615%" height="15" fill="rgb(238,28,14)" fg:x="3179" fg:w="2"/><text x="98.0353%" y="495.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (15 samples, 0.46%)</title><rect x="97.7853%" y="517" width="0.4614%" height="15" fill="rgb(229,40,46)" fg:x="3179" fg:w="15"/><text x="98.0353%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 0.46%)</title><rect x="97.7853%" y="501" width="0.4614%" height="15" fill="rgb(244,195,20)" fg:x="3179" fg:w="15"/><text x="98.0353%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.40%)</title><rect x="97.8468%" y="485" width="0.3999%" height="15" fill="rgb(253,56,35)" fg:x="3181" fg:w="13"/><text x="98.0968%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.40%)</title><rect x="97.8468%" y="469" width="0.3999%" height="15" fill="rgb(210,149,44)" fg:x="3181" fg:w="13"/><text x="98.0968%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="98.2775%" y="501" width="0.0308%" height="15" fill="rgb(240,135,12)" fg:x="3195" fg:w="1"/><text x="98.5275%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="98.2775%" y="485" width="0.0308%" height="15" fill="rgb(251,24,50)" fg:x="3195" fg:w="1"/><text x="98.5275%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="98.2775%" y="469" width="0.0308%" height="15" fill="rgb(243,200,47)" fg:x="3195" fg:w="1"/><text x="98.5275%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (6 samples, 0.18%)</title><rect x="98.2467%" y="517" width="0.1846%" height="15" fill="rgb(224,166,26)" fg:x="3194" fg:w="6"/><text x="98.4967%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.12%)</title><rect x="98.3082%" y="501" width="0.1230%" height="15" fill="rgb(233,0,47)" fg:x="3196" fg:w="4"/><text x="98.5582%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.12%)</title><rect x="98.3082%" y="485" width="0.1230%" height="15" fill="rgb(253,80,5)" fg:x="3196" fg:w="4"/><text x="98.5582%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="98.3082%" y="469" width="0.1230%" height="15" fill="rgb(214,133,25)" fg:x="3196" fg:w="4"/><text x="98.5582%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.12%)</title><rect x="98.3082%" y="453" width="0.1230%" height="15" fill="rgb(209,27,14)" fg:x="3196" fg:w="4"/><text x="98.5582%" y="463.50"></text></g><g><title>core::ptr::read (3 samples, 0.09%)</title><rect x="98.4313%" y="469" width="0.0923%" height="15" fill="rgb(219,102,51)" fg:x="3200" fg:w="3"/><text x="98.6813%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (6 samples, 0.18%)</title><rect x="98.4313%" y="517" width="0.1846%" height="15" fill="rgb(237,18,16)" fg:x="3200" fg:w="6"/><text x="98.6813%" y="527.50"></text></g><g><title>core::mem::take (6 samples, 0.18%)</title><rect x="98.4313%" y="501" width="0.1846%" height="15" fill="rgb(241,85,17)" fg:x="3200" fg:w="6"/><text x="98.6813%" y="511.50"></text></g><g><title>core::mem::replace (6 samples, 0.18%)</title><rect x="98.4313%" y="485" width="0.1846%" height="15" fill="rgb(236,90,42)" fg:x="3200" fg:w="6"/><text x="98.6813%" y="495.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="98.5235%" y="469" width="0.0923%" height="15" fill="rgb(249,57,21)" fg:x="3203" fg:w="3"/><text x="98.7735%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2,212 samples, 68.04%)</title><rect x="30.8828%" y="549" width="68.0406%" height="15" fill="rgb(243,12,36)" fg:x="1004" fg:w="2212"/><text x="31.1328%" y="559.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (1,947 samples, 59.89%)</title><rect x="39.0341%" y="533" width="59.8893%" height="15" fill="rgb(253,128,47)" fg:x="1269" fg:w="1947"/><text x="39.2841%" y="543.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::watch_list::Watcher::new (10 samples, 0.31%)</title><rect x="98.6158%" y="517" width="0.3076%" height="15" fill="rgb(207,33,20)" fg:x="3206" fg:w="10"/><text x="98.8658%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="98.9234%" y="453" width="0.0308%" height="15" fill="rgb(233,215,35)" fg:x="3216" fg:w="1"/><text x="99.1734%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="98.9234%" y="437" width="0.0308%" height="15" fill="rgb(249,188,52)" fg:x="3216" fg:w="1"/><text x="99.1734%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.06%)</title><rect x="98.9234%" y="469" width="0.0615%" height="15" fill="rgb(225,12,32)" fg:x="3216" fg:w="2"/><text x="99.1734%" y="479.50"></text></g><g><title>project1::solver::util::remove::{{closure}} (1 samples, 0.03%)</title><rect x="98.9542%" y="453" width="0.0308%" height="15" fill="rgb(247,98,14)" fg:x="3217" fg:w="1"/><text x="99.2042%" y="463.50"></text></g><g><title>&lt;project1::solver::watch_list::Watcher as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="98.9542%" y="437" width="0.0308%" height="15" fill="rgb(247,219,48)" fg:x="3217" fg:w="1"/><text x="99.2042%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_clause (3 samples, 0.09%)</title><rect x="98.9234%" y="517" width="0.0923%" height="15" fill="rgb(253,60,48)" fg:x="3216" fg:w="3"/><text x="99.1734%" y="527.50"></text></g><g><title>project1::solver::watch_list::WatchList::remove_watcher (3 samples, 0.09%)</title><rect x="98.9234%" y="501" width="0.0923%" height="15" fill="rgb(245,15,52)" fg:x="3216" fg:w="3"/><text x="99.1734%" y="511.50"></text></g><g><title>project1::solver::util::remove (3 samples, 0.09%)</title><rect x="98.9234%" y="485" width="0.0923%" height="15" fill="rgb(220,133,28)" fg:x="3216" fg:w="3"/><text x="99.1734%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="98.9849%" y="469" width="0.0308%" height="15" fill="rgb(217,180,4)" fg:x="3218" fg:w="1"/><text x="99.2349%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::simplify (4 samples, 0.12%)</title><rect x="98.9234%" y="549" width="0.1230%" height="15" fill="rgb(251,24,1)" fg:x="3216" fg:w="4"/><text x="99.1734%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_learnts (4 samples, 0.12%)</title><rect x="98.9234%" y="533" width="0.1230%" height="15" fill="rgb(212,185,49)" fg:x="3216" fg:w="4"/><text x="99.1734%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::satisfied (1 samples, 0.03%)</title><rect x="99.0157%" y="517" width="0.0308%" height="15" fill="rgb(215,175,22)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.03%)</title><rect x="99.0157%" y="501" width="0.0308%" height="15" fill="rgb(250,205,14)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::satisfied::{{closure}} (1 samples, 0.03%)</title><rect x="99.0157%" y="485" width="0.0308%" height="15" fill="rgb(225,211,22)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="495.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="99.0157%" y="469" width="0.0308%" height="15" fill="rgb(251,179,42)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="479.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="99.0157%" y="453" width="0.0308%" height="15" fill="rgb(208,216,51)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="463.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="99.0157%" y="437" width="0.0308%" height="15" fill="rgb(235,36,11)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="447.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="99.0157%" y="421" width="0.0308%" height="15" fill="rgb(213,189,28)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="431.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="99.0157%" y="405" width="0.0308%" height="15" fill="rgb(227,203,42)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="415.50"></text></g><g><title>pud_val (1 samples, 0.03%)</title><rect x="99.0157%" y="389" width="0.0308%" height="15" fill="rgb(244,72,36)" fg:x="3219" fg:w="1"/><text x="99.2657%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (3,203 samples, 98.52%)</title><rect x="0.7690%" y="565" width="98.5235%" height="15" fill="rgb(213,53,17)" fg:x="25" fg:w="3203"/><text x="1.0190%" y="575.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (8 samples, 0.25%)</title><rect x="99.0464%" y="549" width="0.2461%" height="15" fill="rgb(207,167,3)" fg:x="3220" fg:w="8"/><text x="99.2964%" y="559.50"></text></g><g><title>__clone3 (3,208 samples, 98.68%)</title><rect x="0.7075%" y="805" width="98.6773%" height="15" fill="rgb(216,98,30)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="815.50">__clone3</text></g><g><title>start_thread (3,208 samples, 98.68%)</title><rect x="0.7075%" y="789" width="98.6773%" height="15" fill="rgb(236,123,15)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="799.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,208 samples, 98.68%)</title><rect x="0.7075%" y="773" width="98.6773%" height="15" fill="rgb(248,81,50)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="783.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,208 samples, 98.68%)</title><rect x="0.7075%" y="757" width="98.6773%" height="15" fill="rgb(214,120,4)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,208 samples, 98.68%)</title><rect x="0.7075%" y="741" width="98.6773%" height="15" fill="rgb(208,179,34)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,208 samples, 98.68%)</title><rect x="0.7075%" y="725" width="98.6773%" height="15" fill="rgb(227,140,7)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,208 samples, 98.68%)</title><rect x="0.7075%" y="709" width="98.6773%" height="15" fill="rgb(214,22,6)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="719.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,208 samples, 98.68%)</title><rect x="0.7075%" y="693" width="98.6773%" height="15" fill="rgb(207,137,27)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,208 samples, 98.68%)</title><rect x="0.7075%" y="677" width="98.6773%" height="15" fill="rgb(210,8,46)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,208 samples, 98.68%)</title><rect x="0.7075%" y="661" width="98.6773%" height="15" fill="rgb(240,16,54)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,208 samples, 98.68%)</title><rect x="0.7075%" y="645" width="98.6773%" height="15" fill="rgb(211,209,29)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,208 samples, 98.68%)</title><rect x="0.7075%" y="629" width="98.6773%" height="15" fill="rgb(226,228,24)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,208 samples, 98.68%)</title><rect x="0.7075%" y="613" width="98.6773%" height="15" fill="rgb(222,84,9)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (3,208 samples, 98.68%)</title><rect x="0.7075%" y="597" width="98.6773%" height="15" fill="rgb(234,203,30)" fg:x="23" fg:w="3208"/><text x="0.9575%" y="607.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3,206 samples, 98.62%)</title><rect x="0.7690%" y="581" width="98.6158%" height="15" fill="rgb(238,109,14)" fg:x="25" fg:w="3206"/><text x="1.0190%" y="591.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3 samples, 0.09%)</title><rect x="99.2925%" y="565" width="0.0923%" height="15" fill="rgb(233,206,34)" fg:x="3228" fg:w="3"/><text x="99.5425%" y="575.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="99.3848%" y="805" width="0.0308%" height="15" fill="rgb(220,167,47)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="815.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.3848%" y="789" width="0.0308%" height="15" fill="rgb(238,105,10)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="799.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.3848%" y="773" width="0.0308%" height="15" fill="rgb(213,227,17)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="783.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.3848%" y="757" width="0.0308%" height="15" fill="rgb(217,132,38)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="767.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.3848%" y="741" width="0.0308%" height="15" fill="rgb(242,146,4)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="751.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.3848%" y="725" width="0.0308%" height="15" fill="rgb(212,61,9)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="735.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.3848%" y="709" width="0.0308%" height="15" fill="rgb(247,126,22)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="719.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.3848%" y="693" width="0.0308%" height="15" fill="rgb(220,196,2)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="703.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.3848%" y="677" width="0.0308%" height="15" fill="rgb(208,46,4)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="687.50"></text></g><g><title>open_path (1 samples, 0.03%)</title><rect x="99.3848%" y="661" width="0.0308%" height="15" fill="rgb(252,104,46)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="671.50"></text></g><g><title>open_verify (1 samples, 0.03%)</title><rect x="99.3848%" y="645" width="0.0308%" height="15" fill="rgb(237,152,48)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="655.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.03%)</title><rect x="99.3848%" y="629" width="0.0308%" height="15" fill="rgb(221,59,37)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.3848%" y="613" width="0.0308%" height="15" fill="rgb(209,202,51)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.3848%" y="597" width="0.0308%" height="15" fill="rgb(228,81,30)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="607.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.03%)</title><rect x="99.3848%" y="581" width="0.0308%" height="15" fill="rgb(227,42,39)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="591.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.03%)</title><rect x="99.3848%" y="565" width="0.0308%" height="15" fill="rgb(221,26,2)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="575.50"></text></g><g><title>do_filp_open (1 samples, 0.03%)</title><rect x="99.3848%" y="549" width="0.0308%" height="15" fill="rgb(254,61,31)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="559.50"></text></g><g><title>path_openat (1 samples, 0.03%)</title><rect x="99.3848%" y="533" width="0.0308%" height="15" fill="rgb(222,173,38)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="543.50"></text></g><g><title>link_path_walk.part.0.constprop.0 (1 samples, 0.03%)</title><rect x="99.3848%" y="517" width="0.0308%" height="15" fill="rgb(218,50,12)" fg:x="3231" fg:w="1"/><text x="99.6348%" y="527.50"></text></g><g><title>asm_exc_page_fault (7 samples, 0.22%)</title><rect x="99.4156%" y="805" width="0.2153%" height="15" fill="rgb(223,88,40)" fg:x="3232" fg:w="7"/><text x="99.6656%" y="815.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.6309%" y="773" width="0.0308%" height="15" fill="rgb(237,54,19)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="783.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.6309%" y="757" width="0.0308%" height="15" fill="rgb(251,129,25)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="767.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.6309%" y="741" width="0.0308%" height="15" fill="rgb(238,97,19)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="751.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="99.6309%" y="725" width="0.0308%" height="15" fill="rgb(240,169,18)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="735.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="99.6309%" y="709" width="0.0308%" height="15" fill="rgb(230,187,49)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="719.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="99.6309%" y="693" width="0.0308%" height="15" fill="rgb(209,44,26)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="703.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.6309%" y="677" width="0.0308%" height="15" fill="rgb(244,0,6)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="687.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="99.6309%" y="661" width="0.0308%" height="15" fill="rgb(248,18,21)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="671.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="99.6309%" y="645" width="0.0308%" height="15" fill="rgb(245,180,19)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="655.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="99.6309%" y="629" width="0.0308%" height="15" fill="rgb(252,118,36)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="639.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="99.6309%" y="613" width="0.0308%" height="15" fill="rgb(210,224,19)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="623.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="99.6309%" y="597" width="0.0308%" height="15" fill="rgb(218,30,24)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="607.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="99.6309%" y="581" width="0.0308%" height="15" fill="rgb(219,75,50)" fg:x="3239" fg:w="1"/><text x="99.8809%" y="591.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.03%)</title><rect x="99.6616%" y="709" width="0.0308%" height="15" fill="rgb(234,72,50)" fg:x="3240" fg:w="1"/><text x="99.9116%" y="719.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.09%)</title><rect x="99.6309%" y="805" width="0.0923%" height="15" fill="rgb(219,100,48)" fg:x="3239" fg:w="3"/><text x="99.8809%" y="815.50"></text></g><g><title>do_syscall_64 (3 samples, 0.09%)</title><rect x="99.6309%" y="789" width="0.0923%" height="15" fill="rgb(253,5,41)" fg:x="3239" fg:w="3"/><text x="99.8809%" y="799.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.06%)</title><rect x="99.6616%" y="773" width="0.0615%" height="15" fill="rgb(247,181,11)" fg:x="3240" fg:w="2"/><text x="99.9116%" y="783.50"></text></g><g><title>do_group_exit (2 samples, 0.06%)</title><rect x="99.6616%" y="757" width="0.0615%" height="15" fill="rgb(222,223,25)" fg:x="3240" fg:w="2"/><text x="99.9116%" y="767.50"></text></g><g><title>do_exit (2 samples, 0.06%)</title><rect x="99.6616%" y="741" width="0.0615%" height="15" fill="rgb(214,198,28)" fg:x="3240" fg:w="2"/><text x="99.9116%" y="751.50"></text></g><g><title>exit_mm (2 samples, 0.06%)</title><rect x="99.6616%" y="725" width="0.0615%" height="15" fill="rgb(230,46,43)" fg:x="3240" fg:w="2"/><text x="99.9116%" y="735.50"></text></g><g><title>mmput (1 samples, 0.03%)</title><rect x="99.6924%" y="709" width="0.0308%" height="15" fill="rgb(233,65,53)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="719.50"></text></g><g><title>exit_mmap (1 samples, 0.03%)</title><rect x="99.6924%" y="693" width="0.0308%" height="15" fill="rgb(221,121,27)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="703.50"></text></g><g><title>unmap_vmas (1 samples, 0.03%)</title><rect x="99.6924%" y="677" width="0.0308%" height="15" fill="rgb(247,70,47)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="687.50"></text></g><g><title>unmap_single_vma (1 samples, 0.03%)</title><rect x="99.6924%" y="661" width="0.0308%" height="15" fill="rgb(228,85,35)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="671.50"></text></g><g><title>unmap_page_range (1 samples, 0.03%)</title><rect x="99.6924%" y="645" width="0.0308%" height="15" fill="rgb(209,50,18)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="655.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="99.6924%" y="629" width="0.0308%" height="15" fill="rgb(250,19,35)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="639.50"></text></g><g><title>zap_pte_range (1 samples, 0.03%)</title><rect x="99.6924%" y="613" width="0.0308%" height="15" fill="rgb(253,107,29)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="623.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.03%)</title><rect x="99.6924%" y="597" width="0.0308%" height="15" fill="rgb(252,179,29)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="607.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="99.6924%" y="581" width="0.0308%" height="15" fill="rgb(238,194,6)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="591.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.03%)</title><rect x="99.6924%" y="565" width="0.0308%" height="15" fill="rgb(238,164,29)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="575.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="99.6924%" y="549" width="0.0308%" height="15" fill="rgb(224,25,9)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="559.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="99.6924%" y="533" width="0.0308%" height="15" fill="rgb(244,153,23)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="543.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.03%)</title><rect x="99.6924%" y="517" width="0.0308%" height="15" fill="rgb(212,203,14)" fg:x="3241" fg:w="1"/><text x="99.9424%" y="527.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (2 samples, 0.06%)</title><rect x="99.7232%" y="805" width="0.0615%" height="15" fill="rgb(220,164,20)" fg:x="3242" fg:w="2"/><text x="99.9732%" y="815.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.03%)</title><rect x="99.7847%" y="709" width="0.0308%" height="15" fill="rgb(222,203,48)" fg:x="3244" fg:w="1"/><text x="100.0347%" y="719.50"></text></g><g><title>all (3,251 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(215,159,22)" fg:x="0" fg:w="3251"/><text x="0.2500%" y="847.50"></text></g><g><title>project1 (3,245 samples, 99.82%)</title><rect x="0.1846%" y="821" width="99.8154%" height="15" fill="rgb(216,183,47)" fg:x="6" fg:w="3245"/><text x="0.4346%" y="831.50">project1</text></g><g><title>ret_from_fork (7 samples, 0.22%)</title><rect x="99.7847%" y="805" width="0.2153%" height="15" fill="rgb(229,195,25)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="815.50"></text></g><g><title>schedule_tail (7 samples, 0.22%)</title><rect x="99.7847%" y="789" width="0.2153%" height="15" fill="rgb(224,132,51)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="799.50"></text></g><g><title>finish_task_switch.isra.0 (7 samples, 0.22%)</title><rect x="99.7847%" y="773" width="0.2153%" height="15" fill="rgb(240,63,7)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="783.50"></text></g><g><title>__perf_event_task_sched_in (7 samples, 0.22%)</title><rect x="99.7847%" y="757" width="0.2153%" height="15" fill="rgb(249,182,41)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="767.50"></text></g><g><title>x86_pmu_enable (7 samples, 0.22%)</title><rect x="99.7847%" y="741" width="0.2153%" height="15" fill="rgb(243,47,26)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="751.50"></text></g><g><title>intel_tfa_pmu_enable_all (7 samples, 0.22%)</title><rect x="99.7847%" y="725" width="0.2153%" height="15" fill="rgb(233,48,2)" fg:x="3244" fg:w="7"/><text x="100.0347%" y="735.50"></text></g><g><title>native_write_msr (6 samples, 0.18%)</title><rect x="99.8154%" y="709" width="0.1846%" height="15" fill="rgb(244,165,34)" fg:x="3245" fg:w="6"/><text x="100.0654%" y="719.50"></text></g></svg></svg>