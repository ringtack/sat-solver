<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="388"><g><title>perf-exec (6 samples, 1.55%)</title><rect x="0.0000%" y="869" width="1.5464%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="879.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 1.55%)</title><rect x="0.0000%" y="853" width="1.5464%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="863.50"></text></g><g><title>do_syscall_64 (6 samples, 1.55%)</title><rect x="0.0000%" y="837" width="1.5464%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="847.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.55%)</title><rect x="0.0000%" y="821" width="1.5464%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 1.55%)</title><rect x="0.0000%" y="805" width="1.5464%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>bprm_execve (6 samples, 1.55%)</title><rect x="0.0000%" y="789" width="1.5464%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 1.55%)</title><rect x="0.0000%" y="773" width="1.5464%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>exec_binprm (6 samples, 1.55%)</title><rect x="0.0000%" y="757" width="1.5464%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>search_binary_handler (6 samples, 1.55%)</title><rect x="0.0000%" y="741" width="1.5464%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>load_elf_binary (6 samples, 1.55%)</title><rect x="0.0000%" y="725" width="1.5464%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>begin_new_exec (6 samples, 1.55%)</title><rect x="0.0000%" y="709" width="1.5464%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>perf_event_exec (6 samples, 1.55%)</title><rect x="0.0000%" y="693" width="1.5464%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>perf_event_enable_on_exec (6 samples, 1.55%)</title><rect x="0.0000%" y="677" width="1.5464%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>ctx_resched (6 samples, 1.55%)</title><rect x="0.0000%" y="661" width="1.5464%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>x86_pmu_enable (6 samples, 1.55%)</title><rect x="0.0000%" y="645" width="1.5464%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 1.55%)</title><rect x="0.0000%" y="629" width="1.5464%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>native_write_msr (6 samples, 1.55%)</title><rect x="0.0000%" y="613" width="1.5464%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.26%)</title><rect x="1.5464%" y="837" width="0.2577%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="1.7964%" y="847.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (1 samples, 0.26%)</title><rect x="1.5464%" y="821" width="0.2577%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="1.7964%" y="831.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.26%)</title><rect x="1.8041%" y="837" width="0.2577%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="2.0541%" y="847.50"></text></g><g><title>[unknown] (3 samples, 0.77%)</title><rect x="1.5464%" y="853" width="0.7732%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="3"/><text x="1.7964%" y="863.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.26%)</title><rect x="2.0619%" y="837" width="0.2577%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="2.3119%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::cdcl_solver::CDCLSolver&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="629" width="0.2577%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="2.5696%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::clause::ClauseAllocator&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="613" width="0.2577%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="2.5696%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;slotmap::basic::SlotMap&lt;project1::solver::clause::ClauseKey,project1::solver::clause::Clause&gt;&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="597" width="0.2577%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="2.5696%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;&gt;&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="581" width="0.2577%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="2.5696%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="2.3196%" y="565" width="0.2577%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="2.5696%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;]&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="549" width="0.2577%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="2.5696%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;slotmap::basic::Slot&lt;project1::solver::clause::Clause&gt;&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="533" width="0.2577%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="2.5696%" y="543.50"></text></g><g><title>&lt;slotmap::basic::Slot&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="2.3196%" y="517" width="0.2577%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="2.5696%" y="527.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (1 samples, 0.26%)</title><rect x="2.3196%" y="501" width="0.2577%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="2.5696%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;project1::solver::clause::Clause&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="485" width="0.2577%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="2.5696%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="469" width="0.2577%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="2.5696%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.26%)</title><rect x="2.3196%" y="453" width="0.2577%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="2.5696%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="2.3196%" y="437" width="0.2577%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="2.5696%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.26%)</title><rect x="2.3196%" y="421" width="0.2577%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="2.5696%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.26%)</title><rect x="2.3196%" y="405" width="0.2577%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="2.5696%" y="415.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.26%)</title><rect x="2.3196%" y="389" width="0.2577%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="2.5696%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.26%)</title><rect x="2.3196%" y="373" width="0.2577%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="2.5696%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.26%)</title><rect x="2.3196%" y="357" width="0.2577%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="2.5696%" y="367.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="2.3196%" y="341" width="0.2577%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="2.5696%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::new (1 samples, 0.26%)</title><rect x="2.5773%" y="629" width="0.2577%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="2.8273%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::init (1 samples, 0.26%)</title><rect x="2.5773%" y="613" width="0.2577%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="2.8273%" y="623.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_clause (1 samples, 0.26%)</title><rect x="2.5773%" y="597" width="0.2577%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="2.8273%" y="607.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (1 samples, 0.26%)</title><rect x="2.5773%" y="581" width="0.2577%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="2.8273%" y="591.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (1 samples, 0.26%)</title><rect x="2.5773%" y="565" width="0.2577%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="2.8273%" y="575.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (1 samples, 0.26%)</title><rect x="2.5773%" y="549" width="0.2577%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="2.8273%" y="559.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (1 samples, 0.26%)</title><rect x="2.5773%" y="533" width="0.2577%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="2.8273%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.26%)</title><rect x="2.5773%" y="517" width="0.2577%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="2.8273%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.26%)</title><rect x="2.5773%" y="501" width="0.2577%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="2.8273%" y="511.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="485" width="0.2577%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="2.8273%" y="495.50"></text></g><g><title>exc_page_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="469" width="0.2577%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="2.8273%" y="479.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="453" width="0.2577%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="2.8273%" y="463.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="437" width="0.2577%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="2.8273%" y="447.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="421" width="0.2577%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="1"/><text x="2.8273%" y="431.50"></text></g><g><title>handle_pte_fault (1 samples, 0.26%)</title><rect x="2.5773%" y="405" width="0.2577%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="1"/><text x="2.8273%" y="415.50"></text></g><g><title>do_anonymous_page (1 samples, 0.26%)</title><rect x="2.5773%" y="389" width="0.2577%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="1"/><text x="2.8273%" y="399.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.26%)</title><rect x="2.5773%" y="373" width="0.2577%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="1"/><text x="2.8273%" y="383.50"></text></g><g><title>__folio_alloc (1 samples, 0.26%)</title><rect x="2.5773%" y="357" width="0.2577%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="1"/><text x="2.8273%" y="367.50"></text></g><g><title>__alloc_pages (1 samples, 0.26%)</title><rect x="2.5773%" y="341" width="0.2577%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="1"/><text x="2.8273%" y="351.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.26%)</title><rect x="2.5773%" y="325" width="0.2577%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="1"/><text x="2.8273%" y="335.50"></text></g><g><title>rmqueue (1 samples, 0.26%)</title><rect x="2.5773%" y="309" width="0.2577%" height="15" fill="rgb(221,10,30)" fg:x="10" fg:w="1"/><text x="2.8273%" y="319.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.26%)</title><rect x="2.5773%" y="293" width="0.2577%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="1"/><text x="2.8273%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.26%)</title><rect x="4.3814%" y="581" width="0.2577%" height="15" fill="rgb(222,148,37)" fg:x="17" fg:w="1"/><text x="4.6314%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.26%)</title><rect x="4.6392%" y="581" width="0.2577%" height="15" fill="rgb(234,67,33)" fg:x="18" fg:w="1"/><text x="4.8892%" y="591.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.26%)</title><rect x="4.6392%" y="565" width="0.2577%" height="15" fill="rgb(247,98,35)" fg:x="18" fg:w="1"/><text x="4.8892%" y="575.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.26%)</title><rect x="4.6392%" y="549" width="0.2577%" height="15" fill="rgb(247,138,52)" fg:x="18" fg:w="1"/><text x="4.8892%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.52%)</title><rect x="4.8969%" y="581" width="0.5155%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="2"/><text x="5.1469%" y="591.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.26%)</title><rect x="5.1546%" y="565" width="0.2577%" height="15" fill="rgb(246,177,23)" fg:x="20" fg:w="1"/><text x="5.4046%" y="575.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.26%)</title><rect x="5.4124%" y="581" width="0.2577%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="1"/><text x="5.6624%" y="591.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.26%)</title><rect x="5.4124%" y="565" width="0.2577%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="5.6624%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.26%)</title><rect x="5.4124%" y="549" width="0.2577%" height="15" fill="rgb(244,35,45)" fg:x="21" fg:w="1"/><text x="5.6624%" y="559.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1 samples, 0.26%)</title><rect x="5.4124%" y="533" width="0.2577%" height="15" fill="rgb(251,115,12)" fg:x="21" fg:w="1"/><text x="5.6624%" y="543.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.26%)</title><rect x="5.9278%" y="261" width="0.2577%" height="15" fill="rgb(240,54,50)" fg:x="23" fg:w="1"/><text x="6.1778%" y="271.50"></text></g><g><title>charge_memcg (1 samples, 0.26%)</title><rect x="5.9278%" y="245" width="0.2577%" height="15" fill="rgb(233,84,52)" fg:x="23" fg:w="1"/><text x="6.1778%" y="255.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="373" width="0.5155%" height="15" fill="rgb(207,117,47)" fg:x="23" fg:w="2"/><text x="6.1778%" y="383.50"></text></g><g><title>exc_page_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="357" width="0.5155%" height="15" fill="rgb(249,43,39)" fg:x="23" fg:w="2"/><text x="6.1778%" y="367.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="341" width="0.5155%" height="15" fill="rgb(209,38,44)" fg:x="23" fg:w="2"/><text x="6.1778%" y="351.50"></text></g><g><title>handle_mm_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="325" width="0.5155%" height="15" fill="rgb(236,212,23)" fg:x="23" fg:w="2"/><text x="6.1778%" y="335.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="309" width="0.5155%" height="15" fill="rgb(242,79,21)" fg:x="23" fg:w="2"/><text x="6.1778%" y="319.50"></text></g><g><title>handle_pte_fault (2 samples, 0.52%)</title><rect x="5.9278%" y="293" width="0.5155%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="2"/><text x="6.1778%" y="303.50"></text></g><g><title>do_anonymous_page (2 samples, 0.52%)</title><rect x="5.9278%" y="277" width="0.5155%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="2"/><text x="6.1778%" y="287.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.26%)</title><rect x="6.1856%" y="261" width="0.2577%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="1"/><text x="6.4356%" y="271.50"></text></g><g><title>__folio_alloc (1 samples, 0.26%)</title><rect x="6.1856%" y="245" width="0.2577%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="1"/><text x="6.4356%" y="255.50"></text></g><g><title>__alloc_pages (1 samples, 0.26%)</title><rect x="6.1856%" y="229" width="0.2577%" height="15" fill="rgb(235,213,38)" fg:x="24" fg:w="1"/><text x="6.4356%" y="239.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.26%)</title><rect x="6.1856%" y="213" width="0.2577%" height="15" fill="rgb(237,122,38)" fg:x="24" fg:w="1"/><text x="6.4356%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.77%)</title><rect x="5.9278%" y="565" width="0.7732%" height="15" fill="rgb(244,218,35)" fg:x="23" fg:w="3"/><text x="6.1778%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.77%)</title><rect x="5.9278%" y="549" width="0.7732%" height="15" fill="rgb(240,68,47)" fg:x="23" fg:w="3"/><text x="6.1778%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.77%)</title><rect x="5.9278%" y="533" width="0.7732%" height="15" fill="rgb(210,16,53)" fg:x="23" fg:w="3"/><text x="6.1778%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.77%)</title><rect x="5.9278%" y="517" width="0.7732%" height="15" fill="rgb(235,124,12)" fg:x="23" fg:w="3"/><text x="6.1778%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.77%)</title><rect x="5.9278%" y="501" width="0.7732%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="3"/><text x="6.1778%" y="511.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.77%)</title><rect x="5.9278%" y="485" width="0.7732%" height="15" fill="rgb(250,166,2)" fg:x="23" fg:w="3"/><text x="6.1778%" y="495.50"></text></g><g><title>__rdl_realloc (3 samples, 0.77%)</title><rect x="5.9278%" y="469" width="0.7732%" height="15" fill="rgb(242,216,29)" fg:x="23" fg:w="3"/><text x="6.1778%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.77%)</title><rect x="5.9278%" y="453" width="0.7732%" height="15" fill="rgb(230,116,27)" fg:x="23" fg:w="3"/><text x="6.1778%" y="463.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.77%)</title><rect x="5.9278%" y="437" width="0.7732%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="3"/><text x="6.1778%" y="447.50"></text></g><g><title>_int_realloc (3 samples, 0.77%)</title><rect x="5.9278%" y="421" width="0.7732%" height="15" fill="rgb(253,11,6)" fg:x="23" fg:w="3"/><text x="6.1778%" y="431.50"></text></g><g><title>_int_malloc (3 samples, 0.77%)</title><rect x="5.9278%" y="405" width="0.7732%" height="15" fill="rgb(247,143,39)" fg:x="23" fg:w="3"/><text x="6.1778%" y="415.50"></text></g><g><title>sysmalloc (3 samples, 0.77%)</title><rect x="5.9278%" y="389" width="0.7732%" height="15" fill="rgb(236,97,10)" fg:x="23" fg:w="3"/><text x="6.1778%" y="399.50"></text></g><g><title>grow_heap (1 samples, 0.26%)</title><rect x="6.4433%" y="373" width="0.2577%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="1"/><text x="6.6933%" y="383.50"></text></g><g><title>__GI___mprotect (1 samples, 0.26%)</title><rect x="6.4433%" y="357" width="0.2577%" height="15" fill="rgb(216,164,2)" fg:x="25" fg:w="1"/><text x="6.6933%" y="367.50"></text></g><g><title>error_entry (1 samples, 0.26%)</title><rect x="6.4433%" y="341" width="0.2577%" height="15" fill="rgb(220,129,5)" fg:x="25" fg:w="1"/><text x="6.6933%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 2.06%)</title><rect x="5.6701%" y="581" width="2.0619%" height="15" fill="rgb(242,17,10)" fg:x="22" fg:w="8"/><text x="5.9201%" y="591.50">a..</text></g><g><title>core::ptr::write (4 samples, 1.03%)</title><rect x="6.7010%" y="565" width="1.0309%" height="15" fill="rgb(242,107,0)" fg:x="26" fg:w="4"/><text x="6.9510%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.26%)</title><rect x="7.7320%" y="581" width="0.2577%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="1"/><text x="7.9820%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.26%)</title><rect x="7.7320%" y="565" width="0.2577%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="1"/><text x="7.9820%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.77%)</title><rect x="7.9897%" y="581" width="0.7732%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="3"/><text x="8.2397%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.77%)</title><rect x="7.9897%" y="565" width="0.7732%" height="15" fill="rgb(232,23,21)" fg:x="31" fg:w="3"/><text x="8.2397%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.77%)</title><rect x="7.9897%" y="549" width="0.7732%" height="15" fill="rgb(244,5,23)" fg:x="31" fg:w="3"/><text x="8.2397%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.77%)</title><rect x="7.9897%" y="533" width="0.7732%" height="15" fill="rgb(226,81,46)" fg:x="31" fg:w="3"/><text x="8.2397%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.77%)</title><rect x="7.9897%" y="517" width="0.7732%" height="15" fill="rgb(247,70,30)" fg:x="31" fg:w="3"/><text x="8.2397%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.77%)</title><rect x="7.9897%" y="501" width="0.7732%" height="15" fill="rgb(212,68,19)" fg:x="31" fg:w="3"/><text x="8.2397%" y="511.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.77%)</title><rect x="7.9897%" y="485" width="0.7732%" height="15" fill="rgb(240,187,13)" fg:x="31" fg:w="3"/><text x="8.2397%" y="495.50"></text></g><g><title>__rdl_alloc (3 samples, 0.77%)</title><rect x="7.9897%" y="469" width="0.7732%" height="15" fill="rgb(223,113,26)" fg:x="31" fg:w="3"/><text x="8.2397%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.77%)</title><rect x="7.9897%" y="453" width="0.7732%" height="15" fill="rgb(206,192,2)" fg:x="31" fg:w="3"/><text x="8.2397%" y="463.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.52%)</title><rect x="8.2474%" y="437" width="0.5155%" height="15" fill="rgb(241,108,4)" fg:x="32" fg:w="2"/><text x="8.4974%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (1 samples, 0.26%)</title><rect x="8.7629%" y="581" width="0.2577%" height="15" fill="rgb(247,173,49)" fg:x="34" fg:w="1"/><text x="9.0129%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (1 samples, 0.26%)</title><rect x="8.7629%" y="565" width="0.2577%" height="15" fill="rgb(224,114,35)" fg:x="34" fg:w="1"/><text x="9.0129%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.26%)</title><rect x="8.7629%" y="549" width="0.2577%" height="15" fill="rgb(245,159,27)" fg:x="34" fg:w="1"/><text x="9.0129%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.26%)</title><rect x="8.7629%" y="533" width="0.2577%" height="15" fill="rgb(245,172,44)" fg:x="34" fg:w="1"/><text x="9.0129%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.26%)</title><rect x="8.7629%" y="517" width="0.2577%" height="15" fill="rgb(236,23,11)" fg:x="34" fg:w="1"/><text x="9.0129%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (1 samples, 0.26%)</title><rect x="8.7629%" y="501" width="0.2577%" height="15" fill="rgb(205,117,38)" fg:x="34" fg:w="1"/><text x="9.0129%" y="511.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.26%)</title><rect x="8.7629%" y="485" width="0.2577%" height="15" fill="rgb(237,72,25)" fg:x="34" fg:w="1"/><text x="9.0129%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.26%)</title><rect x="9.0206%" y="581" width="0.2577%" height="15" fill="rgb(244,70,9)" fg:x="35" fg:w="1"/><text x="9.2706%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (1 samples, 0.26%)</title><rect x="9.0206%" y="565" width="0.2577%" height="15" fill="rgb(217,125,39)" fg:x="35" fg:w="1"/><text x="9.2706%" y="575.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.26%)</title><rect x="9.0206%" y="549" width="0.2577%" height="15" fill="rgb(235,36,10)" fg:x="35" fg:w="1"/><text x="9.2706%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.26%)</title><rect x="9.0206%" y="533" width="0.2577%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="1"/><text x="9.2706%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.26%)</title><rect x="9.0206%" y="517" width="0.2577%" height="15" fill="rgb(221,13,13)" fg:x="35" fg:w="1"/><text x="9.2706%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.26%)</title><rect x="9.0206%" y="501" width="0.2577%" height="15" fill="rgb(238,131,9)" fg:x="35" fg:w="1"/><text x="9.2706%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.26%)</title><rect x="9.0206%" y="485" width="0.2577%" height="15" fill="rgb(211,50,8)" fg:x="35" fg:w="1"/><text x="9.2706%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.26%)</title><rect x="9.0206%" y="469" width="0.2577%" height="15" fill="rgb(245,182,24)" fg:x="35" fg:w="1"/><text x="9.2706%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.26%)</title><rect x="9.2784%" y="581" width="0.2577%" height="15" fill="rgb(242,14,37)" fg:x="36" fg:w="1"/><text x="9.5284%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.26%)</title><rect x="9.2784%" y="565" width="0.2577%" height="15" fill="rgb(246,228,12)" fg:x="36" fg:w="1"/><text x="9.5284%" y="575.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.26%)</title><rect x="9.2784%" y="549" width="0.2577%" height="15" fill="rgb(213,55,15)" fg:x="36" fg:w="1"/><text x="9.5284%" y="559.50"></text></g><g><title>log::max_level (1 samples, 0.26%)</title><rect x="9.5361%" y="581" width="0.2577%" height="15" fill="rgb(209,9,3)" fg:x="37" fg:w="1"/><text x="9.7861%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.26%)</title><rect x="9.5361%" y="565" width="0.2577%" height="15" fill="rgb(230,59,30)" fg:x="37" fg:w="1"/><text x="9.7861%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.26%)</title><rect x="9.5361%" y="549" width="0.2577%" height="15" fill="rgb(209,121,21)" fg:x="37" fg:w="1"/><text x="9.7861%" y="559.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2 samples, 0.52%)</title><rect x="10.0515%" y="565" width="0.5155%" height="15" fill="rgb(220,109,13)" fg:x="39" fg:w="2"/><text x="10.3015%" y="575.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.52%)</title><rect x="10.0515%" y="549" width="0.5155%" height="15" fill="rgb(232,18,1)" fg:x="39" fg:w="2"/><text x="10.3015%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.26%)</title><rect x="10.5670%" y="517" width="0.2577%" height="15" fill="rgb(215,41,42)" fg:x="41" fg:w="1"/><text x="10.8170%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.26%)</title><rect x="10.5670%" y="501" width="0.2577%" height="15" fill="rgb(224,123,36)" fg:x="41" fg:w="1"/><text x="10.8170%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.26%)</title><rect x="10.5670%" y="485" width="0.2577%" height="15" fill="rgb(240,125,3)" fg:x="41" fg:w="1"/><text x="10.8170%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.26%)</title><rect x="10.5670%" y="469" width="0.2577%" height="15" fill="rgb(205,98,50)" fg:x="41" fg:w="1"/><text x="10.8170%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="10.5670%" y="453" width="0.2577%" height="15" fill="rgb(205,185,37)" fg:x="41" fg:w="1"/><text x="10.8170%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.26%)</title><rect x="10.5670%" y="437" width="0.2577%" height="15" fill="rgb(238,207,15)" fg:x="41" fg:w="1"/><text x="10.8170%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="10.5670%" y="421" width="0.2577%" height="15" fill="rgb(213,199,42)" fg:x="41" fg:w="1"/><text x="10.8170%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="10.5670%" y="405" width="0.2577%" height="15" fill="rgb(235,201,11)" fg:x="41" fg:w="1"/><text x="10.8170%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="10.5670%" y="389" width="0.2577%" height="15" fill="rgb(207,46,11)" fg:x="41" fg:w="1"/><text x="10.8170%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.26%)</title><rect x="10.5670%" y="373" width="0.2577%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="1"/><text x="10.8170%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="10.5670%" y="357" width="0.2577%" height="15" fill="rgb(243,32,47)" fg:x="41" fg:w="1"/><text x="10.8170%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.77%)</title><rect x="10.8247%" y="453" width="0.7732%" height="15" fill="rgb(247,202,23)" fg:x="42" fg:w="3"/><text x="11.0747%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="11.5979%" y="405" width="0.2577%" height="15" fill="rgb(219,102,11)" fg:x="45" fg:w="1"/><text x="11.8479%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.26%)</title><rect x="11.5979%" y="389" width="0.2577%" height="15" fill="rgb(243,110,44)" fg:x="45" fg:w="1"/><text x="11.8479%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.26%)</title><rect x="11.5979%" y="373" width="0.2577%" height="15" fill="rgb(222,74,54)" fg:x="45" fg:w="1"/><text x="11.8479%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.26%)</title><rect x="11.5979%" y="357" width="0.2577%" height="15" fill="rgb(216,99,12)" fg:x="45" fg:w="1"/><text x="11.8479%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.26%)</title><rect x="11.5979%" y="341" width="0.2577%" height="15" fill="rgb(226,22,26)" fg:x="45" fg:w="1"/><text x="11.8479%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.26%)</title><rect x="11.5979%" y="325" width="0.2577%" height="15" fill="rgb(217,163,10)" fg:x="45" fg:w="1"/><text x="11.8479%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="11.5979%" y="309" width="0.2577%" height="15" fill="rgb(213,25,53)" fg:x="45" fg:w="1"/><text x="11.8479%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="11.5979%" y="293" width="0.2577%" height="15" fill="rgb(252,105,26)" fg:x="45" fg:w="1"/><text x="11.8479%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="11.5979%" y="277" width="0.2577%" height="15" fill="rgb(220,39,43)" fg:x="45" fg:w="1"/><text x="11.8479%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="11.5979%" y="261" width="0.2577%" height="15" fill="rgb(229,68,48)" fg:x="45" fg:w="1"/><text x="11.8479%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.26%)</title><rect x="11.5979%" y="245" width="0.2577%" height="15" fill="rgb(252,8,32)" fg:x="45" fg:w="1"/><text x="11.8479%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.26%)</title><rect x="11.8557%" y="357" width="0.2577%" height="15" fill="rgb(223,20,43)" fg:x="46" fg:w="1"/><text x="12.1057%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (7 samples, 1.80%)</title><rect x="10.8247%" y="517" width="1.8041%" height="15" fill="rgb(229,81,49)" fg:x="42" fg:w="7"/><text x="11.0747%" y="527.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (7 samples, 1.80%)</title><rect x="10.8247%" y="501" width="1.8041%" height="15" fill="rgb(236,28,36)" fg:x="42" fg:w="7"/><text x="11.0747%" y="511.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (7 samples, 1.80%)</title><rect x="10.8247%" y="485" width="1.8041%" height="15" fill="rgb(249,185,26)" fg:x="42" fg:w="7"/><text x="11.0747%" y="495.50">c..</text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 1.80%)</title><rect x="10.8247%" y="469" width="1.8041%" height="15" fill="rgb(249,174,33)" fg:x="42" fg:w="7"/><text x="11.0747%" y="479.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 1.03%)</title><rect x="11.5979%" y="453" width="1.0309%" height="15" fill="rgb(233,201,37)" fg:x="45" fg:w="4"/><text x="11.8479%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 1.03%)</title><rect x="11.5979%" y="437" width="1.0309%" height="15" fill="rgb(221,78,26)" fg:x="45" fg:w="4"/><text x="11.8479%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 1.03%)</title><rect x="11.5979%" y="421" width="1.0309%" height="15" fill="rgb(250,127,30)" fg:x="45" fg:w="4"/><text x="11.8479%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.77%)</title><rect x="11.8557%" y="405" width="0.7732%" height="15" fill="rgb(230,49,44)" fg:x="46" fg:w="3"/><text x="12.1057%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.77%)</title><rect x="11.8557%" y="389" width="0.7732%" height="15" fill="rgb(229,67,23)" fg:x="46" fg:w="3"/><text x="12.1057%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.77%)</title><rect x="11.8557%" y="373" width="0.7732%" height="15" fill="rgb(249,83,47)" fg:x="46" fg:w="3"/><text x="12.1057%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.52%)</title><rect x="12.1134%" y="357" width="0.5155%" height="15" fill="rgb(215,43,3)" fg:x="47" fg:w="2"/><text x="12.3634%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.52%)</title><rect x="12.1134%" y="341" width="0.5155%" height="15" fill="rgb(238,154,13)" fg:x="47" fg:w="2"/><text x="12.3634%" y="351.50"></text></g><g><title>compare::Compare::compares_le (1 samples, 0.26%)</title><rect x="12.6289%" y="501" width="0.2577%" height="15" fill="rgb(219,56,2)" fg:x="49" fg:w="1"/><text x="12.8789%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (1 samples, 0.26%)</title><rect x="12.6289%" y="485" width="0.2577%" height="15" fill="rgb(233,0,4)" fg:x="49" fg:w="1"/><text x="12.8789%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.26%)</title><rect x="12.6289%" y="469" width="0.2577%" height="15" fill="rgb(235,30,7)" fg:x="49" fg:w="1"/><text x="12.8789%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.26%)</title><rect x="12.8866%" y="421" width="0.2577%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="1"/><text x="13.1366%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.26%)</title><rect x="12.8866%" y="405" width="0.2577%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="1"/><text x="13.1366%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="12.8866%" y="389" width="0.2577%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="1"/><text x="13.1366%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="12.8866%" y="373" width="0.2577%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="1"/><text x="13.1366%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="12.8866%" y="357" width="0.2577%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="1"/><text x="13.1366%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.26%)</title><rect x="12.8866%" y="341" width="0.2577%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="1"/><text x="13.1366%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="12.8866%" y="325" width="0.2577%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="1"/><text x="13.1366%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.26%)</title><rect x="13.1443%" y="373" width="0.2577%" height="15" fill="rgb(234,103,6)" fg:x="51" fg:w="1"/><text x="13.3943%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.26%)</title><rect x="13.1443%" y="357" width="0.2577%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="1"/><text x="13.3943%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.26%)</title><rect x="13.1443%" y="341" width="0.2577%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="1"/><text x="13.3943%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.26%)</title><rect x="13.1443%" y="325" width="0.2577%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="1"/><text x="13.3943%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.26%)</title><rect x="13.1443%" y="309" width="0.2577%" height="15" fill="rgb(222,22,37)" fg:x="51" fg:w="1"/><text x="13.3943%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (13 samples, 3.35%)</title><rect x="10.5670%" y="565" width="3.3505%" height="15" fill="rgb(237,53,32)" fg:x="41" fg:w="13"/><text x="10.8170%" y="575.50">cor..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 3.35%)</title><rect x="10.5670%" y="549" width="3.3505%" height="15" fill="rgb(233,25,53)" fg:x="41" fg:w="13"/><text x="10.8170%" y="559.50">&lt;mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (13 samples, 3.35%)</title><rect x="10.5670%" y="533" width="3.3505%" height="15" fill="rgb(210,40,34)" fg:x="41" fg:w="13"/><text x="10.8170%" y="543.50">mut..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (5 samples, 1.29%)</title><rect x="12.6289%" y="517" width="1.2887%" height="15" fill="rgb(241,220,44)" fg:x="49" fg:w="5"/><text x="12.8789%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (4 samples, 1.03%)</title><rect x="12.8866%" y="501" width="1.0309%" height="15" fill="rgb(235,28,35)" fg:x="50" fg:w="4"/><text x="13.1366%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.03%)</title><rect x="12.8866%" y="485" width="1.0309%" height="15" fill="rgb(210,56,17)" fg:x="50" fg:w="4"/><text x="13.1366%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 1.03%)</title><rect x="12.8866%" y="469" width="1.0309%" height="15" fill="rgb(224,130,29)" fg:x="50" fg:w="4"/><text x="13.1366%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 1.03%)</title><rect x="12.8866%" y="453" width="1.0309%" height="15" fill="rgb(235,212,8)" fg:x="50" fg:w="4"/><text x="13.1366%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 1.03%)</title><rect x="12.8866%" y="437" width="1.0309%" height="15" fill="rgb(223,33,50)" fg:x="50" fg:w="4"/><text x="13.1366%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 0.77%)</title><rect x="13.1443%" y="421" width="0.7732%" height="15" fill="rgb(219,149,13)" fg:x="51" fg:w="3"/><text x="13.3943%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.77%)</title><rect x="13.1443%" y="405" width="0.7732%" height="15" fill="rgb(250,156,29)" fg:x="51" fg:w="3"/><text x="13.3943%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.77%)</title><rect x="13.1443%" y="389" width="0.7732%" height="15" fill="rgb(216,193,19)" fg:x="51" fg:w="3"/><text x="13.3943%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.52%)</title><rect x="13.4021%" y="373" width="0.5155%" height="15" fill="rgb(216,135,14)" fg:x="52" fg:w="2"/><text x="13.6521%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.52%)</title><rect x="13.4021%" y="357" width="0.5155%" height="15" fill="rgb(241,47,5)" fg:x="52" fg:w="2"/><text x="13.6521%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.52%)</title><rect x="13.4021%" y="341" width="0.5155%" height="15" fill="rgb(233,42,35)" fg:x="52" fg:w="2"/><text x="13.6521%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="13.9175%" y="469" width="0.5155%" height="15" fill="rgb(231,13,6)" fg:x="54" fg:w="2"/><text x="14.1675%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="13.9175%" y="453" width="0.5155%" height="15" fill="rgb(207,181,40)" fg:x="54" fg:w="2"/><text x="14.1675%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="13.9175%" y="437" width="0.5155%" height="15" fill="rgb(254,173,49)" fg:x="54" fg:w="2"/><text x="14.1675%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.52%)</title><rect x="13.9175%" y="421" width="0.5155%" height="15" fill="rgb(221,1,38)" fg:x="54" fg:w="2"/><text x="14.1675%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.52%)</title><rect x="13.9175%" y="405" width="0.5155%" height="15" fill="rgb(206,124,46)" fg:x="54" fg:w="2"/><text x="14.1675%" y="415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.26%)</title><rect x="14.4330%" y="469" width="0.2577%" height="15" fill="rgb(249,21,11)" fg:x="56" fg:w="1"/><text x="14.6830%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 1.29%)</title><rect x="13.9175%" y="501" width="1.2887%" height="15" fill="rgb(222,201,40)" fg:x="54" fg:w="5"/><text x="14.1675%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 1.29%)</title><rect x="13.9175%" y="485" width="1.2887%" height="15" fill="rgb(235,61,29)" fg:x="54" fg:w="5"/><text x="14.1675%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.52%)</title><rect x="14.6907%" y="469" width="0.5155%" height="15" fill="rgb(219,207,3)" fg:x="57" fg:w="2"/><text x="14.9407%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.52%)</title><rect x="14.6907%" y="453" width="0.5155%" height="15" fill="rgb(222,56,46)" fg:x="57" fg:w="2"/><text x="14.9407%" y="463.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.52%)</title><rect x="14.6907%" y="437" width="0.5155%" height="15" fill="rgb(239,76,54)" fg:x="57" fg:w="2"/><text x="14.9407%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.52%)</title><rect x="14.6907%" y="421" width="0.5155%" height="15" fill="rgb(231,124,27)" fg:x="57" fg:w="2"/><text x="14.9407%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="14.6907%" y="405" width="0.5155%" height="15" fill="rgb(249,195,6)" fg:x="57" fg:w="2"/><text x="14.9407%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="14.6907%" y="389" width="0.5155%" height="15" fill="rgb(237,174,47)" fg:x="57" fg:w="2"/><text x="14.9407%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="14.6907%" y="373" width="0.5155%" height="15" fill="rgb(206,201,31)" fg:x="57" fg:w="2"/><text x="14.9407%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="14.9485%" y="357" width="0.2577%" height="15" fill="rgb(231,57,52)" fg:x="58" fg:w="1"/><text x="15.1985%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="14.9485%" y="341" width="0.2577%" height="15" fill="rgb(248,177,22)" fg:x="58" fg:w="1"/><text x="15.1985%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.77%)</title><rect x="15.2062%" y="453" width="0.7732%" height="15" fill="rgb(215,211,37)" fg:x="59" fg:w="3"/><text x="15.4562%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.77%)</title><rect x="15.2062%" y="437" width="0.7732%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="3"/><text x="15.4562%" y="447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.77%)</title><rect x="15.2062%" y="421" width="0.7732%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="3"/><text x="15.4562%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.77%)</title><rect x="15.2062%" y="405" width="0.7732%" height="15" fill="rgb(228,167,24)" fg:x="59" fg:w="3"/><text x="15.4562%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.77%)</title><rect x="15.2062%" y="389" width="0.7732%" height="15" fill="rgb(228,143,12)" fg:x="59" fg:w="3"/><text x="15.4562%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.26%)</title><rect x="15.9794%" y="453" width="0.2577%" height="15" fill="rgb(249,149,8)" fg:x="62" fg:w="1"/><text x="16.2294%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.52%)</title><rect x="16.2371%" y="453" width="0.5155%" height="15" fill="rgb(243,35,44)" fg:x="63" fg:w="2"/><text x="16.4871%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.52%)</title><rect x="16.2371%" y="437" width="0.5155%" height="15" fill="rgb(246,89,9)" fg:x="63" fg:w="2"/><text x="16.4871%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (28 samples, 7.22%)</title><rect x="9.7938%" y="581" width="7.2165%" height="15" fill="rgb(233,213,13)" fg:x="38" fg:w="28"/><text x="10.0438%" y="591.50">project1::..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (12 samples, 3.09%)</title><rect x="13.9175%" y="565" width="3.0928%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="12"/><text x="14.1675%" y="575.50">mut..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (12 samples, 3.09%)</title><rect x="13.9175%" y="549" width="3.0928%" height="15" fill="rgb(239,167,4)" fg:x="54" fg:w="12"/><text x="14.1675%" y="559.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (12 samples, 3.09%)</title><rect x="13.9175%" y="533" width="3.0928%" height="15" fill="rgb(209,217,16)" fg:x="54" fg:w="12"/><text x="14.1675%" y="543.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 3.09%)</title><rect x="13.9175%" y="517" width="3.0928%" height="15" fill="rgb(219,88,35)" fg:x="54" fg:w="12"/><text x="14.1675%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 1.80%)</title><rect x="15.2062%" y="501" width="1.8041%" height="15" fill="rgb(220,193,23)" fg:x="59" fg:w="7"/><text x="15.4562%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 1.80%)</title><rect x="15.2062%" y="485" width="1.8041%" height="15" fill="rgb(230,90,52)" fg:x="59" fg:w="7"/><text x="15.4562%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 1.80%)</title><rect x="15.2062%" y="469" width="1.8041%" height="15" fill="rgb(252,106,19)" fg:x="59" fg:w="7"/><text x="15.4562%" y="479.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.26%)</title><rect x="16.7526%" y="453" width="0.2577%" height="15" fill="rgb(206,74,20)" fg:x="65" fg:w="1"/><text x="17.0026%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.26%)</title><rect x="16.7526%" y="437" width="0.2577%" height="15" fill="rgb(230,138,44)" fg:x="65" fg:w="1"/><text x="17.0026%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.26%)</title><rect x="16.7526%" y="421" width="0.2577%" height="15" fill="rgb(235,182,43)" fg:x="65" fg:w="1"/><text x="17.0026%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.52%)</title><rect x="17.5258%" y="485" width="0.5155%" height="15" fill="rgb(242,16,51)" fg:x="68" fg:w="2"/><text x="17.7758%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.52%)</title><rect x="17.5258%" y="469" width="0.5155%" height="15" fill="rgb(248,9,4)" fg:x="68" fg:w="2"/><text x="17.7758%" y="479.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.26%)</title><rect x="19.0722%" y="437" width="0.2577%" height="15" fill="rgb(210,31,22)" fg:x="74" fg:w="1"/><text x="19.3222%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.52%)</title><rect x="19.0722%" y="469" width="0.5155%" height="15" fill="rgb(239,54,39)" fg:x="74" fg:w="2"/><text x="19.3222%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.52%)</title><rect x="19.0722%" y="453" width="0.5155%" height="15" fill="rgb(230,99,41)" fg:x="74" fg:w="2"/><text x="19.3222%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.26%)</title><rect x="19.3299%" y="437" width="0.2577%" height="15" fill="rgb(253,106,12)" fg:x="75" fg:w="1"/><text x="19.5799%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (11 samples, 2.84%)</title><rect x="17.0103%" y="581" width="2.8351%" height="15" fill="rgb(213,46,41)" fg:x="66" fg:w="11"/><text x="17.2603%" y="591.50">pr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (11 samples, 2.84%)</title><rect x="17.0103%" y="565" width="2.8351%" height="15" fill="rgb(215,133,35)" fg:x="66" fg:w="11"/><text x="17.2603%" y="575.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (11 samples, 2.84%)</title><rect x="17.0103%" y="549" width="2.8351%" height="15" fill="rgb(213,28,5)" fg:x="66" fg:w="11"/><text x="17.2603%" y="559.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (11 samples, 2.84%)</title><rect x="17.0103%" y="533" width="2.8351%" height="15" fill="rgb(215,77,49)" fg:x="66" fg:w="11"/><text x="17.2603%" y="543.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (10 samples, 2.58%)</title><rect x="17.2680%" y="517" width="2.5773%" height="15" fill="rgb(248,100,22)" fg:x="67" fg:w="10"/><text x="17.5180%" y="527.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (10 samples, 2.58%)</title><rect x="17.2680%" y="501" width="2.5773%" height="15" fill="rgb(208,67,9)" fg:x="67" fg:w="10"/><text x="17.5180%" y="511.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (7 samples, 1.80%)</title><rect x="18.0412%" y="485" width="1.8041%" height="15" fill="rgb(219,133,21)" fg:x="70" fg:w="7"/><text x="18.2912%" y="495.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (1 samples, 0.26%)</title><rect x="19.5876%" y="469" width="0.2577%" height="15" fill="rgb(246,46,29)" fg:x="76" fg:w="1"/><text x="19.8376%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.26%)</title><rect x="19.5876%" y="453" width="0.2577%" height="15" fill="rgb(246,185,52)" fg:x="76" fg:w="1"/><text x="19.8376%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.26%)</title><rect x="19.5876%" y="437" width="0.2577%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="1"/><text x="19.8376%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.26%)</title><rect x="19.5876%" y="421" width="0.2577%" height="15" fill="rgb(219,138,53)" fg:x="76" fg:w="1"/><text x="19.8376%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.26%)</title><rect x="19.5876%" y="405" width="0.2577%" height="15" fill="rgb(211,51,23)" fg:x="76" fg:w="1"/><text x="19.8376%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (5 samples, 1.29%)</title><rect x="19.8454%" y="581" width="1.2887%" height="15" fill="rgb(247,221,28)" fg:x="77" fg:w="5"/><text x="20.0954%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (5 samples, 1.29%)</title><rect x="19.8454%" y="565" width="1.2887%" height="15" fill="rgb(251,222,45)" fg:x="77" fg:w="5"/><text x="20.0954%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.52%)</title><rect x="20.6186%" y="549" width="0.5155%" height="15" fill="rgb(217,162,53)" fg:x="80" fg:w="2"/><text x="20.8686%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.52%)</title><rect x="20.6186%" y="533" width="0.5155%" height="15" fill="rgb(229,93,14)" fg:x="80" fg:w="2"/><text x="20.8686%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (1 samples, 0.26%)</title><rect x="21.1340%" y="581" width="0.2577%" height="15" fill="rgb(209,67,49)" fg:x="82" fg:w="1"/><text x="21.3840%" y="591.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (1 samples, 0.26%)</title><rect x="21.1340%" y="565" width="0.2577%" height="15" fill="rgb(213,87,29)" fg:x="82" fg:w="1"/><text x="21.3840%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.26%)</title><rect x="21.1340%" y="549" width="0.2577%" height="15" fill="rgb(205,151,52)" fg:x="82" fg:w="1"/><text x="21.3840%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.26%)</title><rect x="21.1340%" y="533" width="0.2577%" height="15" fill="rgb(253,215,39)" fg:x="82" fg:w="1"/><text x="21.3840%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.26%)</title><rect x="21.1340%" y="517" width="0.2577%" height="15" fill="rgb(221,220,41)" fg:x="82" fg:w="1"/><text x="21.3840%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (73 samples, 18.81%)</title><rect x="2.8351%" y="597" width="18.8144%" height="15" fill="rgb(218,133,21)" fg:x="11" fg:w="73"/><text x="3.0851%" y="607.50">project1::solver::cdcl_solver..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.26%)</title><rect x="21.3918%" y="581" width="0.2577%" height="15" fill="rgb(221,193,43)" fg:x="83" fg:w="1"/><text x="21.6418%" y="591.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.26%)</title><rect x="21.3918%" y="565" width="0.2577%" height="15" fill="rgb(240,128,52)" fg:x="83" fg:w="1"/><text x="21.6418%" y="575.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (1 samples, 0.26%)</title><rect x="21.6495%" y="597" width="0.2577%" height="15" fill="rgb(253,114,12)" fg:x="84" fg:w="1"/><text x="21.8995%" y="607.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (1 samples, 0.26%)</title><rect x="21.6495%" y="581" width="0.2577%" height="15" fill="rgb(215,223,47)" fg:x="84" fg:w="1"/><text x="21.8995%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.26%)</title><rect x="21.6495%" y="565" width="0.2577%" height="15" fill="rgb(248,225,23)" fg:x="84" fg:w="1"/><text x="21.8995%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.26%)</title><rect x="21.9072%" y="581" width="0.2577%" height="15" fill="rgb(250,108,0)" fg:x="85" fg:w="1"/><text x="22.1572%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.26%)</title><rect x="21.9072%" y="565" width="0.2577%" height="15" fill="rgb(228,208,7)" fg:x="85" fg:w="1"/><text x="22.1572%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.26%)</title><rect x="21.9072%" y="549" width="0.2577%" height="15" fill="rgb(244,45,10)" fg:x="85" fg:w="1"/><text x="22.1572%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.26%)</title><rect x="21.9072%" y="533" width="0.2577%" height="15" fill="rgb(207,125,25)" fg:x="85" fg:w="1"/><text x="22.1572%" y="543.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.26%)</title><rect x="22.1649%" y="581" width="0.2577%" height="15" fill="rgb(210,195,18)" fg:x="86" fg:w="1"/><text x="22.4149%" y="591.50"></text></g><g><title>core::mem::replace (1 samples, 0.26%)</title><rect x="22.4227%" y="565" width="0.2577%" height="15" fill="rgb(249,80,12)" fg:x="87" fg:w="1"/><text x="22.6727%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.26%)</title><rect x="22.4227%" y="549" width="0.2577%" height="15" fill="rgb(221,65,9)" fg:x="87" fg:w="1"/><text x="22.6727%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.52%)</title><rect x="22.6804%" y="405" width="0.5155%" height="15" fill="rgb(235,49,36)" fg:x="88" fg:w="2"/><text x="22.9304%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.26%)</title><rect x="22.9381%" y="389" width="0.2577%" height="15" fill="rgb(225,32,20)" fg:x="89" fg:w="1"/><text x="23.1881%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="22.6804%" y="453" width="0.7732%" height="15" fill="rgb(215,141,46)" fg:x="88" fg:w="3"/><text x="22.9304%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="22.6804%" y="437" width="0.7732%" height="15" fill="rgb(250,160,47)" fg:x="88" fg:w="3"/><text x="22.9304%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="22.6804%" y="421" width="0.7732%" height="15" fill="rgb(216,222,40)" fg:x="88" fg:w="3"/><text x="22.9304%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.26%)</title><rect x="23.1959%" y="405" width="0.2577%" height="15" fill="rgb(234,217,39)" fg:x="90" fg:w="1"/><text x="23.4459%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 1.29%)</title><rect x="22.6804%" y="485" width="1.2887%" height="15" fill="rgb(207,178,40)" fg:x="88" fg:w="5"/><text x="22.9304%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 1.29%)</title><rect x="22.6804%" y="469" width="1.2887%" height="15" fill="rgb(221,136,13)" fg:x="88" fg:w="5"/><text x="22.9304%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.52%)</title><rect x="23.4536%" y="453" width="0.5155%" height="15" fill="rgb(249,199,10)" fg:x="91" fg:w="2"/><text x="23.7036%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.52%)</title><rect x="23.4536%" y="437" width="0.5155%" height="15" fill="rgb(249,222,13)" fg:x="91" fg:w="2"/><text x="23.7036%" y="447.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.52%)</title><rect x="23.4536%" y="421" width="0.5155%" height="15" fill="rgb(244,185,38)" fg:x="91" fg:w="2"/><text x="23.7036%" y="431.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.52%)</title><rect x="23.4536%" y="405" width="0.5155%" height="15" fill="rgb(236,202,9)" fg:x="91" fg:w="2"/><text x="23.7036%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="23.4536%" y="389" width="0.5155%" height="15" fill="rgb(250,229,37)" fg:x="91" fg:w="2"/><text x="23.7036%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="23.4536%" y="373" width="0.5155%" height="15" fill="rgb(206,174,23)" fg:x="91" fg:w="2"/><text x="23.7036%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.52%)</title><rect x="23.4536%" y="357" width="0.5155%" height="15" fill="rgb(211,33,43)" fg:x="91" fg:w="2"/><text x="23.7036%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="23.7113%" y="341" width="0.2577%" height="15" fill="rgb(245,58,50)" fg:x="92" fg:w="1"/><text x="23.9613%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="23.7113%" y="325" width="0.2577%" height="15" fill="rgb(244,68,36)" fg:x="92" fg:w="1"/><text x="23.9613%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (6 samples, 1.55%)</title><rect x="22.6804%" y="549" width="1.5464%" height="15" fill="rgb(232,229,15)" fg:x="88" fg:w="6"/><text x="22.9304%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 1.55%)</title><rect x="22.6804%" y="533" width="1.5464%" height="15" fill="rgb(254,30,23)" fg:x="88" fg:w="6"/><text x="22.9304%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 1.55%)</title><rect x="22.6804%" y="517" width="1.5464%" height="15" fill="rgb(235,160,14)" fg:x="88" fg:w="6"/><text x="22.9304%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 1.55%)</title><rect x="22.6804%" y="501" width="1.5464%" height="15" fill="rgb(212,155,44)" fg:x="88" fg:w="6"/><text x="22.9304%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.26%)</title><rect x="23.9691%" y="485" width="0.2577%" height="15" fill="rgb(226,2,50)" fg:x="93" fg:w="1"/><text x="24.2191%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.26%)</title><rect x="23.9691%" y="469" width="0.2577%" height="15" fill="rgb(234,177,6)" fg:x="93" fg:w="1"/><text x="24.2191%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.26%)</title><rect x="23.9691%" y="453" width="0.2577%" height="15" fill="rgb(217,24,9)" fg:x="93" fg:w="1"/><text x="24.2191%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.26%)</title><rect x="23.9691%" y="437" width="0.2577%" height="15" fill="rgb(220,13,46)" fg:x="93" fg:w="1"/><text x="24.2191%" y="447.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.26%)</title><rect x="23.9691%" y="421" width="0.2577%" height="15" fill="rgb(239,221,27)" fg:x="93" fg:w="1"/><text x="24.2191%" y="431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.26%)</title><rect x="23.9691%" y="405" width="0.2577%" height="15" fill="rgb(222,198,25)" fg:x="93" fg:w="1"/><text x="24.2191%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.26%)</title><rect x="23.9691%" y="389" width="0.2577%" height="15" fill="rgb(211,99,13)" fg:x="93" fg:w="1"/><text x="24.2191%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.26%)</title><rect x="23.9691%" y="373" width="0.2577%" height="15" fill="rgb(232,111,31)" fg:x="93" fg:w="1"/><text x="24.2191%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.52%)</title><rect x="24.2268%" y="485" width="0.5155%" height="15" fill="rgb(245,82,37)" fg:x="94" fg:w="2"/><text x="24.4768%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="24.7423%" y="357" width="0.2577%" height="15" fill="rgb(227,149,46)" fg:x="96" fg:w="1"/><text x="24.9923%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="24.7423%" y="341" width="0.2577%" height="15" fill="rgb(218,36,50)" fg:x="96" fg:w="1"/><text x="24.9923%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.52%)</title><rect x="25.2577%" y="341" width="0.5155%" height="15" fill="rgb(226,80,48)" fg:x="98" fg:w="2"/><text x="25.5077%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 1.29%)</title><rect x="24.7423%" y="405" width="1.2887%" height="15" fill="rgb(238,224,15)" fg:x="96" fg:w="5"/><text x="24.9923%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 1.29%)</title><rect x="24.7423%" y="389" width="1.2887%" height="15" fill="rgb(241,136,10)" fg:x="96" fg:w="5"/><text x="24.9923%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 1.29%)</title><rect x="24.7423%" y="373" width="1.2887%" height="15" fill="rgb(208,32,45)" fg:x="96" fg:w="5"/><text x="24.9923%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 1.03%)</title><rect x="25.0000%" y="357" width="1.0309%" height="15" fill="rgb(207,135,9)" fg:x="97" fg:w="4"/><text x="25.2500%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.26%)</title><rect x="25.7732%" y="341" width="0.2577%" height="15" fill="rgb(206,86,44)" fg:x="100" fg:w="1"/><text x="26.0232%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 1.55%)</title><rect x="24.7423%" y="437" width="1.5464%" height="15" fill="rgb(245,177,15)" fg:x="96" fg:w="6"/><text x="24.9923%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 1.55%)</title><rect x="24.7423%" y="421" width="1.5464%" height="15" fill="rgb(206,64,50)" fg:x="96" fg:w="6"/><text x="24.9923%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.26%)</title><rect x="26.0309%" y="405" width="0.2577%" height="15" fill="rgb(234,36,40)" fg:x="101" fg:w="1"/><text x="26.2809%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.26%)</title><rect x="26.0309%" y="389" width="0.2577%" height="15" fill="rgb(213,64,8)" fg:x="101" fg:w="1"/><text x="26.2809%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.26%)</title><rect x="26.0309%" y="373" width="0.2577%" height="15" fill="rgb(210,75,36)" fg:x="101" fg:w="1"/><text x="26.2809%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.26%)</title><rect x="26.0309%" y="357" width="0.2577%" height="15" fill="rgb(229,88,21)" fg:x="101" fg:w="1"/><text x="26.2809%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="26.0309%" y="341" width="0.2577%" height="15" fill="rgb(252,204,47)" fg:x="101" fg:w="1"/><text x="26.2809%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="26.0309%" y="325" width="0.2577%" height="15" fill="rgb(208,77,27)" fg:x="101" fg:w="1"/><text x="26.2809%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="26.0309%" y="309" width="0.2577%" height="15" fill="rgb(221,76,26)" fg:x="101" fg:w="1"/><text x="26.2809%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="26.0309%" y="293" width="0.2577%" height="15" fill="rgb(225,139,18)" fg:x="101" fg:w="1"/><text x="26.2809%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.26%)</title><rect x="26.0309%" y="277" width="0.2577%" height="15" fill="rgb(230,137,11)" fg:x="101" fg:w="1"/><text x="26.2809%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (9 samples, 2.32%)</title><rect x="24.2268%" y="533" width="2.3196%" height="15" fill="rgb(212,28,1)" fg:x="94" fg:w="9"/><text x="24.4768%" y="543.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (9 samples, 2.32%)</title><rect x="24.2268%" y="517" width="2.3196%" height="15" fill="rgb(248,164,17)" fg:x="94" fg:w="9"/><text x="24.4768%" y="527.50">c..</text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 2.32%)</title><rect x="24.2268%" y="501" width="2.3196%" height="15" fill="rgb(222,171,42)" fg:x="94" fg:w="9"/><text x="24.4768%" y="511.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7 samples, 1.80%)</title><rect x="24.7423%" y="485" width="1.8041%" height="15" fill="rgb(243,84,45)" fg:x="96" fg:w="7"/><text x="24.9923%" y="495.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7 samples, 1.80%)</title><rect x="24.7423%" y="469" width="1.8041%" height="15" fill="rgb(252,49,23)" fg:x="96" fg:w="7"/><text x="24.9923%" y="479.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7 samples, 1.80%)</title><rect x="24.7423%" y="453" width="1.8041%" height="15" fill="rgb(215,19,7)" fg:x="96" fg:w="7"/><text x="24.9923%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.26%)</title><rect x="26.2887%" y="437" width="0.2577%" height="15" fill="rgb(238,81,41)" fg:x="102" fg:w="1"/><text x="26.5387%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.26%)</title><rect x="26.2887%" y="421" width="0.2577%" height="15" fill="rgb(210,199,37)" fg:x="102" fg:w="1"/><text x="26.5387%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.26%)</title><rect x="26.2887%" y="405" width="0.2577%" height="15" fill="rgb(244,192,49)" fg:x="102" fg:w="1"/><text x="26.5387%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.26%)</title><rect x="26.2887%" y="389" width="0.2577%" height="15" fill="rgb(226,211,11)" fg:x="102" fg:w="1"/><text x="26.5387%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (10 samples, 2.58%)</title><rect x="24.2268%" y="549" width="2.5773%" height="15" fill="rgb(236,162,54)" fg:x="94" fg:w="10"/><text x="24.4768%" y="559.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.26%)</title><rect x="26.5464%" y="533" width="0.2577%" height="15" fill="rgb(220,229,9)" fg:x="103" fg:w="1"/><text x="26.7964%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.26%)</title><rect x="27.0619%" y="533" width="0.2577%" height="15" fill="rgb(250,87,22)" fg:x="105" fg:w="1"/><text x="27.3119%" y="543.50"></text></g><g><title>compare::Compare::compares_le (2 samples, 0.52%)</title><rect x="27.3196%" y="533" width="0.5155%" height="15" fill="rgb(239,43,17)" fg:x="106" fg:w="2"/><text x="27.5696%" y="543.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (2 samples, 0.52%)</title><rect x="27.3196%" y="517" width="0.5155%" height="15" fill="rgb(231,177,25)" fg:x="106" fg:w="2"/><text x="27.5696%" y="527.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.52%)</title><rect x="27.3196%" y="501" width="0.5155%" height="15" fill="rgb(219,179,1)" fg:x="106" fg:w="2"/><text x="27.5696%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.26%)</title><rect x="27.5773%" y="485" width="0.2577%" height="15" fill="rgb(238,219,53)" fg:x="107" fg:w="1"/><text x="27.8273%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (1 samples, 0.26%)</title><rect x="27.5773%" y="469" width="0.2577%" height="15" fill="rgb(232,167,36)" fg:x="107" fg:w="1"/><text x="27.8273%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.26%)</title><rect x="27.5773%" y="453" width="0.2577%" height="15" fill="rgb(244,19,51)" fg:x="107" fg:w="1"/><text x="27.8273%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (1 samples, 0.26%)</title><rect x="27.5773%" y="437" width="0.2577%" height="15" fill="rgb(224,6,22)" fg:x="107" fg:w="1"/><text x="27.8273%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.52%)</title><rect x="27.8351%" y="453" width="0.5155%" height="15" fill="rgb(224,145,5)" fg:x="108" fg:w="2"/><text x="28.0851%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.52%)</title><rect x="27.8351%" y="437" width="0.5155%" height="15" fill="rgb(234,130,49)" fg:x="108" fg:w="2"/><text x="28.0851%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="27.8351%" y="421" width="0.5155%" height="15" fill="rgb(254,6,2)" fg:x="108" fg:w="2"/><text x="28.0851%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="27.8351%" y="405" width="0.5155%" height="15" fill="rgb(208,96,46)" fg:x="108" fg:w="2"/><text x="28.0851%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.52%)</title><rect x="27.8351%" y="389" width="0.5155%" height="15" fill="rgb(239,3,39)" fg:x="108" fg:w="2"/><text x="28.0851%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.52%)</title><rect x="27.8351%" y="373" width="0.5155%" height="15" fill="rgb(233,210,1)" fg:x="108" fg:w="2"/><text x="28.0851%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.52%)</title><rect x="27.8351%" y="357" width="0.5155%" height="15" fill="rgb(244,137,37)" fg:x="108" fg:w="2"/><text x="28.0851%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (23 samples, 5.93%)</title><rect x="22.6804%" y="565" width="5.9278%" height="15" fill="rgb(240,136,2)" fg:x="88" fg:w="23"/><text x="22.9304%" y="575.50">mut_bina..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (7 samples, 1.80%)</title><rect x="26.8041%" y="549" width="1.8041%" height="15" fill="rgb(239,18,37)" fg:x="104" fg:w="7"/><text x="27.0541%" y="559.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3 samples, 0.77%)</title><rect x="27.8351%" y="533" width="0.7732%" height="15" fill="rgb(218,185,22)" fg:x="108" fg:w="3"/><text x="28.0851%" y="543.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.77%)</title><rect x="27.8351%" y="517" width="0.7732%" height="15" fill="rgb(225,218,4)" fg:x="108" fg:w="3"/><text x="28.0851%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.77%)</title><rect x="27.8351%" y="501" width="0.7732%" height="15" fill="rgb(230,182,32)" fg:x="108" fg:w="3"/><text x="28.0851%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.77%)</title><rect x="27.8351%" y="485" width="0.7732%" height="15" fill="rgb(242,56,43)" fg:x="108" fg:w="3"/><text x="28.0851%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.77%)</title><rect x="27.8351%" y="469" width="0.7732%" height="15" fill="rgb(233,99,24)" fg:x="108" fg:w="3"/><text x="28.0851%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.26%)</title><rect x="28.3505%" y="453" width="0.2577%" height="15" fill="rgb(234,209,42)" fg:x="110" fg:w="1"/><text x="28.6005%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.26%)</title><rect x="28.3505%" y="437" width="0.2577%" height="15" fill="rgb(227,7,12)" fg:x="110" fg:w="1"/><text x="28.6005%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.26%)</title><rect x="28.3505%" y="421" width="0.2577%" height="15" fill="rgb(245,203,43)" fg:x="110" fg:w="1"/><text x="28.6005%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.26%)</title><rect x="28.3505%" y="405" width="0.2577%" height="15" fill="rgb(238,205,33)" fg:x="110" fg:w="1"/><text x="28.6005%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.26%)</title><rect x="28.3505%" y="389" width="0.2577%" height="15" fill="rgb(231,56,7)" fg:x="110" fg:w="1"/><text x="28.6005%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.26%)</title><rect x="28.3505%" y="373" width="0.2577%" height="15" fill="rgb(244,186,29)" fg:x="110" fg:w="1"/><text x="28.6005%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.26%)</title><rect x="28.3505%" y="357" width="0.2577%" height="15" fill="rgb(234,111,31)" fg:x="110" fg:w="1"/><text x="28.6005%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.26%)</title><rect x="28.3505%" y="341" width="0.2577%" height="15" fill="rgb(241,149,10)" fg:x="110" fg:w="1"/><text x="28.6005%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="28.6082%" y="485" width="0.2577%" height="15" fill="rgb(249,206,44)" fg:x="111" fg:w="1"/><text x="28.8582%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="28.6082%" y="469" width="0.2577%" height="15" fill="rgb(251,153,30)" fg:x="111" fg:w="1"/><text x="28.8582%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="28.6082%" y="453" width="0.2577%" height="15" fill="rgb(239,152,38)" fg:x="111" fg:w="1"/><text x="28.8582%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.26%)</title><rect x="28.6082%" y="437" width="0.2577%" height="15" fill="rgb(249,139,47)" fg:x="111" fg:w="1"/><text x="28.8582%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.52%)</title><rect x="28.6082%" y="517" width="0.5155%" height="15" fill="rgb(244,64,35)" fg:x="111" fg:w="2"/><text x="28.8582%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.52%)</title><rect x="28.6082%" y="501" width="0.5155%" height="15" fill="rgb(216,46,15)" fg:x="111" fg:w="2"/><text x="28.8582%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.26%)</title><rect x="28.8660%" y="485" width="0.2577%" height="15" fill="rgb(250,74,19)" fg:x="112" fg:w="1"/><text x="29.1160%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.26%)</title><rect x="28.8660%" y="469" width="0.2577%" height="15" fill="rgb(249,42,33)" fg:x="112" fg:w="1"/><text x="29.1160%" y="479.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.26%)</title><rect x="28.8660%" y="453" width="0.2577%" height="15" fill="rgb(242,149,17)" fg:x="112" fg:w="1"/><text x="29.1160%" y="463.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.26%)</title><rect x="28.8660%" y="437" width="0.2577%" height="15" fill="rgb(244,29,21)" fg:x="112" fg:w="1"/><text x="29.1160%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="28.8660%" y="421" width="0.2577%" height="15" fill="rgb(220,130,37)" fg:x="112" fg:w="1"/><text x="29.1160%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="28.8660%" y="405" width="0.2577%" height="15" fill="rgb(211,67,2)" fg:x="112" fg:w="1"/><text x="29.1160%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="28.8660%" y="389" width="0.2577%" height="15" fill="rgb(235,68,52)" fg:x="112" fg:w="1"/><text x="29.1160%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.26%)</title><rect x="28.8660%" y="373" width="0.2577%" height="15" fill="rgb(246,142,3)" fg:x="112" fg:w="1"/><text x="29.1160%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="28.8660%" y="357" width="0.2577%" height="15" fill="rgb(241,25,7)" fg:x="112" fg:w="1"/><text x="29.1160%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.26%)</title><rect x="29.3814%" y="469" width="0.2577%" height="15" fill="rgb(242,119,39)" fg:x="114" fg:w="1"/><text x="29.6314%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.26%)</title><rect x="29.3814%" y="453" width="0.2577%" height="15" fill="rgb(241,98,45)" fg:x="114" fg:w="1"/><text x="29.6314%" y="463.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.26%)</title><rect x="29.3814%" y="437" width="0.2577%" height="15" fill="rgb(254,28,30)" fg:x="114" fg:w="1"/><text x="29.6314%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.26%)</title><rect x="29.3814%" y="421" width="0.2577%" height="15" fill="rgb(241,142,54)" fg:x="114" fg:w="1"/><text x="29.6314%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.26%)</title><rect x="29.3814%" y="405" width="0.2577%" height="15" fill="rgb(222,85,15)" fg:x="114" fg:w="1"/><text x="29.6314%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.26%)</title><rect x="29.6392%" y="469" width="0.2577%" height="15" fill="rgb(210,85,47)" fg:x="115" fg:w="1"/><text x="29.8892%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.26%)</title><rect x="29.6392%" y="453" width="0.2577%" height="15" fill="rgb(224,206,25)" fg:x="115" fg:w="1"/><text x="29.8892%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 1.55%)</title><rect x="28.6082%" y="565" width="1.5464%" height="15" fill="rgb(243,201,19)" fg:x="111" fg:w="6"/><text x="28.8582%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 1.55%)</title><rect x="28.6082%" y="549" width="1.5464%" height="15" fill="rgb(236,59,4)" fg:x="111" fg:w="6"/><text x="28.8582%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 1.55%)</title><rect x="28.6082%" y="533" width="1.5464%" height="15" fill="rgb(254,179,45)" fg:x="111" fg:w="6"/><text x="28.8582%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 1.03%)</title><rect x="29.1237%" y="517" width="1.0309%" height="15" fill="rgb(226,14,10)" fg:x="113" fg:w="4"/><text x="29.3737%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 1.03%)</title><rect x="29.1237%" y="501" width="1.0309%" height="15" fill="rgb(244,27,41)" fg:x="113" fg:w="4"/><text x="29.3737%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 1.03%)</title><rect x="29.1237%" y="485" width="1.0309%" height="15" fill="rgb(235,35,32)" fg:x="113" fg:w="4"/><text x="29.3737%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.26%)</title><rect x="29.8969%" y="469" width="0.2577%" height="15" fill="rgb(218,68,31)" fg:x="116" fg:w="1"/><text x="30.1469%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.26%)</title><rect x="30.1546%" y="533" width="0.2577%" height="15" fill="rgb(207,120,37)" fg:x="117" fg:w="1"/><text x="30.4046%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.26%)</title><rect x="30.1546%" y="517" width="0.2577%" height="15" fill="rgb(227,98,0)" fg:x="117" fg:w="1"/><text x="30.4046%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.26%)</title><rect x="30.1546%" y="501" width="0.2577%" height="15" fill="rgb(207,7,3)" fg:x="117" fg:w="1"/><text x="30.4046%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.26%)</title><rect x="30.1546%" y="485" width="0.2577%" height="15" fill="rgb(206,98,19)" fg:x="117" fg:w="1"/><text x="30.4046%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (34 samples, 8.76%)</title><rect x="21.9072%" y="597" width="8.7629%" height="15" fill="rgb(217,5,26)" fg:x="85" fg:w="34"/><text x="22.1572%" y="607.50">project1::so..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (32 samples, 8.25%)</title><rect x="22.4227%" y="581" width="8.2474%" height="15" fill="rgb(235,190,38)" fg:x="87" fg:w="32"/><text x="22.6727%" y="591.50">mut_binary_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.52%)</title><rect x="30.1546%" y="565" width="0.5155%" height="15" fill="rgb(247,86,24)" fg:x="117" fg:w="2"/><text x="30.4046%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.52%)</title><rect x="30.1546%" y="549" width="0.5155%" height="15" fill="rgb(205,101,16)" fg:x="117" fg:w="2"/><text x="30.4046%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.26%)</title><rect x="30.4124%" y="533" width="0.2577%" height="15" fill="rgb(246,168,33)" fg:x="118" fg:w="1"/><text x="30.6624%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.26%)</title><rect x="30.4124%" y="517" width="0.2577%" height="15" fill="rgb(231,114,1)" fg:x="118" fg:w="1"/><text x="30.6624%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.26%)</title><rect x="30.6701%" y="517" width="0.2577%" height="15" fill="rgb(207,184,53)" fg:x="119" fg:w="1"/><text x="30.9201%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.26%)</title><rect x="30.9278%" y="421" width="0.2577%" height="15" fill="rgb(224,95,51)" fg:x="120" fg:w="1"/><text x="31.1778%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.26%)</title><rect x="30.9278%" y="405" width="0.2577%" height="15" fill="rgb(212,188,45)" fg:x="120" fg:w="1"/><text x="31.1778%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.26%)</title><rect x="30.9278%" y="389" width="0.2577%" height="15" fill="rgb(223,154,38)" fg:x="120" fg:w="1"/><text x="31.1778%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.52%)</title><rect x="30.9278%" y="517" width="0.5155%" height="15" fill="rgb(251,22,52)" fg:x="120" fg:w="2"/><text x="31.1778%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.52%)</title><rect x="30.9278%" y="501" width="0.5155%" height="15" fill="rgb(229,209,22)" fg:x="120" fg:w="2"/><text x="31.1778%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.52%)</title><rect x="30.9278%" y="485" width="0.5155%" height="15" fill="rgb(234,138,34)" fg:x="120" fg:w="2"/><text x="31.1778%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.52%)</title><rect x="30.9278%" y="469" width="0.5155%" height="15" fill="rgb(212,95,11)" fg:x="120" fg:w="2"/><text x="31.1778%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2 samples, 0.52%)</title><rect x="30.9278%" y="453" width="0.5155%" height="15" fill="rgb(240,179,47)" fg:x="120" fg:w="2"/><text x="31.1778%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2 samples, 0.52%)</title><rect x="30.9278%" y="437" width="0.5155%" height="15" fill="rgb(240,163,11)" fg:x="120" fg:w="2"/><text x="31.1778%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.26%)</title><rect x="31.1856%" y="421" width="0.2577%" height="15" fill="rgb(236,37,12)" fg:x="121" fg:w="1"/><text x="31.4356%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.26%)</title><rect x="31.1856%" y="405" width="0.2577%" height="15" fill="rgb(232,164,16)" fg:x="121" fg:w="1"/><text x="31.4356%" y="415.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.26%)</title><rect x="31.1856%" y="389" width="0.2577%" height="15" fill="rgb(244,205,15)" fg:x="121" fg:w="1"/><text x="31.4356%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.52%)</title><rect x="31.4433%" y="501" width="0.5155%" height="15" fill="rgb(223,117,47)" fg:x="122" fg:w="2"/><text x="31.6933%" y="511.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.52%)</title><rect x="31.4433%" y="485" width="0.5155%" height="15" fill="rgb(244,107,35)" fg:x="122" fg:w="2"/><text x="31.6933%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.52%)</title><rect x="31.4433%" y="469" width="0.5155%" height="15" fill="rgb(205,140,8)" fg:x="122" fg:w="2"/><text x="31.6933%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (6 samples, 1.55%)</title><rect x="30.6701%" y="597" width="1.5464%" height="15" fill="rgb(228,84,46)" fg:x="119" fg:w="6"/><text x="30.9201%" y="607.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (6 samples, 1.55%)</title><rect x="30.6701%" y="581" width="1.5464%" height="15" fill="rgb(254,188,9)" fg:x="119" fg:w="6"/><text x="30.9201%" y="591.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (6 samples, 1.55%)</title><rect x="30.6701%" y="565" width="1.5464%" height="15" fill="rgb(206,112,54)" fg:x="119" fg:w="6"/><text x="30.9201%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 1.55%)</title><rect x="30.6701%" y="549" width="1.5464%" height="15" fill="rgb(216,84,49)" fg:x="119" fg:w="6"/><text x="30.9201%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 1.55%)</title><rect x="30.6701%" y="533" width="1.5464%" height="15" fill="rgb(214,194,35)" fg:x="119" fg:w="6"/><text x="30.9201%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.77%)</title><rect x="31.4433%" y="517" width="0.7732%" height="15" fill="rgb(249,28,3)" fg:x="122" fg:w="3"/><text x="31.6933%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.26%)</title><rect x="31.9588%" y="501" width="0.2577%" height="15" fill="rgb(222,56,52)" fg:x="124" fg:w="1"/><text x="32.2088%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.26%)</title><rect x="31.9588%" y="485" width="0.2577%" height="15" fill="rgb(245,217,50)" fg:x="124" fg:w="1"/><text x="32.2088%" y="495.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.26%)</title><rect x="31.9588%" y="469" width="0.2577%" height="15" fill="rgb(213,201,24)" fg:x="124" fg:w="1"/><text x="32.2088%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.26%)</title><rect x="32.4742%" y="533" width="0.2577%" height="15" fill="rgb(248,116,28)" fg:x="126" fg:w="1"/><text x="32.7242%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.26%)</title><rect x="32.4742%" y="517" width="0.2577%" height="15" fill="rgb(219,72,43)" fg:x="126" fg:w="1"/><text x="32.7242%" y="527.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="501" width="0.2577%" height="15" fill="rgb(209,138,14)" fg:x="126" fg:w="1"/><text x="32.7242%" y="511.50"></text></g><g><title>exc_page_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="485" width="0.2577%" height="15" fill="rgb(222,18,33)" fg:x="126" fg:w="1"/><text x="32.7242%" y="495.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="469" width="0.2577%" height="15" fill="rgb(213,199,7)" fg:x="126" fg:w="1"/><text x="32.7242%" y="479.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="453" width="0.2577%" height="15" fill="rgb(250,110,10)" fg:x="126" fg:w="1"/><text x="32.7242%" y="463.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="437" width="0.2577%" height="15" fill="rgb(248,123,6)" fg:x="126" fg:w="1"/><text x="32.7242%" y="447.50"></text></g><g><title>handle_pte_fault (1 samples, 0.26%)</title><rect x="32.4742%" y="421" width="0.2577%" height="15" fill="rgb(206,91,31)" fg:x="126" fg:w="1"/><text x="32.7242%" y="431.50"></text></g><g><title>do_anonymous_page (1 samples, 0.26%)</title><rect x="32.4742%" y="405" width="0.2577%" height="15" fill="rgb(211,154,13)" fg:x="126" fg:w="1"/><text x="32.7242%" y="415.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.26%)</title><rect x="32.4742%" y="389" width="0.2577%" height="15" fill="rgb(225,148,7)" fg:x="126" fg:w="1"/><text x="32.7242%" y="399.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.26%)</title><rect x="32.4742%" y="373" width="0.2577%" height="15" fill="rgb(220,160,43)" fg:x="126" fg:w="1"/><text x="32.7242%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (3 samples, 0.77%)</title><rect x="32.2165%" y="597" width="0.7732%" height="15" fill="rgb(213,52,39)" fg:x="125" fg:w="3"/><text x="32.4665%" y="607.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (3 samples, 0.77%)</title><rect x="32.2165%" y="581" width="0.7732%" height="15" fill="rgb(243,137,7)" fg:x="125" fg:w="3"/><text x="32.4665%" y="591.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (3 samples, 0.77%)</title><rect x="32.2165%" y="565" width="0.7732%" height="15" fill="rgb(230,79,13)" fg:x="125" fg:w="3"/><text x="32.4665%" y="575.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (3 samples, 0.77%)</title><rect x="32.2165%" y="549" width="0.7732%" height="15" fill="rgb(247,105,23)" fg:x="125" fg:w="3"/><text x="32.4665%" y="559.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (1 samples, 0.26%)</title><rect x="32.7320%" y="533" width="0.2577%" height="15" fill="rgb(223,179,41)" fg:x="127" fg:w="1"/><text x="32.9820%" y="543.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (1 samples, 0.26%)</title><rect x="32.7320%" y="517" width="0.2577%" height="15" fill="rgb(218,9,34)" fg:x="127" fg:w="1"/><text x="32.9820%" y="527.50"></text></g><g><title>project1::solver::clause::Clause::with_key (1 samples, 0.26%)</title><rect x="32.7320%" y="501" width="0.2577%" height="15" fill="rgb(222,106,8)" fg:x="127" fg:w="1"/><text x="32.9820%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.26%)</title><rect x="32.7320%" y="485" width="0.2577%" height="15" fill="rgb(211,220,0)" fg:x="127" fg:w="1"/><text x="32.9820%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.26%)</title><rect x="32.7320%" y="469" width="0.2577%" height="15" fill="rgb(229,52,16)" fg:x="127" fg:w="1"/><text x="32.9820%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.26%)</title><rect x="32.7320%" y="453" width="0.2577%" height="15" fill="rgb(212,155,18)" fg:x="127" fg:w="1"/><text x="32.9820%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.26%)</title><rect x="32.7320%" y="437" width="0.2577%" height="15" fill="rgb(242,21,14)" fg:x="127" fg:w="1"/><text x="32.9820%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="32.7320%" y="421" width="0.2577%" height="15" fill="rgb(222,19,48)" fg:x="127" fg:w="1"/><text x="32.9820%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="32.7320%" y="405" width="0.2577%" height="15" fill="rgb(232,45,27)" fg:x="127" fg:w="1"/><text x="32.9820%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="32.7320%" y="389" width="0.2577%" height="15" fill="rgb(249,103,42)" fg:x="127" fg:w="1"/><text x="32.9820%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.26%)</title><rect x="32.7320%" y="373" width="0.2577%" height="15" fill="rgb(246,81,33)" fg:x="127" fg:w="1"/><text x="32.9820%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="32.7320%" y="357" width="0.2577%" height="15" fill="rgb(252,33,42)" fg:x="127" fg:w="1"/><text x="32.9820%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="32.7320%" y="341" width="0.2577%" height="15" fill="rgb(209,212,41)" fg:x="127" fg:w="1"/><text x="32.9820%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.26%)</title><rect x="32.7320%" y="325" width="0.2577%" height="15" fill="rgb(207,154,6)" fg:x="127" fg:w="1"/><text x="32.9820%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.26%)</title><rect x="32.7320%" y="309" width="0.2577%" height="15" fill="rgb(223,64,47)" fg:x="127" fg:w="1"/><text x="32.9820%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="32.7320%" y="293" width="0.2577%" height="15" fill="rgb(211,161,38)" fg:x="127" fg:w="1"/><text x="32.9820%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.26%)</title><rect x="32.9897%" y="565" width="0.2577%" height="15" fill="rgb(219,138,40)" fg:x="128" fg:w="1"/><text x="33.2397%" y="575.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (1 samples, 0.26%)</title><rect x="32.9897%" y="549" width="0.2577%" height="15" fill="rgb(241,228,46)" fg:x="128" fg:w="1"/><text x="33.2397%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.26%)</title><rect x="32.9897%" y="533" width="0.2577%" height="15" fill="rgb(223,209,38)" fg:x="128" fg:w="1"/><text x="33.2397%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.26%)</title><rect x="32.9897%" y="517" width="0.2577%" height="15" fill="rgb(236,164,45)" fg:x="128" fg:w="1"/><text x="33.2397%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.26%)</title><rect x="32.9897%" y="501" width="0.2577%" height="15" fill="rgb(231,15,5)" fg:x="128" fg:w="1"/><text x="33.2397%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.26%)</title><rect x="32.9897%" y="485" width="0.2577%" height="15" fill="rgb(252,35,15)" fg:x="128" fg:w="1"/><text x="33.2397%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.26%)</title><rect x="32.9897%" y="469" width="0.2577%" height="15" fill="rgb(248,181,18)" fg:x="128" fg:w="1"/><text x="33.2397%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.26%)</title><rect x="32.9897%" y="453" width="0.2577%" height="15" fill="rgb(233,39,42)" fg:x="128" fg:w="1"/><text x="33.2397%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.26%)</title><rect x="32.9897%" y="437" width="0.2577%" height="15" fill="rgb(238,110,33)" fg:x="128" fg:w="1"/><text x="33.2397%" y="447.50"></text></g><g><title>core::mem::drop (1 samples, 0.26%)</title><rect x="33.2474%" y="517" width="0.2577%" height="15" fill="rgb(233,195,10)" fg:x="129" fg:w="1"/><text x="33.4974%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.26%)</title><rect x="33.2474%" y="501" width="0.2577%" height="15" fill="rgb(254,105,3)" fg:x="129" fg:w="1"/><text x="33.4974%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="33.2474%" y="485" width="0.2577%" height="15" fill="rgb(221,225,9)" fg:x="129" fg:w="1"/><text x="33.4974%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="33.5052%" y="389" width="0.2577%" height="15" fill="rgb(224,227,45)" fg:x="130" fg:w="1"/><text x="33.7552%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="33.5052%" y="373" width="0.2577%" height="15" fill="rgb(229,198,43)" fg:x="130" fg:w="1"/><text x="33.7552%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.26%)</title><rect x="33.5052%" y="357" width="0.2577%" height="15" fill="rgb(206,209,35)" fg:x="130" fg:w="1"/><text x="33.7552%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.26%)</title><rect x="33.5052%" y="341" width="0.2577%" height="15" fill="rgb(245,195,53)" fg:x="130" fg:w="1"/><text x="33.7552%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="33.5052%" y="325" width="0.2577%" height="15" fill="rgb(240,92,26)" fg:x="130" fg:w="1"/><text x="33.7552%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2 samples, 0.52%)</title><rect x="33.5052%" y="517" width="0.5155%" height="15" fill="rgb(207,40,23)" fg:x="130" fg:w="2"/><text x="33.7552%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.52%)</title><rect x="33.5052%" y="501" width="0.5155%" height="15" fill="rgb(223,111,35)" fg:x="130" fg:w="2"/><text x="33.7552%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.52%)</title><rect x="33.5052%" y="485" width="0.5155%" height="15" fill="rgb(229,147,28)" fg:x="130" fg:w="2"/><text x="33.7552%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.52%)</title><rect x="33.5052%" y="469" width="0.5155%" height="15" fill="rgb(211,29,28)" fg:x="130" fg:w="2"/><text x="33.7552%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.52%)</title><rect x="33.5052%" y="453" width="0.5155%" height="15" fill="rgb(228,72,33)" fg:x="130" fg:w="2"/><text x="33.7552%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.52%)</title><rect x="33.5052%" y="437" width="0.5155%" height="15" fill="rgb(205,214,31)" fg:x="130" fg:w="2"/><text x="33.7552%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.52%)</title><rect x="33.5052%" y="421" width="0.5155%" height="15" fill="rgb(224,111,15)" fg:x="130" fg:w="2"/><text x="33.7552%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.52%)</title><rect x="33.5052%" y="405" width="0.5155%" height="15" fill="rgb(253,21,26)" fg:x="130" fg:w="2"/><text x="33.7552%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.26%)</title><rect x="33.7629%" y="389" width="0.2577%" height="15" fill="rgb(245,139,43)" fg:x="131" fg:w="1"/><text x="34.0129%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.26%)</title><rect x="33.7629%" y="373" width="0.2577%" height="15" fill="rgb(252,170,7)" fg:x="131" fg:w="1"/><text x="34.0129%" y="383.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.26%)</title><rect x="33.7629%" y="357" width="0.2577%" height="15" fill="rgb(231,118,14)" fg:x="131" fg:w="1"/><text x="34.0129%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.26%)</title><rect x="33.7629%" y="341" width="0.2577%" height="15" fill="rgb(238,83,0)" fg:x="131" fg:w="1"/><text x="34.0129%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="33.7629%" y="325" width="0.2577%" height="15" fill="rgb(221,39,39)" fg:x="131" fg:w="1"/><text x="34.0129%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="33.7629%" y="309" width="0.2577%" height="15" fill="rgb(222,119,46)" fg:x="131" fg:w="1"/><text x="34.0129%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="33.7629%" y="293" width="0.2577%" height="15" fill="rgb(222,165,49)" fg:x="131" fg:w="1"/><text x="34.0129%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.26%)</title><rect x="34.0206%" y="357" width="0.2577%" height="15" fill="rgb(219,113,52)" fg:x="132" fg:w="1"/><text x="34.2706%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="34.0206%" y="421" width="0.7732%" height="15" fill="rgb(214,7,15)" fg:x="132" fg:w="3"/><text x="34.2706%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="34.0206%" y="405" width="0.7732%" height="15" fill="rgb(235,32,4)" fg:x="132" fg:w="3"/><text x="34.2706%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.77%)</title><rect x="34.0206%" y="389" width="0.7732%" height="15" fill="rgb(238,90,54)" fg:x="132" fg:w="3"/><text x="34.2706%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.77%)</title><rect x="34.0206%" y="373" width="0.7732%" height="15" fill="rgb(213,208,19)" fg:x="132" fg:w="3"/><text x="34.2706%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.52%)</title><rect x="34.2784%" y="357" width="0.5155%" height="15" fill="rgb(233,156,4)" fg:x="133" fg:w="2"/><text x="34.5284%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 1.03%)</title><rect x="34.0206%" y="453" width="1.0309%" height="15" fill="rgb(207,194,5)" fg:x="132" fg:w="4"/><text x="34.2706%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 1.03%)</title><rect x="34.0206%" y="437" width="1.0309%" height="15" fill="rgb(206,111,30)" fg:x="132" fg:w="4"/><text x="34.2706%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.26%)</title><rect x="34.7938%" y="421" width="0.2577%" height="15" fill="rgb(243,70,54)" fg:x="135" fg:w="1"/><text x="35.0438%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.26%)</title><rect x="34.7938%" y="405" width="0.2577%" height="15" fill="rgb(242,28,8)" fg:x="135" fg:w="1"/><text x="35.0438%" y="415.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.26%)</title><rect x="34.7938%" y="389" width="0.2577%" height="15" fill="rgb(219,106,18)" fg:x="135" fg:w="1"/><text x="35.0438%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.26%)</title><rect x="34.7938%" y="373" width="0.2577%" height="15" fill="rgb(244,222,10)" fg:x="135" fg:w="1"/><text x="35.0438%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="34.7938%" y="357" width="0.2577%" height="15" fill="rgb(236,179,52)" fg:x="135" fg:w="1"/><text x="35.0438%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="34.7938%" y="341" width="0.2577%" height="15" fill="rgb(213,23,39)" fg:x="135" fg:w="1"/><text x="35.0438%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.26%)</title><rect x="34.7938%" y="325" width="0.2577%" height="15" fill="rgb(238,48,10)" fg:x="135" fg:w="1"/><text x="35.0438%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (9 samples, 2.32%)</title><rect x="32.9897%" y="597" width="2.3196%" height="15" fill="rgb(251,196,23)" fg:x="128" fg:w="9"/><text x="33.2397%" y="607.50">p..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (9 samples, 2.32%)</title><rect x="32.9897%" y="581" width="2.3196%" height="15" fill="rgb(250,152,24)" fg:x="128" fg:w="9"/><text x="33.2397%" y="591.50">m..</text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 2.06%)</title><rect x="33.2474%" y="565" width="2.0619%" height="15" fill="rgb(209,150,17)" fg:x="129" fg:w="8"/><text x="33.4974%" y="575.50">c..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (8 samples, 2.06%)</title><rect x="33.2474%" y="549" width="2.0619%" height="15" fill="rgb(234,202,34)" fg:x="129" fg:w="8"/><text x="33.4974%" y="559.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (8 samples, 2.06%)</title><rect x="33.2474%" y="533" width="2.0619%" height="15" fill="rgb(253,148,53)" fg:x="129" fg:w="8"/><text x="33.4974%" y="543.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (5 samples, 1.29%)</title><rect x="34.0206%" y="517" width="1.2887%" height="15" fill="rgb(218,129,16)" fg:x="132" fg:w="5"/><text x="34.2706%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 1.29%)</title><rect x="34.0206%" y="501" width="1.2887%" height="15" fill="rgb(216,85,19)" fg:x="132" fg:w="5"/><text x="34.2706%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 1.29%)</title><rect x="34.0206%" y="485" width="1.2887%" height="15" fill="rgb(235,228,7)" fg:x="132" fg:w="5"/><text x="34.2706%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 1.29%)</title><rect x="34.0206%" y="469" width="1.2887%" height="15" fill="rgb(245,175,0)" fg:x="132" fg:w="5"/><text x="34.2706%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.26%)</title><rect x="35.0515%" y="453" width="0.2577%" height="15" fill="rgb(208,168,36)" fg:x="136" fg:w="1"/><text x="35.3015%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.26%)</title><rect x="35.0515%" y="437" width="0.2577%" height="15" fill="rgb(246,171,24)" fg:x="136" fg:w="1"/><text x="35.3015%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.26%)</title><rect x="35.0515%" y="421" width="0.2577%" height="15" fill="rgb(215,142,24)" fg:x="136" fg:w="1"/><text x="35.3015%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.26%)</title><rect x="35.0515%" y="405" width="0.2577%" height="15" fill="rgb(250,187,7)" fg:x="136" fg:w="1"/><text x="35.3015%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.26%)</title><rect x="35.0515%" y="389" width="0.2577%" height="15" fill="rgb(228,66,33)" fg:x="136" fg:w="1"/><text x="35.3015%" y="399.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="35.3093%" y="469" width="0.2577%" height="15" fill="rgb(234,215,21)" fg:x="137" fg:w="1"/><text x="35.5593%" y="479.50"></text></g><g><title>exc_page_fault (1 samples, 0.26%)</title><rect x="35.3093%" y="453" width="0.2577%" height="15" fill="rgb(222,191,20)" fg:x="137" fg:w="1"/><text x="35.5593%" y="463.50"></text></g><g><title>irqentry_exit (1 samples, 0.26%)</title><rect x="35.3093%" y="437" width="0.2577%" height="15" fill="rgb(245,79,54)" fg:x="137" fg:w="1"/><text x="35.5593%" y="447.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.26%)</title><rect x="35.3093%" y="421" width="0.2577%" height="15" fill="rgb(240,10,37)" fg:x="137" fg:w="1"/><text x="35.5593%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.52%)</title><rect x="35.3093%" y="581" width="0.5155%" height="15" fill="rgb(214,192,32)" fg:x="137" fg:w="2"/><text x="35.5593%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.52%)</title><rect x="35.3093%" y="565" width="0.5155%" height="15" fill="rgb(209,36,54)" fg:x="137" fg:w="2"/><text x="35.5593%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.52%)</title><rect x="35.3093%" y="549" width="0.5155%" height="15" fill="rgb(220,10,11)" fg:x="137" fg:w="2"/><text x="35.5593%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.52%)</title><rect x="35.3093%" y="533" width="0.5155%" height="15" fill="rgb(221,106,17)" fg:x="137" fg:w="2"/><text x="35.5593%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.52%)</title><rect x="35.3093%" y="517" width="0.5155%" height="15" fill="rgb(251,142,44)" fg:x="137" fg:w="2"/><text x="35.5593%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.52%)</title><rect x="35.3093%" y="501" width="0.5155%" height="15" fill="rgb(238,13,15)" fg:x="137" fg:w="2"/><text x="35.5593%" y="511.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.52%)</title><rect x="35.3093%" y="485" width="0.5155%" height="15" fill="rgb(208,107,27)" fg:x="137" fg:w="2"/><text x="35.5593%" y="495.50"></text></g><g><title>error_entry (1 samples, 0.26%)</title><rect x="35.5670%" y="469" width="0.2577%" height="15" fill="rgb(205,136,37)" fg:x="138" fg:w="1"/><text x="35.8170%" y="479.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (2 samples, 0.52%)</title><rect x="37.1134%" y="485" width="0.5155%" height="15" fill="rgb(250,205,27)" fg:x="144" fg:w="2"/><text x="37.3634%" y="495.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (2 samples, 0.52%)</title><rect x="37.1134%" y="469" width="0.5155%" height="15" fill="rgb(210,80,43)" fg:x="144" fg:w="2"/><text x="37.3634%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (2 samples, 0.52%)</title><rect x="37.1134%" y="453" width="0.5155%" height="15" fill="rgb(247,160,36)" fg:x="144" fg:w="2"/><text x="37.3634%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (2 samples, 0.52%)</title><rect x="37.1134%" y="437" width="0.5155%" height="15" fill="rgb(234,13,49)" fg:x="144" fg:w="2"/><text x="37.3634%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (7 samples, 1.80%)</title><rect x="36.0825%" y="517" width="1.8041%" height="15" fill="rgb(234,122,0)" fg:x="140" fg:w="7"/><text x="36.3325%" y="527.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (7 samples, 1.80%)</title><rect x="36.0825%" y="501" width="1.8041%" height="15" fill="rgb(207,146,38)" fg:x="140" fg:w="7"/><text x="36.3325%" y="511.50">p..</text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.26%)</title><rect x="37.6289%" y="485" width="0.2577%" height="15" fill="rgb(207,177,25)" fg:x="146" fg:w="1"/><text x="37.8789%" y="495.50"></text></g><g><title>core::slice::sort::merge (10 samples, 2.58%)</title><rect x="35.8247%" y="533" width="2.5773%" height="15" fill="rgb(211,178,42)" fg:x="139" fg:w="10"/><text x="36.0747%" y="543.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.52%)</title><rect x="37.8866%" y="517" width="0.5155%" height="15" fill="rgb(230,69,54)" fg:x="147" fg:w="2"/><text x="38.1366%" y="527.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="38.4021%" y="405" width="0.2577%" height="15" fill="rgb(214,135,41)" fg:x="149" fg:w="1"/><text x="38.6521%" y="415.50"></text></g><g><title>exc_page_fault (1 samples, 0.26%)</title><rect x="38.4021%" y="389" width="0.2577%" height="15" fill="rgb(237,67,25)" fg:x="149" fg:w="1"/><text x="38.6521%" y="399.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="38.4021%" y="373" width="0.2577%" height="15" fill="rgb(222,189,50)" fg:x="149" fg:w="1"/><text x="38.6521%" y="383.50"></text></g><g><title>find_vma (1 samples, 0.26%)</title><rect x="38.4021%" y="357" width="0.2577%" height="15" fill="rgb(245,148,34)" fg:x="149" fg:w="1"/><text x="38.6521%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (2 samples, 0.52%)</title><rect x="38.4021%" y="533" width="0.5155%" height="15" fill="rgb(222,29,6)" fg:x="149" fg:w="2"/><text x="38.6521%" y="543.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (2 samples, 0.52%)</title><rect x="38.4021%" y="517" width="0.5155%" height="15" fill="rgb(221,189,43)" fg:x="149" fg:w="2"/><text x="38.6521%" y="527.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.52%)</title><rect x="38.4021%" y="501" width="0.5155%" height="15" fill="rgb(207,36,27)" fg:x="149" fg:w="2"/><text x="38.6521%" y="511.50"></text></g><g><title>__rdl_alloc (2 samples, 0.52%)</title><rect x="38.4021%" y="485" width="0.5155%" height="15" fill="rgb(217,90,24)" fg:x="149" fg:w="2"/><text x="38.6521%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.52%)</title><rect x="38.4021%" y="469" width="0.5155%" height="15" fill="rgb(224,66,35)" fg:x="149" fg:w="2"/><text x="38.6521%" y="479.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.52%)</title><rect x="38.4021%" y="453" width="0.5155%" height="15" fill="rgb(221,13,50)" fg:x="149" fg:w="2"/><text x="38.6521%" y="463.50"></text></g><g><title>_int_malloc (2 samples, 0.52%)</title><rect x="38.4021%" y="437" width="0.5155%" height="15" fill="rgb(236,68,49)" fg:x="149" fg:w="2"/><text x="38.6521%" y="447.50"></text></g><g><title>sysmalloc (2 samples, 0.52%)</title><rect x="38.4021%" y="421" width="0.5155%" height="15" fill="rgb(229,146,28)" fg:x="149" fg:w="2"/><text x="38.6521%" y="431.50"></text></g><g><title>grow_heap (1 samples, 0.26%)</title><rect x="38.6598%" y="405" width="0.2577%" height="15" fill="rgb(225,31,38)" fg:x="150" fg:w="1"/><text x="38.9098%" y="415.50"></text></g><g><title>__GI___mprotect (1 samples, 0.26%)</title><rect x="38.6598%" y="389" width="0.2577%" height="15" fill="rgb(250,208,3)" fg:x="150" fg:w="1"/><text x="38.9098%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="38.6598%" y="373" width="0.2577%" height="15" fill="rgb(246,54,23)" fg:x="150" fg:w="1"/><text x="38.9098%" y="383.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="38.6598%" y="357" width="0.2577%" height="15" fill="rgb(243,76,11)" fg:x="150" fg:w="1"/><text x="38.9098%" y="367.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.26%)</title><rect x="38.6598%" y="341" width="0.2577%" height="15" fill="rgb(245,21,50)" fg:x="150" fg:w="1"/><text x="38.9098%" y="351.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.26%)</title><rect x="38.6598%" y="325" width="0.2577%" height="15" fill="rgb(228,9,43)" fg:x="150" fg:w="1"/><text x="38.9098%" y="335.50"></text></g><g><title>mprotect_fixup (1 samples, 0.26%)</title><rect x="38.6598%" y="309" width="0.2577%" height="15" fill="rgb(208,100,47)" fg:x="150" fg:w="1"/><text x="38.9098%" y="319.50"></text></g><g><title>perf_event_mmap (1 samples, 0.26%)</title><rect x="38.6598%" y="293" width="0.2577%" height="15" fill="rgb(232,26,8)" fg:x="150" fg:w="1"/><text x="38.9098%" y="303.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.26%)</title><rect x="38.6598%" y="277" width="0.2577%" height="15" fill="rgb(216,166,38)" fg:x="150" fg:w="1"/><text x="38.9098%" y="287.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.26%)</title><rect x="38.6598%" y="261" width="0.2577%" height="15" fill="rgb(251,202,51)" fg:x="150" fg:w="1"/><text x="38.9098%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (3 samples, 0.77%)</title><rect x="38.9175%" y="485" width="0.7732%" height="15" fill="rgb(254,216,34)" fg:x="151" fg:w="3"/><text x="39.1675%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3 samples, 0.77%)</title><rect x="38.9175%" y="469" width="0.7732%" height="15" fill="rgb(251,32,27)" fg:x="151" fg:w="3"/><text x="39.1675%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (17 samples, 4.38%)</title><rect x="35.8247%" y="581" width="4.3814%" height="15" fill="rgb(208,127,28)" fg:x="139" fg:w="17"/><text x="36.0747%" y="591.50">alloc..</text></g><g><title>alloc::slice::stable_sort (17 samples, 4.38%)</title><rect x="35.8247%" y="565" width="4.3814%" height="15" fill="rgb(224,137,22)" fg:x="139" fg:w="17"/><text x="36.0747%" y="575.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (17 samples, 4.38%)</title><rect x="35.8247%" y="549" width="4.3814%" height="15" fill="rgb(254,70,32)" fg:x="139" fg:w="17"/><text x="36.0747%" y="559.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (5 samples, 1.29%)</title><rect x="38.9175%" y="533" width="1.2887%" height="15" fill="rgb(229,75,37)" fg:x="151" fg:w="5"/><text x="39.1675%" y="543.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (5 samples, 1.29%)</title><rect x="38.9175%" y="517" width="1.2887%" height="15" fill="rgb(252,64,23)" fg:x="151" fg:w="5"/><text x="39.1675%" y="527.50"></text></g><g><title>core::slice::sort::insert_tail (5 samples, 1.29%)</title><rect x="38.9175%" y="501" width="1.2887%" height="15" fill="rgb(232,162,48)" fg:x="151" fg:w="5"/><text x="39.1675%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.52%)</title><rect x="39.6907%" y="485" width="0.5155%" height="15" fill="rgb(246,160,12)" fg:x="154" fg:w="2"/><text x="39.9407%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (20 samples, 5.15%)</title><rect x="35.3093%" y="597" width="5.1546%" height="15" fill="rgb(247,166,0)" fg:x="137" fg:w="20"/><text x="35.5593%" y="607.50">projec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.26%)</title><rect x="40.2062%" y="581" width="0.2577%" height="15" fill="rgb(249,219,21)" fg:x="156" fg:w="1"/><text x="40.4562%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1 samples, 0.26%)</title><rect x="40.2062%" y="565" width="0.2577%" height="15" fill="rgb(205,209,3)" fg:x="156" fg:w="1"/><text x="40.4562%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1 samples, 0.26%)</title><rect x="40.2062%" y="549" width="0.2577%" height="15" fill="rgb(243,44,1)" fg:x="156" fg:w="1"/><text x="40.4562%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1 samples, 0.26%)</title><rect x="40.2062%" y="533" width="0.2577%" height="15" fill="rgb(206,159,16)" fg:x="156" fg:w="1"/><text x="40.4562%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (1 samples, 0.26%)</title><rect x="40.2062%" y="517" width="0.2577%" height="15" fill="rgb(244,77,30)" fg:x="156" fg:w="1"/><text x="40.4562%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.26%)</title><rect x="40.2062%" y="501" width="0.2577%" height="15" fill="rgb(218,69,12)" fg:x="156" fg:w="1"/><text x="40.4562%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.26%)</title><rect x="40.2062%" y="485" width="0.2577%" height="15" fill="rgb(212,87,7)" fg:x="156" fg:w="1"/><text x="40.4562%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.26%)</title><rect x="40.2062%" y="469" width="0.2577%" height="15" fill="rgb(245,114,25)" fg:x="156" fg:w="1"/><text x="40.4562%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1 samples, 0.26%)</title><rect x="40.2062%" y="453" width="0.2577%" height="15" fill="rgb(210,61,42)" fg:x="156" fg:w="1"/><text x="40.4562%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (25 samples, 6.44%)</title><rect x="40.4639%" y="581" width="6.4433%" height="15" fill="rgb(211,52,33)" fg:x="157" fg:w="25"/><text x="40.7139%" y="591.50">project1..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.26%)</title><rect x="58.7629%" y="565" width="0.2577%" height="15" fill="rgb(234,58,33)" fg:x="228" fg:w="1"/><text x="59.0129%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.26%)</title><rect x="58.7629%" y="549" width="0.2577%" height="15" fill="rgb(220,115,36)" fg:x="228" fg:w="1"/><text x="59.0129%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.26%)</title><rect x="58.7629%" y="533" width="0.2577%" height="15" fill="rgb(243,153,54)" fg:x="228" fg:w="1"/><text x="59.0129%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.52%)</title><rect x="59.0206%" y="533" width="0.5155%" height="15" fill="rgb(251,47,18)" fg:x="229" fg:w="2"/><text x="59.2706%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 1.29%)</title><rect x="59.0206%" y="565" width="1.2887%" height="15" fill="rgb(242,102,42)" fg:x="229" fg:w="5"/><text x="59.2706%" y="575.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 1.29%)</title><rect x="59.0206%" y="549" width="1.2887%" height="15" fill="rgb(234,31,38)" fg:x="229" fg:w="5"/><text x="59.2706%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (3 samples, 0.77%)</title><rect x="59.5361%" y="533" width="0.7732%" height="15" fill="rgb(221,117,51)" fg:x="231" fg:w="3"/><text x="59.7861%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.52%)</title><rect x="60.3093%" y="533" width="0.5155%" height="15" fill="rgb(212,20,18)" fg:x="234" fg:w="2"/><text x="60.5593%" y="543.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (5 samples, 1.29%)</title><rect x="60.3093%" y="565" width="1.2887%" height="15" fill="rgb(245,133,36)" fg:x="234" fg:w="5"/><text x="60.5593%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 1.29%)</title><rect x="60.3093%" y="549" width="1.2887%" height="15" fill="rgb(212,6,19)" fg:x="234" fg:w="5"/><text x="60.5593%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.77%)</title><rect x="60.8247%" y="533" width="0.7732%" height="15" fill="rgb(218,1,36)" fg:x="236" fg:w="3"/><text x="61.0747%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.77%)</title><rect x="60.8247%" y="517" width="0.7732%" height="15" fill="rgb(246,84,54)" fg:x="236" fg:w="3"/><text x="61.0747%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (5 samples, 1.29%)</title><rect x="61.5979%" y="565" width="1.2887%" height="15" fill="rgb(242,110,6)" fg:x="239" fg:w="5"/><text x="61.8479%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 1.29%)</title><rect x="61.5979%" y="549" width="1.2887%" height="15" fill="rgb(214,47,5)" fg:x="239" fg:w="5"/><text x="61.8479%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 1.29%)</title><rect x="61.5979%" y="533" width="1.2887%" height="15" fill="rgb(218,159,25)" fg:x="239" fg:w="5"/><text x="61.8479%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 1.29%)</title><rect x="61.5979%" y="517" width="1.2887%" height="15" fill="rgb(215,211,28)" fg:x="239" fg:w="5"/><text x="61.8479%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 1.29%)</title><rect x="61.5979%" y="501" width="1.2887%" height="15" fill="rgb(238,59,32)" fg:x="239" fg:w="5"/><text x="61.8479%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (23 samples, 5.93%)</title><rect x="62.8866%" y="533" width="5.9278%" height="15" fill="rgb(226,82,3)" fg:x="244" fg:w="23"/><text x="63.1366%" y="543.50">core::op..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (23 samples, 5.93%)</title><rect x="62.8866%" y="517" width="5.9278%" height="15" fill="rgb(240,164,32)" fg:x="244" fg:w="23"/><text x="63.1366%" y="527.50">slotmap:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.77%)</title><rect x="68.8144%" y="533" width="0.7732%" height="15" fill="rgb(232,46,7)" fg:x="267" fg:w="3"/><text x="69.0644%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.77%)</title><rect x="68.8144%" y="517" width="0.7732%" height="15" fill="rgb(229,129,53)" fg:x="267" fg:w="3"/><text x="69.0644%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (27 samples, 6.96%)</title><rect x="62.8866%" y="565" width="6.9588%" height="15" fill="rgb(234,188,29)" fg:x="244" fg:w="27"/><text x="63.1366%" y="575.50">&lt;project1..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (27 samples, 6.96%)</title><rect x="62.8866%" y="549" width="6.9588%" height="15" fill="rgb(246,141,4)" fg:x="244" fg:w="27"/><text x="63.1366%" y="559.50">slotmap::..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.26%)</title><rect x="69.5876%" y="533" width="0.2577%" height="15" fill="rgb(229,23,39)" fg:x="270" fg:w="1"/><text x="69.8376%" y="543.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (21 samples, 5.41%)</title><rect x="69.8454%" y="565" width="5.4124%" height="15" fill="rgb(206,12,3)" fg:x="271" fg:w="21"/><text x="70.0954%" y="575.50">&lt;projec..</text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.26%)</title><rect x="76.2887%" y="389" width="0.2577%" height="15" fill="rgb(252,226,20)" fg:x="296" fg:w="1"/><text x="76.5387%" y="399.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="357" width="0.2577%" height="15" fill="rgb(216,123,35)" fg:x="297" fg:w="1"/><text x="76.7964%" y="367.50"></text></g><g><title>exc_page_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="341" width="0.2577%" height="15" fill="rgb(212,68,40)" fg:x="297" fg:w="1"/><text x="76.7964%" y="351.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="325" width="0.2577%" height="15" fill="rgb(254,125,32)" fg:x="297" fg:w="1"/><text x="76.7964%" y="335.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="309" width="0.2577%" height="15" fill="rgb(253,97,22)" fg:x="297" fg:w="1"/><text x="76.7964%" y="319.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="293" width="0.2577%" height="15" fill="rgb(241,101,14)" fg:x="297" fg:w="1"/><text x="76.7964%" y="303.50"></text></g><g><title>handle_pte_fault (1 samples, 0.26%)</title><rect x="76.5464%" y="277" width="0.2577%" height="15" fill="rgb(238,103,29)" fg:x="297" fg:w="1"/><text x="76.7964%" y="287.50"></text></g><g><title>do_anonymous_page (1 samples, 0.26%)</title><rect x="76.5464%" y="261" width="0.2577%" height="15" fill="rgb(233,195,47)" fg:x="297" fg:w="1"/><text x="76.7964%" y="271.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.26%)</title><rect x="76.5464%" y="245" width="0.2577%" height="15" fill="rgb(246,218,30)" fg:x="297" fg:w="1"/><text x="76.7964%" y="255.50"></text></g><g><title>__folio_alloc (1 samples, 0.26%)</title><rect x="76.5464%" y="229" width="0.2577%" height="15" fill="rgb(219,145,47)" fg:x="297" fg:w="1"/><text x="76.7964%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.77%)</title><rect x="76.2887%" y="549" width="0.7732%" height="15" fill="rgb(243,12,26)" fg:x="296" fg:w="3"/><text x="76.5387%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.77%)</title><rect x="76.2887%" y="533" width="0.7732%" height="15" fill="rgb(214,87,16)" fg:x="296" fg:w="3"/><text x="76.5387%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.77%)</title><rect x="76.2887%" y="517" width="0.7732%" height="15" fill="rgb(208,99,42)" fg:x="296" fg:w="3"/><text x="76.5387%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.77%)</title><rect x="76.2887%" y="501" width="0.7732%" height="15" fill="rgb(253,99,2)" fg:x="296" fg:w="3"/><text x="76.5387%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.77%)</title><rect x="76.2887%" y="485" width="0.7732%" height="15" fill="rgb(220,168,23)" fg:x="296" fg:w="3"/><text x="76.5387%" y="495.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.77%)</title><rect x="76.2887%" y="469" width="0.7732%" height="15" fill="rgb(242,38,24)" fg:x="296" fg:w="3"/><text x="76.5387%" y="479.50"></text></g><g><title>__rdl_realloc (3 samples, 0.77%)</title><rect x="76.2887%" y="453" width="0.7732%" height="15" fill="rgb(225,182,9)" fg:x="296" fg:w="3"/><text x="76.5387%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.77%)</title><rect x="76.2887%" y="437" width="0.7732%" height="15" fill="rgb(243,178,37)" fg:x="296" fg:w="3"/><text x="76.5387%" y="447.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.77%)</title><rect x="76.2887%" y="421" width="0.7732%" height="15" fill="rgb(232,139,19)" fg:x="296" fg:w="3"/><text x="76.5387%" y="431.50"></text></g><g><title>_int_realloc (3 samples, 0.77%)</title><rect x="76.2887%" y="405" width="0.7732%" height="15" fill="rgb(225,201,24)" fg:x="296" fg:w="3"/><text x="76.5387%" y="415.50"></text></g><g><title>_int_malloc (2 samples, 0.52%)</title><rect x="76.5464%" y="389" width="0.5155%" height="15" fill="rgb(221,47,46)" fg:x="297" fg:w="2"/><text x="76.7964%" y="399.50"></text></g><g><title>sysmalloc (2 samples, 0.52%)</title><rect x="76.5464%" y="373" width="0.5155%" height="15" fill="rgb(249,23,13)" fg:x="297" fg:w="2"/><text x="76.7964%" y="383.50"></text></g><g><title>grow_heap (1 samples, 0.26%)</title><rect x="76.8041%" y="357" width="0.2577%" height="15" fill="rgb(219,9,5)" fg:x="298" fg:w="1"/><text x="77.0541%" y="367.50"></text></g><g><title>__GI___mprotect (1 samples, 0.26%)</title><rect x="76.8041%" y="341" width="0.2577%" height="15" fill="rgb(254,171,16)" fg:x="298" fg:w="1"/><text x="77.0541%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="76.8041%" y="325" width="0.2577%" height="15" fill="rgb(230,171,20)" fg:x="298" fg:w="1"/><text x="77.0541%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="76.8041%" y="309" width="0.2577%" height="15" fill="rgb(210,71,41)" fg:x="298" fg:w="1"/><text x="77.0541%" y="319.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.26%)</title><rect x="76.8041%" y="293" width="0.2577%" height="15" fill="rgb(206,173,20)" fg:x="298" fg:w="1"/><text x="77.0541%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 2.58%)</title><rect x="75.2577%" y="565" width="2.5773%" height="15" fill="rgb(233,88,34)" fg:x="292" fg:w="10"/><text x="75.5077%" y="575.50">al..</text></g><g><title>core::ptr::write (3 samples, 0.77%)</title><rect x="77.0619%" y="549" width="0.7732%" height="15" fill="rgb(223,209,46)" fg:x="299" fg:w="3"/><text x="77.3119%" y="559.50"></text></g><g><title>core::cmp::PartialOrd::le (3 samples, 0.77%)</title><rect x="77.8351%" y="565" width="0.7732%" height="15" fill="rgb(250,43,18)" fg:x="302" fg:w="3"/><text x="78.0851%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.52%)</title><rect x="78.6082%" y="565" width="0.5155%" height="15" fill="rgb(208,13,10)" fg:x="305" fg:w="2"/><text x="78.8582%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.52%)</title><rect x="78.6082%" y="549" width="0.5155%" height="15" fill="rgb(212,200,36)" fg:x="305" fg:w="2"/><text x="78.8582%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.52%)</title><rect x="78.6082%" y="533" width="0.5155%" height="15" fill="rgb(225,90,30)" fg:x="305" fg:w="2"/><text x="78.8582%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (2 samples, 0.52%)</title><rect x="79.1237%" y="565" width="0.5155%" height="15" fill="rgb(236,182,39)" fg:x="307" fg:w="2"/><text x="79.3737%" y="575.50"></text></g><g><title>core::ptr::swap (2 samples, 0.52%)</title><rect x="79.1237%" y="549" width="0.5155%" height="15" fill="rgb(212,144,35)" fg:x="307" fg:w="2"/><text x="79.3737%" y="559.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.52%)</title><rect x="79.1237%" y="533" width="0.5155%" height="15" fill="rgb(228,63,44)" fg:x="307" fg:w="2"/><text x="79.3737%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="79.3814%" y="517" width="0.2577%" height="15" fill="rgb(228,109,6)" fg:x="308" fg:w="1"/><text x="79.6314%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="79.3814%" y="501" width="0.2577%" height="15" fill="rgb(238,117,24)" fg:x="308" fg:w="1"/><text x="79.6314%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="79.3814%" y="485" width="0.2577%" height="15" fill="rgb(242,26,26)" fg:x="308" fg:w="1"/><text x="79.6314%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.26%)</title><rect x="79.3814%" y="469" width="0.2577%" height="15" fill="rgb(221,92,48)" fg:x="308" fg:w="1"/><text x="79.6314%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.26%)</title><rect x="79.3814%" y="453" width="0.2577%" height="15" fill="rgb(209,209,32)" fg:x="308" fg:w="1"/><text x="79.6314%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.26%)</title><rect x="79.3814%" y="437" width="0.2577%" height="15" fill="rgb(221,70,22)" fg:x="308" fg:w="1"/><text x="79.6314%" y="447.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.26%)</title><rect x="79.3814%" y="421" width="0.2577%" height="15" fill="rgb(248,145,5)" fg:x="308" fg:w="1"/><text x="79.6314%" y="431.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.26%)</title><rect x="79.3814%" y="405" width="0.2577%" height="15" fill="rgb(226,116,26)" fg:x="308" fg:w="1"/><text x="79.6314%" y="415.50"></text></g><g><title>update_wall_time (1 samples, 0.26%)</title><rect x="79.3814%" y="389" width="0.2577%" height="15" fill="rgb(244,5,17)" fg:x="308" fg:w="1"/><text x="79.6314%" y="399.50"></text></g><g><title>timekeeping_advance (1 samples, 0.26%)</title><rect x="79.3814%" y="373" width="0.2577%" height="15" fill="rgb(252,159,33)" fg:x="308" fg:w="1"/><text x="79.6314%" y="383.50"></text></g><g><title>timekeeping_update (1 samples, 0.26%)</title><rect x="79.3814%" y="357" width="0.2577%" height="15" fill="rgb(206,71,0)" fg:x="308" fg:w="1"/><text x="79.6314%" y="367.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.26%)</title><rect x="79.3814%" y="341" width="0.2577%" height="15" fill="rgb(233,118,54)" fg:x="308" fg:w="1"/><text x="79.6314%" y="351.50"></text></g><g><title>log::max_level (14 samples, 3.61%)</title><rect x="79.6392%" y="565" width="3.6082%" height="15" fill="rgb(234,83,48)" fg:x="309" fg:w="14"/><text x="79.8892%" y="575.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 3.61%)</title><rect x="79.6392%" y="549" width="3.6082%" height="15" fill="rgb(228,3,54)" fg:x="309" fg:w="14"/><text x="79.8892%" y="559.50">core..</text></g><g><title>core::sync::atomic::atomic_load (14 samples, 3.61%)</title><rect x="79.6392%" y="533" width="3.6082%" height="15" fill="rgb(226,155,13)" fg:x="309" fg:w="14"/><text x="79.8892%" y="543.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.26%)</title><rect x="84.5361%" y="549" width="0.2577%" height="15" fill="rgb(241,28,37)" fg:x="328" fg:w="1"/><text x="84.7861%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.26%)</title><rect x="84.5361%" y="533" width="0.2577%" height="15" fill="rgb(233,93,10)" fg:x="328" fg:w="1"/><text x="84.7861%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.26%)</title><rect x="84.5361%" y="517" width="0.2577%" height="15" fill="rgb(225,113,19)" fg:x="328" fg:w="1"/><text x="84.7861%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.26%)</title><rect x="84.5361%" y="501" width="0.2577%" height="15" fill="rgb(241,2,18)" fg:x="328" fg:w="1"/><text x="84.7861%" y="511.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (1 samples, 0.26%)</title><rect x="84.7938%" y="549" width="0.2577%" height="15" fill="rgb(228,207,21)" fg:x="329" fg:w="1"/><text x="85.0438%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.26%)</title><rect x="84.7938%" y="533" width="0.2577%" height="15" fill="rgb(213,211,35)" fg:x="329" fg:w="1"/><text x="85.0438%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.26%)</title><rect x="84.7938%" y="517" width="0.2577%" height="15" fill="rgb(209,83,10)" fg:x="329" fg:w="1"/><text x="85.0438%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.26%)</title><rect x="84.7938%" y="501" width="0.2577%" height="15" fill="rgb(209,164,1)" fg:x="329" fg:w="1"/><text x="85.0438%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (8 samples, 2.06%)</title><rect x="83.2474%" y="565" width="2.0619%" height="15" fill="rgb(213,184,43)" fg:x="323" fg:w="8"/><text x="83.4974%" y="575.50">p..</text></g><g><title>project1::solver::types::Lit::var_idx (1 samples, 0.26%)</title><rect x="85.0515%" y="549" width="0.2577%" height="15" fill="rgb(231,61,34)" fg:x="330" fg:w="1"/><text x="85.3015%" y="559.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.26%)</title><rect x="85.0515%" y="533" width="0.2577%" height="15" fill="rgb(235,75,3)" fg:x="330" fg:w="1"/><text x="85.3015%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.52%)</title><rect x="85.3093%" y="549" width="0.5155%" height="15" fill="rgb(220,106,47)" fg:x="331" fg:w="2"/><text x="85.5593%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.52%)</title><rect x="85.3093%" y="533" width="0.5155%" height="15" fill="rgb(210,196,33)" fg:x="331" fg:w="2"/><text x="85.5593%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.52%)</title><rect x="85.3093%" y="517" width="0.5155%" height="15" fill="rgb(229,154,42)" fg:x="331" fg:w="2"/><text x="85.5593%" y="527.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (16 samples, 4.12%)</title><rect x="85.8247%" y="533" width="4.1237%" height="15" fill="rgb(228,114,26)" fg:x="333" fg:w="16"/><text x="86.0747%" y="543.50">&lt;pro..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (25 samples, 6.44%)</title><rect x="85.8247%" y="549" width="6.4433%" height="15" fill="rgb(208,144,1)" fg:x="333" fg:w="25"/><text x="86.0747%" y="559.50">&lt;project..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (9 samples, 2.32%)</title><rect x="89.9485%" y="533" width="2.3196%" height="15" fill="rgb(239,112,37)" fg:x="349" fg:w="9"/><text x="90.1985%" y="543.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.26%)</title><rect x="92.2680%" y="549" width="0.2577%" height="15" fill="rgb(210,96,50)" fg:x="358" fg:w="1"/><text x="92.5180%" y="559.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (10 samples, 2.58%)</title><rect x="92.5258%" y="533" width="2.5773%" height="15" fill="rgb(222,178,2)" fg:x="359" fg:w="10"/><text x="92.7758%" y="543.50">&lt;i..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (39 samples, 10.05%)</title><rect x="85.3093%" y="565" width="10.0515%" height="15" fill="rgb(226,74,18)" fg:x="331" fg:w="39"/><text x="85.5593%" y="575.50">project1::solve..</text></g><g><title>project1::solver::types::Lit::var_idx (11 samples, 2.84%)</title><rect x="92.5258%" y="549" width="2.8351%" height="15" fill="rgb(225,67,54)" fg:x="359" fg:w="11"/><text x="92.7758%" y="559.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.26%)</title><rect x="95.1031%" y="533" width="0.2577%" height="15" fill="rgb(251,92,32)" fg:x="369" fg:w="1"/><text x="95.3531%" y="543.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (1 samples, 0.26%)</title><rect x="95.3608%" y="565" width="0.2577%" height="15" fill="rgb(228,149,22)" fg:x="370" fg:w="1"/><text x="95.6108%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.26%)</title><rect x="95.3608%" y="549" width="0.2577%" height="15" fill="rgb(243,54,13)" fg:x="370" fg:w="1"/><text x="95.6108%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.26%)</title><rect x="95.3608%" y="533" width="0.2577%" height="15" fill="rgb(243,180,28)" fg:x="370" fg:w="1"/><text x="95.6108%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.26%)</title><rect x="95.3608%" y="517" width="0.2577%" height="15" fill="rgb(208,167,24)" fg:x="370" fg:w="1"/><text x="95.6108%" y="527.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (3 samples, 0.77%)</title><rect x="95.6186%" y="565" width="0.7732%" height="15" fill="rgb(245,73,45)" fg:x="371" fg:w="3"/><text x="95.8686%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (1 samples, 0.26%)</title><rect x="96.1340%" y="549" width="0.2577%" height="15" fill="rgb(237,203,48)" fg:x="373" fg:w="1"/><text x="96.3840%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (1 samples, 0.26%)</title><rect x="96.1340%" y="533" width="0.2577%" height="15" fill="rgb(211,197,16)" fg:x="373" fg:w="1"/><text x="96.3840%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="96.1340%" y="517" width="0.2577%" height="15" fill="rgb(243,99,51)" fg:x="373" fg:w="1"/><text x="96.3840%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.26%)</title><rect x="96.1340%" y="501" width="0.2577%" height="15" fill="rgb(215,123,29)" fg:x="373" fg:w="1"/><text x="96.3840%" y="511.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (1 samples, 0.26%)</title><rect x="96.3918%" y="565" width="0.2577%" height="15" fill="rgb(239,186,37)" fg:x="374" fg:w="1"/><text x="96.6418%" y="575.50"></text></g><g><title>core::mem::take (1 samples, 0.26%)</title><rect x="96.3918%" y="549" width="0.2577%" height="15" fill="rgb(252,136,39)" fg:x="374" fg:w="1"/><text x="96.6418%" y="559.50"></text></g><g><title>core::mem::replace (1 samples, 0.26%)</title><rect x="96.3918%" y="533" width="0.2577%" height="15" fill="rgb(223,213,32)" fg:x="374" fg:w="1"/><text x="96.6418%" y="543.50"></text></g><g><title>core::ptr::read (1 samples, 0.26%)</title><rect x="96.3918%" y="517" width="0.2577%" height="15" fill="rgb(233,115,5)" fg:x="374" fg:w="1"/><text x="96.6418%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (368 samples, 94.85%)</title><rect x="2.3196%" y="805" width="94.8454%" height="15" fill="rgb(207,226,44)" fg:x="9" fg:w="368"/><text x="2.5696%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (368 samples, 94.85%)</title><rect x="2.3196%" y="789" width="94.8454%" height="15" fill="rgb(208,126,0)" fg:x="9" fg:w="368"/><text x="2.5696%" y="799.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (368 samples, 94.85%)</title><rect x="2.3196%" y="773" width="94.8454%" height="15" fill="rgb(244,66,21)" fg:x="9" fg:w="368"/><text x="2.5696%" y="783.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (368 samples, 94.85%)</title><rect x="2.3196%" y="757" width="94.8454%" height="15" fill="rgb(222,97,12)" fg:x="9" fg:w="368"/><text x="2.5696%" y="767.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (368 samples, 94.85%)</title><rect x="2.3196%" y="741" width="94.8454%" height="15" fill="rgb(219,213,19)" fg:x="9" fg:w="368"/><text x="2.5696%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (368 samples, 94.85%)</title><rect x="2.3196%" y="725" width="94.8454%" height="15" fill="rgb(252,169,30)" fg:x="9" fg:w="368"/><text x="2.5696%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (368 samples, 94.85%)</title><rect x="2.3196%" y="709" width="94.8454%" height="15" fill="rgb(206,32,51)" fg:x="9" fg:w="368"/><text x="2.5696%" y="719.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (368 samples, 94.85%)</title><rect x="2.3196%" y="693" width="94.8454%" height="15" fill="rgb(250,172,42)" fg:x="9" fg:w="368"/><text x="2.5696%" y="703.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (368 samples, 94.85%)</title><rect x="2.3196%" y="677" width="94.8454%" height="15" fill="rgb(209,34,43)" fg:x="9" fg:w="368"/><text x="2.5696%" y="687.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (368 samples, 94.85%)</title><rect x="2.3196%" y="661" width="94.8454%" height="15" fill="rgb(223,11,35)" fg:x="9" fg:w="368"/><text x="2.5696%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (368 samples, 94.85%)</title><rect x="2.3196%" y="645" width="94.8454%" height="15" fill="rgb(251,219,26)" fg:x="9" fg:w="368"/><text x="2.5696%" y="655.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (366 samples, 94.33%)</title><rect x="2.8351%" y="629" width="94.3299%" height="15" fill="rgb(231,119,3)" fg:x="11" fg:w="366"/><text x="3.0851%" y="639.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (366 samples, 94.33%)</title><rect x="2.8351%" y="613" width="94.3299%" height="15" fill="rgb(216,97,11)" fg:x="11" fg:w="366"/><text x="3.0851%" y="623.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (220 samples, 56.70%)</title><rect x="40.4639%" y="597" width="56.7010%" height="15" fill="rgb(223,59,9)" fg:x="157" fg:w="220"/><text x="40.7139%" y="607.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (195 samples, 50.26%)</title><rect x="46.9072%" y="581" width="50.2577%" height="15" fill="rgb(233,93,31)" fg:x="182" fg:w="195"/><text x="47.1572%" y="591.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::watch_list::Watcher::new (2 samples, 0.52%)</title><rect x="96.6495%" y="565" width="0.5155%" height="15" fill="rgb(239,81,33)" fg:x="375" fg:w="2"/><text x="96.8995%" y="575.50"></text></g><g><title>__clone3 (369 samples, 95.10%)</title><rect x="2.3196%" y="853" width="95.1031%" height="15" fill="rgb(213,120,34)" fg:x="9" fg:w="369"/><text x="2.5696%" y="863.50">__clone3</text></g><g><title>start_thread (369 samples, 95.10%)</title><rect x="2.3196%" y="837" width="95.1031%" height="15" fill="rgb(243,49,53)" fg:x="9" fg:w="369"/><text x="2.5696%" y="847.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (369 samples, 95.10%)</title><rect x="2.3196%" y="821" width="95.1031%" height="15" fill="rgb(247,216,33)" fg:x="9" fg:w="369"/><text x="2.5696%" y="831.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.26%)</title><rect x="97.1649%" y="805" width="0.2577%" height="15" fill="rgb(226,26,14)" fg:x="377" fg:w="1"/><text x="97.4149%" y="815.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.26%)</title><rect x="97.1649%" y="789" width="0.2577%" height="15" fill="rgb(215,49,53)" fg:x="377" fg:w="1"/><text x="97.4149%" y="799.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.26%)</title><rect x="97.1649%" y="773" width="0.2577%" height="15" fill="rgb(245,162,40)" fg:x="377" fg:w="1"/><text x="97.4149%" y="783.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.26%)</title><rect x="97.1649%" y="757" width="0.2577%" height="15" fill="rgb(229,68,17)" fg:x="377" fg:w="1"/><text x="97.4149%" y="767.50"></text></g><g><title>__libc_start_main_impl (1 samples, 0.26%)</title><rect x="97.4227%" y="837" width="0.2577%" height="15" fill="rgb(213,182,10)" fg:x="378" fg:w="1"/><text x="97.6727%" y="847.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.26%)</title><rect x="97.4227%" y="821" width="0.2577%" height="15" fill="rgb(245,125,30)" fg:x="378" fg:w="1"/><text x="97.6727%" y="831.50"></text></g><g><title>main (1 samples, 0.26%)</title><rect x="97.4227%" y="805" width="0.2577%" height="15" fill="rgb(232,202,2)" fg:x="378" fg:w="1"/><text x="97.6727%" y="815.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.26%)</title><rect x="97.4227%" y="789" width="0.2577%" height="15" fill="rgb(237,140,51)" fg:x="378" fg:w="1"/><text x="97.6727%" y="799.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.26%)</title><rect x="97.4227%" y="773" width="0.2577%" height="15" fill="rgb(236,157,25)" fg:x="378" fg:w="1"/><text x="97.6727%" y="783.50"></text></g><g><title>std::panicking::try (1 samples, 0.26%)</title><rect x="97.4227%" y="757" width="0.2577%" height="15" fill="rgb(219,209,0)" fg:x="378" fg:w="1"/><text x="97.6727%" y="767.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.26%)</title><rect x="97.4227%" y="741" width="0.2577%" height="15" fill="rgb(240,116,54)" fg:x="378" fg:w="1"/><text x="97.6727%" y="751.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.26%)</title><rect x="97.4227%" y="725" width="0.2577%" height="15" fill="rgb(216,10,36)" fg:x="378" fg:w="1"/><text x="97.6727%" y="735.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.26%)</title><rect x="97.4227%" y="709" width="0.2577%" height="15" fill="rgb(222,72,44)" fg:x="378" fg:w="1"/><text x="97.6727%" y="719.50"></text></g><g><title>std::panicking::try (1 samples, 0.26%)</title><rect x="97.4227%" y="693" width="0.2577%" height="15" fill="rgb(232,159,9)" fg:x="378" fg:w="1"/><text x="97.6727%" y="703.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.26%)</title><rect x="97.4227%" y="677" width="0.2577%" height="15" fill="rgb(210,39,32)" fg:x="378" fg:w="1"/><text x="97.6727%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.26%)</title><rect x="97.4227%" y="661" width="0.2577%" height="15" fill="rgb(216,194,45)" fg:x="378" fg:w="1"/><text x="97.6727%" y="671.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.26%)</title><rect x="97.4227%" y="645" width="0.2577%" height="15" fill="rgb(218,18,35)" fg:x="378" fg:w="1"/><text x="97.6727%" y="655.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.26%)</title><rect x="97.4227%" y="629" width="0.2577%" height="15" fill="rgb(207,83,51)" fg:x="378" fg:w="1"/><text x="97.6727%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.26%)</title><rect x="97.4227%" y="613" width="0.2577%" height="15" fill="rgb(225,63,43)" fg:x="378" fg:w="1"/><text x="97.6727%" y="623.50"></text></g><g><title>project1::main (1 samples, 0.26%)</title><rect x="97.4227%" y="597" width="0.2577%" height="15" fill="rgb(207,57,36)" fg:x="378" fg:w="1"/><text x="97.6727%" y="607.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.26%)</title><rect x="97.4227%" y="581" width="0.2577%" height="15" fill="rgb(216,99,33)" fg:x="378" fg:w="1"/><text x="97.6727%" y="591.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.26%)</title><rect x="97.4227%" y="565" width="0.2577%" height="15" fill="rgb(225,42,16)" fg:x="378" fg:w="1"/><text x="97.6727%" y="575.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.26%)</title><rect x="97.4227%" y="549" width="0.2577%" height="15" fill="rgb(220,201,45)" fg:x="378" fg:w="1"/><text x="97.6727%" y="559.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.26%)</title><rect x="97.4227%" y="533" width="0.2577%" height="15" fill="rgb(225,33,4)" fg:x="378" fg:w="1"/><text x="97.6727%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.26%)</title><rect x="97.4227%" y="517" width="0.2577%" height="15" fill="rgb(224,33,50)" fg:x="378" fg:w="1"/><text x="97.6727%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.26%)</title><rect x="97.4227%" y="501" width="0.2577%" height="15" fill="rgb(246,198,51)" fg:x="378" fg:w="1"/><text x="97.6727%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.26%)</title><rect x="97.4227%" y="485" width="0.2577%" height="15" fill="rgb(205,22,4)" fg:x="378" fg:w="1"/><text x="97.6727%" y="495.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.26%)</title><rect x="97.4227%" y="469" width="0.2577%" height="15" fill="rgb(206,3,8)" fg:x="378" fg:w="1"/><text x="97.6727%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="453" width="0.2577%" height="15" fill="rgb(251,23,15)" fg:x="378" fg:w="1"/><text x="97.6727%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="437" width="0.2577%" height="15" fill="rgb(252,88,28)" fg:x="378" fg:w="1"/><text x="97.6727%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="421" width="0.2577%" height="15" fill="rgb(212,127,14)" fg:x="378" fg:w="1"/><text x="97.6727%" y="431.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="405" width="0.2577%" height="15" fill="rgb(247,145,37)" fg:x="378" fg:w="1"/><text x="97.6727%" y="415.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.26%)</title><rect x="97.4227%" y="389" width="0.2577%" height="15" fill="rgb(209,117,53)" fg:x="378" fg:w="1"/><text x="97.6727%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="373" width="0.2577%" height="15" fill="rgb(212,90,42)" fg:x="378" fg:w="1"/><text x="97.6727%" y="383.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.26%)</title><rect x="97.4227%" y="357" width="0.2577%" height="15" fill="rgb(218,164,37)" fg:x="378" fg:w="1"/><text x="97.6727%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.26%)</title><rect x="97.4227%" y="341" width="0.2577%" height="15" fill="rgb(246,65,34)" fg:x="378" fg:w="1"/><text x="97.6727%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.26%)</title><rect x="97.4227%" y="325" width="0.2577%" height="15" fill="rgb(231,100,33)" fg:x="378" fg:w="1"/><text x="97.6727%" y="335.50"></text></g><g><title>__GI___libc_write (1 samples, 0.26%)</title><rect x="97.4227%" y="309" width="0.2577%" height="15" fill="rgb(228,126,14)" fg:x="378" fg:w="1"/><text x="97.6727%" y="319.50"></text></g><g><title>__GI___libc_write (1 samples, 0.26%)</title><rect x="97.4227%" y="293" width="0.2577%" height="15" fill="rgb(215,173,21)" fg:x="378" fg:w="1"/><text x="97.6727%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="97.4227%" y="277" width="0.2577%" height="15" fill="rgb(210,6,40)" fg:x="378" fg:w="1"/><text x="97.6727%" y="287.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="97.4227%" y="261" width="0.2577%" height="15" fill="rgb(212,48,18)" fg:x="378" fg:w="1"/><text x="97.6727%" y="271.50"></text></g><g><title>__x64_sys_write (1 samples, 0.26%)</title><rect x="97.4227%" y="245" width="0.2577%" height="15" fill="rgb(230,214,11)" fg:x="378" fg:w="1"/><text x="97.6727%" y="255.50"></text></g><g><title>ksys_write (1 samples, 0.26%)</title><rect x="97.4227%" y="229" width="0.2577%" height="15" fill="rgb(254,105,39)" fg:x="378" fg:w="1"/><text x="97.6727%" y="239.50"></text></g><g><title>vfs_write (1 samples, 0.26%)</title><rect x="97.4227%" y="213" width="0.2577%" height="15" fill="rgb(245,158,5)" fg:x="378" fg:w="1"/><text x="97.6727%" y="223.50"></text></g><g><title>new_sync_write (1 samples, 0.26%)</title><rect x="97.4227%" y="197" width="0.2577%" height="15" fill="rgb(249,208,11)" fg:x="378" fg:w="1"/><text x="97.6727%" y="207.50"></text></g><g><title>ext4_file_write_iter (1 samples, 0.26%)</title><rect x="97.4227%" y="181" width="0.2577%" height="15" fill="rgb(210,39,28)" fg:x="378" fg:w="1"/><text x="97.6727%" y="191.50"></text></g><g><title>ext4_buffered_write_iter (1 samples, 0.26%)</title><rect x="97.4227%" y="165" width="0.2577%" height="15" fill="rgb(211,56,53)" fg:x="378" fg:w="1"/><text x="97.6727%" y="175.50"></text></g><g><title>generic_perform_write (1 samples, 0.26%)</title><rect x="97.4227%" y="149" width="0.2577%" height="15" fill="rgb(226,201,30)" fg:x="378" fg:w="1"/><text x="97.6727%" y="159.50"></text></g><g><title>balance_dirty_pages_ratelimited (1 samples, 0.26%)</title><rect x="97.4227%" y="133" width="0.2577%" height="15" fill="rgb(239,101,34)" fg:x="378" fg:w="1"/><text x="97.6727%" y="143.50"></text></g><g><title>balance_dirty_pages (1 samples, 0.26%)</title><rect x="97.4227%" y="117" width="0.2577%" height="15" fill="rgb(226,209,5)" fg:x="378" fg:w="1"/><text x="97.6727%" y="127.50"></text></g><g><title>mem_cgroup_wb_stats (1 samples, 0.26%)</title><rect x="97.4227%" y="101" width="0.2577%" height="15" fill="rgb(250,105,47)" fg:x="378" fg:w="1"/><text x="97.6727%" y="111.50"></text></g><g><title>__mem_cgroup_flush_stats (1 samples, 0.26%)</title><rect x="97.4227%" y="85" width="0.2577%" height="15" fill="rgb(230,72,3)" fg:x="378" fg:w="1"/><text x="97.6727%" y="95.50"></text></g><g><title>cgroup_rstat_flush_irqsafe (1 samples, 0.26%)</title><rect x="97.4227%" y="69" width="0.2577%" height="15" fill="rgb(232,218,39)" fg:x="378" fg:w="1"/><text x="97.6727%" y="79.50"></text></g><g><title>cgroup_rstat_flush_locked (1 samples, 0.26%)</title><rect x="97.4227%" y="53" width="0.2577%" height="15" fill="rgb(248,166,6)" fg:x="378" fg:w="1"/><text x="97.6727%" y="63.50"></text></g><g><title>mem_cgroup_css_rstat_flush (1 samples, 0.26%)</title><rect x="97.4227%" y="37" width="0.2577%" height="15" fill="rgb(247,89,20)" fg:x="378" fg:w="1"/><text x="97.6727%" y="47.50"></text></g><g><title>_start (2 samples, 0.52%)</title><rect x="97.4227%" y="853" width="0.5155%" height="15" fill="rgb(248,130,54)" fg:x="378" fg:w="2"/><text x="97.6727%" y="863.50"></text></g><g><title>_dl_start (1 samples, 0.26%)</title><rect x="97.6804%" y="837" width="0.2577%" height="15" fill="rgb(234,196,4)" fg:x="379" fg:w="1"/><text x="97.9304%" y="847.50"></text></g><g><title>_dl_start_final (1 samples, 0.26%)</title><rect x="97.6804%" y="821" width="0.2577%" height="15" fill="rgb(250,143,31)" fg:x="379" fg:w="1"/><text x="97.9304%" y="831.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.26%)</title><rect x="97.6804%" y="805" width="0.2577%" height="15" fill="rgb(211,110,34)" fg:x="379" fg:w="1"/><text x="97.9304%" y="815.50"></text></g><g><title>dl_main (1 samples, 0.26%)</title><rect x="97.6804%" y="789" width="0.2577%" height="15" fill="rgb(215,124,48)" fg:x="379" fg:w="1"/><text x="97.9304%" y="799.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.26%)</title><rect x="97.6804%" y="773" width="0.2577%" height="15" fill="rgb(216,46,13)" fg:x="379" fg:w="1"/><text x="97.9304%" y="783.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.26%)</title><rect x="97.6804%" y="757" width="0.2577%" height="15" fill="rgb(205,184,25)" fg:x="379" fg:w="1"/><text x="97.9304%" y="767.50"></text></g><g><title>openaux (1 samples, 0.26%)</title><rect x="97.6804%" y="741" width="0.2577%" height="15" fill="rgb(228,1,10)" fg:x="379" fg:w="1"/><text x="97.9304%" y="751.50"></text></g><g><title>_dl_map_object (1 samples, 0.26%)</title><rect x="97.6804%" y="725" width="0.2577%" height="15" fill="rgb(213,116,27)" fg:x="379" fg:w="1"/><text x="97.9304%" y="735.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.26%)</title><rect x="97.6804%" y="709" width="0.2577%" height="15" fill="rgb(241,95,50)" fg:x="379" fg:w="1"/><text x="97.9304%" y="719.50"></text></g><g><title>_dl_map_segments (1 samples, 0.26%)</title><rect x="97.6804%" y="693" width="0.2577%" height="15" fill="rgb(238,48,32)" fg:x="379" fg:w="1"/><text x="97.9304%" y="703.50"></text></g><g><title>__mprotect (1 samples, 0.26%)</title><rect x="97.6804%" y="677" width="0.2577%" height="15" fill="rgb(235,113,49)" fg:x="379" fg:w="1"/><text x="97.9304%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="97.6804%" y="661" width="0.2577%" height="15" fill="rgb(205,127,43)" fg:x="379" fg:w="1"/><text x="97.9304%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="97.6804%" y="645" width="0.2577%" height="15" fill="rgb(250,162,2)" fg:x="379" fg:w="1"/><text x="97.9304%" y="655.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.26%)</title><rect x="97.6804%" y="629" width="0.2577%" height="15" fill="rgb(220,13,41)" fg:x="379" fg:w="1"/><text x="97.9304%" y="639.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.26%)</title><rect x="97.6804%" y="613" width="0.2577%" height="15" fill="rgb(249,221,25)" fg:x="379" fg:w="1"/><text x="97.9304%" y="623.50"></text></g><g><title>mprotect_fixup (1 samples, 0.26%)</title><rect x="97.6804%" y="597" width="0.2577%" height="15" fill="rgb(215,208,19)" fg:x="379" fg:w="1"/><text x="97.9304%" y="607.50"></text></g><g><title>split_vma (1 samples, 0.26%)</title><rect x="97.6804%" y="581" width="0.2577%" height="15" fill="rgb(236,175,2)" fg:x="379" fg:w="1"/><text x="97.9304%" y="591.50"></text></g><g><title>__split_vma (1 samples, 0.26%)</title><rect x="97.6804%" y="565" width="0.2577%" height="15" fill="rgb(241,52,2)" fg:x="379" fg:w="1"/><text x="97.9304%" y="575.50"></text></g><g><title>__vma_adjust (1 samples, 0.26%)</title><rect x="97.6804%" y="549" width="0.2577%" height="15" fill="rgb(248,140,14)" fg:x="379" fg:w="1"/><text x="97.9304%" y="559.50"></text></g><g><title>vma_interval_tree_remove (1 samples, 0.26%)</title><rect x="97.6804%" y="533" width="0.2577%" height="15" fill="rgb(253,22,42)" fg:x="379" fg:w="1"/><text x="97.9304%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="97.9381%" y="853" width="0.2577%" height="15" fill="rgb(234,61,47)" fg:x="380" fg:w="1"/><text x="98.1881%" y="863.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="97.9381%" y="837" width="0.2577%" height="15" fill="rgb(208,226,15)" fg:x="380" fg:w="1"/><text x="98.1881%" y="847.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.26%)</title><rect x="97.9381%" y="821" width="0.2577%" height="15" fill="rgb(217,221,4)" fg:x="380" fg:w="1"/><text x="98.1881%" y="831.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.26%)</title><rect x="97.9381%" y="805" width="0.2577%" height="15" fill="rgb(212,174,34)" fg:x="380" fg:w="1"/><text x="98.1881%" y="815.50"></text></g><g><title>bprm_execve (1 samples, 0.26%)</title><rect x="97.9381%" y="789" width="0.2577%" height="15" fill="rgb(253,83,4)" fg:x="380" fg:w="1"/><text x="98.1881%" y="799.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.26%)</title><rect x="97.9381%" y="773" width="0.2577%" height="15" fill="rgb(250,195,49)" fg:x="380" fg:w="1"/><text x="98.1881%" y="783.50"></text></g><g><title>exec_binprm (1 samples, 0.26%)</title><rect x="97.9381%" y="757" width="0.2577%" height="15" fill="rgb(241,192,25)" fg:x="380" fg:w="1"/><text x="98.1881%" y="767.50"></text></g><g><title>search_binary_handler (1 samples, 0.26%)</title><rect x="97.9381%" y="741" width="0.2577%" height="15" fill="rgb(208,124,10)" fg:x="380" fg:w="1"/><text x="98.1881%" y="751.50"></text></g><g><title>load_elf_binary (1 samples, 0.26%)</title><rect x="97.9381%" y="725" width="0.2577%" height="15" fill="rgb(222,33,0)" fg:x="380" fg:w="1"/><text x="98.1881%" y="735.50"></text></g><g><title>setup_arg_pages (1 samples, 0.26%)</title><rect x="97.9381%" y="709" width="0.2577%" height="15" fill="rgb(234,209,28)" fg:x="380" fg:w="1"/><text x="98.1881%" y="719.50"></text></g><g><title>shift_arg_pages (1 samples, 0.26%)</title><rect x="97.9381%" y="693" width="0.2577%" height="15" fill="rgb(224,11,23)" fg:x="380" fg:w="1"/><text x="98.1881%" y="703.50"></text></g><g><title>__vma_adjust (1 samples, 0.26%)</title><rect x="97.9381%" y="677" width="0.2577%" height="15" fill="rgb(232,99,1)" fg:x="380" fg:w="1"/><text x="98.1881%" y="687.50"></text></g><g><title>all (388 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="388"/><text x="0.2500%" y="895.50"></text></g><g><title>project1 (382 samples, 98.45%)</title><rect x="1.5464%" y="869" width="98.4536%" height="15" fill="rgb(208,109,11)" fg:x="6" fg:w="382"/><text x="1.7964%" y="879.50">project1</text></g><g><title>ret_from_fork (7 samples, 1.80%)</title><rect x="98.1959%" y="853" width="1.8041%" height="15" fill="rgb(216,190,48)" fg:x="381" fg:w="7"/><text x="98.4459%" y="863.50">r..</text></g><g><title>schedule_tail (7 samples, 1.80%)</title><rect x="98.1959%" y="837" width="1.8041%" height="15" fill="rgb(251,171,36)" fg:x="381" fg:w="7"/><text x="98.4459%" y="847.50">s..</text></g><g><title>finish_task_switch.isra.0 (7 samples, 1.80%)</title><rect x="98.1959%" y="821" width="1.8041%" height="15" fill="rgb(230,62,22)" fg:x="381" fg:w="7"/><text x="98.4459%" y="831.50">f..</text></g><g><title>__perf_event_task_sched_in (7 samples, 1.80%)</title><rect x="98.1959%" y="805" width="1.8041%" height="15" fill="rgb(225,114,35)" fg:x="381" fg:w="7"/><text x="98.4459%" y="815.50">_..</text></g><g><title>x86_pmu_enable (7 samples, 1.80%)</title><rect x="98.1959%" y="789" width="1.8041%" height="15" fill="rgb(215,118,42)" fg:x="381" fg:w="7"/><text x="98.4459%" y="799.50">x..</text></g><g><title>intel_tfa_pmu_enable_all (7 samples, 1.80%)</title><rect x="98.1959%" y="773" width="1.8041%" height="15" fill="rgb(243,119,21)" fg:x="381" fg:w="7"/><text x="98.4459%" y="783.50">i..</text></g><g><title>native_write_msr (7 samples, 1.80%)</title><rect x="98.1959%" y="757" width="1.8041%" height="15" fill="rgb(252,177,53)" fg:x="381" fg:w="7"/><text x="98.4459%" y="767.50">n..</text></g></svg></svg>