<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="3175"><g><title>perf-exec (6 samples, 0.19%)</title><rect x="0.0000%" y="821" width="0.1890%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="831.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.19%)</title><rect x="0.0000%" y="805" width="0.1890%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>do_syscall_64 (6 samples, 0.19%)</title><rect x="0.0000%" y="789" width="0.1890%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.19%)</title><rect x="0.0000%" y="773" width="0.1890%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.19%)</title><rect x="0.0000%" y="757" width="0.1890%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>bprm_execve (6 samples, 0.19%)</title><rect x="0.0000%" y="741" width="0.1890%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.19%)</title><rect x="0.0000%" y="725" width="0.1890%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>exec_binprm (6 samples, 0.19%)</title><rect x="0.0000%" y="709" width="0.1890%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>search_binary_handler (6 samples, 0.19%)</title><rect x="0.0000%" y="693" width="0.1890%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>load_elf_binary (6 samples, 0.19%)</title><rect x="0.0000%" y="677" width="0.1890%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>begin_new_exec (6 samples, 0.19%)</title><rect x="0.0000%" y="661" width="0.1890%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>perf_event_exec (6 samples, 0.19%)</title><rect x="0.0000%" y="645" width="0.1890%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>perf_event_enable_on_exec (6 samples, 0.19%)</title><rect x="0.0000%" y="629" width="0.1890%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>ctx_resched (6 samples, 0.19%)</title><rect x="0.0000%" y="613" width="0.1890%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.19%)</title><rect x="0.0000%" y="597" width="0.1890%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.19%)</title><rect x="0.0000%" y="581" width="0.1890%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>native_write_msr (6 samples, 0.19%)</title><rect x="0.0000%" y="565" width="0.1890%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50"></text></g><g><title>[[heap]] (1 samples, 0.03%)</title><rect x="0.1890%" y="805" width="0.0315%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.4390%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.03%)</title><rect x="0.1890%" y="789" width="0.0315%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.4390%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="0.2205%" y="789" width="0.0630%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="2"/><text x="0.4705%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="0.2835%" y="741" width="0.0315%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.5335%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.2835%" y="725" width="0.0315%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="1"/><text x="0.5335%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="0.2835%" y="709" width="0.0315%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="0.5335%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="0.2835%" y="693" width="0.0315%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="0.5335%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="0.2835%" y="677" width="0.0315%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5335%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="0.2835%" y="661" width="0.0315%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="0.5335%" y="671.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="0.2835%" y="645" width="0.0315%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="0.5335%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="0.2835%" y="629" width="0.0315%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="0.5335%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="0.2835%" y="613" width="0.0315%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="0.5335%" y="623.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (2 samples, 0.06%)</title><rect x="0.2835%" y="757" width="0.0630%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="2"/><text x="0.5335%" y="767.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (1 samples, 0.03%)</title><rect x="0.3150%" y="741" width="0.0315%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="0.5650%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.03%)</title><rect x="0.3150%" y="725" width="0.0315%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="0.5650%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1 samples, 0.03%)</title><rect x="0.3150%" y="709" width="0.0315%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="0.5650%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1 samples, 0.03%)</title><rect x="0.3150%" y="693" width="0.0315%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="0.5650%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1 samples, 0.03%)</title><rect x="0.3150%" y="677" width="0.0315%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="0.5650%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (1 samples, 0.03%)</title><rect x="0.3150%" y="661" width="0.0315%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="0.5650%" y="671.50"></text></g><g><title>[anon] (6 samples, 0.19%)</title><rect x="0.2205%" y="805" width="0.1890%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="6"/><text x="0.4705%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (4 samples, 0.13%)</title><rect x="0.2835%" y="789" width="0.1260%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="4"/><text x="0.5335%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (4 samples, 0.13%)</title><rect x="0.2835%" y="773" width="0.1260%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="4"/><text x="0.5335%" y="783.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (2 samples, 0.06%)</title><rect x="0.3465%" y="757" width="0.0630%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="2"/><text x="0.5965%" y="767.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (2 samples, 0.06%)</title><rect x="0.3465%" y="741" width="0.0630%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="2"/><text x="0.5965%" y="751.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="0.3465%" y="725" width="0.0630%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="2"/><text x="0.5965%" y="735.50"></text></g><g><title>__GI___libc_free (2 samples, 0.06%)</title><rect x="0.4094%" y="789" width="0.0630%" height="15" fill="rgb(235,93,37)" fg:x="13" fg:w="2"/><text x="0.6594%" y="799.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="0.4724%" y="789" width="0.0315%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="1"/><text x="0.7224%" y="799.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (1 samples, 0.03%)</title><rect x="0.4724%" y="773" width="0.0315%" height="15" fill="rgb(222,207,29)" fg:x="15" fg:w="1"/><text x="0.7224%" y="783.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.03%)</title><rect x="0.4724%" y="757" width="0.0315%" height="15" fill="rgb(206,96,30)" fg:x="15" fg:w="1"/><text x="0.7224%" y="767.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="0.5039%" y="789" width="0.0315%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="1"/><text x="0.7539%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (1 samples, 0.03%)</title><rect x="0.5354%" y="789" width="0.0315%" height="15" fill="rgb(250,191,14)" fg:x="17" fg:w="1"/><text x="0.7854%" y="799.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (6 samples, 0.19%)</title><rect x="0.5669%" y="789" width="0.1890%" height="15" fill="rgb(239,60,40)" fg:x="18" fg:w="6"/><text x="0.8169%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (5 samples, 0.16%)</title><rect x="0.5984%" y="773" width="0.1575%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="5"/><text x="0.8484%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.16%)</title><rect x="0.5984%" y="757" width="0.1575%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="5"/><text x="0.8484%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.16%)</title><rect x="0.5984%" y="741" width="0.1575%" height="15" fill="rgb(250,213,24)" fg:x="19" fg:w="5"/><text x="0.8484%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.16%)</title><rect x="0.5984%" y="725" width="0.1575%" height="15" fill="rgb(247,123,22)" fg:x="19" fg:w="5"/><text x="0.8484%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.03%)</title><rect x="0.7559%" y="789" width="0.0315%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="1"/><text x="1.0059%" y="799.50"></text></g><g><title>[unknown] (14 samples, 0.44%)</title><rect x="0.4094%" y="805" width="0.4409%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="14"/><text x="0.6594%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="0.7874%" y="789" width="0.0630%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="2"/><text x="1.0374%" y="799.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="0.8504%" y="805" width="0.0315%" height="15" fill="rgb(217,147,25)" fg:x="27" fg:w="1"/><text x="1.1004%" y="815.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::new (1 samples, 0.03%)</title><rect x="0.8819%" y="581" width="0.0315%" height="15" fill="rgb(247,81,37)" fg:x="28" fg:w="1"/><text x="1.1319%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::init (1 samples, 0.03%)</title><rect x="0.8819%" y="565" width="0.0315%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="1.1319%" y="575.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_clause (1 samples, 0.03%)</title><rect x="0.8819%" y="549" width="0.0315%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="1.1319%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (1 samples, 0.03%)</title><rect x="0.8819%" y="533" width="0.0315%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="1"/><text x="1.1319%" y="543.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (1 samples, 0.03%)</title><rect x="0.8819%" y="517" width="0.0315%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="1.1319%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="0.8819%" y="501" width="0.0315%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="1.1319%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="0.8819%" y="485" width="0.0315%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="1.1319%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="0.8819%" y="469" width="0.0315%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="1"/><text x="1.1319%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="0.8819%" y="453" width="0.0315%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="1.1319%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="0.8819%" y="437" width="0.0315%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="1"/><text x="1.1319%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="0.8819%" y="421" width="0.0315%" height="15" fill="rgb(213,79,30)" fg:x="28" fg:w="1"/><text x="1.1319%" y="431.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="0.8819%" y="405" width="0.0315%" height="15" fill="rgb(246,177,23)" fg:x="28" fg:w="1"/><text x="1.1319%" y="415.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="0.8819%" y="389" width="0.0315%" height="15" fill="rgb(230,62,27)" fg:x="28" fg:w="1"/><text x="1.1319%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="0.8819%" y="373" width="0.0315%" height="15" fill="rgb(216,154,8)" fg:x="28" fg:w="1"/><text x="1.1319%" y="383.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="0.8819%" y="357" width="0.0315%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="1"/><text x="1.1319%" y="367.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="0.8819%" y="341" width="0.0315%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="1.1319%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="0.8819%" y="325" width="0.0315%" height="15" fill="rgb(240,54,50)" fg:x="28" fg:w="1"/><text x="1.1319%" y="335.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="0.8819%" y="309" width="0.0315%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="1"/><text x="1.1319%" y="319.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="0.8819%" y="293" width="0.0315%" height="15" fill="rgb(207,117,47)" fg:x="28" fg:w="1"/><text x="1.1319%" y="303.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="0.8819%" y="277" width="0.0315%" height="15" fill="rgb(249,43,39)" fg:x="28" fg:w="1"/><text x="1.1319%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="0.8819%" y="261" width="0.0315%" height="15" fill="rgb(209,38,44)" fg:x="28" fg:w="1"/><text x="1.1319%" y="271.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="0.8819%" y="245" width="0.0315%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="1"/><text x="1.1319%" y="255.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="0.8819%" y="229" width="0.0315%" height="15" fill="rgb(242,79,21)" fg:x="28" fg:w="1"/><text x="1.1319%" y="239.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="0.8819%" y="213" width="0.0315%" height="15" fill="rgb(211,96,35)" fg:x="28" fg:w="1"/><text x="1.1319%" y="223.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="0.8819%" y="197" width="0.0315%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="1"/><text x="1.1319%" y="207.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="0.8819%" y="181" width="0.0315%" height="15" fill="rgb(211,81,21)" fg:x="28" fg:w="1"/><text x="1.1319%" y="191.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="0.8819%" y="165" width="0.0315%" height="15" fill="rgb(208,190,38)" fg:x="28" fg:w="1"/><text x="1.1319%" y="175.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="0.8819%" y="149" width="0.0315%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="1"/><text x="1.1319%" y="159.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="0.8819%" y="133" width="0.0315%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="1"/><text x="1.1319%" y="143.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.03%)</title><rect x="0.8819%" y="117" width="0.0315%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="1"/><text x="1.1319%" y="127.50"></text></g><g><title>memcpy_erms (1 samples, 0.03%)</title><rect x="0.8819%" y="101" width="0.0315%" height="15" fill="rgb(240,68,47)" fg:x="28" fg:w="1"/><text x="1.1319%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::le (2 samples, 0.06%)</title><rect x="0.9449%" y="549" width="0.0630%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="2"/><text x="1.1949%" y="559.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (2 samples, 0.06%)</title><rect x="0.9449%" y="533" width="0.0630%" height="15" fill="rgb(235,124,12)" fg:x="30" fg:w="2"/><text x="1.1949%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.06%)</title><rect x="0.9449%" y="517" width="0.0630%" height="15" fill="rgb(224,169,11)" fg:x="30" fg:w="2"/><text x="1.1949%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0079%" y="549" width="0.0315%" height="15" fill="rgb(250,166,2)" fg:x="32" fg:w="1"/><text x="1.2579%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="1.0079%" y="533" width="0.0315%" height="15" fill="rgb(242,216,29)" fg:x="32" fg:w="1"/><text x="1.2579%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.0079%" y="517" width="0.0315%" height="15" fill="rgb(230,116,27)" fg:x="32" fg:w="1"/><text x="1.2579%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="1.0079%" y="501" width="0.0315%" height="15" fill="rgb(228,99,48)" fg:x="32" fg:w="1"/><text x="1.2579%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="1.0079%" y="485" width="0.0315%" height="15" fill="rgb(253,11,6)" fg:x="32" fg:w="1"/><text x="1.2579%" y="495.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="1.0079%" y="469" width="0.0315%" height="15" fill="rgb(247,143,39)" fg:x="32" fg:w="1"/><text x="1.2579%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="1.0079%" y="453" width="0.0315%" height="15" fill="rgb(236,97,10)" fg:x="32" fg:w="1"/><text x="1.2579%" y="463.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="1.0079%" y="437" width="0.0315%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="1"/><text x="1.2579%" y="447.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="1.0079%" y="421" width="0.0315%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="1"/><text x="1.2579%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (3 samples, 0.09%)</title><rect x="1.0394%" y="549" width="0.0945%" height="15" fill="rgb(220,129,5)" fg:x="33" fg:w="3"/><text x="1.2894%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="1.1024%" y="533" width="0.0315%" height="15" fill="rgb(242,17,10)" fg:x="35" fg:w="1"/><text x="1.3524%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="1.1024%" y="517" width="0.0315%" height="15" fill="rgb(242,107,0)" fg:x="35" fg:w="1"/><text x="1.3524%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="1.1024%" y="501" width="0.0315%" height="15" fill="rgb(251,28,31)" fg:x="35" fg:w="1"/><text x="1.3524%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="1.1024%" y="485" width="0.0315%" height="15" fill="rgb(233,223,10)" fg:x="35" fg:w="1"/><text x="1.3524%" y="495.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="2.8346%" y="533" width="0.0315%" height="15" fill="rgb(215,21,27)" fg:x="90" fg:w="1"/><text x="3.0846%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="2.8346%" y="517" width="0.0315%" height="15" fill="rgb(232,23,21)" fg:x="90" fg:w="1"/><text x="3.0846%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.09%)</title><rect x="2.8661%" y="533" width="0.0945%" height="15" fill="rgb(244,5,23)" fg:x="91" fg:w="3"/><text x="3.1161%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.09%)</title><rect x="2.8661%" y="517" width="0.0945%" height="15" fill="rgb(226,81,46)" fg:x="91" fg:w="3"/><text x="3.1161%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="2.8661%" y="501" width="0.0945%" height="15" fill="rgb(247,70,30)" fg:x="91" fg:w="3"/><text x="3.1161%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.09%)</title><rect x="2.8661%" y="485" width="0.0945%" height="15" fill="rgb(212,68,19)" fg:x="91" fg:w="3"/><text x="3.1161%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="2.8661%" y="469" width="0.0945%" height="15" fill="rgb(240,187,13)" fg:x="91" fg:w="3"/><text x="3.1161%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="2.8661%" y="453" width="0.0945%" height="15" fill="rgb(223,113,26)" fg:x="91" fg:w="3"/><text x="3.1161%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="2.8661%" y="437" width="0.0945%" height="15" fill="rgb(206,192,2)" fg:x="91" fg:w="3"/><text x="3.1161%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="2.8661%" y="421" width="0.0945%" height="15" fill="rgb(241,108,4)" fg:x="91" fg:w="3"/><text x="3.1161%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="2.8661%" y="405" width="0.0945%" height="15" fill="rgb(247,173,49)" fg:x="91" fg:w="3"/><text x="3.1161%" y="415.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="2.8661%" y="389" width="0.0945%" height="15" fill="rgb(224,114,35)" fg:x="91" fg:w="3"/><text x="3.1161%" y="399.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="2.8661%" y="373" width="0.0945%" height="15" fill="rgb(245,159,27)" fg:x="91" fg:w="3"/><text x="3.1161%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="2.8661%" y="357" width="0.0945%" height="15" fill="rgb(245,172,44)" fg:x="91" fg:w="3"/><text x="3.1161%" y="367.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="2.8661%" y="341" width="0.0945%" height="15" fill="rgb(236,23,11)" fg:x="91" fg:w="3"/><text x="3.1161%" y="351.50"></text></g><g><title>tcache_get (2 samples, 0.06%)</title><rect x="2.8976%" y="325" width="0.0630%" height="15" fill="rgb(205,117,38)" fg:x="92" fg:w="2"/><text x="3.1476%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="2.9606%" y="517" width="0.0945%" height="15" fill="rgb(237,72,25)" fg:x="94" fg:w="3"/><text x="3.2106%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="2.9606%" y="533" width="0.1260%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="4"/><text x="3.2106%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="3.0551%" y="517" width="0.0315%" height="15" fill="rgb(217,125,39)" fg:x="97" fg:w="1"/><text x="3.3051%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="3.0551%" y="501" width="0.0315%" height="15" fill="rgb(235,36,10)" fg:x="97" fg:w="1"/><text x="3.3051%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="3.0866%" y="533" width="0.0630%" height="15" fill="rgb(251,123,47)" fg:x="98" fg:w="2"/><text x="3.3366%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.06%)</title><rect x="3.0866%" y="517" width="0.0630%" height="15" fill="rgb(221,13,13)" fg:x="98" fg:w="2"/><text x="3.3366%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.69%)</title><rect x="3.1496%" y="533" width="0.6929%" height="15" fill="rgb(238,131,9)" fg:x="100" fg:w="22"/><text x="3.3996%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.50%)</title><rect x="3.3386%" y="517" width="0.5039%" height="15" fill="rgb(211,50,8)" fg:x="106" fg:w="16"/><text x="3.5886%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (3 samples, 0.09%)</title><rect x="3.8425%" y="501" width="0.0945%" height="15" fill="rgb(245,182,24)" fg:x="122" fg:w="3"/><text x="4.0925%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (3 samples, 0.09%)</title><rect x="3.8425%" y="485" width="0.0945%" height="15" fill="rgb(242,14,37)" fg:x="122" fg:w="3"/><text x="4.0925%" y="495.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (4 samples, 0.13%)</title><rect x="3.8425%" y="533" width="0.1260%" height="15" fill="rgb(246,228,12)" fg:x="122" fg:w="4"/><text x="4.0925%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (4 samples, 0.13%)</title><rect x="3.8425%" y="517" width="0.1260%" height="15" fill="rgb(213,55,15)" fg:x="122" fg:w="4"/><text x="4.0925%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="3.9370%" y="501" width="0.0315%" height="15" fill="rgb(209,9,3)" fg:x="125" fg:w="1"/><text x="4.1870%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="3.9370%" y="485" width="0.0315%" height="15" fill="rgb(230,59,30)" fg:x="125" fg:w="1"/><text x="4.1870%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="3.9685%" y="533" width="0.0315%" height="15" fill="rgb(209,121,21)" fg:x="126" fg:w="1"/><text x="4.2185%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="4.2835%" y="517" width="0.0315%" height="15" fill="rgb(220,109,13)" fg:x="136" fg:w="1"/><text x="4.5335%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="4.2835%" y="501" width="0.0315%" height="15" fill="rgb(232,18,1)" fg:x="136" fg:w="1"/><text x="4.5335%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="4.2835%" y="485" width="0.0315%" height="15" fill="rgb(215,41,42)" fg:x="136" fg:w="1"/><text x="4.5335%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="4.2835%" y="469" width="0.0315%" height="15" fill="rgb(224,123,36)" fg:x="136" fg:w="1"/><text x="4.5335%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="4.2835%" y="453" width="0.0315%" height="15" fill="rgb(240,125,3)" fg:x="136" fg:w="1"/><text x="4.5335%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="4.2835%" y="437" width="0.0315%" height="15" fill="rgb(205,98,50)" fg:x="136" fg:w="1"/><text x="4.5335%" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="4.2835%" y="421" width="0.0315%" height="15" fill="rgb(205,185,37)" fg:x="136" fg:w="1"/><text x="4.5335%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="4.2835%" y="405" width="0.0315%" height="15" fill="rgb(238,207,15)" fg:x="136" fg:w="1"/><text x="4.5335%" y="415.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="4.2835%" y="389" width="0.0315%" height="15" fill="rgb(213,199,42)" fg:x="136" fg:w="1"/><text x="4.5335%" y="399.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="4.2835%" y="373" width="0.0315%" height="15" fill="rgb(235,201,11)" fg:x="136" fg:w="1"/><text x="4.5335%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="4.2835%" y="357" width="0.0315%" height="15" fill="rgb(207,46,11)" fg:x="136" fg:w="1"/><text x="4.5335%" y="367.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="4.2835%" y="341" width="0.0315%" height="15" fill="rgb(241,35,35)" fg:x="136" fg:w="1"/><text x="4.5335%" y="351.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="4.2835%" y="325" width="0.0315%" height="15" fill="rgb(243,32,47)" fg:x="136" fg:w="1"/><text x="4.5335%" y="335.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="4.2835%" y="309" width="0.0315%" height="15" fill="rgb(247,202,23)" fg:x="136" fg:w="1"/><text x="4.5335%" y="319.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="4.2835%" y="293" width="0.0315%" height="15" fill="rgb(219,102,11)" fg:x="136" fg:w="1"/><text x="4.5335%" y="303.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="4.2835%" y="277" width="0.0315%" height="15" fill="rgb(243,110,44)" fg:x="136" fg:w="1"/><text x="4.5335%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.06%)</title><rect x="4.3150%" y="517" width="0.0630%" height="15" fill="rgb(222,74,54)" fg:x="137" fg:w="2"/><text x="4.5650%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="4.3150%" y="501" width="0.0630%" height="15" fill="rgb(216,99,12)" fg:x="137" fg:w="2"/><text x="4.5650%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.54%)</title><rect x="4.0000%" y="533" width="0.5354%" height="15" fill="rgb(226,22,26)" fg:x="127" fg:w="17"/><text x="4.2500%" y="543.50"></text></g><g><title>core::ptr::write (5 samples, 0.16%)</title><rect x="4.3780%" y="517" width="0.1575%" height="15" fill="rgb(217,163,10)" fg:x="139" fg:w="5"/><text x="4.6280%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.06%)</title><rect x="4.5354%" y="533" width="0.0630%" height="15" fill="rgb(213,25,53)" fg:x="144" fg:w="2"/><text x="4.7854%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.06%)</title><rect x="4.5354%" y="517" width="0.0630%" height="15" fill="rgb(252,105,26)" fg:x="144" fg:w="2"/><text x="4.7854%" y="527.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="4.5354%" y="501" width="0.0630%" height="15" fill="rgb(220,39,43)" fg:x="144" fg:w="2"/><text x="4.7854%" y="511.50"></text></g><g><title>__memset_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="4.5354%" y="485" width="0.0630%" height="15" fill="rgb(229,68,48)" fg:x="144" fg:w="2"/><text x="4.7854%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.13%)</title><rect x="4.5984%" y="533" width="0.1260%" height="15" fill="rgb(252,8,32)" fg:x="146" fg:w="4"/><text x="4.8484%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.13%)</title><rect x="4.5984%" y="517" width="0.1260%" height="15" fill="rgb(223,20,43)" fg:x="146" fg:w="4"/><text x="4.8484%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.13%)</title><rect x="4.5984%" y="501" width="0.1260%" height="15" fill="rgb(229,81,49)" fg:x="146" fg:w="4"/><text x="4.8484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.13%)</title><rect x="4.5984%" y="485" width="0.1260%" height="15" fill="rgb(236,28,36)" fg:x="146" fg:w="4"/><text x="4.8484%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.13%)</title><rect x="4.5984%" y="469" width="0.1260%" height="15" fill="rgb(249,185,26)" fg:x="146" fg:w="4"/><text x="4.8484%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.13%)</title><rect x="4.5984%" y="453" width="0.1260%" height="15" fill="rgb(249,174,33)" fg:x="146" fg:w="4"/><text x="4.8484%" y="463.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.13%)</title><rect x="4.5984%" y="437" width="0.1260%" height="15" fill="rgb(233,201,37)" fg:x="146" fg:w="4"/><text x="4.8484%" y="447.50"></text></g><g><title>__rdl_alloc (4 samples, 0.13%)</title><rect x="4.5984%" y="421" width="0.1260%" height="15" fill="rgb(221,78,26)" fg:x="146" fg:w="4"/><text x="4.8484%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.13%)</title><rect x="4.5984%" y="405" width="0.1260%" height="15" fill="rgb(250,127,30)" fg:x="146" fg:w="4"/><text x="4.8484%" y="415.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.13%)</title><rect x="4.5984%" y="389" width="0.1260%" height="15" fill="rgb(230,49,44)" fg:x="146" fg:w="4"/><text x="4.8484%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (3 samples, 0.09%)</title><rect x="4.7244%" y="533" width="0.0945%" height="15" fill="rgb(229,67,23)" fg:x="150" fg:w="3"/><text x="4.9744%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3 samples, 0.09%)</title><rect x="4.7244%" y="517" width="0.0945%" height="15" fill="rgb(249,83,47)" fg:x="150" fg:w="3"/><text x="4.9744%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.09%)</title><rect x="4.7244%" y="501" width="0.0945%" height="15" fill="rgb(215,43,3)" fg:x="150" fg:w="3"/><text x="4.9744%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.09%)</title><rect x="4.7244%" y="485" width="0.0945%" height="15" fill="rgb(238,154,13)" fg:x="150" fg:w="3"/><text x="4.9744%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.06%)</title><rect x="4.7559%" y="469" width="0.0630%" height="15" fill="rgb(219,56,2)" fg:x="151" fg:w="2"/><text x="5.0059%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (2 samples, 0.06%)</title><rect x="4.7559%" y="453" width="0.0630%" height="15" fill="rgb(233,0,4)" fg:x="151" fg:w="2"/><text x="5.0059%" y="463.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.06%)</title><rect x="4.7559%" y="437" width="0.0630%" height="15" fill="rgb(235,30,7)" fg:x="151" fg:w="2"/><text x="5.0059%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.03%)</title><rect x="4.7874%" y="421" width="0.0315%" height="15" fill="rgb(250,79,13)" fg:x="152" fg:w="1"/><text x="5.0374%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (1 samples, 0.03%)</title><rect x="4.7874%" y="405" width="0.0315%" height="15" fill="rgb(211,146,34)" fg:x="152" fg:w="1"/><text x="5.0374%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="4.7874%" y="389" width="0.0315%" height="15" fill="rgb(228,22,38)" fg:x="152" fg:w="1"/><text x="5.0374%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="4.7874%" y="373" width="0.0315%" height="15" fill="rgb(235,168,5)" fg:x="152" fg:w="1"/><text x="5.0374%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.7874%" y="357" width="0.0315%" height="15" fill="rgb(221,155,16)" fg:x="152" fg:w="1"/><text x="5.0374%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="4.7874%" y="341" width="0.0315%" height="15" fill="rgb(215,215,53)" fg:x="152" fg:w="1"/><text x="5.0374%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.7874%" y="325" width="0.0315%" height="15" fill="rgb(223,4,10)" fg:x="152" fg:w="1"/><text x="5.0374%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="4.8189%" y="501" width="0.0315%" height="15" fill="rgb(234,103,6)" fg:x="153" fg:w="1"/><text x="5.0689%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="4.8189%" y="485" width="0.0315%" height="15" fill="rgb(227,97,0)" fg:x="153" fg:w="1"/><text x="5.0689%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.8189%" y="469" width="0.0315%" height="15" fill="rgb(234,150,53)" fg:x="153" fg:w="1"/><text x="5.0689%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="4.8189%" y="453" width="0.0315%" height="15" fill="rgb(228,201,54)" fg:x="153" fg:w="1"/><text x="5.0689%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.8189%" y="437" width="0.0315%" height="15" fill="rgb(222,22,37)" fg:x="153" fg:w="1"/><text x="5.0689%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.09%)</title><rect x="4.8189%" y="533" width="0.0945%" height="15" fill="rgb(237,53,32)" fg:x="153" fg:w="3"/><text x="5.0689%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (3 samples, 0.09%)</title><rect x="4.8189%" y="517" width="0.0945%" height="15" fill="rgb(233,25,53)" fg:x="153" fg:w="3"/><text x="5.0689%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var (2 samples, 0.06%)</title><rect x="4.8504%" y="501" width="0.0630%" height="15" fill="rgb(210,40,34)" fg:x="154" fg:w="2"/><text x="5.1004%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (2 samples, 0.06%)</title><rect x="4.9134%" y="533" width="0.0630%" height="15" fill="rgb(241,220,44)" fg:x="156" fg:w="2"/><text x="5.1634%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (2 samples, 0.06%)</title><rect x="4.9134%" y="517" width="0.0630%" height="15" fill="rgb(235,28,35)" fg:x="156" fg:w="2"/><text x="5.1634%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="4.9134%" y="501" width="0.0630%" height="15" fill="rgb(210,56,17)" fg:x="156" fg:w="2"/><text x="5.1634%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="4.9134%" y="485" width="0.0630%" height="15" fill="rgb(224,130,29)" fg:x="156" fg:w="2"/><text x="5.1634%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.06%)</title><rect x="4.9134%" y="469" width="0.0630%" height="15" fill="rgb(235,212,8)" fg:x="156" fg:w="2"/><text x="5.1634%" y="479.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.06%)</title><rect x="4.9134%" y="453" width="0.0630%" height="15" fill="rgb(223,33,50)" fg:x="156" fg:w="2"/><text x="5.1634%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.06%)</title><rect x="4.9134%" y="437" width="0.0630%" height="15" fill="rgb(219,149,13)" fg:x="156" fg:w="2"/><text x="5.1634%" y="447.50"></text></g><g><title>__GI___libc_free (2 samples, 0.06%)</title><rect x="4.9134%" y="421" width="0.0630%" height="15" fill="rgb(250,156,29)" fg:x="156" fg:w="2"/><text x="5.1634%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.06%)</title><rect x="4.9134%" y="405" width="0.0630%" height="15" fill="rgb(216,193,19)" fg:x="156" fg:w="2"/><text x="5.1634%" y="415.50"></text></g><g><title>tcache_put (2 samples, 0.06%)</title><rect x="4.9134%" y="389" width="0.0630%" height="15" fill="rgb(216,135,14)" fg:x="156" fg:w="2"/><text x="5.1634%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="4.9764%" y="533" width="0.0315%" height="15" fill="rgb(241,47,5)" fg:x="158" fg:w="1"/><text x="5.2264%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="4.9764%" y="517" width="0.0315%" height="15" fill="rgb(233,42,35)" fg:x="158" fg:w="1"/><text x="5.2264%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="4.9764%" y="501" width="0.0315%" height="15" fill="rgb(231,13,6)" fg:x="158" fg:w="1"/><text x="5.2264%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="4.9764%" y="485" width="0.0315%" height="15" fill="rgb(207,181,40)" fg:x="158" fg:w="1"/><text x="5.2264%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (15 samples, 0.47%)</title><rect x="5.0079%" y="533" width="0.4724%" height="15" fill="rgb(254,173,49)" fg:x="159" fg:w="15"/><text x="5.2579%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.47%)</title><rect x="5.0079%" y="517" width="0.4724%" height="15" fill="rgb(221,1,38)" fg:x="159" fg:w="15"/><text x="5.2579%" y="527.50"></text></g><g><title>__memcpy_evex_unaligned_erms (15 samples, 0.47%)</title><rect x="5.0079%" y="501" width="0.4724%" height="15" fill="rgb(206,124,46)" fg:x="159" fg:w="15"/><text x="5.2579%" y="511.50"></text></g><g><title>log::max_level (7 samples, 0.22%)</title><rect x="5.4803%" y="533" width="0.2205%" height="15" fill="rgb(249,21,11)" fg:x="174" fg:w="7"/><text x="5.7303%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.22%)</title><rect x="5.4803%" y="517" width="0.2205%" height="15" fill="rgb(222,201,40)" fg:x="174" fg:w="7"/><text x="5.7303%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.22%)</title><rect x="5.4803%" y="501" width="0.2205%" height="15" fill="rgb(235,61,29)" fg:x="174" fg:w="7"/><text x="5.7303%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="5.7638%" y="517" width="0.0630%" height="15" fill="rgb(219,207,3)" fg:x="183" fg:w="2"/><text x="6.0138%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="5.7638%" y="501" width="0.0630%" height="15" fill="rgb(222,56,46)" fg:x="183" fg:w="2"/><text x="6.0138%" y="511.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (8 samples, 0.25%)</title><rect x="5.7008%" y="533" width="0.2520%" height="15" fill="rgb(239,76,54)" fg:x="181" fg:w="8"/><text x="5.9508%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (4 samples, 0.13%)</title><rect x="5.8268%" y="517" width="0.1260%" height="15" fill="rgb(231,124,27)" fg:x="185" fg:w="4"/><text x="6.0768%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="6.1102%" y="501" width="0.0630%" height="15" fill="rgb(249,195,6)" fg:x="194" fg:w="2"/><text x="6.3602%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="6.1417%" y="485" width="0.0315%" height="15" fill="rgb(237,174,47)" fg:x="195" fg:w="1"/><text x="6.3917%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="6.1417%" y="469" width="0.0315%" height="15" fill="rgb(206,201,31)" fg:x="195" fg:w="1"/><text x="6.3917%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="6.1102%" y="517" width="0.1260%" height="15" fill="rgb(231,57,52)" fg:x="194" fg:w="4"/><text x="6.3602%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="6.1732%" y="501" width="0.0630%" height="15" fill="rgb(248,177,22)" fg:x="196" fg:w="2"/><text x="6.4232%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="6.1732%" y="485" width="0.0630%" height="15" fill="rgb(215,211,37)" fg:x="196" fg:w="2"/><text x="6.4232%" y="495.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (4 samples, 0.13%)</title><rect x="6.2362%" y="517" width="0.1260%" height="15" fill="rgb(241,128,51)" fg:x="198" fg:w="4"/><text x="6.4862%" y="527.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.13%)</title><rect x="6.2362%" y="501" width="0.1260%" height="15" fill="rgb(227,165,31)" fg:x="198" fg:w="4"/><text x="6.4862%" y="511.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::MulAssign&lt;T&gt;&gt;::mul_assign (1 samples, 0.03%)</title><rect x="6.3622%" y="517" width="0.0315%" height="15" fill="rgb(228,167,24)" fg:x="202" fg:w="1"/><text x="6.6122%" y="527.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (1 samples, 0.03%)</title><rect x="6.3622%" y="501" width="0.0315%" height="15" fill="rgb(228,143,12)" fg:x="202" fg:w="1"/><text x="6.6122%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (4 samples, 0.13%)</title><rect x="6.3937%" y="517" width="0.1260%" height="15" fill="rgb(249,149,8)" fg:x="203" fg:w="4"/><text x="6.6437%" y="527.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (4 samples, 0.13%)</title><rect x="6.3937%" y="501" width="0.1260%" height="15" fill="rgb(243,35,44)" fg:x="203" fg:w="4"/><text x="6.6437%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="6.6142%" y="309" width="0.0945%" height="15" fill="rgb(246,89,9)" fg:x="210" fg:w="3"/><text x="6.8642%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="6.5197%" y="373" width="0.2205%" height="15" fill="rgb(233,213,13)" fg:x="207" fg:w="7"/><text x="6.7697%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="6.5197%" y="357" width="0.2205%" height="15" fill="rgb(233,141,41)" fg:x="207" fg:w="7"/><text x="6.7697%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="6.5197%" y="341" width="0.2205%" height="15" fill="rgb(239,167,4)" fg:x="207" fg:w="7"/><text x="6.7697%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.19%)</title><rect x="6.5512%" y="325" width="0.1890%" height="15" fill="rgb(209,217,16)" fg:x="208" fg:w="6"/><text x="6.8012%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="6.7087%" y="309" width="0.0315%" height="15" fill="rgb(219,88,35)" fg:x="213" fg:w="1"/><text x="6.9587%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="6.7717%" y="245" width="0.0945%" height="15" fill="rgb(220,193,23)" fg:x="215" fg:w="3"/><text x="7.0217%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.41%)</title><rect x="6.5197%" y="405" width="0.4094%" height="15" fill="rgb(230,90,52)" fg:x="207" fg:w="13"/><text x="6.7697%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.41%)</title><rect x="6.5197%" y="389" width="0.4094%" height="15" fill="rgb(252,106,19)" fg:x="207" fg:w="13"/><text x="6.7697%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.19%)</title><rect x="6.7402%" y="373" width="0.1890%" height="15" fill="rgb(206,74,20)" fg:x="214" fg:w="6"/><text x="6.9902%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (6 samples, 0.19%)</title><rect x="6.7402%" y="357" width="0.1890%" height="15" fill="rgb(230,138,44)" fg:x="214" fg:w="6"/><text x="6.9902%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (6 samples, 0.19%)</title><rect x="6.7402%" y="341" width="0.1890%" height="15" fill="rgb(235,182,43)" fg:x="214" fg:w="6"/><text x="6.9902%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (6 samples, 0.19%)</title><rect x="6.7402%" y="325" width="0.1890%" height="15" fill="rgb(242,16,51)" fg:x="214" fg:w="6"/><text x="6.9902%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.19%)</title><rect x="6.7402%" y="309" width="0.1890%" height="15" fill="rgb(248,9,4)" fg:x="214" fg:w="6"/><text x="6.9902%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.19%)</title><rect x="6.7402%" y="293" width="0.1890%" height="15" fill="rgb(210,31,22)" fg:x="214" fg:w="6"/><text x="6.9902%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.19%)</title><rect x="6.7402%" y="277" width="0.1890%" height="15" fill="rgb(239,54,39)" fg:x="214" fg:w="6"/><text x="6.9902%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.16%)</title><rect x="6.7717%" y="261" width="0.1575%" height="15" fill="rgb(230,99,41)" fg:x="215" fg:w="5"/><text x="7.0217%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="6.8661%" y="245" width="0.0630%" height="15" fill="rgb(253,106,12)" fg:x="218" fg:w="2"/><text x="7.1161%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.19%)</title><rect x="6.9291%" y="341" width="0.1890%" height="15" fill="rgb(213,46,41)" fg:x="220" fg:w="6"/><text x="7.1791%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.19%)</title><rect x="6.9291%" y="325" width="0.1890%" height="15" fill="rgb(215,133,35)" fg:x="220" fg:w="6"/><text x="7.1791%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.19%)</title><rect x="6.9291%" y="309" width="0.1890%" height="15" fill="rgb(213,28,5)" fg:x="220" fg:w="6"/><text x="7.1791%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (6 samples, 0.19%)</title><rect x="6.9291%" y="293" width="0.1890%" height="15" fill="rgb(215,77,49)" fg:x="220" fg:w="6"/><text x="7.1791%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.22%)</title><rect x="6.9291%" y="357" width="0.2205%" height="15" fill="rgb(248,100,22)" fg:x="220" fg:w="7"/><text x="7.1791%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="7.1181%" y="341" width="0.0315%" height="15" fill="rgb(208,67,9)" fg:x="226" fg:w="1"/><text x="7.3681%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="7.1181%" y="325" width="0.0315%" height="15" fill="rgb(219,133,21)" fg:x="226" fg:w="1"/><text x="7.3681%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="7.1181%" y="309" width="0.0315%" height="15" fill="rgb(246,46,29)" fg:x="226" fg:w="1"/><text x="7.3681%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="7.1181%" y="293" width="0.0315%" height="15" fill="rgb(246,185,52)" fg:x="226" fg:w="1"/><text x="7.3681%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4 samples, 0.13%)</title><rect x="7.1496%" y="357" width="0.1260%" height="15" fill="rgb(252,136,11)" fg:x="227" fg:w="4"/><text x="7.3996%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.2441%" y="341" width="0.0315%" height="15" fill="rgb(219,138,53)" fg:x="230" fg:w="1"/><text x="7.4941%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.2441%" y="325" width="0.0315%" height="15" fill="rgb(211,51,23)" fg:x="230" fg:w="1"/><text x="7.4941%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.2441%" y="309" width="0.0315%" height="15" fill="rgb(247,221,28)" fg:x="230" fg:w="1"/><text x="7.4941%" y="319.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="7.2441%" y="293" width="0.0315%" height="15" fill="rgb(251,222,45)" fg:x="230" fg:w="1"/><text x="7.4941%" y="303.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="7.2441%" y="277" width="0.0315%" height="15" fill="rgb(217,162,53)" fg:x="230" fg:w="1"/><text x="7.4941%" y="287.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="7.2441%" y="261" width="0.0315%" height="15" fill="rgb(229,93,14)" fg:x="230" fg:w="1"/><text x="7.4941%" y="271.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="7.2441%" y="245" width="0.0315%" height="15" fill="rgb(209,67,49)" fg:x="230" fg:w="1"/><text x="7.4941%" y="255.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="7.2441%" y="229" width="0.0315%" height="15" fill="rgb(213,87,29)" fg:x="230" fg:w="1"/><text x="7.4941%" y="239.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="7.2441%" y="213" width="0.0315%" height="15" fill="rgb(205,151,52)" fg:x="230" fg:w="1"/><text x="7.4941%" y="223.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="7.2441%" y="197" width="0.0315%" height="15" fill="rgb(253,215,39)" fg:x="230" fg:w="1"/><text x="7.4941%" y="207.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="7.2441%" y="181" width="0.0315%" height="15" fill="rgb(221,220,41)" fg:x="230" fg:w="1"/><text x="7.4941%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (25 samples, 0.79%)</title><rect x="6.5197%" y="469" width="0.7874%" height="15" fill="rgb(218,133,21)" fg:x="207" fg:w="25"/><text x="6.7697%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (25 samples, 0.79%)</title><rect x="6.5197%" y="453" width="0.7874%" height="15" fill="rgb(221,193,43)" fg:x="207" fg:w="25"/><text x="6.7697%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (25 samples, 0.79%)</title><rect x="6.5197%" y="437" width="0.7874%" height="15" fill="rgb(240,128,52)" fg:x="207" fg:w="25"/><text x="6.7697%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.79%)</title><rect x="6.5197%" y="421" width="0.7874%" height="15" fill="rgb(253,114,12)" fg:x="207" fg:w="25"/><text x="6.7697%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.38%)</title><rect x="6.9291%" y="405" width="0.3780%" height="15" fill="rgb(215,223,47)" fg:x="220" fg:w="12"/><text x="7.1791%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.38%)</title><rect x="6.9291%" y="389" width="0.3780%" height="15" fill="rgb(248,225,23)" fg:x="220" fg:w="12"/><text x="7.1791%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.38%)</title><rect x="6.9291%" y="373" width="0.3780%" height="15" fill="rgb(250,108,0)" fg:x="220" fg:w="12"/><text x="7.1791%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="7.2756%" y="357" width="0.0315%" height="15" fill="rgb(228,208,7)" fg:x="231" fg:w="1"/><text x="7.5256%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="7.2756%" y="341" width="0.0315%" height="15" fill="rgb(244,45,10)" fg:x="231" fg:w="1"/><text x="7.5256%" y="351.50"></text></g><g><title>compare::Compare::compares_ge (2 samples, 0.06%)</title><rect x="7.3386%" y="437" width="0.0630%" height="15" fill="rgb(207,125,25)" fg:x="233" fg:w="2"/><text x="7.5886%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (2 samples, 0.06%)</title><rect x="7.3386%" y="421" width="0.0630%" height="15" fill="rgb(210,195,18)" fg:x="233" fg:w="2"/><text x="7.5886%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.06%)</title><rect x="7.3386%" y="405" width="0.0630%" height="15" fill="rgb(249,80,12)" fg:x="233" fg:w="2"/><text x="7.5886%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (2 samples, 0.06%)</title><rect x="7.3386%" y="389" width="0.0630%" height="15" fill="rgb(221,65,9)" fg:x="233" fg:w="2"/><text x="7.5886%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (2 samples, 0.06%)</title><rect x="7.3386%" y="373" width="0.0630%" height="15" fill="rgb(235,49,36)" fg:x="233" fg:w="2"/><text x="7.5886%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (2 samples, 0.06%)</title><rect x="7.3386%" y="357" width="0.0630%" height="15" fill="rgb(225,32,20)" fg:x="233" fg:w="2"/><text x="7.5886%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (2 samples, 0.06%)</title><rect x="7.3386%" y="341" width="0.0630%" height="15" fill="rgb(215,141,46)" fg:x="233" fg:w="2"/><text x="7.5886%" y="351.50"></text></g><g><title>compare::Compare::compares_le (1 samples, 0.03%)</title><rect x="7.4016%" y="437" width="0.0315%" height="15" fill="rgb(250,160,47)" fg:x="235" fg:w="1"/><text x="7.6516%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="7.4016%" y="421" width="0.0315%" height="15" fill="rgb(216,222,40)" fg:x="235" fg:w="1"/><text x="7.6516%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="7.4016%" y="405" width="0.0315%" height="15" fill="rgb(234,217,39)" fg:x="235" fg:w="1"/><text x="7.6516%" y="415.50"></text></g><g><title>compare::Compare::compares_lt (1 samples, 0.03%)</title><rect x="7.4331%" y="437" width="0.0315%" height="15" fill="rgb(207,178,40)" fg:x="236" fg:w="1"/><text x="7.6831%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="7.4331%" y="421" width="0.0315%" height="15" fill="rgb(221,136,13)" fg:x="236" fg:w="1"/><text x="7.6831%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="7.4331%" y="405" width="0.0315%" height="15" fill="rgb(249,199,10)" fg:x="236" fg:w="1"/><text x="7.6831%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.03%)</title><rect x="7.4331%" y="389" width="0.0315%" height="15" fill="rgb(249,222,13)" fg:x="236" fg:w="1"/><text x="7.6831%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (1 samples, 0.03%)</title><rect x="7.4331%" y="373" width="0.0315%" height="15" fill="rgb(244,185,38)" fg:x="236" fg:w="1"/><text x="7.6831%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.03%)</title><rect x="7.4331%" y="357" width="0.0315%" height="15" fill="rgb(236,202,9)" fg:x="236" fg:w="1"/><text x="7.6831%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (1 samples, 0.03%)</title><rect x="7.4331%" y="341" width="0.0315%" height="15" fill="rgb(250,229,37)" fg:x="236" fg:w="1"/><text x="7.6831%" y="351.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (1 samples, 0.03%)</title><rect x="7.4331%" y="325" width="0.0315%" height="15" fill="rgb(206,174,23)" fg:x="236" fg:w="1"/><text x="7.6831%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.13%)</title><rect x="7.4646%" y="405" width="0.1260%" height="15" fill="rgb(211,33,43)" fg:x="237" fg:w="4"/><text x="7.7146%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="7.5906%" y="277" width="0.0630%" height="15" fill="rgb(245,58,50)" fg:x="241" fg:w="2"/><text x="7.8406%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="7.5906%" y="261" width="0.0630%" height="15" fill="rgb(244,68,36)" fg:x="241" fg:w="2"/><text x="7.8406%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="7.5906%" y="325" width="0.3150%" height="15" fill="rgb(232,229,15)" fg:x="241" fg:w="10"/><text x="7.8406%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="7.5906%" y="309" width="0.3150%" height="15" fill="rgb(254,30,23)" fg:x="241" fg:w="10"/><text x="7.8406%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.31%)</title><rect x="7.5906%" y="293" width="0.3150%" height="15" fill="rgb(235,160,14)" fg:x="241" fg:w="10"/><text x="7.8406%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.25%)</title><rect x="7.6535%" y="277" width="0.2520%" height="15" fill="rgb(212,155,44)" fg:x="243" fg:w="8"/><text x="7.9035%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.19%)</title><rect x="7.7165%" y="261" width="0.1890%" height="15" fill="rgb(226,2,50)" fg:x="245" fg:w="6"/><text x="7.9665%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.06%)</title><rect x="7.9055%" y="325" width="0.0630%" height="15" fill="rgb(234,177,6)" fg:x="251" fg:w="2"/><text x="8.1555%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.50%)</title><rect x="7.5906%" y="357" width="0.5039%" height="15" fill="rgb(217,24,9)" fg:x="241" fg:w="16"/><text x="7.8406%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.50%)</title><rect x="7.5906%" y="341" width="0.5039%" height="15" fill="rgb(220,13,46)" fg:x="241" fg:w="16"/><text x="7.8406%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.13%)</title><rect x="7.9685%" y="325" width="0.1260%" height="15" fill="rgb(239,221,27)" fg:x="253" fg:w="4"/><text x="8.2185%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (4 samples, 0.13%)</title><rect x="7.9685%" y="309" width="0.1260%" height="15" fill="rgb(222,198,25)" fg:x="253" fg:w="4"/><text x="8.2185%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (4 samples, 0.13%)</title><rect x="7.9685%" y="293" width="0.1260%" height="15" fill="rgb(211,99,13)" fg:x="253" fg:w="4"/><text x="8.2185%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.13%)</title><rect x="7.9685%" y="277" width="0.1260%" height="15" fill="rgb(232,111,31)" fg:x="253" fg:w="4"/><text x="8.2185%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="7.9685%" y="261" width="0.1260%" height="15" fill="rgb(245,82,37)" fg:x="253" fg:w="4"/><text x="8.2185%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="7.9685%" y="245" width="0.1260%" height="15" fill="rgb(227,149,46)" fg:x="253" fg:w="4"/><text x="8.2185%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="7.9685%" y="229" width="0.1260%" height="15" fill="rgb(218,36,50)" fg:x="253" fg:w="4"/><text x="8.2185%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="8.0630%" y="213" width="0.0315%" height="15" fill="rgb(226,80,48)" fg:x="256" fg:w="1"/><text x="8.3130%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="8.0945%" y="309" width="0.0945%" height="15" fill="rgb(238,224,15)" fg:x="257" fg:w="3"/><text x="8.3445%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="8.1260%" y="293" width="0.0630%" height="15" fill="rgb(241,136,10)" fg:x="258" fg:w="2"/><text x="8.3760%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="8.1890%" y="293" width="0.0630%" height="15" fill="rgb(208,32,45)" fg:x="260" fg:w="2"/><text x="8.4390%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="8.1890%" y="277" width="0.0630%" height="15" fill="rgb(207,135,9)" fg:x="260" fg:w="2"/><text x="8.4390%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="8.1890%" y="261" width="0.0630%" height="15" fill="rgb(206,86,44)" fg:x="260" fg:w="2"/><text x="8.4390%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="8.1890%" y="245" width="0.0630%" height="15" fill="rgb(245,177,15)" fg:x="260" fg:w="2"/><text x="8.4390%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="8.1890%" y="309" width="0.0945%" height="15" fill="rgb(206,64,50)" fg:x="260" fg:w="3"/><text x="8.4390%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="8.2520%" y="293" width="0.0315%" height="15" fill="rgb(234,36,40)" fg:x="262" fg:w="1"/><text x="8.5020%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="8.2520%" y="277" width="0.0315%" height="15" fill="rgb(213,64,8)" fg:x="262" fg:w="1"/><text x="8.5020%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="8.2520%" y="261" width="0.0315%" height="15" fill="rgb(210,75,36)" fg:x="262" fg:w="1"/><text x="8.5020%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="8.2520%" y="245" width="0.0315%" height="15" fill="rgb(229,88,21)" fg:x="262" fg:w="1"/><text x="8.5020%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="8.2520%" y="229" width="0.0315%" height="15" fill="rgb(252,204,47)" fg:x="262" fg:w="1"/><text x="8.5020%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="8.2520%" y="213" width="0.0315%" height="15" fill="rgb(208,77,27)" fg:x="262" fg:w="1"/><text x="8.5020%" y="223.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="8.2520%" y="197" width="0.0315%" height="15" fill="rgb(221,76,26)" fg:x="262" fg:w="1"/><text x="8.5020%" y="207.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="8.2520%" y="181" width="0.0315%" height="15" fill="rgb(225,139,18)" fg:x="262" fg:w="1"/><text x="8.5020%" y="191.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="8.2520%" y="165" width="0.0315%" height="15" fill="rgb(230,137,11)" fg:x="262" fg:w="1"/><text x="8.5020%" y="175.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.03%)</title><rect x="8.2520%" y="149" width="0.0315%" height="15" fill="rgb(212,28,1)" fg:x="262" fg:w="1"/><text x="8.5020%" y="159.50"></text></g><g><title>task_work_run (1 samples, 0.03%)</title><rect x="8.2520%" y="133" width="0.0315%" height="15" fill="rgb(248,164,17)" fg:x="262" fg:w="1"/><text x="8.5020%" y="143.50"></text></g><g><title>task_numa_work (1 samples, 0.03%)</title><rect x="8.2520%" y="117" width="0.0315%" height="15" fill="rgb(222,171,42)" fg:x="262" fg:w="1"/><text x="8.5020%" y="127.50"></text></g><g><title>change_prot_numa (1 samples, 0.03%)</title><rect x="8.2520%" y="101" width="0.0315%" height="15" fill="rgb(243,84,45)" fg:x="262" fg:w="1"/><text x="8.5020%" y="111.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="8.2520%" y="85" width="0.0315%" height="15" fill="rgb(252,49,23)" fg:x="262" fg:w="1"/><text x="8.5020%" y="95.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="8.2520%" y="69" width="0.0315%" height="15" fill="rgb(215,19,7)" fg:x="262" fg:w="1"/><text x="8.5020%" y="79.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="8.2520%" y="53" width="0.0315%" height="15" fill="rgb(238,81,41)" fg:x="262" fg:w="1"/><text x="8.5020%" y="63.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="8.2520%" y="37" width="0.0315%" height="15" fill="rgb(210,199,37)" fg:x="262" fg:w="1"/><text x="8.5020%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="8.2835%" y="309" width="0.0630%" height="15" fill="rgb(244,192,49)" fg:x="263" fg:w="2"/><text x="8.5335%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (34 samples, 1.07%)</title><rect x="7.3071%" y="453" width="1.0709%" height="15" fill="rgb(226,211,11)" fg:x="232" fg:w="34"/><text x="7.5571%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (29 samples, 0.91%)</title><rect x="7.4646%" y="437" width="0.9134%" height="15" fill="rgb(236,162,54)" fg:x="237" fg:w="29"/><text x="7.7146%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.91%)</title><rect x="7.4646%" y="421" width="0.9134%" height="15" fill="rgb(220,229,9)" fg:x="237" fg:w="29"/><text x="7.7146%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (25 samples, 0.79%)</title><rect x="7.5906%" y="405" width="0.7874%" height="15" fill="rgb(250,87,22)" fg:x="241" fg:w="25"/><text x="7.8406%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (25 samples, 0.79%)</title><rect x="7.5906%" y="389" width="0.7874%" height="15" fill="rgb(239,43,17)" fg:x="241" fg:w="25"/><text x="7.8406%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (25 samples, 0.79%)</title><rect x="7.5906%" y="373" width="0.7874%" height="15" fill="rgb(231,177,25)" fg:x="241" fg:w="25"/><text x="7.8406%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (9 samples, 0.28%)</title><rect x="8.0945%" y="357" width="0.2835%" height="15" fill="rgb(219,179,1)" fg:x="257" fg:w="9"/><text x="8.3445%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.28%)</title><rect x="8.0945%" y="341" width="0.2835%" height="15" fill="rgb(238,219,53)" fg:x="257" fg:w="9"/><text x="8.3445%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.28%)</title><rect x="8.0945%" y="325" width="0.2835%" height="15" fill="rgb(232,167,36)" fg:x="257" fg:w="9"/><text x="8.3445%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="8.3465%" y="309" width="0.0315%" height="15" fill="rgb(244,19,51)" fg:x="265" fg:w="1"/><text x="8.5965%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="8.3465%" y="293" width="0.0315%" height="15" fill="rgb(224,6,22)" fg:x="265" fg:w="1"/><text x="8.5965%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (35 samples, 1.10%)</title><rect x="7.3071%" y="469" width="1.1024%" height="15" fill="rgb(224,145,5)" fg:x="232" fg:w="35"/><text x="7.5571%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="8.3780%" y="453" width="0.0315%" height="15" fill="rgb(234,130,49)" fg:x="266" fg:w="1"/><text x="8.6280%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="8.4094%" y="453" width="0.0315%" height="15" fill="rgb(254,6,2)" fg:x="267" fg:w="1"/><text x="8.6594%" y="463.50"></text></g><g><title>compare::Compare::compares_le (3 samples, 0.09%)</title><rect x="8.4409%" y="453" width="0.0945%" height="15" fill="rgb(208,96,46)" fg:x="268" fg:w="3"/><text x="8.6909%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.09%)</title><rect x="8.4409%" y="437" width="0.0945%" height="15" fill="rgb(239,3,39)" fg:x="268" fg:w="3"/><text x="8.6909%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.09%)</title><rect x="8.4409%" y="421" width="0.0945%" height="15" fill="rgb(233,210,1)" fg:x="268" fg:w="3"/><text x="8.6909%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (1 samples, 0.03%)</title><rect x="8.5039%" y="405" width="0.0315%" height="15" fill="rgb(244,137,37)" fg:x="270" fg:w="1"/><text x="8.7539%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (1 samples, 0.03%)</title><rect x="8.5039%" y="389" width="0.0315%" height="15" fill="rgb(240,136,2)" fg:x="270" fg:w="1"/><text x="8.7539%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.03%)</title><rect x="8.5039%" y="373" width="0.0315%" height="15" fill="rgb(239,18,37)" fg:x="270" fg:w="1"/><text x="8.7539%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (1 samples, 0.03%)</title><rect x="8.5039%" y="357" width="0.0315%" height="15" fill="rgb(218,185,22)" fg:x="270" fg:w="1"/><text x="8.7539%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="8.5354%" y="421" width="0.0630%" height="15" fill="rgb(225,218,4)" fg:x="271" fg:w="2"/><text x="8.7854%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="8.6299%" y="293" width="0.0315%" height="15" fill="rgb(230,182,32)" fg:x="274" fg:w="1"/><text x="8.8799%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="8.7244%" y="277" width="0.0315%" height="15" fill="rgb(242,56,43)" fg:x="277" fg:w="1"/><text x="8.9744%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="8.5984%" y="341" width="0.2205%" height="15" fill="rgb(233,99,24)" fg:x="273" fg:w="7"/><text x="8.8484%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="8.5984%" y="325" width="0.2205%" height="15" fill="rgb(234,209,42)" fg:x="273" fg:w="7"/><text x="8.8484%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.22%)</title><rect x="8.5984%" y="309" width="0.2205%" height="15" fill="rgb(227,7,12)" fg:x="273" fg:w="7"/><text x="8.8484%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.16%)</title><rect x="8.6614%" y="293" width="0.1575%" height="15" fill="rgb(245,203,43)" fg:x="275" fg:w="5"/><text x="8.9114%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="8.7559%" y="277" width="0.0630%" height="15" fill="rgb(238,205,33)" fg:x="278" fg:w="2"/><text x="9.0059%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.25%)</title><rect x="8.5984%" y="373" width="0.2520%" height="15" fill="rgb(231,56,7)" fg:x="273" fg:w="8"/><text x="8.8484%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.25%)</title><rect x="8.5984%" y="357" width="0.2520%" height="15" fill="rgb(244,186,29)" fg:x="273" fg:w="8"/><text x="8.8484%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="8.8189%" y="341" width="0.0315%" height="15" fill="rgb(234,111,31)" fg:x="280" fg:w="1"/><text x="9.0689%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="8.8819%" y="325" width="0.0630%" height="15" fill="rgb(241,149,10)" fg:x="282" fg:w="2"/><text x="9.1319%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="8.9449%" y="325" width="0.0945%" height="15" fill="rgb(249,206,44)" fg:x="284" fg:w="3"/><text x="9.1949%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="8.9449%" y="309" width="0.0945%" height="15" fill="rgb(251,153,30)" fg:x="284" fg:w="3"/><text x="9.1949%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="8.9449%" y="293" width="0.0945%" height="15" fill="rgb(239,152,38)" fg:x="284" fg:w="3"/><text x="9.1949%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="8.9449%" y="277" width="0.0945%" height="15" fill="rgb(249,139,47)" fg:x="284" fg:w="3"/><text x="9.1949%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="8.9449%" y="261" width="0.0945%" height="15" fill="rgb(244,64,35)" fg:x="284" fg:w="3"/><text x="9.1949%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (17 samples, 0.54%)</title><rect x="8.5354%" y="453" width="0.5354%" height="15" fill="rgb(216,46,15)" fg:x="271" fg:w="17"/><text x="8.7854%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.54%)</title><rect x="8.5354%" y="437" width="0.5354%" height="15" fill="rgb(250,74,19)" fg:x="271" fg:w="17"/><text x="8.7854%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (15 samples, 0.47%)</title><rect x="8.5984%" y="421" width="0.4724%" height="15" fill="rgb(249,42,33)" fg:x="273" fg:w="15"/><text x="8.8484%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15 samples, 0.47%)</title><rect x="8.5984%" y="405" width="0.4724%" height="15" fill="rgb(242,149,17)" fg:x="273" fg:w="15"/><text x="8.8484%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (15 samples, 0.47%)</title><rect x="8.5984%" y="389" width="0.4724%" height="15" fill="rgb(244,29,21)" fg:x="273" fg:w="15"/><text x="8.8484%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.22%)</title><rect x="8.8504%" y="373" width="0.2205%" height="15" fill="rgb(220,130,37)" fg:x="281" fg:w="7"/><text x="9.1004%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.22%)</title><rect x="8.8504%" y="357" width="0.2205%" height="15" fill="rgb(211,67,2)" fg:x="281" fg:w="7"/><text x="9.1004%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7 samples, 0.22%)</title><rect x="8.8504%" y="341" width="0.2205%" height="15" fill="rgb(235,68,52)" fg:x="281" fg:w="7"/><text x="9.1004%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="9.0394%" y="325" width="0.0315%" height="15" fill="rgb(246,142,3)" fg:x="287" fg:w="1"/><text x="9.2894%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="9.0394%" y="309" width="0.0315%" height="15" fill="rgb(241,25,7)" fg:x="287" fg:w="1"/><text x="9.2894%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (25 samples, 0.79%)</title><rect x="8.4094%" y="469" width="0.7874%" height="15" fill="rgb(242,119,39)" fg:x="267" fg:w="25"/><text x="8.6594%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (4 samples, 0.13%)</title><rect x="9.0709%" y="453" width="0.1260%" height="15" fill="rgb(241,98,45)" fg:x="288" fg:w="4"/><text x="9.3209%" y="463.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="9.1339%" y="437" width="0.0630%" height="15" fill="rgb(254,28,30)" fg:x="290" fg:w="2"/><text x="9.3839%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (86 samples, 2.71%)</title><rect x="6.5197%" y="517" width="2.7087%" height="15" fill="rgb(241,142,54)" fg:x="207" fg:w="86"/><text x="6.7697%" y="527.50">co..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 2.71%)</title><rect x="6.5197%" y="501" width="2.7087%" height="15" fill="rgb(222,85,15)" fg:x="207" fg:w="86"/><text x="6.7697%" y="511.50">&lt;m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (86 samples, 2.71%)</title><rect x="6.5197%" y="485" width="2.7087%" height="15" fill="rgb(210,85,47)" fg:x="207" fg:w="86"/><text x="6.7697%" y="495.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="9.1969%" y="469" width="0.0315%" height="15" fill="rgb(224,206,25)" fg:x="292" fg:w="1"/><text x="9.4469%" y="479.50"></text></g><g><title>log::__private_api::log (1 samples, 0.03%)</title><rect x="9.2283%" y="517" width="0.0315%" height="15" fill="rgb(243,201,19)" fg:x="293" fg:w="1"/><text x="9.4783%" y="527.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (1 samples, 0.03%)</title><rect x="9.2283%" y="501" width="0.0315%" height="15" fill="rgb(236,59,4)" fg:x="293" fg:w="1"/><text x="9.4783%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.13%)</title><rect x="9.2913%" y="373" width="0.1260%" height="15" fill="rgb(254,179,45)" fg:x="295" fg:w="4"/><text x="9.5413%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="9.3228%" y="357" width="0.0945%" height="15" fill="rgb(226,14,10)" fg:x="296" fg:w="3"/><text x="9.5728%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.35%)</title><rect x="9.4803%" y="357" width="0.3465%" height="15" fill="rgb(244,27,41)" fg:x="301" fg:w="11"/><text x="9.7303%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.60%)</title><rect x="9.2598%" y="421" width="0.5984%" height="15" fill="rgb(235,35,32)" fg:x="294" fg:w="19"/><text x="9.5098%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.60%)</title><rect x="9.2598%" y="405" width="0.5984%" height="15" fill="rgb(218,68,31)" fg:x="294" fg:w="19"/><text x="9.5098%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.60%)</title><rect x="9.2598%" y="389" width="0.5984%" height="15" fill="rgb(207,120,37)" fg:x="294" fg:w="19"/><text x="9.5098%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.44%)</title><rect x="9.4173%" y="373" width="0.4409%" height="15" fill="rgb(227,98,0)" fg:x="299" fg:w="14"/><text x="9.6673%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.8268%" y="357" width="0.0315%" height="15" fill="rgb(207,7,3)" fg:x="312" fg:w="1"/><text x="10.0768%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.09%)</title><rect x="9.8583%" y="421" width="0.0945%" height="15" fill="rgb(206,98,19)" fg:x="313" fg:w="3"/><text x="10.1083%" y="431.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.06%)</title><rect x="9.8898%" y="405" width="0.0630%" height="15" fill="rgb(217,5,26)" fg:x="314" fg:w="2"/><text x="10.1398%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.06%)</title><rect x="9.8898%" y="389" width="0.0630%" height="15" fill="rgb(235,190,38)" fg:x="314" fg:w="2"/><text x="10.1398%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.06%)</title><rect x="9.8898%" y="373" width="0.0630%" height="15" fill="rgb(247,86,24)" fg:x="314" fg:w="2"/><text x="10.1398%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.16%)</title><rect x="10.1417%" y="293" width="0.1575%" height="15" fill="rgb(205,101,16)" fg:x="322" fg:w="5"/><text x="10.3917%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 1.07%)</title><rect x="9.2598%" y="453" width="1.0709%" height="15" fill="rgb(246,168,33)" fg:x="294" fg:w="34"/><text x="9.5098%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (34 samples, 1.07%)</title><rect x="9.2598%" y="437" width="1.0709%" height="15" fill="rgb(231,114,1)" fg:x="294" fg:w="34"/><text x="9.5098%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.38%)</title><rect x="9.9528%" y="421" width="0.3780%" height="15" fill="rgb(207,184,53)" fg:x="316" fg:w="12"/><text x="10.2028%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (12 samples, 0.38%)</title><rect x="9.9528%" y="405" width="0.3780%" height="15" fill="rgb(224,95,51)" fg:x="316" fg:w="12"/><text x="10.2028%" y="415.50"></text></g><g><title>core::hash::Hasher::write_i64 (12 samples, 0.38%)</title><rect x="9.9528%" y="389" width="0.3780%" height="15" fill="rgb(212,188,45)" fg:x="316" fg:w="12"/><text x="10.2028%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (12 samples, 0.38%)</title><rect x="9.9528%" y="373" width="0.3780%" height="15" fill="rgb(223,154,38)" fg:x="316" fg:w="12"/><text x="10.2028%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.38%)</title><rect x="9.9528%" y="357" width="0.3780%" height="15" fill="rgb(251,22,52)" fg:x="316" fg:w="12"/><text x="10.2028%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.38%)</title><rect x="9.9528%" y="341" width="0.3780%" height="15" fill="rgb(229,209,22)" fg:x="316" fg:w="12"/><text x="10.2028%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.38%)</title><rect x="9.9528%" y="325" width="0.3780%" height="15" fill="rgb(234,138,34)" fg:x="316" fg:w="12"/><text x="10.2028%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.25%)</title><rect x="10.0787%" y="309" width="0.2520%" height="15" fill="rgb(212,95,11)" fg:x="320" fg:w="8"/><text x="10.3287%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="10.2992%" y="293" width="0.0315%" height="15" fill="rgb(240,179,47)" fg:x="327" fg:w="1"/><text x="10.5492%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.25%)</title><rect x="10.4567%" y="405" width="0.2520%" height="15" fill="rgb(240,163,11)" fg:x="332" fg:w="8"/><text x="10.7067%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.25%)</title><rect x="10.4567%" y="389" width="0.2520%" height="15" fill="rgb(236,37,12)" fg:x="332" fg:w="8"/><text x="10.7067%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9 samples, 0.28%)</title><rect x="10.7087%" y="405" width="0.2835%" height="15" fill="rgb(232,164,16)" fg:x="340" fg:w="9"/><text x="10.9587%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (9 samples, 0.28%)</title><rect x="10.7087%" y="389" width="0.2835%" height="15" fill="rgb(244,205,15)" fg:x="340" fg:w="9"/><text x="10.9587%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (9 samples, 0.28%)</title><rect x="10.7087%" y="373" width="0.2835%" height="15" fill="rgb(223,117,47)" fg:x="340" fg:w="9"/><text x="10.9587%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.28%)</title><rect x="10.7087%" y="357" width="0.2835%" height="15" fill="rgb(244,107,35)" fg:x="340" fg:w="9"/><text x="10.9587%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (9 samples, 0.28%)</title><rect x="10.7087%" y="341" width="0.2835%" height="15" fill="rgb(205,140,8)" fg:x="340" fg:w="9"/><text x="10.9587%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (7 samples, 0.22%)</title><rect x="10.9921%" y="405" width="0.2205%" height="15" fill="rgb(228,84,46)" fg:x="349" fg:w="7"/><text x="11.2421%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.03%)</title><rect x="11.2126%" y="405" width="0.0315%" height="15" fill="rgb(254,188,9)" fg:x="356" fg:w="1"/><text x="11.4626%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.06%)</title><rect x="11.2441%" y="405" width="0.0630%" height="15" fill="rgb(206,112,54)" fg:x="357" fg:w="2"/><text x="11.4941%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.28%)</title><rect x="11.3071%" y="405" width="0.2835%" height="15" fill="rgb(216,84,49)" fg:x="359" fg:w="9"/><text x="11.5571%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.28%)</title><rect x="11.3071%" y="389" width="0.2835%" height="15" fill="rgb(214,194,35)" fg:x="359" fg:w="9"/><text x="11.5571%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="11.3071%" y="373" width="0.2835%" height="15" fill="rgb(249,28,3)" fg:x="359" fg:w="9"/><text x="11.5571%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="11.5906%" y="405" width="0.0630%" height="15" fill="rgb(222,56,52)" fg:x="368" fg:w="2"/><text x="11.8406%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="11.5906%" y="389" width="0.0630%" height="15" fill="rgb(245,217,50)" fg:x="368" fg:w="2"/><text x="11.8406%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (192 samples, 6.05%)</title><rect x="5.9528%" y="533" width="6.0472%" height="15" fill="rgb(213,201,24)" fg:x="189" fg:w="192"/><text x="6.2028%" y="543.50">project1..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (87 samples, 2.74%)</title><rect x="9.2598%" y="517" width="2.7402%" height="15" fill="rgb(248,116,28)" fg:x="294" fg:w="87"/><text x="9.5098%" y="527.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (87 samples, 2.74%)</title><rect x="9.2598%" y="501" width="2.7402%" height="15" fill="rgb(219,72,43)" fg:x="294" fg:w="87"/><text x="9.5098%" y="511.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (87 samples, 2.74%)</title><rect x="9.2598%" y="485" width="2.7402%" height="15" fill="rgb(209,138,14)" fg:x="294" fg:w="87"/><text x="9.5098%" y="495.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (87 samples, 2.74%)</title><rect x="9.2598%" y="469" width="2.7402%" height="15" fill="rgb(222,18,33)" fg:x="294" fg:w="87"/><text x="9.5098%" y="479.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (53 samples, 1.67%)</title><rect x="10.3307%" y="453" width="1.6693%" height="15" fill="rgb(213,199,7)" fg:x="328" fg:w="53"/><text x="10.5807%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (53 samples, 1.67%)</title><rect x="10.3307%" y="437" width="1.6693%" height="15" fill="rgb(250,110,10)" fg:x="328" fg:w="53"/><text x="10.5807%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (53 samples, 1.67%)</title><rect x="10.3307%" y="421" width="1.6693%" height="15" fill="rgb(248,123,6)" fg:x="328" fg:w="53"/><text x="10.5807%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (11 samples, 0.35%)</title><rect x="11.6535%" y="405" width="0.3465%" height="15" fill="rgb(206,91,31)" fg:x="370" fg:w="11"/><text x="11.9035%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.35%)</title><rect x="11.6535%" y="389" width="0.3465%" height="15" fill="rgb(211,154,13)" fg:x="370" fg:w="11"/><text x="11.9035%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.35%)</title><rect x="11.6535%" y="373" width="0.3465%" height="15" fill="rgb(225,148,7)" fg:x="370" fg:w="11"/><text x="11.9035%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (5 samples, 0.16%)</title><rect x="12.1890%" y="437" width="0.1575%" height="15" fill="rgb(220,160,43)" fg:x="387" fg:w="5"/><text x="12.4390%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.16%)</title><rect x="12.1890%" y="421" width="0.1575%" height="15" fill="rgb(213,52,39)" fg:x="387" fg:w="5"/><text x="12.4390%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="12.6299%" y="405" width="0.0630%" height="15" fill="rgb(243,137,7)" fg:x="401" fg:w="2"/><text x="12.8799%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="12.6299%" y="421" width="0.1260%" height="15" fill="rgb(230,79,13)" fg:x="401" fg:w="4"/><text x="12.8799%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="12.6929%" y="405" width="0.0630%" height="15" fill="rgb(247,105,23)" fg:x="403" fg:w="2"/><text x="12.9429%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="12.6929%" y="389" width="0.0630%" height="15" fill="rgb(223,179,41)" fg:x="403" fg:w="2"/><text x="12.9429%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.19%)</title><rect x="12.7559%" y="421" width="0.1890%" height="15" fill="rgb(218,9,34)" fg:x="405" fg:w="6"/><text x="13.0059%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.19%)</title><rect x="12.7559%" y="405" width="0.1890%" height="15" fill="rgb(222,106,8)" fg:x="405" fg:w="6"/><text x="13.0059%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (9 samples, 0.28%)</title><rect x="12.9449%" y="421" width="0.2835%" height="15" fill="rgb(211,220,0)" fg:x="411" fg:w="9"/><text x="13.1949%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (9 samples, 0.28%)</title><rect x="12.9449%" y="405" width="0.2835%" height="15" fill="rgb(229,52,16)" fg:x="411" fg:w="9"/><text x="13.1949%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (9 samples, 0.28%)</title><rect x="12.9449%" y="389" width="0.2835%" height="15" fill="rgb(212,155,18)" fg:x="411" fg:w="9"/><text x="13.1949%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (9 samples, 0.28%)</title><rect x="12.9449%" y="373" width="0.2835%" height="15" fill="rgb(242,21,14)" fg:x="411" fg:w="9"/><text x="13.1949%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.19%)</title><rect x="13.2283%" y="421" width="0.1890%" height="15" fill="rgb(222,19,48)" fg:x="420" fg:w="6"/><text x="13.4783%" y="431.50"></text></g><g><title>core::ptr::write (4 samples, 0.13%)</title><rect x="13.2913%" y="405" width="0.1260%" height="15" fill="rgb(232,45,27)" fg:x="422" fg:w="4"/><text x="13.5413%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.09%)</title><rect x="13.4173%" y="421" width="0.0945%" height="15" fill="rgb(249,103,42)" fg:x="426" fg:w="3"/><text x="13.6673%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="13.5118%" y="421" width="0.0315%" height="15" fill="rgb(246,81,33)" fg:x="429" fg:w="1"/><text x="13.7618%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="13.5118%" y="405" width="0.0315%" height="15" fill="rgb(252,33,42)" fg:x="429" fg:w="1"/><text x="13.7618%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.5118%" y="389" width="0.0315%" height="15" fill="rgb(209,212,41)" fg:x="429" fg:w="1"/><text x="13.7618%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="13.5118%" y="373" width="0.0315%" height="15" fill="rgb(207,154,6)" fg:x="429" fg:w="1"/><text x="13.7618%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (2 samples, 0.06%)</title><rect x="13.5433%" y="421" width="0.0630%" height="15" fill="rgb(223,64,47)" fg:x="430" fg:w="2"/><text x="13.7933%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.06%)</title><rect x="13.5433%" y="405" width="0.0630%" height="15" fill="rgb(211,161,38)" fg:x="430" fg:w="2"/><text x="13.7933%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (51 samples, 1.61%)</title><rect x="12.3465%" y="437" width="1.6063%" height="15" fill="rgb(219,138,40)" fg:x="392" fg:w="51"/><text x="12.5965%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (11 samples, 0.35%)</title><rect x="13.6063%" y="421" width="0.3465%" height="15" fill="rgb(241,228,46)" fg:x="432" fg:w="11"/><text x="13.8563%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.06%)</title><rect x="13.8898%" y="405" width="0.0630%" height="15" fill="rgb(223,209,38)" fg:x="441" fg:w="2"/><text x="14.1398%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.06%)</title><rect x="13.9528%" y="437" width="0.0630%" height="15" fill="rgb(236,164,45)" fg:x="443" fg:w="2"/><text x="14.2028%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="13.9528%" y="421" width="0.0630%" height="15" fill="rgb(231,15,5)" fg:x="443" fg:w="2"/><text x="14.2028%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="13.9528%" y="405" width="0.0630%" height="15" fill="rgb(252,35,15)" fg:x="443" fg:w="2"/><text x="14.2028%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="13.9528%" y="389" width="0.0630%" height="15" fill="rgb(248,181,18)" fg:x="443" fg:w="2"/><text x="14.2028%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (62 samples, 1.95%)</title><rect x="12.0945%" y="453" width="1.9528%" height="15" fill="rgb(233,39,42)" fg:x="384" fg:w="62"/><text x="12.3445%" y="463.50">p..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="14.0157%" y="437" width="0.0315%" height="15" fill="rgb(238,110,33)" fg:x="445" fg:w="1"/><text x="14.2657%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (66 samples, 2.08%)</title><rect x="12.0000%" y="517" width="2.0787%" height="15" fill="rgb(233,195,10)" fg:x="381" fg:w="66"/><text x="12.2500%" y="527.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (66 samples, 2.08%)</title><rect x="12.0000%" y="501" width="2.0787%" height="15" fill="rgb(254,105,3)" fg:x="381" fg:w="66"/><text x="12.2500%" y="511.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (66 samples, 2.08%)</title><rect x="12.0000%" y="485" width="2.0787%" height="15" fill="rgb(221,225,9)" fg:x="381" fg:w="66"/><text x="12.2500%" y="495.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (63 samples, 1.98%)</title><rect x="12.0945%" y="469" width="1.9843%" height="15" fill="rgb(224,227,45)" fg:x="384" fg:w="63"/><text x="12.3445%" y="479.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="14.0472%" y="453" width="0.0315%" height="15" fill="rgb(229,198,43)" fg:x="446" fg:w="1"/><text x="14.2972%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (2 samples, 0.06%)</title><rect x="14.1102%" y="469" width="0.0630%" height="15" fill="rgb(206,209,35)" fg:x="448" fg:w="2"/><text x="14.3602%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="14.1417%" y="453" width="0.0315%" height="15" fill="rgb(245,195,53)" fg:x="449" fg:w="1"/><text x="14.3917%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="14.1417%" y="437" width="0.0315%" height="15" fill="rgb(240,92,26)" fg:x="449" fg:w="1"/><text x="14.3917%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.1417%" y="421" width="0.0315%" height="15" fill="rgb(207,40,23)" fg:x="449" fg:w="1"/><text x="14.3917%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.1417%" y="405" width="0.0315%" height="15" fill="rgb(223,111,35)" fg:x="449" fg:w="1"/><text x="14.3917%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.1417%" y="389" width="0.0315%" height="15" fill="rgb(229,147,28)" fg:x="449" fg:w="1"/><text x="14.3917%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (70 samples, 2.20%)</title><rect x="12.0000%" y="533" width="2.2047%" height="15" fill="rgb(211,29,28)" fg:x="381" fg:w="70"/><text x="12.2500%" y="543.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (4 samples, 0.13%)</title><rect x="14.0787%" y="517" width="0.1260%" height="15" fill="rgb(228,72,33)" fg:x="447" fg:w="4"/><text x="14.3287%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.13%)</title><rect x="14.0787%" y="501" width="0.1260%" height="15" fill="rgb(205,214,31)" fg:x="447" fg:w="4"/><text x="14.3287%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (4 samples, 0.13%)</title><rect x="14.0787%" y="485" width="0.1260%" height="15" fill="rgb(224,111,15)" fg:x="447" fg:w="4"/><text x="14.3287%" y="495.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="14.1732%" y="469" width="0.0315%" height="15" fill="rgb(253,21,26)" fg:x="450" fg:w="1"/><text x="14.4232%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="14.1732%" y="453" width="0.0315%" height="15" fill="rgb(245,139,43)" fg:x="450" fg:w="1"/><text x="14.4232%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="14.2992%" y="485" width="0.0945%" height="15" fill="rgb(252,170,7)" fg:x="454" fg:w="3"/><text x="14.5492%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (7 samples, 0.22%)</title><rect x="14.2047%" y="533" width="0.2205%" height="15" fill="rgb(231,118,14)" fg:x="451" fg:w="7"/><text x="14.4547%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (7 samples, 0.22%)</title><rect x="14.2047%" y="517" width="0.2205%" height="15" fill="rgb(238,83,0)" fg:x="451" fg:w="7"/><text x="14.4547%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.13%)</title><rect x="14.2992%" y="501" width="0.1260%" height="15" fill="rgb(221,39,39)" fg:x="454" fg:w="4"/><text x="14.5492%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.3937%" y="485" width="0.0315%" height="15" fill="rgb(222,119,46)" fg:x="457" fg:w="1"/><text x="14.6437%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.3937%" y="469" width="0.0315%" height="15" fill="rgb(222,165,49)" fg:x="457" fg:w="1"/><text x="14.6437%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (1 samples, 0.03%)</title><rect x="14.4252%" y="533" width="0.0315%" height="15" fill="rgb(219,113,52)" fg:x="458" fg:w="1"/><text x="14.6752%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.4252%" y="517" width="0.0315%" height="15" fill="rgb(214,7,15)" fg:x="458" fg:w="1"/><text x="14.6752%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.4252%" y="501" width="0.0315%" height="15" fill="rgb(235,32,4)" fg:x="458" fg:w="1"/><text x="14.6752%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.4252%" y="485" width="0.0315%" height="15" fill="rgb(238,90,54)" fg:x="458" fg:w="1"/><text x="14.6752%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (7 samples, 0.22%)</title><rect x="14.4567%" y="533" width="0.2205%" height="15" fill="rgb(213,208,19)" fg:x="459" fg:w="7"/><text x="14.7067%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (7 samples, 0.22%)</title><rect x="14.6772%" y="533" width="0.2205%" height="15" fill="rgb(233,156,4)" fg:x="466" fg:w="7"/><text x="14.9272%" y="543.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (7 samples, 0.22%)</title><rect x="14.6772%" y="517" width="0.2205%" height="15" fill="rgb(207,194,5)" fg:x="466" fg:w="7"/><text x="14.9272%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.22%)</title><rect x="14.6772%" y="501" width="0.2205%" height="15" fill="rgb(206,111,30)" fg:x="466" fg:w="7"/><text x="14.9272%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.22%)</title><rect x="14.6772%" y="485" width="0.2205%" height="15" fill="rgb(243,70,54)" fg:x="466" fg:w="7"/><text x="14.9272%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.22%)</title><rect x="14.6772%" y="469" width="0.2205%" height="15" fill="rgb(242,28,8)" fg:x="466" fg:w="7"/><text x="14.9272%" y="479.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="14.8976%" y="533" width="0.0315%" height="15" fill="rgb(219,106,18)" fg:x="473" fg:w="1"/><text x="15.1476%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (441 samples, 13.89%)</title><rect x="1.1339%" y="549" width="13.8898%" height="15" fill="rgb(244,222,10)" fg:x="36" fg:w="441"/><text x="1.3839%" y="559.50">project1::solver::cdc..</text></g><g><title>project1::solver::types::Lit::var_idx (3 samples, 0.09%)</title><rect x="14.9291%" y="533" width="0.0945%" height="15" fill="rgb(236,179,52)" fg:x="474" fg:w="3"/><text x="15.1791%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="14.9921%" y="517" width="0.0315%" height="15" fill="rgb(213,23,39)" fg:x="476" fg:w="1"/><text x="15.2421%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (1 samples, 0.03%)</title><rect x="15.0236%" y="549" width="0.0315%" height="15" fill="rgb(238,48,10)" fg:x="477" fg:w="1"/><text x="15.2736%" y="559.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (1 samples, 0.03%)</title><rect x="15.0236%" y="533" width="0.0315%" height="15" fill="rgb(251,196,23)" fg:x="477" fg:w="1"/><text x="15.2736%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="15.0236%" y="517" width="0.0315%" height="15" fill="rgb(250,152,24)" fg:x="477" fg:w="1"/><text x="15.2736%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="15.0236%" y="501" width="0.0315%" height="15" fill="rgb(209,150,17)" fg:x="477" fg:w="1"/><text x="15.2736%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="15.0236%" y="485" width="0.0315%" height="15" fill="rgb(234,202,34)" fg:x="477" fg:w="1"/><text x="15.2736%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="15.0236%" y="469" width="0.0315%" height="15" fill="rgb(253,148,53)" fg:x="477" fg:w="1"/><text x="15.2736%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.2126%" y="533" width="0.0315%" height="15" fill="rgb(218,129,16)" fg:x="483" fg:w="1"/><text x="15.4626%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="15.2126%" y="517" width="0.0315%" height="15" fill="rgb(216,85,19)" fg:x="483" fg:w="1"/><text x="15.4626%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.2126%" y="501" width="0.0315%" height="15" fill="rgb(235,228,7)" fg:x="483" fg:w="1"/><text x="15.4626%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.09%)</title><rect x="15.2441%" y="517" width="0.0945%" height="15" fill="rgb(245,175,0)" fg:x="484" fg:w="3"/><text x="15.4941%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.06%)</title><rect x="15.2756%" y="501" width="0.0630%" height="15" fill="rgb(208,168,36)" fg:x="485" fg:w="2"/><text x="15.5256%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="15.2756%" y="485" width="0.0630%" height="15" fill="rgb(246,171,24)" fg:x="485" fg:w="2"/><text x="15.5256%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.16%)</title><rect x="15.2441%" y="533" width="0.1575%" height="15" fill="rgb(215,142,24)" fg:x="484" fg:w="5"/><text x="15.4941%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.06%)</title><rect x="15.3386%" y="517" width="0.0630%" height="15" fill="rgb(250,187,7)" fg:x="487" fg:w="2"/><text x="15.5886%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="15.3386%" y="501" width="0.0630%" height="15" fill="rgb(228,66,33)" fg:x="487" fg:w="2"/><text x="15.5886%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="15.4016%" y="517" width="0.0315%" height="15" fill="rgb(234,215,21)" fg:x="489" fg:w="1"/><text x="15.6516%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="15.4016%" y="501" width="0.0315%" height="15" fill="rgb(222,191,20)" fg:x="489" fg:w="1"/><text x="15.6516%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="15.4331%" y="517" width="0.0315%" height="15" fill="rgb(245,79,54)" fg:x="490" fg:w="1"/><text x="15.6831%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="15.4331%" y="501" width="0.0315%" height="15" fill="rgb(240,10,37)" fg:x="490" fg:w="1"/><text x="15.6831%" y="511.50"></text></g><g><title>core::ptr::read (3 samples, 0.09%)</title><rect x="15.4646%" y="501" width="0.0945%" height="15" fill="rgb(214,192,32)" fg:x="491" fg:w="3"/><text x="15.7146%" y="511.50"></text></g><g><title>core::mem::replace (8 samples, 0.25%)</title><rect x="15.4646%" y="517" width="0.2520%" height="15" fill="rgb(209,36,54)" fg:x="491" fg:w="8"/><text x="15.7146%" y="527.50"></text></g><g><title>core::ptr::write (5 samples, 0.16%)</title><rect x="15.5591%" y="501" width="0.1575%" height="15" fill="rgb(220,10,11)" fg:x="494" fg:w="5"/><text x="15.8091%" y="511.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (3 samples, 0.09%)</title><rect x="15.7165%" y="517" width="0.0945%" height="15" fill="rgb(221,106,17)" fg:x="499" fg:w="3"/><text x="15.9665%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="15.8110%" y="501" width="0.0630%" height="15" fill="rgb(251,142,44)" fg:x="502" fg:w="2"/><text x="16.0610%" y="511.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="15.8110%" y="485" width="0.0630%" height="15" fill="rgb(238,13,15)" fg:x="502" fg:w="2"/><text x="16.0610%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.06%)</title><rect x="15.8110%" y="469" width="0.0630%" height="15" fill="rgb(208,107,27)" fg:x="502" fg:w="2"/><text x="16.0610%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="15.8110%" y="453" width="0.0630%" height="15" fill="rgb(205,136,37)" fg:x="502" fg:w="2"/><text x="16.0610%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.06%)</title><rect x="15.8110%" y="437" width="0.0630%" height="15" fill="rgb(250,205,27)" fg:x="502" fg:w="2"/><text x="16.0610%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.06%)</title><rect x="15.8110%" y="421" width="0.0630%" height="15" fill="rgb(210,80,43)" fg:x="502" fg:w="2"/><text x="16.0610%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="15.8110%" y="405" width="0.0630%" height="15" fill="rgb(247,160,36)" fg:x="502" fg:w="2"/><text x="16.0610%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="15.8110%" y="389" width="0.0630%" height="15" fill="rgb(234,13,49)" fg:x="502" fg:w="2"/><text x="16.0610%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="15.8110%" y="373" width="0.0630%" height="15" fill="rgb(234,122,0)" fg:x="502" fg:w="2"/><text x="16.0610%" y="383.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="15.8110%" y="357" width="0.0630%" height="15" fill="rgb(207,146,38)" fg:x="502" fg:w="2"/><text x="16.0610%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="15.8110%" y="341" width="0.0630%" height="15" fill="rgb(207,177,25)" fg:x="502" fg:w="2"/><text x="16.0610%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="15.8110%" y="325" width="0.0630%" height="15" fill="rgb(211,178,42)" fg:x="502" fg:w="2"/><text x="16.0610%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="15.8110%" y="309" width="0.0630%" height="15" fill="rgb(230,69,54)" fg:x="502" fg:w="2"/><text x="16.0610%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="15.8110%" y="293" width="0.0630%" height="15" fill="rgb(214,135,41)" fg:x="502" fg:w="2"/><text x="16.0610%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="15.8425%" y="277" width="0.0315%" height="15" fill="rgb(237,67,25)" fg:x="503" fg:w="1"/><text x="16.0925%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="15.8425%" y="261" width="0.0315%" height="15" fill="rgb(222,189,50)" fg:x="503" fg:w="1"/><text x="16.0925%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (3 samples, 0.09%)</title><rect x="15.8110%" y="517" width="0.0945%" height="15" fill="rgb(245,148,34)" fg:x="502" fg:w="3"/><text x="16.0610%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.03%)</title><rect x="15.8740%" y="501" width="0.0315%" height="15" fill="rgb(222,29,6)" fg:x="504" fg:w="1"/><text x="16.1240%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="15.8740%" y="485" width="0.0315%" height="15" fill="rgb(221,189,43)" fg:x="504" fg:w="1"/><text x="16.1240%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="15.8740%" y="469" width="0.0315%" height="15" fill="rgb(207,36,27)" fg:x="504" fg:w="1"/><text x="16.1240%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="15.8740%" y="453" width="0.0315%" height="15" fill="rgb(217,90,24)" fg:x="504" fg:w="1"/><text x="16.1240%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="16.0945%" y="341" width="0.0630%" height="15" fill="rgb(224,66,35)" fg:x="511" fg:w="2"/><text x="16.3445%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.16%)</title><rect x="16.0315%" y="357" width="0.1575%" height="15" fill="rgb(221,13,50)" fg:x="509" fg:w="5"/><text x="16.2815%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="16.1575%" y="341" width="0.0315%" height="15" fill="rgb(236,68,49)" fg:x="513" fg:w="1"/><text x="16.4075%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.13%)</title><rect x="16.2520%" y="341" width="0.1260%" height="15" fill="rgb(229,146,28)" fg:x="516" fg:w="4"/><text x="16.5020%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="16.3780%" y="341" width="0.0945%" height="15" fill="rgb(225,31,38)" fg:x="520" fg:w="3"/><text x="16.6280%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.50%)</title><rect x="16.0000%" y="405" width="0.5039%" height="15" fill="rgb(250,208,3)" fg:x="508" fg:w="16"/><text x="16.2500%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.50%)</title><rect x="16.0000%" y="389" width="0.5039%" height="15" fill="rgb(246,54,23)" fg:x="508" fg:w="16"/><text x="16.2500%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.50%)</title><rect x="16.0000%" y="373" width="0.5039%" height="15" fill="rgb(243,76,11)" fg:x="508" fg:w="16"/><text x="16.2500%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.31%)</title><rect x="16.1890%" y="357" width="0.3150%" height="15" fill="rgb(245,21,50)" fg:x="514" fg:w="10"/><text x="16.4390%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="16.4724%" y="341" width="0.0315%" height="15" fill="rgb(228,9,43)" fg:x="523" fg:w="1"/><text x="16.7224%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.13%)</title><rect x="16.5039%" y="405" width="0.1260%" height="15" fill="rgb(208,100,47)" fg:x="524" fg:w="4"/><text x="16.7539%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.13%)</title><rect x="16.5039%" y="389" width="0.1260%" height="15" fill="rgb(232,26,8)" fg:x="524" fg:w="4"/><text x="16.7539%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.13%)</title><rect x="16.5039%" y="373" width="0.1260%" height="15" fill="rgb(216,166,38)" fg:x="524" fg:w="4"/><text x="16.7539%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.13%)</title><rect x="16.5039%" y="357" width="0.1260%" height="15" fill="rgb(251,202,51)" fg:x="524" fg:w="4"/><text x="16.7539%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="16.6614%" y="277" width="0.0630%" height="15" fill="rgb(254,216,34)" fg:x="529" fg:w="2"/><text x="16.9114%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.79%)</title><rect x="16.0000%" y="437" width="0.7874%" height="15" fill="rgb(251,32,27)" fg:x="508" fg:w="25"/><text x="16.2500%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.79%)</title><rect x="16.0000%" y="421" width="0.7874%" height="15" fill="rgb(208,127,28)" fg:x="508" fg:w="25"/><text x="16.2500%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.16%)</title><rect x="16.6299%" y="405" width="0.1575%" height="15" fill="rgb(224,137,22)" fg:x="528" fg:w="5"/><text x="16.8799%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.16%)</title><rect x="16.6299%" y="389" width="0.1575%" height="15" fill="rgb(254,70,32)" fg:x="528" fg:w="5"/><text x="16.8799%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.16%)</title><rect x="16.6299%" y="373" width="0.1575%" height="15" fill="rgb(229,75,37)" fg:x="528" fg:w="5"/><text x="16.8799%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.16%)</title><rect x="16.6299%" y="357" width="0.1575%" height="15" fill="rgb(252,64,23)" fg:x="528" fg:w="5"/><text x="16.8799%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="16.6299%" y="341" width="0.1575%" height="15" fill="rgb(232,162,48)" fg:x="528" fg:w="5"/><text x="16.8799%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="16.6299%" y="325" width="0.1575%" height="15" fill="rgb(246,160,12)" fg:x="528" fg:w="5"/><text x="16.8799%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="16.6299%" y="309" width="0.1575%" height="15" fill="rgb(247,166,0)" fg:x="528" fg:w="5"/><text x="16.8799%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.16%)</title><rect x="16.6299%" y="293" width="0.1575%" height="15" fill="rgb(249,219,21)" fg:x="528" fg:w="5"/><text x="16.8799%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="16.7244%" y="277" width="0.0630%" height="15" fill="rgb(205,209,3)" fg:x="531" fg:w="2"/><text x="16.9744%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="16.8189%" y="389" width="0.0945%" height="15" fill="rgb(243,44,1)" fg:x="534" fg:w="3"/><text x="17.0689%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="16.8189%" y="373" width="0.0945%" height="15" fill="rgb(206,159,16)" fg:x="534" fg:w="3"/><text x="17.0689%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="16.8189%" y="357" width="0.0945%" height="15" fill="rgb(244,77,30)" fg:x="534" fg:w="3"/><text x="17.0689%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="16.8189%" y="341" width="0.0945%" height="15" fill="rgb(218,69,12)" fg:x="534" fg:w="3"/><text x="17.0689%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="16.8189%" y="325" width="0.0945%" height="15" fill="rgb(212,87,7)" fg:x="534" fg:w="3"/><text x="17.0689%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (33 samples, 1.04%)</title><rect x="15.9370%" y="453" width="1.0394%" height="15" fill="rgb(245,114,25)" fg:x="506" fg:w="33"/><text x="16.1870%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 0.19%)</title><rect x="16.7874%" y="437" width="0.1890%" height="15" fill="rgb(210,61,42)" fg:x="533" fg:w="6"/><text x="17.0374%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.19%)</title><rect x="16.7874%" y="421" width="0.1890%" height="15" fill="rgb(211,52,33)" fg:x="533" fg:w="6"/><text x="17.0374%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.19%)</title><rect x="16.7874%" y="405" width="0.1890%" height="15" fill="rgb(234,58,33)" fg:x="533" fg:w="6"/><text x="17.0374%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="16.9134%" y="389" width="0.0630%" height="15" fill="rgb(220,115,36)" fg:x="537" fg:w="2"/><text x="17.1634%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (35 samples, 1.10%)</title><rect x="15.9370%" y="501" width="1.1024%" height="15" fill="rgb(243,153,54)" fg:x="506" fg:w="35"/><text x="16.1870%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (35 samples, 1.10%)</title><rect x="15.9370%" y="485" width="1.1024%" height="15" fill="rgb(251,47,18)" fg:x="506" fg:w="35"/><text x="16.1870%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (35 samples, 1.10%)</title><rect x="15.9370%" y="469" width="1.1024%" height="15" fill="rgb(242,102,42)" fg:x="506" fg:w="35"/><text x="16.1870%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="16.9764%" y="453" width="0.0630%" height="15" fill="rgb(234,31,38)" fg:x="539" fg:w="2"/><text x="17.2264%" y="463.50"></text></g><g><title>compare::Compare::compares_ge (5 samples, 0.16%)</title><rect x="17.0394%" y="469" width="0.1575%" height="15" fill="rgb(221,117,51)" fg:x="541" fg:w="5"/><text x="17.2894%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.16%)</title><rect x="17.0394%" y="453" width="0.1575%" height="15" fill="rgb(212,20,18)" fg:x="541" fg:w="5"/><text x="17.2894%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.16%)</title><rect x="17.0394%" y="437" width="0.1575%" height="15" fill="rgb(245,133,36)" fg:x="541" fg:w="5"/><text x="17.2894%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (5 samples, 0.16%)</title><rect x="17.0394%" y="421" width="0.1575%" height="15" fill="rgb(212,6,19)" fg:x="541" fg:w="5"/><text x="17.2894%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (5 samples, 0.16%)</title><rect x="17.0394%" y="405" width="0.1575%" height="15" fill="rgb(218,1,36)" fg:x="541" fg:w="5"/><text x="17.2894%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (5 samples, 0.16%)</title><rect x="17.0394%" y="389" width="0.1575%" height="15" fill="rgb(246,84,54)" fg:x="541" fg:w="5"/><text x="17.2894%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (5 samples, 0.16%)</title><rect x="17.0394%" y="373" width="0.1575%" height="15" fill="rgb(242,110,6)" fg:x="541" fg:w="5"/><text x="17.2894%" y="383.50"></text></g><g><title>compare::Compare::compares_le (6 samples, 0.19%)</title><rect x="17.1969%" y="469" width="0.1890%" height="15" fill="rgb(214,47,5)" fg:x="546" fg:w="6"/><text x="17.4469%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (6 samples, 0.19%)</title><rect x="17.1969%" y="453" width="0.1890%" height="15" fill="rgb(218,159,25)" fg:x="546" fg:w="6"/><text x="17.4469%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.19%)</title><rect x="17.1969%" y="437" width="0.1890%" height="15" fill="rgb(215,211,28)" fg:x="546" fg:w="6"/><text x="17.4469%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.41%)</title><rect x="17.3858%" y="437" width="0.4094%" height="15" fill="rgb(238,59,32)" fg:x="552" fg:w="13"/><text x="17.6358%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="17.8898%" y="309" width="0.0315%" height="15" fill="rgb(226,82,3)" fg:x="568" fg:w="1"/><text x="18.1398%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="17.8898%" y="293" width="0.0315%" height="15" fill="rgb(240,164,32)" fg:x="568" fg:w="1"/><text x="18.1398%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.19%)</title><rect x="18.0472%" y="293" width="0.1890%" height="15" fill="rgb(232,46,7)" fg:x="573" fg:w="6"/><text x="18.2972%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.47%)</title><rect x="17.8268%" y="357" width="0.4724%" height="15" fill="rgb(229,129,53)" fg:x="566" fg:w="15"/><text x="18.0768%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.47%)</title><rect x="17.8268%" y="341" width="0.4724%" height="15" fill="rgb(234,188,29)" fg:x="566" fg:w="15"/><text x="18.0768%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.47%)</title><rect x="17.8268%" y="325" width="0.4724%" height="15" fill="rgb(246,141,4)" fg:x="566" fg:w="15"/><text x="18.0768%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.38%)</title><rect x="17.9213%" y="309" width="0.3780%" height="15" fill="rgb(229,23,39)" fg:x="569" fg:w="12"/><text x="18.1713%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="18.2362%" y="293" width="0.0630%" height="15" fill="rgb(206,12,3)" fg:x="579" fg:w="2"/><text x="18.4862%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.16%)</title><rect x="18.2992%" y="357" width="0.1575%" height="15" fill="rgb(252,226,20)" fg:x="581" fg:w="5"/><text x="18.5492%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.13%)</title><rect x="18.3307%" y="341" width="0.1260%" height="15" fill="rgb(216,123,35)" fg:x="582" fg:w="4"/><text x="18.5807%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.13%)</title><rect x="18.3307%" y="325" width="0.1260%" height="15" fill="rgb(212,68,40)" fg:x="582" fg:w="4"/><text x="18.5807%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.13%)</title><rect x="18.3307%" y="309" width="0.1260%" height="15" fill="rgb(254,125,32)" fg:x="582" fg:w="4"/><text x="18.5807%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.69%)</title><rect x="17.8268%" y="389" width="0.6929%" height="15" fill="rgb(253,97,22)" fg:x="566" fg:w="22"/><text x="18.0768%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.69%)</title><rect x="17.8268%" y="373" width="0.6929%" height="15" fill="rgb(241,101,14)" fg:x="566" fg:w="22"/><text x="18.0768%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="18.4567%" y="357" width="0.0630%" height="15" fill="rgb(238,103,29)" fg:x="586" fg:w="2"/><text x="18.7067%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="18.4567%" y="341" width="0.0630%" height="15" fill="rgb(233,195,47)" fg:x="586" fg:w="2"/><text x="18.7067%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="18.4567%" y="325" width="0.0630%" height="15" fill="rgb(246,218,30)" fg:x="586" fg:w="2"/><text x="18.7067%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="18.4567%" y="309" width="0.0630%" height="15" fill="rgb(219,145,47)" fg:x="586" fg:w="2"/><text x="18.7067%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.4567%" y="293" width="0.0630%" height="15" fill="rgb(243,12,26)" fg:x="586" fg:w="2"/><text x="18.7067%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.4567%" y="277" width="0.0630%" height="15" fill="rgb(214,87,16)" fg:x="586" fg:w="2"/><text x="18.7067%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.4567%" y="261" width="0.0630%" height="15" fill="rgb(208,99,42)" fg:x="586" fg:w="2"/><text x="18.7067%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="18.4567%" y="245" width="0.0630%" height="15" fill="rgb(253,99,2)" fg:x="586" fg:w="2"/><text x="18.7067%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="18.4882%" y="229" width="0.0315%" height="15" fill="rgb(220,168,23)" fg:x="587" fg:w="1"/><text x="18.7382%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="18.5197%" y="341" width="0.1260%" height="15" fill="rgb(242,38,24)" fg:x="588" fg:w="4"/><text x="18.7697%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="18.6142%" y="325" width="0.0315%" height="15" fill="rgb(225,182,9)" fg:x="591" fg:w="1"/><text x="18.8642%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="18.6457%" y="325" width="0.0630%" height="15" fill="rgb(243,178,37)" fg:x="592" fg:w="2"/><text x="18.8957%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="18.6457%" y="309" width="0.0630%" height="15" fill="rgb(232,139,19)" fg:x="592" fg:w="2"/><text x="18.8957%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="18.6457%" y="293" width="0.0630%" height="15" fill="rgb(225,201,24)" fg:x="592" fg:w="2"/><text x="18.8957%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="18.6457%" y="277" width="0.0630%" height="15" fill="rgb(221,47,46)" fg:x="592" fg:w="2"/><text x="18.8957%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.16%)</title><rect x="18.6457%" y="341" width="0.1575%" height="15" fill="rgb(249,23,13)" fg:x="592" fg:w="5"/><text x="18.8957%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.09%)</title><rect x="18.7087%" y="325" width="0.0945%" height="15" fill="rgb(219,9,5)" fg:x="594" fg:w="3"/><text x="18.9587%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.09%)</title><rect x="18.7087%" y="309" width="0.0945%" height="15" fill="rgb(254,171,16)" fg:x="594" fg:w="3"/><text x="18.9587%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.09%)</title><rect x="18.7087%" y="293" width="0.0945%" height="15" fill="rgb(230,171,20)" fg:x="594" fg:w="3"/><text x="18.9587%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.09%)</title><rect x="18.7087%" y="277" width="0.0945%" height="15" fill="rgb(210,71,41)" fg:x="594" fg:w="3"/><text x="18.9587%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="18.8031%" y="341" width="0.0315%" height="15" fill="rgb(206,173,20)" fg:x="597" fg:w="1"/><text x="19.0531%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="18.8346%" y="341" width="0.0315%" height="15" fill="rgb(233,88,34)" fg:x="598" fg:w="1"/><text x="19.0846%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="18.8661%" y="341" width="0.0630%" height="15" fill="rgb(223,209,46)" fg:x="599" fg:w="2"/><text x="19.1161%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="18.8661%" y="325" width="0.0630%" height="15" fill="rgb(250,43,18)" fg:x="599" fg:w="2"/><text x="19.1161%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="18.8661%" y="309" width="0.0630%" height="15" fill="rgb(208,13,10)" fg:x="599" fg:w="2"/><text x="19.1161%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (51 samples, 1.61%)</title><rect x="17.3858%" y="469" width="1.6063%" height="15" fill="rgb(212,200,36)" fg:x="552" fg:w="51"/><text x="17.6358%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 1.61%)</title><rect x="17.3858%" y="453" width="1.6063%" height="15" fill="rgb(225,90,30)" fg:x="552" fg:w="51"/><text x="17.6358%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (38 samples, 1.20%)</title><rect x="17.7953%" y="437" width="1.1969%" height="15" fill="rgb(236,182,39)" fg:x="565" fg:w="38"/><text x="18.0453%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (38 samples, 1.20%)</title><rect x="17.7953%" y="421" width="1.1969%" height="15" fill="rgb(212,144,35)" fg:x="565" fg:w="38"/><text x="18.0453%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (38 samples, 1.20%)</title><rect x="17.7953%" y="405" width="1.1969%" height="15" fill="rgb(228,63,44)" fg:x="565" fg:w="38"/><text x="18.0453%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15 samples, 0.47%)</title><rect x="18.5197%" y="389" width="0.4724%" height="15" fill="rgb(228,109,6)" fg:x="588" fg:w="15"/><text x="18.7697%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.47%)</title><rect x="18.5197%" y="373" width="0.4724%" height="15" fill="rgb(238,117,24)" fg:x="588" fg:w="15"/><text x="18.7697%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.47%)</title><rect x="18.5197%" y="357" width="0.4724%" height="15" fill="rgb(242,26,26)" fg:x="588" fg:w="15"/><text x="18.7697%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="18.9291%" y="341" width="0.0630%" height="15" fill="rgb(221,92,48)" fg:x="601" fg:w="2"/><text x="19.1791%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="18.9291%" y="325" width="0.0630%" height="15" fill="rgb(209,209,32)" fg:x="601" fg:w="2"/><text x="19.1791%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (64 samples, 2.02%)</title><rect x="17.0394%" y="485" width="2.0157%" height="15" fill="rgb(221,70,22)" fg:x="541" fg:w="64"/><text x="17.2894%" y="495.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="18.9921%" y="469" width="0.0630%" height="15" fill="rgb(248,145,5)" fg:x="603" fg:w="2"/><text x="19.2421%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (65 samples, 2.05%)</title><rect x="17.0394%" y="501" width="2.0472%" height="15" fill="rgb(226,116,26)" fg:x="541" fg:w="65"/><text x="17.2894%" y="511.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="19.0551%" y="485" width="0.0315%" height="15" fill="rgb(244,5,17)" fg:x="605" fg:w="1"/><text x="19.3051%" y="495.50"></text></g><g><title>compare::Compare::compares_le (5 samples, 0.16%)</title><rect x="19.1181%" y="485" width="0.1575%" height="15" fill="rgb(252,159,33)" fg:x="607" fg:w="5"/><text x="19.3681%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.16%)</title><rect x="19.1181%" y="469" width="0.1575%" height="15" fill="rgb(206,71,0)" fg:x="607" fg:w="5"/><text x="19.3681%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.16%)</title><rect x="19.1181%" y="453" width="0.1575%" height="15" fill="rgb(233,118,54)" fg:x="607" fg:w="5"/><text x="19.3681%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="19.2756%" y="453" width="0.2835%" height="15" fill="rgb(234,83,48)" fg:x="612" fg:w="9"/><text x="19.5256%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="19.5591%" y="453" width="0.0315%" height="15" fill="rgb(228,3,54)" fg:x="621" fg:w="1"/><text x="19.8091%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="19.5591%" y="437" width="0.0315%" height="15" fill="rgb(226,155,13)" fg:x="621" fg:w="1"/><text x="19.8091%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="19.5591%" y="421" width="0.0315%" height="15" fill="rgb(241,28,37)" fg:x="621" fg:w="1"/><text x="19.8091%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="19.6850%" y="325" width="0.0630%" height="15" fill="rgb(233,93,10)" fg:x="625" fg:w="2"/><text x="19.9350%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="19.7165%" y="309" width="0.0315%" height="15" fill="rgb(225,113,19)" fg:x="626" fg:w="1"/><text x="19.9665%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="19.8110%" y="309" width="0.0945%" height="15" fill="rgb(241,2,18)" fg:x="629" fg:w="3"/><text x="20.0610%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.35%)</title><rect x="19.5906%" y="373" width="0.3465%" height="15" fill="rgb(228,207,21)" fg:x="622" fg:w="11"/><text x="19.8406%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.35%)</title><rect x="19.5906%" y="357" width="0.3465%" height="15" fill="rgb(213,211,35)" fg:x="622" fg:w="11"/><text x="19.8406%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.35%)</title><rect x="19.5906%" y="341" width="0.3465%" height="15" fill="rgb(209,83,10)" fg:x="622" fg:w="11"/><text x="19.8406%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.19%)</title><rect x="19.7480%" y="325" width="0.1890%" height="15" fill="rgb(209,164,1)" fg:x="627" fg:w="6"/><text x="19.9980%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="19.9055%" y="309" width="0.0315%" height="15" fill="rgb(213,184,43)" fg:x="632" fg:w="1"/><text x="20.1555%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.57%)</title><rect x="19.5906%" y="405" width="0.5669%" height="15" fill="rgb(231,61,34)" fg:x="622" fg:w="18"/><text x="19.8406%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.57%)</title><rect x="19.5906%" y="389" width="0.5669%" height="15" fill="rgb(235,75,3)" fg:x="622" fg:w="18"/><text x="19.8406%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.22%)</title><rect x="19.9370%" y="373" width="0.2205%" height="15" fill="rgb(220,106,47)" fg:x="633" fg:w="7"/><text x="20.1870%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (7 samples, 0.22%)</title><rect x="19.9370%" y="357" width="0.2205%" height="15" fill="rgb(210,196,33)" fg:x="633" fg:w="7"/><text x="20.1870%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (7 samples, 0.22%)</title><rect x="19.9370%" y="341" width="0.2205%" height="15" fill="rgb(229,154,42)" fg:x="633" fg:w="7"/><text x="20.1870%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (7 samples, 0.22%)</title><rect x="19.9370%" y="325" width="0.2205%" height="15" fill="rgb(228,114,26)" fg:x="633" fg:w="7"/><text x="20.1870%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.22%)</title><rect x="19.9370%" y="309" width="0.2205%" height="15" fill="rgb(208,144,1)" fg:x="633" fg:w="7"/><text x="20.1870%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.22%)</title><rect x="19.9370%" y="293" width="0.2205%" height="15" fill="rgb(239,112,37)" fg:x="633" fg:w="7"/><text x="20.1870%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.22%)</title><rect x="19.9370%" y="277" width="0.2205%" height="15" fill="rgb(210,96,50)" fg:x="633" fg:w="7"/><text x="20.1870%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.16%)</title><rect x="20.0000%" y="261" width="0.1575%" height="15" fill="rgb(222,178,2)" fg:x="635" fg:w="5"/><text x="20.2500%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.13%)</title><rect x="20.0315%" y="245" width="0.1260%" height="15" fill="rgb(226,74,18)" fg:x="636" fg:w="4"/><text x="20.2815%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="20.2205%" y="357" width="0.0630%" height="15" fill="rgb(225,67,54)" fg:x="642" fg:w="2"/><text x="20.4705%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="20.2205%" y="341" width="0.0630%" height="15" fill="rgb(251,92,32)" fg:x="642" fg:w="2"/><text x="20.4705%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="20.2835%" y="357" width="0.0315%" height="15" fill="rgb(228,149,22)" fg:x="644" fg:w="1"/><text x="20.5335%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="20.2835%" y="341" width="0.0315%" height="15" fill="rgb(243,54,13)" fg:x="644" fg:w="1"/><text x="20.5335%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="20.2835%" y="325" width="0.0315%" height="15" fill="rgb(243,180,28)" fg:x="644" fg:w="1"/><text x="20.5335%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="20.2835%" y="309" width="0.0315%" height="15" fill="rgb(208,167,24)" fg:x="644" fg:w="1"/><text x="20.5335%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.03%)</title><rect x="20.2835%" y="293" width="0.0315%" height="15" fill="rgb(245,73,45)" fg:x="644" fg:w="1"/><text x="20.5335%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="20.3150%" y="357" width="0.0315%" height="15" fill="rgb(237,203,48)" fg:x="645" fg:w="1"/><text x="20.5650%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="20.3150%" y="341" width="0.0315%" height="15" fill="rgb(211,197,16)" fg:x="645" fg:w="1"/><text x="20.5650%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="20.3150%" y="325" width="0.0315%" height="15" fill="rgb(243,99,51)" fg:x="645" fg:w="1"/><text x="20.5650%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="20.3465%" y="357" width="0.0630%" height="15" fill="rgb(215,123,29)" fg:x="646" fg:w="2"/><text x="20.5965%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="20.3465%" y="341" width="0.0630%" height="15" fill="rgb(239,186,37)" fg:x="646" fg:w="2"/><text x="20.5965%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.31%)</title><rect x="20.1575%" y="373" width="0.3150%" height="15" fill="rgb(252,136,39)" fg:x="640" fg:w="10"/><text x="20.4075%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="20.4094%" y="357" width="0.0630%" height="15" fill="rgb(223,213,32)" fg:x="648" fg:w="2"/><text x="20.6594%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.26%)</title><rect x="19.2756%" y="469" width="1.2598%" height="15" fill="rgb(233,115,5)" fg:x="612" fg:w="40"/><text x="19.5256%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (30 samples, 0.94%)</title><rect x="19.5906%" y="453" width="0.9449%" height="15" fill="rgb(207,226,44)" fg:x="622" fg:w="30"/><text x="19.8406%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (30 samples, 0.94%)</title><rect x="19.5906%" y="437" width="0.9449%" height="15" fill="rgb(208,126,0)" fg:x="622" fg:w="30"/><text x="19.8406%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (30 samples, 0.94%)</title><rect x="19.5906%" y="421" width="0.9449%" height="15" fill="rgb(244,66,21)" fg:x="622" fg:w="30"/><text x="19.8406%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.38%)</title><rect x="20.1575%" y="405" width="0.3780%" height="15" fill="rgb(222,97,12)" fg:x="640" fg:w="12"/><text x="20.4075%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.38%)</title><rect x="20.1575%" y="389" width="0.3780%" height="15" fill="rgb(219,213,19)" fg:x="640" fg:w="12"/><text x="20.4075%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="20.4724%" y="373" width="0.0630%" height="15" fill="rgb(252,169,30)" fg:x="650" fg:w="2"/><text x="20.7224%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (41 samples, 1.29%)</title><rect x="19.2756%" y="485" width="1.2913%" height="15" fill="rgb(206,32,51)" fg:x="612" fg:w="41"/><text x="19.5256%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="20.5354%" y="469" width="0.0315%" height="15" fill="rgb(250,172,42)" fg:x="652" fg:w="1"/><text x="20.7854%" y="479.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="20.6299%" y="469" width="0.0630%" height="15" fill="rgb(209,34,43)" fg:x="655" fg:w="2"/><text x="20.8799%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (52 samples, 1.64%)</title><rect x="19.0866%" y="501" width="1.6378%" height="15" fill="rgb(223,11,35)" fg:x="606" fg:w="52"/><text x="19.3366%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (5 samples, 0.16%)</title><rect x="20.5669%" y="485" width="0.1575%" height="15" fill="rgb(251,219,26)" fg:x="653" fg:w="5"/><text x="20.8169%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="20.6929%" y="469" width="0.0315%" height="15" fill="rgb(231,119,3)" fg:x="657" fg:w="1"/><text x="20.9429%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="20.6929%" y="453" width="0.0315%" height="15" fill="rgb(216,97,11)" fg:x="657" fg:w="1"/><text x="20.9429%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="20.6929%" y="437" width="0.0315%" height="15" fill="rgb(223,59,9)" fg:x="657" fg:w="1"/><text x="20.9429%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (155 samples, 4.88%)</title><rect x="15.9055%" y="517" width="4.8819%" height="15" fill="rgb(233,93,31)" fg:x="505" fg:w="155"/><text x="16.1555%" y="527.50">mut_bi..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="20.7244%" y="501" width="0.0630%" height="15" fill="rgb(239,81,33)" fg:x="658" fg:w="2"/><text x="20.9744%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="20.8819%" y="389" width="0.0630%" height="15" fill="rgb(213,120,34)" fg:x="663" fg:w="2"/><text x="21.1319%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.28%)</title><rect x="21.0079%" y="373" width="0.2835%" height="15" fill="rgb(243,49,53)" fg:x="667" fg:w="9"/><text x="21.2579%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (21 samples, 0.66%)</title><rect x="20.7874%" y="437" width="0.6614%" height="15" fill="rgb(247,216,33)" fg:x="660" fg:w="21"/><text x="21.0374%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (21 samples, 0.66%)</title><rect x="20.7874%" y="421" width="0.6614%" height="15" fill="rgb(226,26,14)" fg:x="660" fg:w="21"/><text x="21.0374%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (21 samples, 0.66%)</title><rect x="20.7874%" y="405" width="0.6614%" height="15" fill="rgb(215,49,53)" fg:x="660" fg:w="21"/><text x="21.0374%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.50%)</title><rect x="20.9449%" y="389" width="0.5039%" height="15" fill="rgb(245,162,40)" fg:x="665" fg:w="16"/><text x="21.1949%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.16%)</title><rect x="21.2913%" y="373" width="0.1575%" height="15" fill="rgb(229,68,17)" fg:x="676" fg:w="5"/><text x="21.5413%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4173%" y="357" width="0.0315%" height="15" fill="rgb(213,182,10)" fg:x="680" fg:w="1"/><text x="21.6673%" y="367.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4173%" y="341" width="0.0315%" height="15" fill="rgb(245,125,30)" fg:x="680" fg:w="1"/><text x="21.6673%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4173%" y="325" width="0.0315%" height="15" fill="rgb(232,202,2)" fg:x="680" fg:w="1"/><text x="21.6673%" y="335.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="21.4173%" y="309" width="0.0315%" height="15" fill="rgb(237,140,51)" fg:x="680" fg:w="1"/><text x="21.6673%" y="319.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="21.4173%" y="293" width="0.0315%" height="15" fill="rgb(236,157,25)" fg:x="680" fg:w="1"/><text x="21.6673%" y="303.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="21.4173%" y="277" width="0.0315%" height="15" fill="rgb(219,209,0)" fg:x="680" fg:w="1"/><text x="21.6673%" y="287.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="21.4173%" y="261" width="0.0315%" height="15" fill="rgb(240,116,54)" fg:x="680" fg:w="1"/><text x="21.6673%" y="271.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="21.4173%" y="245" width="0.0315%" height="15" fill="rgb(216,10,36)" fg:x="680" fg:w="1"/><text x="21.6673%" y="255.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="21.4173%" y="229" width="0.0315%" height="15" fill="rgb(222,72,44)" fg:x="680" fg:w="1"/><text x="21.6673%" y="239.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="21.4173%" y="213" width="0.0315%" height="15" fill="rgb(232,159,9)" fg:x="680" fg:w="1"/><text x="21.6673%" y="223.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="21.4173%" y="197" width="0.0315%" height="15" fill="rgb(210,39,32)" fg:x="680" fg:w="1"/><text x="21.6673%" y="207.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.03%)</title><rect x="21.4173%" y="181" width="0.0315%" height="15" fill="rgb(216,194,45)" fg:x="680" fg:w="1"/><text x="21.6673%" y="191.50"></text></g><g><title>generic_exec_single (1 samples, 0.03%)</title><rect x="21.4173%" y="165" width="0.0315%" height="15" fill="rgb(218,18,35)" fg:x="680" fg:w="1"/><text x="21.6673%" y="175.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.03%)</title><rect x="21.4173%" y="149" width="0.0315%" height="15" fill="rgb(207,83,51)" fg:x="680" fg:w="1"/><text x="21.6673%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.09%)</title><rect x="21.4488%" y="437" width="0.0945%" height="15" fill="rgb(225,63,43)" fg:x="681" fg:w="3"/><text x="21.6988%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="21.5118%" y="421" width="0.0315%" height="15" fill="rgb(207,57,36)" fg:x="683" fg:w="1"/><text x="21.7618%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="21.5118%" y="405" width="0.0315%" height="15" fill="rgb(216,99,33)" fg:x="683" fg:w="1"/><text x="21.7618%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.03%)</title><rect x="21.5118%" y="389" width="0.0315%" height="15" fill="rgb(225,42,16)" fg:x="683" fg:w="1"/><text x="21.7618%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="21.5433%" y="309" width="0.0945%" height="15" fill="rgb(220,201,45)" fg:x="684" fg:w="3"/><text x="21.7933%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (28 samples, 0.88%)</title><rect x="20.7874%" y="469" width="0.8819%" height="15" fill="rgb(225,33,4)" fg:x="660" fg:w="28"/><text x="21.0374%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (28 samples, 0.88%)</title><rect x="20.7874%" y="453" width="0.8819%" height="15" fill="rgb(224,33,50)" fg:x="660" fg:w="28"/><text x="21.0374%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.13%)</title><rect x="21.5433%" y="437" width="0.1260%" height="15" fill="rgb(246,198,51)" fg:x="684" fg:w="4"/><text x="21.7933%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (4 samples, 0.13%)</title><rect x="21.5433%" y="421" width="0.1260%" height="15" fill="rgb(205,22,4)" fg:x="684" fg:w="4"/><text x="21.7933%" y="431.50"></text></g><g><title>core::hash::Hasher::write_i64 (4 samples, 0.13%)</title><rect x="21.5433%" y="405" width="0.1260%" height="15" fill="rgb(206,3,8)" fg:x="684" fg:w="4"/><text x="21.7933%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u64 (4 samples, 0.13%)</title><rect x="21.5433%" y="389" width="0.1260%" height="15" fill="rgb(251,23,15)" fg:x="684" fg:w="4"/><text x="21.7933%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="21.5433%" y="373" width="0.1260%" height="15" fill="rgb(252,88,28)" fg:x="684" fg:w="4"/><text x="21.7933%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="21.5433%" y="357" width="0.1260%" height="15" fill="rgb(212,127,14)" fg:x="684" fg:w="4"/><text x="21.7933%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="21.5433%" y="341" width="0.1260%" height="15" fill="rgb(247,145,37)" fg:x="684" fg:w="4"/><text x="21.7933%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.13%)</title><rect x="21.5433%" y="325" width="0.1260%" height="15" fill="rgb(209,117,53)" fg:x="684" fg:w="4"/><text x="21.7933%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="21.6378%" y="309" width="0.0315%" height="15" fill="rgb(212,90,42)" fg:x="687" fg:w="1"/><text x="21.8878%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="21.7008%" y="421" width="0.0315%" height="15" fill="rgb(218,164,37)" fg:x="689" fg:w="1"/><text x="21.9508%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="21.7008%" y="405" width="0.0315%" height="15" fill="rgb(246,65,34)" fg:x="689" fg:w="1"/><text x="21.9508%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="21.7323%" y="421" width="0.0945%" height="15" fill="rgb(231,100,33)" fg:x="690" fg:w="3"/><text x="21.9823%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="21.7323%" y="405" width="0.0945%" height="15" fill="rgb(228,126,14)" fg:x="690" fg:w="3"/><text x="21.9823%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="21.7323%" y="389" width="0.0945%" height="15" fill="rgb(215,173,21)" fg:x="690" fg:w="3"/><text x="21.9823%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="21.7323%" y="373" width="0.0945%" height="15" fill="rgb(210,6,40)" fg:x="690" fg:w="3"/><text x="21.9823%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="21.7323%" y="357" width="0.0945%" height="15" fill="rgb(212,48,18)" fg:x="690" fg:w="3"/><text x="21.9823%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="21.8268%" y="421" width="0.0630%" height="15" fill="rgb(230,214,11)" fg:x="693" fg:w="2"/><text x="22.0768%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="21.8898%" y="421" width="0.0315%" height="15" fill="rgb(254,105,39)" fg:x="695" fg:w="1"/><text x="22.1398%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="21.8898%" y="405" width="0.0315%" height="15" fill="rgb(245,158,5)" fg:x="695" fg:w="1"/><text x="22.1398%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.8898%" y="389" width="0.0315%" height="15" fill="rgb(249,208,11)" fg:x="695" fg:w="1"/><text x="22.1398%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11 samples, 0.35%)</title><rect x="21.6693%" y="437" width="0.3465%" height="15" fill="rgb(210,39,28)" fg:x="688" fg:w="11"/><text x="21.9193%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="21.9213%" y="421" width="0.0945%" height="15" fill="rgb(211,56,53)" fg:x="696" fg:w="3"/><text x="22.1713%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="21.9213%" y="405" width="0.0945%" height="15" fill="rgb(226,201,30)" fg:x="696" fg:w="3"/><text x="22.1713%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41 samples, 1.29%)</title><rect x="20.7874%" y="517" width="1.2913%" height="15" fill="rgb(239,101,34)" fg:x="660" fg:w="41"/><text x="21.0374%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41 samples, 1.29%)</title><rect x="20.7874%" y="501" width="1.2913%" height="15" fill="rgb(226,209,5)" fg:x="660" fg:w="41"/><text x="21.0374%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 1.29%)</title><rect x="20.7874%" y="485" width="1.2913%" height="15" fill="rgb(250,105,47)" fg:x="660" fg:w="41"/><text x="21.0374%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (13 samples, 0.41%)</title><rect x="21.6693%" y="469" width="0.4094%" height="15" fill="rgb(230,72,3)" fg:x="688" fg:w="13"/><text x="21.9193%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.41%)</title><rect x="21.6693%" y="453" width="0.4094%" height="15" fill="rgb(232,218,39)" fg:x="688" fg:w="13"/><text x="21.9193%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (2 samples, 0.06%)</title><rect x="22.0157%" y="437" width="0.0630%" height="15" fill="rgb(248,166,6)" fg:x="699" fg:w="2"/><text x="22.2657%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="22.0787%" y="453" width="0.0315%" height="15" fill="rgb(247,89,20)" fg:x="701" fg:w="1"/><text x="22.3287%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.03%)</title><rect x="22.0787%" y="437" width="0.0315%" height="15" fill="rgb(248,130,54)" fg:x="701" fg:w="1"/><text x="22.3287%" y="447.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.03%)</title><rect x="22.0787%" y="421" width="0.0315%" height="15" fill="rgb(234,196,4)" fg:x="701" fg:w="1"/><text x="22.3287%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="22.1102%" y="453" width="0.0315%" height="15" fill="rgb(250,143,31)" fg:x="702" fg:w="1"/><text x="22.3602%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="22.1102%" y="437" width="0.0315%" height="15" fill="rgb(211,110,34)" fg:x="702" fg:w="1"/><text x="22.3602%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.16%)</title><rect x="22.0787%" y="485" width="0.1575%" height="15" fill="rgb(215,124,48)" fg:x="701" fg:w="5"/><text x="22.3287%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.16%)</title><rect x="22.0787%" y="469" width="0.1575%" height="15" fill="rgb(216,46,13)" fg:x="701" fg:w="5"/><text x="22.3287%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (3 samples, 0.09%)</title><rect x="22.1417%" y="453" width="0.0945%" height="15" fill="rgb(205,184,25)" fg:x="703" fg:w="3"/><text x="22.3917%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.19%)</title><rect x="22.0787%" y="501" width="0.1890%" height="15" fill="rgb(228,1,10)" fg:x="701" fg:w="6"/><text x="22.3287%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="22.2362%" y="485" width="0.0315%" height="15" fill="rgb(213,116,27)" fg:x="706" fg:w="1"/><text x="22.4862%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="22.2362%" y="469" width="0.0315%" height="15" fill="rgb(241,95,50)" fg:x="706" fg:w="1"/><text x="22.4862%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (221 samples, 6.96%)</title><rect x="15.4016%" y="533" width="6.9606%" height="15" fill="rgb(238,48,32)" fg:x="489" fg:w="221"/><text x="15.6516%" y="543.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.28%)</title><rect x="22.0787%" y="517" width="0.2835%" height="15" fill="rgb(235,113,49)" fg:x="701" fg:w="9"/><text x="22.3287%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (3 samples, 0.09%)</title><rect x="22.2677%" y="501" width="0.0945%" height="15" fill="rgb(205,127,43)" fg:x="707" fg:w="3"/><text x="22.5177%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (5 samples, 0.16%)</title><rect x="22.3622%" y="533" width="0.1575%" height="15" fill="rgb(250,162,2)" fg:x="710" fg:w="5"/><text x="22.6122%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.16%)</title><rect x="22.3622%" y="517" width="0.1575%" height="15" fill="rgb(220,13,41)" fg:x="710" fg:w="5"/><text x="22.6122%" y="527.50"></text></g><g><title>core::ptr::read (3 samples, 0.09%)</title><rect x="22.4252%" y="501" width="0.0945%" height="15" fill="rgb(249,221,25)" fg:x="712" fg:w="3"/><text x="22.6752%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (238 samples, 7.50%)</title><rect x="15.0551%" y="549" width="7.4961%" height="15" fill="rgb(215,208,19)" fg:x="478" fg:w="238"/><text x="15.3051%" y="559.50">project1::..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="22.5197%" y="533" width="0.0315%" height="15" fill="rgb(236,175,2)" fg:x="715" fg:w="1"/><text x="22.7697%" y="543.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="22.5197%" y="517" width="0.0315%" height="15" fill="rgb(241,52,2)" fg:x="715" fg:w="1"/><text x="22.7697%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="22.5512%" y="533" width="0.0315%" height="15" fill="rgb(248,140,14)" fg:x="716" fg:w="1"/><text x="22.8012%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="22.5512%" y="517" width="0.0315%" height="15" fill="rgb(253,22,42)" fg:x="716" fg:w="1"/><text x="22.8012%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="22.5827%" y="533" width="0.0315%" height="15" fill="rgb(234,61,47)" fg:x="717" fg:w="1"/><text x="22.8327%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="22.5827%" y="517" width="0.0315%" height="15" fill="rgb(208,226,15)" fg:x="717" fg:w="1"/><text x="22.8327%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="22.5827%" y="501" width="0.0315%" height="15" fill="rgb(217,221,4)" fg:x="717" fg:w="1"/><text x="22.8327%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (1 samples, 0.03%)</title><rect x="22.5827%" y="485" width="0.0315%" height="15" fill="rgb(212,174,34)" fg:x="717" fg:w="1"/><text x="22.8327%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="22.5827%" y="469" width="0.0315%" height="15" fill="rgb(253,83,4)" fg:x="717" fg:w="1"/><text x="22.8327%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.03%)</title><rect x="22.5827%" y="453" width="0.0315%" height="15" fill="rgb(250,195,49)" fg:x="717" fg:w="1"/><text x="22.8327%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.03%)</title><rect x="22.5827%" y="437" width="0.0315%" height="15" fill="rgb(241,192,25)" fg:x="717" fg:w="1"/><text x="22.8327%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="22.5827%" y="421" width="0.0315%" height="15" fill="rgb(208,124,10)" fg:x="717" fg:w="1"/><text x="22.8327%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="22.5827%" y="405" width="0.0315%" height="15" fill="rgb(222,33,0)" fg:x="717" fg:w="1"/><text x="22.8327%" y="415.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="22.5827%" y="389" width="0.0315%" height="15" fill="rgb(234,209,28)" fg:x="717" fg:w="1"/><text x="22.8327%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="22.5827%" y="373" width="0.0315%" height="15" fill="rgb(224,11,23)" fg:x="717" fg:w="1"/><text x="22.8327%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="22.5827%" y="357" width="0.0315%" height="15" fill="rgb(232,99,1)" fg:x="717" fg:w="1"/><text x="22.8327%" y="367.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="22.5827%" y="341" width="0.0315%" height="15" fill="rgb(237,95,45)" fg:x="717" fg:w="1"/><text x="22.8327%" y="351.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="22.5827%" y="325" width="0.0315%" height="15" fill="rgb(208,109,11)" fg:x="717" fg:w="1"/><text x="22.8327%" y="335.50"></text></g><g><title>heap_for_ptr (1 samples, 0.03%)</title><rect x="22.5827%" y="309" width="0.0315%" height="15" fill="rgb(216,190,48)" fg:x="717" fg:w="1"/><text x="22.8327%" y="319.50"></text></g><g><title>heap_max_size (1 samples, 0.03%)</title><rect x="22.5827%" y="293" width="0.0315%" height="15" fill="rgb(251,171,36)" fg:x="717" fg:w="1"/><text x="22.8327%" y="303.50"></text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="22.6142%" y="533" width="0.0315%" height="15" fill="rgb(230,62,22)" fg:x="718" fg:w="1"/><text x="22.8642%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="22.6142%" y="517" width="0.0315%" height="15" fill="rgb(225,114,35)" fg:x="718" fg:w="1"/><text x="22.8642%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="22.6142%" y="501" width="0.0315%" height="15" fill="rgb(215,118,42)" fg:x="718" fg:w="1"/><text x="22.8642%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="22.6457%" y="485" width="0.0315%" height="15" fill="rgb(243,119,21)" fg:x="719" fg:w="1"/><text x="22.8957%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="22.6457%" y="469" width="0.0315%" height="15" fill="rgb(252,177,53)" fg:x="719" fg:w="1"/><text x="22.8957%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="22.6457%" y="453" width="0.0315%" height="15" fill="rgb(237,209,29)" fg:x="719" fg:w="1"/><text x="22.8957%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1 samples, 0.03%)</title><rect x="22.6457%" y="437" width="0.0315%" height="15" fill="rgb(212,65,23)" fg:x="719" fg:w="1"/><text x="22.8957%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="22.6457%" y="421" width="0.0315%" height="15" fill="rgb(230,222,46)" fg:x="719" fg:w="1"/><text x="22.8957%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="22.6772%" y="469" width="0.0315%" height="15" fill="rgb(215,135,32)" fg:x="720" fg:w="1"/><text x="22.9272%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="22.7087%" y="421" width="0.0315%" height="15" fill="rgb(246,101,22)" fg:x="721" fg:w="1"/><text x="22.9587%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="22.7087%" y="405" width="0.0315%" height="15" fill="rgb(206,107,13)" fg:x="721" fg:w="1"/><text x="22.9587%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.03%)</title><rect x="22.7402%" y="405" width="0.0315%" height="15" fill="rgb(250,100,44)" fg:x="722" fg:w="1"/><text x="22.9902%" y="415.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="22.7402%" y="389" width="0.0315%" height="15" fill="rgb(231,147,38)" fg:x="722" fg:w="1"/><text x="22.9902%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (1 samples, 0.03%)</title><rect x="22.7402%" y="373" width="0.0315%" height="15" fill="rgb(229,8,40)" fg:x="722" fg:w="1"/><text x="22.9902%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.03%)</title><rect x="22.7402%" y="357" width="0.0315%" height="15" fill="rgb(221,135,30)" fg:x="722" fg:w="1"/><text x="22.9902%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="22.7402%" y="341" width="0.0315%" height="15" fill="rgb(249,193,18)" fg:x="722" fg:w="1"/><text x="22.9902%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="22.7402%" y="325" width="0.0315%" height="15" fill="rgb(209,133,39)" fg:x="722" fg:w="1"/><text x="22.9902%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="22.7402%" y="309" width="0.0315%" height="15" fill="rgb(232,100,14)" fg:x="722" fg:w="1"/><text x="22.9902%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="22.7402%" y="293" width="0.0315%" height="15" fill="rgb(224,185,1)" fg:x="722" fg:w="1"/><text x="22.9902%" y="303.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="22.7402%" y="277" width="0.0315%" height="15" fill="rgb(223,139,8)" fg:x="722" fg:w="1"/><text x="22.9902%" y="287.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="22.7402%" y="261" width="0.0315%" height="15" fill="rgb(232,213,38)" fg:x="722" fg:w="1"/><text x="22.9902%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.06%)</title><rect x="22.7717%" y="405" width="0.0630%" height="15" fill="rgb(207,94,22)" fg:x="723" fg:w="2"/><text x="23.0217%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.06%)</title><rect x="22.7717%" y="389" width="0.0630%" height="15" fill="rgb(219,183,54)" fg:x="723" fg:w="2"/><text x="23.0217%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.06%)</title><rect x="22.7717%" y="373" width="0.0630%" height="15" fill="rgb(216,185,54)" fg:x="723" fg:w="2"/><text x="23.0217%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="22.7717%" y="357" width="0.0630%" height="15" fill="rgb(254,217,39)" fg:x="723" fg:w="2"/><text x="23.0217%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="22.7717%" y="341" width="0.0630%" height="15" fill="rgb(240,178,23)" fg:x="723" fg:w="2"/><text x="23.0217%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2 samples, 0.06%)</title><rect x="22.7717%" y="325" width="0.0630%" height="15" fill="rgb(218,11,47)" fg:x="723" fg:w="2"/><text x="23.0217%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="22.8346%" y="357" width="0.0315%" height="15" fill="rgb(218,51,51)" fg:x="725" fg:w="1"/><text x="23.0846%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.06%)</title><rect x="22.8346%" y="373" width="0.0630%" height="15" fill="rgb(238,126,27)" fg:x="725" fg:w="2"/><text x="23.0846%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="22.8661%" y="357" width="0.0315%" height="15" fill="rgb(249,202,22)" fg:x="726" fg:w="1"/><text x="23.1161%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="22.8661%" y="341" width="0.0315%" height="15" fill="rgb(254,195,49)" fg:x="726" fg:w="1"/><text x="23.1161%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.09%)</title><rect x="22.8976%" y="373" width="0.0945%" height="15" fill="rgb(208,123,14)" fg:x="727" fg:w="3"/><text x="23.1476%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.09%)</title><rect x="22.8976%" y="357" width="0.0945%" height="15" fill="rgb(224,200,8)" fg:x="727" fg:w="3"/><text x="23.1476%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.09%)</title><rect x="22.8976%" y="341" width="0.0945%" height="15" fill="rgb(217,61,36)" fg:x="727" fg:w="3"/><text x="23.1476%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="22.9921%" y="373" width="0.0315%" height="15" fill="rgb(206,35,45)" fg:x="730" fg:w="1"/><text x="23.2421%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (12 samples, 0.38%)</title><rect x="22.8346%" y="389" width="0.3780%" height="15" fill="rgb(217,65,33)" fg:x="725" fg:w="12"/><text x="23.0846%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.19%)</title><rect x="23.0236%" y="373" width="0.1890%" height="15" fill="rgb(222,158,48)" fg:x="731" fg:w="6"/><text x="23.2736%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.19%)</title><rect x="23.0236%" y="357" width="0.1890%" height="15" fill="rgb(254,2,54)" fg:x="731" fg:w="6"/><text x="23.2736%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.19%)</title><rect x="23.0236%" y="341" width="0.1890%" height="15" fill="rgb(250,143,38)" fg:x="731" fg:w="6"/><text x="23.2736%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (13 samples, 0.41%)</title><rect x="22.8346%" y="405" width="0.4094%" height="15" fill="rgb(248,25,0)" fg:x="725" fg:w="13"/><text x="23.0846%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="23.2126%" y="389" width="0.0315%" height="15" fill="rgb(206,152,27)" fg:x="737" fg:w="1"/><text x="23.4626%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="23.2126%" y="373" width="0.0315%" height="15" fill="rgb(240,77,30)" fg:x="737" fg:w="1"/><text x="23.4626%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="23.3701%" y="245" width="0.0315%" height="15" fill="rgb(231,5,3)" fg:x="742" fg:w="1"/><text x="23.6201%" y="255.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="23.3701%" y="229" width="0.0315%" height="15" fill="rgb(207,226,32)" fg:x="742" fg:w="1"/><text x="23.6201%" y="239.50"></text></g><g><title>__rdl_alloc (8 samples, 0.25%)</title><rect x="23.2441%" y="293" width="0.2520%" height="15" fill="rgb(222,207,47)" fg:x="738" fg:w="8"/><text x="23.4941%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.25%)</title><rect x="23.2441%" y="277" width="0.2520%" height="15" fill="rgb(229,115,45)" fg:x="738" fg:w="8"/><text x="23.4941%" y="287.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.25%)</title><rect x="23.2441%" y="261" width="0.2520%" height="15" fill="rgb(224,191,6)" fg:x="738" fg:w="8"/><text x="23.4941%" y="271.50"></text></g><g><title>tcache_get (3 samples, 0.09%)</title><rect x="23.4016%" y="245" width="0.0945%" height="15" fill="rgb(230,227,24)" fg:x="743" fg:w="3"/><text x="23.6516%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (9 samples, 0.28%)</title><rect x="23.2441%" y="373" width="0.2835%" height="15" fill="rgb(228,80,19)" fg:x="738" fg:w="9"/><text x="23.4941%" y="383.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.28%)</title><rect x="23.2441%" y="357" width="0.2835%" height="15" fill="rgb(247,229,0)" fg:x="738" fg:w="9"/><text x="23.4941%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.28%)</title><rect x="23.2441%" y="341" width="0.2835%" height="15" fill="rgb(237,194,15)" fg:x="738" fg:w="9"/><text x="23.4941%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.28%)</title><rect x="23.2441%" y="325" width="0.2835%" height="15" fill="rgb(219,203,20)" fg:x="738" fg:w="9"/><text x="23.4941%" y="335.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.28%)</title><rect x="23.2441%" y="309" width="0.2835%" height="15" fill="rgb(234,128,8)" fg:x="738" fg:w="9"/><text x="23.4941%" y="319.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="23.4961%" y="293" width="0.0315%" height="15" fill="rgb(248,202,8)" fg:x="746" fg:w="1"/><text x="23.7461%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (27 samples, 0.85%)</title><rect x="22.7087%" y="469" width="0.8504%" height="15" fill="rgb(206,104,37)" fg:x="721" fg:w="27"/><text x="22.9587%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.85%)</title><rect x="22.7087%" y="453" width="0.8504%" height="15" fill="rgb(223,8,27)" fg:x="721" fg:w="27"/><text x="22.9587%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (27 samples, 0.85%)</title><rect x="22.7087%" y="437" width="0.8504%" height="15" fill="rgb(216,217,28)" fg:x="721" fg:w="27"/><text x="22.9587%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (26 samples, 0.82%)</title><rect x="22.7402%" y="421" width="0.8189%" height="15" fill="rgb(249,199,1)" fg:x="722" fg:w="26"/><text x="22.9902%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (10 samples, 0.31%)</title><rect x="23.2441%" y="405" width="0.3150%" height="15" fill="rgb(240,85,17)" fg:x="738" fg:w="10"/><text x="23.4941%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (10 samples, 0.31%)</title><rect x="23.2441%" y="389" width="0.3150%" height="15" fill="rgb(206,108,45)" fg:x="738" fg:w="10"/><text x="23.4941%" y="399.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.03%)</title><rect x="23.5276%" y="373" width="0.0315%" height="15" fill="rgb(245,210,41)" fg:x="747" fg:w="1"/><text x="23.7776%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.03%)</title><rect x="23.5276%" y="357" width="0.0315%" height="15" fill="rgb(206,13,37)" fg:x="747" fg:w="1"/><text x="23.7776%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.03%)</title><rect x="23.5276%" y="341" width="0.0315%" height="15" fill="rgb(250,61,18)" fg:x="747" fg:w="1"/><text x="23.7776%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="23.5591%" y="453" width="0.0630%" height="15" fill="rgb(235,172,48)" fg:x="748" fg:w="2"/><text x="23.8091%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="23.5591%" y="437" width="0.0630%" height="15" fill="rgb(249,201,17)" fg:x="748" fg:w="2"/><text x="23.8091%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.09%)</title><rect x="23.6220%" y="453" width="0.0945%" height="15" fill="rgb(219,208,6)" fg:x="750" fg:w="3"/><text x="23.8720%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.09%)</title><rect x="23.7165%" y="453" width="0.0945%" height="15" fill="rgb(248,31,23)" fg:x="753" fg:w="3"/><text x="23.9665%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.06%)</title><rect x="23.7480%" y="437" width="0.0630%" height="15" fill="rgb(245,15,42)" fg:x="754" fg:w="2"/><text x="23.9980%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="23.7480%" y="421" width="0.0630%" height="15" fill="rgb(222,217,39)" fg:x="754" fg:w="2"/><text x="23.9980%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="23.8110%" y="453" width="0.0630%" height="15" fill="rgb(210,219,27)" fg:x="756" fg:w="2"/><text x="24.0610%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="23.8110%" y="437" width="0.0630%" height="15" fill="rgb(252,166,36)" fg:x="756" fg:w="2"/><text x="24.0610%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="23.8110%" y="421" width="0.0630%" height="15" fill="rgb(245,132,34)" fg:x="756" fg:w="2"/><text x="24.0610%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="23.8740%" y="453" width="0.0315%" height="15" fill="rgb(236,54,3)" fg:x="758" fg:w="1"/><text x="24.1240%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="23.8740%" y="437" width="0.0315%" height="15" fill="rgb(241,173,43)" fg:x="758" fg:w="1"/><text x="24.1240%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (40 samples, 1.26%)</title><rect x="22.6772%" y="485" width="1.2598%" height="15" fill="rgb(215,190,9)" fg:x="720" fg:w="40"/><text x="22.9272%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (12 samples, 0.38%)</title><rect x="23.5591%" y="469" width="0.3780%" height="15" fill="rgb(242,101,16)" fg:x="748" fg:w="12"/><text x="23.8091%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="23.9055%" y="453" width="0.0315%" height="15" fill="rgb(223,190,21)" fg:x="759" fg:w="1"/><text x="24.1555%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="23.9055%" y="437" width="0.0315%" height="15" fill="rgb(215,228,25)" fg:x="759" fg:w="1"/><text x="24.1555%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="23.9055%" y="421" width="0.0315%" height="15" fill="rgb(225,36,22)" fg:x="759" fg:w="1"/><text x="24.1555%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (47 samples, 1.48%)</title><rect x="22.5512%" y="549" width="1.4803%" height="15" fill="rgb(251,106,46)" fg:x="716" fg:w="47"/><text x="22.8012%" y="559.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (44 samples, 1.39%)</title><rect x="22.6457%" y="533" width="1.3858%" height="15" fill="rgb(208,90,1)" fg:x="719" fg:w="44"/><text x="22.8957%" y="543.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (44 samples, 1.39%)</title><rect x="22.6457%" y="517" width="1.3858%" height="15" fill="rgb(243,10,4)" fg:x="719" fg:w="44"/><text x="22.8957%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 1.39%)</title><rect x="22.6457%" y="501" width="1.3858%" height="15" fill="rgb(212,137,27)" fg:x="719" fg:w="44"/><text x="22.8957%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.09%)</title><rect x="23.9370%" y="485" width="0.0945%" height="15" fill="rgb(231,220,49)" fg:x="760" fg:w="3"/><text x="24.1870%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.09%)</title><rect x="23.9370%" y="469" width="0.0945%" height="15" fill="rgb(237,96,20)" fg:x="760" fg:w="3"/><text x="24.1870%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="24.0000%" y="453" width="0.0315%" height="15" fill="rgb(239,229,30)" fg:x="762" fg:w="1"/><text x="24.2500%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="24.0000%" y="437" width="0.0315%" height="15" fill="rgb(219,65,33)" fg:x="762" fg:w="1"/><text x="24.2500%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="24.0315%" y="469" width="0.0315%" height="15" fill="rgb(243,134,7)" fg:x="763" fg:w="1"/><text x="24.2815%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="24.0315%" y="453" width="0.0315%" height="15" fill="rgb(216,177,54)" fg:x="763" fg:w="1"/><text x="24.2815%" y="463.50"></text></g><g><title>_compound_head (1 samples, 0.03%)</title><rect x="24.1260%" y="357" width="0.0315%" height="15" fill="rgb(211,160,20)" fg:x="766" fg:w="1"/><text x="24.3760%" y="367.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="24.1575%" y="357" width="0.0315%" height="15" fill="rgb(239,85,39)" fg:x="767" fg:w="1"/><text x="24.4075%" y="367.50"></text></g><g><title>charge_memcg (2 samples, 0.06%)</title><rect x="24.1890%" y="325" width="0.0630%" height="15" fill="rgb(232,125,22)" fg:x="768" fg:w="2"/><text x="24.4390%" y="335.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.03%)</title><rect x="24.2205%" y="309" width="0.0315%" height="15" fill="rgb(244,57,34)" fg:x="769" fg:w="1"/><text x="24.4705%" y="319.50"></text></g><g><title>__mem_cgroup_charge (4 samples, 0.13%)</title><rect x="24.1890%" y="341" width="0.1260%" height="15" fill="rgb(214,203,32)" fg:x="768" fg:w="4"/><text x="24.4390%" y="351.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.06%)</title><rect x="24.2520%" y="325" width="0.0630%" height="15" fill="rgb(207,58,43)" fg:x="770" fg:w="2"/><text x="24.5020%" y="335.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.03%)</title><rect x="24.3150%" y="341" width="0.0315%" height="15" fill="rgb(215,193,15)" fg:x="772" fg:w="1"/><text x="24.5650%" y="351.50"></text></g><g><title>__folio_alloc (1 samples, 0.03%)</title><rect x="24.3465%" y="325" width="0.0315%" height="15" fill="rgb(232,15,44)" fg:x="773" fg:w="1"/><text x="24.5965%" y="335.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="24.3465%" y="309" width="0.0315%" height="15" fill="rgb(212,3,48)" fg:x="773" fg:w="1"/><text x="24.5965%" y="319.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="24.3465%" y="293" width="0.0315%" height="15" fill="rgb(218,128,7)" fg:x="773" fg:w="1"/><text x="24.5965%" y="303.50"></text></g><g><title>rmqueue (1 samples, 0.03%)</title><rect x="24.3465%" y="277" width="0.0315%" height="15" fill="rgb(226,216,39)" fg:x="773" fg:w="1"/><text x="24.5965%" y="287.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.03%)</title><rect x="24.3465%" y="261" width="0.0315%" height="15" fill="rgb(243,47,51)" fg:x="773" fg:w="1"/><text x="24.5965%" y="271.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="24.3465%" y="245" width="0.0315%" height="15" fill="rgb(241,183,40)" fg:x="773" fg:w="1"/><text x="24.5965%" y="255.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.31%)</title><rect x="24.0945%" y="421" width="0.3150%" height="15" fill="rgb(231,217,32)" fg:x="765" fg:w="10"/><text x="24.3445%" y="431.50"></text></g><g><title>handle_mm_fault (10 samples, 0.31%)</title><rect x="24.0945%" y="405" width="0.3150%" height="15" fill="rgb(229,61,38)" fg:x="765" fg:w="10"/><text x="24.3445%" y="415.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.28%)</title><rect x="24.1260%" y="389" width="0.2835%" height="15" fill="rgb(225,210,5)" fg:x="766" fg:w="9"/><text x="24.3760%" y="399.50"></text></g><g><title>handle_pte_fault (9 samples, 0.28%)</title><rect x="24.1260%" y="373" width="0.2835%" height="15" fill="rgb(231,79,45)" fg:x="766" fg:w="9"/><text x="24.3760%" y="383.50"></text></g><g><title>do_anonymous_page (7 samples, 0.22%)</title><rect x="24.1890%" y="357" width="0.2205%" height="15" fill="rgb(224,100,7)" fg:x="768" fg:w="7"/><text x="24.4390%" y="367.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="24.3465%" y="341" width="0.0630%" height="15" fill="rgb(241,198,18)" fg:x="773" fg:w="2"/><text x="24.5965%" y="351.50"></text></g><g><title>policy_node (1 samples, 0.03%)</title><rect x="24.3780%" y="325" width="0.0315%" height="15" fill="rgb(252,97,53)" fg:x="774" fg:w="1"/><text x="24.6280%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.41%)</title><rect x="24.0315%" y="485" width="0.4094%" height="15" fill="rgb(220,88,7)" fg:x="763" fg:w="13"/><text x="24.2815%" y="495.50"></text></g><g><title>core::ptr::write (12 samples, 0.38%)</title><rect x="24.0630%" y="469" width="0.3780%" height="15" fill="rgb(213,176,14)" fg:x="764" fg:w="12"/><text x="24.3130%" y="479.50"></text></g><g><title>asm_exc_page_fault (11 samples, 0.35%)</title><rect x="24.0945%" y="453" width="0.3465%" height="15" fill="rgb(246,73,7)" fg:x="765" fg:w="11"/><text x="24.3445%" y="463.50"></text></g><g><title>exc_page_fault (11 samples, 0.35%)</title><rect x="24.0945%" y="437" width="0.3465%" height="15" fill="rgb(245,64,36)" fg:x="765" fg:w="11"/><text x="24.3445%" y="447.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="24.4094%" y="421" width="0.0315%" height="15" fill="rgb(245,80,10)" fg:x="775" fg:w="1"/><text x="24.6594%" y="431.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="24.4094%" y="405" width="0.0315%" height="15" fill="rgb(232,107,50)" fg:x="775" fg:w="1"/><text x="24.6594%" y="415.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="24.5669%" y="165" width="0.0315%" height="15" fill="rgb(253,3,0)" fg:x="780" fg:w="1"/><text x="24.8169%" y="175.50"></text></g><g><title>find_vma (1 samples, 0.03%)</title><rect x="24.5669%" y="149" width="0.0315%" height="15" fill="rgb(212,99,53)" fg:x="780" fg:w="1"/><text x="24.8169%" y="159.50"></text></g><g><title>vmacache_find (1 samples, 0.03%)</title><rect x="24.5669%" y="133" width="0.0315%" height="15" fill="rgb(249,111,54)" fg:x="780" fg:w="1"/><text x="24.8169%" y="143.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="24.5669%" y="197" width="0.0630%" height="15" fill="rgb(249,55,30)" fg:x="780" fg:w="2"/><text x="24.8169%" y="207.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="24.5669%" y="181" width="0.0630%" height="15" fill="rgb(237,47,42)" fg:x="780" fg:w="2"/><text x="24.8169%" y="191.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="24.5984%" y="165" width="0.0315%" height="15" fill="rgb(211,20,18)" fg:x="781" fg:w="1"/><text x="24.8484%" y="175.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="24.5984%" y="149" width="0.0315%" height="15" fill="rgb(231,203,46)" fg:x="781" fg:w="1"/><text x="24.8484%" y="159.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="24.6299%" y="165" width="0.0315%" height="15" fill="rgb(237,142,3)" fg:x="782" fg:w="1"/><text x="24.8799%" y="175.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="24.6299%" y="149" width="0.0315%" height="15" fill="rgb(241,107,1)" fg:x="782" fg:w="1"/><text x="24.8799%" y="159.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="24.6299%" y="133" width="0.0315%" height="15" fill="rgb(229,83,13)" fg:x="782" fg:w="1"/><text x="24.8799%" y="143.50"></text></g><g><title>_int_malloc (6 samples, 0.19%)</title><rect x="24.5039%" y="229" width="0.1890%" height="15" fill="rgb(241,91,40)" fg:x="778" fg:w="6"/><text x="24.7539%" y="239.50"></text></g><g><title>sysmalloc (4 samples, 0.13%)</title><rect x="24.5669%" y="213" width="0.1260%" height="15" fill="rgb(225,3,45)" fg:x="780" fg:w="4"/><text x="24.8169%" y="223.50"></text></g><g><title>grow_heap (2 samples, 0.06%)</title><rect x="24.6299%" y="197" width="0.0630%" height="15" fill="rgb(244,223,14)" fg:x="782" fg:w="2"/><text x="24.8799%" y="207.50"></text></g><g><title>__GI___mprotect (2 samples, 0.06%)</title><rect x="24.6299%" y="181" width="0.0630%" height="15" fill="rgb(224,124,37)" fg:x="782" fg:w="2"/><text x="24.8799%" y="191.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="24.6614%" y="165" width="0.0315%" height="15" fill="rgb(251,171,30)" fg:x="783" fg:w="1"/><text x="24.9114%" y="175.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (22 samples, 0.69%)</title><rect x="24.0315%" y="549" width="0.6929%" height="15" fill="rgb(236,46,54)" fg:x="763" fg:w="22"/><text x="24.2815%" y="559.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (22 samples, 0.69%)</title><rect x="24.0315%" y="533" width="0.6929%" height="15" fill="rgb(245,213,5)" fg:x="763" fg:w="22"/><text x="24.2815%" y="543.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (22 samples, 0.69%)</title><rect x="24.0315%" y="517" width="0.6929%" height="15" fill="rgb(230,144,27)" fg:x="763" fg:w="22"/><text x="24.2815%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (22 samples, 0.69%)</title><rect x="24.0315%" y="501" width="0.6929%" height="15" fill="rgb(220,86,6)" fg:x="763" fg:w="22"/><text x="24.2815%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (9 samples, 0.28%)</title><rect x="24.4409%" y="485" width="0.2835%" height="15" fill="rgb(240,20,13)" fg:x="776" fg:w="9"/><text x="24.6909%" y="495.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (9 samples, 0.28%)</title><rect x="24.4409%" y="469" width="0.2835%" height="15" fill="rgb(217,89,34)" fg:x="776" fg:w="9"/><text x="24.6909%" y="479.50"></text></g><g><title>project1::solver::clause::Clause::with_key (9 samples, 0.28%)</title><rect x="24.4409%" y="453" width="0.2835%" height="15" fill="rgb(229,13,5)" fg:x="776" fg:w="9"/><text x="24.6909%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.28%)</title><rect x="24.4409%" y="437" width="0.2835%" height="15" fill="rgb(244,67,35)" fg:x="776" fg:w="9"/><text x="24.6909%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.28%)</title><rect x="24.4409%" y="421" width="0.2835%" height="15" fill="rgb(221,40,2)" fg:x="776" fg:w="9"/><text x="24.6909%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.28%)</title><rect x="24.4409%" y="405" width="0.2835%" height="15" fill="rgb(237,157,21)" fg:x="776" fg:w="9"/><text x="24.6909%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.28%)</title><rect x="24.4409%" y="389" width="0.2835%" height="15" fill="rgb(222,94,11)" fg:x="776" fg:w="9"/><text x="24.6909%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="24.4409%" y="373" width="0.2835%" height="15" fill="rgb(249,113,6)" fg:x="776" fg:w="9"/><text x="24.6909%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.28%)</title><rect x="24.4409%" y="357" width="0.2835%" height="15" fill="rgb(238,137,36)" fg:x="776" fg:w="9"/><text x="24.6909%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.28%)</title><rect x="24.4409%" y="341" width="0.2835%" height="15" fill="rgb(210,102,26)" fg:x="776" fg:w="9"/><text x="24.6909%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.28%)</title><rect x="24.4409%" y="325" width="0.2835%" height="15" fill="rgb(218,30,30)" fg:x="776" fg:w="9"/><text x="24.6909%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.28%)</title><rect x="24.4409%" y="309" width="0.2835%" height="15" fill="rgb(214,67,26)" fg:x="776" fg:w="9"/><text x="24.6909%" y="319.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.28%)</title><rect x="24.4409%" y="293" width="0.2835%" height="15" fill="rgb(251,9,53)" fg:x="776" fg:w="9"/><text x="24.6909%" y="303.50"></text></g><g><title>__rdl_alloc (9 samples, 0.28%)</title><rect x="24.4409%" y="277" width="0.2835%" height="15" fill="rgb(228,204,25)" fg:x="776" fg:w="9"/><text x="24.6909%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.28%)</title><rect x="24.4409%" y="261" width="0.2835%" height="15" fill="rgb(207,153,8)" fg:x="776" fg:w="9"/><text x="24.6909%" y="271.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.28%)</title><rect x="24.4409%" y="245" width="0.2835%" height="15" fill="rgb(242,9,16)" fg:x="776" fg:w="9"/><text x="24.6909%" y="255.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="24.6929%" y="229" width="0.0315%" height="15" fill="rgb(217,211,10)" fg:x="784" fg:w="1"/><text x="24.9429%" y="239.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.03%)</title><rect x="24.7244%" y="533" width="0.0315%" height="15" fill="rgb(219,228,52)" fg:x="785" fg:w="1"/><text x="24.9744%" y="543.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="24.7244%" y="517" width="0.0315%" height="15" fill="rgb(231,92,29)" fg:x="785" fg:w="1"/><text x="24.9744%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="24.7874%" y="517" width="0.0315%" height="15" fill="rgb(232,8,23)" fg:x="787" fg:w="1"/><text x="25.0374%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="24.7874%" y="501" width="0.0315%" height="15" fill="rgb(216,211,34)" fg:x="787" fg:w="1"/><text x="25.0374%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="24.8189%" y="437" width="0.0315%" height="15" fill="rgb(236,151,0)" fg:x="788" fg:w="1"/><text x="25.0689%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="24.8189%" y="421" width="0.0315%" height="15" fill="rgb(209,168,3)" fg:x="788" fg:w="1"/><text x="25.0689%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.8189%" y="405" width="0.0315%" height="15" fill="rgb(208,129,28)" fg:x="788" fg:w="1"/><text x="25.0689%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.8189%" y="389" width="0.0315%" height="15" fill="rgb(229,78,22)" fg:x="788" fg:w="1"/><text x="25.0689%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.8189%" y="373" width="0.0315%" height="15" fill="rgb(228,187,13)" fg:x="788" fg:w="1"/><text x="25.0689%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.8189%" y="357" width="0.0315%" height="15" fill="rgb(240,119,24)" fg:x="788" fg:w="1"/><text x="25.0689%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.06%)</title><rect x="24.8189%" y="517" width="0.0630%" height="15" fill="rgb(209,194,42)" fg:x="788" fg:w="2"/><text x="25.0689%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (2 samples, 0.06%)</title><rect x="24.8189%" y="501" width="0.0630%" height="15" fill="rgb(247,200,46)" fg:x="788" fg:w="2"/><text x="25.0689%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.06%)</title><rect x="24.8189%" y="485" width="0.0630%" height="15" fill="rgb(218,76,16)" fg:x="788" fg:w="2"/><text x="25.0689%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.06%)</title><rect x="24.8189%" y="469" width="0.0630%" height="15" fill="rgb(225,21,48)" fg:x="788" fg:w="2"/><text x="25.0689%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.06%)</title><rect x="24.8189%" y="453" width="0.0630%" height="15" fill="rgb(239,223,50)" fg:x="788" fg:w="2"/><text x="25.0689%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.03%)</title><rect x="24.8504%" y="437" width="0.0315%" height="15" fill="rgb(244,45,21)" fg:x="789" fg:w="1"/><text x="25.1004%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.03%)</title><rect x="24.8504%" y="421" width="0.0315%" height="15" fill="rgb(232,33,43)" fg:x="789" fg:w="1"/><text x="25.1004%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.03%)</title><rect x="24.8504%" y="405" width="0.0315%" height="15" fill="rgb(209,8,3)" fg:x="789" fg:w="1"/><text x="25.1004%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.8504%" y="389" width="0.0315%" height="15" fill="rgb(214,25,53)" fg:x="789" fg:w="1"/><text x="25.1004%" y="399.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="24.8819%" y="485" width="0.0315%" height="15" fill="rgb(254,186,54)" fg:x="790" fg:w="1"/><text x="25.1319%" y="495.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.03%)</title><rect x="24.8819%" y="469" width="0.0315%" height="15" fill="rgb(208,174,49)" fg:x="790" fg:w="1"/><text x="25.1319%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.8819%" y="453" width="0.0315%" height="15" fill="rgb(233,191,51)" fg:x="790" fg:w="1"/><text x="25.1319%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2 samples, 0.06%)</title><rect x="24.9134%" y="485" width="0.0630%" height="15" fill="rgb(222,134,10)" fg:x="791" fg:w="2"/><text x="25.1634%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="24.9764%" y="373" width="0.0315%" height="15" fill="rgb(230,226,20)" fg:x="793" fg:w="1"/><text x="25.2264%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="24.9764%" y="357" width="0.0315%" height="15" fill="rgb(251,111,25)" fg:x="793" fg:w="1"/><text x="25.2264%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="24.9764%" y="341" width="0.0315%" height="15" fill="rgb(224,40,46)" fg:x="793" fg:w="1"/><text x="25.2264%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="24.9764%" y="325" width="0.0315%" height="15" fill="rgb(236,108,47)" fg:x="793" fg:w="1"/><text x="25.2264%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="24.9764%" y="309" width="0.0315%" height="15" fill="rgb(234,93,0)" fg:x="793" fg:w="1"/><text x="25.2264%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="24.9764%" y="293" width="0.0315%" height="15" fill="rgb(224,213,32)" fg:x="793" fg:w="1"/><text x="25.2264%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.9764%" y="277" width="0.0315%" height="15" fill="rgb(251,11,48)" fg:x="793" fg:w="1"/><text x="25.2264%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.9764%" y="261" width="0.0315%" height="15" fill="rgb(236,173,5)" fg:x="793" fg:w="1"/><text x="25.2264%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.9764%" y="245" width="0.0315%" height="15" fill="rgb(230,95,12)" fg:x="793" fg:w="1"/><text x="25.2264%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.9764%" y="229" width="0.0315%" height="15" fill="rgb(232,209,1)" fg:x="793" fg:w="1"/><text x="25.2264%" y="239.50"></text></g><g><title>core::mem::drop (2 samples, 0.06%)</title><rect x="24.9764%" y="469" width="0.0630%" height="15" fill="rgb(232,6,1)" fg:x="793" fg:w="2"/><text x="25.2264%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="24.9764%" y="453" width="0.0630%" height="15" fill="rgb(210,224,50)" fg:x="793" fg:w="2"/><text x="25.2264%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="24.9764%" y="437" width="0.0630%" height="15" fill="rgb(228,127,35)" fg:x="793" fg:w="2"/><text x="25.2264%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.06%)</title><rect x="24.9764%" y="421" width="0.0630%" height="15" fill="rgb(245,102,45)" fg:x="793" fg:w="2"/><text x="25.2264%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="24.9764%" y="405" width="0.0630%" height="15" fill="rgb(214,1,49)" fg:x="793" fg:w="2"/><text x="25.2264%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.06%)</title><rect x="24.9764%" y="389" width="0.0630%" height="15" fill="rgb(226,163,40)" fg:x="793" fg:w="2"/><text x="25.2264%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.0079%" y="373" width="0.0315%" height="15" fill="rgb(239,212,28)" fg:x="794" fg:w="1"/><text x="25.2579%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="25.0079%" y="357" width="0.0315%" height="15" fill="rgb(220,20,13)" fg:x="794" fg:w="1"/><text x="25.2579%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="25.0079%" y="341" width="0.0315%" height="15" fill="rgb(210,164,35)" fg:x="794" fg:w="1"/><text x="25.2579%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2 samples, 0.06%)</title><rect x="25.0394%" y="469" width="0.0630%" height="15" fill="rgb(248,109,41)" fg:x="795" fg:w="2"/><text x="25.2894%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="25.0394%" y="453" width="0.0630%" height="15" fill="rgb(238,23,50)" fg:x="795" fg:w="2"/><text x="25.2894%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="25.0394%" y="437" width="0.0630%" height="15" fill="rgb(211,48,49)" fg:x="795" fg:w="2"/><text x="25.2894%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="25.0394%" y="421" width="0.0630%" height="15" fill="rgb(223,36,21)" fg:x="795" fg:w="2"/><text x="25.2894%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="25.1654%" y="325" width="0.0945%" height="15" fill="rgb(207,123,46)" fg:x="799" fg:w="3"/><text x="25.4154%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="25.2283%" y="309" width="0.0315%" height="15" fill="rgb(240,218,32)" fg:x="801" fg:w="1"/><text x="25.4783%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.38%)</title><rect x="25.1339%" y="373" width="0.3780%" height="15" fill="rgb(252,5,43)" fg:x="798" fg:w="12"/><text x="25.3839%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.38%)</title><rect x="25.1339%" y="357" width="0.3780%" height="15" fill="rgb(252,84,19)" fg:x="798" fg:w="12"/><text x="25.3839%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.38%)</title><rect x="25.1339%" y="341" width="0.3780%" height="15" fill="rgb(243,152,39)" fg:x="798" fg:w="12"/><text x="25.3839%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.25%)</title><rect x="25.2598%" y="325" width="0.2520%" height="15" fill="rgb(234,160,15)" fg:x="802" fg:w="8"/><text x="25.5098%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.22%)</title><rect x="25.2913%" y="309" width="0.2205%" height="15" fill="rgb(237,34,20)" fg:x="803" fg:w="7"/><text x="25.5413%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.44%)</title><rect x="25.1339%" y="405" width="0.4409%" height="15" fill="rgb(229,97,13)" fg:x="798" fg:w="14"/><text x="25.3839%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.44%)</title><rect x="25.1339%" y="389" width="0.4409%" height="15" fill="rgb(234,71,50)" fg:x="798" fg:w="14"/><text x="25.3839%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="25.5118%" y="373" width="0.0630%" height="15" fill="rgb(253,155,4)" fg:x="810" fg:w="2"/><text x="25.7618%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="25.5118%" y="357" width="0.0630%" height="15" fill="rgb(222,185,37)" fg:x="810" fg:w="2"/><text x="25.7618%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="25.5433%" y="341" width="0.0315%" height="15" fill="rgb(251,177,13)" fg:x="811" fg:w="1"/><text x="25.7933%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="25.5433%" y="325" width="0.0315%" height="15" fill="rgb(250,179,40)" fg:x="811" fg:w="1"/><text x="25.7933%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="25.5433%" y="309" width="0.0315%" height="15" fill="rgb(242,44,2)" fg:x="811" fg:w="1"/><text x="25.7933%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="25.5433%" y="293" width="0.0315%" height="15" fill="rgb(216,177,13)" fg:x="811" fg:w="1"/><text x="25.7933%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="25.5433%" y="277" width="0.0315%" height="15" fill="rgb(216,106,43)" fg:x="811" fg:w="1"/><text x="25.7933%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="25.5433%" y="261" width="0.0315%" height="15" fill="rgb(216,183,2)" fg:x="811" fg:w="1"/><text x="25.7933%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="25.5433%" y="245" width="0.0315%" height="15" fill="rgb(249,75,3)" fg:x="811" fg:w="1"/><text x="25.7933%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.06%)</title><rect x="25.5748%" y="357" width="0.0630%" height="15" fill="rgb(219,67,39)" fg:x="812" fg:w="2"/><text x="25.8248%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="25.5748%" y="341" width="0.0630%" height="15" fill="rgb(253,228,2)" fg:x="812" fg:w="2"/><text x="25.8248%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="25.5748%" y="325" width="0.0630%" height="15" fill="rgb(235,138,27)" fg:x="812" fg:w="2"/><text x="25.8248%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="25.5748%" y="309" width="0.0630%" height="15" fill="rgb(236,97,51)" fg:x="812" fg:w="2"/><text x="25.8248%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="25.5748%" y="293" width="0.0630%" height="15" fill="rgb(240,80,30)" fg:x="812" fg:w="2"/><text x="25.8248%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="25.6378%" y="357" width="0.0315%" height="15" fill="rgb(230,178,19)" fg:x="814" fg:w="1"/><text x="25.8878%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="25.6378%" y="341" width="0.0315%" height="15" fill="rgb(210,190,27)" fg:x="814" fg:w="1"/><text x="25.8878%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="25.6378%" y="325" width="0.0315%" height="15" fill="rgb(222,107,31)" fg:x="814" fg:w="1"/><text x="25.8878%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (31 samples, 0.98%)</title><rect x="24.7244%" y="549" width="0.9764%" height="15" fill="rgb(216,127,34)" fg:x="785" fg:w="31"/><text x="24.9744%" y="559.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (30 samples, 0.94%)</title><rect x="24.7559%" y="533" width="0.9449%" height="15" fill="rgb(234,116,52)" fg:x="786" fg:w="30"/><text x="25.0059%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (26 samples, 0.82%)</title><rect x="24.8819%" y="517" width="0.8189%" height="15" fill="rgb(222,124,15)" fg:x="790" fg:w="26"/><text x="25.1319%" y="527.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (26 samples, 0.82%)</title><rect x="24.8819%" y="501" width="0.8189%" height="15" fill="rgb(231,179,28)" fg:x="790" fg:w="26"/><text x="25.1319%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (23 samples, 0.72%)</title><rect x="24.9764%" y="485" width="0.7244%" height="15" fill="rgb(226,93,45)" fg:x="793" fg:w="23"/><text x="25.2264%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (19 samples, 0.60%)</title><rect x="25.1024%" y="469" width="0.5984%" height="15" fill="rgb(215,8,51)" fg:x="797" fg:w="19"/><text x="25.3524%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (19 samples, 0.60%)</title><rect x="25.1024%" y="453" width="0.5984%" height="15" fill="rgb(223,106,5)" fg:x="797" fg:w="19"/><text x="25.3524%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (19 samples, 0.60%)</title><rect x="25.1024%" y="437" width="0.5984%" height="15" fill="rgb(250,191,5)" fg:x="797" fg:w="19"/><text x="25.3524%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (19 samples, 0.60%)</title><rect x="25.1024%" y="421" width="0.5984%" height="15" fill="rgb(242,132,44)" fg:x="797" fg:w="19"/><text x="25.3524%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.13%)</title><rect x="25.5748%" y="405" width="0.1260%" height="15" fill="rgb(251,152,29)" fg:x="812" fg:w="4"/><text x="25.8248%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.13%)</title><rect x="25.5748%" y="389" width="0.1260%" height="15" fill="rgb(218,179,5)" fg:x="812" fg:w="4"/><text x="25.8248%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.13%)</title><rect x="25.5748%" y="373" width="0.1260%" height="15" fill="rgb(227,67,19)" fg:x="812" fg:w="4"/><text x="25.8248%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="25.6693%" y="357" width="0.0315%" height="15" fill="rgb(233,119,31)" fg:x="815" fg:w="1"/><text x="25.9193%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="25.6693%" y="341" width="0.0315%" height="15" fill="rgb(241,120,22)" fg:x="815" fg:w="1"/><text x="25.9193%" y="351.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="25.7008%" y="293" width="0.0315%" height="15" fill="rgb(224,102,30)" fg:x="816" fg:w="1"/><text x="25.9508%" y="303.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="25.7008%" y="277" width="0.0315%" height="15" fill="rgb(210,164,37)" fg:x="816" fg:w="1"/><text x="25.9508%" y="287.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="25.7008%" y="261" width="0.0315%" height="15" fill="rgb(226,191,16)" fg:x="816" fg:w="1"/><text x="25.9508%" y="271.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="25.7008%" y="245" width="0.0315%" height="15" fill="rgb(214,40,45)" fg:x="816" fg:w="1"/><text x="25.9508%" y="255.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.03%)</title><rect x="25.7008%" y="229" width="0.0315%" height="15" fill="rgb(244,29,26)" fg:x="816" fg:w="1"/><text x="25.9508%" y="239.50"></text></g><g><title>__count_memcg_events (1 samples, 0.03%)</title><rect x="25.7008%" y="213" width="0.0315%" height="15" fill="rgb(216,16,5)" fg:x="816" fg:w="1"/><text x="25.9508%" y="223.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="25.7323%" y="181" width="0.0315%" height="15" fill="rgb(249,76,35)" fg:x="817" fg:w="1"/><text x="25.9823%" y="191.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="25.7323%" y="165" width="0.0315%" height="15" fill="rgb(207,11,44)" fg:x="817" fg:w="1"/><text x="25.9823%" y="175.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="25.7323%" y="149" width="0.0315%" height="15" fill="rgb(228,190,49)" fg:x="817" fg:w="1"/><text x="25.9823%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="25.7008%" y="469" width="0.0945%" height="15" fill="rgb(214,173,12)" fg:x="816" fg:w="3"/><text x="25.9508%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="25.7008%" y="453" width="0.0945%" height="15" fill="rgb(218,26,35)" fg:x="816" fg:w="3"/><text x="25.9508%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="25.7008%" y="437" width="0.0945%" height="15" fill="rgb(220,200,19)" fg:x="816" fg:w="3"/><text x="25.9508%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="25.7008%" y="421" width="0.0945%" height="15" fill="rgb(239,95,49)" fg:x="816" fg:w="3"/><text x="25.9508%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="25.7008%" y="405" width="0.0945%" height="15" fill="rgb(235,85,53)" fg:x="816" fg:w="3"/><text x="25.9508%" y="415.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="25.7008%" y="389" width="0.0945%" height="15" fill="rgb(233,133,31)" fg:x="816" fg:w="3"/><text x="25.9508%" y="399.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="25.7008%" y="373" width="0.0945%" height="15" fill="rgb(218,25,20)" fg:x="816" fg:w="3"/><text x="25.9508%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="25.7008%" y="357" width="0.0945%" height="15" fill="rgb(252,210,38)" fg:x="816" fg:w="3"/><text x="25.9508%" y="367.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="25.7008%" y="341" width="0.0945%" height="15" fill="rgb(242,134,21)" fg:x="816" fg:w="3"/><text x="25.9508%" y="351.50"></text></g><g><title>_int_malloc (3 samples, 0.09%)</title><rect x="25.7008%" y="325" width="0.0945%" height="15" fill="rgb(213,28,48)" fg:x="816" fg:w="3"/><text x="25.9508%" y="335.50"></text></g><g><title>sysmalloc (3 samples, 0.09%)</title><rect x="25.7008%" y="309" width="0.0945%" height="15" fill="rgb(250,196,2)" fg:x="816" fg:w="3"/><text x="25.9508%" y="319.50"></text></g><g><title>grow_heap (2 samples, 0.06%)</title><rect x="25.7323%" y="293" width="0.0630%" height="15" fill="rgb(227,5,17)" fg:x="817" fg:w="2"/><text x="25.9823%" y="303.50"></text></g><g><title>__GI___mprotect (2 samples, 0.06%)</title><rect x="25.7323%" y="277" width="0.0630%" height="15" fill="rgb(221,226,24)" fg:x="817" fg:w="2"/><text x="25.9823%" y="287.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="25.7323%" y="261" width="0.0630%" height="15" fill="rgb(211,5,48)" fg:x="817" fg:w="2"/><text x="25.9823%" y="271.50"></text></g><g><title>do_syscall_64 (2 samples, 0.06%)</title><rect x="25.7323%" y="245" width="0.0630%" height="15" fill="rgb(219,150,6)" fg:x="817" fg:w="2"/><text x="25.9823%" y="255.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.06%)</title><rect x="25.7323%" y="229" width="0.0630%" height="15" fill="rgb(251,46,16)" fg:x="817" fg:w="2"/><text x="25.9823%" y="239.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.06%)</title><rect x="25.7323%" y="213" width="0.0630%" height="15" fill="rgb(220,204,40)" fg:x="817" fg:w="2"/><text x="25.9823%" y="223.50"></text></g><g><title>mprotect_fixup (2 samples, 0.06%)</title><rect x="25.7323%" y="197" width="0.0630%" height="15" fill="rgb(211,85,2)" fg:x="817" fg:w="2"/><text x="25.9823%" y="207.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="25.7638%" y="181" width="0.0315%" height="15" fill="rgb(229,17,7)" fg:x="818" fg:w="1"/><text x="26.0138%" y="191.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="25.7638%" y="165" width="0.0315%" height="15" fill="rgb(239,72,28)" fg:x="818" fg:w="1"/><text x="26.0138%" y="175.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="25.7638%" y="149" width="0.0315%" height="15" fill="rgb(230,47,54)" fg:x="818" fg:w="1"/><text x="26.0138%" y="159.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="25.7638%" y="133" width="0.0315%" height="15" fill="rgb(214,50,8)" fg:x="818" fg:w="1"/><text x="26.0138%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.16%)</title><rect x="25.7008%" y="533" width="0.1575%" height="15" fill="rgb(216,198,43)" fg:x="816" fg:w="5"/><text x="25.9508%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.16%)</title><rect x="25.7008%" y="517" width="0.1575%" height="15" fill="rgb(234,20,35)" fg:x="816" fg:w="5"/><text x="25.9508%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.16%)</title><rect x="25.7008%" y="501" width="0.1575%" height="15" fill="rgb(254,45,19)" fg:x="816" fg:w="5"/><text x="25.9508%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.16%)</title><rect x="25.7008%" y="485" width="0.1575%" height="15" fill="rgb(219,14,44)" fg:x="816" fg:w="5"/><text x="25.9508%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.06%)</title><rect x="25.7953%" y="469" width="0.0630%" height="15" fill="rgb(217,220,26)" fg:x="819" fg:w="2"/><text x="26.0453%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="25.7953%" y="453" width="0.0630%" height="15" fill="rgb(213,158,28)" fg:x="819" fg:w="2"/><text x="26.0453%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="25.7953%" y="437" width="0.0630%" height="15" fill="rgb(252,51,52)" fg:x="819" fg:w="2"/><text x="26.0453%" y="447.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="421" width="0.0630%" height="15" fill="rgb(246,89,16)" fg:x="819" fg:w="2"/><text x="26.0453%" y="431.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="405" width="0.0630%" height="15" fill="rgb(216,158,49)" fg:x="819" fg:w="2"/><text x="26.0453%" y="415.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="389" width="0.0630%" height="15" fill="rgb(236,107,19)" fg:x="819" fg:w="2"/><text x="26.0453%" y="399.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="373" width="0.0630%" height="15" fill="rgb(228,185,30)" fg:x="819" fg:w="2"/><text x="26.0453%" y="383.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="357" width="0.0630%" height="15" fill="rgb(246,134,8)" fg:x="819" fg:w="2"/><text x="26.0453%" y="367.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="25.7953%" y="341" width="0.0630%" height="15" fill="rgb(214,143,50)" fg:x="819" fg:w="2"/><text x="26.0453%" y="351.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="25.7953%" y="325" width="0.0630%" height="15" fill="rgb(228,75,8)" fg:x="819" fg:w="2"/><text x="26.0453%" y="335.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="25.7953%" y="309" width="0.0630%" height="15" fill="rgb(207,175,4)" fg:x="819" fg:w="2"/><text x="26.0453%" y="319.50"></text></g><g><title>__folio_alloc (2 samples, 0.06%)</title><rect x="25.7953%" y="293" width="0.0630%" height="15" fill="rgb(205,108,24)" fg:x="819" fg:w="2"/><text x="26.0453%" y="303.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="25.7953%" y="277" width="0.0630%" height="15" fill="rgb(244,120,49)" fg:x="819" fg:w="2"/><text x="26.0453%" y="287.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="25.7953%" y="261" width="0.0630%" height="15" fill="rgb(223,47,38)" fg:x="819" fg:w="2"/><text x="26.0453%" y="271.50"></text></g><g><title>rmqueue (2 samples, 0.06%)</title><rect x="25.7953%" y="245" width="0.0630%" height="15" fill="rgb(229,179,11)" fg:x="819" fg:w="2"/><text x="26.0453%" y="255.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (2 samples, 0.06%)</title><rect x="25.7953%" y="229" width="0.0630%" height="15" fill="rgb(231,122,1)" fg:x="819" fg:w="2"/><text x="26.0453%" y="239.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="25.8268%" y="213" width="0.0315%" height="15" fill="rgb(245,119,9)" fg:x="820" fg:w="1"/><text x="26.0768%" y="223.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (2 samples, 0.06%)</title><rect x="25.8583%" y="517" width="0.0630%" height="15" fill="rgb(241,163,25)" fg:x="821" fg:w="2"/><text x="26.1083%" y="527.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="25.8898%" y="501" width="0.0315%" height="15" fill="rgb(217,214,3)" fg:x="822" fg:w="1"/><text x="26.1398%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.8898%" y="485" width="0.0315%" height="15" fill="rgb(240,86,28)" fg:x="822" fg:w="1"/><text x="26.1398%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.03%)</title><rect x="25.8898%" y="469" width="0.0315%" height="15" fill="rgb(215,47,9)" fg:x="822" fg:w="1"/><text x="26.1398%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (1 samples, 0.03%)</title><rect x="25.8898%" y="453" width="0.0315%" height="15" fill="rgb(252,25,45)" fg:x="822" fg:w="1"/><text x="26.1398%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.09%)</title><rect x="25.8583%" y="533" width="0.0945%" height="15" fill="rgb(251,164,9)" fg:x="821" fg:w="3"/><text x="26.1083%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="25.9213%" y="517" width="0.0315%" height="15" fill="rgb(233,194,0)" fg:x="823" fg:w="1"/><text x="26.1713%" y="527.50"></text></g><g><title>core::slice::sort::find_streak (4 samples, 0.13%)</title><rect x="26.0157%" y="485" width="0.1260%" height="15" fill="rgb(249,111,24)" fg:x="826" fg:w="4"/><text x="26.2657%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (2 samples, 0.06%)</title><rect x="26.0787%" y="469" width="0.0630%" height="15" fill="rgb(250,223,3)" fg:x="828" fg:w="2"/><text x="26.3287%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (2 samples, 0.06%)</title><rect x="26.0787%" y="453" width="0.0630%" height="15" fill="rgb(236,178,37)" fg:x="828" fg:w="2"/><text x="26.3287%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.06%)</title><rect x="26.2677%" y="453" width="0.0630%" height="15" fill="rgb(241,158,50)" fg:x="834" fg:w="2"/><text x="26.5177%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (33 samples, 1.04%)</title><rect x="27.1181%" y="405" width="1.0394%" height="15" fill="rgb(213,121,41)" fg:x="861" fg:w="33"/><text x="27.3681%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (33 samples, 1.04%)</title><rect x="27.1181%" y="389" width="1.0394%" height="15" fill="rgb(240,92,3)" fg:x="861" fg:w="33"/><text x="27.3681%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="28.1260%" y="373" width="0.0315%" height="15" fill="rgb(205,123,3)" fg:x="893" fg:w="1"/><text x="28.3760%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="28.1260%" y="357" width="0.0315%" height="15" fill="rgb(205,97,47)" fg:x="893" fg:w="1"/><text x="28.3760%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="28.1260%" y="341" width="0.0315%" height="15" fill="rgb(247,152,14)" fg:x="893" fg:w="1"/><text x="28.3760%" y="351.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="28.1260%" y="325" width="0.0315%" height="15" fill="rgb(248,195,53)" fg:x="893" fg:w="1"/><text x="28.3760%" y="335.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="28.1260%" y="309" width="0.0315%" height="15" fill="rgb(226,201,16)" fg:x="893" fg:w="1"/><text x="28.3760%" y="319.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="28.1260%" y="293" width="0.0315%" height="15" fill="rgb(205,98,0)" fg:x="893" fg:w="1"/><text x="28.3760%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (37 samples, 1.17%)</title><rect x="27.1181%" y="437" width="1.1654%" height="15" fill="rgb(214,191,48)" fg:x="861" fg:w="37"/><text x="27.3681%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (37 samples, 1.17%)</title><rect x="27.1181%" y="421" width="1.1654%" height="15" fill="rgb(237,112,39)" fg:x="861" fg:w="37"/><text x="27.3681%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.13%)</title><rect x="28.1575%" y="405" width="0.1260%" height="15" fill="rgb(247,203,27)" fg:x="894" fg:w="4"/><text x="28.4075%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.13%)</title><rect x="28.1575%" y="389" width="0.1260%" height="15" fill="rgb(235,124,28)" fg:x="894" fg:w="4"/><text x="28.4075%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="28.2835%" y="437" width="0.0315%" height="15" fill="rgb(208,207,46)" fg:x="898" fg:w="1"/><text x="28.5335%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (66 samples, 2.08%)</title><rect x="26.2677%" y="469" width="2.0787%" height="15" fill="rgb(234,176,4)" fg:x="834" fg:w="66"/><text x="26.5177%" y="479.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (64 samples, 2.02%)</title><rect x="26.3307%" y="453" width="2.0157%" height="15" fill="rgb(230,133,28)" fg:x="836" fg:w="64"/><text x="26.5807%" y="463.50">p..</text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="28.3150%" y="437" width="0.0315%" height="15" fill="rgb(211,137,40)" fg:x="899" fg:w="1"/><text x="28.5650%" y="447.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="28.5669%" y="437" width="0.0315%" height="15" fill="rgb(254,35,13)" fg:x="907" fg:w="1"/><text x="28.8169%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="28.3465%" y="469" width="0.2835%" height="15" fill="rgb(225,49,51)" fg:x="900" fg:w="9"/><text x="28.5965%" y="479.50"></text></g><g><title>__memcpy_evex_unaligned_erms (3 samples, 0.09%)</title><rect x="28.5354%" y="453" width="0.0945%" height="15" fill="rgb(251,10,15)" fg:x="906" fg:w="3"/><text x="28.7854%" y="463.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="437" width="0.0315%" height="15" fill="rgb(228,207,15)" fg:x="908" fg:w="1"/><text x="28.8484%" y="447.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="421" width="0.0315%" height="15" fill="rgb(241,99,19)" fg:x="908" fg:w="1"/><text x="28.8484%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="405" width="0.0315%" height="15" fill="rgb(207,104,49)" fg:x="908" fg:w="1"/><text x="28.8484%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="389" width="0.0315%" height="15" fill="rgb(234,99,18)" fg:x="908" fg:w="1"/><text x="28.8484%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="373" width="0.0315%" height="15" fill="rgb(213,191,49)" fg:x="908" fg:w="1"/><text x="28.8484%" y="383.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="28.5984%" y="357" width="0.0315%" height="15" fill="rgb(210,226,19)" fg:x="908" fg:w="1"/><text x="28.8484%" y="367.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="28.5984%" y="341" width="0.0315%" height="15" fill="rgb(229,97,18)" fg:x="908" fg:w="1"/><text x="28.8484%" y="351.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="28.5984%" y="325" width="0.0315%" height="15" fill="rgb(211,167,15)" fg:x="908" fg:w="1"/><text x="28.8484%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="28.5984%" y="309" width="0.0315%" height="15" fill="rgb(210,169,34)" fg:x="908" fg:w="1"/><text x="28.8484%" y="319.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="28.5984%" y="293" width="0.0315%" height="15" fill="rgb(241,121,31)" fg:x="908" fg:w="1"/><text x="28.8484%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (2 samples, 0.06%)</title><rect x="28.6299%" y="469" width="0.0630%" height="15" fill="rgb(232,40,11)" fg:x="909" fg:w="2"/><text x="28.8799%" y="479.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="28.6299%" y="453" width="0.0630%" height="15" fill="rgb(205,86,26)" fg:x="909" fg:w="2"/><text x="28.8799%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="28.6299%" y="437" width="0.0630%" height="15" fill="rgb(231,126,28)" fg:x="909" fg:w="2"/><text x="28.8799%" y="447.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="28.6299%" y="421" width="0.0630%" height="15" fill="rgb(219,221,18)" fg:x="909" fg:w="2"/><text x="28.8799%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.06%)</title><rect x="28.6929%" y="469" width="0.0630%" height="15" fill="rgb(211,40,0)" fg:x="911" fg:w="2"/><text x="28.9429%" y="479.50"></text></g><g><title>core::slice::sort::merge (84 samples, 2.65%)</title><rect x="26.1417%" y="485" width="2.6457%" height="15" fill="rgb(239,85,43)" fg:x="830" fg:w="84"/><text x="26.3917%" y="495.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="28.7559%" y="469" width="0.0315%" height="15" fill="rgb(231,55,21)" fg:x="913" fg:w="1"/><text x="29.0059%" y="479.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="28.7559%" y="453" width="0.0315%" height="15" fill="rgb(225,184,43)" fg:x="913" fg:w="1"/><text x="29.0059%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (15 samples, 0.47%)</title><rect x="28.7874%" y="485" width="0.4724%" height="15" fill="rgb(251,158,41)" fg:x="914" fg:w="15"/><text x="29.0374%" y="495.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (1 samples, 0.03%)</title><rect x="29.2598%" y="485" width="0.0315%" height="15" fill="rgb(234,159,37)" fg:x="929" fg:w="1"/><text x="29.5098%" y="495.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (1 samples, 0.03%)</title><rect x="29.2598%" y="469" width="0.0315%" height="15" fill="rgb(216,204,22)" fg:x="929" fg:w="1"/><text x="29.5098%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="29.2598%" y="453" width="0.0315%" height="15" fill="rgb(214,17,3)" fg:x="929" fg:w="1"/><text x="29.5098%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="29.2598%" y="437" width="0.0315%" height="15" fill="rgb(212,111,17)" fg:x="929" fg:w="1"/><text x="29.5098%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="29.2598%" y="421" width="0.0315%" height="15" fill="rgb(221,157,24)" fg:x="929" fg:w="1"/><text x="29.5098%" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="29.2598%" y="405" width="0.0315%" height="15" fill="rgb(252,16,13)" fg:x="929" fg:w="1"/><text x="29.5098%" y="415.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="29.2598%" y="389" width="0.0315%" height="15" fill="rgb(221,62,2)" fg:x="929" fg:w="1"/><text x="29.5098%" y="399.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="29.2598%" y="373" width="0.0315%" height="15" fill="rgb(247,87,22)" fg:x="929" fg:w="1"/><text x="29.5098%" y="383.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="29.2598%" y="357" width="0.0315%" height="15" fill="rgb(215,73,9)" fg:x="929" fg:w="1"/><text x="29.5098%" y="367.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="29.2598%" y="341" width="0.0315%" height="15" fill="rgb(207,175,33)" fg:x="929" fg:w="1"/><text x="29.5098%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="29.2598%" y="325" width="0.0315%" height="15" fill="rgb(243,129,54)" fg:x="929" fg:w="1"/><text x="29.5098%" y="335.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="29.2598%" y="309" width="0.0315%" height="15" fill="rgb(227,119,45)" fg:x="929" fg:w="1"/><text x="29.5098%" y="319.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="29.2598%" y="293" width="0.0315%" height="15" fill="rgb(205,109,36)" fg:x="929" fg:w="1"/><text x="29.5098%" y="303.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="29.2598%" y="277" width="0.0315%" height="15" fill="rgb(205,6,39)" fg:x="929" fg:w="1"/><text x="29.5098%" y="287.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="29.2598%" y="261" width="0.0315%" height="15" fill="rgb(221,32,16)" fg:x="929" fg:w="1"/><text x="29.5098%" y="271.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="29.2598%" y="245" width="0.0315%" height="15" fill="rgb(228,144,50)" fg:x="929" fg:w="1"/><text x="29.5098%" y="255.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="29.2598%" y="229" width="0.0315%" height="15" fill="rgb(229,201,53)" fg:x="929" fg:w="1"/><text x="29.5098%" y="239.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="29.2598%" y="213" width="0.0315%" height="15" fill="rgb(249,153,27)" fg:x="929" fg:w="1"/><text x="29.5098%" y="223.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="29.2598%" y="197" width="0.0315%" height="15" fill="rgb(227,106,25)" fg:x="929" fg:w="1"/><text x="29.5098%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (2 samples, 0.06%)</title><rect x="29.2913%" y="485" width="0.0630%" height="15" fill="rgb(230,65,29)" fg:x="930" fg:w="2"/><text x="29.5413%" y="495.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.06%)</title><rect x="29.2913%" y="469" width="0.0630%" height="15" fill="rgb(221,57,46)" fg:x="930" fg:w="2"/><text x="29.5413%" y="479.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="29.2913%" y="453" width="0.0630%" height="15" fill="rgb(229,161,17)" fg:x="930" fg:w="2"/><text x="29.5413%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (3 samples, 0.09%)</title><rect x="29.3543%" y="485" width="0.0945%" height="15" fill="rgb(222,213,11)" fg:x="932" fg:w="3"/><text x="29.6043%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="29.5118%" y="453" width="0.0315%" height="15" fill="rgb(235,35,13)" fg:x="937" fg:w="1"/><text x="29.7618%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="29.5118%" y="437" width="0.0315%" height="15" fill="rgb(233,158,34)" fg:x="937" fg:w="1"/><text x="29.7618%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="29.5118%" y="421" width="0.0315%" height="15" fill="rgb(215,151,48)" fg:x="937" fg:w="1"/><text x="29.7618%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="29.5433%" y="437" width="0.0315%" height="15" fill="rgb(229,84,14)" fg:x="938" fg:w="1"/><text x="29.7933%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1 samples, 0.03%)</title><rect x="29.5433%" y="421" width="0.0315%" height="15" fill="rgb(229,68,14)" fg:x="938" fg:w="1"/><text x="29.7933%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1 samples, 0.03%)</title><rect x="29.5433%" y="405" width="0.0315%" height="15" fill="rgb(243,106,26)" fg:x="938" fg:w="1"/><text x="29.7933%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="29.5433%" y="389" width="0.0315%" height="15" fill="rgb(206,45,38)" fg:x="938" fg:w="1"/><text x="29.7933%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (3 samples, 0.09%)</title><rect x="29.5748%" y="421" width="0.0945%" height="15" fill="rgb(226,6,15)" fg:x="939" fg:w="3"/><text x="29.8248%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (6 samples, 0.19%)</title><rect x="29.8898%" y="373" width="0.1890%" height="15" fill="rgb(232,22,54)" fg:x="949" fg:w="6"/><text x="30.1398%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (6 samples, 0.19%)</title><rect x="29.8898%" y="357" width="0.1890%" height="15" fill="rgb(229,222,32)" fg:x="949" fg:w="6"/><text x="30.1398%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (17 samples, 0.54%)</title><rect x="29.5748%" y="437" width="0.5354%" height="15" fill="rgb(228,62,29)" fg:x="939" fg:w="17"/><text x="29.8248%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (14 samples, 0.44%)</title><rect x="29.6693%" y="421" width="0.4409%" height="15" fill="rgb(251,103,34)" fg:x="942" fg:w="14"/><text x="29.9193%" y="431.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (7 samples, 0.22%)</title><rect x="29.8898%" y="405" width="0.2205%" height="15" fill="rgb(233,12,30)" fg:x="949" fg:w="7"/><text x="30.1398%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (7 samples, 0.22%)</title><rect x="29.8898%" y="389" width="0.2205%" height="15" fill="rgb(238,52,0)" fg:x="949" fg:w="7"/><text x="30.1398%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.03%)</title><rect x="30.0787%" y="373" width="0.0315%" height="15" fill="rgb(223,98,5)" fg:x="955" fg:w="1"/><text x="30.3287%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="30.1102%" y="437" width="0.0945%" height="15" fill="rgb(228,75,37)" fg:x="956" fg:w="3"/><text x="30.3602%" y="447.50"></text></g><g><title>core::slice::sort::insert_tail (22 samples, 0.69%)</title><rect x="29.5433%" y="453" width="0.6929%" height="15" fill="rgb(205,115,49)" fg:x="938" fg:w="22"/><text x="29.7933%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (1 samples, 0.03%)</title><rect x="30.2047%" y="437" width="0.0315%" height="15" fill="rgb(250,154,43)" fg:x="959" fg:w="1"/><text x="30.4547%" y="447.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="30.2047%" y="421" width="0.0315%" height="15" fill="rgb(226,43,29)" fg:x="959" fg:w="1"/><text x="30.4547%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="30.2047%" y="405" width="0.0315%" height="15" fill="rgb(249,228,39)" fg:x="959" fg:w="1"/><text x="30.4547%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (141 samples, 4.44%)</title><rect x="25.9528%" y="533" width="4.4409%" height="15" fill="rgb(216,79,43)" fg:x="824" fg:w="141"/><text x="26.2028%" y="543.50">alloc..</text></g><g><title>alloc::slice::stable_sort (141 samples, 4.44%)</title><rect x="25.9528%" y="517" width="4.4409%" height="15" fill="rgb(228,95,12)" fg:x="824" fg:w="141"/><text x="26.2028%" y="527.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (141 samples, 4.44%)</title><rect x="25.9528%" y="501" width="4.4409%" height="15" fill="rgb(249,221,15)" fg:x="824" fg:w="141"/><text x="26.2028%" y="511.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (30 samples, 0.94%)</title><rect x="29.4488%" y="485" width="0.9449%" height="15" fill="rgb(233,34,13)" fg:x="935" fg:w="30"/><text x="29.6988%" y="495.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (29 samples, 0.91%)</title><rect x="29.4803%" y="469" width="0.9134%" height="15" fill="rgb(214,103,39)" fg:x="936" fg:w="29"/><text x="29.7303%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (5 samples, 0.16%)</title><rect x="30.2362%" y="453" width="0.1575%" height="15" fill="rgb(251,126,39)" fg:x="960" fg:w="5"/><text x="30.4862%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (9 samples, 0.28%)</title><rect x="30.3937%" y="485" width="0.2835%" height="15" fill="rgb(214,216,36)" fg:x="965" fg:w="9"/><text x="30.6437%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (9 samples, 0.28%)</title><rect x="30.3937%" y="469" width="0.2835%" height="15" fill="rgb(220,221,8)" fg:x="965" fg:w="9"/><text x="30.6437%" y="479.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (6 samples, 0.19%)</title><rect x="30.4882%" y="453" width="0.1890%" height="15" fill="rgb(240,216,3)" fg:x="968" fg:w="6"/><text x="30.7382%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (6 samples, 0.19%)</title><rect x="30.4882%" y="437" width="0.1890%" height="15" fill="rgb(232,218,17)" fg:x="968" fg:w="6"/><text x="30.7382%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (6 samples, 0.19%)</title><rect x="30.4882%" y="421" width="0.1890%" height="15" fill="rgb(229,163,45)" fg:x="968" fg:w="6"/><text x="30.7382%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (6 samples, 0.19%)</title><rect x="30.4882%" y="405" width="0.1890%" height="15" fill="rgb(231,110,42)" fg:x="968" fg:w="6"/><text x="30.7382%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (10 samples, 0.31%)</title><rect x="30.3937%" y="533" width="0.3150%" height="15" fill="rgb(208,170,48)" fg:x="965" fg:w="10"/><text x="30.6437%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (10 samples, 0.31%)</title><rect x="30.3937%" y="517" width="0.3150%" height="15" fill="rgb(239,116,25)" fg:x="965" fg:w="10"/><text x="30.6437%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (10 samples, 0.31%)</title><rect x="30.3937%" y="501" width="0.3150%" height="15" fill="rgb(219,200,50)" fg:x="965" fg:w="10"/><text x="30.6437%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="30.6772%" y="485" width="0.0315%" height="15" fill="rgb(245,200,0)" fg:x="974" fg:w="1"/><text x="30.9272%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (160 samples, 5.04%)</title><rect x="25.7008%" y="549" width="5.0394%" height="15" fill="rgb(245,119,33)" fg:x="816" fg:w="160"/><text x="25.9508%" y="559.50">projec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.03%)</title><rect x="30.7087%" y="533" width="0.0315%" height="15" fill="rgb(231,125,12)" fg:x="975" fg:w="1"/><text x="30.9587%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="30.7087%" y="517" width="0.0315%" height="15" fill="rgb(216,96,41)" fg:x="975" fg:w="1"/><text x="30.9587%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="30.7087%" y="501" width="0.0315%" height="15" fill="rgb(248,43,45)" fg:x="975" fg:w="1"/><text x="30.9587%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="30.7087%" y="485" width="0.0315%" height="15" fill="rgb(217,222,7)" fg:x="975" fg:w="1"/><text x="30.9587%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="30.7087%" y="469" width="0.0315%" height="15" fill="rgb(233,28,6)" fg:x="975" fg:w="1"/><text x="30.9587%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="30.7087%" y="453" width="0.0315%" height="15" fill="rgb(231,218,15)" fg:x="975" fg:w="1"/><text x="30.9587%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="30.7087%" y="437" width="0.0315%" height="15" fill="rgb(226,171,48)" fg:x="975" fg:w="1"/><text x="30.9587%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="30.7087%" y="421" width="0.0315%" height="15" fill="rgb(235,201,9)" fg:x="975" fg:w="1"/><text x="30.9587%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="30.7087%" y="405" width="0.0315%" height="15" fill="rgb(217,80,15)" fg:x="975" fg:w="1"/><text x="30.9587%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="30.7087%" y="389" width="0.0315%" height="15" fill="rgb(219,152,8)" fg:x="975" fg:w="1"/><text x="30.9587%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="30.7087%" y="373" width="0.0315%" height="15" fill="rgb(243,107,38)" fg:x="975" fg:w="1"/><text x="30.9587%" y="383.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="30.7087%" y="357" width="0.0315%" height="15" fill="rgb(231,17,5)" fg:x="975" fg:w="1"/><text x="30.9587%" y="367.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="341" width="0.0315%" height="15" fill="rgb(209,25,54)" fg:x="975" fg:w="1"/><text x="30.9587%" y="351.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="325" width="0.0315%" height="15" fill="rgb(219,0,2)" fg:x="975" fg:w="1"/><text x="30.9587%" y="335.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="309" width="0.0315%" height="15" fill="rgb(246,9,5)" fg:x="975" fg:w="1"/><text x="30.9587%" y="319.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="293" width="0.0315%" height="15" fill="rgb(226,159,4)" fg:x="975" fg:w="1"/><text x="30.9587%" y="303.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="277" width="0.0315%" height="15" fill="rgb(219,175,34)" fg:x="975" fg:w="1"/><text x="30.9587%" y="287.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="30.7087%" y="261" width="0.0315%" height="15" fill="rgb(236,10,46)" fg:x="975" fg:w="1"/><text x="30.9587%" y="271.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="30.7087%" y="245" width="0.0315%" height="15" fill="rgb(240,211,16)" fg:x="975" fg:w="1"/><text x="30.9587%" y="255.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="30.7087%" y="229" width="0.0315%" height="15" fill="rgb(205,3,43)" fg:x="975" fg:w="1"/><text x="30.9587%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="30.7087%" y="213" width="0.0315%" height="15" fill="rgb(245,7,22)" fg:x="975" fg:w="1"/><text x="30.9587%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.7717%" y="517" width="0.0315%" height="15" fill="rgb(239,132,32)" fg:x="977" fg:w="1"/><text x="31.0217%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.7717%" y="501" width="0.0315%" height="15" fill="rgb(228,202,34)" fg:x="977" fg:w="1"/><text x="31.0217%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.7717%" y="485" width="0.0315%" height="15" fill="rgb(254,200,22)" fg:x="977" fg:w="1"/><text x="31.0217%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (3 samples, 0.09%)</title><rect x="30.7402%" y="549" width="0.0945%" height="15" fill="rgb(219,10,39)" fg:x="976" fg:w="3"/><text x="30.9902%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (3 samples, 0.09%)</title><rect x="30.7402%" y="533" width="0.0945%" height="15" fill="rgb(226,210,39)" fg:x="976" fg:w="3"/><text x="30.9902%" y="543.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="30.8031%" y="517" width="0.0315%" height="15" fill="rgb(208,219,16)" fg:x="978" fg:w="1"/><text x="31.0531%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.03%)</title><rect x="30.8661%" y="533" width="0.0315%" height="15" fill="rgb(216,158,51)" fg:x="980" fg:w="1"/><text x="31.1161%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (248 samples, 7.81%)</title><rect x="30.8976%" y="533" width="7.8110%" height="15" fill="rgb(233,14,44)" fg:x="981" fg:w="248"/><text x="31.1476%" y="543.50">project1::s..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="38.6772%" y="517" width="0.0315%" height="15" fill="rgb(237,97,39)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="38.6772%" y="501" width="0.0315%" height="15" fill="rgb(218,198,43)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="38.6772%" y="485" width="0.0315%" height="15" fill="rgb(231,104,20)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="38.6772%" y="469" width="0.0315%" height="15" fill="rgb(254,36,13)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="38.6772%" y="453" width="0.0315%" height="15" fill="rgb(248,14,50)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="38.6772%" y="437" width="0.0315%" height="15" fill="rgb(217,107,29)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="447.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="38.6772%" y="421" width="0.0315%" height="15" fill="rgb(251,169,33)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="431.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="38.6772%" y="405" width="0.0315%" height="15" fill="rgb(217,108,32)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="415.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="38.6772%" y="389" width="0.0315%" height="15" fill="rgb(219,66,42)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="399.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="38.6772%" y="373" width="0.0315%" height="15" fill="rgb(206,180,7)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="383.50"></text></g><g><title>update_cfs_group (1 samples, 0.03%)</title><rect x="38.6772%" y="357" width="0.0315%" height="15" fill="rgb(208,226,31)" fg:x="1228" fg:w="1"/><text x="38.9272%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.28%)</title><rect x="54.6457%" y="517" width="0.2835%" height="15" fill="rgb(218,26,49)" fg:x="1735" fg:w="9"/><text x="54.8957%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.28%)</title><rect x="54.6457%" y="501" width="0.2835%" height="15" fill="rgb(233,197,48)" fg:x="1735" fg:w="9"/><text x="54.8957%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.28%)</title><rect x="54.6457%" y="485" width="0.2835%" height="15" fill="rgb(252,181,51)" fg:x="1735" fg:w="9"/><text x="54.8957%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (35 samples, 1.10%)</title><rect x="54.9291%" y="485" width="1.1024%" height="15" fill="rgb(253,90,19)" fg:x="1744" fg:w="35"/><text x="55.1791%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (53 samples, 1.67%)</title><rect x="54.9291%" y="517" width="1.6693%" height="15" fill="rgb(215,171,30)" fg:x="1744" fg:w="53"/><text x="55.1791%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (53 samples, 1.67%)</title><rect x="54.9291%" y="501" width="1.6693%" height="15" fill="rgb(214,222,9)" fg:x="1744" fg:w="53"/><text x="55.1791%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (18 samples, 0.57%)</title><rect x="56.0315%" y="485" width="0.5669%" height="15" fill="rgb(223,3,22)" fg:x="1779" fg:w="18"/><text x="56.2815%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.50%)</title><rect x="57.5748%" y="469" width="0.5039%" height="15" fill="rgb(225,196,46)" fg:x="1828" fg:w="16"/><text x="57.8248%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.50%)</title><rect x="57.5748%" y="453" width="0.5039%" height="15" fill="rgb(209,110,37)" fg:x="1828" fg:w="16"/><text x="57.8248%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 1.51%)</title><rect x="56.5984%" y="485" width="1.5118%" height="15" fill="rgb(249,89,12)" fg:x="1797" fg:w="48"/><text x="56.8484%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="58.0787%" y="469" width="0.0315%" height="15" fill="rgb(226,27,33)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="58.0787%" y="453" width="0.0315%" height="15" fill="rgb(213,82,22)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="463.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="58.0787%" y="437" width="0.0315%" height="15" fill="rgb(248,140,0)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="447.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="58.0787%" y="421" width="0.0315%" height="15" fill="rgb(228,106,3)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="431.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="58.0787%" y="405" width="0.0315%" height="15" fill="rgb(209,23,37)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="415.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="58.0787%" y="389" width="0.0315%" height="15" fill="rgb(241,93,50)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="399.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="58.0787%" y="373" width="0.0315%" height="15" fill="rgb(253,46,43)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="383.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="58.0787%" y="357" width="0.0315%" height="15" fill="rgb(226,206,43)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="367.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="58.0787%" y="341" width="0.0315%" height="15" fill="rgb(217,54,7)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="351.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="58.0787%" y="325" width="0.0315%" height="15" fill="rgb(223,5,52)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="335.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="58.0787%" y="309" width="0.0315%" height="15" fill="rgb(206,52,46)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="319.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.03%)</title><rect x="58.0787%" y="293" width="0.0315%" height="15" fill="rgb(253,136,11)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="303.50"></text></g><g><title>generic_exec_single (1 samples, 0.03%)</title><rect x="58.0787%" y="277" width="0.0315%" height="15" fill="rgb(208,106,33)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="287.50"></text></g><g><title>send_call_function_single_ipi (1 samples, 0.03%)</title><rect x="58.0787%" y="261" width="0.0315%" height="15" fill="rgb(206,54,4)" fg:x="1844" fg:w="1"/><text x="58.3287%" y="271.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (86 samples, 2.71%)</title><rect x="56.5984%" y="517" width="2.7087%" height="15" fill="rgb(213,3,15)" fg:x="1797" fg:w="86"/><text x="56.8484%" y="527.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (86 samples, 2.71%)</title><rect x="56.5984%" y="501" width="2.7087%" height="15" fill="rgb(252,211,39)" fg:x="1797" fg:w="86"/><text x="56.8484%" y="511.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 1.20%)</title><rect x="58.1102%" y="485" width="1.1969%" height="15" fill="rgb(223,6,36)" fg:x="1845" fg:w="38"/><text x="58.3602%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 1.20%)</title><rect x="58.1102%" y="469" width="1.1969%" height="15" fill="rgb(252,169,45)" fg:x="1845" fg:w="38"/><text x="58.3602%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (21 samples, 0.66%)</title><rect x="59.3071%" y="453" width="0.6614%" height="15" fill="rgb(212,48,26)" fg:x="1883" fg:w="21"/><text x="59.5571%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (27 samples, 0.85%)</title><rect x="59.3071%" y="485" width="0.8504%" height="15" fill="rgb(251,102,48)" fg:x="1883" fg:w="27"/><text x="59.5571%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27 samples, 0.85%)</title><rect x="59.3071%" y="469" width="0.8504%" height="15" fill="rgb(243,208,16)" fg:x="1883" fg:w="27"/><text x="59.5571%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (6 samples, 0.19%)</title><rect x="59.9685%" y="453" width="0.1890%" height="15" fill="rgb(219,96,24)" fg:x="1904" fg:w="6"/><text x="60.2185%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (33 samples, 1.04%)</title><rect x="59.3071%" y="517" width="1.0394%" height="15" fill="rgb(219,33,29)" fg:x="1883" fg:w="33"/><text x="59.5571%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (33 samples, 1.04%)</title><rect x="59.3071%" y="501" width="1.0394%" height="15" fill="rgb(223,176,5)" fg:x="1883" fg:w="33"/><text x="59.5571%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.19%)</title><rect x="60.1575%" y="485" width="0.1890%" height="15" fill="rgb(228,140,14)" fg:x="1910" fg:w="6"/><text x="60.4075%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.19%)</title><rect x="60.1575%" y="469" width="0.1890%" height="15" fill="rgb(217,179,31)" fg:x="1910" fg:w="6"/><text x="60.4075%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.16%)</title><rect x="60.3465%" y="485" width="0.1575%" height="15" fill="rgb(230,9,30)" fg:x="1916" fg:w="5"/><text x="60.5965%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (259 samples, 8.16%)</title><rect x="60.5039%" y="485" width="8.1575%" height="15" fill="rgb(230,136,20)" fg:x="1921" fg:w="259"/><text x="60.7539%" y="495.50">core::optio..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (259 samples, 8.16%)</title><rect x="60.5039%" y="469" width="8.1575%" height="15" fill="rgb(215,210,22)" fg:x="1921" fg:w="259"/><text x="60.7539%" y="479.50">slotmap::ba..</text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="453" width="0.0315%" height="15" fill="rgb(218,43,5)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="463.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="437" width="0.0315%" height="15" fill="rgb(216,11,5)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="447.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="421" width="0.0315%" height="15" fill="rgb(209,82,29)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="431.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="405" width="0.0315%" height="15" fill="rgb(244,115,12)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="415.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="389" width="0.0315%" height="15" fill="rgb(222,82,18)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="399.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="68.6299%" y="373" width="0.0315%" height="15" fill="rgb(249,227,8)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="383.50"></text></g><g><title>do_numa_page (1 samples, 0.03%)</title><rect x="68.6299%" y="357" width="0.0315%" height="15" fill="rgb(253,141,45)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="367.50"></text></g><g><title>numa_migrate_prep (1 samples, 0.03%)</title><rect x="68.6299%" y="341" width="0.0315%" height="15" fill="rgb(234,184,4)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="351.50"></text></g><g><title>mpol_misplaced (1 samples, 0.03%)</title><rect x="68.6299%" y="325" width="0.0315%" height="15" fill="rgb(218,194,23)" fg:x="2179" fg:w="1"/><text x="68.8799%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (24 samples, 0.76%)</title><rect x="68.6614%" y="485" width="0.7559%" height="15" fill="rgb(235,66,41)" fg:x="2180" fg:w="24"/><text x="68.9114%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (24 samples, 0.76%)</title><rect x="68.6614%" y="469" width="0.7559%" height="15" fill="rgb(245,217,1)" fg:x="2180" fg:w="24"/><text x="68.9114%" y="479.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (293 samples, 9.23%)</title><rect x="60.3465%" y="517" width="9.2283%" height="15" fill="rgb(229,91,1)" fg:x="1916" fg:w="293"/><text x="60.5965%" y="527.50">&lt;project1::so..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (293 samples, 9.23%)</title><rect x="60.3465%" y="501" width="9.2283%" height="15" fill="rgb(207,101,30)" fg:x="1916" fg:w="293"/><text x="60.5965%" y="511.50">slotmap::basi..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (5 samples, 0.16%)</title><rect x="69.4173%" y="485" width="0.1575%" height="15" fill="rgb(223,82,49)" fg:x="2204" fg:w="5"/><text x="69.6673%" y="495.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (202 samples, 6.36%)</title><rect x="69.5748%" y="517" width="6.3622%" height="15" fill="rgb(218,167,17)" fg:x="2209" fg:w="202"/><text x="69.8248%" y="527.50">&lt;project..</text></g><g><title>__irqentry_text_end (2 samples, 0.06%)</title><rect x="75.8740%" y="501" width="0.0630%" height="15" fill="rgb(208,103,14)" fg:x="2409" fg:w="2"/><text x="76.1240%" y="511.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (2 samples, 0.06%)</title><rect x="75.9370%" y="517" width="0.0630%" height="15" fill="rgb(238,20,8)" fg:x="2411" fg:w="2"/><text x="76.1870%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="75.9370%" y="501" width="0.0630%" height="15" fill="rgb(218,80,54)" fg:x="2411" fg:w="2"/><text x="76.1870%" y="511.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="76.0000%" y="517" width="0.0315%" height="15" fill="rgb(240,144,17)" fg:x="2413" fg:w="1"/><text x="76.2500%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="77.3228%" y="501" width="0.0315%" height="15" fill="rgb(245,27,50)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="77.3228%" y="485" width="0.0315%" height="15" fill="rgb(251,51,7)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="495.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="77.3228%" y="469" width="0.0315%" height="15" fill="rgb(245,217,29)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="479.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="77.3228%" y="453" width="0.0315%" height="15" fill="rgb(221,176,29)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="463.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="77.3228%" y="437" width="0.0315%" height="15" fill="rgb(212,180,24)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="447.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="77.3228%" y="421" width="0.0315%" height="15" fill="rgb(254,24,2)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="431.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="77.3228%" y="405" width="0.0315%" height="15" fill="rgb(230,100,2)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="415.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="77.3228%" y="389" width="0.0315%" height="15" fill="rgb(219,142,25)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="399.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="77.3228%" y="373" width="0.0315%" height="15" fill="rgb(240,73,43)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="383.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="77.3228%" y="357" width="0.0315%" height="15" fill="rgb(214,114,15)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="367.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="77.3228%" y="341" width="0.0315%" height="15" fill="rgb(207,130,4)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="351.50"></text></g><g><title>cpufreq_this_cpu_can_update (1 samples, 0.03%)</title><rect x="77.3228%" y="325" width="0.0315%" height="15" fill="rgb(221,25,40)" fg:x="2455" fg:w="1"/><text x="77.5728%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="77.3543%" y="501" width="0.0315%" height="15" fill="rgb(241,184,7)" fg:x="2456" fg:w="1"/><text x="77.6043%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (143 samples, 4.50%)</title><rect x="76.0315%" y="517" width="4.5039%" height="15" fill="rgb(235,159,4)" fg:x="2414" fg:w="143"/><text x="76.2815%" y="527.50">alloc..</text></g><g><title>core::ptr::write (100 samples, 3.15%)</title><rect x="77.3858%" y="501" width="3.1496%" height="15" fill="rgb(214,87,48)" fg:x="2457" fg:w="100"/><text x="77.6358%" y="511.50">cor..</text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="80.5039%" y="485" width="0.0315%" height="15" fill="rgb(246,198,24)" fg:x="2556" fg:w="1"/><text x="80.7539%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.06%)</title><rect x="80.5354%" y="517" width="0.0630%" height="15" fill="rgb(209,66,40)" fg:x="2557" fg:w="2"/><text x="80.7854%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.5984%" y="517" width="0.0315%" height="15" fill="rgb(233,147,39)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.5984%" y="501" width="0.0315%" height="15" fill="rgb(231,145,52)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.5984%" y="485" width="0.0315%" height="15" fill="rgb(206,20,26)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="80.5984%" y="469" width="0.0315%" height="15" fill="rgb(238,220,4)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="80.5984%" y="453" width="0.0315%" height="15" fill="rgb(252,195,42)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="80.5984%" y="437" width="0.0315%" height="15" fill="rgb(209,10,6)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="447.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="80.5984%" y="421" width="0.0315%" height="15" fill="rgb(229,3,52)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="431.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="80.5984%" y="405" width="0.0315%" height="15" fill="rgb(253,49,37)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="415.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="80.5984%" y="389" width="0.0315%" height="15" fill="rgb(240,103,49)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="399.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="80.5984%" y="373" width="0.0315%" height="15" fill="rgb(250,182,30)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="383.50"></text></g><g><title>timekeeping_update (1 samples, 0.03%)</title><rect x="80.5984%" y="357" width="0.0315%" height="15" fill="rgb(248,8,30)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="367.50"></text></g><g><title>pvclock_gtod_notify (1 samples, 0.03%)</title><rect x="80.5984%" y="341" width="0.0315%" height="15" fill="rgb(237,120,30)" fg:x="2559" fg:w="1"/><text x="80.8484%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.06%)</title><rect x="80.6299%" y="517" width="0.0630%" height="15" fill="rgb(221,146,34)" fg:x="2560" fg:w="2"/><text x="80.8799%" y="527.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (2 samples, 0.06%)</title><rect x="80.6299%" y="501" width="0.0630%" height="15" fill="rgb(242,55,13)" fg:x="2560" fg:w="2"/><text x="80.8799%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (30 samples, 0.94%)</title><rect x="80.6929%" y="517" width="0.9449%" height="15" fill="rgb(242,112,31)" fg:x="2562" fg:w="30"/><text x="80.9429%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.6063%" y="501" width="0.0315%" height="15" fill="rgb(249,192,27)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.6063%" y="485" width="0.0315%" height="15" fill="rgb(208,204,44)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="495.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.6063%" y="469" width="0.0315%" height="15" fill="rgb(208,93,54)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="479.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="81.6063%" y="453" width="0.0315%" height="15" fill="rgb(242,1,31)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="463.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="81.6063%" y="437" width="0.0315%" height="15" fill="rgb(241,83,25)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="447.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="81.6063%" y="421" width="0.0315%" height="15" fill="rgb(205,169,50)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="431.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="81.6063%" y="405" width="0.0315%" height="15" fill="rgb(239,186,37)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="415.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="81.6063%" y="389" width="0.0315%" height="15" fill="rgb(205,221,10)" fg:x="2591" fg:w="1"/><text x="81.8563%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (33 samples, 1.04%)</title><rect x="81.6378%" y="517" width="1.0394%" height="15" fill="rgb(218,196,15)" fg:x="2592" fg:w="33"/><text x="81.8878%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (33 samples, 1.04%)</title><rect x="81.6378%" y="501" width="1.0394%" height="15" fill="rgb(218,196,35)" fg:x="2592" fg:w="33"/><text x="81.8878%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (33 samples, 1.04%)</title><rect x="81.6378%" y="485" width="1.0394%" height="15" fill="rgb(233,63,24)" fg:x="2592" fg:w="33"/><text x="81.8878%" y="495.50"></text></g><g><title>core::intrinsics::copy (27 samples, 0.85%)</title><rect x="82.7402%" y="485" width="0.8504%" height="15" fill="rgb(225,8,4)" fg:x="2627" fg:w="27"/><text x="82.9902%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (44 samples, 1.39%)</title><rect x="82.6772%" y="517" width="1.3858%" height="15" fill="rgb(234,105,35)" fg:x="2625" fg:w="44"/><text x="82.9272%" y="527.50"></text></g><g><title>core::ptr::swap (42 samples, 1.32%)</title><rect x="82.7402%" y="501" width="1.3228%" height="15" fill="rgb(236,21,32)" fg:x="2627" fg:w="42"/><text x="82.9902%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.47%)</title><rect x="83.5906%" y="485" width="0.4724%" height="15" fill="rgb(228,109,6)" fg:x="2654" fg:w="15"/><text x="83.8406%" y="495.50"></text></g><g><title>log::__private_api::log (1 samples, 0.03%)</title><rect x="84.0630%" y="517" width="0.0315%" height="15" fill="rgb(229,215,31)" fg:x="2669" fg:w="1"/><text x="84.3130%" y="527.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (1 samples, 0.03%)</title><rect x="84.0630%" y="501" width="0.0315%" height="15" fill="rgb(221,52,54)" fg:x="2669" fg:w="1"/><text x="84.3130%" y="511.50"></text></g><g><title>log::max_level (138 samples, 4.35%)</title><rect x="84.0945%" y="517" width="4.3465%" height="15" fill="rgb(252,129,43)" fg:x="2670" fg:w="138"/><text x="84.3445%" y="527.50">log::..</text></g><g><title>core::sync::atomic::AtomicUsize::load (138 samples, 4.35%)</title><rect x="84.0945%" y="501" width="4.3465%" height="15" fill="rgb(248,183,27)" fg:x="2670" fg:w="138"/><text x="84.3445%" y="511.50">core:..</text></g><g><title>core::sync::atomic::atomic_load (138 samples, 4.35%)</title><rect x="84.0945%" y="485" width="4.3465%" height="15" fill="rgb(250,0,22)" fg:x="2670" fg:w="138"/><text x="84.3445%" y="495.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.06%)</title><rect x="88.7559%" y="485" width="0.0630%" height="15" fill="rgb(213,166,10)" fg:x="2818" fg:w="2"/><text x="89.0059%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="88.7874%" y="469" width="0.0315%" height="15" fill="rgb(207,163,36)" fg:x="2819" fg:w="1"/><text x="89.0374%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="88.7874%" y="453" width="0.0315%" height="15" fill="rgb(208,122,22)" fg:x="2819" fg:w="1"/><text x="89.0374%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="88.7559%" y="501" width="0.0945%" height="15" fill="rgb(207,104,49)" fg:x="2818" fg:w="3"/><text x="89.0059%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.8189%" y="485" width="0.0315%" height="15" fill="rgb(248,211,50)" fg:x="2820" fg:w="1"/><text x="89.0689%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.8189%" y="469" width="0.0315%" height="15" fill="rgb(217,13,45)" fg:x="2820" fg:w="1"/><text x="89.0689%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (3 samples, 0.09%)</title><rect x="88.8504%" y="501" width="0.0945%" height="15" fill="rgb(211,216,49)" fg:x="2821" fg:w="3"/><text x="89.1004%" y="511.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (3 samples, 0.09%)</title><rect x="88.8504%" y="485" width="0.0945%" height="15" fill="rgb(221,58,53)" fg:x="2821" fg:w="3"/><text x="89.1004%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.09%)</title><rect x="88.8504%" y="469" width="0.0945%" height="15" fill="rgb(220,112,41)" fg:x="2821" fg:w="3"/><text x="89.1004%" y="479.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (2 samples, 0.06%)</title><rect x="88.9449%" y="501" width="0.0630%" height="15" fill="rgb(236,38,28)" fg:x="2824" fg:w="2"/><text x="89.1949%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="88.9449%" y="485" width="0.0630%" height="15" fill="rgb(227,195,22)" fg:x="2824" fg:w="2"/><text x="89.1949%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.06%)</title><rect x="88.9449%" y="469" width="0.0630%" height="15" fill="rgb(214,55,33)" fg:x="2824" fg:w="2"/><text x="89.1949%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="88.9449%" y="453" width="0.0630%" height="15" fill="rgb(248,80,13)" fg:x="2824" fg:w="2"/><text x="89.1949%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (20 samples, 0.63%)</title><rect x="88.4409%" y="517" width="0.6299%" height="15" fill="rgb(238,52,6)" fg:x="2808" fg:w="20"/><text x="88.6909%" y="527.50"></text></g><g><title>project1::solver::types::Lit::var_idx (2 samples, 0.06%)</title><rect x="89.0079%" y="501" width="0.0630%" height="15" fill="rgb(224,198,47)" fg:x="2826" fg:w="2"/><text x="89.2579%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.06%)</title><rect x="89.0079%" y="485" width="0.0630%" height="15" fill="rgb(233,171,20)" fg:x="2826" fg:w="2"/><text x="89.2579%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="89.0709%" y="485" width="0.0945%" height="15" fill="rgb(241,30,25)" fg:x="2828" fg:w="3"/><text x="89.3209%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="89.1339%" y="469" width="0.0315%" height="15" fill="rgb(207,171,38)" fg:x="2830" fg:w="1"/><text x="89.3839%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="89.1339%" y="453" width="0.0315%" height="15" fill="rgb(234,70,1)" fg:x="2830" fg:w="1"/><text x="89.3839%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24 samples, 0.76%)</title><rect x="89.0709%" y="501" width="0.7559%" height="15" fill="rgb(232,178,18)" fg:x="2828" fg:w="24"/><text x="89.3209%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.66%)</title><rect x="89.1654%" y="485" width="0.6614%" height="15" fill="rgb(241,78,40)" fg:x="2831" fg:w="21"/><text x="89.4154%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.66%)</title><rect x="89.1654%" y="469" width="0.6614%" height="15" fill="rgb(222,35,25)" fg:x="2831" fg:w="21"/><text x="89.4154%" y="479.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (108 samples, 3.40%)</title><rect x="89.8268%" y="485" width="3.4016%" height="15" fill="rgb(207,92,16)" fg:x="2852" fg:w="108"/><text x="90.0768%" y="495.50">&lt;pr..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (171 samples, 5.39%)</title><rect x="89.8268%" y="501" width="5.3858%" height="15" fill="rgb(216,59,51)" fg:x="2852" fg:w="171"/><text x="90.0768%" y="511.50">&lt;projec..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (63 samples, 1.98%)</title><rect x="93.2283%" y="485" width="1.9843%" height="15" fill="rgb(213,80,28)" fg:x="2960" fg:w="63"/><text x="93.4783%" y="495.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (8 samples, 0.25%)</title><rect x="95.2126%" y="501" width="0.2520%" height="15" fill="rgb(220,93,7)" fg:x="3023" fg:w="8"/><text x="95.4626%" y="511.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (60 samples, 1.89%)</title><rect x="95.4646%" y="485" width="1.8898%" height="15" fill="rgb(225,24,44)" fg:x="3031" fg:w="60"/><text x="95.7146%" y="495.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (267 samples, 8.41%)</title><rect x="89.0709%" y="517" width="8.4094%" height="15" fill="rgb(243,74,40)" fg:x="2828" fg:w="267"/><text x="89.3209%" y="527.50">project1::so..</text></g><g><title>project1::solver::types::Lit::var_idx (64 samples, 2.02%)</title><rect x="95.4646%" y="501" width="2.0157%" height="15" fill="rgb(228,39,7)" fg:x="3031" fg:w="64"/><text x="95.7146%" y="511.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (4 samples, 0.13%)</title><rect x="97.3543%" y="485" width="0.1260%" height="15" fill="rgb(227,79,8)" fg:x="3091" fg:w="4"/><text x="97.6043%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.19%)</title><rect x="97.4803%" y="485" width="0.1890%" height="15" fill="rgb(236,58,11)" fg:x="3095" fg:w="6"/><text x="97.7303%" y="495.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (24 samples, 0.76%)</title><rect x="97.4803%" y="517" width="0.7559%" height="15" fill="rgb(249,63,35)" fg:x="3095" fg:w="24"/><text x="97.7303%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (24 samples, 0.76%)</title><rect x="97.4803%" y="501" width="0.7559%" height="15" fill="rgb(252,114,16)" fg:x="3095" fg:w="24"/><text x="97.7303%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.57%)</title><rect x="97.6693%" y="485" width="0.5669%" height="15" fill="rgb(254,151,24)" fg:x="3101" fg:w="18"/><text x="97.9193%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.57%)</title><rect x="97.6693%" y="469" width="0.5669%" height="15" fill="rgb(253,54,39)" fg:x="3101" fg:w="18"/><text x="97.9193%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="98.2677%" y="501" width="0.0315%" height="15" fill="rgb(243,25,45)" fg:x="3120" fg:w="1"/><text x="98.5177%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="98.2677%" y="485" width="0.0315%" height="15" fill="rgb(234,134,9)" fg:x="3120" fg:w="1"/><text x="98.5177%" y="495.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (7 samples, 0.22%)</title><rect x="98.2362%" y="517" width="0.2205%" height="15" fill="rgb(227,166,31)" fg:x="3119" fg:w="7"/><text x="98.4862%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (5 samples, 0.16%)</title><rect x="98.2992%" y="501" width="0.1575%" height="15" fill="rgb(245,143,41)" fg:x="3121" fg:w="5"/><text x="98.5492%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (5 samples, 0.16%)</title><rect x="98.2992%" y="485" width="0.1575%" height="15" fill="rgb(238,181,32)" fg:x="3121" fg:w="5"/><text x="98.5492%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.16%)</title><rect x="98.2992%" y="469" width="0.1575%" height="15" fill="rgb(224,113,18)" fg:x="3121" fg:w="5"/><text x="98.5492%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.13%)</title><rect x="98.3307%" y="453" width="0.1260%" height="15" fill="rgb(240,229,28)" fg:x="3122" fg:w="4"/><text x="98.5807%" y="463.50"></text></g><g><title>core::ptr::read (5 samples, 0.16%)</title><rect x="98.4567%" y="469" width="0.1575%" height="15" fill="rgb(250,185,3)" fg:x="3126" fg:w="5"/><text x="98.7067%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (6 samples, 0.19%)</title><rect x="98.4567%" y="517" width="0.1890%" height="15" fill="rgb(212,59,25)" fg:x="3126" fg:w="6"/><text x="98.7067%" y="527.50"></text></g><g><title>core::mem::take (6 samples, 0.19%)</title><rect x="98.4567%" y="501" width="0.1890%" height="15" fill="rgb(221,87,20)" fg:x="3126" fg:w="6"/><text x="98.7067%" y="511.50"></text></g><g><title>core::mem::replace (6 samples, 0.19%)</title><rect x="98.4567%" y="485" width="0.1890%" height="15" fill="rgb(213,74,28)" fg:x="3126" fg:w="6"/><text x="98.7067%" y="495.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="98.6142%" y="469" width="0.0315%" height="15" fill="rgb(224,132,34)" fg:x="3131" fg:w="1"/><text x="98.8642%" y="479.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (10 samples, 0.31%)</title><rect x="98.6457%" y="517" width="0.3150%" height="15" fill="rgb(222,101,24)" fg:x="3132" fg:w="10"/><text x="98.8957%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2,164 samples, 68.16%)</title><rect x="30.8346%" y="549" width="68.1575%" height="15" fill="rgb(254,142,4)" fg:x="979" fg:w="2164"/><text x="31.0846%" y="559.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (1,914 samples, 60.28%)</title><rect x="38.7087%" y="533" width="60.2835%" height="15" fill="rgb(230,229,49)" fg:x="1229" fg:w="1914"/><text x="38.9587%" y="543.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="98.9606%" y="517" width="0.0315%" height="15" fill="rgb(238,70,47)" fg:x="3142" fg:w="1"/><text x="99.2106%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::simplify (1 samples, 0.03%)</title><rect x="98.9921%" y="549" width="0.0315%" height="15" fill="rgb(231,160,17)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_learnts (1 samples, 0.03%)</title><rect x="98.9921%" y="533" width="0.0315%" height="15" fill="rgb(218,68,53)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_clause (1 samples, 0.03%)</title><rect x="98.9921%" y="517" width="0.0315%" height="15" fill="rgb(236,111,10)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="527.50"></text></g><g><title>project1::solver::watch_list::WatchList::remove_watcher (1 samples, 0.03%)</title><rect x="98.9921%" y="501" width="0.0315%" height="15" fill="rgb(224,34,41)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="511.50"></text></g><g><title>project1::solver::util::remove (1 samples, 0.03%)</title><rect x="98.9921%" y="485" width="0.0315%" height="15" fill="rgb(241,118,19)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="98.9921%" y="469" width="0.0315%" height="15" fill="rgb(238,129,25)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="479.50"></text></g><g><title>project1::solver::util::remove::{{closure}} (1 samples, 0.03%)</title><rect x="98.9921%" y="453" width="0.0315%" height="15" fill="rgb(238,22,31)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="463.50"></text></g><g><title>&lt;project1::solver::watch_list::Watcher as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="98.9921%" y="437" width="0.0315%" height="15" fill="rgb(222,174,48)" fg:x="3143" fg:w="1"/><text x="99.2421%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (11 samples, 0.35%)</title><rect x="99.0236%" y="549" width="0.3465%" height="15" fill="rgb(206,152,40)" fg:x="3144" fg:w="11"/><text x="99.2736%" y="559.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (3,127 samples, 98.49%)</title><rect x="0.9134%" y="565" width="98.4882%" height="15" fill="rgb(218,99,54)" fg:x="29" fg:w="3127"/><text x="1.1634%" y="575.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>project1::solver::clause::Clause::bump_activity (1 samples, 0.03%)</title><rect x="99.3701%" y="549" width="0.0315%" height="15" fill="rgb(220,174,26)" fg:x="3155" fg:w="1"/><text x="99.6201%" y="559.50"></text></g><g><title>std::panic::catch_unwind (3,130 samples, 98.58%)</title><rect x="0.8819%" y="693" width="98.5827%" height="15" fill="rgb(245,116,9)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,130 samples, 98.58%)</title><rect x="0.8819%" y="677" width="98.5827%" height="15" fill="rgb(209,72,35)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,130 samples, 98.58%)</title><rect x="0.8819%" y="661" width="98.5827%" height="15" fill="rgb(226,126,21)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,130 samples, 98.58%)</title><rect x="0.8819%" y="645" width="98.5827%" height="15" fill="rgb(227,192,1)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,130 samples, 98.58%)</title><rect x="0.8819%" y="629" width="98.5827%" height="15" fill="rgb(237,180,29)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,130 samples, 98.58%)</title><rect x="0.8819%" y="613" width="98.5827%" height="15" fill="rgb(230,197,35)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (3,130 samples, 98.58%)</title><rect x="0.8819%" y="597" width="98.5827%" height="15" fill="rgb(246,193,31)" fg:x="28" fg:w="3130"/><text x="1.1319%" y="607.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3,129 samples, 98.55%)</title><rect x="0.9134%" y="581" width="98.5512%" height="15" fill="rgb(241,36,4)" fg:x="29" fg:w="3129"/><text x="1.1634%" y="591.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.06%)</title><rect x="99.4016%" y="565" width="0.0630%" height="15" fill="rgb(241,130,17)" fg:x="3156" fg:w="2"/><text x="99.6516%" y="575.50"></text></g><g><title>__clone3 (3,131 samples, 98.61%)</title><rect x="0.8819%" y="805" width="98.6142%" height="15" fill="rgb(206,137,32)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="815.50">__clone3</text></g><g><title>start_thread (3,131 samples, 98.61%)</title><rect x="0.8819%" y="789" width="98.6142%" height="15" fill="rgb(237,228,51)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="799.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,131 samples, 98.61%)</title><rect x="0.8819%" y="773" width="98.6142%" height="15" fill="rgb(243,6,42)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="783.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,131 samples, 98.61%)</title><rect x="0.8819%" y="757" width="98.6142%" height="15" fill="rgb(251,74,28)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="767.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,131 samples, 98.61%)</title><rect x="0.8819%" y="741" width="98.6142%" height="15" fill="rgb(218,20,49)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,131 samples, 98.61%)</title><rect x="0.8819%" y="725" width="98.6142%" height="15" fill="rgb(238,28,14)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="735.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,131 samples, 98.61%)</title><rect x="0.8819%" y="709" width="98.6142%" height="15" fill="rgb(229,40,46)" fg:x="28" fg:w="3131"/><text x="1.1319%" y="719.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.03%)</title><rect x="99.4646%" y="693" width="0.0315%" height="15" fill="rgb(244,195,20)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="703.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.4646%" y="677" width="0.0315%" height="15" fill="rgb(253,56,35)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.4646%" y="661" width="0.0315%" height="15" fill="rgb(210,149,44)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="671.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.4646%" y="645" width="0.0315%" height="15" fill="rgb(240,135,12)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="655.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.4646%" y="629" width="0.0315%" height="15" fill="rgb(251,24,50)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="639.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.4646%" y="613" width="0.0315%" height="15" fill="rgb(243,200,47)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="623.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.4646%" y="597" width="0.0315%" height="15" fill="rgb(224,166,26)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="607.50"></text></g><g><title>_int_new_arena (1 samples, 0.03%)</title><rect x="99.4646%" y="581" width="0.0315%" height="15" fill="rgb(233,0,47)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="591.50"></text></g><g><title>new_heap (1 samples, 0.03%)</title><rect x="99.4646%" y="565" width="0.0315%" height="15" fill="rgb(253,80,5)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="575.50"></text></g><g><title>alloc_new_heap (1 samples, 0.03%)</title><rect x="99.4646%" y="549" width="0.0315%" height="15" fill="rgb(214,133,25)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="559.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.03%)</title><rect x="99.4646%" y="533" width="0.0315%" height="15" fill="rgb(209,27,14)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="543.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.03%)</title><rect x="99.4646%" y="517" width="0.0315%" height="15" fill="rgb(219,102,51)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.4646%" y="501" width="0.0315%" height="15" fill="rgb(237,18,16)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.4646%" y="485" width="0.0315%" height="15" fill="rgb(241,85,17)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="495.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.03%)</title><rect x="99.4646%" y="469" width="0.0315%" height="15" fill="rgb(236,90,42)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="479.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.03%)</title><rect x="99.4646%" y="453" width="0.0315%" height="15" fill="rgb(249,57,21)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="463.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.03%)</title><rect x="99.4646%" y="437" width="0.0315%" height="15" fill="rgb(243,12,36)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="447.50"></text></g><g><title>do_mmap (1 samples, 0.03%)</title><rect x="99.4646%" y="421" width="0.0315%" height="15" fill="rgb(253,128,47)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="431.50"></text></g><g><title>mmap_region (1 samples, 0.03%)</title><rect x="99.4646%" y="405" width="0.0315%" height="15" fill="rgb(207,33,20)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="415.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="99.4646%" y="389" width="0.0315%" height="15" fill="rgb(233,215,35)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="399.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="99.4646%" y="373" width="0.0315%" height="15" fill="rgb(249,188,52)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="383.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="99.4646%" y="357" width="0.0315%" height="15" fill="rgb(225,12,32)" fg:x="3158" fg:w="1"/><text x="99.7146%" y="367.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="99.4961%" y="805" width="0.0315%" height="15" fill="rgb(247,98,14)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="815.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.4961%" y="789" width="0.0315%" height="15" fill="rgb(247,219,48)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="799.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.4961%" y="773" width="0.0315%" height="15" fill="rgb(253,60,48)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="783.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.4961%" y="757" width="0.0315%" height="15" fill="rgb(245,15,52)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="767.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.4961%" y="741" width="0.0315%" height="15" fill="rgb(220,133,28)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="751.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.4961%" y="725" width="0.0315%" height="15" fill="rgb(217,180,4)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="735.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.4961%" y="709" width="0.0315%" height="15" fill="rgb(251,24,1)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="719.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.4961%" y="693" width="0.0315%" height="15" fill="rgb(212,185,49)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="703.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.4961%" y="677" width="0.0315%" height="15" fill="rgb(215,175,22)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="687.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.03%)</title><rect x="99.4961%" y="661" width="0.0315%" height="15" fill="rgb(250,205,14)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="671.50"></text></g><g><title>_dl_map_segments (1 samples, 0.03%)</title><rect x="99.4961%" y="645" width="0.0315%" height="15" fill="rgb(225,211,22)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="655.50"></text></g><g><title>__mmap64 (1 samples, 0.03%)</title><rect x="99.4961%" y="629" width="0.0315%" height="15" fill="rgb(251,179,42)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="639.50"></text></g><g><title>__mmap64 (1 samples, 0.03%)</title><rect x="99.4961%" y="613" width="0.0315%" height="15" fill="rgb(208,216,51)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.4961%" y="597" width="0.0315%" height="15" fill="rgb(235,36,11)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.4961%" y="581" width="0.0315%" height="15" fill="rgb(213,189,28)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="591.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.03%)</title><rect x="99.4961%" y="565" width="0.0315%" height="15" fill="rgb(227,203,42)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="575.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.03%)</title><rect x="99.4961%" y="549" width="0.0315%" height="15" fill="rgb(244,72,36)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="559.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.03%)</title><rect x="99.4961%" y="533" width="0.0315%" height="15" fill="rgb(213,53,17)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="543.50"></text></g><g><title>do_mmap (1 samples, 0.03%)</title><rect x="99.4961%" y="517" width="0.0315%" height="15" fill="rgb(207,167,3)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="527.50"></text></g><g><title>mmap_region (1 samples, 0.03%)</title><rect x="99.4961%" y="501" width="0.0315%" height="15" fill="rgb(216,98,30)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="511.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="99.4961%" y="485" width="0.0315%" height="15" fill="rgb(236,123,15)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="495.50"></text></g><g><title>__perf_addr_filters_adjust (1 samples, 0.03%)</title><rect x="99.4961%" y="469" width="0.0315%" height="15" fill="rgb(248,81,50)" fg:x="3159" fg:w="1"/><text x="99.7461%" y="479.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.09%)</title><rect x="99.5276%" y="805" width="0.0945%" height="15" fill="rgb(214,120,4)" fg:x="3160" fg:w="3"/><text x="99.7776%" y="815.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="99.6220%" y="805" width="0.0315%" height="15" fill="rgb(208,179,34)" fg:x="3163" fg:w="1"/><text x="99.8720%" y="815.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.6535%" y="773" width="0.0315%" height="15" fill="rgb(227,140,7)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="783.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.6535%" y="757" width="0.0315%" height="15" fill="rgb(214,22,6)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="767.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.6535%" y="741" width="0.0315%" height="15" fill="rgb(207,137,27)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="751.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="99.6535%" y="725" width="0.0315%" height="15" fill="rgb(210,8,46)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="735.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="99.6535%" y="709" width="0.0315%" height="15" fill="rgb(240,16,54)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="719.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="99.6535%" y="693" width="0.0315%" height="15" fill="rgb(211,209,29)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="703.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.6535%" y="677" width="0.0315%" height="15" fill="rgb(226,228,24)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="687.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="99.6535%" y="661" width="0.0315%" height="15" fill="rgb(222,84,9)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="671.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="99.6535%" y="645" width="0.0315%" height="15" fill="rgb(234,203,30)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="655.50"></text></g><g><title>move_page_tables.part.0 (1 samples, 0.03%)</title><rect x="99.6535%" y="629" width="0.0315%" height="15" fill="rgb(238,109,14)" fg:x="3164" fg:w="1"/><text x="99.9035%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.09%)</title><rect x="99.6535%" y="805" width="0.0945%" height="15" fill="rgb(233,206,34)" fg:x="3164" fg:w="3"/><text x="99.9035%" y="815.50"></text></g><g><title>do_syscall_64 (3 samples, 0.09%)</title><rect x="99.6535%" y="789" width="0.0945%" height="15" fill="rgb(220,167,47)" fg:x="3164" fg:w="3"/><text x="99.9035%" y="799.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.06%)</title><rect x="99.6850%" y="773" width="0.0630%" height="15" fill="rgb(238,105,10)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="783.50"></text></g><g><title>do_group_exit (2 samples, 0.06%)</title><rect x="99.6850%" y="757" width="0.0630%" height="15" fill="rgb(213,227,17)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="767.50"></text></g><g><title>do_exit (2 samples, 0.06%)</title><rect x="99.6850%" y="741" width="0.0630%" height="15" fill="rgb(217,132,38)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="751.50"></text></g><g><title>exit_mm (2 samples, 0.06%)</title><rect x="99.6850%" y="725" width="0.0630%" height="15" fill="rgb(242,146,4)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="735.50"></text></g><g><title>mmput (2 samples, 0.06%)</title><rect x="99.6850%" y="709" width="0.0630%" height="15" fill="rgb(212,61,9)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="719.50"></text></g><g><title>exit_mmap (2 samples, 0.06%)</title><rect x="99.6850%" y="693" width="0.0630%" height="15" fill="rgb(247,126,22)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="703.50"></text></g><g><title>unmap_vmas (2 samples, 0.06%)</title><rect x="99.6850%" y="677" width="0.0630%" height="15" fill="rgb(220,196,2)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="687.50"></text></g><g><title>unmap_single_vma (2 samples, 0.06%)</title><rect x="99.6850%" y="661" width="0.0630%" height="15" fill="rgb(208,46,4)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="671.50"></text></g><g><title>unmap_page_range (2 samples, 0.06%)</title><rect x="99.6850%" y="645" width="0.0630%" height="15" fill="rgb(252,104,46)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="655.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.06%)</title><rect x="99.6850%" y="629" width="0.0630%" height="15" fill="rgb(237,152,48)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="639.50"></text></g><g><title>zap_pte_range (2 samples, 0.06%)</title><rect x="99.6850%" y="613" width="0.0630%" height="15" fill="rgb(221,59,37)" fg:x="3165" fg:w="2"/><text x="99.9350%" y="623.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.03%)</title><rect x="99.7165%" y="597" width="0.0315%" height="15" fill="rgb(209,202,51)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="607.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="99.7165%" y="581" width="0.0315%" height="15" fill="rgb(228,81,30)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="591.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.03%)</title><rect x="99.7165%" y="565" width="0.0315%" height="15" fill="rgb(227,42,39)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="575.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="99.7165%" y="549" width="0.0315%" height="15" fill="rgb(221,26,2)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="559.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="99.7165%" y="533" width="0.0315%" height="15" fill="rgb(254,61,31)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="543.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.03%)</title><rect x="99.7165%" y="517" width="0.0315%" height="15" fill="rgb(222,173,38)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="527.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.03%)</title><rect x="99.7165%" y="501" width="0.0315%" height="15" fill="rgb(218,50,12)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="511.50"></text></g><g><title>__free_one_page (1 samples, 0.03%)</title><rect x="99.7165%" y="485" width="0.0315%" height="15" fill="rgb(223,88,40)" fg:x="3166" fg:w="1"/><text x="99.9665%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="99.7480%" y="805" width="0.0315%" height="15" fill="rgb(237,54,19)" fg:x="3167" fg:w="1"/><text x="99.9980%" y="815.50"></text></g><g><title>calculate_sigpending (1 samples, 0.03%)</title><rect x="99.7795%" y="773" width="0.0315%" height="15" fill="rgb(251,129,25)" fg:x="3168" fg:w="1"/><text x="100.0295%" y="783.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.03%)</title><rect x="99.7795%" y="757" width="0.0315%" height="15" fill="rgb(238,97,19)" fg:x="3168" fg:w="1"/><text x="100.0295%" y="767.50"></text></g><g><title>all (3,175 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(240,169,18)" fg:x="0" fg:w="3175"/><text x="0.2500%" y="847.50"></text></g><g><title>project1 (3,169 samples, 99.81%)</title><rect x="0.1890%" y="821" width="99.8110%" height="15" fill="rgb(230,187,49)" fg:x="6" fg:w="3169"/><text x="0.4390%" y="831.50">project1</text></g><g><title>ret_from_fork (7 samples, 0.22%)</title><rect x="99.7795%" y="805" width="0.2205%" height="15" fill="rgb(209,44,26)" fg:x="3168" fg:w="7"/><text x="100.0295%" y="815.50"></text></g><g><title>schedule_tail (7 samples, 0.22%)</title><rect x="99.7795%" y="789" width="0.2205%" height="15" fill="rgb(244,0,6)" fg:x="3168" fg:w="7"/><text x="100.0295%" y="799.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.19%)</title><rect x="99.8110%" y="773" width="0.1890%" height="15" fill="rgb(248,18,21)" fg:x="3169" fg:w="6"/><text x="100.0610%" y="783.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.19%)</title><rect x="99.8110%" y="757" width="0.1890%" height="15" fill="rgb(245,180,19)" fg:x="3169" fg:w="6"/><text x="100.0610%" y="767.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.19%)</title><rect x="99.8110%" y="741" width="0.1890%" height="15" fill="rgb(252,118,36)" fg:x="3169" fg:w="6"/><text x="100.0610%" y="751.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.19%)</title><rect x="99.8110%" y="725" width="0.1890%" height="15" fill="rgb(210,224,19)" fg:x="3169" fg:w="6"/><text x="100.0610%" y="735.50"></text></g><g><title>native_write_msr (6 samples, 0.19%)</title><rect x="99.8110%" y="709" width="0.1890%" height="15" fill="rgb(218,30,24)" fg:x="3169" fg:w="6"/><text x="100.0610%" y="719.50"></text></g></svg></svg>