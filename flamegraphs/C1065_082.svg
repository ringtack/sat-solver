<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="3512"><g><title>perf_event_enable_on_exec (6 samples, 0.17%)</title><rect x="0.0000%" y="549" width="0.1708%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>ctx_resched (6 samples, 0.17%)</title><rect x="0.0000%" y="533" width="0.1708%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.17%)</title><rect x="0.0000%" y="517" width="0.1708%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.17%)</title><rect x="0.0000%" y="501" width="0.1708%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>native_write_msr (6 samples, 0.17%)</title><rect x="0.0000%" y="485" width="0.1708%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>perf-exec (7 samples, 0.20%)</title><rect x="0.0000%" y="741" width="0.1993%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.20%)</title><rect x="0.0000%" y="725" width="0.1993%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="735.50"></text></g><g><title>do_syscall_64 (7 samples, 0.20%)</title><rect x="0.0000%" y="709" width="0.1993%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="719.50"></text></g><g><title>__x64_sys_execve (7 samples, 0.20%)</title><rect x="0.0000%" y="693" width="0.1993%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="703.50"></text></g><g><title>do_execveat_common.isra.0 (7 samples, 0.20%)</title><rect x="0.0000%" y="677" width="0.1993%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="687.50"></text></g><g><title>bprm_execve (7 samples, 0.20%)</title><rect x="0.0000%" y="661" width="0.1993%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="671.50"></text></g><g><title>bprm_execve.part.0 (7 samples, 0.20%)</title><rect x="0.0000%" y="645" width="0.1993%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="655.50"></text></g><g><title>exec_binprm (7 samples, 0.20%)</title><rect x="0.0000%" y="629" width="0.1993%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="639.50"></text></g><g><title>search_binary_handler (7 samples, 0.20%)</title><rect x="0.0000%" y="613" width="0.1993%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="623.50"></text></g><g><title>load_elf_binary (7 samples, 0.20%)</title><rect x="0.0000%" y="597" width="0.1993%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="7"/><text x="0.2500%" y="607.50"></text></g><g><title>begin_new_exec (7 samples, 0.20%)</title><rect x="0.0000%" y="581" width="0.1993%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="7"/><text x="0.2500%" y="591.50"></text></g><g><title>perf_event_exec (7 samples, 0.20%)</title><rect x="0.0000%" y="565" width="0.1993%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="7"/><text x="0.2500%" y="575.50"></text></g><g><title>perf_lock_task_context (1 samples, 0.03%)</title><rect x="0.1708%" y="549" width="0.0285%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.4208%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.03%)</title><rect x="0.1993%" y="709" width="0.0285%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="0.4493%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1 samples, 0.03%)</title><rect x="0.1993%" y="693" width="0.0285%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.4493%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1 samples, 0.03%)</title><rect x="0.1993%" y="677" width="0.0285%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="0.4493%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (1 samples, 0.03%)</title><rect x="0.1993%" y="661" width="0.0285%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.4493%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (1 samples, 0.03%)</title><rect x="0.1993%" y="645" width="0.0285%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.4493%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="0.2278%" y="709" width="0.0285%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="0.4778%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="0.2563%" y="677" width="0.0285%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5063%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="0.2563%" y="661" width="0.0285%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="0.5063%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="0.2563%" y="709" width="0.0569%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="2"/><text x="0.5063%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.06%)</title><rect x="0.2563%" y="693" width="0.0569%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="2"/><text x="0.5063%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="0.2847%" y="677" width="0.0285%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="0.5347%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="0.3132%" y="709" width="0.0285%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="0.5632%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.03%)</title><rect x="0.3132%" y="693" width="0.0285%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="0.5632%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.03%)</title><rect x="0.3132%" y="677" width="0.0285%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="0.5632%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.03%)</title><rect x="0.3132%" y="661" width="0.0285%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="0.5632%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.03%)</title><rect x="0.3132%" y="645" width="0.0285%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="0.5632%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.03%)</title><rect x="0.3132%" y="629" width="0.0285%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="0.5632%" y="639.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.03%)</title><rect x="0.3132%" y="613" width="0.0285%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="0.5632%" y="623.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2 samples, 0.06%)</title><rect x="0.3417%" y="709" width="0.0569%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="2"/><text x="0.5917%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="0.3986%" y="709" width="0.0285%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="0.6486%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (1 samples, 0.03%)</title><rect x="0.3986%" y="693" width="0.0285%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="0.6486%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (1 samples, 0.03%)</title><rect x="0.3986%" y="677" width="0.0285%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="1"/><text x="0.6486%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="0.3986%" y="661" width="0.0285%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="1"/><text x="0.6486%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.3986%" y="645" width="0.0285%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="1"/><text x="0.6486%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="0.3986%" y="629" width="0.0285%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="0.6486%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1 samples, 0.03%)</title><rect x="0.4271%" y="709" width="0.0285%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="1"/><text x="0.6771%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.03%)</title><rect x="0.4556%" y="709" width="0.0285%" height="15" fill="rgb(222,207,29)" fg:x="16" fg:w="1"/><text x="0.7056%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (1 samples, 0.03%)</title><rect x="0.4841%" y="709" width="0.0285%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="1"/><text x="0.7341%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (1 samples, 0.03%)</title><rect x="0.5410%" y="661" width="0.0285%" height="15" fill="rgb(218,138,4)" fg:x="19" fg:w="1"/><text x="0.7910%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.5410%" y="645" width="0.0285%" height="15" fill="rgb(250,191,14)" fg:x="19" fg:w="1"/><text x="0.7910%" y="655.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (7 samples, 0.20%)</title><rect x="0.5410%" y="677" width="0.1993%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="7"/><text x="0.7910%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (6 samples, 0.17%)</title><rect x="0.5695%" y="661" width="0.1708%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="6"/><text x="0.8195%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.17%)</title><rect x="0.5695%" y="645" width="0.1708%" height="15" fill="rgb(225,35,8)" fg:x="20" fg:w="6"/><text x="0.8195%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.17%)</title><rect x="0.5695%" y="629" width="0.1708%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="6"/><text x="0.8195%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.17%)</title><rect x="0.5695%" y="613" width="0.1708%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="6"/><text x="0.8195%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.17%)</title><rect x="0.5695%" y="597" width="0.1708%" height="15" fill="rgb(231,138,38)" fg:x="20" fg:w="6"/><text x="0.8195%" y="607.50"></text></g><g><title>[anon] (20 samples, 0.57%)</title><rect x="0.1993%" y="725" width="0.5695%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="20"/><text x="0.4493%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (9 samples, 0.26%)</title><rect x="0.5125%" y="709" width="0.2563%" height="15" fill="rgb(251,118,11)" fg:x="18" fg:w="9"/><text x="0.7625%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (8 samples, 0.23%)</title><rect x="0.5410%" y="693" width="0.2278%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="8"/><text x="0.7910%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (1 samples, 0.03%)</title><rect x="0.7403%" y="677" width="0.0285%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="0.9903%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="0.7688%" y="709" width="0.0285%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="1"/><text x="1.0188%" y="719.50"></text></g><g><title>_int_free (2 samples, 0.06%)</title><rect x="0.7973%" y="709" width="0.0569%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="2"/><text x="1.0473%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.11%)</title><rect x="0.8542%" y="709" width="0.1139%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="4"/><text x="1.1042%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.09%)</title><rect x="0.8827%" y="693" width="0.0854%" height="15" fill="rgb(221,10,30)" fg:x="31" fg:w="3"/><text x="1.1327%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="0.8827%" y="677" width="0.0854%" height="15" fill="rgb(210,229,1)" fg:x="31" fg:w="3"/><text x="1.1327%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="0.8827%" y="661" width="0.0854%" height="15" fill="rgb(222,148,37)" fg:x="31" fg:w="3"/><text x="1.1327%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="0.9681%" y="709" width="0.0285%" height="15" fill="rgb(234,67,33)" fg:x="34" fg:w="1"/><text x="1.2181%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="0.9966%" y="709" width="0.0285%" height="15" fill="rgb(247,98,35)" fg:x="35" fg:w="1"/><text x="1.2466%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (3 samples, 0.09%)</title><rect x="1.0251%" y="709" width="0.0854%" height="15" fill="rgb(247,138,52)" fg:x="36" fg:w="3"/><text x="1.2751%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (4 samples, 0.11%)</title><rect x="1.1105%" y="709" width="0.1139%" height="15" fill="rgb(213,79,30)" fg:x="39" fg:w="4"/><text x="1.3605%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="1.1959%" y="693" width="0.0285%" height="15" fill="rgb(246,177,23)" fg:x="42" fg:w="1"/><text x="1.4459%" y="703.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.1959%" y="677" width="0.0285%" height="15" fill="rgb(230,62,27)" fg:x="42" fg:w="1"/><text x="1.4459%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="1.1959%" y="661" width="0.0285%" height="15" fill="rgb(216,154,8)" fg:x="42" fg:w="1"/><text x="1.4459%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.03%)</title><rect x="1.2813%" y="693" width="0.0285%" height="15" fill="rgb(244,35,45)" fg:x="45" fg:w="1"/><text x="1.5313%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.03%)</title><rect x="1.2813%" y="677" width="0.0285%" height="15" fill="rgb(251,115,12)" fg:x="45" fg:w="1"/><text x="1.5313%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.03%)</title><rect x="1.2813%" y="661" width="0.0285%" height="15" fill="rgb(240,54,50)" fg:x="45" fg:w="1"/><text x="1.5313%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="1.2813%" y="645" width="0.0285%" height="15" fill="rgb(233,84,52)" fg:x="45" fg:w="1"/><text x="1.5313%" y="655.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (4 samples, 0.11%)</title><rect x="1.2244%" y="709" width="0.1139%" height="15" fill="rgb(207,117,47)" fg:x="43" fg:w="4"/><text x="1.4744%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (1 samples, 0.03%)</title><rect x="1.3098%" y="693" width="0.0285%" height="15" fill="rgb(249,43,39)" fg:x="46" fg:w="1"/><text x="1.5598%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (1 samples, 0.03%)</title><rect x="1.3098%" y="677" width="0.0285%" height="15" fill="rgb(209,38,44)" fg:x="46" fg:w="1"/><text x="1.5598%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="1.3098%" y="661" width="0.0285%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="1"/><text x="1.5598%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.3098%" y="645" width="0.0285%" height="15" fill="rgb(242,79,21)" fg:x="46" fg:w="1"/><text x="1.5598%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="1.3098%" y="629" width="0.0285%" height="15" fill="rgb(211,96,35)" fg:x="46" fg:w="1"/><text x="1.5598%" y="639.50"></text></g><g><title>[unknown] (23 samples, 0.65%)</title><rect x="0.7688%" y="725" width="0.6549%" height="15" fill="rgb(253,215,40)" fg:x="27" fg:w="23"/><text x="1.0188%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (3 samples, 0.09%)</title><rect x="1.3383%" y="709" width="0.0854%" height="15" fill="rgb(211,81,21)" fg:x="47" fg:w="3"/><text x="1.5883%" y="719.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="1.4522%" y="469" width="0.0285%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="1"/><text x="1.7022%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (1 samples, 0.03%)</title><rect x="1.4522%" y="453" width="0.0285%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="1"/><text x="1.7022%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.03%)</title><rect x="1.4522%" y="437" width="0.0285%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="1"/><text x="1.7022%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (1 samples, 0.03%)</title><rect x="1.4522%" y="421" width="0.0285%" height="15" fill="rgb(244,218,35)" fg:x="51" fg:w="1"/><text x="1.7022%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1.4806%" y="469" width="0.0285%" height="15" fill="rgb(240,68,47)" fg:x="52" fg:w="1"/><text x="1.7306%" y="479.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1.4806%" y="453" width="0.0285%" height="15" fill="rgb(210,16,53)" fg:x="52" fg:w="1"/><text x="1.7306%" y="463.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="1.4806%" y="437" width="0.0285%" height="15" fill="rgb(235,124,12)" fg:x="52" fg:w="1"/><text x="1.7306%" y="447.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="1.4806%" y="421" width="0.0285%" height="15" fill="rgb(224,169,11)" fg:x="52" fg:w="1"/><text x="1.7306%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="1.4806%" y="405" width="0.0285%" height="15" fill="rgb(250,166,2)" fg:x="52" fg:w="1"/><text x="1.7306%" y="415.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.03%)</title><rect x="1.4806%" y="389" width="0.0285%" height="15" fill="rgb(242,216,29)" fg:x="52" fg:w="1"/><text x="1.7306%" y="399.50"></text></g><g><title>task_work_run (1 samples, 0.03%)</title><rect x="1.4806%" y="373" width="0.0285%" height="15" fill="rgb(230,116,27)" fg:x="52" fg:w="1"/><text x="1.7306%" y="383.50"></text></g><g><title>task_numa_work (1 samples, 0.03%)</title><rect x="1.4806%" y="357" width="0.0285%" height="15" fill="rgb(228,99,48)" fg:x="52" fg:w="1"/><text x="1.7306%" y="367.50"></text></g><g><title>change_prot_numa (1 samples, 0.03%)</title><rect x="1.4806%" y="341" width="0.0285%" height="15" fill="rgb(253,11,6)" fg:x="52" fg:w="1"/><text x="1.7306%" y="351.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="1.4806%" y="325" width="0.0285%" height="15" fill="rgb(247,143,39)" fg:x="52" fg:w="1"/><text x="1.7306%" y="335.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="1.4806%" y="309" width="0.0285%" height="15" fill="rgb(236,97,10)" fg:x="52" fg:w="1"/><text x="1.7306%" y="319.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="1.4806%" y="293" width="0.0285%" height="15" fill="rgb(233,208,19)" fg:x="52" fg:w="1"/><text x="1.7306%" y="303.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="1.4806%" y="277" width="0.0285%" height="15" fill="rgb(216,164,2)" fg:x="52" fg:w="1"/><text x="1.7306%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="1.5091%" y="469" width="0.0285%" height="15" fill="rgb(220,129,5)" fg:x="53" fg:w="1"/><text x="1.7591%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="1.5091%" y="453" width="0.0285%" height="15" fill="rgb(242,17,10)" fg:x="53" fg:w="1"/><text x="1.7591%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="1.5091%" y="437" width="0.0285%" height="15" fill="rgb(242,107,0)" fg:x="53" fg:w="1"/><text x="1.7591%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="1.5091%" y="421" width="0.0285%" height="15" fill="rgb(251,28,31)" fg:x="53" fg:w="1"/><text x="1.7591%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="1.5091%" y="405" width="0.0285%" height="15" fill="rgb(233,223,10)" fg:x="53" fg:w="1"/><text x="1.7591%" y="415.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="1.5091%" y="389" width="0.0285%" height="15" fill="rgb(215,21,27)" fg:x="53" fg:w="1"/><text x="1.7591%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="1.5091%" y="373" width="0.0285%" height="15" fill="rgb(232,23,21)" fg:x="53" fg:w="1"/><text x="1.7591%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="1.5091%" y="357" width="0.0285%" height="15" fill="rgb(244,5,23)" fg:x="53" fg:w="1"/><text x="1.7591%" y="367.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="1.5091%" y="341" width="0.0285%" height="15" fill="rgb(226,81,46)" fg:x="53" fg:w="1"/><text x="1.7591%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (4 samples, 0.11%)</title><rect x="1.5376%" y="469" width="0.1139%" height="15" fill="rgb(247,70,30)" fg:x="54" fg:w="4"/><text x="1.7876%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.06%)</title><rect x="2.9043%" y="357" width="0.0569%" height="15" fill="rgb(212,68,19)" fg:x="102" fg:w="2"/><text x="3.1543%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="2.9043%" y="341" width="0.0569%" height="15" fill="rgb(240,187,13)" fg:x="102" fg:w="2"/><text x="3.1543%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="2.9043%" y="325" width="0.0569%" height="15" fill="rgb(223,113,26)" fg:x="102" fg:w="2"/><text x="3.1543%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="2.9043%" y="309" width="0.0569%" height="15" fill="rgb(206,192,2)" fg:x="102" fg:w="2"/><text x="3.1543%" y="319.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="2.9043%" y="293" width="0.0569%" height="15" fill="rgb(241,108,4)" fg:x="102" fg:w="2"/><text x="3.1543%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="2.9043%" y="277" width="0.0569%" height="15" fill="rgb(247,173,49)" fg:x="102" fg:w="2"/><text x="3.1543%" y="287.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="2.9043%" y="261" width="0.0569%" height="15" fill="rgb(224,114,35)" fg:x="102" fg:w="2"/><text x="3.1543%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.09%)</title><rect x="2.9043%" y="453" width="0.0854%" height="15" fill="rgb(245,159,27)" fg:x="102" fg:w="3"/><text x="3.1543%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.09%)</title><rect x="2.9043%" y="437" width="0.0854%" height="15" fill="rgb(245,172,44)" fg:x="102" fg:w="3"/><text x="3.1543%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.09%)</title><rect x="2.9043%" y="421" width="0.0854%" height="15" fill="rgb(236,23,11)" fg:x="102" fg:w="3"/><text x="3.1543%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.09%)</title><rect x="2.9043%" y="405" width="0.0854%" height="15" fill="rgb(205,117,38)" fg:x="102" fg:w="3"/><text x="3.1543%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="2.9043%" y="389" width="0.0854%" height="15" fill="rgb(237,72,25)" fg:x="102" fg:w="3"/><text x="3.1543%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="2.9043%" y="373" width="0.0854%" height="15" fill="rgb(244,70,9)" fg:x="102" fg:w="3"/><text x="3.1543%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (1 samples, 0.03%)</title><rect x="2.9613%" y="357" width="0.0285%" height="15" fill="rgb(217,125,39)" fg:x="104" fg:w="1"/><text x="3.2113%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="2.9897%" y="453" width="0.0285%" height="15" fill="rgb(235,36,10)" fg:x="105" fg:w="1"/><text x="3.2397%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="2.9897%" y="437" width="0.0285%" height="15" fill="rgb(251,123,47)" fg:x="105" fg:w="1"/><text x="3.2397%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="2.9897%" y="421" width="0.0285%" height="15" fill="rgb(221,13,13)" fg:x="105" fg:w="1"/><text x="3.2397%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="3.0182%" y="453" width="0.0854%" height="15" fill="rgb(238,131,9)" fg:x="106" fg:w="3"/><text x="3.2682%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="3.0182%" y="437" width="0.0854%" height="15" fill="rgb(211,50,8)" fg:x="106" fg:w="3"/><text x="3.2682%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="3.0752%" y="421" width="0.0285%" height="15" fill="rgb(245,182,24)" fg:x="108" fg:w="1"/><text x="3.3252%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="3.0752%" y="405" width="0.0285%" height="15" fill="rgb(242,14,37)" fg:x="108" fg:w="1"/><text x="3.3252%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="3.1036%" y="437" width="0.0285%" height="15" fill="rgb(246,228,12)" fg:x="109" fg:w="1"/><text x="3.3536%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="3.1036%" y="421" width="0.0285%" height="15" fill="rgb(213,55,15)" fg:x="109" fg:w="1"/><text x="3.3536%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="3.1036%" y="405" width="0.0285%" height="15" fill="rgb(209,9,3)" fg:x="109" fg:w="1"/><text x="3.3536%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.11%)</title><rect x="3.1036%" y="453" width="0.1139%" height="15" fill="rgb(230,59,30)" fg:x="109" fg:w="4"/><text x="3.3536%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.09%)</title><rect x="3.1321%" y="437" width="0.0854%" height="15" fill="rgb(209,121,21)" fg:x="110" fg:w="3"/><text x="3.3821%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="3.1321%" y="421" width="0.0854%" height="15" fill="rgb(220,109,13)" fg:x="110" fg:w="3"/><text x="3.3821%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.14%)</title><rect x="3.2175%" y="453" width="0.1424%" height="15" fill="rgb(232,18,1)" fg:x="113" fg:w="5"/><text x="3.4675%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.14%)</title><rect x="3.2175%" y="437" width="0.1424%" height="15" fill="rgb(215,41,42)" fg:x="113" fg:w="5"/><text x="3.4675%" y="447.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (6 samples, 0.17%)</title><rect x="3.3599%" y="453" width="0.1708%" height="15" fill="rgb(224,123,36)" fg:x="118" fg:w="6"/><text x="3.6099%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (6 samples, 0.17%)</title><rect x="3.3599%" y="437" width="0.1708%" height="15" fill="rgb(240,125,3)" fg:x="118" fg:w="6"/><text x="3.6099%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (6 samples, 0.17%)</title><rect x="3.3599%" y="421" width="0.1708%" height="15" fill="rgb(205,98,50)" fg:x="118" fg:w="6"/><text x="3.6099%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (6 samples, 0.17%)</title><rect x="3.3599%" y="405" width="0.1708%" height="15" fill="rgb(205,185,37)" fg:x="118" fg:w="6"/><text x="3.6099%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.03%)</title><rect x="3.5308%" y="453" width="0.0285%" height="15" fill="rgb(238,207,15)" fg:x="124" fg:w="1"/><text x="3.7808%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="3.6731%" y="437" width="0.0285%" height="15" fill="rgb(213,199,42)" fg:x="129" fg:w="1"/><text x="3.9231%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="3.6731%" y="421" width="0.0285%" height="15" fill="rgb(235,201,11)" fg:x="129" fg:w="1"/><text x="3.9231%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="3.6731%" y="405" width="0.0285%" height="15" fill="rgb(207,46,11)" fg:x="129" fg:w="1"/><text x="3.9231%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="3.6731%" y="389" width="0.0285%" height="15" fill="rgb(241,35,35)" fg:x="129" fg:w="1"/><text x="3.9231%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="3.6731%" y="373" width="0.0285%" height="15" fill="rgb(243,32,47)" fg:x="129" fg:w="1"/><text x="3.9231%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="3.6731%" y="357" width="0.0285%" height="15" fill="rgb(247,202,23)" fg:x="129" fg:w="1"/><text x="3.9231%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="3.6731%" y="341" width="0.0285%" height="15" fill="rgb(219,102,11)" fg:x="129" fg:w="1"/><text x="3.9231%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="3.6731%" y="325" width="0.0285%" height="15" fill="rgb(243,110,44)" fg:x="129" fg:w="1"/><text x="3.9231%" y="335.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="3.6731%" y="309" width="0.0285%" height="15" fill="rgb(222,74,54)" fg:x="129" fg:w="1"/><text x="3.9231%" y="319.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="3.6731%" y="293" width="0.0285%" height="15" fill="rgb(216,99,12)" fg:x="129" fg:w="1"/><text x="3.9231%" y="303.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.03%)</title><rect x="3.6731%" y="277" width="0.0285%" height="15" fill="rgb(226,22,26)" fg:x="129" fg:w="1"/><text x="3.9231%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.31%)</title><rect x="3.5592%" y="453" width="0.3132%" height="15" fill="rgb(217,163,10)" fg:x="125" fg:w="11"/><text x="3.8092%" y="463.50"></text></g><g><title>core::ptr::write (6 samples, 0.17%)</title><rect x="3.7016%" y="437" width="0.1708%" height="15" fill="rgb(213,25,53)" fg:x="130" fg:w="6"/><text x="3.9516%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.03%)</title><rect x="3.8724%" y="453" width="0.0285%" height="15" fill="rgb(252,105,26)" fg:x="136" fg:w="1"/><text x="4.1224%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.03%)</title><rect x="3.8724%" y="437" width="0.0285%" height="15" fill="rgb(220,39,43)" fg:x="136" fg:w="1"/><text x="4.1224%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="3.8724%" y="421" width="0.0285%" height="15" fill="rgb(229,68,48)" fg:x="136" fg:w="1"/><text x="4.1224%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="3.8724%" y="405" width="0.0285%" height="15" fill="rgb(252,8,32)" fg:x="136" fg:w="1"/><text x="4.1224%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="3.8724%" y="389" width="0.0285%" height="15" fill="rgb(223,20,43)" fg:x="136" fg:w="1"/><text x="4.1224%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="3.8724%" y="373" width="0.0285%" height="15" fill="rgb(229,81,49)" fg:x="136" fg:w="1"/><text x="4.1224%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.31%)</title><rect x="3.9009%" y="453" width="0.3132%" height="15" fill="rgb(236,28,36)" fg:x="137" fg:w="11"/><text x="4.1509%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.31%)</title><rect x="3.9009%" y="437" width="0.3132%" height="15" fill="rgb(249,185,26)" fg:x="137" fg:w="11"/><text x="4.1509%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.31%)</title><rect x="3.9009%" y="421" width="0.3132%" height="15" fill="rgb(249,174,33)" fg:x="137" fg:w="11"/><text x="4.1509%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.31%)</title><rect x="3.9009%" y="405" width="0.3132%" height="15" fill="rgb(233,201,37)" fg:x="137" fg:w="11"/><text x="4.1509%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.31%)</title><rect x="3.9009%" y="389" width="0.3132%" height="15" fill="rgb(221,78,26)" fg:x="137" fg:w="11"/><text x="4.1509%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.31%)</title><rect x="3.9009%" y="373" width="0.3132%" height="15" fill="rgb(250,127,30)" fg:x="137" fg:w="11"/><text x="4.1509%" y="383.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.31%)</title><rect x="3.9009%" y="357" width="0.3132%" height="15" fill="rgb(230,49,44)" fg:x="137" fg:w="11"/><text x="4.1509%" y="367.50"></text></g><g><title>__rdl_alloc (11 samples, 0.31%)</title><rect x="3.9009%" y="341" width="0.3132%" height="15" fill="rgb(229,67,23)" fg:x="137" fg:w="11"/><text x="4.1509%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.31%)</title><rect x="3.9009%" y="325" width="0.3132%" height="15" fill="rgb(249,83,47)" fg:x="137" fg:w="11"/><text x="4.1509%" y="335.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.31%)</title><rect x="3.9009%" y="309" width="0.3132%" height="15" fill="rgb(215,43,3)" fg:x="137" fg:w="11"/><text x="4.1509%" y="319.50"></text></g><g><title>tcache_get (5 samples, 0.14%)</title><rect x="4.0718%" y="293" width="0.1424%" height="15" fill="rgb(238,154,13)" fg:x="143" fg:w="5"/><text x="4.3218%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="4.2995%" y="309" width="0.0285%" height="15" fill="rgb(219,56,2)" fg:x="151" fg:w="1"/><text x="4.5495%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="4.2995%" y="293" width="0.0285%" height="15" fill="rgb(233,0,4)" fg:x="151" fg:w="1"/><text x="4.5495%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.2995%" y="277" width="0.0285%" height="15" fill="rgb(235,30,7)" fg:x="151" fg:w="1"/><text x="4.5495%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="4.2995%" y="261" width="0.0285%" height="15" fill="rgb(250,79,13)" fg:x="151" fg:w="1"/><text x="4.5495%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="4.2995%" y="245" width="0.0285%" height="15" fill="rgb(211,146,34)" fg:x="151" fg:w="1"/><text x="4.5495%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (8 samples, 0.23%)</title><rect x="4.2141%" y="453" width="0.2278%" height="15" fill="rgb(228,22,38)" fg:x="148" fg:w="8"/><text x="4.4641%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (8 samples, 0.23%)</title><rect x="4.2141%" y="437" width="0.2278%" height="15" fill="rgb(235,168,5)" fg:x="148" fg:w="8"/><text x="4.4641%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.23%)</title><rect x="4.2141%" y="421" width="0.2278%" height="15" fill="rgb(221,155,16)" fg:x="148" fg:w="8"/><text x="4.4641%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.23%)</title><rect x="4.2141%" y="405" width="0.2278%" height="15" fill="rgb(215,215,53)" fg:x="148" fg:w="8"/><text x="4.4641%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (8 samples, 0.23%)</title><rect x="4.2141%" y="389" width="0.2278%" height="15" fill="rgb(223,4,10)" fg:x="148" fg:w="8"/><text x="4.4641%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (8 samples, 0.23%)</title><rect x="4.2141%" y="373" width="0.2278%" height="15" fill="rgb(234,103,6)" fg:x="148" fg:w="8"/><text x="4.4641%" y="383.50"></text></g><g><title>core::cmp::max_by (8 samples, 0.23%)</title><rect x="4.2141%" y="357" width="0.2278%" height="15" fill="rgb(227,97,0)" fg:x="148" fg:w="8"/><text x="4.4641%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 0.14%)</title><rect x="4.2995%" y="341" width="0.1424%" height="15" fill="rgb(234,150,53)" fg:x="151" fg:w="5"/><text x="4.5495%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (5 samples, 0.14%)</title><rect x="4.2995%" y="325" width="0.1424%" height="15" fill="rgb(228,201,54)" fg:x="151" fg:w="5"/><text x="4.5495%" y="335.50"></text></g><g><title>project1::solver::types::Lit::var (4 samples, 0.11%)</title><rect x="4.3280%" y="309" width="0.1139%" height="15" fill="rgb(222,22,37)" fg:x="152" fg:w="4"/><text x="4.5780%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.06%)</title><rect x="4.3850%" y="293" width="0.0569%" height="15" fill="rgb(237,53,32)" fg:x="154" fg:w="2"/><text x="4.6350%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="4.4134%" y="277" width="0.0285%" height="15" fill="rgb(233,25,53)" fg:x="155" fg:w="1"/><text x="4.6634%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="4.4134%" y="261" width="0.0285%" height="15" fill="rgb(210,40,34)" fg:x="155" fg:w="1"/><text x="4.6634%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="4.4134%" y="245" width="0.0285%" height="15" fill="rgb(241,220,44)" fg:x="155" fg:w="1"/><text x="4.6634%" y="255.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="4.4134%" y="229" width="0.0285%" height="15" fill="rgb(235,28,35)" fg:x="155" fg:w="1"/><text x="4.6634%" y="239.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="4.4134%" y="213" width="0.0285%" height="15" fill="rgb(210,56,17)" fg:x="155" fg:w="1"/><text x="4.6634%" y="223.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="4.4134%" y="197" width="0.0285%" height="15" fill="rgb(224,130,29)" fg:x="155" fg:w="1"/><text x="4.6634%" y="207.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="4.4134%" y="181" width="0.0285%" height="15" fill="rgb(235,212,8)" fg:x="155" fg:w="1"/><text x="4.6634%" y="191.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="4.4134%" y="165" width="0.0285%" height="15" fill="rgb(223,33,50)" fg:x="155" fg:w="1"/><text x="4.6634%" y="175.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="4.4134%" y="149" width="0.0285%" height="15" fill="rgb(219,149,13)" fg:x="155" fg:w="1"/><text x="4.6634%" y="159.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="4.4134%" y="133" width="0.0285%" height="15" fill="rgb(250,156,29)" fg:x="155" fg:w="1"/><text x="4.6634%" y="143.50"></text></g><g><title>timekeeping_update (1 samples, 0.03%)</title><rect x="4.4134%" y="117" width="0.0285%" height="15" fill="rgb(216,193,19)" fg:x="155" fg:w="1"/><text x="4.6634%" y="127.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.03%)</title><rect x="4.4134%" y="101" width="0.0285%" height="15" fill="rgb(216,135,14)" fg:x="155" fg:w="1"/><text x="4.6634%" y="111.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="4.4419%" y="453" width="0.0285%" height="15" fill="rgb(241,47,5)" fg:x="156" fg:w="1"/><text x="4.6919%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="4.4419%" y="437" width="0.0285%" height="15" fill="rgb(233,42,35)" fg:x="156" fg:w="1"/><text x="4.6919%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="4.4704%" y="453" width="0.0285%" height="15" fill="rgb(231,13,6)" fg:x="157" fg:w="1"/><text x="4.7204%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (1 samples, 0.03%)</title><rect x="4.4704%" y="437" width="0.0285%" height="15" fill="rgb(207,181,40)" fg:x="157" fg:w="1"/><text x="4.7204%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="4.4704%" y="421" width="0.0285%" height="15" fill="rgb(254,173,49)" fg:x="157" fg:w="1"/><text x="4.7204%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="4.4704%" y="405" width="0.0285%" height="15" fill="rgb(221,1,38)" fg:x="157" fg:w="1"/><text x="4.7204%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.03%)</title><rect x="4.4989%" y="453" width="0.0285%" height="15" fill="rgb(206,124,46)" fg:x="158" fg:w="1"/><text x="4.7489%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="4.5273%" y="453" width="0.0285%" height="15" fill="rgb(249,21,11)" fg:x="159" fg:w="1"/><text x="4.7773%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="4.5273%" y="437" width="0.0285%" height="15" fill="rgb(222,201,40)" fg:x="159" fg:w="1"/><text x="4.7773%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="4.5273%" y="421" width="0.0285%" height="15" fill="rgb(235,61,29)" fg:x="159" fg:w="1"/><text x="4.7773%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="4.5273%" y="405" width="0.0285%" height="15" fill="rgb(219,207,3)" fg:x="159" fg:w="1"/><text x="4.7773%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="4.5273%" y="389" width="0.0285%" height="15" fill="rgb(222,56,46)" fg:x="159" fg:w="1"/><text x="4.7773%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="4.5273%" y="373" width="0.0285%" height="15" fill="rgb(239,76,54)" fg:x="159" fg:w="1"/><text x="4.7773%" y="383.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="4.5273%" y="357" width="0.0285%" height="15" fill="rgb(231,124,27)" fg:x="159" fg:w="1"/><text x="4.7773%" y="367.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="4.5273%" y="341" width="0.0285%" height="15" fill="rgb(249,195,6)" fg:x="159" fg:w="1"/><text x="4.7773%" y="351.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="4.5273%" y="325" width="0.0285%" height="15" fill="rgb(237,174,47)" fg:x="159" fg:w="1"/><text x="4.7773%" y="335.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="4.5273%" y="309" width="0.0285%" height="15" fill="rgb(206,201,31)" fg:x="159" fg:w="1"/><text x="4.7773%" y="319.50"></text></g><g><title>heap_for_ptr (1 samples, 0.03%)</title><rect x="4.5273%" y="293" width="0.0285%" height="15" fill="rgb(231,57,52)" fg:x="159" fg:w="1"/><text x="4.7773%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (15 samples, 0.43%)</title><rect x="4.5558%" y="453" width="0.4271%" height="15" fill="rgb(248,177,22)" fg:x="160" fg:w="15"/><text x="4.8058%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.43%)</title><rect x="4.5558%" y="437" width="0.4271%" height="15" fill="rgb(215,211,37)" fg:x="160" fg:w="15"/><text x="4.8058%" y="447.50"></text></g><g><title>__memcpy_evex_unaligned_erms (15 samples, 0.43%)</title><rect x="4.5558%" y="421" width="0.4271%" height="15" fill="rgb(241,128,51)" fg:x="160" fg:w="15"/><text x="4.8058%" y="431.50"></text></g><g><title>log::max_level (6 samples, 0.17%)</title><rect x="4.9829%" y="453" width="0.1708%" height="15" fill="rgb(227,165,31)" fg:x="175" fg:w="6"/><text x="5.2329%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.17%)</title><rect x="4.9829%" y="437" width="0.1708%" height="15" fill="rgb(228,167,24)" fg:x="175" fg:w="6"/><text x="5.2329%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.17%)</title><rect x="4.9829%" y="421" width="0.1708%" height="15" fill="rgb(228,143,12)" fg:x="175" fg:w="6"/><text x="5.2329%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="5.1822%" y="421" width="0.0285%" height="15" fill="rgb(249,149,8)" fg:x="182" fg:w="1"/><text x="5.4322%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="5.1822%" y="405" width="0.0285%" height="15" fill="rgb(243,35,44)" fg:x="182" fg:w="1"/><text x="5.4322%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="5.1822%" y="389" width="0.0285%" height="15" fill="rgb(246,89,9)" fg:x="182" fg:w="1"/><text x="5.4322%" y="399.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (4 samples, 0.11%)</title><rect x="5.1538%" y="453" width="0.1139%" height="15" fill="rgb(233,213,13)" fg:x="181" fg:w="4"/><text x="5.4038%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="5.1822%" y="437" width="0.0854%" height="15" fill="rgb(233,141,41)" fg:x="182" fg:w="3"/><text x="5.4322%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="5.2107%" y="421" width="0.0569%" height="15" fill="rgb(239,167,4)" fg:x="183" fg:w="2"/><text x="5.4607%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="5.2107%" y="405" width="0.0569%" height="15" fill="rgb(209,217,16)" fg:x="183" fg:w="2"/><text x="5.4607%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="5.4954%" y="421" width="0.0569%" height="15" fill="rgb(219,88,35)" fg:x="193" fg:w="2"/><text x="5.7454%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.06%)</title><rect x="5.4954%" y="405" width="0.0569%" height="15" fill="rgb(220,193,23)" fg:x="193" fg:w="2"/><text x="5.7454%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="5.4954%" y="389" width="0.0569%" height="15" fill="rgb(230,90,52)" fg:x="193" fg:w="2"/><text x="5.7454%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="5.4954%" y="437" width="0.0854%" height="15" fill="rgb(252,106,19)" fg:x="193" fg:w="3"/><text x="5.7454%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="5.5524%" y="421" width="0.0285%" height="15" fill="rgb(206,74,20)" fg:x="195" fg:w="1"/><text x="5.8024%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="5.5524%" y="405" width="0.0285%" height="15" fill="rgb(230,138,44)" fg:x="195" fg:w="1"/><text x="5.8024%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (5 samples, 0.14%)</title><rect x="5.5809%" y="437" width="0.1424%" height="15" fill="rgb(235,182,43)" fg:x="196" fg:w="5"/><text x="5.8309%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (5 samples, 0.14%)</title><rect x="5.5809%" y="421" width="0.1424%" height="15" fill="rgb(242,16,51)" fg:x="196" fg:w="5"/><text x="5.8309%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (7 samples, 0.20%)</title><rect x="5.7232%" y="437" width="0.1993%" height="15" fill="rgb(248,9,4)" fg:x="201" fg:w="7"/><text x="5.9732%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (6 samples, 0.17%)</title><rect x="5.7517%" y="421" width="0.1708%" height="15" fill="rgb(210,31,22)" fg:x="202" fg:w="6"/><text x="6.0017%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="6.1503%" y="229" width="0.0569%" height="15" fill="rgb(239,54,39)" fg:x="216" fg:w="2"/><text x="6.4003%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.11%)</title><rect x="6.1219%" y="245" width="0.1139%" height="15" fill="rgb(230,99,41)" fg:x="215" fg:w="4"/><text x="6.3719%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="6.2073%" y="229" width="0.0285%" height="15" fill="rgb(253,106,12)" fg:x="218" fg:w="1"/><text x="6.4573%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.26%)</title><rect x="6.2642%" y="229" width="0.2563%" height="15" fill="rgb(213,46,41)" fg:x="220" fg:w="9"/><text x="6.5142%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.54%)</title><rect x="6.0364%" y="293" width="0.5410%" height="15" fill="rgb(215,133,35)" fg:x="212" fg:w="19"/><text x="6.2864%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.54%)</title><rect x="6.0364%" y="277" width="0.5410%" height="15" fill="rgb(213,28,5)" fg:x="212" fg:w="19"/><text x="6.2864%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.54%)</title><rect x="6.0364%" y="261" width="0.5410%" height="15" fill="rgb(215,77,49)" fg:x="212" fg:w="19"/><text x="6.2864%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.34%)</title><rect x="6.2358%" y="245" width="0.3417%" height="15" fill="rgb(248,100,22)" fg:x="219" fg:w="12"/><text x="6.4858%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="6.5205%" y="229" width="0.0569%" height="15" fill="rgb(208,67,9)" fg:x="229" fg:w="2"/><text x="6.7705%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="6.5774%" y="293" width="0.0285%" height="15" fill="rgb(219,133,21)" fg:x="231" fg:w="1"/><text x="6.8274%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="6.5774%" y="277" width="0.0285%" height="15" fill="rgb(246,46,29)" fg:x="231" fg:w="1"/><text x="6.8274%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="6.5774%" y="261" width="0.0285%" height="15" fill="rgb(246,185,52)" fg:x="231" fg:w="1"/><text x="6.8274%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="6.5774%" y="245" width="0.0285%" height="15" fill="rgb(252,136,11)" fg:x="231" fg:w="1"/><text x="6.8274%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.63%)</title><rect x="6.0364%" y="325" width="0.6264%" height="15" fill="rgb(219,138,53)" fg:x="212" fg:w="22"/><text x="6.2864%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.63%)</title><rect x="6.0364%" y="309" width="0.6264%" height="15" fill="rgb(211,51,23)" fg:x="212" fg:w="22"/><text x="6.2864%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="6.6059%" y="293" width="0.0569%" height="15" fill="rgb(247,221,28)" fg:x="232" fg:w="2"/><text x="6.8559%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="6.6059%" y="277" width="0.0569%" height="15" fill="rgb(251,222,45)" fg:x="232" fg:w="2"/><text x="6.8559%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="6.6059%" y="261" width="0.0569%" height="15" fill="rgb(217,162,53)" fg:x="232" fg:w="2"/><text x="6.8559%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="6.6059%" y="245" width="0.0569%" height="15" fill="rgb(229,93,14)" fg:x="232" fg:w="2"/><text x="6.8559%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="6.6059%" y="229" width="0.0569%" height="15" fill="rgb(209,67,49)" fg:x="232" fg:w="2"/><text x="6.8559%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="6.6059%" y="213" width="0.0569%" height="15" fill="rgb(213,87,29)" fg:x="232" fg:w="2"/><text x="6.8559%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="6.6059%" y="197" width="0.0569%" height="15" fill="rgb(205,151,52)" fg:x="232" fg:w="2"/><text x="6.8559%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="6.6059%" y="181" width="0.0569%" height="15" fill="rgb(253,215,39)" fg:x="232" fg:w="2"/><text x="6.8559%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="6.6059%" y="165" width="0.0569%" height="15" fill="rgb(221,220,41)" fg:x="232" fg:w="2"/><text x="6.8559%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="6.6629%" y="277" width="0.0569%" height="15" fill="rgb(218,133,21)" fg:x="234" fg:w="2"/><text x="6.9129%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="6.6629%" y="261" width="0.0569%" height="15" fill="rgb(221,193,43)" fg:x="234" fg:w="2"/><text x="6.9129%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="6.7198%" y="277" width="0.0285%" height="15" fill="rgb(240,128,52)" fg:x="236" fg:w="1"/><text x="6.9698%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="6.7198%" y="261" width="0.0285%" height="15" fill="rgb(253,114,12)" fg:x="236" fg:w="1"/><text x="6.9698%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="6.7198%" y="245" width="0.0285%" height="15" fill="rgb(215,223,47)" fg:x="236" fg:w="1"/><text x="6.9698%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="6.7198%" y="229" width="0.0285%" height="15" fill="rgb(248,225,23)" fg:x="236" fg:w="1"/><text x="6.9698%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.03%)</title><rect x="6.7198%" y="213" width="0.0285%" height="15" fill="rgb(250,108,0)" fg:x="236" fg:w="1"/><text x="6.9698%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.17%)</title><rect x="6.7483%" y="277" width="0.1708%" height="15" fill="rgb(228,208,7)" fg:x="237" fg:w="6"/><text x="6.9983%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.09%)</title><rect x="6.9191%" y="277" width="0.0854%" height="15" fill="rgb(244,45,10)" fg:x="243" fg:w="3"/><text x="7.1691%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.09%)</title><rect x="6.9191%" y="261" width="0.0854%" height="15" fill="rgb(207,125,25)" fg:x="243" fg:w="3"/><text x="7.1691%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="6.9191%" y="245" width="0.0854%" height="15" fill="rgb(210,195,18)" fg:x="243" fg:w="3"/><text x="7.1691%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13 samples, 0.37%)</title><rect x="6.6629%" y="293" width="0.3702%" height="15" fill="rgb(249,80,12)" fg:x="234" fg:w="13"/><text x="6.9129%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="7.0046%" y="277" width="0.0285%" height="15" fill="rgb(221,65,9)" fg:x="246" fg:w="1"/><text x="7.2546%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="7.0046%" y="261" width="0.0285%" height="15" fill="rgb(235,49,36)" fg:x="246" fg:w="1"/><text x="7.2546%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (37 samples, 1.05%)</title><rect x="6.0080%" y="389" width="1.0535%" height="15" fill="rgb(225,32,20)" fg:x="211" fg:w="37"/><text x="6.2580%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (37 samples, 1.05%)</title><rect x="6.0080%" y="373" width="1.0535%" height="15" fill="rgb(215,141,46)" fg:x="211" fg:w="37"/><text x="6.2580%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (37 samples, 1.05%)</title><rect x="6.0080%" y="357" width="1.0535%" height="15" fill="rgb(250,160,47)" fg:x="211" fg:w="37"/><text x="6.2580%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (37 samples, 1.05%)</title><rect x="6.0080%" y="341" width="1.0535%" height="15" fill="rgb(216,222,40)" fg:x="211" fg:w="37"/><text x="6.2580%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (14 samples, 0.40%)</title><rect x="6.6629%" y="325" width="0.3986%" height="15" fill="rgb(234,217,39)" fg:x="234" fg:w="14"/><text x="6.9129%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.40%)</title><rect x="6.6629%" y="309" width="0.3986%" height="15" fill="rgb(207,178,40)" fg:x="234" fg:w="14"/><text x="6.9129%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="7.0330%" y="293" width="0.0285%" height="15" fill="rgb(221,136,13)" fg:x="247" fg:w="1"/><text x="7.2830%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="7.0615%" y="373" width="0.0285%" height="15" fill="rgb(249,199,10)" fg:x="248" fg:w="1"/><text x="7.3115%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="7.2323%" y="357" width="0.0285%" height="15" fill="rgb(249,222,13)" fg:x="254" fg:w="1"/><text x="7.4823%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="7.2323%" y="341" width="0.0285%" height="15" fill="rgb(244,185,38)" fg:x="254" fg:w="1"/><text x="7.4823%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="7.2323%" y="325" width="0.0285%" height="15" fill="rgb(236,202,9)" fg:x="254" fg:w="1"/><text x="7.4823%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.34%)</title><rect x="7.4032%" y="325" width="0.3417%" height="15" fill="rgb(250,229,37)" fg:x="260" fg:w="12"/><text x="7.6532%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="7.8303%" y="181" width="0.0285%" height="15" fill="rgb(206,174,23)" fg:x="275" fg:w="1"/><text x="8.0803%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="7.7733%" y="245" width="0.1139%" height="15" fill="rgb(211,33,43)" fg:x="273" fg:w="4"/><text x="8.0233%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="7.7733%" y="229" width="0.1139%" height="15" fill="rgb(245,58,50)" fg:x="273" fg:w="4"/><text x="8.0233%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.11%)</title><rect x="7.7733%" y="213" width="0.1139%" height="15" fill="rgb(244,68,36)" fg:x="273" fg:w="4"/><text x="8.0233%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.09%)</title><rect x="7.8018%" y="197" width="0.0854%" height="15" fill="rgb(232,229,15)" fg:x="274" fg:w="3"/><text x="8.0518%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="7.8588%" y="181" width="0.0285%" height="15" fill="rgb(254,30,23)" fg:x="276" fg:w="1"/><text x="8.1088%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.17%)</title><rect x="7.7733%" y="261" width="0.1708%" height="15" fill="rgb(235,160,14)" fg:x="273" fg:w="6"/><text x="8.0233%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="7.8872%" y="245" width="0.0569%" height="15" fill="rgb(212,155,44)" fg:x="277" fg:w="2"/><text x="8.1372%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="7.8872%" y="229" width="0.0569%" height="15" fill="rgb(226,2,50)" fg:x="277" fg:w="2"/><text x="8.1372%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="7.8872%" y="213" width="0.0569%" height="15" fill="rgb(234,177,6)" fg:x="277" fg:w="2"/><text x="8.1372%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="7.8872%" y="197" width="0.0569%" height="15" fill="rgb(217,24,9)" fg:x="277" fg:w="2"/><text x="8.1372%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.8872%" y="181" width="0.0569%" height="15" fill="rgb(220,13,46)" fg:x="277" fg:w="2"/><text x="8.1372%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.8872%" y="165" width="0.0569%" height="15" fill="rgb(239,221,27)" fg:x="277" fg:w="2"/><text x="8.1372%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="7.8872%" y="149" width="0.0569%" height="15" fill="rgb(222,198,25)" fg:x="277" fg:w="2"/><text x="8.1372%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="7.9157%" y="133" width="0.0285%" height="15" fill="rgb(211,99,13)" fg:x="278" fg:w="1"/><text x="8.1657%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="7.9157%" y="117" width="0.0285%" height="15" fill="rgb(232,111,31)" fg:x="278" fg:w="1"/><text x="8.1657%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.20%)</title><rect x="7.7733%" y="277" width="0.1993%" height="15" fill="rgb(245,82,37)" fg:x="273" fg:w="7"/><text x="8.0233%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="7.9442%" y="261" width="0.0285%" height="15" fill="rgb(227,149,46)" fg:x="279" fg:w="1"/><text x="8.1942%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="8.0296%" y="229" width="0.0285%" height="15" fill="rgb(218,36,50)" fg:x="282" fg:w="1"/><text x="8.2796%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="8.0296%" y="213" width="0.0285%" height="15" fill="rgb(226,80,48)" fg:x="282" fg:w="1"/><text x="8.2796%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="8.0581%" y="213" width="0.0569%" height="15" fill="rgb(238,224,15)" fg:x="283" fg:w="2"/><text x="8.3081%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="8.0581%" y="197" width="0.0569%" height="15" fill="rgb(241,136,10)" fg:x="283" fg:w="2"/><text x="8.3081%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="8.0581%" y="181" width="0.0569%" height="15" fill="rgb(208,32,45)" fg:x="283" fg:w="2"/><text x="8.3081%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="8.0581%" y="165" width="0.0569%" height="15" fill="rgb(207,135,9)" fg:x="283" fg:w="2"/><text x="8.3081%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.11%)</title><rect x="8.0581%" y="229" width="0.1139%" height="15" fill="rgb(206,86,44)" fg:x="283" fg:w="4"/><text x="8.3081%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="8.1150%" y="213" width="0.0569%" height="15" fill="rgb(245,177,15)" fg:x="285" fg:w="2"/><text x="8.3650%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="8.1150%" y="197" width="0.0569%" height="15" fill="rgb(206,64,50)" fg:x="285" fg:w="2"/><text x="8.3650%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="8.1150%" y="181" width="0.0569%" height="15" fill="rgb(234,36,40)" fg:x="285" fg:w="2"/><text x="8.3650%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="8.1150%" y="165" width="0.0569%" height="15" fill="rgb(213,64,8)" fg:x="285" fg:w="2"/><text x="8.3650%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.17%)</title><rect x="8.1720%" y="229" width="0.1708%" height="15" fill="rgb(210,75,36)" fg:x="287" fg:w="6"/><text x="8.4220%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (40 samples, 1.14%)</title><rect x="7.2608%" y="357" width="1.1390%" height="15" fill="rgb(229,88,21)" fg:x="255" fg:w="40"/><text x="7.5108%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.14%)</title><rect x="7.2608%" y="341" width="1.1390%" height="15" fill="rgb(252,204,47)" fg:x="255" fg:w="40"/><text x="7.5108%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (23 samples, 0.65%)</title><rect x="7.7449%" y="325" width="0.6549%" height="15" fill="rgb(208,77,27)" fg:x="272" fg:w="23"/><text x="7.9949%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (23 samples, 0.65%)</title><rect x="7.7449%" y="309" width="0.6549%" height="15" fill="rgb(221,76,26)" fg:x="272" fg:w="23"/><text x="7.9949%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (22 samples, 0.63%)</title><rect x="7.7733%" y="293" width="0.6264%" height="15" fill="rgb(225,139,18)" fg:x="273" fg:w="22"/><text x="8.0233%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15 samples, 0.43%)</title><rect x="7.9727%" y="277" width="0.4271%" height="15" fill="rgb(230,137,11)" fg:x="280" fg:w="15"/><text x="8.2227%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.43%)</title><rect x="7.9727%" y="261" width="0.4271%" height="15" fill="rgb(212,28,1)" fg:x="280" fg:w="15"/><text x="8.2227%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.43%)</title><rect x="7.9727%" y="245" width="0.4271%" height="15" fill="rgb(248,164,17)" fg:x="280" fg:w="15"/><text x="8.2227%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="8.3428%" y="229" width="0.0569%" height="15" fill="rgb(222,171,42)" fg:x="293" fg:w="2"/><text x="8.5928%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="8.3428%" y="213" width="0.0569%" height="15" fill="rgb(243,84,45)" fg:x="293" fg:w="2"/><text x="8.5928%" y="223.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (47 samples, 1.34%)</title><rect x="7.0900%" y="373" width="1.3383%" height="15" fill="rgb(252,49,23)" fg:x="249" fg:w="47"/><text x="7.3400%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.03%)</title><rect x="8.3998%" y="357" width="0.0285%" height="15" fill="rgb(215,19,7)" fg:x="295" fg:w="1"/><text x="8.6498%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (54 samples, 1.54%)</title><rect x="7.0615%" y="389" width="1.5376%" height="15" fill="rgb(238,81,41)" fg:x="248" fg:w="54"/><text x="7.3115%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (6 samples, 0.17%)</title><rect x="8.4282%" y="373" width="0.1708%" height="15" fill="rgb(210,199,37)" fg:x="296" fg:w="6"/><text x="8.6782%" y="383.50"></text></g><g><title>compare::Compare::compares_le (5 samples, 0.14%)</title><rect x="8.7415%" y="373" width="0.1424%" height="15" fill="rgb(244,192,49)" fg:x="307" fg:w="5"/><text x="8.9915%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.14%)</title><rect x="8.7415%" y="357" width="0.1424%" height="15" fill="rgb(226,211,11)" fg:x="307" fg:w="5"/><text x="8.9915%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.14%)</title><rect x="8.7415%" y="341" width="0.1424%" height="15" fill="rgb(236,162,54)" fg:x="307" fg:w="5"/><text x="8.9915%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="8.8838%" y="341" width="0.0854%" height="15" fill="rgb(220,229,9)" fg:x="312" fg:w="3"/><text x="9.1338%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="9.0262%" y="261" width="0.0569%" height="15" fill="rgb(250,87,22)" fg:x="317" fg:w="2"/><text x="9.2762%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="9.0262%" y="245" width="0.0569%" height="15" fill="rgb(239,43,17)" fg:x="317" fg:w="2"/><text x="9.2762%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="9.0262%" y="229" width="0.0569%" height="15" fill="rgb(231,177,25)" fg:x="317" fg:w="2"/><text x="9.2762%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.06%)</title><rect x="9.0262%" y="213" width="0.0569%" height="15" fill="rgb(219,179,1)" fg:x="317" fg:w="2"/><text x="9.2762%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.0547%" y="197" width="0.0285%" height="15" fill="rgb(238,219,53)" fg:x="318" fg:w="1"/><text x="9.3047%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="9.0262%" y="293" width="0.0854%" height="15" fill="rgb(232,167,36)" fg:x="317" fg:w="3"/><text x="9.2762%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="9.0262%" y="277" width="0.0854%" height="15" fill="rgb(244,19,51)" fg:x="317" fg:w="3"/><text x="9.2762%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="9.0831%" y="261" width="0.0285%" height="15" fill="rgb(224,6,22)" fg:x="319" fg:w="1"/><text x="9.3331%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="9.0831%" y="245" width="0.0285%" height="15" fill="rgb(224,145,5)" fg:x="319" fg:w="1"/><text x="9.3331%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="9.0831%" y="229" width="0.0285%" height="15" fill="rgb(234,130,49)" fg:x="319" fg:w="1"/><text x="9.3331%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="9.0831%" y="213" width="0.0285%" height="15" fill="rgb(254,6,2)" fg:x="319" fg:w="1"/><text x="9.3331%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="9.0831%" y="197" width="0.0285%" height="15" fill="rgb(208,96,46)" fg:x="319" fg:w="1"/><text x="9.3331%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="9.0831%" y="181" width="0.0285%" height="15" fill="rgb(239,3,39)" fg:x="319" fg:w="1"/><text x="9.3331%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="9.0831%" y="165" width="0.0285%" height="15" fill="rgb(233,210,1)" fg:x="319" fg:w="1"/><text x="9.3331%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="9.0831%" y="149" width="0.0285%" height="15" fill="rgb(244,137,37)" fg:x="319" fg:w="1"/><text x="9.3331%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="9.1401%" y="245" width="0.0854%" height="15" fill="rgb(240,136,2)" fg:x="321" fg:w="3"/><text x="9.3901%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.09%)</title><rect x="9.1401%" y="229" width="0.0854%" height="15" fill="rgb(239,18,37)" fg:x="321" fg:w="3"/><text x="9.3901%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="9.2255%" y="229" width="0.0854%" height="15" fill="rgb(218,185,22)" fg:x="324" fg:w="3"/><text x="9.4755%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="9.2255%" y="213" width="0.0854%" height="15" fill="rgb(225,218,4)" fg:x="324" fg:w="3"/><text x="9.4755%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="9.2255%" y="197" width="0.0854%" height="15" fill="rgb(230,182,32)" fg:x="324" fg:w="3"/><text x="9.4755%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="9.2255%" y="181" width="0.0854%" height="15" fill="rgb(242,56,43)" fg:x="324" fg:w="3"/><text x="9.4755%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.11%)</title><rect x="9.2255%" y="245" width="0.1139%" height="15" fill="rgb(233,99,24)" fg:x="324" fg:w="4"/><text x="9.4755%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="9.3109%" y="229" width="0.0285%" height="15" fill="rgb(234,209,42)" fg:x="327" fg:w="1"/><text x="9.5609%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="9.3109%" y="213" width="0.0285%" height="15" fill="rgb(227,7,12)" fg:x="327" fg:w="1"/><text x="9.5609%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="9.3109%" y="197" width="0.0285%" height="15" fill="rgb(245,203,43)" fg:x="327" fg:w="1"/><text x="9.5609%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="9.3109%" y="181" width="0.0285%" height="15" fill="rgb(238,205,33)" fg:x="327" fg:w="1"/><text x="9.5609%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.06%)</title><rect x="9.3394%" y="245" width="0.0569%" height="15" fill="rgb(231,56,7)" fg:x="328" fg:w="2"/><text x="9.5894%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (19 samples, 0.54%)</title><rect x="8.8838%" y="373" width="0.5410%" height="15" fill="rgb(244,186,29)" fg:x="312" fg:w="19"/><text x="9.1338%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.54%)</title><rect x="8.8838%" y="357" width="0.5410%" height="15" fill="rgb(234,111,31)" fg:x="312" fg:w="19"/><text x="9.1338%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (16 samples, 0.46%)</title><rect x="8.9692%" y="341" width="0.4556%" height="15" fill="rgb(241,149,10)" fg:x="315" fg:w="16"/><text x="9.2192%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (16 samples, 0.46%)</title><rect x="8.9692%" y="325" width="0.4556%" height="15" fill="rgb(249,206,44)" fg:x="315" fg:w="16"/><text x="9.2192%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (15 samples, 0.43%)</title><rect x="8.9977%" y="309" width="0.4271%" height="15" fill="rgb(251,153,30)" fg:x="316" fg:w="15"/><text x="9.2477%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11 samples, 0.31%)</title><rect x="9.1116%" y="293" width="0.3132%" height="15" fill="rgb(239,152,38)" fg:x="320" fg:w="11"/><text x="9.3616%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.28%)</title><rect x="9.1401%" y="277" width="0.2847%" height="15" fill="rgb(249,139,47)" fg:x="321" fg:w="10"/><text x="9.3901%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.28%)</title><rect x="9.1401%" y="261" width="0.2847%" height="15" fill="rgb(244,64,35)" fg:x="321" fg:w="10"/><text x="9.3901%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="9.3964%" y="245" width="0.0285%" height="15" fill="rgb(216,46,15)" fg:x="330" fg:w="1"/><text x="9.6464%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="9.3964%" y="229" width="0.0285%" height="15" fill="rgb(250,74,19)" fg:x="330" fg:w="1"/><text x="9.6464%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (124 samples, 3.53%)</title><rect x="5.9226%" y="437" width="3.5308%" height="15" fill="rgb(249,42,33)" fg:x="208" fg:w="124"/><text x="6.1726%" y="447.50">cor..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 3.53%)</title><rect x="5.9226%" y="421" width="3.5308%" height="15" fill="rgb(242,149,17)" fg:x="208" fg:w="124"/><text x="6.1726%" y="431.50">&lt;mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (124 samples, 3.53%)</title><rect x="5.9226%" y="405" width="3.5308%" height="15" fill="rgb(244,29,21)" fg:x="208" fg:w="124"/><text x="6.1726%" y="415.50">mut..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (30 samples, 0.85%)</title><rect x="8.5991%" y="389" width="0.8542%" height="15" fill="rgb(220,130,37)" fg:x="302" fg:w="30"/><text x="8.8491%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (1 samples, 0.03%)</title><rect x="9.4248%" y="373" width="0.0285%" height="15" fill="rgb(211,67,2)" fg:x="331" fg:w="1"/><text x="9.6748%" y="383.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="9.4248%" y="357" width="0.0285%" height="15" fill="rgb(235,68,52)" fg:x="331" fg:w="1"/><text x="9.6748%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="9.5387%" y="277" width="0.0285%" height="15" fill="rgb(246,142,3)" fg:x="335" fg:w="1"/><text x="9.7887%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="9.5387%" y="293" width="0.0569%" height="15" fill="rgb(241,25,7)" fg:x="335" fg:w="2"/><text x="9.7887%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.5672%" y="277" width="0.0285%" height="15" fill="rgb(242,119,39)" fg:x="336" fg:w="1"/><text x="9.8172%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.23%)</title><rect x="9.5957%" y="277" width="0.2278%" height="15" fill="rgb(241,98,45)" fg:x="337" fg:w="8"/><text x="9.8457%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="9.4818%" y="341" width="0.4271%" height="15" fill="rgb(254,28,30)" fg:x="333" fg:w="15"/><text x="9.7318%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="9.4818%" y="325" width="0.4271%" height="15" fill="rgb(241,142,54)" fg:x="333" fg:w="15"/><text x="9.7318%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="9.4818%" y="309" width="0.4271%" height="15" fill="rgb(222,85,15)" fg:x="333" fg:w="15"/><text x="9.7318%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 0.31%)</title><rect x="9.5957%" y="293" width="0.3132%" height="15" fill="rgb(210,85,47)" fg:x="337" fg:w="11"/><text x="9.8457%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="9.8235%" y="277" width="0.0854%" height="15" fill="rgb(224,206,25)" fg:x="345" fg:w="3"/><text x="10.0735%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="9.9089%" y="341" width="0.0285%" height="15" fill="rgb(243,201,19)" fg:x="348" fg:w="1"/><text x="10.1589%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="9.9089%" y="325" width="0.0285%" height="15" fill="rgb(236,59,4)" fg:x="348" fg:w="1"/><text x="10.1589%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="9.9089%" y="309" width="0.0285%" height="15" fill="rgb(254,179,45)" fg:x="348" fg:w="1"/><text x="10.1589%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.03%)</title><rect x="9.9089%" y="293" width="0.0285%" height="15" fill="rgb(226,14,10)" fg:x="348" fg:w="1"/><text x="10.1589%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.63%)</title><rect x="9.4533%" y="373" width="0.6264%" height="15" fill="rgb(244,27,41)" fg:x="332" fg:w="22"/><text x="9.7033%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.63%)</title><rect x="9.4533%" y="357" width="0.6264%" height="15" fill="rgb(235,35,32)" fg:x="332" fg:w="22"/><text x="9.7033%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.14%)</title><rect x="9.9374%" y="341" width="0.1424%" height="15" fill="rgb(218,68,31)" fg:x="349" fg:w="5"/><text x="10.1874%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.14%)</title><rect x="9.9374%" y="325" width="0.1424%" height="15" fill="rgb(207,120,37)" fg:x="349" fg:w="5"/><text x="10.1874%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.14%)</title><rect x="9.9374%" y="309" width="0.1424%" height="15" fill="rgb(227,98,0)" fg:x="349" fg:w="5"/><text x="10.1874%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.14%)</title><rect x="9.9374%" y="293" width="0.1424%" height="15" fill="rgb(207,7,3)" fg:x="349" fg:w="5"/><text x="10.1874%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="9.9374%" y="277" width="0.1424%" height="15" fill="rgb(206,98,19)" fg:x="349" fg:w="5"/><text x="10.1874%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="9.9374%" y="261" width="0.1424%" height="15" fill="rgb(217,5,26)" fg:x="349" fg:w="5"/><text x="10.1874%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="9.9374%" y="245" width="0.1424%" height="15" fill="rgb(235,190,38)" fg:x="349" fg:w="5"/><text x="10.1874%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.11%)</title><rect x="9.9658%" y="229" width="0.1139%" height="15" fill="rgb(247,86,24)" fg:x="350" fg:w="4"/><text x="10.2158%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="9.9943%" y="213" width="0.0854%" height="15" fill="rgb(205,101,16)" fg:x="351" fg:w="3"/><text x="10.2443%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.23%)</title><rect x="10.1651%" y="325" width="0.2278%" height="15" fill="rgb(246,168,33)" fg:x="357" fg:w="8"/><text x="10.4151%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.23%)</title><rect x="10.1651%" y="309" width="0.2278%" height="15" fill="rgb(231,114,1)" fg:x="357" fg:w="8"/><text x="10.4151%" y="319.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.03%)</title><rect x="10.3929%" y="325" width="0.0285%" height="15" fill="rgb(207,184,53)" fg:x="365" fg:w="1"/><text x="10.6429%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.14%)</title><rect x="10.4214%" y="325" width="0.1424%" height="15" fill="rgb(224,95,51)" fg:x="366" fg:w="5"/><text x="10.6714%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.14%)</title><rect x="10.4214%" y="309" width="0.1424%" height="15" fill="rgb(212,188,45)" fg:x="366" fg:w="5"/><text x="10.6714%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.14%)</title><rect x="10.4214%" y="293" width="0.1424%" height="15" fill="rgb(223,154,38)" fg:x="366" fg:w="5"/><text x="10.6714%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="10.4214%" y="277" width="0.1424%" height="15" fill="rgb(251,22,52)" fg:x="366" fg:w="5"/><text x="10.6714%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.14%)</title><rect x="10.4214%" y="261" width="0.1424%" height="15" fill="rgb(229,209,22)" fg:x="366" fg:w="5"/><text x="10.6714%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (8 samples, 0.23%)</title><rect x="10.5638%" y="325" width="0.2278%" height="15" fill="rgb(234,138,34)" fg:x="371" fg:w="8"/><text x="10.8138%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.14%)</title><rect x="10.7916%" y="325" width="0.1424%" height="15" fill="rgb(212,95,11)" fg:x="379" fg:w="5"/><text x="11.0416%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.14%)</title><rect x="10.7916%" y="309" width="0.1424%" height="15" fill="rgb(240,179,47)" fg:x="379" fg:w="5"/><text x="11.0416%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.14%)</title><rect x="10.7916%" y="293" width="0.1424%" height="15" fill="rgb(240,163,11)" fg:x="379" fg:w="5"/><text x="11.0416%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="10.9339%" y="325" width="0.0854%" height="15" fill="rgb(236,37,12)" fg:x="384" fg:w="3"/><text x="11.1839%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="10.9339%" y="309" width="0.0854%" height="15" fill="rgb(232,164,16)" fg:x="384" fg:w="3"/><text x="11.1839%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (38 samples, 1.08%)</title><rect x="10.0797%" y="341" width="1.0820%" height="15" fill="rgb(244,205,15)" fg:x="354" fg:w="38"/><text x="10.3297%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (5 samples, 0.14%)</title><rect x="11.0194%" y="325" width="0.1424%" height="15" fill="rgb(223,117,47)" fg:x="387" fg:w="5"/><text x="11.2694%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.14%)</title><rect x="11.0194%" y="309" width="0.1424%" height="15" fill="rgb(244,107,35)" fg:x="387" fg:w="5"/><text x="11.2694%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.14%)</title><rect x="11.0194%" y="293" width="0.1424%" height="15" fill="rgb(205,140,8)" fg:x="387" fg:w="5"/><text x="11.2694%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (208 samples, 5.92%)</title><rect x="5.2677%" y="453" width="5.9226%" height="15" fill="rgb(228,84,46)" fg:x="185" fg:w="208"/><text x="5.5177%" y="463.50">project1..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (61 samples, 1.74%)</title><rect x="9.4533%" y="437" width="1.7369%" height="15" fill="rgb(254,188,9)" fg:x="332" fg:w="61"/><text x="9.7033%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (61 samples, 1.74%)</title><rect x="9.4533%" y="421" width="1.7369%" height="15" fill="rgb(206,112,54)" fg:x="332" fg:w="61"/><text x="9.7033%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (61 samples, 1.74%)</title><rect x="9.4533%" y="405" width="1.7369%" height="15" fill="rgb(216,84,49)" fg:x="332" fg:w="61"/><text x="9.7033%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (61 samples, 1.74%)</title><rect x="9.4533%" y="389" width="1.7369%" height="15" fill="rgb(214,194,35)" fg:x="332" fg:w="61"/><text x="9.7033%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (39 samples, 1.11%)</title><rect x="10.0797%" y="373" width="1.1105%" height="15" fill="rgb(249,28,3)" fg:x="354" fg:w="39"/><text x="10.3297%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (39 samples, 1.11%)</title><rect x="10.0797%" y="357" width="1.1105%" height="15" fill="rgb(222,56,52)" fg:x="354" fg:w="39"/><text x="10.3297%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (1 samples, 0.03%)</title><rect x="11.1617%" y="341" width="0.0285%" height="15" fill="rgb(245,217,50)" fg:x="392" fg:w="1"/><text x="11.4117%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (4 samples, 0.11%)</title><rect x="11.1902%" y="421" width="0.1139%" height="15" fill="rgb(213,201,24)" fg:x="393" fg:w="4"/><text x="11.4402%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (4 samples, 0.11%)</title><rect x="11.5604%" y="357" width="0.1139%" height="15" fill="rgb(248,116,28)" fg:x="406" fg:w="4"/><text x="11.8104%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4 samples, 0.11%)</title><rect x="11.5604%" y="341" width="0.1139%" height="15" fill="rgb(219,72,43)" fg:x="406" fg:w="4"/><text x="11.8104%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="12.0729%" y="325" width="0.0854%" height="15" fill="rgb(209,138,14)" fg:x="424" fg:w="3"/><text x="12.3229%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.14%)</title><rect x="12.0729%" y="341" width="0.1424%" height="15" fill="rgb(222,18,33)" fg:x="424" fg:w="5"/><text x="12.3229%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="12.1583%" y="325" width="0.0569%" height="15" fill="rgb(213,199,7)" fg:x="427" fg:w="2"/><text x="12.4083%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="12.1583%" y="309" width="0.0569%" height="15" fill="rgb(250,110,10)" fg:x="427" fg:w="2"/><text x="12.4083%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="12.2153%" y="325" width="0.0285%" height="15" fill="rgb(248,123,6)" fg:x="429" fg:w="1"/><text x="12.4653%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="12.2153%" y="341" width="0.0569%" height="15" fill="rgb(206,91,31)" fg:x="429" fg:w="2"/><text x="12.4653%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="12.2437%" y="325" width="0.0285%" height="15" fill="rgb(211,154,13)" fg:x="430" fg:w="1"/><text x="12.4937%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="12.2437%" y="309" width="0.0285%" height="15" fill="rgb(225,148,7)" fg:x="430" fg:w="1"/><text x="12.4937%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.11%)</title><rect x="12.2722%" y="341" width="0.1139%" height="15" fill="rgb(220,160,43)" fg:x="431" fg:w="4"/><text x="12.5222%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.09%)</title><rect x="12.3007%" y="325" width="0.0854%" height="15" fill="rgb(213,52,39)" fg:x="432" fg:w="3"/><text x="12.5507%" y="335.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (7 samples, 0.20%)</title><rect x="12.3861%" y="341" width="0.1993%" height="15" fill="rgb(243,137,7)" fg:x="435" fg:w="7"/><text x="12.6361%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (7 samples, 0.20%)</title><rect x="12.3861%" y="325" width="0.1993%" height="15" fill="rgb(230,79,13)" fg:x="435" fg:w="7"/><text x="12.6361%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (7 samples, 0.20%)</title><rect x="12.3861%" y="309" width="0.1993%" height="15" fill="rgb(247,105,23)" fg:x="435" fg:w="7"/><text x="12.6361%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (7 samples, 0.20%)</title><rect x="12.3861%" y="293" width="0.1993%" height="15" fill="rgb(223,179,41)" fg:x="435" fg:w="7"/><text x="12.6361%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.06%)</title><rect x="12.5854%" y="341" width="0.0569%" height="15" fill="rgb(218,9,34)" fg:x="442" fg:w="2"/><text x="12.8354%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.09%)</title><rect x="12.6424%" y="341" width="0.0854%" height="15" fill="rgb(222,106,8)" fg:x="444" fg:w="3"/><text x="12.8924%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="12.6993%" y="325" width="0.0285%" height="15" fill="rgb(211,220,0)" fg:x="446" fg:w="1"/><text x="12.9493%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="12.7278%" y="341" width="0.0569%" height="15" fill="rgb(229,52,16)" fg:x="447" fg:w="2"/><text x="12.9778%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="12.7563%" y="325" width="0.0285%" height="15" fill="rgb(212,155,18)" fg:x="448" fg:w="1"/><text x="13.0063%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.14%)</title><rect x="12.7847%" y="341" width="0.1424%" height="15" fill="rgb(242,21,14)" fg:x="449" fg:w="5"/><text x="13.0347%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (2 samples, 0.06%)</title><rect x="12.9271%" y="341" width="0.0569%" height="15" fill="rgb(222,19,48)" fg:x="454" fg:w="2"/><text x="13.1771%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (2 samples, 0.06%)</title><rect x="12.9271%" y="325" width="0.0569%" height="15" fill="rgb(232,45,27)" fg:x="454" fg:w="2"/><text x="13.1771%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="12.9271%" y="309" width="0.0569%" height="15" fill="rgb(249,103,42)" fg:x="454" fg:w="2"/><text x="13.1771%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="12.9271%" y="293" width="0.0569%" height="15" fill="rgb(246,81,33)" fg:x="454" fg:w="2"/><text x="13.1771%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="12.9271%" y="277" width="0.0569%" height="15" fill="rgb(252,33,42)" fg:x="454" fg:w="2"/><text x="13.1771%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (4 samples, 0.11%)</title><rect x="12.9841%" y="341" width="0.1139%" height="15" fill="rgb(209,212,41)" fg:x="456" fg:w="4"/><text x="13.2341%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (4 samples, 0.11%)</title><rect x="12.9841%" y="325" width="0.1139%" height="15" fill="rgb(207,154,6)" fg:x="456" fg:w="4"/><text x="13.2341%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (55 samples, 1.57%)</title><rect x="11.6743%" y="357" width="1.5661%" height="15" fill="rgb(223,64,47)" fg:x="410" fg:w="55"/><text x="11.9243%" y="367.50"></text></g><g><title>project1::solver::types::Lit::var (5 samples, 0.14%)</title><rect x="13.0979%" y="341" width="0.1424%" height="15" fill="rgb(211,161,38)" fg:x="460" fg:w="5"/><text x="13.3479%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (66 samples, 1.88%)</title><rect x="11.3895%" y="389" width="1.8793%" height="15" fill="rgb(219,138,40)" fg:x="400" fg:w="66"/><text x="11.6395%" y="399.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (66 samples, 1.88%)</title><rect x="11.3895%" y="373" width="1.8793%" height="15" fill="rgb(241,228,46)" fg:x="400" fg:w="66"/><text x="11.6395%" y="383.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="13.2403%" y="357" width="0.0285%" height="15" fill="rgb(223,209,38)" fg:x="465" fg:w="1"/><text x="13.4903%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.2403%" y="341" width="0.0285%" height="15" fill="rgb(236,164,45)" fg:x="465" fg:w="1"/><text x="13.4903%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.2403%" y="325" width="0.0285%" height="15" fill="rgb(231,15,5)" fg:x="465" fg:w="1"/><text x="13.4903%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.2403%" y="309" width="0.0285%" height="15" fill="rgb(252,35,15)" fg:x="465" fg:w="1"/><text x="13.4903%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (77 samples, 2.19%)</title><rect x="11.1902%" y="437" width="2.1925%" height="15" fill="rgb(248,181,18)" fg:x="393" fg:w="77"/><text x="11.4402%" y="447.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (73 samples, 2.08%)</title><rect x="11.3041%" y="421" width="2.0786%" height="15" fill="rgb(233,39,42)" fg:x="397" fg:w="73"/><text x="11.5541%" y="431.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (73 samples, 2.08%)</title><rect x="11.3041%" y="405" width="2.0786%" height="15" fill="rgb(238,110,33)" fg:x="397" fg:w="73"/><text x="11.5541%" y="415.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.11%)</title><rect x="13.2688%" y="389" width="0.1139%" height="15" fill="rgb(233,195,10)" fg:x="466" fg:w="4"/><text x="13.5188%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="13.3827%" y="405" width="0.0569%" height="15" fill="rgb(254,105,3)" fg:x="470" fg:w="2"/><text x="13.6327%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (1 samples, 0.03%)</title><rect x="13.4396%" y="389" width="0.0285%" height="15" fill="rgb(221,225,9)" fg:x="472" fg:w="1"/><text x="13.6896%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (81 samples, 2.31%)</title><rect x="11.1902%" y="453" width="2.3064%" height="15" fill="rgb(224,227,45)" fg:x="393" fg:w="81"/><text x="11.4402%" y="463.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (4 samples, 0.11%)</title><rect x="13.3827%" y="437" width="0.1139%" height="15" fill="rgb(229,198,43)" fg:x="470" fg:w="4"/><text x="13.6327%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.11%)</title><rect x="13.3827%" y="421" width="0.1139%" height="15" fill="rgb(206,209,35)" fg:x="470" fg:w="4"/><text x="13.6327%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (2 samples, 0.06%)</title><rect x="13.4396%" y="405" width="0.0569%" height="15" fill="rgb(245,195,53)" fg:x="472" fg:w="2"/><text x="13.6896%" y="415.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="13.4681%" y="389" width="0.0285%" height="15" fill="rgb(240,92,26)" fg:x="473" fg:w="1"/><text x="13.7181%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="13.4681%" y="373" width="0.0285%" height="15" fill="rgb(207,40,23)" fg:x="473" fg:w="1"/><text x="13.7181%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="13.6674%" y="405" width="0.0285%" height="15" fill="rgb(223,111,35)" fg:x="480" fg:w="1"/><text x="13.9174%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (8 samples, 0.23%)</title><rect x="13.4966%" y="453" width="0.2278%" height="15" fill="rgb(229,147,28)" fg:x="474" fg:w="8"/><text x="13.7466%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (8 samples, 0.23%)</title><rect x="13.4966%" y="437" width="0.2278%" height="15" fill="rgb(211,29,28)" fg:x="474" fg:w="8"/><text x="13.7466%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="13.6674%" y="421" width="0.0569%" height="15" fill="rgb(228,72,33)" fg:x="480" fg:w="2"/><text x="13.9174%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.6959%" y="405" width="0.0285%" height="15" fill="rgb(205,214,31)" fg:x="481" fg:w="1"/><text x="13.9459%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.6959%" y="389" width="0.0285%" height="15" fill="rgb(224,111,15)" fg:x="481" fg:w="1"/><text x="13.9459%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (1 samples, 0.03%)</title><rect x="13.7244%" y="453" width="0.0285%" height="15" fill="rgb(253,21,26)" fg:x="482" fg:w="1"/><text x="13.9744%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.7244%" y="437" width="0.0285%" height="15" fill="rgb(245,139,43)" fg:x="482" fg:w="1"/><text x="13.9744%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.7244%" y="421" width="0.0285%" height="15" fill="rgb(252,170,7)" fg:x="482" fg:w="1"/><text x="13.9744%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.7244%" y="405" width="0.0285%" height="15" fill="rgb(231,118,14)" fg:x="482" fg:w="1"/><text x="13.9744%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (6 samples, 0.17%)</title><rect x="13.7528%" y="453" width="0.1708%" height="15" fill="rgb(238,83,0)" fg:x="483" fg:w="6"/><text x="14.0028%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (4 samples, 0.11%)</title><rect x="13.9237%" y="453" width="0.1139%" height="15" fill="rgb(221,39,39)" fg:x="489" fg:w="4"/><text x="14.1737%" y="463.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (4 samples, 0.11%)</title><rect x="13.9237%" y="437" width="0.1139%" height="15" fill="rgb(222,119,46)" fg:x="489" fg:w="4"/><text x="14.1737%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.11%)</title><rect x="13.9237%" y="421" width="0.1139%" height="15" fill="rgb(222,165,49)" fg:x="489" fg:w="4"/><text x="14.1737%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.11%)</title><rect x="13.9237%" y="405" width="0.1139%" height="15" fill="rgb(219,113,52)" fg:x="489" fg:w="4"/><text x="14.1737%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.11%)</title><rect x="13.9237%" y="389" width="0.1139%" height="15" fill="rgb(214,7,15)" fg:x="489" fg:w="4"/><text x="14.1737%" y="399.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (1 samples, 0.03%)</title><rect x="14.0376%" y="453" width="0.0285%" height="15" fill="rgb(235,32,4)" fg:x="493" fg:w="1"/><text x="14.2876%" y="463.50"></text></g><g><title>project1::solver::types::Lit::var (5 samples, 0.14%)</title><rect x="14.0661%" y="453" width="0.1424%" height="15" fill="rgb(238,90,54)" fg:x="494" fg:w="5"/><text x="14.3161%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (3 samples, 0.09%)</title><rect x="14.1230%" y="437" width="0.0854%" height="15" fill="rgb(213,208,19)" fg:x="496" fg:w="3"/><text x="14.3730%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (443 samples, 12.61%)</title><rect x="1.6515%" y="469" width="12.6139%" height="15" fill="rgb(233,156,4)" fg:x="58" fg:w="443"/><text x="1.9015%" y="479.50">project1::solver::c..</text></g><g><title>project1::solver::types::Lit::var_idx (2 samples, 0.06%)</title><rect x="14.2084%" y="453" width="0.0569%" height="15" fill="rgb(207,194,5)" fg:x="499" fg:w="2"/><text x="14.4584%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="14.2369%" y="437" width="0.0285%" height="15" fill="rgb(206,111,30)" fg:x="500" fg:w="1"/><text x="14.4869%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (2 samples, 0.06%)</title><rect x="14.2654%" y="469" width="0.0569%" height="15" fill="rgb(243,70,54)" fg:x="501" fg:w="2"/><text x="14.5154%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (2 samples, 0.06%)</title><rect x="14.2654%" y="453" width="0.0569%" height="15" fill="rgb(242,28,8)" fg:x="501" fg:w="2"/><text x="14.5154%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="14.2654%" y="437" width="0.0569%" height="15" fill="rgb(219,106,18)" fg:x="501" fg:w="2"/><text x="14.5154%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="14.2938%" y="421" width="0.0285%" height="15" fill="rgb(244,222,10)" fg:x="502" fg:w="1"/><text x="14.5438%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.3793%" y="453" width="0.0285%" height="15" fill="rgb(236,179,52)" fg:x="505" fg:w="1"/><text x="14.6293%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="14.3793%" y="437" width="0.0285%" height="15" fill="rgb(213,23,39)" fg:x="505" fg:w="1"/><text x="14.6293%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="14.4077%" y="453" width="0.0569%" height="15" fill="rgb(238,48,10)" fg:x="506" fg:w="2"/><text x="14.6577%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.06%)</title><rect x="14.4077%" y="437" width="0.0569%" height="15" fill="rgb(251,196,23)" fg:x="506" fg:w="2"/><text x="14.6577%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="14.4077%" y="421" width="0.0569%" height="15" fill="rgb(250,152,24)" fg:x="506" fg:w="2"/><text x="14.6577%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="14.4647%" y="453" width="0.0285%" height="15" fill="rgb(209,150,17)" fg:x="508" fg:w="1"/><text x="14.7147%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.5501%" y="437" width="0.0285%" height="15" fill="rgb(234,202,34)" fg:x="511" fg:w="1"/><text x="14.8001%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.5501%" y="421" width="0.0285%" height="15" fill="rgb(253,148,53)" fg:x="511" fg:w="1"/><text x="14.8001%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="14.5501%" y="405" width="0.0285%" height="15" fill="rgb(218,129,16)" fg:x="511" fg:w="1"/><text x="14.8001%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="14.5786%" y="421" width="0.0285%" height="15" fill="rgb(216,85,19)" fg:x="512" fg:w="1"/><text x="14.8286%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="14.5786%" y="437" width="0.0569%" height="15" fill="rgb(235,228,7)" fg:x="512" fg:w="2"/><text x="14.8286%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="14.6071%" y="421" width="0.0285%" height="15" fill="rgb(245,175,0)" fg:x="513" fg:w="1"/><text x="14.8571%" y="431.50"></text></g><g><title>core::ptr::read (9 samples, 0.26%)</title><rect x="14.6355%" y="421" width="0.2563%" height="15" fill="rgb(208,168,36)" fg:x="514" fg:w="9"/><text x="14.8855%" y="431.50"></text></g><g><title>core::mem::replace (10 samples, 0.28%)</title><rect x="14.6355%" y="437" width="0.2847%" height="15" fill="rgb(246,171,24)" fg:x="514" fg:w="10"/><text x="14.8855%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="14.8918%" y="421" width="0.0285%" height="15" fill="rgb(215,142,24)" fg:x="523" fg:w="1"/><text x="15.1418%" y="431.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="14.9203%" y="437" width="0.0285%" height="15" fill="rgb(250,187,7)" fg:x="524" fg:w="1"/><text x="15.1703%" y="447.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.03%)</title><rect x="14.9203%" y="421" width="0.0285%" height="15" fill="rgb(228,66,33)" fg:x="524" fg:w="1"/><text x="15.1703%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="14.9203%" y="405" width="0.0285%" height="15" fill="rgb(234,215,21)" fg:x="524" fg:w="1"/><text x="15.1703%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="14.9772%" y="389" width="0.0285%" height="15" fill="rgb(222,191,20)" fg:x="526" fg:w="1"/><text x="15.2272%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="15.0057%" y="261" width="0.0569%" height="15" fill="rgb(245,79,54)" fg:x="527" fg:w="2"/><text x="15.2557%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="15.0342%" y="245" width="0.0285%" height="15" fill="rgb(240,10,37)" fg:x="528" fg:w="1"/><text x="15.2842%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="15.0057%" y="341" width="0.0854%" height="15" fill="rgb(214,192,32)" fg:x="527" fg:w="3"/><text x="15.2557%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="15.0057%" y="325" width="0.0854%" height="15" fill="rgb(209,36,54)" fg:x="527" fg:w="3"/><text x="15.2557%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="15.0057%" y="309" width="0.0854%" height="15" fill="rgb(220,10,11)" fg:x="527" fg:w="3"/><text x="15.2557%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="15.0057%" y="293" width="0.0854%" height="15" fill="rgb(221,106,17)" fg:x="527" fg:w="3"/><text x="15.2557%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.09%)</title><rect x="15.0057%" y="277" width="0.0854%" height="15" fill="rgb(251,142,44)" fg:x="527" fg:w="3"/><text x="15.2557%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="15.0626%" y="261" width="0.0285%" height="15" fill="rgb(238,13,15)" fg:x="529" fg:w="1"/><text x="15.3126%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="15.0626%" y="245" width="0.0285%" height="15" fill="rgb(208,107,27)" fg:x="529" fg:w="1"/><text x="15.3126%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (7 samples, 0.20%)</title><rect x="14.9487%" y="437" width="0.1993%" height="15" fill="rgb(205,136,37)" fg:x="525" fg:w="7"/><text x="15.1987%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (6 samples, 0.17%)</title><rect x="14.9772%" y="421" width="0.1708%" height="15" fill="rgb(250,205,27)" fg:x="526" fg:w="6"/><text x="15.2272%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.17%)</title><rect x="14.9772%" y="405" width="0.1708%" height="15" fill="rgb(210,80,43)" fg:x="526" fg:w="6"/><text x="15.2272%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.14%)</title><rect x="15.0057%" y="389" width="0.1424%" height="15" fill="rgb(247,160,36)" fg:x="527" fg:w="5"/><text x="15.2557%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.14%)</title><rect x="15.0057%" y="373" width="0.1424%" height="15" fill="rgb(234,13,49)" fg:x="527" fg:w="5"/><text x="15.2557%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.14%)</title><rect x="15.0057%" y="357" width="0.1424%" height="15" fill="rgb(234,122,0)" fg:x="527" fg:w="5"/><text x="15.2557%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="15.0911%" y="341" width="0.0569%" height="15" fill="rgb(207,146,38)" fg:x="530" fg:w="2"/><text x="15.3411%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.06%)</title><rect x="15.0911%" y="325" width="0.0569%" height="15" fill="rgb(207,177,25)" fg:x="530" fg:w="2"/><text x="15.3411%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.06%)</title><rect x="15.0911%" y="309" width="0.0569%" height="15" fill="rgb(211,178,42)" fg:x="530" fg:w="2"/><text x="15.3411%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="15.1196%" y="293" width="0.0285%" height="15" fill="rgb(230,69,54)" fg:x="531" fg:w="1"/><text x="15.3696%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="15.2620%" y="261" width="0.0285%" height="15" fill="rgb(214,135,41)" fg:x="536" fg:w="1"/><text x="15.5120%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="15.2335%" y="277" width="0.0854%" height="15" fill="rgb(237,67,25)" fg:x="535" fg:w="3"/><text x="15.4835%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="15.2904%" y="261" width="0.0285%" height="15" fill="rgb(222,189,50)" fg:x="537" fg:w="1"/><text x="15.5404%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.23%)</title><rect x="15.4897%" y="261" width="0.2278%" height="15" fill="rgb(245,148,34)" fg:x="544" fg:w="8"/><text x="15.7397%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (20 samples, 0.57%)</title><rect x="15.1765%" y="325" width="0.5695%" height="15" fill="rgb(222,29,6)" fg:x="533" fg:w="20"/><text x="15.4265%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20 samples, 0.57%)</title><rect x="15.1765%" y="309" width="0.5695%" height="15" fill="rgb(221,189,43)" fg:x="533" fg:w="20"/><text x="15.4265%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (20 samples, 0.57%)</title><rect x="15.1765%" y="293" width="0.5695%" height="15" fill="rgb(207,36,27)" fg:x="533" fg:w="20"/><text x="15.4265%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.43%)</title><rect x="15.3189%" y="277" width="0.4271%" height="15" fill="rgb(217,90,24)" fg:x="538" fg:w="15"/><text x="15.5689%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="15.7175%" y="261" width="0.0285%" height="15" fill="rgb(224,66,35)" fg:x="552" fg:w="1"/><text x="15.9675%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="15.8314%" y="197" width="0.0569%" height="15" fill="rgb(221,13,50)" fg:x="556" fg:w="2"/><text x="16.0814%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.74%)</title><rect x="15.1765%" y="341" width="0.7403%" height="15" fill="rgb(236,68,49)" fg:x="533" fg:w="26"/><text x="15.4265%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.17%)</title><rect x="15.7460%" y="325" width="0.1708%" height="15" fill="rgb(229,146,28)" fg:x="553" fg:w="6"/><text x="15.9960%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (6 samples, 0.17%)</title><rect x="15.7460%" y="309" width="0.1708%" height="15" fill="rgb(225,31,38)" fg:x="553" fg:w="6"/><text x="15.9960%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (6 samples, 0.17%)</title><rect x="15.7460%" y="293" width="0.1708%" height="15" fill="rgb(250,208,3)" fg:x="553" fg:w="6"/><text x="15.9960%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (6 samples, 0.17%)</title><rect x="15.7460%" y="277" width="0.1708%" height="15" fill="rgb(246,54,23)" fg:x="553" fg:w="6"/><text x="15.9960%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.17%)</title><rect x="15.7460%" y="261" width="0.1708%" height="15" fill="rgb(243,76,11)" fg:x="553" fg:w="6"/><text x="15.9960%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.17%)</title><rect x="15.7460%" y="245" width="0.1708%" height="15" fill="rgb(245,21,50)" fg:x="553" fg:w="6"/><text x="15.9960%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.17%)</title><rect x="15.7460%" y="229" width="0.1708%" height="15" fill="rgb(228,9,43)" fg:x="553" fg:w="6"/><text x="15.9960%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.11%)</title><rect x="15.8030%" y="213" width="0.1139%" height="15" fill="rgb(208,100,47)" fg:x="555" fg:w="4"/><text x="16.0530%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="15.8884%" y="197" width="0.0285%" height="15" fill="rgb(232,26,8)" fg:x="558" fg:w="1"/><text x="16.1384%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 0.77%)</title><rect x="15.1765%" y="357" width="0.7688%" height="15" fill="rgb(216,166,38)" fg:x="533" fg:w="27"/><text x="15.4265%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="15.9169%" y="341" width="0.0285%" height="15" fill="rgb(251,202,51)" fg:x="559" fg:w="1"/><text x="16.1669%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="16.0023%" y="309" width="0.0285%" height="15" fill="rgb(254,216,34)" fg:x="562" fg:w="1"/><text x="16.2523%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="16.0023%" y="293" width="0.0285%" height="15" fill="rgb(251,32,27)" fg:x="562" fg:w="1"/><text x="16.2523%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.14%)</title><rect x="16.0308%" y="293" width="0.1424%" height="15" fill="rgb(208,127,28)" fg:x="563" fg:w="5"/><text x="16.2808%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.14%)</title><rect x="16.0308%" y="277" width="0.1424%" height="15" fill="rgb(224,137,22)" fg:x="563" fg:w="5"/><text x="16.2808%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="16.0308%" y="261" width="0.1424%" height="15" fill="rgb(254,70,32)" fg:x="563" fg:w="5"/><text x="16.2808%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.14%)</title><rect x="16.0308%" y="245" width="0.1424%" height="15" fill="rgb(229,75,37)" fg:x="563" fg:w="5"/><text x="16.2808%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.20%)</title><rect x="16.0308%" y="309" width="0.1993%" height="15" fill="rgb(252,64,23)" fg:x="563" fg:w="7"/><text x="16.2808%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="16.1731%" y="293" width="0.0569%" height="15" fill="rgb(232,162,48)" fg:x="568" fg:w="2"/><text x="16.4231%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="16.1731%" y="277" width="0.0569%" height="15" fill="rgb(246,160,12)" fg:x="568" fg:w="2"/><text x="16.4231%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="16.1731%" y="261" width="0.0569%" height="15" fill="rgb(247,166,0)" fg:x="568" fg:w="2"/><text x="16.4231%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="16.1731%" y="245" width="0.0569%" height="15" fill="rgb(249,219,21)" fg:x="568" fg:w="2"/><text x="16.4231%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.20%)</title><rect x="16.2301%" y="309" width="0.1993%" height="15" fill="rgb(205,209,3)" fg:x="570" fg:w="7"/><text x="16.4801%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="16.4294%" y="309" width="0.0569%" height="15" fill="rgb(243,44,1)" fg:x="577" fg:w="2"/><text x="16.6794%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="16.4294%" y="293" width="0.0569%" height="15" fill="rgb(206,159,16)" fg:x="577" fg:w="2"/><text x="16.6794%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="16.4294%" y="277" width="0.0569%" height="15" fill="rgb(244,77,30)" fg:x="577" fg:w="2"/><text x="16.6794%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (49 samples, 1.40%)</title><rect x="15.1765%" y="373" width="1.3952%" height="15" fill="rgb(218,69,12)" fg:x="533" fg:w="49"/><text x="15.4265%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (22 samples, 0.63%)</title><rect x="15.9453%" y="357" width="0.6264%" height="15" fill="rgb(212,87,7)" fg:x="560" fg:w="22"/><text x="16.1953%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.63%)</title><rect x="15.9453%" y="341" width="0.6264%" height="15" fill="rgb(245,114,25)" fg:x="560" fg:w="22"/><text x="16.1953%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22 samples, 0.63%)</title><rect x="15.9453%" y="325" width="0.6264%" height="15" fill="rgb(210,61,42)" fg:x="560" fg:w="22"/><text x="16.1953%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="16.4863%" y="309" width="0.0854%" height="15" fill="rgb(211,52,33)" fg:x="579" fg:w="3"/><text x="16.7363%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="16.4863%" y="293" width="0.0854%" height="15" fill="rgb(234,58,33)" fg:x="579" fg:w="3"/><text x="16.7363%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (50 samples, 1.42%)</title><rect x="15.1765%" y="421" width="1.4237%" height="15" fill="rgb(220,115,36)" fg:x="533" fg:w="50"/><text x="15.4265%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (50 samples, 1.42%)</title><rect x="15.1765%" y="405" width="1.4237%" height="15" fill="rgb(243,153,54)" fg:x="533" fg:w="50"/><text x="15.4265%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (50 samples, 1.42%)</title><rect x="15.1765%" y="389" width="1.4237%" height="15" fill="rgb(251,47,18)" fg:x="533" fg:w="50"/><text x="15.4265%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="16.5718%" y="373" width="0.0285%" height="15" fill="rgb(242,102,42)" fg:x="582" fg:w="1"/><text x="16.8218%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.06%)</title><rect x="16.6002%" y="405" width="0.0569%" height="15" fill="rgb(234,31,38)" fg:x="583" fg:w="2"/><text x="16.8502%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="16.7426%" y="389" width="0.0285%" height="15" fill="rgb(221,117,51)" fg:x="588" fg:w="1"/><text x="16.9926%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="16.7426%" y="373" width="0.0285%" height="15" fill="rgb(212,20,18)" fg:x="588" fg:w="1"/><text x="16.9926%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="16.7426%" y="357" width="0.0285%" height="15" fill="rgb(245,133,36)" fg:x="588" fg:w="1"/><text x="16.9926%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.34%)</title><rect x="16.7995%" y="357" width="0.3417%" height="15" fill="rgb(212,6,19)" fg:x="590" fg:w="12"/><text x="17.0495%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="17.2267%" y="229" width="0.0569%" height="15" fill="rgb(218,1,36)" fg:x="605" fg:w="2"/><text x="17.4767%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="17.2551%" y="213" width="0.0285%" height="15" fill="rgb(246,84,54)" fg:x="606" fg:w="1"/><text x="17.5051%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="17.3405%" y="213" width="0.0569%" height="15" fill="rgb(242,110,6)" fg:x="609" fg:w="2"/><text x="17.5905%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="17.1697%" y="277" width="0.2563%" height="15" fill="rgb(214,47,5)" fg:x="603" fg:w="9"/><text x="17.4197%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="17.1697%" y="261" width="0.2563%" height="15" fill="rgb(218,159,25)" fg:x="603" fg:w="9"/><text x="17.4197%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="17.1697%" y="245" width="0.2563%" height="15" fill="rgb(215,211,28)" fg:x="603" fg:w="9"/><text x="17.4197%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.14%)</title><rect x="17.2836%" y="229" width="0.1424%" height="15" fill="rgb(238,59,32)" fg:x="607" fg:w="5"/><text x="17.5336%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="17.3975%" y="213" width="0.0285%" height="15" fill="rgb(226,82,3)" fg:x="611" fg:w="1"/><text x="17.6475%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.28%)</title><rect x="17.1697%" y="293" width="0.2847%" height="15" fill="rgb(240,164,32)" fg:x="603" fg:w="10"/><text x="17.4197%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="17.4260%" y="277" width="0.0285%" height="15" fill="rgb(232,46,7)" fg:x="612" fg:w="1"/><text x="17.6760%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="17.4260%" y="261" width="0.0285%" height="15" fill="rgb(229,129,53)" fg:x="612" fg:w="1"/><text x="17.6760%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="17.4260%" y="245" width="0.0285%" height="15" fill="rgb(234,188,29)" fg:x="612" fg:w="1"/><text x="17.6760%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="17.4260%" y="229" width="0.0285%" height="15" fill="rgb(246,141,4)" fg:x="612" fg:w="1"/><text x="17.6760%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="17.4260%" y="213" width="0.0285%" height="15" fill="rgb(229,23,39)" fg:x="612" fg:w="1"/><text x="17.6760%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="17.4260%" y="197" width="0.0285%" height="15" fill="rgb(206,12,3)" fg:x="612" fg:w="1"/><text x="17.6760%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="17.4260%" y="181" width="0.0285%" height="15" fill="rgb(252,226,20)" fg:x="612" fg:w="1"/><text x="17.6760%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="17.4260%" y="165" width="0.0285%" height="15" fill="rgb(216,123,35)" fg:x="612" fg:w="1"/><text x="17.6760%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="17.4260%" y="149" width="0.0285%" height="15" fill="rgb(212,68,40)" fg:x="612" fg:w="1"/><text x="17.6760%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.31%)</title><rect x="17.1697%" y="309" width="0.3132%" height="15" fill="rgb(254,125,32)" fg:x="603" fg:w="11"/><text x="17.4197%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="17.4544%" y="293" width="0.0285%" height="15" fill="rgb(253,97,22)" fg:x="613" fg:w="1"/><text x="17.7044%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.11%)</title><rect x="17.5114%" y="261" width="0.1139%" height="15" fill="rgb(241,101,14)" fg:x="615" fg:w="4"/><text x="17.7614%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.11%)</title><rect x="17.5114%" y="245" width="0.1139%" height="15" fill="rgb(238,103,29)" fg:x="615" fg:w="4"/><text x="17.7614%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.03%)</title><rect x="17.5968%" y="229" width="0.0285%" height="15" fill="rgb(233,195,47)" fg:x="618" fg:w="1"/><text x="17.8468%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="17.6253%" y="245" width="0.0854%" height="15" fill="rgb(246,218,30)" fg:x="619" fg:w="3"/><text x="17.8753%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="17.6253%" y="229" width="0.0854%" height="15" fill="rgb(219,145,47)" fg:x="619" fg:w="3"/><text x="17.8753%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="17.6253%" y="213" width="0.0854%" height="15" fill="rgb(243,12,26)" fg:x="619" fg:w="3"/><text x="17.8753%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="17.6253%" y="197" width="0.0854%" height="15" fill="rgb(214,87,16)" fg:x="619" fg:w="3"/><text x="17.8753%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.14%)</title><rect x="17.6253%" y="261" width="0.1424%" height="15" fill="rgb(208,99,42)" fg:x="619" fg:w="5"/><text x="17.8753%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="17.7107%" y="245" width="0.0569%" height="15" fill="rgb(253,99,2)" fg:x="622" fg:w="2"/><text x="17.9607%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="17.7107%" y="229" width="0.0569%" height="15" fill="rgb(220,168,23)" fg:x="622" fg:w="2"/><text x="17.9607%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="17.7107%" y="213" width="0.0569%" height="15" fill="rgb(242,38,24)" fg:x="622" fg:w="2"/><text x="17.9607%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="17.7107%" y="197" width="0.0569%" height="15" fill="rgb(225,182,9)" fg:x="622" fg:w="2"/><text x="17.9607%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.09%)</title><rect x="17.7677%" y="261" width="0.0854%" height="15" fill="rgb(243,178,37)" fg:x="624" fg:w="3"/><text x="18.0177%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="17.8531%" y="261" width="0.0285%" height="15" fill="rgb(232,139,19)" fg:x="627" fg:w="1"/><text x="18.1031%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="17.8531%" y="245" width="0.0285%" height="15" fill="rgb(225,201,24)" fg:x="627" fg:w="1"/><text x="18.1031%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="17.8531%" y="229" width="0.0285%" height="15" fill="rgb(221,47,46)" fg:x="627" fg:w="1"/><text x="18.1031%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (44 samples, 1.25%)</title><rect x="16.7711%" y="389" width="1.2528%" height="15" fill="rgb(249,23,13)" fg:x="589" fg:w="44"/><text x="17.0211%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 1.25%)</title><rect x="16.7711%" y="373" width="1.2528%" height="15" fill="rgb(219,9,5)" fg:x="589" fg:w="44"/><text x="17.0211%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (31 samples, 0.88%)</title><rect x="17.1412%" y="357" width="0.8827%" height="15" fill="rgb(254,171,16)" fg:x="602" fg:w="31"/><text x="17.3912%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (31 samples, 0.88%)</title><rect x="17.1412%" y="341" width="0.8827%" height="15" fill="rgb(230,171,20)" fg:x="602" fg:w="31"/><text x="17.3912%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (30 samples, 0.85%)</title><rect x="17.1697%" y="325" width="0.8542%" height="15" fill="rgb(210,71,41)" fg:x="603" fg:w="30"/><text x="17.4197%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (19 samples, 0.54%)</title><rect x="17.4829%" y="309" width="0.5410%" height="15" fill="rgb(206,173,20)" fg:x="614" fg:w="19"/><text x="17.7329%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 0.54%)</title><rect x="17.4829%" y="293" width="0.5410%" height="15" fill="rgb(233,88,34)" fg:x="614" fg:w="19"/><text x="17.7329%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (19 samples, 0.54%)</title><rect x="17.4829%" y="277" width="0.5410%" height="15" fill="rgb(223,209,46)" fg:x="614" fg:w="19"/><text x="17.7329%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.14%)</title><rect x="17.8815%" y="261" width="0.1424%" height="15" fill="rgb(250,43,18)" fg:x="628" fg:w="5"/><text x="18.1315%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.14%)</title><rect x="17.8815%" y="245" width="0.1424%" height="15" fill="rgb(208,13,10)" fg:x="628" fg:w="5"/><text x="18.1315%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (3 samples, 0.09%)</title><rect x="18.0239%" y="389" width="0.0854%" height="15" fill="rgb(212,200,36)" fg:x="633" fg:w="3"/><text x="18.2739%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (53 samples, 1.51%)</title><rect x="16.6572%" y="405" width="1.5091%" height="15" fill="rgb(225,90,30)" fg:x="585" fg:w="53"/><text x="16.9072%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="18.1093%" y="389" width="0.0569%" height="15" fill="rgb(236,182,39)" fg:x="636" fg:w="2"/><text x="18.3593%" y="399.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="18.1378%" y="373" width="0.0285%" height="15" fill="rgb(212,144,35)" fg:x="637" fg:w="1"/><text x="18.3878%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (58 samples, 1.65%)</title><rect x="16.6002%" y="421" width="1.6515%" height="15" fill="rgb(228,63,44)" fg:x="583" fg:w="58"/><text x="16.8502%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (3 samples, 0.09%)</title><rect x="18.1663%" y="405" width="0.0854%" height="15" fill="rgb(228,109,6)" fg:x="638" fg:w="3"/><text x="18.4163%" y="415.50"></text></g><g><title>compare::Compare::compares_le (8 samples, 0.23%)</title><rect x="18.4795%" y="405" width="0.2278%" height="15" fill="rgb(238,117,24)" fg:x="649" fg:w="8"/><text x="18.7295%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (8 samples, 0.23%)</title><rect x="18.4795%" y="389" width="0.2278%" height="15" fill="rgb(242,26,26)" fg:x="649" fg:w="8"/><text x="18.7295%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (8 samples, 0.23%)</title><rect x="18.4795%" y="373" width="0.2278%" height="15" fill="rgb(221,92,48)" fg:x="649" fg:w="8"/><text x="18.7295%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="18.8212%" y="373" width="0.0285%" height="15" fill="rgb(209,209,32)" fg:x="661" fg:w="1"/><text x="19.0712%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="18.9351%" y="229" width="0.0854%" height="15" fill="rgb(221,70,22)" fg:x="665" fg:w="3"/><text x="19.1851%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.17%)</title><rect x="18.9066%" y="245" width="0.1708%" height="15" fill="rgb(248,145,5)" fg:x="664" fg:w="6"/><text x="19.1566%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="19.0205%" y="229" width="0.0569%" height="15" fill="rgb(226,116,26)" fg:x="668" fg:w="2"/><text x="19.2705%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.34%)</title><rect x="18.8781%" y="293" width="0.3417%" height="15" fill="rgb(244,5,17)" fg:x="663" fg:w="12"/><text x="19.1281%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.34%)</title><rect x="18.8781%" y="277" width="0.3417%" height="15" fill="rgb(252,159,33)" fg:x="663" fg:w="12"/><text x="19.1281%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.34%)</title><rect x="18.8781%" y="261" width="0.3417%" height="15" fill="rgb(206,71,0)" fg:x="663" fg:w="12"/><text x="19.1281%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.14%)</title><rect x="19.0774%" y="245" width="0.1424%" height="15" fill="rgb(233,118,54)" fg:x="670" fg:w="5"/><text x="19.3274%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="19.1913%" y="229" width="0.0285%" height="15" fill="rgb(234,83,48)" fg:x="674" fg:w="1"/><text x="19.4413%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.14%)</title><rect x="19.2198%" y="245" width="0.1424%" height="15" fill="rgb(228,3,54)" fg:x="675" fg:w="5"/><text x="19.4698%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (6 samples, 0.17%)</title><rect x="19.2198%" y="293" width="0.1708%" height="15" fill="rgb(226,155,13)" fg:x="675" fg:w="6"/><text x="19.4698%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (6 samples, 0.17%)</title><rect x="19.2198%" y="277" width="0.1708%" height="15" fill="rgb(241,28,37)" fg:x="675" fg:w="6"/><text x="19.4698%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (6 samples, 0.17%)</title><rect x="19.2198%" y="261" width="0.1708%" height="15" fill="rgb(233,93,10)" fg:x="675" fg:w="6"/><text x="19.4698%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="19.3622%" y="245" width="0.0285%" height="15" fill="rgb(225,113,19)" fg:x="680" fg:w="1"/><text x="19.6122%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.71%)</title><rect x="18.8781%" y="325" width="0.7118%" height="15" fill="rgb(241,2,18)" fg:x="663" fg:w="25"/><text x="19.1281%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.71%)</title><rect x="18.8781%" y="309" width="0.7118%" height="15" fill="rgb(228,207,21)" fg:x="663" fg:w="25"/><text x="19.1281%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.20%)</title><rect x="19.3907%" y="293" width="0.1993%" height="15" fill="rgb(213,211,35)" fg:x="681" fg:w="7"/><text x="19.6407%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (7 samples, 0.20%)</title><rect x="19.3907%" y="277" width="0.1993%" height="15" fill="rgb(209,83,10)" fg:x="681" fg:w="7"/><text x="19.6407%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (7 samples, 0.20%)</title><rect x="19.3907%" y="261" width="0.1993%" height="15" fill="rgb(209,164,1)" fg:x="681" fg:w="7"/><text x="19.6407%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (7 samples, 0.20%)</title><rect x="19.3907%" y="245" width="0.1993%" height="15" fill="rgb(213,184,43)" fg:x="681" fg:w="7"/><text x="19.6407%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="19.3907%" y="229" width="0.1993%" height="15" fill="rgb(231,61,34)" fg:x="681" fg:w="7"/><text x="19.6407%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="19.3907%" y="213" width="0.1993%" height="15" fill="rgb(235,75,3)" fg:x="681" fg:w="7"/><text x="19.6407%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="19.3907%" y="197" width="0.1993%" height="15" fill="rgb(220,106,47)" fg:x="681" fg:w="7"/><text x="19.6407%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.14%)</title><rect x="19.4476%" y="181" width="0.1424%" height="15" fill="rgb(210,196,33)" fg:x="683" fg:w="5"/><text x="19.6976%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="19.5615%" y="165" width="0.0285%" height="15" fill="rgb(229,154,42)" fg:x="687" fg:w="1"/><text x="19.8115%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.03%)</title><rect x="19.5900%" y="293" width="0.0285%" height="15" fill="rgb(228,114,26)" fg:x="688" fg:w="1"/><text x="19.8400%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.03%)</title><rect x="19.5900%" y="277" width="0.0285%" height="15" fill="rgb(208,144,1)" fg:x="688" fg:w="1"/><text x="19.8400%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="19.5900%" y="261" width="0.0285%" height="15" fill="rgb(239,112,37)" fg:x="688" fg:w="1"/><text x="19.8400%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="19.5900%" y="245" width="0.0285%" height="15" fill="rgb(210,96,50)" fg:x="688" fg:w="1"/><text x="19.8400%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="19.6185%" y="277" width="0.0569%" height="15" fill="rgb(222,178,2)" fg:x="689" fg:w="2"/><text x="19.8685%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="19.6185%" y="261" width="0.0569%" height="15" fill="rgb(226,74,18)" fg:x="689" fg:w="2"/><text x="19.8685%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.17%)</title><rect x="19.6754%" y="261" width="0.1708%" height="15" fill="rgb(225,67,54)" fg:x="691" fg:w="6"/><text x="19.9254%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.17%)</title><rect x="19.6754%" y="245" width="0.1708%" height="15" fill="rgb(251,92,32)" fg:x="691" fg:w="6"/><text x="19.9254%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.17%)</title><rect x="19.6754%" y="229" width="0.1708%" height="15" fill="rgb(228,149,22)" fg:x="691" fg:w="6"/><text x="19.9254%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (6 samples, 0.17%)</title><rect x="19.6754%" y="213" width="0.1708%" height="15" fill="rgb(243,54,13)" fg:x="691" fg:w="6"/><text x="19.9254%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (8 samples, 0.23%)</title><rect x="19.6754%" y="277" width="0.2278%" height="15" fill="rgb(243,180,28)" fg:x="691" fg:w="8"/><text x="19.9254%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="19.8462%" y="261" width="0.0569%" height="15" fill="rgb(208,167,24)" fg:x="697" fg:w="2"/><text x="20.0962%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="19.8462%" y="245" width="0.0569%" height="15" fill="rgb(245,73,45)" fg:x="697" fg:w="2"/><text x="20.0962%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="19.8462%" y="229" width="0.0569%" height="15" fill="rgb(237,203,48)" fg:x="697" fg:w="2"/><text x="20.0962%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="19.8462%" y="213" width="0.0569%" height="15" fill="rgb(211,197,16)" fg:x="697" fg:w="2"/><text x="20.0962%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.06%)</title><rect x="19.9032%" y="277" width="0.0569%" height="15" fill="rgb(243,99,51)" fg:x="699" fg:w="2"/><text x="20.1532%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (47 samples, 1.34%)</title><rect x="18.7073%" y="405" width="1.3383%" height="15" fill="rgb(215,123,29)" fg:x="657" fg:w="47"/><text x="18.9573%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 1.34%)</title><rect x="18.7073%" y="389" width="1.3383%" height="15" fill="rgb(239,186,37)" fg:x="657" fg:w="47"/><text x="18.9573%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (42 samples, 1.20%)</title><rect x="18.8497%" y="373" width="1.1959%" height="15" fill="rgb(252,136,39)" fg:x="662" fg:w="42"/><text x="19.0997%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (42 samples, 1.20%)</title><rect x="18.8497%" y="357" width="1.1959%" height="15" fill="rgb(223,213,32)" fg:x="662" fg:w="42"/><text x="19.0997%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (41 samples, 1.17%)</title><rect x="18.8781%" y="341" width="1.1674%" height="15" fill="rgb(233,115,5)" fg:x="663" fg:w="41"/><text x="19.1281%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (16 samples, 0.46%)</title><rect x="19.5900%" y="325" width="0.4556%" height="15" fill="rgb(207,226,44)" fg:x="688" fg:w="16"/><text x="19.8400%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.46%)</title><rect x="19.5900%" y="309" width="0.4556%" height="15" fill="rgb(208,126,0)" fg:x="688" fg:w="16"/><text x="19.8400%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.43%)</title><rect x="19.6185%" y="293" width="0.4271%" height="15" fill="rgb(244,66,21)" fg:x="689" fg:w="15"/><text x="19.8685%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="19.9601%" y="277" width="0.0854%" height="15" fill="rgb(222,97,12)" fg:x="701" fg:w="3"/><text x="20.2101%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="19.9601%" y="261" width="0.0854%" height="15" fill="rgb(219,213,19)" fg:x="701" fg:w="3"/><text x="20.2101%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::get (1 samples, 0.03%)</title><rect x="20.0456%" y="405" width="0.0285%" height="15" fill="rgb(252,169,30)" fg:x="704" fg:w="1"/><text x="20.2956%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (175 samples, 4.98%)</title><rect x="15.1481%" y="437" width="4.9829%" height="15" fill="rgb(206,32,51)" fg:x="532" fg:w="175"/><text x="15.3981%" y="447.50">mut_bi..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (66 samples, 1.88%)</title><rect x="18.2517%" y="421" width="1.8793%" height="15" fill="rgb(250,172,42)" fg:x="641" fg:w="66"/><text x="18.5017%" y="431.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="20.0740%" y="405" width="0.0569%" height="15" fill="rgb(209,34,43)" fg:x="705" fg:w="2"/><text x="20.3240%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="20.1025%" y="389" width="0.0285%" height="15" fill="rgb(223,11,35)" fg:x="706" fg:w="1"/><text x="20.3525%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="20.2449%" y="309" width="0.0854%" height="15" fill="rgb(251,219,26)" fg:x="711" fg:w="3"/><text x="20.4949%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="20.3018%" y="293" width="0.0285%" height="15" fill="rgb(231,119,3)" fg:x="713" fg:w="1"/><text x="20.5518%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.17%)</title><rect x="20.3872%" y="293" width="0.1708%" height="15" fill="rgb(216,97,11)" fg:x="716" fg:w="6"/><text x="20.6372%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="20.1879%" y="357" width="0.4271%" height="15" fill="rgb(223,59,9)" fg:x="709" fg:w="15"/><text x="20.4379%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="20.1879%" y="341" width="0.4271%" height="15" fill="rgb(233,93,31)" fg:x="709" fg:w="15"/><text x="20.4379%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="20.1879%" y="325" width="0.4271%" height="15" fill="rgb(239,81,33)" fg:x="709" fg:w="15"/><text x="20.4379%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.28%)</title><rect x="20.3303%" y="309" width="0.2847%" height="15" fill="rgb(213,120,34)" fg:x="714" fg:w="10"/><text x="20.5803%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="20.5581%" y="293" width="0.0569%" height="15" fill="rgb(243,49,53)" fg:x="722" fg:w="2"/><text x="20.8081%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.09%)</title><rect x="20.6150%" y="357" width="0.0854%" height="15" fill="rgb(247,216,33)" fg:x="724" fg:w="3"/><text x="20.8650%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.09%)</title><rect x="20.6150%" y="341" width="0.0854%" height="15" fill="rgb(226,26,14)" fg:x="724" fg:w="3"/><text x="20.8650%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.09%)</title><rect x="20.6150%" y="325" width="0.0854%" height="15" fill="rgb(215,49,53)" fg:x="724" fg:w="3"/><text x="20.8650%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (3 samples, 0.09%)</title><rect x="20.6150%" y="309" width="0.0854%" height="15" fill="rgb(245,162,40)" fg:x="724" fg:w="3"/><text x="20.8650%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.68%)</title><rect x="20.1595%" y="389" width="0.6834%" height="15" fill="rgb(229,68,17)" fg:x="708" fg:w="24"/><text x="20.4095%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.68%)</title><rect x="20.1595%" y="373" width="0.6834%" height="15" fill="rgb(213,182,10)" fg:x="708" fg:w="24"/><text x="20.4095%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.14%)</title><rect x="20.7005%" y="357" width="0.1424%" height="15" fill="rgb(245,125,30)" fg:x="727" fg:w="5"/><text x="20.9505%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.14%)</title><rect x="20.7005%" y="341" width="0.1424%" height="15" fill="rgb(232,202,2)" fg:x="727" fg:w="5"/><text x="20.9505%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.14%)</title><rect x="20.7005%" y="325" width="0.1424%" height="15" fill="rgb(237,140,51)" fg:x="727" fg:w="5"/><text x="20.9505%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.14%)</title><rect x="20.7005%" y="309" width="0.1424%" height="15" fill="rgb(236,157,25)" fg:x="727" fg:w="5"/><text x="20.9505%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.7005%" y="293" width="0.1424%" height="15" fill="rgb(219,209,0)" fg:x="727" fg:w="5"/><text x="20.9505%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.7005%" y="277" width="0.1424%" height="15" fill="rgb(240,116,54)" fg:x="727" fg:w="5"/><text x="20.9505%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.7005%" y="261" width="0.1424%" height="15" fill="rgb(216,10,36)" fg:x="727" fg:w="5"/><text x="20.9505%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="20.7574%" y="245" width="0.0854%" height="15" fill="rgb(222,72,44)" fg:x="729" fg:w="3"/><text x="21.0074%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="20.7859%" y="229" width="0.0569%" height="15" fill="rgb(232,159,9)" fg:x="730" fg:w="2"/><text x="21.0359%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="20.8428%" y="341" width="0.0569%" height="15" fill="rgb(210,39,32)" fg:x="732" fg:w="2"/><text x="21.0928%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="20.8428%" y="325" width="0.0569%" height="15" fill="rgb(216,194,45)" fg:x="732" fg:w="2"/><text x="21.0928%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.03%)</title><rect x="20.8713%" y="309" width="0.0285%" height="15" fill="rgb(218,18,35)" fg:x="733" fg:w="1"/><text x="21.1213%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (8 samples, 0.23%)</title><rect x="20.8998%" y="325" width="0.2278%" height="15" fill="rgb(207,83,51)" fg:x="734" fg:w="8"/><text x="21.1498%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8 samples, 0.23%)</title><rect x="20.8998%" y="309" width="0.2278%" height="15" fill="rgb(225,63,43)" fg:x="734" fg:w="8"/><text x="21.1498%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 0.23%)</title><rect x="20.8998%" y="293" width="0.2278%" height="15" fill="rgb(207,57,36)" fg:x="734" fg:w="8"/><text x="21.1498%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (8 samples, 0.23%)</title><rect x="20.8998%" y="277" width="0.2278%" height="15" fill="rgb(216,99,33)" fg:x="734" fg:w="8"/><text x="21.1498%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (10 samples, 0.28%)</title><rect x="20.8998%" y="341" width="0.2847%" height="15" fill="rgb(225,42,16)" fg:x="734" fg:w="10"/><text x="21.1498%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="21.1276%" y="325" width="0.0569%" height="15" fill="rgb(220,201,45)" fg:x="742" fg:w="2"/><text x="21.3776%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="21.1276%" y="309" width="0.0569%" height="15" fill="rgb(225,33,4)" fg:x="742" fg:w="2"/><text x="21.3776%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="21.1276%" y="293" width="0.0569%" height="15" fill="rgb(224,33,50)" fg:x="742" fg:w="2"/><text x="21.3776%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="21.1276%" y="277" width="0.0569%" height="15" fill="rgb(246,198,51)" fg:x="742" fg:w="2"/><text x="21.3776%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="21.1845%" y="341" width="0.0285%" height="15" fill="rgb(205,22,4)" fg:x="744" fg:w="1"/><text x="21.4345%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="21.2130%" y="341" width="0.0285%" height="15" fill="rgb(206,3,8)" fg:x="745" fg:w="1"/><text x="21.4630%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="21.2130%" y="325" width="0.0285%" height="15" fill="rgb(251,23,15)" fg:x="745" fg:w="1"/><text x="21.4630%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.2130%" y="309" width="0.0285%" height="15" fill="rgb(252,88,28)" fg:x="745" fg:w="1"/><text x="21.4630%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.14%)</title><rect x="21.2415%" y="341" width="0.1424%" height="15" fill="rgb(212,127,14)" fg:x="746" fg:w="5"/><text x="21.4915%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.14%)</title><rect x="21.2415%" y="325" width="0.1424%" height="15" fill="rgb(247,145,37)" fg:x="746" fg:w="5"/><text x="21.4915%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (45 samples, 1.28%)</title><rect x="20.1310%" y="437" width="1.2813%" height="15" fill="rgb(209,117,53)" fg:x="707" fg:w="45"/><text x="20.3810%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (45 samples, 1.28%)</title><rect x="20.1310%" y="421" width="1.2813%" height="15" fill="rgb(212,90,42)" fg:x="707" fg:w="45"/><text x="20.3810%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (45 samples, 1.28%)</title><rect x="20.1310%" y="405" width="1.2813%" height="15" fill="rgb(218,164,37)" fg:x="707" fg:w="45"/><text x="20.3810%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (20 samples, 0.57%)</title><rect x="20.8428%" y="389" width="0.5695%" height="15" fill="rgb(246,65,34)" fg:x="732" fg:w="20"/><text x="21.0928%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.57%)</title><rect x="20.8428%" y="373" width="0.5695%" height="15" fill="rgb(231,100,33)" fg:x="732" fg:w="20"/><text x="21.0928%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20 samples, 0.57%)</title><rect x="20.8428%" y="357" width="0.5695%" height="15" fill="rgb(228,126,14)" fg:x="732" fg:w="20"/><text x="21.0928%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="21.3838%" y="341" width="0.0285%" height="15" fill="rgb(215,173,21)" fg:x="751" fg:w="1"/><text x="21.6338%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="21.3838%" y="325" width="0.0285%" height="15" fill="rgb(210,6,40)" fg:x="751" fg:w="1"/><text x="21.6338%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="21.3838%" y="309" width="0.0285%" height="15" fill="rgb(212,48,18)" fg:x="751" fg:w="1"/><text x="21.6338%" y="319.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4123%" y="405" width="0.0285%" height="15" fill="rgb(230,214,11)" fg:x="752" fg:w="1"/><text x="21.6623%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4123%" y="389" width="0.0285%" height="15" fill="rgb(254,105,39)" fg:x="752" fg:w="1"/><text x="21.6623%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="21.4123%" y="373" width="0.0285%" height="15" fill="rgb(245,158,5)" fg:x="752" fg:w="1"/><text x="21.6623%" y="383.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="21.4123%" y="357" width="0.0285%" height="15" fill="rgb(249,208,11)" fg:x="752" fg:w="1"/><text x="21.6623%" y="367.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="21.4123%" y="341" width="0.0285%" height="15" fill="rgb(210,39,28)" fg:x="752" fg:w="1"/><text x="21.6623%" y="351.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="21.4123%" y="325" width="0.0285%" height="15" fill="rgb(211,56,53)" fg:x="752" fg:w="1"/><text x="21.6623%" y="335.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="21.4123%" y="309" width="0.0285%" height="15" fill="rgb(226,201,30)" fg:x="752" fg:w="1"/><text x="21.6623%" y="319.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="21.4123%" y="293" width="0.0285%" height="15" fill="rgb(239,101,34)" fg:x="752" fg:w="1"/><text x="21.6623%" y="303.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="21.4123%" y="277" width="0.0285%" height="15" fill="rgb(226,209,5)" fg:x="752" fg:w="1"/><text x="21.6623%" y="287.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="21.4123%" y="261" width="0.0285%" height="15" fill="rgb(250,105,47)" fg:x="752" fg:w="1"/><text x="21.6623%" y="271.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="21.4123%" y="245" width="0.0285%" height="15" fill="rgb(230,72,3)" fg:x="752" fg:w="1"/><text x="21.6623%" y="255.50"></text></g><g><title>idle_cpu (1 samples, 0.03%)</title><rect x="21.4123%" y="229" width="0.0285%" height="15" fill="rgb(232,218,39)" fg:x="752" fg:w="1"/><text x="21.6623%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="21.4408%" y="373" width="0.0285%" height="15" fill="rgb(248,166,6)" fg:x="753" fg:w="1"/><text x="21.6908%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="21.4408%" y="357" width="0.0285%" height="15" fill="rgb(247,89,20)" fg:x="753" fg:w="1"/><text x="21.6908%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="21.4408%" y="341" width="0.0285%" height="15" fill="rgb(248,130,54)" fg:x="753" fg:w="1"/><text x="21.6908%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="21.4408%" y="325" width="0.0285%" height="15" fill="rgb(234,196,4)" fg:x="753" fg:w="1"/><text x="21.6908%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.06%)</title><rect x="21.4408%" y="405" width="0.0569%" height="15" fill="rgb(250,143,31)" fg:x="753" fg:w="2"/><text x="21.6908%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="21.4408%" y="389" width="0.0569%" height="15" fill="rgb(211,110,34)" fg:x="753" fg:w="2"/><text x="21.6908%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="21.4692%" y="373" width="0.0285%" height="15" fill="rgb(215,124,48)" fg:x="754" fg:w="1"/><text x="21.7192%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="21.4692%" y="357" width="0.0285%" height="15" fill="rgb(216,46,13)" fg:x="754" fg:w="1"/><text x="21.7192%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="21.4692%" y="341" width="0.0285%" height="15" fill="rgb(205,184,25)" fg:x="754" fg:w="1"/><text x="21.7192%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="21.4692%" y="325" width="0.0285%" height="15" fill="rgb(228,1,10)" fg:x="754" fg:w="1"/><text x="21.7192%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="21.4692%" y="309" width="0.0285%" height="15" fill="rgb(213,116,27)" fg:x="754" fg:w="1"/><text x="21.7192%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="21.4692%" y="293" width="0.0285%" height="15" fill="rgb(241,95,50)" fg:x="754" fg:w="1"/><text x="21.7192%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="21.4692%" y="277" width="0.0285%" height="15" fill="rgb(238,48,32)" fg:x="754" fg:w="1"/><text x="21.7192%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="21.4692%" y="261" width="0.0285%" height="15" fill="rgb(235,113,49)" fg:x="754" fg:w="1"/><text x="21.7192%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="21.4692%" y="245" width="0.0285%" height="15" fill="rgb(205,127,43)" fg:x="754" fg:w="1"/><text x="21.7192%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (248 samples, 7.06%)</title><rect x="14.4932%" y="453" width="7.0615%" height="15" fill="rgb(250,162,2)" fg:x="509" fg:w="248"/><text x="14.7432%" y="463.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.14%)</title><rect x="21.4123%" y="437" width="0.1424%" height="15" fill="rgb(220,13,41)" fg:x="752" fg:w="5"/><text x="21.6623%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.14%)</title><rect x="21.4123%" y="421" width="0.1424%" height="15" fill="rgb(249,221,25)" fg:x="752" fg:w="5"/><text x="21.6623%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.06%)</title><rect x="21.4977%" y="405" width="0.0569%" height="15" fill="rgb(215,208,19)" fg:x="755" fg:w="2"/><text x="21.7477%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.06%)</title><rect x="21.4977%" y="389" width="0.0569%" height="15" fill="rgb(236,175,2)" fg:x="755" fg:w="2"/><text x="21.7477%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="21.5262%" y="373" width="0.0285%" height="15" fill="rgb(241,52,2)" fg:x="756" fg:w="1"/><text x="21.7762%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (255 samples, 7.26%)</title><rect x="14.3223%" y="469" width="7.2608%" height="15" fill="rgb(248,140,14)" fg:x="503" fg:w="255"/><text x="14.5723%" y="479.50">project1::..</text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="21.5547%" y="453" width="0.0285%" height="15" fill="rgb(253,22,42)" fg:x="757" fg:w="1"/><text x="21.8047%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="21.5547%" y="437" width="0.0285%" height="15" fill="rgb(234,61,47)" fg:x="757" fg:w="1"/><text x="21.8047%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="21.5831%" y="453" width="0.0285%" height="15" fill="rgb(208,226,15)" fg:x="758" fg:w="1"/><text x="21.8331%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="21.5831%" y="437" width="0.0285%" height="15" fill="rgb(217,221,4)" fg:x="758" fg:w="1"/><text x="21.8331%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="21.5831%" y="421" width="0.0285%" height="15" fill="rgb(212,174,34)" fg:x="758" fg:w="1"/><text x="21.8331%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (1 samples, 0.03%)</title><rect x="21.5831%" y="405" width="0.0285%" height="15" fill="rgb(253,83,4)" fg:x="758" fg:w="1"/><text x="21.8331%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="21.5831%" y="389" width="0.0285%" height="15" fill="rgb(250,195,49)" fg:x="758" fg:w="1"/><text x="21.8331%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.03%)</title><rect x="21.5831%" y="373" width="0.0285%" height="15" fill="rgb(241,192,25)" fg:x="758" fg:w="1"/><text x="21.8331%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.03%)</title><rect x="21.5831%" y="357" width="0.0285%" height="15" fill="rgb(208,124,10)" fg:x="758" fg:w="1"/><text x="21.8331%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="21.5831%" y="341" width="0.0285%" height="15" fill="rgb(222,33,0)" fg:x="758" fg:w="1"/><text x="21.8331%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="21.5831%" y="325" width="0.0285%" height="15" fill="rgb(234,209,28)" fg:x="758" fg:w="1"/><text x="21.8331%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="21.5831%" y="309" width="0.0285%" height="15" fill="rgb(224,11,23)" fg:x="758" fg:w="1"/><text x="21.8331%" y="319.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="21.5831%" y="293" width="0.0285%" height="15" fill="rgb(232,99,1)" fg:x="758" fg:w="1"/><text x="21.8331%" y="303.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="21.5831%" y="277" width="0.0285%" height="15" fill="rgb(237,95,45)" fg:x="758" fg:w="1"/><text x="21.8331%" y="287.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="21.5831%" y="261" width="0.0285%" height="15" fill="rgb(208,109,11)" fg:x="758" fg:w="1"/><text x="21.8331%" y="271.50"></text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="21.6116%" y="453" width="0.0285%" height="15" fill="rgb(216,190,48)" fg:x="759" fg:w="1"/><text x="21.8616%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="21.6116%" y="437" width="0.0285%" height="15" fill="rgb(251,171,36)" fg:x="759" fg:w="1"/><text x="21.8616%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="21.6116%" y="421" width="0.0285%" height="15" fill="rgb(230,62,22)" fg:x="759" fg:w="1"/><text x="21.8616%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="21.6970%" y="405" width="0.0285%" height="15" fill="rgb(225,114,35)" fg:x="762" fg:w="1"/><text x="21.9470%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="21.6970%" y="389" width="0.0285%" height="15" fill="rgb(215,118,42)" fg:x="762" fg:w="1"/><text x="21.9470%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="21.6970%" y="373" width="0.0285%" height="15" fill="rgb(243,119,21)" fg:x="762" fg:w="1"/><text x="21.9470%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1 samples, 0.03%)</title><rect x="21.6970%" y="357" width="0.0285%" height="15" fill="rgb(252,177,53)" fg:x="762" fg:w="1"/><text x="21.9470%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (1 samples, 0.03%)</title><rect x="21.6970%" y="341" width="0.0285%" height="15" fill="rgb(237,209,29)" fg:x="762" fg:w="1"/><text x="21.9470%" y="351.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (1 samples, 0.03%)</title><rect x="21.6970%" y="325" width="0.0285%" height="15" fill="rgb(212,65,23)" fg:x="762" fg:w="1"/><text x="21.9470%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="21.6970%" y="309" width="0.0285%" height="15" fill="rgb(230,222,46)" fg:x="762" fg:w="1"/><text x="21.9470%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="21.7255%" y="357" width="0.0285%" height="15" fill="rgb(215,135,32)" fg:x="763" fg:w="1"/><text x="21.9755%" y="367.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="21.7540%" y="341" width="0.0285%" height="15" fill="rgb(246,101,22)" fg:x="764" fg:w="1"/><text x="22.0040%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="21.7540%" y="325" width="0.0285%" height="15" fill="rgb(206,107,13)" fg:x="764" fg:w="1"/><text x="22.0040%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="21.7825%" y="341" width="0.0285%" height="15" fill="rgb(250,100,44)" fg:x="765" fg:w="1"/><text x="22.0325%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.8109%" y="325" width="0.0285%" height="15" fill="rgb(231,147,38)" fg:x="766" fg:w="1"/><text x="22.0609%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.06%)</title><rect x="21.8394%" y="293" width="0.0569%" height="15" fill="rgb(229,8,40)" fg:x="767" fg:w="2"/><text x="22.0894%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (4 samples, 0.11%)</title><rect x="21.8394%" y="325" width="0.1139%" height="15" fill="rgb(221,135,30)" fg:x="767" fg:w="4"/><text x="22.0894%" y="335.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="21.8394%" y="309" width="0.1139%" height="15" fill="rgb(249,193,18)" fg:x="767" fg:w="4"/><text x="22.0894%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (2 samples, 0.06%)</title><rect x="21.8964%" y="293" width="0.0569%" height="15" fill="rgb(209,133,39)" fg:x="769" fg:w="2"/><text x="22.1464%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.06%)</title><rect x="21.8964%" y="277" width="0.0569%" height="15" fill="rgb(232,100,14)" fg:x="769" fg:w="2"/><text x="22.1464%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.06%)</title><rect x="21.8964%" y="261" width="0.0569%" height="15" fill="rgb(224,185,1)" fg:x="769" fg:w="2"/><text x="22.1464%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="21.9248%" y="245" width="0.0285%" height="15" fill="rgb(223,139,8)" fg:x="770" fg:w="1"/><text x="22.1748%" y="255.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="21.9248%" y="229" width="0.0285%" height="15" fill="rgb(232,213,38)" fg:x="770" fg:w="1"/><text x="22.1748%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="21.9248%" y="213" width="0.0285%" height="15" fill="rgb(207,94,22)" fg:x="770" fg:w="1"/><text x="22.1748%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.03%)</title><rect x="21.9533%" y="325" width="0.0285%" height="15" fill="rgb(219,183,54)" fg:x="771" fg:w="1"/><text x="22.2033%" y="335.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.03%)</title><rect x="21.9533%" y="309" width="0.0285%" height="15" fill="rgb(216,185,54)" fg:x="771" fg:w="1"/><text x="22.2033%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="21.9533%" y="293" width="0.0285%" height="15" fill="rgb(254,217,39)" fg:x="771" fg:w="1"/><text x="22.2033%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="21.9533%" y="277" width="0.0285%" height="15" fill="rgb(240,178,23)" fg:x="771" fg:w="1"/><text x="22.2033%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="21.9533%" y="261" width="0.0285%" height="15" fill="rgb(218,11,47)" fg:x="771" fg:w="1"/><text x="22.2033%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="22.0103%" y="277" width="0.0569%" height="15" fill="rgb(218,51,51)" fg:x="773" fg:w="2"/><text x="22.2603%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.11%)</title><rect x="21.9818%" y="293" width="0.1139%" height="15" fill="rgb(238,126,27)" fg:x="772" fg:w="4"/><text x="22.2318%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="22.0672%" y="277" width="0.0285%" height="15" fill="rgb(249,202,22)" fg:x="775" fg:w="1"/><text x="22.3172%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="22.0672%" y="261" width="0.0285%" height="15" fill="rgb(254,195,49)" fg:x="775" fg:w="1"/><text x="22.3172%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.09%)</title><rect x="22.0957%" y="293" width="0.0854%" height="15" fill="rgb(208,123,14)" fg:x="776" fg:w="3"/><text x="22.3457%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.06%)</title><rect x="22.1241%" y="277" width="0.0569%" height="15" fill="rgb(224,200,8)" fg:x="777" fg:w="2"/><text x="22.3741%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.06%)</title><rect x="22.1241%" y="261" width="0.0569%" height="15" fill="rgb(217,61,36)" fg:x="777" fg:w="2"/><text x="22.3741%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="22.1811%" y="293" width="0.0285%" height="15" fill="rgb(206,35,45)" fg:x="779" fg:w="1"/><text x="22.4311%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (17 samples, 0.48%)</title><rect x="21.9818%" y="325" width="0.4841%" height="15" fill="rgb(217,65,33)" fg:x="772" fg:w="17"/><text x="22.2318%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (17 samples, 0.48%)</title><rect x="21.9818%" y="309" width="0.4841%" height="15" fill="rgb(222,158,48)" fg:x="772" fg:w="17"/><text x="22.2318%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.26%)</title><rect x="22.2096%" y="293" width="0.2563%" height="15" fill="rgb(254,2,54)" fg:x="780" fg:w="9"/><text x="22.4596%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.26%)</title><rect x="22.2096%" y="277" width="0.2563%" height="15" fill="rgb(250,143,38)" fg:x="780" fg:w="9"/><text x="22.4596%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.26%)</title><rect x="22.2096%" y="261" width="0.2563%" height="15" fill="rgb(248,25,0)" fg:x="780" fg:w="9"/><text x="22.4596%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.14%)</title><rect x="22.4658%" y="293" width="0.1424%" height="15" fill="rgb(206,152,27)" fg:x="789" fg:w="5"/><text x="22.7158%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.11%)</title><rect x="22.4943%" y="277" width="0.1139%" height="15" fill="rgb(240,77,30)" fg:x="790" fg:w="4"/><text x="22.7443%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.11%)</title><rect x="22.4943%" y="261" width="0.1139%" height="15" fill="rgb(231,5,3)" fg:x="790" fg:w="4"/><text x="22.7443%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.11%)</title><rect x="22.4943%" y="245" width="0.1139%" height="15" fill="rgb(207,226,32)" fg:x="790" fg:w="4"/><text x="22.7443%" y="255.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.11%)</title><rect x="22.4943%" y="229" width="0.1139%" height="15" fill="rgb(222,207,47)" fg:x="790" fg:w="4"/><text x="22.7443%" y="239.50"></text></g><g><title>__rdl_alloc (4 samples, 0.11%)</title><rect x="22.4943%" y="213" width="0.1139%" height="15" fill="rgb(229,115,45)" fg:x="790" fg:w="4"/><text x="22.7443%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.11%)</title><rect x="22.4943%" y="197" width="0.1139%" height="15" fill="rgb(224,191,6)" fg:x="790" fg:w="4"/><text x="22.7443%" y="207.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="22.4943%" y="181" width="0.1139%" height="15" fill="rgb(230,227,24)" fg:x="790" fg:w="4"/><text x="22.7443%" y="191.50"></text></g><g><title>tcache_get (3 samples, 0.09%)</title><rect x="22.5228%" y="165" width="0.0854%" height="15" fill="rgb(228,80,19)" fg:x="791" fg:w="3"/><text x="22.7728%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (31 samples, 0.88%)</title><rect x="21.8109%" y="341" width="0.8827%" height="15" fill="rgb(247,229,0)" fg:x="766" fg:w="31"/><text x="22.0609%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (8 samples, 0.23%)</title><rect x="22.4658%" y="325" width="0.2278%" height="15" fill="rgb(237,194,15)" fg:x="789" fg:w="8"/><text x="22.7158%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (8 samples, 0.23%)</title><rect x="22.4658%" y="309" width="0.2278%" height="15" fill="rgb(219,203,20)" fg:x="789" fg:w="8"/><text x="22.7158%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (3 samples, 0.09%)</title><rect x="22.6082%" y="293" width="0.0854%" height="15" fill="rgb(234,128,8)" fg:x="794" fg:w="3"/><text x="22.8582%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (35 samples, 1.00%)</title><rect x="21.7255%" y="389" width="0.9966%" height="15" fill="rgb(248,202,8)" fg:x="763" fg:w="35"/><text x="21.9755%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 1.00%)</title><rect x="21.7255%" y="373" width="0.9966%" height="15" fill="rgb(206,104,37)" fg:x="763" fg:w="35"/><text x="21.9755%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (34 samples, 0.97%)</title><rect x="21.7540%" y="357" width="0.9681%" height="15" fill="rgb(223,8,27)" fg:x="764" fg:w="34"/><text x="22.0040%" y="367.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="22.6936%" y="341" width="0.0285%" height="15" fill="rgb(216,217,28)" fg:x="797" fg:w="1"/><text x="22.9436%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="22.7221%" y="373" width="0.0569%" height="15" fill="rgb(249,199,1)" fg:x="798" fg:w="2"/><text x="22.9721%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="22.7221%" y="357" width="0.0569%" height="15" fill="rgb(240,85,17)" fg:x="798" fg:w="2"/><text x="22.9721%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (1 samples, 0.03%)</title><rect x="22.7790%" y="373" width="0.0285%" height="15" fill="rgb(206,108,45)" fg:x="800" fg:w="1"/><text x="23.0290%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="22.7790%" y="357" width="0.0285%" height="15" fill="rgb(245,210,41)" fg:x="800" fg:w="1"/><text x="23.0290%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="22.7790%" y="341" width="0.0285%" height="15" fill="rgb(206,13,37)" fg:x="800" fg:w="1"/><text x="23.0290%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="22.7790%" y="325" width="0.0285%" height="15" fill="rgb(250,61,18)" fg:x="800" fg:w="1"/><text x="23.0290%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (1 samples, 0.03%)</title><rect x="22.7790%" y="309" width="0.0285%" height="15" fill="rgb(235,172,48)" fg:x="800" fg:w="1"/><text x="23.0290%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.06%)</title><rect x="22.8075%" y="373" width="0.0569%" height="15" fill="rgb(249,201,17)" fg:x="801" fg:w="2"/><text x="23.0575%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="22.8360%" y="357" width="0.0285%" height="15" fill="rgb(219,208,6)" fg:x="802" fg:w="1"/><text x="23.0860%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="22.8360%" y="341" width="0.0285%" height="15" fill="rgb(248,31,23)" fg:x="802" fg:w="1"/><text x="23.0860%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.06%)</title><rect x="22.8645%" y="373" width="0.0569%" height="15" fill="rgb(245,15,42)" fg:x="803" fg:w="2"/><text x="23.1145%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.06%)</title><rect x="22.8645%" y="357" width="0.0569%" height="15" fill="rgb(222,217,39)" fg:x="803" fg:w="2"/><text x="23.1145%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.17%)</title><rect x="22.9214%" y="373" width="0.1708%" height="15" fill="rgb(210,219,27)" fg:x="805" fg:w="6"/><text x="23.1714%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.09%)</title><rect x="23.0923%" y="373" width="0.0854%" height="15" fill="rgb(252,166,36)" fg:x="811" fg:w="3"/><text x="23.3423%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.09%)</title><rect x="23.0923%" y="357" width="0.0854%" height="15" fill="rgb(245,132,34)" fg:x="811" fg:w="3"/><text x="23.3423%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="23.0923%" y="341" width="0.0854%" height="15" fill="rgb(236,54,3)" fg:x="811" fg:w="3"/><text x="23.3423%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (54 samples, 1.54%)</title><rect x="21.7255%" y="405" width="1.5376%" height="15" fill="rgb(241,173,43)" fg:x="763" fg:w="54"/><text x="21.9755%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (19 samples, 0.54%)</title><rect x="22.7221%" y="389" width="0.5410%" height="15" fill="rgb(215,190,9)" fg:x="798" fg:w="19"/><text x="22.9721%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="23.1777%" y="373" width="0.0854%" height="15" fill="rgb(242,101,16)" fg:x="814" fg:w="3"/><text x="23.4277%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="23.1777%" y="357" width="0.0854%" height="15" fill="rgb(223,190,21)" fg:x="814" fg:w="3"/><text x="23.4277%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.06%)</title><rect x="23.2631%" y="389" width="0.0569%" height="15" fill="rgb(215,228,25)" fg:x="817" fg:w="2"/><text x="23.5131%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.06%)</title><rect x="23.2631%" y="373" width="0.0569%" height="15" fill="rgb(225,36,22)" fg:x="817" fg:w="2"/><text x="23.5131%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="23.2631%" y="357" width="0.0569%" height="15" fill="rgb(251,106,46)" fg:x="817" fg:w="2"/><text x="23.5131%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="23.2631%" y="341" width="0.0569%" height="15" fill="rgb(208,90,1)" fg:x="817" fg:w="2"/><text x="23.5131%" y="351.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (1 samples, 0.03%)</title><rect x="23.3200%" y="373" width="0.0285%" height="15" fill="rgb(243,10,4)" fg:x="819" fg:w="1"/><text x="23.5700%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="23.3485%" y="373" width="0.0285%" height="15" fill="rgb(212,137,27)" fg:x="820" fg:w="1"/><text x="23.5985%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="23.3485%" y="357" width="0.0285%" height="15" fill="rgb(231,220,49)" fg:x="820" fg:w="1"/><text x="23.5985%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (64 samples, 1.82%)</title><rect x="21.5831%" y="469" width="1.8223%" height="15" fill="rgb(237,96,20)" fg:x="758" fg:w="64"/><text x="21.8331%" y="479.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (62 samples, 1.77%)</title><rect x="21.6401%" y="453" width="1.7654%" height="15" fill="rgb(239,229,30)" fg:x="760" fg:w="62"/><text x="21.8901%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (62 samples, 1.77%)</title><rect x="21.6401%" y="437" width="1.7654%" height="15" fill="rgb(219,65,33)" fg:x="760" fg:w="62"/><text x="21.8901%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61 samples, 1.74%)</title><rect x="21.6686%" y="421" width="1.7369%" height="15" fill="rgb(243,134,7)" fg:x="761" fg:w="61"/><text x="21.9186%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.14%)</title><rect x="23.2631%" y="405" width="0.1424%" height="15" fill="rgb(216,177,54)" fg:x="817" fg:w="5"/><text x="23.5131%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.09%)</title><rect x="23.3200%" y="389" width="0.0854%" height="15" fill="rgb(211,160,20)" fg:x="819" fg:w="3"/><text x="23.5700%" y="399.50"></text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.03%)</title><rect x="23.3770%" y="373" width="0.0285%" height="15" fill="rgb(239,85,39)" fg:x="821" fg:w="1"/><text x="23.6270%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="23.4339%" y="421" width="0.0285%" height="15" fill="rgb(232,125,22)" fg:x="823" fg:w="1"/><text x="23.6839%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (1 samples, 0.03%)</title><rect x="23.4339%" y="405" width="0.0285%" height="15" fill="rgb(244,57,34)" fg:x="823" fg:w="1"/><text x="23.6839%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="23.4339%" y="389" width="0.0285%" height="15" fill="rgb(214,203,32)" fg:x="823" fg:w="1"/><text x="23.6839%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="23.4339%" y="373" width="0.0285%" height="15" fill="rgb(207,58,43)" fg:x="823" fg:w="1"/><text x="23.6839%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="23.4339%" y="357" width="0.0285%" height="15" fill="rgb(215,193,15)" fg:x="823" fg:w="1"/><text x="23.6839%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="23.4339%" y="341" width="0.0285%" height="15" fill="rgb(232,15,44)" fg:x="823" fg:w="1"/><text x="23.6839%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="23.4339%" y="325" width="0.0285%" height="15" fill="rgb(212,3,48)" fg:x="823" fg:w="1"/><text x="23.6839%" y="335.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="23.4339%" y="309" width="0.0285%" height="15" fill="rgb(218,128,7)" fg:x="823" fg:w="1"/><text x="23.6839%" y="319.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="23.5194%" y="373" width="0.0285%" height="15" fill="rgb(226,216,39)" fg:x="826" fg:w="1"/><text x="23.7694%" y="383.50"></text></g><g><title>__cgroup_throttle_swaprate (1 samples, 0.03%)</title><rect x="23.5478%" y="261" width="0.0285%" height="15" fill="rgb(243,47,51)" fg:x="827" fg:w="1"/><text x="23.7978%" y="271.50"></text></g><g><title>blk_cgroup_congested (1 samples, 0.03%)</title><rect x="23.5478%" y="245" width="0.0285%" height="15" fill="rgb(241,183,40)" fg:x="827" fg:w="1"/><text x="23.7978%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (2 samples, 0.06%)</title><rect x="23.5763%" y="245" width="0.0569%" height="15" fill="rgb(231,217,32)" fg:x="828" fg:w="2"/><text x="23.8263%" y="255.50"></text></g><g><title>__mem_cgroup_charge (3 samples, 0.09%)</title><rect x="23.5763%" y="261" width="0.0854%" height="15" fill="rgb(229,61,38)" fg:x="828" fg:w="3"/><text x="23.8263%" y="271.50"></text></g><g><title>memcg_check_events (1 samples, 0.03%)</title><rect x="23.6333%" y="245" width="0.0285%" height="15" fill="rgb(225,210,5)" fg:x="830" fg:w="1"/><text x="23.8833%" y="255.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (2 samples, 0.06%)</title><rect x="23.6617%" y="261" width="0.0569%" height="15" fill="rgb(231,79,45)" fg:x="831" fg:w="2"/><text x="23.9117%" y="271.50"></text></g><g><title>lru_cache_add (2 samples, 0.06%)</title><rect x="23.6617%" y="245" width="0.0569%" height="15" fill="rgb(224,100,7)" fg:x="831" fg:w="2"/><text x="23.9117%" y="255.50"></text></g><g><title>folio_add_lru (2 samples, 0.06%)</title><rect x="23.6617%" y="229" width="0.0569%" height="15" fill="rgb(241,198,18)" fg:x="831" fg:w="2"/><text x="23.9117%" y="239.50"></text></g><g><title>__pagevec_lru_add (2 samples, 0.06%)</title><rect x="23.6617%" y="213" width="0.0569%" height="15" fill="rgb(252,97,53)" fg:x="831" fg:w="2"/><text x="23.9117%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.03%)</title><rect x="23.6902%" y="197" width="0.0285%" height="15" fill="rgb(220,88,7)" fg:x="832" fg:w="1"/><text x="23.9402%" y="207.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="23.6902%" y="181" width="0.0285%" height="15" fill="rgb(213,176,14)" fg:x="832" fg:w="1"/><text x="23.9402%" y="191.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.03%)</title><rect x="23.6902%" y="165" width="0.0285%" height="15" fill="rgb(246,73,7)" fg:x="832" fg:w="1"/><text x="23.9402%" y="175.50"></text></g><g><title>handle_mm_fault (9 samples, 0.26%)</title><rect x="23.5478%" y="325" width="0.2563%" height="15" fill="rgb(245,64,36)" fg:x="827" fg:w="9"/><text x="23.7978%" y="335.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.26%)</title><rect x="23.5478%" y="309" width="0.2563%" height="15" fill="rgb(245,80,10)" fg:x="827" fg:w="9"/><text x="23.7978%" y="319.50"></text></g><g><title>handle_pte_fault (9 samples, 0.26%)</title><rect x="23.5478%" y="293" width="0.2563%" height="15" fill="rgb(232,107,50)" fg:x="827" fg:w="9"/><text x="23.7978%" y="303.50"></text></g><g><title>do_anonymous_page (9 samples, 0.26%)</title><rect x="23.5478%" y="277" width="0.2563%" height="15" fill="rgb(253,3,0)" fg:x="827" fg:w="9"/><text x="23.7978%" y="287.50"></text></g><g><title>vma_alloc_folio (3 samples, 0.09%)</title><rect x="23.7187%" y="261" width="0.0854%" height="15" fill="rgb(212,99,53)" fg:x="833" fg:w="3"/><text x="23.9687%" y="271.50"></text></g><g><title>__folio_alloc (3 samples, 0.09%)</title><rect x="23.7187%" y="245" width="0.0854%" height="15" fill="rgb(249,111,54)" fg:x="833" fg:w="3"/><text x="23.9687%" y="255.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="23.7472%" y="229" width="0.0569%" height="15" fill="rgb(249,55,30)" fg:x="834" fg:w="2"/><text x="23.9972%" y="239.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="23.7472%" y="213" width="0.0569%" height="15" fill="rgb(237,47,42)" fg:x="834" fg:w="2"/><text x="23.9972%" y="223.50"></text></g><g><title>clear_page_erms (2 samples, 0.06%)</title><rect x="23.7472%" y="197" width="0.0569%" height="15" fill="rgb(211,20,18)" fg:x="834" fg:w="2"/><text x="23.9972%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.37%)</title><rect x="23.4624%" y="405" width="0.3702%" height="15" fill="rgb(231,203,46)" fg:x="824" fg:w="13"/><text x="23.7124%" y="415.50"></text></g><g><title>core::ptr::write (11 samples, 0.31%)</title><rect x="23.5194%" y="389" width="0.3132%" height="15" fill="rgb(237,142,3)" fg:x="826" fg:w="11"/><text x="23.7694%" y="399.50"></text></g><g><title>asm_exc_page_fault (10 samples, 0.28%)</title><rect x="23.5478%" y="373" width="0.2847%" height="15" fill="rgb(241,107,1)" fg:x="827" fg:w="10"/><text x="23.7978%" y="383.50"></text></g><g><title>exc_page_fault (10 samples, 0.28%)</title><rect x="23.5478%" y="357" width="0.2847%" height="15" fill="rgb(229,83,13)" fg:x="827" fg:w="10"/><text x="23.7978%" y="367.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.28%)</title><rect x="23.5478%" y="341" width="0.2847%" height="15" fill="rgb(241,91,40)" fg:x="827" fg:w="10"/><text x="23.7978%" y="351.50"></text></g><g><title>mem_cgroup_from_task (1 samples, 0.03%)</title><rect x="23.8041%" y="325" width="0.0285%" height="15" fill="rgb(225,3,45)" fg:x="836" fg:w="1"/><text x="24.0541%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (19 samples, 0.54%)</title><rect x="23.4055%" y="469" width="0.5410%" height="15" fill="rgb(244,223,14)" fg:x="822" fg:w="19"/><text x="23.6555%" y="479.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (19 samples, 0.54%)</title><rect x="23.4055%" y="453" width="0.5410%" height="15" fill="rgb(224,124,37)" fg:x="822" fg:w="19"/><text x="23.6555%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (19 samples, 0.54%)</title><rect x="23.4055%" y="437" width="0.5410%" height="15" fill="rgb(251,171,30)" fg:x="822" fg:w="19"/><text x="23.6555%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (17 samples, 0.48%)</title><rect x="23.4624%" y="421" width="0.4841%" height="15" fill="rgb(236,46,54)" fg:x="824" fg:w="17"/><text x="23.7124%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (4 samples, 0.11%)</title><rect x="23.8326%" y="405" width="0.1139%" height="15" fill="rgb(245,213,5)" fg:x="837" fg:w="4"/><text x="24.0826%" y="415.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (4 samples, 0.11%)</title><rect x="23.8326%" y="389" width="0.1139%" height="15" fill="rgb(230,144,27)" fg:x="837" fg:w="4"/><text x="24.0826%" y="399.50"></text></g><g><title>project1::solver::clause::Clause::with_key (4 samples, 0.11%)</title><rect x="23.8326%" y="373" width="0.1139%" height="15" fill="rgb(220,86,6)" fg:x="837" fg:w="4"/><text x="24.0826%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.11%)</title><rect x="23.8326%" y="357" width="0.1139%" height="15" fill="rgb(240,20,13)" fg:x="837" fg:w="4"/><text x="24.0826%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.11%)</title><rect x="23.8326%" y="341" width="0.1139%" height="15" fill="rgb(217,89,34)" fg:x="837" fg:w="4"/><text x="24.0826%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.11%)</title><rect x="23.8326%" y="325" width="0.1139%" height="15" fill="rgb(229,13,5)" fg:x="837" fg:w="4"/><text x="24.0826%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.11%)</title><rect x="23.8326%" y="309" width="0.1139%" height="15" fill="rgb(244,67,35)" fg:x="837" fg:w="4"/><text x="24.0826%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.11%)</title><rect x="23.8326%" y="293" width="0.1139%" height="15" fill="rgb(221,40,2)" fg:x="837" fg:w="4"/><text x="24.0826%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.11%)</title><rect x="23.8326%" y="277" width="0.1139%" height="15" fill="rgb(237,157,21)" fg:x="837" fg:w="4"/><text x="24.0826%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.11%)</title><rect x="23.8326%" y="261" width="0.1139%" height="15" fill="rgb(222,94,11)" fg:x="837" fg:w="4"/><text x="24.0826%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.11%)</title><rect x="23.8326%" y="245" width="0.1139%" height="15" fill="rgb(249,113,6)" fg:x="837" fg:w="4"/><text x="24.0826%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.11%)</title><rect x="23.8326%" y="229" width="0.1139%" height="15" fill="rgb(238,137,36)" fg:x="837" fg:w="4"/><text x="24.0826%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.11%)</title><rect x="23.8326%" y="213" width="0.1139%" height="15" fill="rgb(210,102,26)" fg:x="837" fg:w="4"/><text x="24.0826%" y="223.50"></text></g><g><title>__rdl_alloc (4 samples, 0.11%)</title><rect x="23.8326%" y="197" width="0.1139%" height="15" fill="rgb(218,30,30)" fg:x="837" fg:w="4"/><text x="24.0826%" y="207.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.11%)</title><rect x="23.8326%" y="181" width="0.1139%" height="15" fill="rgb(214,67,26)" fg:x="837" fg:w="4"/><text x="24.0826%" y="191.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="23.8326%" y="165" width="0.1139%" height="15" fill="rgb(251,9,53)" fg:x="837" fg:w="4"/><text x="24.0826%" y="175.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="23.8895%" y="149" width="0.0569%" height="15" fill="rgb(228,204,25)" fg:x="839" fg:w="2"/><text x="24.1395%" y="159.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decay_clause_activity (1 samples, 0.03%)</title><rect x="23.9465%" y="469" width="0.0285%" height="15" fill="rgb(207,153,8)" fg:x="841" fg:w="1"/><text x="24.1965%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="24.0034%" y="357" width="0.0285%" height="15" fill="rgb(242,9,16)" fg:x="843" fg:w="1"/><text x="24.2534%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="24.0034%" y="341" width="0.0285%" height="15" fill="rgb(217,211,10)" fg:x="843" fg:w="1"/><text x="24.2534%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.0034%" y="325" width="0.0285%" height="15" fill="rgb(219,228,52)" fg:x="843" fg:w="1"/><text x="24.2534%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.0034%" y="309" width="0.0285%" height="15" fill="rgb(231,92,29)" fg:x="843" fg:w="1"/><text x="24.2534%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.0034%" y="293" width="0.0285%" height="15" fill="rgb(232,8,23)" fg:x="843" fg:w="1"/><text x="24.2534%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.0034%" y="277" width="0.0285%" height="15" fill="rgb(216,211,34)" fg:x="843" fg:w="1"/><text x="24.2534%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="24.0319%" y="309" width="0.0285%" height="15" fill="rgb(236,151,0)" fg:x="844" fg:w="1"/><text x="24.2819%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="24.0319%" y="293" width="0.0285%" height="15" fill="rgb(209,168,3)" fg:x="844" fg:w="1"/><text x="24.2819%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="24.0319%" y="277" width="0.0285%" height="15" fill="rgb(208,129,28)" fg:x="844" fg:w="1"/><text x="24.2819%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="24.0319%" y="261" width="0.0285%" height="15" fill="rgb(229,78,22)" fg:x="844" fg:w="1"/><text x="24.2819%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="24.0319%" y="245" width="0.0285%" height="15" fill="rgb(228,187,13)" fg:x="844" fg:w="1"/><text x="24.2819%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.06%)</title><rect x="24.0319%" y="341" width="0.0569%" height="15" fill="rgb(240,119,24)" fg:x="844" fg:w="2"/><text x="24.2819%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.06%)</title><rect x="24.0319%" y="325" width="0.0569%" height="15" fill="rgb(209,194,42)" fg:x="844" fg:w="2"/><text x="24.2819%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="24.0604%" y="309" width="0.0285%" height="15" fill="rgb(247,200,46)" fg:x="845" fg:w="1"/><text x="24.3104%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="24.0604%" y="293" width="0.0285%" height="15" fill="rgb(218,76,16)" fg:x="845" fg:w="1"/><text x="24.3104%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (4 samples, 0.11%)</title><rect x="24.0034%" y="437" width="0.1139%" height="15" fill="rgb(225,21,48)" fg:x="843" fg:w="4"/><text x="24.2534%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (4 samples, 0.11%)</title><rect x="24.0034%" y="421" width="0.1139%" height="15" fill="rgb(239,223,50)" fg:x="843" fg:w="4"/><text x="24.2534%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (4 samples, 0.11%)</title><rect x="24.0034%" y="405" width="0.1139%" height="15" fill="rgb(244,45,21)" fg:x="843" fg:w="4"/><text x="24.2534%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (4 samples, 0.11%)</title><rect x="24.0034%" y="389" width="0.1139%" height="15" fill="rgb(232,33,43)" fg:x="843" fg:w="4"/><text x="24.2534%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.11%)</title><rect x="24.0034%" y="373" width="0.1139%" height="15" fill="rgb(209,8,3)" fg:x="843" fg:w="4"/><text x="24.2534%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.09%)</title><rect x="24.0319%" y="357" width="0.0854%" height="15" fill="rgb(214,25,53)" fg:x="844" fg:w="3"/><text x="24.2819%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.03%)</title><rect x="24.0888%" y="341" width="0.0285%" height="15" fill="rgb(254,186,54)" fg:x="846" fg:w="1"/><text x="24.3388%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.03%)</title><rect x="24.0888%" y="325" width="0.0285%" height="15" fill="rgb(208,174,49)" fg:x="846" fg:w="1"/><text x="24.3388%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (1 samples, 0.03%)</title><rect x="24.0888%" y="309" width="0.0285%" height="15" fill="rgb(233,191,51)" fg:x="846" fg:w="1"/><text x="24.3388%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (1 samples, 0.03%)</title><rect x="24.0888%" y="293" width="0.0285%" height="15" fill="rgb(222,134,10)" fg:x="846" fg:w="1"/><text x="24.3388%" y="303.50"></text></g><g><title>hashbrown::raw::offset_from (1 samples, 0.03%)</title><rect x="24.0888%" y="277" width="0.0285%" height="15" fill="rgb(230,226,20)" fg:x="846" fg:w="1"/><text x="24.3388%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.03%)</title><rect x="24.0888%" y="261" width="0.0285%" height="15" fill="rgb(251,111,25)" fg:x="846" fg:w="1"/><text x="24.3388%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="24.1173%" y="341" width="0.0285%" height="15" fill="rgb(224,40,46)" fg:x="847" fg:w="1"/><text x="24.3673%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.1743%" y="213" width="0.0285%" height="15" fill="rgb(236,108,47)" fg:x="849" fg:w="1"/><text x="24.4243%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.1743%" y="197" width="0.0285%" height="15" fill="rgb(234,93,0)" fg:x="849" fg:w="1"/><text x="24.4243%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.1743%" y="261" width="0.0569%" height="15" fill="rgb(224,213,32)" fg:x="849" fg:w="2"/><text x="24.4243%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.1743%" y="245" width="0.0569%" height="15" fill="rgb(251,11,48)" fg:x="849" fg:w="2"/><text x="24.4243%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.06%)</title><rect x="24.1743%" y="229" width="0.0569%" height="15" fill="rgb(236,173,5)" fg:x="849" fg:w="2"/><text x="24.4243%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.2027%" y="213" width="0.0285%" height="15" fill="rgb(230,95,12)" fg:x="850" fg:w="1"/><text x="24.4527%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="24.1743%" y="293" width="0.0854%" height="15" fill="rgb(232,209,1)" fg:x="849" fg:w="3"/><text x="24.4243%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="24.1743%" y="277" width="0.0854%" height="15" fill="rgb(232,6,1)" fg:x="849" fg:w="3"/><text x="24.4243%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="24.2312%" y="261" width="0.0285%" height="15" fill="rgb(210,224,50)" fg:x="851" fg:w="1"/><text x="24.4812%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="24.2312%" y="245" width="0.0285%" height="15" fill="rgb(228,127,35)" fg:x="851" fg:w="1"/><text x="24.4812%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="24.2312%" y="229" width="0.0285%" height="15" fill="rgb(245,102,45)" fg:x="851" fg:w="1"/><text x="24.4812%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="24.2312%" y="213" width="0.0285%" height="15" fill="rgb(214,1,49)" fg:x="851" fg:w="1"/><text x="24.4812%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.2312%" y="197" width="0.0285%" height="15" fill="rgb(226,163,40)" fg:x="851" fg:w="1"/><text x="24.4812%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.2312%" y="181" width="0.0285%" height="15" fill="rgb(239,212,28)" fg:x="851" fg:w="1"/><text x="24.4812%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.2312%" y="165" width="0.0285%" height="15" fill="rgb(220,20,13)" fg:x="851" fg:w="1"/><text x="24.4812%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.2312%" y="149" width="0.0285%" height="15" fill="rgb(210,164,35)" fg:x="851" fg:w="1"/><text x="24.4812%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.2312%" y="133" width="0.0285%" height="15" fill="rgb(248,109,41)" fg:x="851" fg:w="1"/><text x="24.4812%" y="143.50"></text></g><g><title>core::mem::drop (6 samples, 0.17%)</title><rect x="24.1173%" y="389" width="0.1708%" height="15" fill="rgb(238,23,50)" fg:x="847" fg:w="6"/><text x="24.3673%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (6 samples, 0.17%)</title><rect x="24.1173%" y="373" width="0.1708%" height="15" fill="rgb(211,48,49)" fg:x="847" fg:w="6"/><text x="24.3673%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.17%)</title><rect x="24.1173%" y="357" width="0.1708%" height="15" fill="rgb(223,36,21)" fg:x="847" fg:w="6"/><text x="24.3673%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.14%)</title><rect x="24.1458%" y="341" width="0.1424%" height="15" fill="rgb(207,123,46)" fg:x="848" fg:w="5"/><text x="24.3958%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.14%)</title><rect x="24.1458%" y="325" width="0.1424%" height="15" fill="rgb(240,218,32)" fg:x="848" fg:w="5"/><text x="24.3958%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.14%)</title><rect x="24.1458%" y="309" width="0.1424%" height="15" fill="rgb(252,5,43)" fg:x="848" fg:w="5"/><text x="24.3958%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="24.2597%" y="293" width="0.0285%" height="15" fill="rgb(252,84,19)" fg:x="852" fg:w="1"/><text x="24.5097%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="24.2597%" y="277" width="0.0285%" height="15" fill="rgb(243,152,39)" fg:x="852" fg:w="1"/><text x="24.5097%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="24.2597%" y="261" width="0.0285%" height="15" fill="rgb(234,160,15)" fg:x="852" fg:w="1"/><text x="24.5097%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="24.2597%" y="245" width="0.0285%" height="15" fill="rgb(237,34,20)" fg:x="852" fg:w="1"/><text x="24.5097%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="24.2597%" y="229" width="0.0285%" height="15" fill="rgb(229,97,13)" fg:x="852" fg:w="1"/><text x="24.5097%" y="239.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (1 samples, 0.03%)</title><rect x="24.2882%" y="389" width="0.0285%" height="15" fill="rgb(234,71,50)" fg:x="853" fg:w="1"/><text x="24.5382%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="24.2882%" y="373" width="0.0285%" height="15" fill="rgb(253,155,4)" fg:x="853" fg:w="1"/><text x="24.5382%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="24.2882%" y="357" width="0.0285%" height="15" fill="rgb(222,185,37)" fg:x="853" fg:w="1"/><text x="24.5382%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="24.2882%" y="341" width="0.0285%" height="15" fill="rgb(251,177,13)" fg:x="853" fg:w="1"/><text x="24.5382%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="24.2882%" y="325" width="0.0285%" height="15" fill="rgb(250,179,40)" fg:x="853" fg:w="1"/><text x="24.5382%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.03%)</title><rect x="24.2882%" y="309" width="0.0285%" height="15" fill="rgb(242,44,2)" fg:x="853" fg:w="1"/><text x="24.5382%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="24.2882%" y="293" width="0.0285%" height="15" fill="rgb(216,177,13)" fg:x="853" fg:w="1"/><text x="24.5382%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="24.2882%" y="277" width="0.0285%" height="15" fill="rgb(216,106,43)" fg:x="853" fg:w="1"/><text x="24.5382%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.2882%" y="261" width="0.0285%" height="15" fill="rgb(216,183,2)" fg:x="853" fg:w="1"/><text x="24.5382%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.2882%" y="245" width="0.0285%" height="15" fill="rgb(249,75,3)" fg:x="853" fg:w="1"/><text x="24.5382%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.2882%" y="229" width="0.0285%" height="15" fill="rgb(219,67,39)" fg:x="853" fg:w="1"/><text x="24.5382%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.2882%" y="213" width="0.0285%" height="15" fill="rgb(253,228,2)" fg:x="853" fg:w="1"/><text x="24.5382%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.2882%" y="197" width="0.0285%" height="15" fill="rgb(235,138,27)" fg:x="853" fg:w="1"/><text x="24.5382%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="24.4305%" y="245" width="0.0569%" height="15" fill="rgb(236,97,51)" fg:x="858" fg:w="2"/><text x="24.6805%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="24.4305%" y="229" width="0.0569%" height="15" fill="rgb(240,80,30)" fg:x="858" fg:w="2"/><text x="24.6805%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="24.5159%" y="229" width="0.0569%" height="15" fill="rgb(230,178,19)" fg:x="861" fg:w="2"/><text x="24.7659%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="24.4305%" y="293" width="0.1708%" height="15" fill="rgb(210,190,27)" fg:x="858" fg:w="6"/><text x="24.6805%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="24.4305%" y="277" width="0.1708%" height="15" fill="rgb(222,107,31)" fg:x="858" fg:w="6"/><text x="24.6805%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="24.4305%" y="261" width="0.1708%" height="15" fill="rgb(216,127,34)" fg:x="858" fg:w="6"/><text x="24.6805%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.11%)</title><rect x="24.4875%" y="245" width="0.1139%" height="15" fill="rgb(234,116,52)" fg:x="860" fg:w="4"/><text x="24.7375%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="24.5729%" y="229" width="0.0285%" height="15" fill="rgb(222,124,15)" fg:x="863" fg:w="1"/><text x="24.8229%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.28%)</title><rect x="24.4021%" y="309" width="0.2847%" height="15" fill="rgb(231,179,28)" fg:x="857" fg:w="10"/><text x="24.6521%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="24.6014%" y="293" width="0.0854%" height="15" fill="rgb(226,93,45)" fg:x="864" fg:w="3"/><text x="24.8514%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="24.6014%" y="277" width="0.0854%" height="15" fill="rgb(215,8,51)" fg:x="864" fg:w="3"/><text x="24.8514%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="24.6014%" y="261" width="0.0854%" height="15" fill="rgb(223,106,5)" fg:x="864" fg:w="3"/><text x="24.8514%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="24.6014%" y="245" width="0.0854%" height="15" fill="rgb(250,191,5)" fg:x="864" fg:w="3"/><text x="24.8514%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="24.6014%" y="229" width="0.0854%" height="15" fill="rgb(242,132,44)" fg:x="864" fg:w="3"/><text x="24.8514%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="24.6014%" y="213" width="0.0854%" height="15" fill="rgb(251,152,29)" fg:x="864" fg:w="3"/><text x="24.8514%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="24.6014%" y="197" width="0.0854%" height="15" fill="rgb(218,179,5)" fg:x="864" fg:w="3"/><text x="24.8514%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="24.6298%" y="181" width="0.0569%" height="15" fill="rgb(227,67,19)" fg:x="865" fg:w="2"/><text x="24.8798%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="24.6583%" y="165" width="0.0285%" height="15" fill="rgb(233,119,31)" fg:x="866" fg:w="1"/><text x="24.9083%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.31%)</title><rect x="24.4021%" y="325" width="0.3132%" height="15" fill="rgb(241,120,22)" fg:x="857" fg:w="11"/><text x="24.6521%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="24.6868%" y="309" width="0.0285%" height="15" fill="rgb(224,102,30)" fg:x="867" fg:w="1"/><text x="24.9368%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.03%)</title><rect x="24.7153%" y="293" width="0.0285%" height="15" fill="rgb(210,164,37)" fg:x="868" fg:w="1"/><text x="24.9653%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.03%)</title><rect x="24.7153%" y="277" width="0.0285%" height="15" fill="rgb(226,191,16)" fg:x="868" fg:w="1"/><text x="24.9653%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="24.7153%" y="261" width="0.0285%" height="15" fill="rgb(214,40,45)" fg:x="868" fg:w="1"/><text x="24.9653%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="24.7153%" y="245" width="0.0285%" height="15" fill="rgb(244,29,26)" fg:x="868" fg:w="1"/><text x="24.9653%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="24.7722%" y="277" width="0.0285%" height="15" fill="rgb(216,16,5)" fg:x="870" fg:w="1"/><text x="25.0222%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="24.7722%" y="261" width="0.0285%" height="15" fill="rgb(249,76,35)" fg:x="870" fg:w="1"/><text x="25.0222%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="24.8007%" y="261" width="0.0854%" height="15" fill="rgb(207,11,44)" fg:x="871" fg:w="3"/><text x="25.0507%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="24.8007%" y="245" width="0.0854%" height="15" fill="rgb(228,190,49)" fg:x="871" fg:w="3"/><text x="25.0507%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="24.8007%" y="229" width="0.0854%" height="15" fill="rgb(214,173,12)" fg:x="871" fg:w="3"/><text x="25.0507%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="24.8007%" y="213" width="0.0854%" height="15" fill="rgb(218,26,35)" fg:x="871" fg:w="3"/><text x="25.0507%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.11%)</title><rect x="24.8007%" y="277" width="0.1139%" height="15" fill="rgb(220,200,19)" fg:x="871" fg:w="4"/><text x="25.0507%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="24.8861%" y="261" width="0.0285%" height="15" fill="rgb(239,95,49)" fg:x="874" fg:w="1"/><text x="25.1361%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="24.8861%" y="245" width="0.0285%" height="15" fill="rgb(235,85,53)" fg:x="874" fg:w="1"/><text x="25.1361%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="24.8861%" y="229" width="0.0285%" height="15" fill="rgb(233,133,31)" fg:x="874" fg:w="1"/><text x="25.1361%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="24.8861%" y="213" width="0.0285%" height="15" fill="rgb(218,25,20)" fg:x="874" fg:w="1"/><text x="25.1361%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.11%)</title><rect x="24.9146%" y="277" width="0.1139%" height="15" fill="rgb(252,210,38)" fg:x="875" fg:w="4"/><text x="25.1646%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="25.0285%" y="277" width="0.0569%" height="15" fill="rgb(242,134,21)" fg:x="879" fg:w="2"/><text x="25.2785%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="25.0285%" y="261" width="0.0569%" height="15" fill="rgb(213,28,48)" fg:x="879" fg:w="2"/><text x="25.2785%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="25.0285%" y="245" width="0.0569%" height="15" fill="rgb(250,196,2)" fg:x="879" fg:w="2"/><text x="25.2785%" y="255.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (41 samples, 1.17%)</title><rect x="23.9749%" y="469" width="1.1674%" height="15" fill="rgb(227,5,17)" fg:x="842" fg:w="41"/><text x="24.2249%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (40 samples, 1.14%)</title><rect x="24.0034%" y="453" width="1.1390%" height="15" fill="rgb(221,226,24)" fg:x="843" fg:w="40"/><text x="24.2534%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (36 samples, 1.03%)</title><rect x="24.1173%" y="437" width="1.0251%" height="15" fill="rgb(211,5,48)" fg:x="847" fg:w="36"/><text x="24.3673%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (36 samples, 1.03%)</title><rect x="24.1173%" y="421" width="1.0251%" height="15" fill="rgb(219,150,6)" fg:x="847" fg:w="36"/><text x="24.3673%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (36 samples, 1.03%)</title><rect x="24.1173%" y="405" width="1.0251%" height="15" fill="rgb(251,46,16)" fg:x="847" fg:w="36"/><text x="24.3673%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (29 samples, 0.83%)</title><rect x="24.3166%" y="389" width="0.8257%" height="15" fill="rgb(220,204,40)" fg:x="854" fg:w="29"/><text x="24.5666%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (28 samples, 0.80%)</title><rect x="24.3451%" y="373" width="0.7973%" height="15" fill="rgb(211,85,2)" fg:x="855" fg:w="28"/><text x="24.5951%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (28 samples, 0.80%)</title><rect x="24.3451%" y="357" width="0.7973%" height="15" fill="rgb(229,17,7)" fg:x="855" fg:w="28"/><text x="24.5951%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (28 samples, 0.80%)</title><rect x="24.3451%" y="341" width="0.7973%" height="15" fill="rgb(239,72,28)" fg:x="855" fg:w="28"/><text x="24.5951%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (15 samples, 0.43%)</title><rect x="24.7153%" y="325" width="0.4271%" height="15" fill="rgb(230,47,54)" fg:x="868" fg:w="15"/><text x="24.9653%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.43%)</title><rect x="24.7153%" y="309" width="0.4271%" height="15" fill="rgb(214,50,8)" fg:x="868" fg:w="15"/><text x="24.9653%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (14 samples, 0.40%)</title><rect x="24.7437%" y="293" width="0.3986%" height="15" fill="rgb(216,198,43)" fg:x="869" fg:w="14"/><text x="24.9937%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.06%)</title><rect x="25.0854%" y="277" width="0.0569%" height="15" fill="rgb(234,20,35)" fg:x="881" fg:w="2"/><text x="25.3354%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.06%)</title><rect x="25.0854%" y="261" width="0.0569%" height="15" fill="rgb(254,45,19)" fg:x="881" fg:w="2"/><text x="25.3354%" y="271.50"></text></g><g><title>down_read_trylock (1 samples, 0.03%)</title><rect x="25.1424%" y="165" width="0.0285%" height="15" fill="rgb(219,14,44)" fg:x="883" fg:w="1"/><text x="25.3924%" y="175.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.03%)</title><rect x="25.1708%" y="149" width="0.0285%" height="15" fill="rgb(217,220,26)" fg:x="884" fg:w="1"/><text x="25.4208%" y="159.50"></text></g><g><title>__count_memcg_events (1 samples, 0.03%)</title><rect x="25.1708%" y="133" width="0.0285%" height="15" fill="rgb(213,158,28)" fg:x="884" fg:w="1"/><text x="25.4208%" y="143.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.09%)</title><rect x="25.1424%" y="213" width="0.0854%" height="15" fill="rgb(252,51,52)" fg:x="883" fg:w="3"/><text x="25.3924%" y="223.50"></text></g><g><title>exc_page_fault (3 samples, 0.09%)</title><rect x="25.1424%" y="197" width="0.0854%" height="15" fill="rgb(246,89,16)" fg:x="883" fg:w="3"/><text x="25.3924%" y="207.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.09%)</title><rect x="25.1424%" y="181" width="0.0854%" height="15" fill="rgb(216,158,49)" fg:x="883" fg:w="3"/><text x="25.3924%" y="191.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="25.1708%" y="165" width="0.0569%" height="15" fill="rgb(236,107,19)" fg:x="884" fg:w="2"/><text x="25.4208%" y="175.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="25.1993%" y="149" width="0.0285%" height="15" fill="rgb(228,185,30)" fg:x="885" fg:w="1"/><text x="25.4493%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="25.1424%" y="389" width="0.2563%" height="15" fill="rgb(246,134,8)" fg:x="883" fg:w="9"/><text x="25.3924%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="25.1424%" y="373" width="0.2563%" height="15" fill="rgb(214,143,50)" fg:x="883" fg:w="9"/><text x="25.3924%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.26%)</title><rect x="25.1424%" y="357" width="0.2563%" height="15" fill="rgb(228,75,8)" fg:x="883" fg:w="9"/><text x="25.3924%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.26%)</title><rect x="25.1424%" y="341" width="0.2563%" height="15" fill="rgb(207,175,4)" fg:x="883" fg:w="9"/><text x="25.3924%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.26%)</title><rect x="25.1424%" y="325" width="0.2563%" height="15" fill="rgb(205,108,24)" fg:x="883" fg:w="9"/><text x="25.3924%" y="335.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.26%)</title><rect x="25.1424%" y="309" width="0.2563%" height="15" fill="rgb(244,120,49)" fg:x="883" fg:w="9"/><text x="25.3924%" y="319.50"></text></g><g><title>__rdl_alloc (9 samples, 0.26%)</title><rect x="25.1424%" y="293" width="0.2563%" height="15" fill="rgb(223,47,38)" fg:x="883" fg:w="9"/><text x="25.3924%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.26%)</title><rect x="25.1424%" y="277" width="0.2563%" height="15" fill="rgb(229,179,11)" fg:x="883" fg:w="9"/><text x="25.3924%" y="287.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.26%)</title><rect x="25.1424%" y="261" width="0.2563%" height="15" fill="rgb(231,122,1)" fg:x="883" fg:w="9"/><text x="25.3924%" y="271.50"></text></g><g><title>_int_malloc (9 samples, 0.26%)</title><rect x="25.1424%" y="245" width="0.2563%" height="15" fill="rgb(245,119,9)" fg:x="883" fg:w="9"/><text x="25.3924%" y="255.50"></text></g><g><title>sysmalloc (9 samples, 0.26%)</title><rect x="25.1424%" y="229" width="0.2563%" height="15" fill="rgb(241,163,25)" fg:x="883" fg:w="9"/><text x="25.3924%" y="239.50"></text></g><g><title>grow_heap (6 samples, 0.17%)</title><rect x="25.2278%" y="213" width="0.1708%" height="15" fill="rgb(217,214,3)" fg:x="886" fg:w="6"/><text x="25.4778%" y="223.50"></text></g><g><title>__GI___mprotect (6 samples, 0.17%)</title><rect x="25.2278%" y="197" width="0.1708%" height="15" fill="rgb(240,86,28)" fg:x="886" fg:w="6"/><text x="25.4778%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.17%)</title><rect x="25.2278%" y="181" width="0.1708%" height="15" fill="rgb(215,47,9)" fg:x="886" fg:w="6"/><text x="25.4778%" y="191.50"></text></g><g><title>do_syscall_64 (5 samples, 0.14%)</title><rect x="25.2563%" y="165" width="0.1424%" height="15" fill="rgb(252,25,45)" fg:x="887" fg:w="5"/><text x="25.5063%" y="175.50"></text></g><g><title>__x64_sys_mprotect (5 samples, 0.14%)</title><rect x="25.2563%" y="149" width="0.1424%" height="15" fill="rgb(251,164,9)" fg:x="887" fg:w="5"/><text x="25.5063%" y="159.50"></text></g><g><title>do_mprotect_pkey (5 samples, 0.14%)</title><rect x="25.2563%" y="133" width="0.1424%" height="15" fill="rgb(233,194,0)" fg:x="887" fg:w="5"/><text x="25.5063%" y="143.50"></text></g><g><title>mprotect_fixup (5 samples, 0.14%)</title><rect x="25.2563%" y="117" width="0.1424%" height="15" fill="rgb(249,111,24)" fg:x="887" fg:w="5"/><text x="25.5063%" y="127.50"></text></g><g><title>perf_event_mmap (5 samples, 0.14%)</title><rect x="25.2563%" y="101" width="0.1424%" height="15" fill="rgb(250,223,3)" fg:x="887" fg:w="5"/><text x="25.5063%" y="111.50"></text></g><g><title>perf_event_mmap_event (5 samples, 0.14%)</title><rect x="25.2563%" y="85" width="0.1424%" height="15" fill="rgb(236,178,37)" fg:x="887" fg:w="5"/><text x="25.5063%" y="95.50"></text></g><g><title>perf_iterate_sb (4 samples, 0.11%)</title><rect x="25.2847%" y="69" width="0.1139%" height="15" fill="rgb(241,158,50)" fg:x="888" fg:w="4"/><text x="25.5347%" y="79.50"></text></g><g><title>perf_iterate_ctx (4 samples, 0.11%)</title><rect x="25.2847%" y="53" width="0.1139%" height="15" fill="rgb(213,121,41)" fg:x="888" fg:w="4"/><text x="25.5347%" y="63.50"></text></g><g><title>perf_output_copy (1 samples, 0.03%)</title><rect x="25.3702%" y="37" width="0.0285%" height="15" fill="rgb(240,92,3)" fg:x="891" fg:w="1"/><text x="25.6202%" y="47.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.06%)</title><rect x="25.4556%" y="245" width="0.0569%" height="15" fill="rgb(205,123,3)" fg:x="894" fg:w="2"/><text x="25.7056%" y="255.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 0.03%)</title><rect x="25.5125%" y="229" width="0.0285%" height="15" fill="rgb(205,97,47)" fg:x="896" fg:w="1"/><text x="25.7625%" y="239.50"></text></g><g><title>lru_cache_add (1 samples, 0.03%)</title><rect x="25.5125%" y="213" width="0.0285%" height="15" fill="rgb(247,152,14)" fg:x="896" fg:w="1"/><text x="25.7625%" y="223.50"></text></g><g><title>folio_add_lru (1 samples, 0.03%)</title><rect x="25.5125%" y="197" width="0.0285%" height="15" fill="rgb(248,195,53)" fg:x="896" fg:w="1"/><text x="25.7625%" y="207.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.03%)</title><rect x="25.5125%" y="181" width="0.0285%" height="15" fill="rgb(226,201,16)" fg:x="896" fg:w="1"/><text x="25.7625%" y="191.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="25.5125%" y="165" width="0.0285%" height="15" fill="rgb(205,98,0)" fg:x="896" fg:w="1"/><text x="25.7625%" y="175.50"></text></g><g><title>set_pte (1 samples, 0.03%)</title><rect x="25.5410%" y="229" width="0.0285%" height="15" fill="rgb(214,191,48)" fg:x="897" fg:w="1"/><text x="25.7910%" y="239.50"></text></g><g><title>clear_page_erms (1 samples, 0.03%)</title><rect x="25.5695%" y="165" width="0.0285%" height="15" fill="rgb(237,112,39)" fg:x="898" fg:w="1"/><text x="25.8195%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.48%)</title><rect x="25.1424%" y="453" width="0.4841%" height="15" fill="rgb(247,203,27)" fg:x="883" fg:w="17"/><text x="25.3924%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.48%)</title><rect x="25.1424%" y="437" width="0.4841%" height="15" fill="rgb(235,124,28)" fg:x="883" fg:w="17"/><text x="25.3924%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.48%)</title><rect x="25.1424%" y="421" width="0.4841%" height="15" fill="rgb(208,207,46)" fg:x="883" fg:w="17"/><text x="25.3924%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.48%)</title><rect x="25.1424%" y="405" width="0.4841%" height="15" fill="rgb(234,176,4)" fg:x="883" fg:w="17"/><text x="25.3924%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.23%)</title><rect x="25.3986%" y="389" width="0.2278%" height="15" fill="rgb(230,133,28)" fg:x="892" fg:w="8"/><text x="25.6486%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.23%)</title><rect x="25.3986%" y="373" width="0.2278%" height="15" fill="rgb(211,137,40)" fg:x="892" fg:w="8"/><text x="25.6486%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (8 samples, 0.23%)</title><rect x="25.3986%" y="357" width="0.2278%" height="15" fill="rgb(254,35,13)" fg:x="892" fg:w="8"/><text x="25.6486%" y="367.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="341" width="0.1708%" height="15" fill="rgb(225,49,51)" fg:x="894" fg:w="6"/><text x="25.7056%" y="351.50"></text></g><g><title>exc_page_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="325" width="0.1708%" height="15" fill="rgb(251,10,15)" fg:x="894" fg:w="6"/><text x="25.7056%" y="335.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="309" width="0.1708%" height="15" fill="rgb(228,207,15)" fg:x="894" fg:w="6"/><text x="25.7056%" y="319.50"></text></g><g><title>handle_mm_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="293" width="0.1708%" height="15" fill="rgb(241,99,19)" fg:x="894" fg:w="6"/><text x="25.7056%" y="303.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="277" width="0.1708%" height="15" fill="rgb(207,104,49)" fg:x="894" fg:w="6"/><text x="25.7056%" y="287.50"></text></g><g><title>handle_pte_fault (6 samples, 0.17%)</title><rect x="25.4556%" y="261" width="0.1708%" height="15" fill="rgb(234,99,18)" fg:x="894" fg:w="6"/><text x="25.7056%" y="271.50"></text></g><g><title>do_anonymous_page (4 samples, 0.11%)</title><rect x="25.5125%" y="245" width="0.1139%" height="15" fill="rgb(213,191,49)" fg:x="896" fg:w="4"/><text x="25.7625%" y="255.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="25.5695%" y="229" width="0.0569%" height="15" fill="rgb(210,226,19)" fg:x="898" fg:w="2"/><text x="25.8195%" y="239.50"></text></g><g><title>__folio_alloc (2 samples, 0.06%)</title><rect x="25.5695%" y="213" width="0.0569%" height="15" fill="rgb(229,97,18)" fg:x="898" fg:w="2"/><text x="25.8195%" y="223.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="25.5695%" y="197" width="0.0569%" height="15" fill="rgb(211,167,15)" fg:x="898" fg:w="2"/><text x="25.8195%" y="207.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="25.5695%" y="181" width="0.0569%" height="15" fill="rgb(210,169,34)" fg:x="898" fg:w="2"/><text x="25.8195%" y="191.50"></text></g><g><title>rmqueue (1 samples, 0.03%)</title><rect x="25.5979%" y="165" width="0.0285%" height="15" fill="rgb(241,121,31)" fg:x="899" fg:w="1"/><text x="25.8479%" y="175.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.03%)</title><rect x="25.5979%" y="149" width="0.0285%" height="15" fill="rgb(232,40,11)" fg:x="899" fg:w="1"/><text x="25.8479%" y="159.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="25.5979%" y="133" width="0.0285%" height="15" fill="rgb(205,86,26)" fg:x="899" fg:w="1"/><text x="25.8479%" y="143.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (4 samples, 0.11%)</title><rect x="25.6264%" y="437" width="0.1139%" height="15" fill="rgb(231,126,28)" fg:x="900" fg:w="4"/><text x="25.8764%" y="447.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="25.6834%" y="421" width="0.0569%" height="15" fill="rgb(219,221,18)" fg:x="902" fg:w="2"/><text x="25.9334%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (2 samples, 0.06%)</title><rect x="25.6834%" y="405" width="0.0569%" height="15" fill="rgb(211,40,0)" fg:x="902" fg:w="2"/><text x="25.9334%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (2 samples, 0.06%)</title><rect x="25.6834%" y="389" width="0.0569%" height="15" fill="rgb(239,85,43)" fg:x="902" fg:w="2"/><text x="25.9334%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (2 samples, 0.06%)</title><rect x="25.6834%" y="373" width="0.0569%" height="15" fill="rgb(231,55,21)" fg:x="902" fg:w="2"/><text x="25.9334%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5 samples, 0.14%)</title><rect x="25.6264%" y="453" width="0.1424%" height="15" fill="rgb(225,184,43)" fg:x="900" fg:w="5"/><text x="25.8764%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (1 samples, 0.03%)</title><rect x="25.7403%" y="437" width="0.0285%" height="15" fill="rgb(251,158,41)" fg:x="904" fg:w="1"/><text x="25.9903%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (1 samples, 0.03%)</title><rect x="25.8827%" y="405" width="0.0285%" height="15" fill="rgb(234,159,37)" fg:x="909" fg:w="1"/><text x="26.1327%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (1 samples, 0.03%)</title><rect x="25.8827%" y="389" width="0.0285%" height="15" fill="rgb(216,204,22)" fg:x="909" fg:w="1"/><text x="26.1327%" y="399.50"></text></g><g><title>core::slice::sort::find_streak (7 samples, 0.20%)</title><rect x="25.9112%" y="405" width="0.1993%" height="15" fill="rgb(214,17,3)" fg:x="910" fg:w="7"/><text x="26.1612%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (7 samples, 0.20%)</title><rect x="25.9112%" y="389" width="0.1993%" height="15" fill="rgb(212,111,17)" fg:x="910" fg:w="7"/><text x="26.1612%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (7 samples, 0.20%)</title><rect x="25.9112%" y="373" width="0.1993%" height="15" fill="rgb(221,157,24)" fg:x="910" fg:w="7"/><text x="26.1612%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (4 samples, 0.11%)</title><rect x="25.9966%" y="357" width="0.1139%" height="15" fill="rgb(252,16,13)" fg:x="913" fg:w="4"/><text x="26.2466%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (4 samples, 0.11%)</title><rect x="25.9966%" y="341" width="0.1139%" height="15" fill="rgb(221,62,2)" fg:x="913" fg:w="4"/><text x="26.2466%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (4 samples, 0.11%)</title><rect x="25.9966%" y="325" width="0.1139%" height="15" fill="rgb(247,87,22)" fg:x="913" fg:w="4"/><text x="26.2466%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (4 samples, 0.11%)</title><rect x="25.9966%" y="309" width="0.1139%" height="15" fill="rgb(215,73,9)" fg:x="913" fg:w="4"/><text x="26.2466%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (7 samples, 0.20%)</title><rect x="26.7654%" y="373" width="0.1993%" height="15" fill="rgb(207,175,33)" fg:x="940" fg:w="7"/><text x="27.0154%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (28 samples, 0.80%)</title><rect x="27.6481%" y="325" width="0.7973%" height="15" fill="rgb(243,129,54)" fg:x="971" fg:w="28"/><text x="27.8981%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (26 samples, 0.74%)</title><rect x="27.7050%" y="309" width="0.7403%" height="15" fill="rgb(227,119,45)" fg:x="973" fg:w="26"/><text x="27.9550%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (32 samples, 0.91%)</title><rect x="27.6481%" y="357" width="0.9112%" height="15" fill="rgb(205,109,36)" fg:x="971" fg:w="32"/><text x="27.8981%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (32 samples, 0.91%)</title><rect x="27.6481%" y="341" width="0.9112%" height="15" fill="rgb(205,6,39)" fg:x="971" fg:w="32"/><text x="27.8981%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.11%)</title><rect x="28.4453%" y="325" width="0.1139%" height="15" fill="rgb(221,32,16)" fg:x="999" fg:w="4"/><text x="28.6953%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.11%)</title><rect x="28.4453%" y="309" width="0.1139%" height="15" fill="rgb(228,144,50)" fg:x="999" fg:w="4"/><text x="28.6953%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="28.5592%" y="357" width="0.0285%" height="15" fill="rgb(229,201,53)" fg:x="1003" fg:w="1"/><text x="28.8092%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (68 samples, 1.94%)</title><rect x="26.7654%" y="389" width="1.9362%" height="15" fill="rgb(249,153,27)" fg:x="940" fg:w="68"/><text x="27.0154%" y="399.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (61 samples, 1.74%)</title><rect x="26.9647%" y="373" width="1.7369%" height="15" fill="rgb(227,106,25)" fg:x="947" fg:w="61"/><text x="27.2147%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.11%)</title><rect x="28.5877%" y="357" width="0.1139%" height="15" fill="rgb(230,65,29)" fg:x="1004" fg:w="4"/><text x="28.8377%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.40%)</title><rect x="28.7016%" y="389" width="0.3986%" height="15" fill="rgb(221,57,46)" fg:x="1008" fg:w="14"/><text x="28.9516%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (3 samples, 0.09%)</title><rect x="29.0148%" y="373" width="0.0854%" height="15" fill="rgb(229,161,17)" fg:x="1019" fg:w="3"/><text x="29.2648%" y="383.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="357" width="0.0285%" height="15" fill="rgb(222,213,11)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="367.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="341" width="0.0285%" height="15" fill="rgb(235,35,13)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="351.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="325" width="0.0285%" height="15" fill="rgb(233,158,34)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="335.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="309" width="0.0285%" height="15" fill="rgb(215,151,48)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="319.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="293" width="0.0285%" height="15" fill="rgb(229,84,14)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="303.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="29.0718%" y="277" width="0.0285%" height="15" fill="rgb(229,68,14)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="287.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="29.0718%" y="261" width="0.0285%" height="15" fill="rgb(243,106,26)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="271.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="29.0718%" y="245" width="0.0285%" height="15" fill="rgb(206,45,38)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="255.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.03%)</title><rect x="29.0718%" y="229" width="0.0285%" height="15" fill="rgb(226,6,15)" fg:x="1021" fg:w="1"/><text x="29.3218%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (2 samples, 0.06%)</title><rect x="29.1002%" y="389" width="0.0569%" height="15" fill="rgb(232,22,54)" fg:x="1022" fg:w="2"/><text x="29.3502%" y="399.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="29.1002%" y="373" width="0.0569%" height="15" fill="rgb(229,222,32)" fg:x="1022" fg:w="2"/><text x="29.3502%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="29.1002%" y="357" width="0.0569%" height="15" fill="rgb(228,62,29)" fg:x="1022" fg:w="2"/><text x="29.3502%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.03%)</title><rect x="29.1287%" y="341" width="0.0285%" height="15" fill="rgb(251,103,34)" fg:x="1023" fg:w="1"/><text x="29.3787%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.09%)</title><rect x="29.1572%" y="373" width="0.0854%" height="15" fill="rgb(233,12,30)" fg:x="1024" fg:w="3"/><text x="29.4072%" y="383.50"></text></g><g><title>core::slice::sort::merge (111 samples, 3.16%)</title><rect x="26.1105%" y="405" width="3.1606%" height="15" fill="rgb(238,52,0)" fg:x="917" fg:w="111"/><text x="26.3605%" y="415.50">cor..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.11%)</title><rect x="29.1572%" y="389" width="0.1139%" height="15" fill="rgb(223,98,5)" fg:x="1024" fg:w="4"/><text x="29.4072%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="29.2426%" y="373" width="0.0285%" height="15" fill="rgb(228,75,37)" fg:x="1027" fg:w="1"/><text x="29.4926%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.09%)</title><rect x="29.2711%" y="405" width="0.0854%" height="15" fill="rgb(205,115,49)" fg:x="1028" fg:w="3"/><text x="29.5211%" y="415.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="29.3565%" y="245" width="0.0569%" height="15" fill="rgb(250,154,43)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="29.3565%" y="229" width="0.0569%" height="15" fill="rgb(226,43,29)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="29.3565%" y="213" width="0.0569%" height="15" fill="rgb(249,228,39)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="223.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="29.3565%" y="197" width="0.0569%" height="15" fill="rgb(216,79,43)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="207.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="29.3565%" y="181" width="0.0569%" height="15" fill="rgb(228,95,12)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="191.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="29.3565%" y="165" width="0.0569%" height="15" fill="rgb(249,221,15)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="175.50"></text></g><g><title>__folio_alloc (2 samples, 0.06%)</title><rect x="29.3565%" y="149" width="0.0569%" height="15" fill="rgb(233,34,13)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="159.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="29.3565%" y="133" width="0.0569%" height="15" fill="rgb(214,103,39)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="143.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="29.3565%" y="117" width="0.0569%" height="15" fill="rgb(251,126,39)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="127.50"></text></g><g><title>clear_page_erms (2 samples, 0.06%)</title><rect x="29.3565%" y="101" width="0.0569%" height="15" fill="rgb(214,216,36)" fg:x="1031" fg:w="2"/><text x="29.6065%" y="111.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.09%)</title><rect x="29.3565%" y="277" width="0.0854%" height="15" fill="rgb(220,221,8)" fg:x="1031" fg:w="3"/><text x="29.6065%" y="287.50"></text></g><g><title>exc_page_fault (3 samples, 0.09%)</title><rect x="29.3565%" y="261" width="0.0854%" height="15" fill="rgb(240,216,3)" fg:x="1031" fg:w="3"/><text x="29.6065%" y="271.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="29.4134%" y="245" width="0.0285%" height="15" fill="rgb(232,218,17)" fg:x="1033" fg:w="1"/><text x="29.6634%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="29.4134%" y="229" width="0.0285%" height="15" fill="rgb(229,163,45)" fg:x="1033" fg:w="1"/><text x="29.6634%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (4 samples, 0.11%)</title><rect x="29.3565%" y="405" width="0.1139%" height="15" fill="rgb(231,110,42)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="415.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (4 samples, 0.11%)</title><rect x="29.3565%" y="389" width="0.1139%" height="15" fill="rgb(208,170,48)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="399.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.11%)</title><rect x="29.3565%" y="373" width="0.1139%" height="15" fill="rgb(239,116,25)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="383.50"></text></g><g><title>__rdl_alloc (4 samples, 0.11%)</title><rect x="29.3565%" y="357" width="0.1139%" height="15" fill="rgb(219,200,50)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.11%)</title><rect x="29.3565%" y="341" width="0.1139%" height="15" fill="rgb(245,200,0)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="351.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="29.3565%" y="325" width="0.1139%" height="15" fill="rgb(245,119,33)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="335.50"></text></g><g><title>_int_malloc (4 samples, 0.11%)</title><rect x="29.3565%" y="309" width="0.1139%" height="15" fill="rgb(231,125,12)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="319.50"></text></g><g><title>sysmalloc (4 samples, 0.11%)</title><rect x="29.3565%" y="293" width="0.1139%" height="15" fill="rgb(216,96,41)" fg:x="1031" fg:w="4"/><text x="29.6065%" y="303.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="29.4419%" y="277" width="0.0285%" height="15" fill="rgb(248,43,45)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="287.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="29.4419%" y="261" width="0.0285%" height="15" fill="rgb(217,222,7)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="29.4419%" y="245" width="0.0285%" height="15" fill="rgb(233,28,6)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="255.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="29.4419%" y="229" width="0.0285%" height="15" fill="rgb(231,218,15)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="239.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="29.4419%" y="213" width="0.0285%" height="15" fill="rgb(226,171,48)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="223.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="29.4419%" y="197" width="0.0285%" height="15" fill="rgb(235,201,9)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="207.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="29.4419%" y="181" width="0.0285%" height="15" fill="rgb(217,80,15)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="191.50"></text></g><g><title>perf_event_mmap (1 samples, 0.03%)</title><rect x="29.4419%" y="165" width="0.0285%" height="15" fill="rgb(219,152,8)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="175.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.03%)</title><rect x="29.4419%" y="149" width="0.0285%" height="15" fill="rgb(243,107,38)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="159.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.03%)</title><rect x="29.4419%" y="133" width="0.0285%" height="15" fill="rgb(231,17,5)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="143.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.03%)</title><rect x="29.4419%" y="117" width="0.0285%" height="15" fill="rgb(209,25,54)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="127.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.03%)</title><rect x="29.4419%" y="101" width="0.0285%" height="15" fill="rgb(219,0,2)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="111.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 0.03%)</title><rect x="29.4419%" y="85" width="0.0285%" height="15" fill="rgb(246,9,5)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="95.50"></text></g><g><title>__task_pid_nr_ns (1 samples, 0.03%)</title><rect x="29.4419%" y="69" width="0.0285%" height="15" fill="rgb(226,159,4)" fg:x="1034" fg:w="1"/><text x="29.6919%" y="79.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::push (1 samples, 0.03%)</title><rect x="29.4704%" y="405" width="0.0285%" height="15" fill="rgb(219,175,34)" fg:x="1035" fg:w="1"/><text x="29.7204%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.06%)</title><rect x="29.5273%" y="341" width="0.0569%" height="15" fill="rgb(236,10,46)" fg:x="1037" fg:w="2"/><text x="29.7773%" y="351.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (10 samples, 0.28%)</title><rect x="29.7836%" y="325" width="0.2847%" height="15" fill="rgb(240,211,16)" fg:x="1046" fg:w="10"/><text x="30.0336%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (10 samples, 0.28%)</title><rect x="29.7836%" y="309" width="0.2847%" height="15" fill="rgb(205,3,43)" fg:x="1046" fg:w="10"/><text x="30.0336%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (10 samples, 0.28%)</title><rect x="29.7836%" y="293" width="0.2847%" height="15" fill="rgb(245,7,22)" fg:x="1046" fg:w="10"/><text x="30.0336%" y="303.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (10 samples, 0.28%)</title><rect x="29.7836%" y="277" width="0.2847%" height="15" fill="rgb(239,132,32)" fg:x="1046" fg:w="10"/><text x="30.0336%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="30.0683%" y="325" width="0.0285%" height="15" fill="rgb(228,202,34)" fg:x="1056" fg:w="1"/><text x="30.3183%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (21 samples, 0.60%)</title><rect x="29.5273%" y="357" width="0.5979%" height="15" fill="rgb(254,200,22)" fg:x="1037" fg:w="21"/><text x="29.7773%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (19 samples, 0.54%)</title><rect x="29.5843%" y="341" width="0.5410%" height="15" fill="rgb(219,10,39)" fg:x="1039" fg:w="19"/><text x="29.8343%" y="351.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.03%)</title><rect x="30.0968%" y="325" width="0.0285%" height="15" fill="rgb(226,210,39)" fg:x="1057" fg:w="1"/><text x="30.3468%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.20%)</title><rect x="30.1253%" y="357" width="0.1993%" height="15" fill="rgb(208,219,16)" fg:x="1058" fg:w="7"/><text x="30.3753%" y="367.50"></text></g><g><title>core::slice::sort::insert_tail (30 samples, 0.85%)</title><rect x="29.5273%" y="373" width="0.8542%" height="15" fill="rgb(216,158,51)" fg:x="1037" fg:w="30"/><text x="29.7773%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (2 samples, 0.06%)</title><rect x="30.3246%" y="357" width="0.0569%" height="15" fill="rgb(233,14,44)" fg:x="1065" fg:w="2"/><text x="30.5746%" y="367.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="30.3246%" y="341" width="0.0569%" height="15" fill="rgb(237,97,39)" fg:x="1065" fg:w="2"/><text x="30.5746%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="30.3246%" y="325" width="0.0569%" height="15" fill="rgb(218,198,43)" fg:x="1065" fg:w="2"/><text x="30.5746%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (164 samples, 4.67%)</title><rect x="25.7688%" y="453" width="4.6697%" height="15" fill="rgb(231,104,20)" fg:x="905" fg:w="164"/><text x="26.0188%" y="463.50">alloc..</text></g><g><title>alloc::slice::stable_sort (164 samples, 4.67%)</title><rect x="25.7688%" y="437" width="4.6697%" height="15" fill="rgb(254,36,13)" fg:x="905" fg:w="164"/><text x="26.0188%" y="447.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (164 samples, 4.67%)</title><rect x="25.7688%" y="421" width="4.6697%" height="15" fill="rgb(248,14,50)" fg:x="905" fg:w="164"/><text x="26.0188%" y="431.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (33 samples, 0.94%)</title><rect x="29.4989%" y="405" width="0.9396%" height="15" fill="rgb(217,107,29)" fg:x="1036" fg:w="33"/><text x="29.7489%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (33 samples, 0.94%)</title><rect x="29.4989%" y="389" width="0.9396%" height="15" fill="rgb(251,169,33)" fg:x="1036" fg:w="33"/><text x="29.7489%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.06%)</title><rect x="30.3815%" y="373" width="0.0569%" height="15" fill="rgb(217,108,32)" fg:x="1067" fg:w="2"/><text x="30.6315%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.03%)</title><rect x="30.4954%" y="341" width="0.0285%" height="15" fill="rgb(219,66,42)" fg:x="1071" fg:w="1"/><text x="30.7454%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1 samples, 0.03%)</title><rect x="30.4954%" y="325" width="0.0285%" height="15" fill="rgb(206,180,7)" fg:x="1071" fg:w="1"/><text x="30.7454%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (4 samples, 0.11%)</title><rect x="30.4385%" y="405" width="0.1139%" height="15" fill="rgb(208,226,31)" fg:x="1069" fg:w="4"/><text x="30.6885%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (4 samples, 0.11%)</title><rect x="30.4385%" y="389" width="0.1139%" height="15" fill="rgb(218,26,49)" fg:x="1069" fg:w="4"/><text x="30.6885%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (2 samples, 0.06%)</title><rect x="30.4954%" y="373" width="0.0569%" height="15" fill="rgb(233,197,48)" fg:x="1071" fg:w="2"/><text x="30.7454%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (2 samples, 0.06%)</title><rect x="30.4954%" y="357" width="0.0569%" height="15" fill="rgb(252,181,51)" fg:x="1071" fg:w="2"/><text x="30.7454%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="30.5239%" y="341" width="0.0285%" height="15" fill="rgb(253,90,19)" fg:x="1072" fg:w="1"/><text x="30.7739%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="30.5239%" y="325" width="0.0285%" height="15" fill="rgb(215,171,30)" fg:x="1072" fg:w="1"/><text x="30.7739%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5 samples, 0.14%)</title><rect x="30.4385%" y="453" width="0.1424%" height="15" fill="rgb(214,222,9)" fg:x="1069" fg:w="5"/><text x="30.6885%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (5 samples, 0.14%)</title><rect x="30.4385%" y="437" width="0.1424%" height="15" fill="rgb(223,3,22)" fg:x="1069" fg:w="5"/><text x="30.6885%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (5 samples, 0.14%)</title><rect x="30.4385%" y="421" width="0.1424%" height="15" fill="rgb(225,196,46)" fg:x="1069" fg:w="5"/><text x="30.6885%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="30.5524%" y="405" width="0.0285%" height="15" fill="rgb(209,110,37)" fg:x="1073" fg:w="1"/><text x="30.8024%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.06%)</title><rect x="30.5809%" y="453" width="0.0569%" height="15" fill="rgb(249,89,12)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="30.5809%" y="437" width="0.0569%" height="15" fill="rgb(226,27,33)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.06%)</title><rect x="30.5809%" y="421" width="0.0569%" height="15" fill="rgb(213,82,22)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.06%)</title><rect x="30.5809%" y="405" width="0.0569%" height="15" fill="rgb(248,140,0)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.06%)</title><rect x="30.5809%" y="389" width="0.0569%" height="15" fill="rgb(228,106,3)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="30.5809%" y="373" width="0.0569%" height="15" fill="rgb(209,23,37)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="30.5809%" y="357" width="0.0569%" height="15" fill="rgb(241,93,50)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="367.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="30.5809%" y="341" width="0.0569%" height="15" fill="rgb(253,46,43)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="30.5809%" y="325" width="0.0569%" height="15" fill="rgb(226,206,43)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="335.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="30.5809%" y="309" width="0.0569%" height="15" fill="rgb(217,54,7)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="319.50"></text></g><g><title>_int_malloc (2 samples, 0.06%)</title><rect x="30.5809%" y="293" width="0.0569%" height="15" fill="rgb(223,5,52)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="303.50"></text></g><g><title>sysmalloc (2 samples, 0.06%)</title><rect x="30.5809%" y="277" width="0.0569%" height="15" fill="rgb(206,52,46)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="287.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="261" width="0.0569%" height="15" fill="rgb(253,136,11)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="271.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="245" width="0.0569%" height="15" fill="rgb(208,106,33)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="255.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="229" width="0.0569%" height="15" fill="rgb(206,54,4)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="239.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="213" width="0.0569%" height="15" fill="rgb(213,3,15)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="223.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="197" width="0.0569%" height="15" fill="rgb(252,211,39)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="207.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="30.5809%" y="181" width="0.0569%" height="15" fill="rgb(223,6,36)" fg:x="1074" fg:w="2"/><text x="30.8309%" y="191.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="30.6093%" y="165" width="0.0285%" height="15" fill="rgb(252,169,45)" fg:x="1075" fg:w="1"/><text x="30.8593%" y="175.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.03%)</title><rect x="30.6093%" y="149" width="0.0285%" height="15" fill="rgb(212,48,26)" fg:x="1075" fg:w="1"/><text x="30.8593%" y="159.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (194 samples, 5.52%)</title><rect x="25.1424%" y="469" width="5.5239%" height="15" fill="rgb(251,102,48)" fg:x="883" fg:w="194"/><text x="25.3924%" y="479.50">project..</text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="30.6378%" y="453" width="0.0285%" height="15" fill="rgb(243,208,16)" fg:x="1076" fg:w="1"/><text x="30.8878%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="30.6378%" y="437" width="0.0285%" height="15" fill="rgb(219,96,24)" fg:x="1076" fg:w="1"/><text x="30.8878%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="30.6378%" y="421" width="0.0285%" height="15" fill="rgb(219,33,29)" fg:x="1076" fg:w="1"/><text x="30.8878%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (2 samples, 0.06%)</title><rect x="30.6663%" y="469" width="0.0569%" height="15" fill="rgb(223,176,5)" fg:x="1077" fg:w="2"/><text x="30.9163%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (2 samples, 0.06%)</title><rect x="30.6663%" y="453" width="0.0569%" height="15" fill="rgb(228,140,14)" fg:x="1077" fg:w="2"/><text x="30.9163%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="30.6948%" y="437" width="0.0285%" height="15" fill="rgb(217,179,31)" fg:x="1078" fg:w="1"/><text x="30.9448%" y="447.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (2 samples, 0.06%)</title><rect x="30.7802%" y="437" width="0.0569%" height="15" fill="rgb(230,9,30)" fg:x="1081" fg:w="2"/><text x="31.0302%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (3 samples, 0.09%)</title><rect x="30.7802%" y="453" width="0.0854%" height="15" fill="rgb(230,136,20)" fg:x="1081" fg:w="3"/><text x="31.0302%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="30.8371%" y="437" width="0.0285%" height="15" fill="rgb(215,210,22)" fg:x="1083" fg:w="1"/><text x="31.0871%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (288 samples, 8.20%)</title><rect x="30.8656%" y="453" width="8.2005%" height="15" fill="rgb(218,43,5)" fg:x="1084" fg:w="288"/><text x="31.1156%" y="463.50">project1::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="60.8485%" y="437" width="0.0285%" height="15" fill="rgb(216,11,5)" fg:x="2137" fg:w="1"/><text x="61.0985%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="60.8485%" y="421" width="0.0285%" height="15" fill="rgb(209,82,29)" fg:x="2137" fg:w="1"/><text x="61.0985%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="60.8485%" y="405" width="0.0285%" height="15" fill="rgb(244,115,12)" fg:x="2137" fg:w="1"/><text x="61.0985%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (58 samples, 1.65%)</title><rect x="60.8770%" y="405" width="1.6515%" height="15" fill="rgb(222,82,18)" fg:x="2138" fg:w="58"/><text x="61.1270%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (88 samples, 2.51%)</title><rect x="60.8770%" y="437" width="2.5057%" height="15" fill="rgb(249,227,8)" fg:x="2138" fg:w="88"/><text x="61.1270%" y="447.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (88 samples, 2.51%)</title><rect x="60.8770%" y="421" width="2.5057%" height="15" fill="rgb(253,141,45)" fg:x="2138" fg:w="88"/><text x="61.1270%" y="431.50">co..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (30 samples, 0.85%)</title><rect x="62.5285%" y="405" width="0.8542%" height="15" fill="rgb(234,184,4)" fg:x="2196" fg:w="30"/><text x="62.7785%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (67 samples, 1.91%)</title><rect x="63.3827%" y="405" width="1.9077%" height="15" fill="rgb(218,194,23)" fg:x="2226" fg:w="67"/><text x="63.6327%" y="415.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28 samples, 0.80%)</title><rect x="64.4932%" y="389" width="0.7973%" height="15" fill="rgb(235,66,41)" fg:x="2265" fg:w="28"/><text x="64.7432%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.80%)</title><rect x="64.4932%" y="373" width="0.7973%" height="15" fill="rgb(245,217,1)" fg:x="2265" fg:w="28"/><text x="64.7432%" y="383.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="65.2620%" y="357" width="0.0285%" height="15" fill="rgb(229,91,1)" fg:x="2292" fg:w="1"/><text x="65.5120%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (101 samples, 2.88%)</title><rect x="63.3827%" y="437" width="2.8759%" height="15" fill="rgb(207,101,30)" fg:x="2226" fg:w="101"/><text x="63.6327%" y="447.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (101 samples, 2.88%)</title><rect x="63.3827%" y="421" width="2.8759%" height="15" fill="rgb(223,82,49)" fg:x="2226" fg:w="101"/><text x="63.6327%" y="431.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.97%)</title><rect x="65.2904%" y="405" width="0.9681%" height="15" fill="rgb(218,167,17)" fg:x="2293" fg:w="34"/><text x="65.5404%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (34 samples, 0.97%)</title><rect x="65.2904%" y="389" width="0.9681%" height="15" fill="rgb(208,103,14)" fg:x="2293" fg:w="34"/><text x="65.5404%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.11%)</title><rect x="66.2585%" y="405" width="0.1139%" height="15" fill="rgb(238,20,8)" fg:x="2327" fg:w="4"/><text x="66.5085%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.11%)</title><rect x="66.2585%" y="389" width="0.1139%" height="15" fill="rgb(218,80,54)" fg:x="2327" fg:w="4"/><text x="66.5085%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.11%)</title><rect x="66.2585%" y="373" width="0.1139%" height="15" fill="rgb(240,144,17)" fg:x="2327" fg:w="4"/><text x="66.5085%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (23 samples, 0.65%)</title><rect x="66.2585%" y="437" width="0.6549%" height="15" fill="rgb(245,27,50)" fg:x="2327" fg:w="23"/><text x="66.5085%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.65%)</title><rect x="66.2585%" y="421" width="0.6549%" height="15" fill="rgb(251,51,7)" fg:x="2327" fg:w="23"/><text x="66.5085%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (19 samples, 0.54%)</title><rect x="66.3724%" y="405" width="0.5410%" height="15" fill="rgb(245,217,29)" fg:x="2331" fg:w="19"/><text x="66.6224%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (19 samples, 0.54%)</title><rect x="66.3724%" y="389" width="0.5410%" height="15" fill="rgb(221,176,29)" fg:x="2331" fg:w="19"/><text x="66.6224%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.34%)</title><rect x="66.9134%" y="405" width="0.3417%" height="15" fill="rgb(212,180,24)" fg:x="2350" fg:w="12"/><text x="67.1634%" y="415.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="74.9715%" y="341" width="0.0285%" height="15" fill="rgb(254,24,2)" fg:x="2633" fg:w="1"/><text x="75.2215%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (273 samples, 7.77%)</title><rect x="67.2551%" y="405" width="7.7733%" height="15" fill="rgb(230,100,2)" fg:x="2362" fg:w="273"/><text x="67.5051%" y="415.50">core::optio..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (273 samples, 7.77%)</title><rect x="67.2551%" y="389" width="7.7733%" height="15" fill="rgb(219,142,25)" fg:x="2362" fg:w="273"/><text x="67.5051%" y="399.50">slotmap::ba..</text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="74.9715%" y="373" width="0.0569%" height="15" fill="rgb(240,73,43)" fg:x="2633" fg:w="2"/><text x="75.2215%" y="383.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="74.9715%" y="357" width="0.0569%" height="15" fill="rgb(214,114,15)" fg:x="2633" fg:w="2"/><text x="75.2215%" y="367.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="75.0000%" y="341" width="0.0285%" height="15" fill="rgb(207,130,4)" fg:x="2634" fg:w="1"/><text x="75.2500%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="75.0000%" y="325" width="0.0285%" height="15" fill="rgb(221,25,40)" fg:x="2634" fg:w="1"/><text x="75.2500%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (17 samples, 0.48%)</title><rect x="75.0285%" y="405" width="0.4841%" height="15" fill="rgb(241,184,7)" fg:x="2635" fg:w="17"/><text x="75.2785%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (17 samples, 0.48%)</title><rect x="75.0285%" y="389" width="0.4841%" height="15" fill="rgb(235,159,4)" fg:x="2635" fg:w="17"/><text x="75.2785%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (308 samples, 8.77%)</title><rect x="66.9134%" y="437" width="8.7699%" height="15" fill="rgb(214,87,48)" fg:x="2350" fg:w="308"/><text x="67.1634%" y="447.50">&lt;project1::s..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (308 samples, 8.77%)</title><rect x="66.9134%" y="421" width="8.7699%" height="15" fill="rgb(246,198,24)" fg:x="2350" fg:w="308"/><text x="67.1634%" y="431.50">slotmap::bas..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (6 samples, 0.17%)</title><rect x="75.5125%" y="405" width="0.1708%" height="15" fill="rgb(209,66,40)" fg:x="2652" fg:w="6"/><text x="75.7625%" y="415.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="78.8724%" y="421" width="0.0285%" height="15" fill="rgb(233,147,39)" fg:x="2770" fg:w="1"/><text x="79.1224%" y="431.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="78.8724%" y="405" width="0.0285%" height="15" fill="rgb(231,145,52)" fg:x="2770" fg:w="1"/><text x="79.1224%" y="415.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="78.8724%" y="389" width="0.0285%" height="15" fill="rgb(206,20,26)" fg:x="2770" fg:w="1"/><text x="79.1224%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="78.8724%" y="373" width="0.0285%" height="15" fill="rgb(238,220,4)" fg:x="2770" fg:w="1"/><text x="79.1224%" y="383.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (114 samples, 3.25%)</title><rect x="75.6834%" y="437" width="3.2460%" height="15" fill="rgb(252,195,42)" fg:x="2658" fg:w="114"/><text x="75.9334%" y="447.50">&lt;pr..</text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="78.9009%" y="421" width="0.0285%" height="15" fill="rgb(209,10,6)" fg:x="2771" fg:w="1"/><text x="79.1509%" y="431.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (1 samples, 0.03%)</title><rect x="78.9294%" y="437" width="0.0285%" height="15" fill="rgb(229,3,52)" fg:x="2772" fg:w="1"/><text x="79.1794%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (1 samples, 0.03%)</title><rect x="78.9294%" y="421" width="0.0285%" height="15" fill="rgb(253,49,37)" fg:x="2772" fg:w="1"/><text x="79.1794%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="78.9579%" y="437" width="0.0285%" height="15" fill="rgb(240,103,49)" fg:x="2773" fg:w="1"/><text x="79.2079%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="80.1822%" y="421" width="0.0285%" height="15" fill="rgb(250,182,30)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="80.1822%" y="405" width="0.0285%" height="15" fill="rgb(248,8,30)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="80.1822%" y="389" width="0.0285%" height="15" fill="rgb(237,120,30)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="80.1822%" y="373" width="0.0285%" height="15" fill="rgb(221,146,34)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="80.1822%" y="357" width="0.0285%" height="15" fill="rgb(242,55,13)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="80.1822%" y="341" width="0.0285%" height="15" fill="rgb(242,112,31)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="80.1822%" y="325" width="0.0285%" height="15" fill="rgb(249,192,27)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="335.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="80.1822%" y="309" width="0.0285%" height="15" fill="rgb(208,204,44)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="80.1822%" y="293" width="0.0285%" height="15" fill="rgb(208,93,54)" fg:x="2816" fg:w="1"/><text x="80.4322%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.2107%" y="421" width="0.0285%" height="15" fill="rgb(242,1,31)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.2107%" y="405" width="0.0285%" height="15" fill="rgb(241,83,25)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="80.2107%" y="389" width="0.0285%" height="15" fill="rgb(205,169,50)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="399.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="80.2107%" y="373" width="0.0285%" height="15" fill="rgb(239,186,37)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="383.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="80.2107%" y="357" width="0.0285%" height="15" fill="rgb(205,221,10)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="367.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="80.2107%" y="341" width="0.0285%" height="15" fill="rgb(218,196,15)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="351.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="80.2107%" y="325" width="0.0285%" height="15" fill="rgb(218,196,35)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="335.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="80.2107%" y="309" width="0.0285%" height="15" fill="rgb(233,63,24)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="319.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="80.2107%" y="293" width="0.0285%" height="15" fill="rgb(225,8,4)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="303.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="80.2107%" y="277" width="0.0285%" height="15" fill="rgb(234,105,35)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="287.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="80.2107%" y="261" width="0.0285%" height="15" fill="rgb(236,21,32)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="271.50"></text></g><g><title>sugov_update_single_freq (1 samples, 0.03%)</title><rect x="80.2107%" y="245" width="0.0285%" height="15" fill="rgb(228,109,6)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="255.50"></text></g><g><title>cpufreq_driver_fast_switch (1 samples, 0.03%)</title><rect x="80.2107%" y="229" width="0.0285%" height="15" fill="rgb(229,215,31)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="239.50"></text></g><g><title>intel_cpufreq_fast_switch (1 samples, 0.03%)</title><rect x="80.2107%" y="213" width="0.0285%" height="15" fill="rgb(221,52,54)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="223.50"></text></g><g><title>native_write_msr (1 samples, 0.03%)</title><rect x="80.2107%" y="197" width="0.0285%" height="15" fill="rgb(252,129,43)" fg:x="2817" fg:w="1"/><text x="80.4607%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (151 samples, 4.30%)</title><rect x="78.9863%" y="437" width="4.2995%" height="15" fill="rgb(248,183,27)" fg:x="2774" fg:w="151"/><text x="79.2363%" y="447.50">alloc..</text></g><g><title>core::ptr::write (107 samples, 3.05%)</title><rect x="80.2392%" y="421" width="3.0467%" height="15" fill="rgb(250,0,22)" fg:x="2818" fg:w="107"/><text x="80.4892%" y="431.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (3 samples, 0.09%)</title><rect x="83.2859%" y="437" width="0.0854%" height="15" fill="rgb(213,166,10)" fg:x="2925" fg:w="3"/><text x="83.5359%" y="447.50"></text></g><g><title>tick_sched_do_timer (1 samples, 0.03%)</title><rect x="83.3713%" y="341" width="0.0285%" height="15" fill="rgb(207,163,36)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="351.50"></text></g><g><title>tick_do_update_jiffies64 (1 samples, 0.03%)</title><rect x="83.3713%" y="325" width="0.0285%" height="15" fill="rgb(208,122,22)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="335.50"></text></g><g><title>update_wall_time (1 samples, 0.03%)</title><rect x="83.3713%" y="309" width="0.0285%" height="15" fill="rgb(207,104,49)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="319.50"></text></g><g><title>timekeeping_advance (1 samples, 0.03%)</title><rect x="83.3713%" y="293" width="0.0285%" height="15" fill="rgb(248,211,50)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="303.50"></text></g><g><title>timekeeping_update (1 samples, 0.03%)</title><rect x="83.3713%" y="277" width="0.0285%" height="15" fill="rgb(217,13,45)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="287.50"></text></g><g><title>raw_notifier_call_chain (1 samples, 0.03%)</title><rect x="83.3713%" y="261" width="0.0285%" height="15" fill="rgb(211,216,49)" fg:x="2928" fg:w="1"/><text x="83.6213%" y="271.50"></text></g><g><title>rcu_sched_clock_irq (1 samples, 0.03%)</title><rect x="83.3998%" y="309" width="0.0285%" height="15" fill="rgb(221,58,53)" fg:x="2929" fg:w="1"/><text x="83.6498%" y="319.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="83.4282%" y="293" width="0.0285%" height="15" fill="rgb(220,112,41)" fg:x="2930" fg:w="1"/><text x="83.6782%" y="303.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="83.4282%" y="277" width="0.0285%" height="15" fill="rgb(236,38,28)" fg:x="2930" fg:w="1"/><text x="83.6782%" y="287.50"></text></g><g><title>sugov_update_single_freq (1 samples, 0.03%)</title><rect x="83.4282%" y="261" width="0.0285%" height="15" fill="rgb(227,195,22)" fg:x="2930" fg:w="1"/><text x="83.6782%" y="271.50"></text></g><g><title>__hrtimer_run_queues (4 samples, 0.11%)</title><rect x="83.3713%" y="373" width="0.1139%" height="15" fill="rgb(214,55,33)" fg:x="2928" fg:w="4"/><text x="83.6213%" y="383.50"></text></g><g><title>tick_sched_timer (4 samples, 0.11%)</title><rect x="83.3713%" y="357" width="0.1139%" height="15" fill="rgb(248,80,13)" fg:x="2928" fg:w="4"/><text x="83.6213%" y="367.50"></text></g><g><title>tick_sched_handle (3 samples, 0.09%)</title><rect x="83.3998%" y="341" width="0.0854%" height="15" fill="rgb(238,52,6)" fg:x="2929" fg:w="3"/><text x="83.6498%" y="351.50"></text></g><g><title>update_process_times (3 samples, 0.09%)</title><rect x="83.3998%" y="325" width="0.0854%" height="15" fill="rgb(224,198,47)" fg:x="2929" fg:w="3"/><text x="83.6498%" y="335.50"></text></g><g><title>scheduler_tick (2 samples, 0.06%)</title><rect x="83.4282%" y="309" width="0.0569%" height="15" fill="rgb(233,171,20)" fg:x="2930" fg:w="2"/><text x="83.6782%" y="319.50"></text></g><g><title>trigger_load_balance (1 samples, 0.03%)</title><rect x="83.4567%" y="293" width="0.0285%" height="15" fill="rgb(241,30,25)" fg:x="2931" fg:w="1"/><text x="83.7067%" y="303.50"></text></g><g><title>nohz_balancer_kick (1 samples, 0.03%)</title><rect x="83.4567%" y="277" width="0.0285%" height="15" fill="rgb(207,171,38)" fg:x="2931" fg:w="1"/><text x="83.7067%" y="287.50"></text></g><g><title>smp_call_function_single_async (1 samples, 0.03%)</title><rect x="83.4567%" y="261" width="0.0285%" height="15" fill="rgb(234,70,1)" fg:x="2931" fg:w="1"/><text x="83.7067%" y="271.50"></text></g><g><title>llist_add_batch (1 samples, 0.03%)</title><rect x="83.4567%" y="245" width="0.0285%" height="15" fill="rgb(232,178,18)" fg:x="2931" fg:w="1"/><text x="83.7067%" y="255.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.14%)</title><rect x="83.3713%" y="437" width="0.1424%" height="15" fill="rgb(241,78,40)" fg:x="2928" fg:w="5"/><text x="83.6213%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.14%)</title><rect x="83.3713%" y="421" width="0.1424%" height="15" fill="rgb(222,35,25)" fg:x="2928" fg:w="5"/><text x="83.6213%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (5 samples, 0.14%)</title><rect x="83.3713%" y="405" width="0.1424%" height="15" fill="rgb(207,92,16)" fg:x="2928" fg:w="5"/><text x="83.6213%" y="415.50"></text></g><g><title>hrtimer_interrupt (5 samples, 0.14%)</title><rect x="83.3713%" y="389" width="0.1424%" height="15" fill="rgb(216,59,51)" fg:x="2928" fg:w="5"/><text x="83.6213%" y="399.50"></text></g><g><title>tick_program_event (1 samples, 0.03%)</title><rect x="83.4852%" y="373" width="0.0285%" height="15" fill="rgb(213,80,28)" fg:x="2932" fg:w="1"/><text x="83.7352%" y="383.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.03%)</title><rect x="83.4852%" y="357" width="0.0285%" height="15" fill="rgb(220,93,7)" fg:x="2932" fg:w="1"/><text x="83.7352%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::le (3 samples, 0.09%)</title><rect x="83.5137%" y="437" width="0.0854%" height="15" fill="rgb(225,24,44)" fg:x="2933" fg:w="3"/><text x="83.7637%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26 samples, 0.74%)</title><rect x="83.5991%" y="437" width="0.7403%" height="15" fill="rgb(243,74,40)" fg:x="2936" fg:w="26"/><text x="83.8491%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (26 samples, 0.74%)</title><rect x="83.5991%" y="421" width="0.7403%" height="15" fill="rgb(228,39,7)" fg:x="2936" fg:w="26"/><text x="83.8491%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 0.14%)</title><rect x="84.1970%" y="405" width="0.1424%" height="15" fill="rgb(227,79,8)" fg:x="2957" fg:w="5"/><text x="84.4470%" y="415.50"></text></g><g><title>core::intrinsics::copy (20 samples, 0.57%)</title><rect x="84.3964%" y="405" width="0.5695%" height="15" fill="rgb(236,58,11)" fg:x="2964" fg:w="20"/><text x="84.6464%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (32 samples, 0.91%)</title><rect x="84.3394%" y="437" width="0.9112%" height="15" fill="rgb(249,63,35)" fg:x="2962" fg:w="32"/><text x="84.5894%" y="447.50"></text></g><g><title>core::ptr::swap (30 samples, 0.85%)</title><rect x="84.3964%" y="421" width="0.8542%" height="15" fill="rgb(252,114,16)" fg:x="2964" fg:w="30"/><text x="84.6464%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.28%)</title><rect x="84.9658%" y="405" width="0.2847%" height="15" fill="rgb(254,151,24)" fg:x="2984" fg:w="10"/><text x="85.2158%" y="415.50"></text></g><g><title>log::max_level (126 samples, 3.59%)</title><rect x="85.2506%" y="437" width="3.5877%" height="15" fill="rgb(253,54,39)" fg:x="2994" fg:w="126"/><text x="85.5006%" y="447.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (126 samples, 3.59%)</title><rect x="85.2506%" y="421" width="3.5877%" height="15" fill="rgb(243,25,45)" fg:x="2994" fg:w="126"/><text x="85.5006%" y="431.50">core..</text></g><g><title>core::sync::atomic::atomic_load (126 samples, 3.59%)</title><rect x="85.2506%" y="405" width="3.5877%" height="15" fill="rgb(234,134,9)" fg:x="2994" fg:w="126"/><text x="85.5006%" y="415.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.06%)</title><rect x="89.1515%" y="405" width="0.0569%" height="15" fill="rgb(227,166,31)" fg:x="3131" fg:w="2"/><text x="89.4015%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="89.1800%" y="389" width="0.0285%" height="15" fill="rgb(245,143,41)" fg:x="3132" fg:w="1"/><text x="89.4300%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="89.1800%" y="373" width="0.0285%" height="15" fill="rgb(238,181,32)" fg:x="3132" fg:w="1"/><text x="89.4300%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="89.1515%" y="421" width="0.0854%" height="15" fill="rgb(224,113,18)" fg:x="3131" fg:w="3"/><text x="89.4015%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="89.2084%" y="405" width="0.0285%" height="15" fill="rgb(240,229,28)" fg:x="3133" fg:w="1"/><text x="89.4584%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="89.2084%" y="389" width="0.0285%" height="15" fill="rgb(250,185,3)" fg:x="3133" fg:w="1"/><text x="89.4584%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::le (3 samples, 0.09%)</title><rect x="89.2369%" y="421" width="0.0854%" height="15" fill="rgb(212,59,25)" fg:x="3134" fg:w="3"/><text x="89.4869%" y="431.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (3 samples, 0.09%)</title><rect x="89.2369%" y="405" width="0.0854%" height="15" fill="rgb(221,87,20)" fg:x="3134" fg:w="3"/><text x="89.4869%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.09%)</title><rect x="89.2369%" y="389" width="0.0854%" height="15" fill="rgb(213,74,28)" fg:x="3134" fg:w="3"/><text x="89.4869%" y="399.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (1 samples, 0.03%)</title><rect x="89.3223%" y="421" width="0.0285%" height="15" fill="rgb(224,132,34)" fg:x="3137" fg:w="1"/><text x="89.5723%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="89.3223%" y="405" width="0.0285%" height="15" fill="rgb(222,101,24)" fg:x="3137" fg:w="1"/><text x="89.5723%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="89.3223%" y="389" width="0.0285%" height="15" fill="rgb(254,142,4)" fg:x="3137" fg:w="1"/><text x="89.5723%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (21 samples, 0.60%)</title><rect x="88.8383%" y="437" width="0.5979%" height="15" fill="rgb(230,229,49)" fg:x="3120" fg:w="21"/><text x="89.0883%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var_idx (3 samples, 0.09%)</title><rect x="89.3508%" y="421" width="0.0854%" height="15" fill="rgb(238,70,47)" fg:x="3138" fg:w="3"/><text x="89.6008%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (3 samples, 0.09%)</title><rect x="89.3508%" y="405" width="0.0854%" height="15" fill="rgb(231,160,17)" fg:x="3138" fg:w="3"/><text x="89.6008%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="89.4362%" y="437" width="0.0285%" height="15" fill="rgb(218,68,53)" fg:x="3141" fg:w="1"/><text x="89.6862%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="89.4647%" y="405" width="0.0285%" height="15" fill="rgb(236,111,10)" fg:x="3142" fg:w="1"/><text x="89.7147%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.74%)</title><rect x="89.4647%" y="421" width="0.7403%" height="15" fill="rgb(224,34,41)" fg:x="3142" fg:w="26"/><text x="89.7147%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25 samples, 0.71%)</title><rect x="89.4932%" y="405" width="0.7118%" height="15" fill="rgb(241,118,19)" fg:x="3143" fg:w="25"/><text x="89.7432%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25 samples, 0.71%)</title><rect x="89.4932%" y="389" width="0.7118%" height="15" fill="rgb(238,129,25)" fg:x="3143" fg:w="25"/><text x="89.7432%" y="399.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (126 samples, 3.59%)</title><rect x="90.2050%" y="405" width="3.5877%" height="15" fill="rgb(238,22,31)" fg:x="3168" fg:w="126"/><text x="90.4550%" y="415.50">&lt;pro..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7642%" y="389" width="0.0285%" height="15" fill="rgb(222,174,48)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7642%" y="373" width="0.0285%" height="15" fill="rgb(206,152,40)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="93.7642%" y="357" width="0.0285%" height="15" fill="rgb(218,99,54)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="367.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="93.7642%" y="341" width="0.0285%" height="15" fill="rgb(220,174,26)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="351.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="93.7642%" y="325" width="0.0285%" height="15" fill="rgb(245,116,9)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="335.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="93.7642%" y="309" width="0.0285%" height="15" fill="rgb(209,72,35)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="319.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="93.7642%" y="293" width="0.0285%" height="15" fill="rgb(226,126,21)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="303.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="93.7642%" y="277" width="0.0285%" height="15" fill="rgb(227,192,1)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="287.50"></text></g><g><title>account_process_tick (1 samples, 0.03%)</title><rect x="93.7642%" y="261" width="0.0285%" height="15" fill="rgb(237,180,29)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="271.50"></text></g><g><title>account_user_time (1 samples, 0.03%)</title><rect x="93.7642%" y="245" width="0.0285%" height="15" fill="rgb(230,197,35)" fg:x="3293" fg:w="1"/><text x="94.0142%" y="255.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (179 samples, 5.10%)</title><rect x="90.2050%" y="421" width="5.0968%" height="15" fill="rgb(246,193,31)" fg:x="3168" fg:w="179"/><text x="90.4550%" y="431.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (53 samples, 1.51%)</title><rect x="93.7927%" y="405" width="1.5091%" height="15" fill="rgb(241,36,4)" fg:x="3294" fg:w="53"/><text x="94.0427%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (13 samples, 0.37%)</title><rect x="95.3018%" y="421" width="0.3702%" height="15" fill="rgb(241,130,17)" fg:x="3347" fg:w="13"/><text x="95.5518%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (72 samples, 2.05%)</title><rect x="95.6720%" y="405" width="2.0501%" height="15" fill="rgb(206,137,32)" fg:x="3360" fg:w="72"/><text x="95.9220%" y="415.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (305 samples, 8.68%)</title><rect x="89.4647%" y="437" width="8.6845%" height="15" fill="rgb(237,228,51)" fg:x="3142" fg:w="305"/><text x="89.7147%" y="447.50">project1::so..</text></g><g><title>project1::solver::types::Lit::var_idx (87 samples, 2.48%)</title><rect x="95.6720%" y="421" width="2.4772%" height="15" fill="rgb(243,6,42)" fg:x="3360" fg:w="87"/><text x="95.9220%" y="431.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (15 samples, 0.43%)</title><rect x="97.7221%" y="405" width="0.4271%" height="15" fill="rgb(251,74,28)" fg:x="3432" fg:w="15"/><text x="97.9721%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.09%)</title><rect x="98.1492%" y="405" width="0.0854%" height="15" fill="rgb(218,20,49)" fg:x="3447" fg:w="3"/><text x="98.3992%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="98.2062%" y="389" width="0.0285%" height="15" fill="rgb(238,28,14)" fg:x="3449" fg:w="1"/><text x="98.4562%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="98.2062%" y="373" width="0.0285%" height="15" fill="rgb(229,40,46)" fg:x="3449" fg:w="1"/><text x="98.4562%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (14 samples, 0.40%)</title><rect x="98.1492%" y="437" width="0.3986%" height="15" fill="rgb(244,195,20)" fg:x="3447" fg:w="14"/><text x="98.3992%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (14 samples, 0.40%)</title><rect x="98.1492%" y="421" width="0.3986%" height="15" fill="rgb(253,56,35)" fg:x="3447" fg:w="14"/><text x="98.3992%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.31%)</title><rect x="98.2346%" y="405" width="0.3132%" height="15" fill="rgb(210,149,44)" fg:x="3450" fg:w="11"/><text x="98.4846%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.31%)</title><rect x="98.2346%" y="389" width="0.3132%" height="15" fill="rgb(240,135,12)" fg:x="3450" fg:w="11"/><text x="98.4846%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (1 samples, 0.03%)</title><rect x="98.5478%" y="437" width="0.0285%" height="15" fill="rgb(251,24,50)" fg:x="3461" fg:w="1"/><text x="98.7978%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (1 samples, 0.03%)</title><rect x="98.5478%" y="421" width="0.0285%" height="15" fill="rgb(243,200,47)" fg:x="3461" fg:w="1"/><text x="98.7978%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (1 samples, 0.03%)</title><rect x="98.5478%" y="405" width="0.0285%" height="15" fill="rgb(224,166,26)" fg:x="3461" fg:w="1"/><text x="98.7978%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="98.5478%" y="389" width="0.0285%" height="15" fill="rgb(233,0,47)" fg:x="3461" fg:w="1"/><text x="98.7978%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="98.5478%" y="373" width="0.0285%" height="15" fill="rgb(253,80,5)" fg:x="3461" fg:w="1"/><text x="98.7978%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (5 samples, 0.14%)</title><rect x="98.5763%" y="437" width="0.1424%" height="15" fill="rgb(214,133,25)" fg:x="3462" fg:w="5"/><text x="98.8263%" y="447.50"></text></g><g><title>core::mem::take (5 samples, 0.14%)</title><rect x="98.5763%" y="421" width="0.1424%" height="15" fill="rgb(209,27,14)" fg:x="3462" fg:w="5"/><text x="98.8263%" y="431.50"></text></g><g><title>core::mem::replace (5 samples, 0.14%)</title><rect x="98.5763%" y="405" width="0.1424%" height="15" fill="rgb(219,102,51)" fg:x="3462" fg:w="5"/><text x="98.8263%" y="415.50"></text></g><g><title>core::ptr::read (5 samples, 0.14%)</title><rect x="98.5763%" y="389" width="0.1424%" height="15" fill="rgb(237,18,16)" fg:x="3462" fg:w="5"/><text x="98.8263%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2,398 samples, 68.28%)</title><rect x="30.7232%" y="469" width="68.2802%" height="15" fill="rgb(241,85,17)" fg:x="1079" fg:w="2398"/><text x="30.9732%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (2,105 samples, 59.94%)</title><rect x="39.0661%" y="453" width="59.9374%" height="15" fill="rgb(236,90,42)" fg:x="1372" fg:w="2105"/><text x="39.3161%" y="463.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::watch_list::Watcher::new (10 samples, 0.28%)</title><rect x="98.7187%" y="437" width="0.2847%" height="15" fill="rgb(249,57,21)" fg:x="3467" fg:w="10"/><text x="98.9687%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (14 samples, 0.40%)</title><rect x="99.0034%" y="469" width="0.3986%" height="15" fill="rgb(243,12,36)" fg:x="3477" fg:w="14"/><text x="99.2534%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (1 samples, 0.03%)</title><rect x="99.4021%" y="469" width="0.0285%" height="15" fill="rgb(253,128,47)" fg:x="3491" fg:w="1"/><text x="99.6521%" y="479.50"></text></g><g><title>std::panic::catch_unwind (3,443 samples, 98.04%)</title><rect x="1.4237%" y="613" width="98.0353%" height="15" fill="rgb(207,33,20)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,443 samples, 98.04%)</title><rect x="1.4237%" y="597" width="98.0353%" height="15" fill="rgb(233,215,35)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,443 samples, 98.04%)</title><rect x="1.4237%" y="581" width="98.0353%" height="15" fill="rgb(249,188,52)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,443 samples, 98.04%)</title><rect x="1.4237%" y="565" width="98.0353%" height="15" fill="rgb(225,12,32)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,443 samples, 98.04%)</title><rect x="1.4237%" y="549" width="98.0353%" height="15" fill="rgb(247,98,14)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="559.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,443 samples, 98.04%)</title><rect x="1.4237%" y="533" width="98.0353%" height="15" fill="rgb(247,219,48)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (3,443 samples, 98.04%)</title><rect x="1.4237%" y="517" width="98.0353%" height="15" fill="rgb(253,60,48)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="527.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3,443 samples, 98.04%)</title><rect x="1.4237%" y="501" width="98.0353%" height="15" fill="rgb(245,15,52)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="511.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (3,443 samples, 98.04%)</title><rect x="1.4237%" y="485" width="98.0353%" height="15" fill="rgb(220,133,28)" fg:x="50" fg:w="3443"/><text x="1.6737%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::simplify (1 samples, 0.03%)</title><rect x="99.4305%" y="469" width="0.0285%" height="15" fill="rgb(217,180,4)" fg:x="3492" fg:w="1"/><text x="99.6805%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_learnts (1 samples, 0.03%)</title><rect x="99.4305%" y="453" width="0.0285%" height="15" fill="rgb(251,24,1)" fg:x="3492" fg:w="1"/><text x="99.6805%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::satisfied (1 samples, 0.03%)</title><rect x="99.4305%" y="437" width="0.0285%" height="15" fill="rgb(212,185,49)" fg:x="3492" fg:w="1"/><text x="99.6805%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.03%)</title><rect x="99.4305%" y="421" width="0.0285%" height="15" fill="rgb(215,175,22)" fg:x="3492" fg:w="1"/><text x="99.6805%" y="431.50"></text></g><g><title>__clone3 (3,444 samples, 98.06%)</title><rect x="1.4237%" y="725" width="98.0638%" height="15" fill="rgb(250,205,14)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="735.50">__clone3</text></g><g><title>start_thread (3,444 samples, 98.06%)</title><rect x="1.4237%" y="709" width="98.0638%" height="15" fill="rgb(225,211,22)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="719.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3,444 samples, 98.06%)</title><rect x="1.4237%" y="693" width="98.0638%" height="15" fill="rgb(251,179,42)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="703.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,444 samples, 98.06%)</title><rect x="1.4237%" y="677" width="98.0638%" height="15" fill="rgb(208,216,51)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,444 samples, 98.06%)</title><rect x="1.4237%" y="661" width="98.0638%" height="15" fill="rgb(235,36,11)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,444 samples, 98.06%)</title><rect x="1.4237%" y="645" width="98.0638%" height="15" fill="rgb(213,189,28)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,444 samples, 98.06%)</title><rect x="1.4237%" y="629" width="98.0638%" height="15" fill="rgb(227,203,42)" fg:x="50" fg:w="3444"/><text x="1.6737%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (1 samples, 0.03%)</title><rect x="99.4590%" y="613" width="0.0285%" height="15" fill="rgb(244,72,36)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="623.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.4590%" y="597" width="0.0285%" height="15" fill="rgb(213,53,17)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.4590%" y="581" width="0.0285%" height="15" fill="rgb(207,167,3)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="591.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.4590%" y="565" width="0.0285%" height="15" fill="rgb(216,98,30)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="575.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.4590%" y="549" width="0.0285%" height="15" fill="rgb(236,123,15)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="559.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.4590%" y="533" width="0.0285%" height="15" fill="rgb(248,81,50)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="543.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.4590%" y="517" width="0.0285%" height="15" fill="rgb(214,120,4)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="527.50"></text></g><g><title>_int_new_arena (1 samples, 0.03%)</title><rect x="99.4590%" y="501" width="0.0285%" height="15" fill="rgb(208,179,34)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="511.50"></text></g><g><title>new_heap (1 samples, 0.03%)</title><rect x="99.4590%" y="485" width="0.0285%" height="15" fill="rgb(227,140,7)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="495.50"></text></g><g><title>alloc_new_heap (1 samples, 0.03%)</title><rect x="99.4590%" y="469" width="0.0285%" height="15" fill="rgb(214,22,6)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="479.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="453" width="0.0285%" height="15" fill="rgb(207,137,27)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="463.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="437" width="0.0285%" height="15" fill="rgb(210,8,46)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="447.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="421" width="0.0285%" height="15" fill="rgb(240,16,54)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="431.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="405" width="0.0285%" height="15" fill="rgb(211,209,29)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="415.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="389" width="0.0285%" height="15" fill="rgb(226,228,24)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="399.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="99.4590%" y="373" width="0.0285%" height="15" fill="rgb(222,84,9)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="383.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="99.4590%" y="357" width="0.0285%" height="15" fill="rgb(234,203,30)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="367.50"></text></g><g><title>__pte_alloc (1 samples, 0.03%)</title><rect x="99.4590%" y="341" width="0.0285%" height="15" fill="rgb(238,109,14)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="351.50"></text></g><g><title>pte_alloc_one (1 samples, 0.03%)</title><rect x="99.4590%" y="325" width="0.0285%" height="15" fill="rgb(233,206,34)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="335.50"></text></g><g><title>alloc_pages (1 samples, 0.03%)</title><rect x="99.4590%" y="309" width="0.0285%" height="15" fill="rgb(220,167,47)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="319.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="99.4590%" y="293" width="0.0285%" height="15" fill="rgb(238,105,10)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="303.50"></text></g><g><title>__memcg_kmem_charge_page (1 samples, 0.03%)</title><rect x="99.4590%" y="277" width="0.0285%" height="15" fill="rgb(213,227,17)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="287.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="99.4590%" y="261" width="0.0285%" height="15" fill="rgb(217,132,38)" fg:x="3493" fg:w="1"/><text x="99.7090%" y="271.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="99.4875%" y="725" width="0.0285%" height="15" fill="rgb(242,146,4)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="735.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.4875%" y="709" width="0.0285%" height="15" fill="rgb(212,61,9)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="719.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.4875%" y="693" width="0.0285%" height="15" fill="rgb(247,126,22)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="703.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.4875%" y="677" width="0.0285%" height="15" fill="rgb(220,196,2)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="687.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.4875%" y="661" width="0.0285%" height="15" fill="rgb(208,46,4)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="671.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="99.4875%" y="645" width="0.0285%" height="15" fill="rgb(252,104,46)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="655.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.03%)</title><rect x="99.4875%" y="629" width="0.0285%" height="15" fill="rgb(237,152,48)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="639.50"></text></g><g><title>elf_machine_rela (1 samples, 0.03%)</title><rect x="99.4875%" y="613" width="0.0285%" height="15" fill="rgb(221,59,37)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="623.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.03%)</title><rect x="99.4875%" y="597" width="0.0285%" height="15" fill="rgb(209,202,51)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="607.50"></text></g><g><title>do_lookup_x (1 samples, 0.03%)</title><rect x="99.4875%" y="581" width="0.0285%" height="15" fill="rgb(228,81,30)" fg:x="3494" fg:w="1"/><text x="99.7375%" y="591.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="99.5159%" y="725" width="0.0569%" height="15" fill="rgb(227,42,39)" fg:x="3495" fg:w="2"/><text x="99.7659%" y="735.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="709" width="0.0285%" height="15" fill="rgb(221,26,2)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="719.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="693" width="0.0285%" height="15" fill="rgb(254,61,31)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="703.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="677" width="0.0285%" height="15" fill="rgb(222,173,38)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="687.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="661" width="0.0285%" height="15" fill="rgb(218,50,12)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="671.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="645" width="0.0285%" height="15" fill="rgb(223,88,40)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="655.50"></text></g><g><title>do_numa_page (1 samples, 0.03%)</title><rect x="99.5444%" y="629" width="0.0285%" height="15" fill="rgb(237,54,19)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="639.50"></text></g><g><title>task_numa_fault (1 samples, 0.03%)</title><rect x="99.5444%" y="613" width="0.0285%" height="15" fill="rgb(251,129,25)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="623.50"></text></g><g><title>task_numa_placement (1 samples, 0.03%)</title><rect x="99.5444%" y="597" width="0.0285%" height="15" fill="rgb(238,97,19)" fg:x="3496" fg:w="1"/><text x="99.7944%" y="607.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.5729%" y="693" width="0.0285%" height="15" fill="rgb(240,169,18)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="703.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.5729%" y="677" width="0.0285%" height="15" fill="rgb(230,187,49)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="687.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.5729%" y="661" width="0.0285%" height="15" fill="rgb(209,44,26)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="671.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="99.5729%" y="645" width="0.0285%" height="15" fill="rgb(244,0,6)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="655.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="99.5729%" y="629" width="0.0285%" height="15" fill="rgb(248,18,21)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="639.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="99.5729%" y="613" width="0.0285%" height="15" fill="rgb(245,180,19)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="623.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.5729%" y="597" width="0.0285%" height="15" fill="rgb(252,118,36)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="607.50"></text></g><g><title>elf_map (1 samples, 0.03%)</title><rect x="99.5729%" y="581" width="0.0285%" height="15" fill="rgb(210,224,19)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="591.50"></text></g><g><title>vm_mmap (1 samples, 0.03%)</title><rect x="99.5729%" y="565" width="0.0285%" height="15" fill="rgb(218,30,24)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="575.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.03%)</title><rect x="99.5729%" y="549" width="0.0285%" height="15" fill="rgb(219,75,50)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="559.50"></text></g><g><title>security_mmap_file (1 samples, 0.03%)</title><rect x="99.5729%" y="533" width="0.0285%" height="15" fill="rgb(234,72,50)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="543.50"></text></g><g><title>ima_file_mmap (1 samples, 0.03%)</title><rect x="99.5729%" y="517" width="0.0285%" height="15" fill="rgb(219,100,48)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="527.50"></text></g><g><title>security_current_getsecid_subj (1 samples, 0.03%)</title><rect x="99.5729%" y="501" width="0.0285%" height="15" fill="rgb(253,5,41)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="511.50"></text></g><g><title>apparmor_current_getsecid_subj (1 samples, 0.03%)</title><rect x="99.5729%" y="485" width="0.0285%" height="15" fill="rgb(247,181,11)" fg:x="3497" fg:w="1"/><text x="99.8229%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.09%)</title><rect x="99.5729%" y="725" width="0.0854%" height="15" fill="rgb(222,223,25)" fg:x="3497" fg:w="3"/><text x="99.8229%" y="735.50"></text></g><g><title>do_syscall_64 (3 samples, 0.09%)</title><rect x="99.5729%" y="709" width="0.0854%" height="15" fill="rgb(214,198,28)" fg:x="3497" fg:w="3"/><text x="99.8229%" y="719.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.06%)</title><rect x="99.6014%" y="693" width="0.0569%" height="15" fill="rgb(230,46,43)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="703.50"></text></g><g><title>do_group_exit (2 samples, 0.06%)</title><rect x="99.6014%" y="677" width="0.0569%" height="15" fill="rgb(233,65,53)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="687.50"></text></g><g><title>do_exit (2 samples, 0.06%)</title><rect x="99.6014%" y="661" width="0.0569%" height="15" fill="rgb(221,121,27)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="671.50"></text></g><g><title>exit_mm (2 samples, 0.06%)</title><rect x="99.6014%" y="645" width="0.0569%" height="15" fill="rgb(247,70,47)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="655.50"></text></g><g><title>mmput (2 samples, 0.06%)</title><rect x="99.6014%" y="629" width="0.0569%" height="15" fill="rgb(228,85,35)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="639.50"></text></g><g><title>exit_mmap (2 samples, 0.06%)</title><rect x="99.6014%" y="613" width="0.0569%" height="15" fill="rgb(209,50,18)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="623.50"></text></g><g><title>unmap_vmas (2 samples, 0.06%)</title><rect x="99.6014%" y="597" width="0.0569%" height="15" fill="rgb(250,19,35)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="607.50"></text></g><g><title>unmap_single_vma (2 samples, 0.06%)</title><rect x="99.6014%" y="581" width="0.0569%" height="15" fill="rgb(253,107,29)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="591.50"></text></g><g><title>unmap_page_range (2 samples, 0.06%)</title><rect x="99.6014%" y="565" width="0.0569%" height="15" fill="rgb(252,179,29)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="575.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.06%)</title><rect x="99.6014%" y="549" width="0.0569%" height="15" fill="rgb(238,194,6)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="559.50"></text></g><g><title>zap_pte_range (2 samples, 0.06%)</title><rect x="99.6014%" y="533" width="0.0569%" height="15" fill="rgb(238,164,29)" fg:x="3498" fg:w="2"/><text x="99.8514%" y="543.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.03%)</title><rect x="99.6298%" y="517" width="0.0285%" height="15" fill="rgb(224,25,9)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="527.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="99.6298%" y="501" width="0.0285%" height="15" fill="rgb(244,153,23)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="511.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.03%)</title><rect x="99.6298%" y="485" width="0.0285%" height="15" fill="rgb(212,203,14)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="495.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="99.6298%" y="469" width="0.0285%" height="15" fill="rgb(220,164,20)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="479.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="99.6298%" y="453" width="0.0285%" height="15" fill="rgb(222,203,48)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="463.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.03%)</title><rect x="99.6298%" y="437" width="0.0285%" height="15" fill="rgb(215,159,22)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="447.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.03%)</title><rect x="99.6298%" y="421" width="0.0285%" height="15" fill="rgb(216,183,47)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="431.50"></text></g><g><title>__free_one_page (1 samples, 0.03%)</title><rect x="99.6298%" y="405" width="0.0285%" height="15" fill="rgb(229,195,25)" fg:x="3499" fg:w="1"/><text x="99.8798%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2 samples, 0.06%)</title><rect x="99.6583%" y="725" width="0.0569%" height="15" fill="rgb(224,132,51)" fg:x="3500" fg:w="2"/><text x="99.9083%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="99.6868%" y="709" width="0.0285%" height="15" fill="rgb(240,63,7)" fg:x="3501" fg:w="1"/><text x="99.9368%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (1 samples, 0.03%)</title><rect x="99.6868%" y="693" width="0.0285%" height="15" fill="rgb(249,182,41)" fg:x="3501" fg:w="1"/><text x="99.9368%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (1 samples, 0.03%)</title><rect x="99.6868%" y="677" width="0.0285%" height="15" fill="rgb(243,47,26)" fg:x="3501" fg:w="1"/><text x="99.9368%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (1 samples, 0.03%)</title><rect x="99.6868%" y="661" width="0.0285%" height="15" fill="rgb(233,48,2)" fg:x="3501" fg:w="1"/><text x="99.9368%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="99.6868%" y="645" width="0.0285%" height="15" fill="rgb(244,165,34)" fg:x="3501" fg:w="1"/><text x="99.9368%" y="655.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (1 samples, 0.03%)</title><rect x="99.7153%" y="725" width="0.0285%" height="15" fill="rgb(207,89,7)" fg:x="3502" fg:w="1"/><text x="99.9653%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (3 samples, 0.09%)</title><rect x="99.7437%" y="725" width="0.0854%" height="15" fill="rgb(244,117,36)" fg:x="3503" fg:w="3"/><text x="99.9937%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (2 samples, 0.06%)</title><rect x="99.7722%" y="709" width="0.0569%" height="15" fill="rgb(226,144,34)" fg:x="3504" fg:w="2"/><text x="100.0222%" y="719.50"></text></g><g><title>all (3,512 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(213,23,19)" fg:x="0" fg:w="3512"/><text x="0.2500%" y="767.50"></text></g><g><title>project1 (3,505 samples, 99.80%)</title><rect x="0.1993%" y="741" width="99.8007%" height="15" fill="rgb(217,75,12)" fg:x="7" fg:w="3505"/><text x="0.4493%" y="751.50">project1</text></g><g><title>ret_from_fork (6 samples, 0.17%)</title><rect x="99.8292%" y="725" width="0.1708%" height="15" fill="rgb(224,159,17)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="735.50"></text></g><g><title>schedule_tail (6 samples, 0.17%)</title><rect x="99.8292%" y="709" width="0.1708%" height="15" fill="rgb(217,118,1)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="719.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.17%)</title><rect x="99.8292%" y="693" width="0.1708%" height="15" fill="rgb(232,180,48)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="703.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.17%)</title><rect x="99.8292%" y="677" width="0.1708%" height="15" fill="rgb(230,27,33)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="687.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.17%)</title><rect x="99.8292%" y="661" width="0.1708%" height="15" fill="rgb(205,31,21)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="671.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.17%)</title><rect x="99.8292%" y="645" width="0.1708%" height="15" fill="rgb(253,59,4)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="655.50"></text></g><g><title>native_write_msr (6 samples, 0.17%)</title><rect x="99.8292%" y="629" width="0.1708%" height="15" fill="rgb(224,201,9)" fg:x="3506" fg:w="6"/><text x="100.0792%" y="639.50"></text></g></svg></svg>