<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="3460"><g><title>perf-exec (6 samples, 0.17%)</title><rect x="0.0000%" y="805" width="0.1734%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.17%)</title><rect x="0.0000%" y="789" width="0.1734%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.17%)</title><rect x="0.0000%" y="773" width="0.1734%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.17%)</title><rect x="0.0000%" y="757" width="0.1734%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.17%)</title><rect x="0.0000%" y="741" width="0.1734%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>bprm_execve (6 samples, 0.17%)</title><rect x="0.0000%" y="725" width="0.1734%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.17%)</title><rect x="0.0000%" y="709" width="0.1734%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>exec_binprm (6 samples, 0.17%)</title><rect x="0.0000%" y="693" width="0.1734%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>search_binary_handler (6 samples, 0.17%)</title><rect x="0.0000%" y="677" width="0.1734%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 0.17%)</title><rect x="0.0000%" y="661" width="0.1734%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>begin_new_exec (6 samples, 0.17%)</title><rect x="0.0000%" y="645" width="0.1734%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 0.17%)</title><rect x="0.0000%" y="629" width="0.1734%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>perf_event_enable_on_exec (6 samples, 0.17%)</title><rect x="0.0000%" y="613" width="0.1734%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>ctx_resched (6 samples, 0.17%)</title><rect x="0.0000%" y="597" width="0.1734%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.17%)</title><rect x="0.0000%" y="581" width="0.1734%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.17%)</title><rect x="0.0000%" y="565" width="0.1734%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50"></text></g><g><title>native_write_msr (6 samples, 0.17%)</title><rect x="0.0000%" y="549" width="0.1734%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="0.1734%" y="773" width="0.0289%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.4234%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.03%)</title><rect x="0.1734%" y="757" width="0.0289%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.4234%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.03%)</title><rect x="0.1734%" y="741" width="0.0289%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.4234%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.03%)</title><rect x="0.1734%" y="725" width="0.0289%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.4234%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="0.1734%" y="709" width="0.0289%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.4234%" y="719.50"></text></g><g><title>[[heap]] (3 samples, 0.09%)</title><rect x="0.1734%" y="789" width="0.0867%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="3"/><text x="0.4234%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (2 samples, 0.06%)</title><rect x="0.2023%" y="773" width="0.0578%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="2"/><text x="0.4523%" y="783.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="0.2601%" y="773" width="0.0289%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5101%" y="783.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.03%)</title><rect x="0.2890%" y="773" width="0.0289%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="0.5390%" y="783.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (1 samples, 0.03%)</title><rect x="0.3179%" y="773" width="0.0289%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="0.5679%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="0.3468%" y="725" width="0.0289%" height="15" fill="rgb(238,160,17)" fg:x="12" fg:w="1"/><text x="0.5968%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="0.3468%" y="709" width="0.0289%" height="15" fill="rgb(214,148,48)" fg:x="12" fg:w="1"/><text x="0.5968%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.3468%" y="693" width="0.0289%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="1"/><text x="0.5968%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.3468%" y="677" width="0.0289%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="1"/><text x="0.5968%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="0.3468%" y="661" width="0.0289%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="1"/><text x="0.5968%" y="671.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="0.3468%" y="645" width="0.0289%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="1"/><text x="0.5968%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="0.3468%" y="629" width="0.0289%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="1"/><text x="0.5968%" y="639.50"></text></g><g><title>[anon] (5 samples, 0.14%)</title><rect x="0.2601%" y="789" width="0.1445%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="5"/><text x="0.5101%" y="799.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (2 samples, 0.06%)</title><rect x="0.3468%" y="773" width="0.0578%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="2"/><text x="0.5968%" y="783.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (2 samples, 0.06%)</title><rect x="0.3468%" y="757" width="0.0578%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="2"/><text x="0.5968%" y="767.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (2 samples, 0.06%)</title><rect x="0.3468%" y="741" width="0.0578%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="2"/><text x="0.5968%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="0.3757%" y="725" width="0.0289%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="1"/><text x="0.6257%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="0.3757%" y="709" width="0.0289%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="1"/><text x="0.6257%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="0.4046%" y="773" width="0.0289%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="1"/><text x="0.6546%" y="783.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (10 samples, 0.29%)</title><rect x="0.4335%" y="773" width="0.2890%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="10"/><text x="0.6835%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (6 samples, 0.17%)</title><rect x="0.5491%" y="757" width="0.1734%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="6"/><text x="0.7991%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.17%)</title><rect x="0.5491%" y="741" width="0.1734%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="6"/><text x="0.7991%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.17%)</title><rect x="0.5491%" y="725" width="0.1734%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="6"/><text x="0.7991%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.17%)</title><rect x="0.5491%" y="709" width="0.1734%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="6"/><text x="0.7991%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (2 samples, 0.06%)</title><rect x="0.7225%" y="773" width="0.0578%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="2"/><text x="0.9725%" y="783.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (1 samples, 0.03%)</title><rect x="0.7514%" y="757" width="0.0289%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="1"/><text x="1.0014%" y="767.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (3 samples, 0.09%)</title><rect x="0.7803%" y="773" width="0.0867%" height="15" fill="rgb(239,60,40)" fg:x="27" fg:w="3"/><text x="1.0303%" y="783.50"></text></g><g><title>[unknown] (17 samples, 0.49%)</title><rect x="0.4046%" y="789" width="0.4913%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="17"/><text x="0.6546%" y="799.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (1 samples, 0.03%)</title><rect x="0.8671%" y="773" width="0.0289%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="1.1171%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (4 samples, 0.12%)</title><rect x="0.9538%" y="533" width="0.1156%" height="15" fill="rgb(250,213,24)" fg:x="33" fg:w="4"/><text x="1.2038%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (4 samples, 0.12%)</title><rect x="0.9538%" y="517" width="0.1156%" height="15" fill="rgb(247,123,22)" fg:x="33" fg:w="4"/><text x="1.2038%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="0.9538%" y="501" width="0.1156%" height="15" fill="rgb(231,138,38)" fg:x="33" fg:w="4"/><text x="1.2038%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.12%)</title><rect x="0.9538%" y="485" width="0.1156%" height="15" fill="rgb(231,145,46)" fg:x="33" fg:w="4"/><text x="1.2038%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.12%)</title><rect x="0.9538%" y="469" width="0.1156%" height="15" fill="rgb(251,118,11)" fg:x="33" fg:w="4"/><text x="1.2038%" y="479.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.12%)</title><rect x="0.9538%" y="453" width="0.1156%" height="15" fill="rgb(217,147,25)" fg:x="33" fg:w="4"/><text x="1.2038%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.12%)</title><rect x="0.9538%" y="437" width="0.1156%" height="15" fill="rgb(247,81,37)" fg:x="33" fg:w="4"/><text x="1.2038%" y="447.50"></text></g><g><title>__GI___libc_free (4 samples, 0.12%)</title><rect x="0.9538%" y="421" width="0.1156%" height="15" fill="rgb(209,12,38)" fg:x="33" fg:w="4"/><text x="1.2038%" y="431.50"></text></g><g><title>_int_free (3 samples, 0.09%)</title><rect x="0.9827%" y="405" width="0.0867%" height="15" fill="rgb(227,1,9)" fg:x="34" fg:w="3"/><text x="1.2327%" y="415.50"></text></g><g><title>tcache_put (2 samples, 0.06%)</title><rect x="1.0116%" y="389" width="0.0578%" height="15" fill="rgb(248,47,43)" fg:x="35" fg:w="2"/><text x="1.2616%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.3699%" y="517" width="0.0289%" height="15" fill="rgb(221,10,30)" fg:x="82" fg:w="1"/><text x="2.6199%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.3699%" y="501" width="0.0289%" height="15" fill="rgb(210,229,1)" fg:x="82" fg:w="1"/><text x="2.6199%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="2.3699%" y="485" width="0.0289%" height="15" fill="rgb(222,148,37)" fg:x="82" fg:w="1"/><text x="2.6199%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.3699%" y="469" width="0.0289%" height="15" fill="rgb(234,67,33)" fg:x="82" fg:w="1"/><text x="2.6199%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.3699%" y="453" width="0.0289%" height="15" fill="rgb(247,98,35)" fg:x="82" fg:w="1"/><text x="2.6199%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="2.3699%" y="437" width="0.0289%" height="15" fill="rgb(247,138,52)" fg:x="82" fg:w="1"/><text x="2.6199%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="2.3699%" y="421" width="0.0289%" height="15" fill="rgb(213,79,30)" fg:x="82" fg:w="1"/><text x="2.6199%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="2.3699%" y="405" width="0.0289%" height="15" fill="rgb(246,177,23)" fg:x="82" fg:w="1"/><text x="2.6199%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="2.3699%" y="389" width="0.0289%" height="15" fill="rgb(230,62,27)" fg:x="82" fg:w="1"/><text x="2.6199%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="2.3699%" y="373" width="0.0289%" height="15" fill="rgb(216,154,8)" fg:x="82" fg:w="1"/><text x="2.6199%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="2.3699%" y="357" width="0.0289%" height="15" fill="rgb(244,35,45)" fg:x="82" fg:w="1"/><text x="2.6199%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="2.3699%" y="341" width="0.0289%" height="15" fill="rgb(251,115,12)" fg:x="82" fg:w="1"/><text x="2.6199%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="2.3699%" y="325" width="0.0289%" height="15" fill="rgb(240,54,50)" fg:x="82" fg:w="1"/><text x="2.6199%" y="335.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="2.3699%" y="309" width="0.0289%" height="15" fill="rgb(233,84,52)" fg:x="82" fg:w="1"/><text x="2.6199%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="2.3988%" y="517" width="0.0289%" height="15" fill="rgb(207,117,47)" fg:x="83" fg:w="1"/><text x="2.6488%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="2.4277%" y="517" width="0.0289%" height="15" fill="rgb(249,43,39)" fg:x="84" fg:w="1"/><text x="2.6777%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="2.4277%" y="501" width="0.0289%" height="15" fill="rgb(209,38,44)" fg:x="84" fg:w="1"/><text x="2.6777%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="2.4277%" y="485" width="0.0289%" height="15" fill="rgb(236,212,23)" fg:x="84" fg:w="1"/><text x="2.6777%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.12%)</title><rect x="2.4566%" y="501" width="0.1156%" height="15" fill="rgb(242,79,21)" fg:x="85" fg:w="4"/><text x="2.7066%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="2.5434%" y="485" width="0.0289%" height="15" fill="rgb(211,96,35)" fg:x="88" fg:w="1"/><text x="2.7934%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="2.5434%" y="469" width="0.0289%" height="15" fill="rgb(253,215,40)" fg:x="88" fg:w="1"/><text x="2.7934%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.17%)</title><rect x="2.4566%" y="517" width="0.1734%" height="15" fill="rgb(211,81,21)" fg:x="85" fg:w="6"/><text x="2.7066%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="2.5723%" y="501" width="0.0578%" height="15" fill="rgb(208,190,38)" fg:x="89" fg:w="2"/><text x="2.8223%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="2.5723%" y="485" width="0.0578%" height="15" fill="rgb(235,213,38)" fg:x="89" fg:w="2"/><text x="2.8223%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="2.6301%" y="517" width="0.0289%" height="15" fill="rgb(237,122,38)" fg:x="91" fg:w="1"/><text x="2.8801%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="2.6301%" y="501" width="0.0289%" height="15" fill="rgb(244,218,35)" fg:x="91" fg:w="1"/><text x="2.8801%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="2.6301%" y="485" width="0.0289%" height="15" fill="rgb(240,68,47)" fg:x="91" fg:w="1"/><text x="2.8801%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.32%)</title><rect x="2.6590%" y="517" width="0.3179%" height="15" fill="rgb(210,16,53)" fg:x="92" fg:w="11"/><text x="2.9090%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.32%)</title><rect x="2.6590%" y="501" width="0.3179%" height="15" fill="rgb(235,124,12)" fg:x="92" fg:w="11"/><text x="2.9090%" y="511.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (5 samples, 0.14%)</title><rect x="2.9769%" y="517" width="0.1445%" height="15" fill="rgb(224,169,11)" fg:x="103" fg:w="5"/><text x="3.2269%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (5 samples, 0.14%)</title><rect x="2.9769%" y="501" width="0.1445%" height="15" fill="rgb(250,166,2)" fg:x="103" fg:w="5"/><text x="3.2269%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (5 samples, 0.14%)</title><rect x="2.9769%" y="485" width="0.1445%" height="15" fill="rgb(242,216,29)" fg:x="103" fg:w="5"/><text x="3.2269%" y="495.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (5 samples, 0.14%)</title><rect x="2.9769%" y="469" width="0.1445%" height="15" fill="rgb(230,116,27)" fg:x="103" fg:w="5"/><text x="3.2269%" y="479.50"></text></g><g><title>core::ptr::write (11 samples, 0.32%)</title><rect x="3.5260%" y="501" width="0.3179%" height="15" fill="rgb(228,99,48)" fg:x="122" fg:w="11"/><text x="3.7760%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.75%)</title><rect x="3.1214%" y="517" width="0.7514%" height="15" fill="rgb(253,11,6)" fg:x="108" fg:w="26"/><text x="3.3714%" y="527.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="3.8439%" y="501" width="0.0289%" height="15" fill="rgb(247,143,39)" fg:x="133" fg:w="1"/><text x="4.0939%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="3.8728%" y="485" width="0.0289%" height="15" fill="rgb(236,97,10)" fg:x="134" fg:w="1"/><text x="4.1228%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="3.8728%" y="469" width="0.0289%" height="15" fill="rgb(233,208,19)" fg:x="134" fg:w="1"/><text x="4.1228%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="3.8728%" y="453" width="0.0289%" height="15" fill="rgb(216,164,2)" fg:x="134" fg:w="1"/><text x="4.1228%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="3.8728%" y="437" width="0.0289%" height="15" fill="rgb(220,129,5)" fg:x="134" fg:w="1"/><text x="4.1228%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="3.9017%" y="485" width="0.0289%" height="15" fill="rgb(242,17,10)" fg:x="135" fg:w="1"/><text x="4.1517%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (5 samples, 0.14%)</title><rect x="3.8728%" y="517" width="0.1445%" height="15" fill="rgb(242,107,0)" fg:x="134" fg:w="5"/><text x="4.1228%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.14%)</title><rect x="3.8728%" y="501" width="0.1445%" height="15" fill="rgb(251,28,31)" fg:x="134" fg:w="5"/><text x="4.1228%" y="511.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="3.9306%" y="485" width="0.0867%" height="15" fill="rgb(233,223,10)" fg:x="136" fg:w="3"/><text x="4.1806%" y="495.50"></text></g><g><title>__memset_evex_unaligned_erms (3 samples, 0.09%)</title><rect x="3.9306%" y="469" width="0.0867%" height="15" fill="rgb(215,21,27)" fg:x="136" fg:w="3"/><text x="4.1806%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.20%)</title><rect x="4.0173%" y="517" width="0.2023%" height="15" fill="rgb(232,23,21)" fg:x="139" fg:w="7"/><text x="4.2673%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.20%)</title><rect x="4.0173%" y="501" width="0.2023%" height="15" fill="rgb(244,5,23)" fg:x="139" fg:w="7"/><text x="4.2673%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.20%)</title><rect x="4.0173%" y="485" width="0.2023%" height="15" fill="rgb(226,81,46)" fg:x="139" fg:w="7"/><text x="4.2673%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.20%)</title><rect x="4.0173%" y="469" width="0.2023%" height="15" fill="rgb(247,70,30)" fg:x="139" fg:w="7"/><text x="4.2673%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.20%)</title><rect x="4.0173%" y="453" width="0.2023%" height="15" fill="rgb(212,68,19)" fg:x="139" fg:w="7"/><text x="4.2673%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.20%)</title><rect x="4.0173%" y="437" width="0.2023%" height="15" fill="rgb(240,187,13)" fg:x="139" fg:w="7"/><text x="4.2673%" y="447.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.20%)</title><rect x="4.0173%" y="421" width="0.2023%" height="15" fill="rgb(223,113,26)" fg:x="139" fg:w="7"/><text x="4.2673%" y="431.50"></text></g><g><title>__rdl_alloc (7 samples, 0.20%)</title><rect x="4.0173%" y="405" width="0.2023%" height="15" fill="rgb(206,192,2)" fg:x="139" fg:w="7"/><text x="4.2673%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.20%)</title><rect x="4.0173%" y="389" width="0.2023%" height="15" fill="rgb(241,108,4)" fg:x="139" fg:w="7"/><text x="4.2673%" y="399.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.20%)</title><rect x="4.0173%" y="373" width="0.2023%" height="15" fill="rgb(247,173,49)" fg:x="139" fg:w="7"/><text x="4.2673%" y="383.50"></text></g><g><title>tcache_get (2 samples, 0.06%)</title><rect x="4.1618%" y="357" width="0.0578%" height="15" fill="rgb(224,114,35)" fg:x="144" fg:w="2"/><text x="4.4118%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="4.2197%" y="517" width="0.0289%" height="15" fill="rgb(245,159,27)" fg:x="146" fg:w="1"/><text x="4.4697%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="4.3931%" y="373" width="0.0289%" height="15" fill="rgb(245,172,44)" fg:x="152" fg:w="1"/><text x="4.6431%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="4.3931%" y="357" width="0.0289%" height="15" fill="rgb(236,23,11)" fg:x="152" fg:w="1"/><text x="4.6431%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (8 samples, 0.23%)</title><rect x="4.2486%" y="517" width="0.2312%" height="15" fill="rgb(205,117,38)" fg:x="147" fg:w="8"/><text x="4.4986%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (8 samples, 0.23%)</title><rect x="4.2486%" y="501" width="0.2312%" height="15" fill="rgb(237,72,25)" fg:x="147" fg:w="8"/><text x="4.4986%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.23%)</title><rect x="4.2486%" y="485" width="0.2312%" height="15" fill="rgb(244,70,9)" fg:x="147" fg:w="8"/><text x="4.4986%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.23%)</title><rect x="4.2486%" y="469" width="0.2312%" height="15" fill="rgb(217,125,39)" fg:x="147" fg:w="8"/><text x="4.4986%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (5 samples, 0.14%)</title><rect x="4.3353%" y="453" width="0.1445%" height="15" fill="rgb(235,36,10)" fg:x="150" fg:w="5"/><text x="4.5853%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (5 samples, 0.14%)</title><rect x="4.3353%" y="437" width="0.1445%" height="15" fill="rgb(251,123,47)" fg:x="150" fg:w="5"/><text x="4.5853%" y="447.50"></text></g><g><title>core::cmp::max_by (5 samples, 0.14%)</title><rect x="4.3353%" y="421" width="0.1445%" height="15" fill="rgb(221,13,13)" fg:x="150" fg:w="5"/><text x="4.5853%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.09%)</title><rect x="4.3931%" y="405" width="0.0867%" height="15" fill="rgb(238,131,9)" fg:x="152" fg:w="3"/><text x="4.6431%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (3 samples, 0.09%)</title><rect x="4.3931%" y="389" width="0.0867%" height="15" fill="rgb(211,50,8)" fg:x="152" fg:w="3"/><text x="4.6431%" y="399.50"></text></g><g><title>project1::solver::types::Lit::var (2 samples, 0.06%)</title><rect x="4.4220%" y="373" width="0.0578%" height="15" fill="rgb(245,182,24)" fg:x="153" fg:w="2"/><text x="4.6720%" y="383.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="4.4509%" y="357" width="0.0289%" height="15" fill="rgb(242,14,37)" fg:x="154" fg:w="1"/><text x="4.7009%" y="367.50"></text></g><g><title>core::mem::take (1 samples, 0.03%)</title><rect x="4.4798%" y="517" width="0.0289%" height="15" fill="rgb(246,228,12)" fg:x="155" fg:w="1"/><text x="4.7298%" y="527.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="4.4798%" y="501" width="0.0289%" height="15" fill="rgb(213,55,15)" fg:x="155" fg:w="1"/><text x="4.7298%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="4.4798%" y="485" width="0.0289%" height="15" fill="rgb(209,9,3)" fg:x="155" fg:w="1"/><text x="4.7298%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="4.5087%" y="485" width="0.0289%" height="15" fill="rgb(230,59,30)" fg:x="156" fg:w="1"/><text x="4.7587%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="4.5087%" y="469" width="0.0289%" height="15" fill="rgb(209,121,21)" fg:x="156" fg:w="1"/><text x="4.7587%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.09%)</title><rect x="4.5087%" y="517" width="0.0867%" height="15" fill="rgb(220,109,13)" fg:x="156" fg:w="3"/><text x="4.7587%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (3 samples, 0.09%)</title><rect x="4.5087%" y="501" width="0.0867%" height="15" fill="rgb(232,18,1)" fg:x="156" fg:w="3"/><text x="4.7587%" y="511.50"></text></g><g><title>project1::solver::types::Lit::var (2 samples, 0.06%)</title><rect x="4.5376%" y="485" width="0.0578%" height="15" fill="rgb(215,41,42)" fg:x="157" fg:w="2"/><text x="4.7876%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="4.5954%" y="517" width="0.0289%" height="15" fill="rgb(224,123,36)" fg:x="159" fg:w="1"/><text x="4.8454%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (1 samples, 0.03%)</title><rect x="4.5954%" y="501" width="0.0289%" height="15" fill="rgb(240,125,3)" fg:x="159" fg:w="1"/><text x="4.8454%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="4.5954%" y="485" width="0.0289%" height="15" fill="rgb(205,98,50)" fg:x="159" fg:w="1"/><text x="4.8454%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="4.5954%" y="469" width="0.0289%" height="15" fill="rgb(205,185,37)" fg:x="159" fg:w="1"/><text x="4.8454%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="4.5954%" y="453" width="0.0289%" height="15" fill="rgb(238,207,15)" fg:x="159" fg:w="1"/><text x="4.8454%" y="463.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="4.5954%" y="437" width="0.0289%" height="15" fill="rgb(213,199,42)" fg:x="159" fg:w="1"/><text x="4.8454%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="4.5954%" y="421" width="0.0289%" height="15" fill="rgb(235,201,11)" fg:x="159" fg:w="1"/><text x="4.8454%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="4.5954%" y="405" width="0.0289%" height="15" fill="rgb(207,46,11)" fg:x="159" fg:w="1"/><text x="4.8454%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="4.5954%" y="389" width="0.0289%" height="15" fill="rgb(241,35,35)" fg:x="159" fg:w="1"/><text x="4.8454%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="4.6243%" y="517" width="0.0289%" height="15" fill="rgb(243,32,47)" fg:x="160" fg:w="1"/><text x="4.8743%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (1 samples, 0.03%)</title><rect x="4.6243%" y="501" width="0.0289%" height="15" fill="rgb(247,202,23)" fg:x="160" fg:w="1"/><text x="4.8743%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="4.6243%" y="485" width="0.0289%" height="15" fill="rgb(219,102,11)" fg:x="160" fg:w="1"/><text x="4.8743%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="4.6243%" y="469" width="0.0289%" height="15" fill="rgb(243,110,44)" fg:x="160" fg:w="1"/><text x="4.8743%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (19 samples, 0.55%)</title><rect x="4.6532%" y="517" width="0.5491%" height="15" fill="rgb(222,74,54)" fg:x="161" fg:w="19"/><text x="4.9032%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.55%)</title><rect x="4.6532%" y="501" width="0.5491%" height="15" fill="rgb(216,99,12)" fg:x="161" fg:w="19"/><text x="4.9032%" y="511.50"></text></g><g><title>__memcpy_evex_unaligned_erms (19 samples, 0.55%)</title><rect x="4.6532%" y="485" width="0.5491%" height="15" fill="rgb(226,22,26)" fg:x="161" fg:w="19"/><text x="4.9032%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1 samples, 0.03%)</title><rect x="5.2023%" y="517" width="0.0289%" height="15" fill="rgb(217,163,10)" fg:x="180" fg:w="1"/><text x="5.4523%" y="527.50"></text></g><g><title>core::ptr::swap (1 samples, 0.03%)</title><rect x="5.2023%" y="501" width="0.0289%" height="15" fill="rgb(213,25,53)" fg:x="180" fg:w="1"/><text x="5.4523%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="5.2023%" y="485" width="0.0289%" height="15" fill="rgb(252,105,26)" fg:x="180" fg:w="1"/><text x="5.4523%" y="495.50"></text></g><g><title>log::max_level (2 samples, 0.06%)</title><rect x="5.2312%" y="517" width="0.0578%" height="15" fill="rgb(220,39,43)" fg:x="181" fg:w="2"/><text x="5.4812%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.06%)</title><rect x="5.2312%" y="501" width="0.0578%" height="15" fill="rgb(229,68,48)" fg:x="181" fg:w="2"/><text x="5.4812%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.06%)</title><rect x="5.2312%" y="485" width="0.0578%" height="15" fill="rgb(252,8,32)" fg:x="181" fg:w="2"/><text x="5.4812%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="5.3468%" y="485" width="0.0867%" height="15" fill="rgb(223,20,43)" fg:x="185" fg:w="3"/><text x="5.5968%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.17%)</title><rect x="5.3468%" y="501" width="0.1734%" height="15" fill="rgb(229,81,49)" fg:x="185" fg:w="6"/><text x="5.5968%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.09%)</title><rect x="5.4335%" y="485" width="0.0867%" height="15" fill="rgb(236,28,36)" fg:x="188" fg:w="3"/><text x="5.6835%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.09%)</title><rect x="5.4335%" y="469" width="0.0867%" height="15" fill="rgb(249,185,26)" fg:x="188" fg:w="3"/><text x="5.6835%" y="479.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (9 samples, 0.26%)</title><rect x="5.2890%" y="517" width="0.2601%" height="15" fill="rgb(249,174,33)" fg:x="183" fg:w="9"/><text x="5.5390%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="5.5202%" y="501" width="0.0289%" height="15" fill="rgb(233,201,37)" fg:x="191" fg:w="1"/><text x="5.7702%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="5.6647%" y="501" width="0.0578%" height="15" fill="rgb(221,78,26)" fg:x="196" fg:w="2"/><text x="5.9147%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="5.6647%" y="485" width="0.0578%" height="15" fill="rgb(250,127,30)" fg:x="196" fg:w="2"/><text x="5.9147%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="5.6936%" y="469" width="0.0289%" height="15" fill="rgb(230,49,44)" fg:x="197" fg:w="1"/><text x="5.9436%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="5.6936%" y="453" width="0.0289%" height="15" fill="rgb(229,67,23)" fg:x="197" fg:w="1"/><text x="5.9436%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (1 samples, 0.03%)</title><rect x="5.7225%" y="501" width="0.0289%" height="15" fill="rgb(249,83,47)" fg:x="198" fg:w="1"/><text x="5.9725%" y="511.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (1 samples, 0.03%)</title><rect x="5.7225%" y="485" width="0.0289%" height="15" fill="rgb(215,43,3)" fg:x="198" fg:w="1"/><text x="5.9725%" y="495.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (1 samples, 0.03%)</title><rect x="5.7225%" y="469" width="0.0289%" height="15" fill="rgb(238,154,13)" fg:x="198" fg:w="1"/><text x="5.9725%" y="479.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2 samples, 0.06%)</title><rect x="5.7514%" y="501" width="0.0578%" height="15" fill="rgb(219,56,2)" fg:x="199" fg:w="2"/><text x="6.0014%" y="511.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.06%)</title><rect x="5.7514%" y="485" width="0.0578%" height="15" fill="rgb(233,0,4)" fg:x="199" fg:w="2"/><text x="6.0014%" y="495.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (5 samples, 0.14%)</title><rect x="5.8092%" y="501" width="0.1445%" height="15" fill="rgb(235,30,7)" fg:x="201" fg:w="5"/><text x="6.0592%" y="511.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (5 samples, 0.14%)</title><rect x="5.8092%" y="485" width="0.1445%" height="15" fill="rgb(250,79,13)" fg:x="201" fg:w="5"/><text x="6.0592%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="5.9827%" y="293" width="0.0289%" height="15" fill="rgb(211,146,34)" fg:x="207" fg:w="1"/><text x="6.2327%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="5.9827%" y="309" width="0.0578%" height="15" fill="rgb(228,22,38)" fg:x="207" fg:w="2"/><text x="6.2327%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="6.0116%" y="293" width="0.0289%" height="15" fill="rgb(235,168,5)" fg:x="208" fg:w="1"/><text x="6.2616%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="6.0405%" y="293" width="0.0867%" height="15" fill="rgb(221,155,16)" fg:x="209" fg:w="3"/><text x="6.2905%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="5.9827%" y="357" width="0.1734%" height="15" fill="rgb(215,215,53)" fg:x="207" fg:w="6"/><text x="6.2327%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="5.9827%" y="341" width="0.1734%" height="15" fill="rgb(223,4,10)" fg:x="207" fg:w="6"/><text x="6.2327%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.17%)</title><rect x="5.9827%" y="325" width="0.1734%" height="15" fill="rgb(234,103,6)" fg:x="207" fg:w="6"/><text x="6.2327%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.12%)</title><rect x="6.0405%" y="309" width="0.1156%" height="15" fill="rgb(227,97,0)" fg:x="209" fg:w="4"/><text x="6.2905%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="6.1272%" y="293" width="0.0289%" height="15" fill="rgb(234,150,53)" fg:x="212" fg:w="1"/><text x="6.3772%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="6.1561%" y="357" width="0.0289%" height="15" fill="rgb(228,201,54)" fg:x="213" fg:w="1"/><text x="6.4061%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="6.1561%" y="341" width="0.0289%" height="15" fill="rgb(222,22,37)" fg:x="213" fg:w="1"/><text x="6.4061%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="6.1561%" y="325" width="0.0289%" height="15" fill="rgb(237,53,32)" fg:x="213" fg:w="1"/><text x="6.4061%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.03%)</title><rect x="6.1561%" y="309" width="0.0289%" height="15" fill="rgb(233,25,53)" fg:x="213" fg:w="1"/><text x="6.4061%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="6.3006%" y="229" width="0.0289%" height="15" fill="rgb(210,40,34)" fg:x="218" fg:w="1"/><text x="6.5506%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.40%)</title><rect x="5.9827%" y="389" width="0.4046%" height="15" fill="rgb(241,220,44)" fg:x="207" fg:w="14"/><text x="6.2327%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.40%)</title><rect x="5.9827%" y="373" width="0.4046%" height="15" fill="rgb(235,28,35)" fg:x="207" fg:w="14"/><text x="6.2327%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.20%)</title><rect x="6.1850%" y="357" width="0.2023%" height="15" fill="rgb(210,56,17)" fg:x="214" fg:w="7"/><text x="6.4350%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (7 samples, 0.20%)</title><rect x="6.1850%" y="341" width="0.2023%" height="15" fill="rgb(224,130,29)" fg:x="214" fg:w="7"/><text x="6.4350%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (7 samples, 0.20%)</title><rect x="6.1850%" y="325" width="0.2023%" height="15" fill="rgb(235,212,8)" fg:x="214" fg:w="7"/><text x="6.4350%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (7 samples, 0.20%)</title><rect x="6.1850%" y="309" width="0.2023%" height="15" fill="rgb(223,33,50)" fg:x="214" fg:w="7"/><text x="6.4350%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="6.1850%" y="293" width="0.2023%" height="15" fill="rgb(219,149,13)" fg:x="214" fg:w="7"/><text x="6.4350%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="6.1850%" y="277" width="0.2023%" height="15" fill="rgb(250,156,29)" fg:x="214" fg:w="7"/><text x="6.4350%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="6.1850%" y="261" width="0.2023%" height="15" fill="rgb(216,193,19)" fg:x="214" fg:w="7"/><text x="6.4350%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="6.2717%" y="245" width="0.1156%" height="15" fill="rgb(216,135,14)" fg:x="217" fg:w="4"/><text x="6.5217%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="6.3295%" y="229" width="0.0578%" height="15" fill="rgb(241,47,5)" fg:x="219" fg:w="2"/><text x="6.5795%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.06%)</title><rect x="6.4162%" y="341" width="0.0578%" height="15" fill="rgb(233,42,35)" fg:x="222" fg:w="2"/><text x="6.6662%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="6.4162%" y="325" width="0.0578%" height="15" fill="rgb(231,13,6)" fg:x="222" fg:w="2"/><text x="6.6662%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="6.4162%" y="309" width="0.0578%" height="15" fill="rgb(207,181,40)" fg:x="222" fg:w="2"/><text x="6.6662%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="6.4162%" y="293" width="0.0578%" height="15" fill="rgb(254,173,49)" fg:x="222" fg:w="2"/><text x="6.6662%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="6.4162%" y="277" width="0.0578%" height="15" fill="rgb(221,1,38)" fg:x="222" fg:w="2"/><text x="6.6662%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="6.4740%" y="341" width="0.0289%" height="15" fill="rgb(206,124,46)" fg:x="224" fg:w="1"/><text x="6.7240%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.09%)</title><rect x="6.5029%" y="341" width="0.0867%" height="15" fill="rgb(249,21,11)" fg:x="225" fg:w="3"/><text x="6.7529%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (22 samples, 0.64%)</title><rect x="5.9827%" y="405" width="0.6358%" height="15" fill="rgb(222,201,40)" fg:x="207" fg:w="22"/><text x="6.2327%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.23%)</title><rect x="6.3873%" y="389" width="0.2312%" height="15" fill="rgb(235,61,29)" fg:x="221" fg:w="8"/><text x="6.6373%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.23%)</title><rect x="6.3873%" y="373" width="0.2312%" height="15" fill="rgb(219,207,3)" fg:x="221" fg:w="8"/><text x="6.6373%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.23%)</title><rect x="6.3873%" y="357" width="0.2312%" height="15" fill="rgb(222,56,46)" fg:x="221" fg:w="8"/><text x="6.6373%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="6.5896%" y="341" width="0.0289%" height="15" fill="rgb(239,76,54)" fg:x="228" fg:w="1"/><text x="6.8396%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="6.5896%" y="325" width="0.0289%" height="15" fill="rgb(231,124,27)" fg:x="228" fg:w="1"/><text x="6.8396%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (23 samples, 0.66%)</title><rect x="5.9827%" y="453" width="0.6647%" height="15" fill="rgb(249,195,6)" fg:x="207" fg:w="23"/><text x="6.2327%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 0.66%)</title><rect x="5.9827%" y="437" width="0.6647%" height="15" fill="rgb(237,174,47)" fg:x="207" fg:w="23"/><text x="6.2327%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23 samples, 0.66%)</title><rect x="5.9827%" y="421" width="0.6647%" height="15" fill="rgb(206,201,31)" fg:x="207" fg:w="23"/><text x="6.2327%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="6.6185%" y="405" width="0.0289%" height="15" fill="rgb(231,57,52)" fg:x="229" fg:w="1"/><text x="6.8685%" y="415.50"></text></g><g><title>compare::Compare::compares_ge (5 samples, 0.14%)</title><rect x="6.6763%" y="421" width="0.1445%" height="15" fill="rgb(248,177,22)" fg:x="231" fg:w="5"/><text x="6.9263%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.14%)</title><rect x="6.6763%" y="405" width="0.1445%" height="15" fill="rgb(215,211,37)" fg:x="231" fg:w="5"/><text x="6.9263%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.14%)</title><rect x="6.6763%" y="389" width="0.1445%" height="15" fill="rgb(241,128,51)" fg:x="231" fg:w="5"/><text x="6.9263%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (5 samples, 0.14%)</title><rect x="6.6763%" y="373" width="0.1445%" height="15" fill="rgb(227,165,31)" fg:x="231" fg:w="5"/><text x="6.9263%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (5 samples, 0.14%)</title><rect x="6.6763%" y="357" width="0.1445%" height="15" fill="rgb(228,167,24)" fg:x="231" fg:w="5"/><text x="6.9263%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (5 samples, 0.14%)</title><rect x="6.6763%" y="341" width="0.1445%" height="15" fill="rgb(228,143,12)" fg:x="231" fg:w="5"/><text x="6.9263%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (5 samples, 0.14%)</title><rect x="6.6763%" y="325" width="0.1445%" height="15" fill="rgb(249,149,8)" fg:x="231" fg:w="5"/><text x="6.9263%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.17%)</title><rect x="6.8208%" y="389" width="0.1734%" height="15" fill="rgb(243,35,44)" fg:x="236" fg:w="6"/><text x="7.0708%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="6.9942%" y="389" width="0.0289%" height="15" fill="rgb(246,89,9)" fg:x="242" fg:w="1"/><text x="7.2442%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="6.9942%" y="373" width="0.0289%" height="15" fill="rgb(233,213,13)" fg:x="242" fg:w="1"/><text x="7.2442%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="6.9942%" y="357" width="0.0289%" height="15" fill="rgb(233,141,41)" fg:x="242" fg:w="1"/><text x="7.2442%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="7.0231%" y="261" width="0.0578%" height="15" fill="rgb(239,167,4)" fg:x="243" fg:w="2"/><text x="7.2731%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="7.0231%" y="245" width="0.0578%" height="15" fill="rgb(209,217,16)" fg:x="243" fg:w="2"/><text x="7.2731%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="7.1098%" y="245" width="0.0867%" height="15" fill="rgb(219,88,35)" fg:x="246" fg:w="3"/><text x="7.3598%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="7.0231%" y="309" width="0.2312%" height="15" fill="rgb(220,193,23)" fg:x="243" fg:w="8"/><text x="7.2731%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="7.0231%" y="293" width="0.2312%" height="15" fill="rgb(230,90,52)" fg:x="243" fg:w="8"/><text x="7.2731%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="7.0231%" y="277" width="0.2312%" height="15" fill="rgb(252,106,19)" fg:x="243" fg:w="8"/><text x="7.2731%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.17%)</title><rect x="7.0809%" y="261" width="0.1734%" height="15" fill="rgb(206,74,20)" fg:x="245" fg:w="6"/><text x="7.3309%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="7.1965%" y="245" width="0.0578%" height="15" fill="rgb(230,138,44)" fg:x="249" fg:w="2"/><text x="7.4465%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.38%)</title><rect x="7.0231%" y="341" width="0.3757%" height="15" fill="rgb(235,182,43)" fg:x="243" fg:w="13"/><text x="7.2731%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.38%)</title><rect x="7.0231%" y="325" width="0.3757%" height="15" fill="rgb(242,16,51)" fg:x="243" fg:w="13"/><text x="7.2731%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.14%)</title><rect x="7.2543%" y="309" width="0.1445%" height="15" fill="rgb(248,9,4)" fg:x="251" fg:w="5"/><text x="7.5043%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.14%)</title><rect x="7.2543%" y="293" width="0.1445%" height="15" fill="rgb(210,31,22)" fg:x="251" fg:w="5"/><text x="7.5043%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.14%)</title><rect x="7.2543%" y="277" width="0.1445%" height="15" fill="rgb(239,54,39)" fg:x="251" fg:w="5"/><text x="7.5043%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.14%)</title><rect x="7.2543%" y="261" width="0.1445%" height="15" fill="rgb(230,99,41)" fg:x="251" fg:w="5"/><text x="7.5043%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="7.2543%" y="245" width="0.1445%" height="15" fill="rgb(253,106,12)" fg:x="251" fg:w="5"/><text x="7.5043%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="7.2543%" y="229" width="0.1445%" height="15" fill="rgb(213,46,41)" fg:x="251" fg:w="5"/><text x="7.5043%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="7.2543%" y="213" width="0.1445%" height="15" fill="rgb(215,133,35)" fg:x="251" fg:w="5"/><text x="7.5043%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="7.3410%" y="197" width="0.0578%" height="15" fill="rgb(213,28,5)" fg:x="254" fg:w="2"/><text x="7.5910%" y="207.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.4855%" y="277" width="0.0289%" height="15" fill="rgb(215,77,49)" fg:x="259" fg:w="1"/><text x="7.7355%" y="287.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.4855%" y="261" width="0.0289%" height="15" fill="rgb(248,100,22)" fg:x="259" fg:w="1"/><text x="7.7355%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="7.4855%" y="245" width="0.0289%" height="15" fill="rgb(208,67,9)" fg:x="259" fg:w="1"/><text x="7.7355%" y="255.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="7.4855%" y="229" width="0.0289%" height="15" fill="rgb(219,133,21)" fg:x="259" fg:w="1"/><text x="7.7355%" y="239.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="7.4855%" y="213" width="0.0289%" height="15" fill="rgb(246,46,29)" fg:x="259" fg:w="1"/><text x="7.7355%" y="223.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="7.4855%" y="197" width="0.0289%" height="15" fill="rgb(246,185,52)" fg:x="259" fg:w="1"/><text x="7.7355%" y="207.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="7.4855%" y="181" width="0.0289%" height="15" fill="rgb(252,136,11)" fg:x="259" fg:w="1"/><text x="7.7355%" y="191.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="7.4855%" y="165" width="0.0289%" height="15" fill="rgb(219,138,53)" fg:x="259" fg:w="1"/><text x="7.7355%" y="175.50"></text></g><g><title>rcu_sched_clock_irq (1 samples, 0.03%)</title><rect x="7.4855%" y="149" width="0.0289%" height="15" fill="rgb(211,51,23)" fg:x="259" fg:w="1"/><text x="7.7355%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="7.4566%" y="293" width="0.0867%" height="15" fill="rgb(247,221,28)" fg:x="258" fg:w="3"/><text x="7.7066%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="7.5145%" y="277" width="0.0289%" height="15" fill="rgb(251,222,45)" fg:x="260" fg:w="1"/><text x="7.7645%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="7.5434%" y="293" width="0.0867%" height="15" fill="rgb(217,162,53)" fg:x="261" fg:w="3"/><text x="7.7934%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.09%)</title><rect x="7.5434%" y="277" width="0.0867%" height="15" fill="rgb(229,93,14)" fg:x="261" fg:w="3"/><text x="7.7934%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.09%)</title><rect x="7.5434%" y="261" width="0.0867%" height="15" fill="rgb(209,67,49)" fg:x="261" fg:w="3"/><text x="7.7934%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.09%)</title><rect x="7.5434%" y="245" width="0.0867%" height="15" fill="rgb(213,87,29)" fg:x="261" fg:w="3"/><text x="7.7934%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (3 samples, 0.09%)</title><rect x="7.5434%" y="229" width="0.0867%" height="15" fill="rgb(205,151,52)" fg:x="261" fg:w="3"/><text x="7.7934%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (32 samples, 0.92%)</title><rect x="6.8208%" y="421" width="0.9249%" height="15" fill="rgb(253,215,39)" fg:x="236" fg:w="32"/><text x="7.0708%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.92%)</title><rect x="6.8208%" y="405" width="0.9249%" height="15" fill="rgb(221,220,41)" fg:x="236" fg:w="32"/><text x="7.0708%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (25 samples, 0.72%)</title><rect x="7.0231%" y="389" width="0.7225%" height="15" fill="rgb(218,133,21)" fg:x="243" fg:w="25"/><text x="7.2731%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (25 samples, 0.72%)</title><rect x="7.0231%" y="373" width="0.7225%" height="15" fill="rgb(221,193,43)" fg:x="243" fg:w="25"/><text x="7.2731%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (25 samples, 0.72%)</title><rect x="7.0231%" y="357" width="0.7225%" height="15" fill="rgb(240,128,52)" fg:x="243" fg:w="25"/><text x="7.2731%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.35%)</title><rect x="7.3988%" y="341" width="0.3468%" height="15" fill="rgb(253,114,12)" fg:x="256" fg:w="12"/><text x="7.6488%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.35%)</title><rect x="7.3988%" y="325" width="0.3468%" height="15" fill="rgb(215,223,47)" fg:x="256" fg:w="12"/><text x="7.6488%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.35%)</title><rect x="7.3988%" y="309" width="0.3468%" height="15" fill="rgb(248,225,23)" fg:x="256" fg:w="12"/><text x="7.6488%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.12%)</title><rect x="7.6301%" y="293" width="0.1156%" height="15" fill="rgb(250,108,0)" fg:x="264" fg:w="4"/><text x="7.8801%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.12%)</title><rect x="7.6301%" y="277" width="0.1156%" height="15" fill="rgb(228,208,7)" fg:x="264" fg:w="4"/><text x="7.8801%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (41 samples, 1.18%)</title><rect x="6.6474%" y="437" width="1.1850%" height="15" fill="rgb(244,45,10)" fg:x="230" fg:w="41"/><text x="6.8974%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (3 samples, 0.09%)</title><rect x="7.7457%" y="421" width="0.0867%" height="15" fill="rgb(207,125,25)" fg:x="268" fg:w="3"/><text x="7.9957%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (42 samples, 1.21%)</title><rect x="6.6474%" y="453" width="1.2139%" height="15" fill="rgb(210,195,18)" fg:x="230" fg:w="42"/><text x="6.8974%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="7.8324%" y="437" width="0.0289%" height="15" fill="rgb(249,80,12)" fg:x="271" fg:w="1"/><text x="8.0824%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="7.9191%" y="437" width="0.0289%" height="15" fill="rgb(221,65,9)" fg:x="274" fg:w="1"/><text x="8.1691%" y="447.50"></text></g><g><title>compare::Compare::compares_le (4 samples, 0.12%)</title><rect x="7.9480%" y="437" width="0.1156%" height="15" fill="rgb(235,49,36)" fg:x="275" fg:w="4"/><text x="8.1980%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (4 samples, 0.12%)</title><rect x="7.9480%" y="421" width="0.1156%" height="15" fill="rgb(225,32,20)" fg:x="275" fg:w="4"/><text x="8.1980%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.12%)</title><rect x="7.9480%" y="405" width="0.1156%" height="15" fill="rgb(215,141,46)" fg:x="275" fg:w="4"/><text x="8.1980%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.17%)</title><rect x="8.0636%" y="405" width="0.1734%" height="15" fill="rgb(250,160,47)" fg:x="279" fg:w="6"/><text x="8.3136%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.29%)</title><rect x="8.2370%" y="325" width="0.2890%" height="15" fill="rgb(216,222,40)" fg:x="285" fg:w="10"/><text x="8.4870%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.29%)</title><rect x="8.2370%" y="309" width="0.2890%" height="15" fill="rgb(234,217,39)" fg:x="285" fg:w="10"/><text x="8.4870%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.29%)</title><rect x="8.2370%" y="293" width="0.2890%" height="15" fill="rgb(207,178,40)" fg:x="285" fg:w="10"/><text x="8.4870%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.23%)</title><rect x="8.2948%" y="277" width="0.2312%" height="15" fill="rgb(221,136,13)" fg:x="287" fg:w="8"/><text x="8.5448%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.14%)</title><rect x="8.3815%" y="261" width="0.1445%" height="15" fill="rgb(249,199,10)" fg:x="290" fg:w="5"/><text x="8.6315%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="8.5260%" y="325" width="0.0289%" height="15" fill="rgb(249,222,13)" fg:x="295" fg:w="1"/><text x="8.7760%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.40%)</title><rect x="8.2370%" y="357" width="0.4046%" height="15" fill="rgb(244,185,38)" fg:x="285" fg:w="14"/><text x="8.4870%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.40%)</title><rect x="8.2370%" y="341" width="0.4046%" height="15" fill="rgb(236,202,9)" fg:x="285" fg:w="14"/><text x="8.4870%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="8.5549%" y="325" width="0.0867%" height="15" fill="rgb(250,229,37)" fg:x="296" fg:w="3"/><text x="8.8049%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="8.5549%" y="309" width="0.0867%" height="15" fill="rgb(206,174,23)" fg:x="296" fg:w="3"/><text x="8.8049%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="8.5549%" y="293" width="0.0867%" height="15" fill="rgb(211,33,43)" fg:x="296" fg:w="3"/><text x="8.8049%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="8.5549%" y="277" width="0.0867%" height="15" fill="rgb(245,58,50)" fg:x="296" fg:w="3"/><text x="8.8049%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="8.5549%" y="261" width="0.0867%" height="15" fill="rgb(244,68,36)" fg:x="296" fg:w="3"/><text x="8.8049%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="8.5549%" y="245" width="0.0867%" height="15" fill="rgb(232,229,15)" fg:x="296" fg:w="3"/><text x="8.8049%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="8.5549%" y="229" width="0.0867%" height="15" fill="rgb(254,30,23)" fg:x="296" fg:w="3"/><text x="8.8049%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="8.6127%" y="213" width="0.0289%" height="15" fill="rgb(235,160,14)" fg:x="298" fg:w="1"/><text x="8.8627%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="8.6127%" y="197" width="0.0289%" height="15" fill="rgb(212,155,44)" fg:x="298" fg:w="1"/><text x="8.8627%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="8.6416%" y="309" width="0.0289%" height="15" fill="rgb(226,2,50)" fg:x="299" fg:w="1"/><text x="8.8916%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="8.6416%" y="293" width="0.0289%" height="15" fill="rgb(234,177,6)" fg:x="299" fg:w="1"/><text x="8.8916%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.14%)</title><rect x="8.6705%" y="293" width="0.1445%" height="15" fill="rgb(217,24,9)" fg:x="300" fg:w="5"/><text x="8.9205%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.14%)</title><rect x="8.6705%" y="277" width="0.1445%" height="15" fill="rgb(220,13,46)" fg:x="300" fg:w="5"/><text x="8.9205%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="8.6705%" y="261" width="0.1445%" height="15" fill="rgb(239,221,27)" fg:x="300" fg:w="5"/><text x="8.9205%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.14%)</title><rect x="8.6705%" y="245" width="0.1445%" height="15" fill="rgb(222,198,25)" fg:x="300" fg:w="5"/><text x="8.9205%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.20%)</title><rect x="8.6705%" y="309" width="0.2023%" height="15" fill="rgb(211,99,13)" fg:x="300" fg:w="7"/><text x="8.9205%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="8.8150%" y="293" width="0.0578%" height="15" fill="rgb(232,111,31)" fg:x="305" fg:w="2"/><text x="9.0650%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="8.8150%" y="277" width="0.0578%" height="15" fill="rgb(245,82,37)" fg:x="305" fg:w="2"/><text x="9.0650%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="8.8150%" y="261" width="0.0578%" height="15" fill="rgb(227,149,46)" fg:x="305" fg:w="2"/><text x="9.0650%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="8.8150%" y="245" width="0.0578%" height="15" fill="rgb(218,36,50)" fg:x="305" fg:w="2"/><text x="9.0650%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="8.8728%" y="309" width="0.0289%" height="15" fill="rgb(226,80,48)" fg:x="307" fg:w="1"/><text x="9.1228%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="8.9017%" y="309" width="0.0289%" height="15" fill="rgb(238,224,15)" fg:x="308" fg:w="1"/><text x="9.1517%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="8.9017%" y="293" width="0.0289%" height="15" fill="rgb(241,136,10)" fg:x="308" fg:w="1"/><text x="9.1517%" y="303.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.92%)</title><rect x="8.0636%" y="421" width="0.9249%" height="15" fill="rgb(208,32,45)" fg:x="279" fg:w="32"/><text x="8.3136%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (26 samples, 0.75%)</title><rect x="8.2370%" y="405" width="0.7514%" height="15" fill="rgb(207,135,9)" fg:x="285" fg:w="26"/><text x="8.4870%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (26 samples, 0.75%)</title><rect x="8.2370%" y="389" width="0.7514%" height="15" fill="rgb(206,86,44)" fg:x="285" fg:w="26"/><text x="8.4870%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (26 samples, 0.75%)</title><rect x="8.2370%" y="373" width="0.7514%" height="15" fill="rgb(245,177,15)" fg:x="285" fg:w="26"/><text x="8.4870%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (12 samples, 0.35%)</title><rect x="8.6416%" y="357" width="0.3468%" height="15" fill="rgb(206,64,50)" fg:x="299" fg:w="12"/><text x="8.8916%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.35%)</title><rect x="8.6416%" y="341" width="0.3468%" height="15" fill="rgb(234,36,40)" fg:x="299" fg:w="12"/><text x="8.8916%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.35%)</title><rect x="8.6416%" y="325" width="0.3468%" height="15" fill="rgb(213,64,8)" fg:x="299" fg:w="12"/><text x="8.8916%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="8.9306%" y="309" width="0.0578%" height="15" fill="rgb(210,75,36)" fg:x="309" fg:w="2"/><text x="9.1806%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (33 samples, 0.95%)</title><rect x="8.0636%" y="437" width="0.9538%" height="15" fill="rgb(229,88,21)" fg:x="279" fg:w="33"/><text x="8.3136%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="8.9884%" y="421" width="0.0289%" height="15" fill="rgb(252,204,47)" fg:x="311" fg:w="1"/><text x="9.2384%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (108 samples, 3.12%)</title><rect x="5.9538%" y="501" width="3.1214%" height="15" fill="rgb(208,77,27)" fg:x="206" fg:w="108"/><text x="6.2038%" y="511.50">cor..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 3.12%)</title><rect x="5.9538%" y="485" width="3.1214%" height="15" fill="rgb(221,76,26)" fg:x="206" fg:w="108"/><text x="6.2038%" y="495.50">&lt;mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (107 samples, 3.09%)</title><rect x="5.9827%" y="469" width="3.0925%" height="15" fill="rgb(225,139,18)" fg:x="207" fg:w="107"/><text x="6.2327%" y="479.50">mut..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (42 samples, 1.21%)</title><rect x="7.8613%" y="453" width="1.2139%" height="15" fill="rgb(230,137,11)" fg:x="272" fg:w="42"/><text x="8.1113%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="9.0173%" y="437" width="0.0578%" height="15" fill="rgb(212,28,1)" fg:x="312" fg:w="2"/><text x="9.2673%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="9.0462%" y="421" width="0.0289%" height="15" fill="rgb(248,164,17)" fg:x="313" fg:w="1"/><text x="9.2962%" y="431.50"></text></g><g><title>log::__private_api::log (1 samples, 0.03%)</title><rect x="9.0751%" y="501" width="0.0289%" height="15" fill="rgb(222,171,42)" fg:x="314" fg:w="1"/><text x="9.3251%" y="511.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (1 samples, 0.03%)</title><rect x="9.0751%" y="485" width="0.0289%" height="15" fill="rgb(243,84,45)" fg:x="314" fg:w="1"/><text x="9.3251%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="9.1329%" y="341" width="0.0867%" height="15" fill="rgb(252,49,23)" fg:x="316" fg:w="3"/><text x="9.3829%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.14%)</title><rect x="9.1040%" y="357" width="0.1445%" height="15" fill="rgb(215,19,7)" fg:x="315" fg:w="5"/><text x="9.3540%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.2197%" y="341" width="0.0289%" height="15" fill="rgb(238,81,41)" fg:x="319" fg:w="1"/><text x="9.4697%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.20%)</title><rect x="9.3353%" y="341" width="0.2023%" height="15" fill="rgb(210,199,37)" fg:x="323" fg:w="7"/><text x="9.5853%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.55%)</title><rect x="9.1040%" y="405" width="0.5491%" height="15" fill="rgb(244,192,49)" fg:x="315" fg:w="19"/><text x="9.3540%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.55%)</title><rect x="9.1040%" y="389" width="0.5491%" height="15" fill="rgb(226,211,11)" fg:x="315" fg:w="19"/><text x="9.3540%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.55%)</title><rect x="9.1040%" y="373" width="0.5491%" height="15" fill="rgb(236,162,54)" fg:x="315" fg:w="19"/><text x="9.3540%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.40%)</title><rect x="9.2486%" y="357" width="0.4046%" height="15" fill="rgb(220,229,9)" fg:x="320" fg:w="14"/><text x="9.4986%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.12%)</title><rect x="9.5376%" y="341" width="0.1156%" height="15" fill="rgb(250,87,22)" fg:x="330" fg:w="4"/><text x="9.7876%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.14%)</title><rect x="9.6532%" y="405" width="0.1445%" height="15" fill="rgb(239,43,17)" fg:x="334" fg:w="5"/><text x="9.9032%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.12%)</title><rect x="9.6821%" y="389" width="0.1156%" height="15" fill="rgb(231,177,25)" fg:x="335" fg:w="4"/><text x="9.9321%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.12%)</title><rect x="9.6821%" y="373" width="0.1156%" height="15" fill="rgb(219,179,1)" fg:x="335" fg:w="4"/><text x="9.9321%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.12%)</title><rect x="9.6821%" y="357" width="0.1156%" height="15" fill="rgb(238,219,53)" fg:x="335" fg:w="4"/><text x="9.9321%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.12%)</title><rect x="9.8555%" y="277" width="0.1156%" height="15" fill="rgb(232,167,36)" fg:x="341" fg:w="4"/><text x="10.1055%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.90%)</title><rect x="9.1040%" y="437" width="0.8960%" height="15" fill="rgb(244,19,51)" fg:x="315" fg:w="31"/><text x="9.3540%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 0.90%)</title><rect x="9.1040%" y="421" width="0.8960%" height="15" fill="rgb(224,6,22)" fg:x="315" fg:w="31"/><text x="9.3540%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.20%)</title><rect x="9.7977%" y="405" width="0.2023%" height="15" fill="rgb(224,145,5)" fg:x="339" fg:w="7"/><text x="10.0477%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (7 samples, 0.20%)</title><rect x="9.7977%" y="389" width="0.2023%" height="15" fill="rgb(234,130,49)" fg:x="339" fg:w="7"/><text x="10.0477%" y="399.50"></text></g><g><title>core::hash::Hasher::write_i64 (7 samples, 0.20%)</title><rect x="9.7977%" y="373" width="0.2023%" height="15" fill="rgb(254,6,2)" fg:x="339" fg:w="7"/><text x="10.0477%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (7 samples, 0.20%)</title><rect x="9.7977%" y="357" width="0.2023%" height="15" fill="rgb(208,96,46)" fg:x="339" fg:w="7"/><text x="10.0477%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="9.7977%" y="341" width="0.2023%" height="15" fill="rgb(239,3,39)" fg:x="339" fg:w="7"/><text x="10.0477%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="9.7977%" y="325" width="0.2023%" height="15" fill="rgb(233,210,1)" fg:x="339" fg:w="7"/><text x="10.0477%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.20%)</title><rect x="9.7977%" y="309" width="0.2023%" height="15" fill="rgb(244,137,37)" fg:x="339" fg:w="7"/><text x="10.0477%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.17%)</title><rect x="9.8266%" y="293" width="0.1734%" height="15" fill="rgb(240,136,2)" fg:x="340" fg:w="6"/><text x="10.0766%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="9.9711%" y="277" width="0.0289%" height="15" fill="rgb(239,18,37)" fg:x="345" fg:w="1"/><text x="10.2211%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.20%)</title><rect x="10.1445%" y="389" width="0.2023%" height="15" fill="rgb(218,185,22)" fg:x="351" fg:w="7"/><text x="10.3945%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.20%)</title><rect x="10.1445%" y="373" width="0.2023%" height="15" fill="rgb(225,218,4)" fg:x="351" fg:w="7"/><text x="10.3945%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="10.3179%" y="357" width="0.0289%" height="15" fill="rgb(230,182,32)" fg:x="357" fg:w="1"/><text x="10.5679%" y="367.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="10.3179%" y="341" width="0.0289%" height="15" fill="rgb(242,56,43)" fg:x="357" fg:w="1"/><text x="10.5679%" y="351.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.03%)</title><rect x="10.3468%" y="389" width="0.0289%" height="15" fill="rgb(233,99,24)" fg:x="358" fg:w="1"/><text x="10.5968%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9 samples, 0.26%)</title><rect x="10.3757%" y="389" width="0.2601%" height="15" fill="rgb(234,209,42)" fg:x="359" fg:w="9"/><text x="10.6257%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (9 samples, 0.26%)</title><rect x="10.3757%" y="373" width="0.2601%" height="15" fill="rgb(227,7,12)" fg:x="359" fg:w="9"/><text x="10.6257%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (9 samples, 0.26%)</title><rect x="10.3757%" y="357" width="0.2601%" height="15" fill="rgb(245,203,43)" fg:x="359" fg:w="9"/><text x="10.6257%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.26%)</title><rect x="10.3757%" y="341" width="0.2601%" height="15" fill="rgb(238,205,33)" fg:x="359" fg:w="9"/><text x="10.6257%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (9 samples, 0.26%)</title><rect x="10.3757%" y="325" width="0.2601%" height="15" fill="rgb(231,56,7)" fg:x="359" fg:w="9"/><text x="10.6257%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (6 samples, 0.17%)</title><rect x="10.6358%" y="389" width="0.1734%" height="15" fill="rgb(244,186,29)" fg:x="368" fg:w="6"/><text x="10.8858%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.17%)</title><rect x="10.8092%" y="389" width="0.1734%" height="15" fill="rgb(234,111,31)" fg:x="374" fg:w="6"/><text x="11.0592%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.17%)</title><rect x="10.8092%" y="373" width="0.1734%" height="15" fill="rgb(241,149,10)" fg:x="374" fg:w="6"/><text x="11.0592%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.17%)</title><rect x="10.8092%" y="357" width="0.1734%" height="15" fill="rgb(249,206,44)" fg:x="374" fg:w="6"/><text x="11.0592%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12 samples, 0.35%)</title><rect x="10.9827%" y="389" width="0.3468%" height="15" fill="rgb(251,153,30)" fg:x="380" fg:w="12"/><text x="11.2327%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.35%)</title><rect x="10.9827%" y="373" width="0.3468%" height="15" fill="rgb(239,152,38)" fg:x="380" fg:w="12"/><text x="11.2327%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (209 samples, 6.04%)</title><rect x="5.5491%" y="517" width="6.0405%" height="15" fill="rgb(249,139,47)" fg:x="192" fg:w="209"/><text x="5.7991%" y="527.50">project1..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (86 samples, 2.49%)</title><rect x="9.1040%" y="501" width="2.4855%" height="15" fill="rgb(244,64,35)" fg:x="315" fg:w="86"/><text x="9.3540%" y="511.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (86 samples, 2.49%)</title><rect x="9.1040%" y="485" width="2.4855%" height="15" fill="rgb(216,46,15)" fg:x="315" fg:w="86"/><text x="9.3540%" y="495.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (86 samples, 2.49%)</title><rect x="9.1040%" y="469" width="2.4855%" height="15" fill="rgb(250,74,19)" fg:x="315" fg:w="86"/><text x="9.3540%" y="479.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (86 samples, 2.49%)</title><rect x="9.1040%" y="453" width="2.4855%" height="15" fill="rgb(249,42,33)" fg:x="315" fg:w="86"/><text x="9.3540%" y="463.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (55 samples, 1.59%)</title><rect x="10.0000%" y="437" width="1.5896%" height="15" fill="rgb(242,149,17)" fg:x="346" fg:w="55"/><text x="10.2500%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 1.59%)</title><rect x="10.0000%" y="421" width="1.5896%" height="15" fill="rgb(244,29,21)" fg:x="346" fg:w="55"/><text x="10.2500%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (55 samples, 1.59%)</title><rect x="10.0000%" y="405" width="1.5896%" height="15" fill="rgb(220,130,37)" fg:x="346" fg:w="55"/><text x="10.2500%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (9 samples, 0.26%)</title><rect x="11.3295%" y="389" width="0.2601%" height="15" fill="rgb(211,67,2)" fg:x="392" fg:w="9"/><text x="11.5795%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.26%)</title><rect x="11.3295%" y="373" width="0.2601%" height="15" fill="rgb(235,68,52)" fg:x="392" fg:w="9"/><text x="11.5795%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.26%)</title><rect x="11.3295%" y="357" width="0.2601%" height="15" fill="rgb(246,142,3)" fg:x="392" fg:w="9"/><text x="11.5795%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.09%)</title><rect x="11.7630%" y="421" width="0.0867%" height="15" fill="rgb(241,25,7)" fg:x="407" fg:w="3"/><text x="12.0130%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.09%)</title><rect x="11.7630%" y="405" width="0.0867%" height="15" fill="rgb(242,119,39)" fg:x="407" fg:w="3"/><text x="12.0130%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="12.3988%" y="405" width="0.0289%" height="15" fill="rgb(241,98,45)" fg:x="429" fg:w="1"/><text x="12.6488%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="12.3988%" y="389" width="0.0289%" height="15" fill="rgb(254,28,30)" fg:x="429" fg:w="1"/><text x="12.6488%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="12.3988%" y="373" width="0.0289%" height="15" fill="rgb(241,142,54)" fg:x="429" fg:w="1"/><text x="12.6488%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (14 samples, 0.40%)</title><rect x="12.4277%" y="373" width="0.4046%" height="15" fill="rgb(222,85,15)" fg:x="430" fg:w="14"/><text x="12.6777%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (14 samples, 0.40%)</title><rect x="12.4277%" y="357" width="0.4046%" height="15" fill="rgb(210,85,47)" fg:x="430" fg:w="14"/><text x="12.6777%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (16 samples, 0.46%)</title><rect x="12.4277%" y="405" width="0.4624%" height="15" fill="rgb(224,206,25)" fg:x="430" fg:w="16"/><text x="12.6777%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (16 samples, 0.46%)</title><rect x="12.4277%" y="389" width="0.4624%" height="15" fill="rgb(243,201,19)" fg:x="430" fg:w="16"/><text x="12.6777%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.06%)</title><rect x="12.8324%" y="373" width="0.0578%" height="15" fill="rgb(236,59,4)" fg:x="444" fg:w="2"/><text x="13.0824%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.06%)</title><rect x="12.8324%" y="357" width="0.0578%" height="15" fill="rgb(254,179,45)" fg:x="444" fg:w="2"/><text x="13.0824%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.09%)</title><rect x="12.8902%" y="405" width="0.0867%" height="15" fill="rgb(226,14,10)" fg:x="446" fg:w="3"/><text x="13.1402%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.06%)</title><rect x="12.9191%" y="389" width="0.0578%" height="15" fill="rgb(244,27,41)" fg:x="447" fg:w="2"/><text x="13.1691%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.06%)</title><rect x="12.9191%" y="373" width="0.0578%" height="15" fill="rgb(235,35,32)" fg:x="447" fg:w="2"/><text x="13.1691%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="12.9769%" y="389" width="0.0289%" height="15" fill="rgb(218,68,31)" fg:x="449" fg:w="1"/><text x="13.2269%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="12.9769%" y="373" width="0.0289%" height="15" fill="rgb(207,120,37)" fg:x="449" fg:w="1"/><text x="13.2269%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.12%)</title><rect x="12.9769%" y="405" width="0.1156%" height="15" fill="rgb(227,98,0)" fg:x="449" fg:w="4"/><text x="13.2269%" y="415.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="13.0058%" y="389" width="0.0867%" height="15" fill="rgb(207,7,3)" fg:x="450" fg:w="3"/><text x="13.2558%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.14%)</title><rect x="13.0925%" y="405" width="0.1445%" height="15" fill="rgb(206,98,19)" fg:x="453" fg:w="5"/><text x="13.3425%" y="415.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="13.2081%" y="389" width="0.0289%" height="15" fill="rgb(217,5,26)" fg:x="457" fg:w="1"/><text x="13.4581%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="13.2081%" y="373" width="0.0289%" height="15" fill="rgb(235,190,38)" fg:x="457" fg:w="1"/><text x="13.4581%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="13.2081%" y="357" width="0.0289%" height="15" fill="rgb(247,86,24)" fg:x="457" fg:w="1"/><text x="13.4581%" y="367.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="13.2081%" y="341" width="0.0289%" height="15" fill="rgb(205,101,16)" fg:x="457" fg:w="1"/><text x="13.4581%" y="351.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="13.2081%" y="325" width="0.0289%" height="15" fill="rgb(246,168,33)" fg:x="457" fg:w="1"/><text x="13.4581%" y="335.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="13.2081%" y="309" width="0.0289%" height="15" fill="rgb(231,114,1)" fg:x="457" fg:w="1"/><text x="13.4581%" y="319.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="13.2081%" y="293" width="0.0289%" height="15" fill="rgb(207,184,53)" fg:x="457" fg:w="1"/><text x="13.4581%" y="303.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="13.2081%" y="277" width="0.0289%" height="15" fill="rgb(224,95,51)" fg:x="457" fg:w="1"/><text x="13.4581%" y="287.50"></text></g><g><title>account_process_tick (1 samples, 0.03%)</title><rect x="13.2081%" y="261" width="0.0289%" height="15" fill="rgb(212,188,45)" fg:x="457" fg:w="1"/><text x="13.4581%" y="271.50"></text></g><g><title>account_user_time (1 samples, 0.03%)</title><rect x="13.2081%" y="245" width="0.0289%" height="15" fill="rgb(223,154,38)" fg:x="457" fg:w="1"/><text x="13.4581%" y="255.50"></text></g><g><title>acct_account_cputime (1 samples, 0.03%)</title><rect x="13.2081%" y="229" width="0.0289%" height="15" fill="rgb(251,22,52)" fg:x="457" fg:w="1"/><text x="13.4581%" y="239.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (4 samples, 0.12%)</title><rect x="13.2370%" y="405" width="0.1156%" height="15" fill="rgb(229,209,22)" fg:x="458" fg:w="4"/><text x="13.4870%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (4 samples, 0.12%)</title><rect x="13.2370%" y="389" width="0.1156%" height="15" fill="rgb(234,138,34)" fg:x="458" fg:w="4"/><text x="13.4870%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.12%)</title><rect x="13.2370%" y="373" width="0.1156%" height="15" fill="rgb(212,95,11)" fg:x="458" fg:w="4"/><text x="13.4870%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.12%)</title><rect x="13.2370%" y="357" width="0.1156%" height="15" fill="rgb(240,179,47)" fg:x="458" fg:w="4"/><text x="13.4870%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.12%)</title><rect x="13.2370%" y="341" width="0.1156%" height="15" fill="rgb(240,163,11)" fg:x="458" fg:w="4"/><text x="13.4870%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (3 samples, 0.09%)</title><rect x="13.3526%" y="405" width="0.0867%" height="15" fill="rgb(236,37,12)" fg:x="462" fg:w="3"/><text x="13.6026%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (3 samples, 0.09%)</title><rect x="13.3526%" y="389" width="0.0867%" height="15" fill="rgb(232,164,16)" fg:x="462" fg:w="3"/><text x="13.6026%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.4104%" y="373" width="0.0289%" height="15" fill="rgb(244,205,15)" fg:x="464" fg:w="1"/><text x="13.6604%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="13.4104%" y="357" width="0.0289%" height="15" fill="rgb(223,117,47)" fg:x="464" fg:w="1"/><text x="13.6604%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="13.4104%" y="341" width="0.0289%" height="15" fill="rgb(244,107,35)" fg:x="464" fg:w="1"/><text x="13.6604%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (65 samples, 1.88%)</title><rect x="11.8497%" y="421" width="1.8786%" height="15" fill="rgb(205,140,8)" fg:x="410" fg:w="65"/><text x="12.0997%" y="431.50">p..</text></g><g><title>project1::solver::types::Lit::var (10 samples, 0.29%)</title><rect x="13.4393%" y="405" width="0.2890%" height="15" fill="rgb(228,84,46)" fg:x="465" fg:w="10"/><text x="13.6893%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (3 samples, 0.09%)</title><rect x="13.6416%" y="389" width="0.0867%" height="15" fill="rgb(254,188,9)" fg:x="472" fg:w="3"/><text x="13.8916%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="13.7283%" y="389" width="0.0289%" height="15" fill="rgb(206,112,54)" fg:x="475" fg:w="1"/><text x="13.9783%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (3 samples, 0.09%)</title><rect x="13.7283%" y="421" width="0.0867%" height="15" fill="rgb(216,84,49)" fg:x="475" fg:w="3"/><text x="13.9783%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="13.7283%" y="405" width="0.0867%" height="15" fill="rgb(214,194,35)" fg:x="475" fg:w="3"/><text x="13.9783%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.06%)</title><rect x="13.7572%" y="389" width="0.0578%" height="15" fill="rgb(249,28,3)" fg:x="476" fg:w="2"/><text x="14.0072%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.06%)</title><rect x="13.7572%" y="373" width="0.0578%" height="15" fill="rgb(222,56,52)" fg:x="476" fg:w="2"/><text x="14.0072%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (75 samples, 2.17%)</title><rect x="11.7052%" y="437" width="2.1676%" height="15" fill="rgb(245,217,50)" fg:x="405" fg:w="75"/><text x="11.9552%" y="447.50">p..</text></g><g><title>project1::solver::types::Lit::var (2 samples, 0.06%)</title><rect x="13.8150%" y="421" width="0.0578%" height="15" fill="rgb(213,201,24)" fg:x="478" fg:w="2"/><text x="14.0650%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="13.8439%" y="405" width="0.0289%" height="15" fill="rgb(248,116,28)" fg:x="479" fg:w="1"/><text x="14.0939%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (76 samples, 2.20%)</title><rect x="11.7052%" y="453" width="2.1965%" height="15" fill="rgb(219,72,43)" fg:x="405" fg:w="76"/><text x="11.9552%" y="463.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (1 samples, 0.03%)</title><rect x="13.8728%" y="437" width="0.0289%" height="15" fill="rgb(209,138,14)" fg:x="480" fg:w="1"/><text x="14.1228%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (81 samples, 2.34%)</title><rect x="11.5896%" y="501" width="2.3410%" height="15" fill="rgb(222,18,33)" fg:x="401" fg:w="81"/><text x="11.8396%" y="511.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (81 samples, 2.34%)</title><rect x="11.5896%" y="485" width="2.3410%" height="15" fill="rgb(213,199,7)" fg:x="401" fg:w="81"/><text x="11.8396%" y="495.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (81 samples, 2.34%)</title><rect x="11.5896%" y="469" width="2.3410%" height="15" fill="rgb(250,110,10)" fg:x="401" fg:w="81"/><text x="11.8396%" y="479.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="13.9017%" y="453" width="0.0289%" height="15" fill="rgb(248,123,6)" fg:x="481" fg:w="1"/><text x="14.1517%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (84 samples, 2.43%)</title><rect x="11.5896%" y="517" width="2.4277%" height="15" fill="rgb(206,91,31)" fg:x="401" fg:w="84"/><text x="11.8396%" y="527.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (3 samples, 0.09%)</title><rect x="13.9306%" y="501" width="0.0867%" height="15" fill="rgb(211,154,13)" fg:x="482" fg:w="3"/><text x="14.1806%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.09%)</title><rect x="13.9306%" y="485" width="0.0867%" height="15" fill="rgb(225,148,7)" fg:x="482" fg:w="3"/><text x="14.1806%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (3 samples, 0.09%)</title><rect x="13.9306%" y="469" width="0.0867%" height="15" fill="rgb(220,160,43)" fg:x="482" fg:w="3"/><text x="14.1806%" y="479.50"></text></g><g><title>project1::solver::types::Lit::var (2 samples, 0.06%)</title><rect x="13.9595%" y="453" width="0.0578%" height="15" fill="rgb(213,52,39)" fg:x="483" fg:w="2"/><text x="14.2095%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (2 samples, 0.06%)</title><rect x="13.9595%" y="437" width="0.0578%" height="15" fill="rgb(243,137,7)" fg:x="483" fg:w="2"/><text x="14.2095%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.09%)</title><rect x="14.1908%" y="469" width="0.0867%" height="15" fill="rgb(230,79,13)" fg:x="491" fg:w="3"/><text x="14.4408%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="14.2486%" y="453" width="0.0289%" height="15" fill="rgb(247,105,23)" fg:x="493" fg:w="1"/><text x="14.4986%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="14.2486%" y="437" width="0.0289%" height="15" fill="rgb(223,179,41)" fg:x="493" fg:w="1"/><text x="14.4986%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (10 samples, 0.29%)</title><rect x="14.0173%" y="517" width="0.2890%" height="15" fill="rgb(218,9,34)" fg:x="485" fg:w="10"/><text x="14.2673%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (10 samples, 0.29%)</title><rect x="14.0173%" y="501" width="0.2890%" height="15" fill="rgb(222,106,8)" fg:x="485" fg:w="10"/><text x="14.2673%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.12%)</title><rect x="14.1908%" y="485" width="0.1156%" height="15" fill="rgb(211,220,0)" fg:x="491" fg:w="4"/><text x="14.4408%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="14.2775%" y="469" width="0.0289%" height="15" fill="rgb(229,52,16)" fg:x="494" fg:w="1"/><text x="14.5275%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="14.2775%" y="453" width="0.0289%" height="15" fill="rgb(212,155,18)" fg:x="494" fg:w="1"/><text x="14.5275%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (2 samples, 0.06%)</title><rect x="14.3064%" y="517" width="0.0578%" height="15" fill="rgb(242,21,14)" fg:x="495" fg:w="2"/><text x="14.5564%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="14.3064%" y="501" width="0.0578%" height="15" fill="rgb(222,19,48)" fg:x="495" fg:w="2"/><text x="14.5564%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="14.3064%" y="485" width="0.0578%" height="15" fill="rgb(232,45,27)" fg:x="495" fg:w="2"/><text x="14.5564%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (6 samples, 0.17%)</title><rect x="14.3642%" y="517" width="0.1734%" height="15" fill="rgb(249,103,42)" fg:x="497" fg:w="6"/><text x="14.6142%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (11 samples, 0.32%)</title><rect x="14.5376%" y="517" width="0.3179%" height="15" fill="rgb(246,81,33)" fg:x="503" fg:w="11"/><text x="14.7876%" y="527.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (11 samples, 0.32%)</title><rect x="14.5376%" y="501" width="0.3179%" height="15" fill="rgb(252,33,42)" fg:x="503" fg:w="11"/><text x="14.7876%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.32%)</title><rect x="14.5376%" y="485" width="0.3179%" height="15" fill="rgb(209,212,41)" fg:x="503" fg:w="11"/><text x="14.7876%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.32%)</title><rect x="14.5376%" y="469" width="0.3179%" height="15" fill="rgb(207,154,6)" fg:x="503" fg:w="11"/><text x="14.7876%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.32%)</title><rect x="14.5376%" y="453" width="0.3179%" height="15" fill="rgb(223,64,47)" fg:x="503" fg:w="11"/><text x="14.7876%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (5 samples, 0.14%)</title><rect x="14.9711%" y="501" width="0.1445%" height="15" fill="rgb(211,161,38)" fg:x="518" fg:w="5"/><text x="15.2211%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="15.0867%" y="485" width="0.0289%" height="15" fill="rgb(219,138,40)" fg:x="522" fg:w="1"/><text x="15.3367%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="15.0867%" y="469" width="0.0289%" height="15" fill="rgb(241,228,46)" fg:x="522" fg:w="1"/><text x="15.3367%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="15.0867%" y="453" width="0.0289%" height="15" fill="rgb(223,209,38)" fg:x="522" fg:w="1"/><text x="15.3367%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="15.0867%" y="437" width="0.0289%" height="15" fill="rgb(236,164,45)" fg:x="522" fg:w="1"/><text x="15.3367%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="15.0867%" y="421" width="0.0289%" height="15" fill="rgb(231,15,5)" fg:x="522" fg:w="1"/><text x="15.3367%" y="431.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="15.0867%" y="405" width="0.0289%" height="15" fill="rgb(252,35,15)" fg:x="522" fg:w="1"/><text x="15.3367%" y="415.50"></text></g><g><title>read_tsc (1 samples, 0.03%)</title><rect x="15.0867%" y="389" width="0.0289%" height="15" fill="rgb(248,181,18)" fg:x="522" fg:w="1"/><text x="15.3367%" y="399.50"></text></g><g><title>project1::solver::types::Lit::var (12 samples, 0.35%)</title><rect x="14.8555%" y="517" width="0.3468%" height="15" fill="rgb(233,39,42)" fg:x="514" fg:w="12"/><text x="15.1055%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3 samples, 0.09%)</title><rect x="15.1156%" y="501" width="0.0867%" height="15" fill="rgb(238,110,33)" fg:x="523" fg:w="3"/><text x="15.3656%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (496 samples, 14.34%)</title><rect x="1.0694%" y="533" width="14.3353%" height="15" fill="rgb(233,195,10)" fg:x="37" fg:w="496"/><text x="1.3194%" y="543.50">project1::solver::cdcl..</text></g><g><title>project1::solver::types::Lit::var_idx (7 samples, 0.20%)</title><rect x="15.2023%" y="517" width="0.2023%" height="15" fill="rgb(254,105,3)" fg:x="526" fg:w="7"/><text x="15.4523%" y="527.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (4 samples, 0.12%)</title><rect x="15.2890%" y="501" width="0.1156%" height="15" fill="rgb(221,225,9)" fg:x="529" fg:w="4"/><text x="15.5390%" y="511.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.4046%" y="517" width="0.0289%" height="15" fill="rgb(224,227,45)" fg:x="533" fg:w="1"/><text x="15.6546%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.03%)</title><rect x="15.4046%" y="501" width="0.0289%" height="15" fill="rgb(229,198,43)" fg:x="533" fg:w="1"/><text x="15.6546%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="15.4046%" y="485" width="0.0289%" height="15" fill="rgb(206,209,35)" fg:x="533" fg:w="1"/><text x="15.6546%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="15.4046%" y="469" width="0.0289%" height="15" fill="rgb(245,195,53)" fg:x="533" fg:w="1"/><text x="15.6546%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (4 samples, 0.12%)</title><rect x="15.4046%" y="533" width="0.1156%" height="15" fill="rgb(240,92,26)" fg:x="533" fg:w="4"/><text x="15.6546%" y="543.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (3 samples, 0.09%)</title><rect x="15.4335%" y="517" width="0.0867%" height="15" fill="rgb(207,40,23)" fg:x="534" fg:w="3"/><text x="15.6835%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.09%)</title><rect x="15.4335%" y="501" width="0.0867%" height="15" fill="rgb(223,111,35)" fg:x="534" fg:w="3"/><text x="15.6835%" y="511.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="15.4335%" y="485" width="0.0867%" height="15" fill="rgb(229,147,28)" fg:x="534" fg:w="3"/><text x="15.6835%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.6358%" y="517" width="0.0289%" height="15" fill="rgb(211,29,28)" fg:x="541" fg:w="1"/><text x="15.8858%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="15.6358%" y="501" width="0.0289%" height="15" fill="rgb(228,72,33)" fg:x="541" fg:w="1"/><text x="15.8858%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="15.6358%" y="485" width="0.0289%" height="15" fill="rgb(205,214,31)" fg:x="541" fg:w="1"/><text x="15.8858%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="15.6647%" y="501" width="0.0289%" height="15" fill="rgb(224,111,15)" fg:x="542" fg:w="1"/><text x="15.9147%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="15.6647%" y="485" width="0.0289%" height="15" fill="rgb(253,21,26)" fg:x="542" fg:w="1"/><text x="15.9147%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="15.6647%" y="469" width="0.0289%" height="15" fill="rgb(245,139,43)" fg:x="542" fg:w="1"/><text x="15.9147%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="15.6647%" y="517" width="0.0578%" height="15" fill="rgb(252,170,7)" fg:x="542" fg:w="2"/><text x="15.9147%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="15.6936%" y="501" width="0.0289%" height="15" fill="rgb(231,118,14)" fg:x="543" fg:w="1"/><text x="15.9436%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="15.6936%" y="485" width="0.0289%" height="15" fill="rgb(238,83,0)" fg:x="543" fg:w="1"/><text x="15.9436%" y="495.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.03%)</title><rect x="15.7225%" y="517" width="0.0289%" height="15" fill="rgb(221,39,39)" fg:x="544" fg:w="1"/><text x="15.9725%" y="527.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="15.7225%" y="501" width="0.0289%" height="15" fill="rgb(222,119,46)" fg:x="544" fg:w="1"/><text x="15.9725%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="15.7225%" y="485" width="0.0289%" height="15" fill="rgb(222,165,49)" fg:x="544" fg:w="1"/><text x="15.9725%" y="495.50"></text></g><g><title>log::max_level (2 samples, 0.06%)</title><rect x="15.7514%" y="517" width="0.0578%" height="15" fill="rgb(219,113,52)" fg:x="545" fg:w="2"/><text x="16.0014%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.06%)</title><rect x="15.7514%" y="501" width="0.0578%" height="15" fill="rgb(214,7,15)" fg:x="545" fg:w="2"/><text x="16.0014%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.06%)</title><rect x="15.7514%" y="485" width="0.0578%" height="15" fill="rgb(235,32,4)" fg:x="545" fg:w="2"/><text x="16.0014%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="15.8092%" y="501" width="0.0289%" height="15" fill="rgb(238,90,54)" fg:x="547" fg:w="1"/><text x="16.0592%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="15.8092%" y="485" width="0.0289%" height="15" fill="rgb(213,208,19)" fg:x="547" fg:w="1"/><text x="16.0592%" y="495.50"></text></g><g><title>core::ptr::read (12 samples, 0.35%)</title><rect x="15.8382%" y="485" width="0.3468%" height="15" fill="rgb(233,156,4)" fg:x="548" fg:w="12"/><text x="16.0882%" y="495.50"></text></g><g><title>core::mem::replace (14 samples, 0.40%)</title><rect x="15.8382%" y="501" width="0.4046%" height="15" fill="rgb(207,194,5)" fg:x="548" fg:w="14"/><text x="16.0882%" y="511.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="16.1850%" y="485" width="0.0578%" height="15" fill="rgb(206,111,30)" fg:x="560" fg:w="2"/><text x="16.4350%" y="495.50"></text></g><g><title>core::mem::swap (3 samples, 0.09%)</title><rect x="16.2428%" y="501" width="0.0867%" height="15" fill="rgb(243,70,54)" fg:x="562" fg:w="3"/><text x="16.4928%" y="511.50"></text></g><g><title>core::mem::swap_simple (3 samples, 0.09%)</title><rect x="16.2428%" y="485" width="0.0867%" height="15" fill="rgb(242,28,8)" fg:x="562" fg:w="3"/><text x="16.4928%" y="495.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="16.2428%" y="469" width="0.0867%" height="15" fill="rgb(219,106,18)" fg:x="562" fg:w="3"/><text x="16.4928%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="16.3584%" y="405" width="0.0289%" height="15" fill="rgb(244,222,10)" fg:x="566" fg:w="1"/><text x="16.6084%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="16.3584%" y="389" width="0.0289%" height="15" fill="rgb(236,179,52)" fg:x="566" fg:w="1"/><text x="16.6084%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="16.3584%" y="373" width="0.0289%" height="15" fill="rgb(213,23,39)" fg:x="566" fg:w="1"/><text x="16.6084%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="16.3584%" y="357" width="0.0289%" height="15" fill="rgb(238,48,10)" fg:x="566" fg:w="1"/><text x="16.6084%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="16.3584%" y="341" width="0.0289%" height="15" fill="rgb(251,196,23)" fg:x="566" fg:w="1"/><text x="16.6084%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="16.3584%" y="325" width="0.0289%" height="15" fill="rgb(250,152,24)" fg:x="566" fg:w="1"/><text x="16.6084%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="16.3584%" y="309" width="0.0289%" height="15" fill="rgb(209,150,17)" fg:x="566" fg:w="1"/><text x="16.6084%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (3 samples, 0.09%)</title><rect x="16.3295%" y="501" width="0.0867%" height="15" fill="rgb(234,202,34)" fg:x="565" fg:w="3"/><text x="16.5795%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="16.3584%" y="485" width="0.0578%" height="15" fill="rgb(253,148,53)" fg:x="566" fg:w="2"/><text x="16.6084%" y="495.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="16.3584%" y="469" width="0.0578%" height="15" fill="rgb(218,129,16)" fg:x="566" fg:w="2"/><text x="16.6084%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.06%)</title><rect x="16.3584%" y="453" width="0.0578%" height="15" fill="rgb(216,85,19)" fg:x="566" fg:w="2"/><text x="16.6084%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="16.3584%" y="437" width="0.0578%" height="15" fill="rgb(235,228,7)" fg:x="566" fg:w="2"/><text x="16.6084%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.06%)</title><rect x="16.3584%" y="421" width="0.0578%" height="15" fill="rgb(245,175,0)" fg:x="566" fg:w="2"/><text x="16.6084%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="16.3873%" y="405" width="0.0289%" height="15" fill="rgb(208,168,36)" fg:x="567" fg:w="1"/><text x="16.6373%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="16.3873%" y="389" width="0.0289%" height="15" fill="rgb(246,171,24)" fg:x="567" fg:w="1"/><text x="16.6373%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="16.3873%" y="373" width="0.0289%" height="15" fill="rgb(215,142,24)" fg:x="567" fg:w="1"/><text x="16.6373%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="16.3873%" y="357" width="0.0289%" height="15" fill="rgb(250,187,7)" fg:x="567" fg:w="1"/><text x="16.6373%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="16.3873%" y="341" width="0.0289%" height="15" fill="rgb(228,66,33)" fg:x="567" fg:w="1"/><text x="16.6373%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="16.3873%" y="325" width="0.0289%" height="15" fill="rgb(234,215,21)" fg:x="567" fg:w="1"/><text x="16.6373%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="16.3873%" y="309" width="0.0289%" height="15" fill="rgb(222,191,20)" fg:x="567" fg:w="1"/><text x="16.6373%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="16.3873%" y="293" width="0.0289%" height="15" fill="rgb(245,79,54)" fg:x="567" fg:w="1"/><text x="16.6373%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="16.5029%" y="325" width="0.0867%" height="15" fill="rgb(240,10,37)" fg:x="571" fg:w="3"/><text x="16.7529%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.14%)</title><rect x="16.4740%" y="341" width="0.1445%" height="15" fill="rgb(214,192,32)" fg:x="570" fg:w="5"/><text x="16.7240%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="16.5896%" y="325" width="0.0289%" height="15" fill="rgb(209,36,54)" fg:x="574" fg:w="1"/><text x="16.8396%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.14%)</title><rect x="16.7341%" y="325" width="0.1445%" height="15" fill="rgb(220,10,11)" fg:x="579" fg:w="5"/><text x="16.9841%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.23%)</title><rect x="16.8786%" y="325" width="0.2312%" height="15" fill="rgb(221,106,17)" fg:x="584" fg:w="8"/><text x="17.1286%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (25 samples, 0.72%)</title><rect x="16.4451%" y="389" width="0.7225%" height="15" fill="rgb(251,142,44)" fg:x="569" fg:w="25"/><text x="16.6951%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25 samples, 0.72%)</title><rect x="16.4451%" y="373" width="0.7225%" height="15" fill="rgb(238,13,15)" fg:x="569" fg:w="25"/><text x="16.6951%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25 samples, 0.72%)</title><rect x="16.4451%" y="357" width="0.7225%" height="15" fill="rgb(208,107,27)" fg:x="569" fg:w="25"/><text x="16.6951%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 0.55%)</title><rect x="16.6185%" y="341" width="0.5491%" height="15" fill="rgb(205,136,37)" fg:x="575" fg:w="19"/><text x="16.8685%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="17.1098%" y="325" width="0.0578%" height="15" fill="rgb(250,205,27)" fg:x="592" fg:w="2"/><text x="17.3598%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="17.1965%" y="261" width="0.0289%" height="15" fill="rgb(210,80,43)" fg:x="595" fg:w="1"/><text x="17.4465%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (28 samples, 0.81%)</title><rect x="16.4451%" y="421" width="0.8092%" height="15" fill="rgb(247,160,36)" fg:x="569" fg:w="28"/><text x="16.6951%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (28 samples, 0.81%)</title><rect x="16.4451%" y="405" width="0.8092%" height="15" fill="rgb(234,13,49)" fg:x="569" fg:w="28"/><text x="16.6951%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="17.1676%" y="389" width="0.0867%" height="15" fill="rgb(234,122,0)" fg:x="594" fg:w="3"/><text x="17.4176%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="17.1676%" y="373" width="0.0867%" height="15" fill="rgb(207,146,38)" fg:x="594" fg:w="3"/><text x="17.4176%" y="383.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="17.1676%" y="357" width="0.0867%" height="15" fill="rgb(207,177,25)" fg:x="594" fg:w="3"/><text x="17.4176%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="17.1676%" y="341" width="0.0867%" height="15" fill="rgb(211,178,42)" fg:x="594" fg:w="3"/><text x="17.4176%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="17.1676%" y="325" width="0.0867%" height="15" fill="rgb(230,69,54)" fg:x="594" fg:w="3"/><text x="17.4176%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="17.1676%" y="309" width="0.0867%" height="15" fill="rgb(214,135,41)" fg:x="594" fg:w="3"/><text x="17.4176%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="17.1676%" y="293" width="0.0867%" height="15" fill="rgb(237,67,25)" fg:x="594" fg:w="3"/><text x="17.4176%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="17.1965%" y="277" width="0.0578%" height="15" fill="rgb(222,189,50)" fg:x="595" fg:w="2"/><text x="17.4465%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="17.2254%" y="261" width="0.0289%" height="15" fill="rgb(245,148,34)" fg:x="596" fg:w="1"/><text x="17.4754%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.06%)</title><rect x="17.2832%" y="373" width="0.0578%" height="15" fill="rgb(222,29,6)" fg:x="598" fg:w="2"/><text x="17.5332%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.06%)</title><rect x="17.2832%" y="357" width="0.0578%" height="15" fill="rgb(221,189,43)" fg:x="598" fg:w="2"/><text x="17.5332%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.06%)</title><rect x="17.2832%" y="341" width="0.0578%" height="15" fill="rgb(207,36,27)" fg:x="598" fg:w="2"/><text x="17.5332%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.06%)</title><rect x="17.2832%" y="325" width="0.0578%" height="15" fill="rgb(217,90,24)" fg:x="598" fg:w="2"/><text x="17.5332%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (2 samples, 0.06%)</title><rect x="17.2832%" y="309" width="0.0578%" height="15" fill="rgb(224,66,35)" fg:x="598" fg:w="2"/><text x="17.5332%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="17.3410%" y="373" width="0.0289%" height="15" fill="rgb(221,13,50)" fg:x="600" fg:w="1"/><text x="17.5910%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (33 samples, 0.95%)</title><rect x="16.4451%" y="437" width="0.9538%" height="15" fill="rgb(236,68,49)" fg:x="569" fg:w="33"/><text x="16.6951%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (5 samples, 0.14%)</title><rect x="17.2543%" y="421" width="0.1445%" height="15" fill="rgb(229,146,28)" fg:x="597" fg:w="5"/><text x="17.5043%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.14%)</title><rect x="17.2543%" y="405" width="0.1445%" height="15" fill="rgb(225,31,38)" fg:x="597" fg:w="5"/><text x="17.5043%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.14%)</title><rect x="17.2543%" y="389" width="0.1445%" height="15" fill="rgb(250,208,3)" fg:x="597" fg:w="5"/><text x="17.5043%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="17.3699%" y="373" width="0.0289%" height="15" fill="rgb(246,54,23)" fg:x="601" fg:w="1"/><text x="17.6199%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="17.3699%" y="357" width="0.0289%" height="15" fill="rgb(243,76,11)" fg:x="601" fg:w="1"/><text x="17.6199%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (34 samples, 0.98%)</title><rect x="16.4451%" y="485" width="0.9827%" height="15" fill="rgb(245,21,50)" fg:x="569" fg:w="34"/><text x="16.6951%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (34 samples, 0.98%)</title><rect x="16.4451%" y="469" width="0.9827%" height="15" fill="rgb(228,9,43)" fg:x="569" fg:w="34"/><text x="16.6951%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (34 samples, 0.98%)</title><rect x="16.4451%" y="453" width="0.9827%" height="15" fill="rgb(208,100,47)" fg:x="569" fg:w="34"/><text x="16.6951%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="17.3988%" y="437" width="0.0289%" height="15" fill="rgb(232,26,8)" fg:x="602" fg:w="1"/><text x="17.6488%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (1 samples, 0.03%)</title><rect x="17.4566%" y="357" width="0.0289%" height="15" fill="rgb(216,166,38)" fg:x="604" fg:w="1"/><text x="17.7066%" y="367.50"></text></g><g><title>compare::Compare::compares_ge (3 samples, 0.09%)</title><rect x="17.4566%" y="453" width="0.0867%" height="15" fill="rgb(251,202,51)" fg:x="604" fg:w="3"/><text x="17.7066%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.09%)</title><rect x="17.4566%" y="437" width="0.0867%" height="15" fill="rgb(254,216,34)" fg:x="604" fg:w="3"/><text x="17.7066%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.09%)</title><rect x="17.4566%" y="421" width="0.0867%" height="15" fill="rgb(251,32,27)" fg:x="604" fg:w="3"/><text x="17.7066%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (3 samples, 0.09%)</title><rect x="17.4566%" y="405" width="0.0867%" height="15" fill="rgb(208,127,28)" fg:x="604" fg:w="3"/><text x="17.7066%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (3 samples, 0.09%)</title><rect x="17.4566%" y="389" width="0.0867%" height="15" fill="rgb(224,137,22)" fg:x="604" fg:w="3"/><text x="17.7066%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (3 samples, 0.09%)</title><rect x="17.4566%" y="373" width="0.0867%" height="15" fill="rgb(254,70,32)" fg:x="604" fg:w="3"/><text x="17.7066%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (2 samples, 0.06%)</title><rect x="17.4855%" y="357" width="0.0578%" height="15" fill="rgb(229,75,37)" fg:x="605" fg:w="2"/><text x="17.7355%" y="367.50"></text></g><g><title>compare::Compare::compares_le (3 samples, 0.09%)</title><rect x="17.5434%" y="453" width="0.0867%" height="15" fill="rgb(252,64,23)" fg:x="607" fg:w="3"/><text x="17.7934%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (3 samples, 0.09%)</title><rect x="17.5434%" y="437" width="0.0867%" height="15" fill="rgb(232,162,48)" fg:x="607" fg:w="3"/><text x="17.7934%" y="447.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.09%)</title><rect x="17.5434%" y="421" width="0.0867%" height="15" fill="rgb(246,160,12)" fg:x="607" fg:w="3"/><text x="17.7934%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.20%)</title><rect x="17.6301%" y="421" width="0.2023%" height="15" fill="rgb(247,166,0)" fg:x="610" fg:w="7"/><text x="17.8801%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="17.8324%" y="277" width="0.0867%" height="15" fill="rgb(249,219,21)" fg:x="617" fg:w="3"/><text x="18.0824%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.17%)</title><rect x="17.8324%" y="293" width="0.1734%" height="15" fill="rgb(205,209,3)" fg:x="617" fg:w="6"/><text x="18.0824%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.09%)</title><rect x="17.9191%" y="277" width="0.0867%" height="15" fill="rgb(243,44,1)" fg:x="620" fg:w="3"/><text x="18.1691%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="18.1214%" y="277" width="0.0867%" height="15" fill="rgb(206,159,16)" fg:x="627" fg:w="3"/><text x="18.3714%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="17.8324%" y="341" width="0.4335%" height="15" fill="rgb(244,77,30)" fg:x="617" fg:w="15"/><text x="18.0824%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="17.8324%" y="325" width="0.4335%" height="15" fill="rgb(218,69,12)" fg:x="617" fg:w="15"/><text x="18.0824%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.43%)</title><rect x="17.8324%" y="309" width="0.4335%" height="15" fill="rgb(212,87,7)" fg:x="617" fg:w="15"/><text x="18.0824%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.26%)</title><rect x="18.0058%" y="293" width="0.2601%" height="15" fill="rgb(245,114,25)" fg:x="623" fg:w="9"/><text x="18.2558%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="18.2081%" y="277" width="0.0578%" height="15" fill="rgb(210,61,42)" fg:x="630" fg:w="2"/><text x="18.4581%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.09%)</title><rect x="18.2659%" y="341" width="0.0867%" height="15" fill="rgb(211,52,33)" fg:x="632" fg:w="3"/><text x="18.5159%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.58%)</title><rect x="17.8324%" y="373" width="0.5780%" height="15" fill="rgb(234,58,33)" fg:x="617" fg:w="20"/><text x="18.0824%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.58%)</title><rect x="17.8324%" y="357" width="0.5780%" height="15" fill="rgb(220,115,36)" fg:x="617" fg:w="20"/><text x="18.0824%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="18.3526%" y="341" width="0.0578%" height="15" fill="rgb(243,153,54)" fg:x="635" fg:w="2"/><text x="18.6026%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="18.3526%" y="325" width="0.0578%" height="15" fill="rgb(251,47,18)" fg:x="635" fg:w="2"/><text x="18.6026%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="18.3526%" y="309" width="0.0578%" height="15" fill="rgb(242,102,42)" fg:x="635" fg:w="2"/><text x="18.6026%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="18.3526%" y="293" width="0.0578%" height="15" fill="rgb(234,31,38)" fg:x="635" fg:w="2"/><text x="18.6026%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.3526%" y="277" width="0.0578%" height="15" fill="rgb(221,117,51)" fg:x="635" fg:w="2"/><text x="18.6026%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.3526%" y="261" width="0.0578%" height="15" fill="rgb(212,20,18)" fg:x="635" fg:w="2"/><text x="18.6026%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="18.3526%" y="245" width="0.0578%" height="15" fill="rgb(245,133,36)" fg:x="635" fg:w="2"/><text x="18.6026%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="18.4104%" y="325" width="0.0578%" height="15" fill="rgb(212,6,19)" fg:x="637" fg:w="2"/><text x="18.6604%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="18.4104%" y="309" width="0.0578%" height="15" fill="rgb(218,1,36)" fg:x="637" fg:w="2"/><text x="18.6604%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="18.4682%" y="309" width="0.0289%" height="15" fill="rgb(246,84,54)" fg:x="639" fg:w="1"/><text x="18.7182%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="18.4682%" y="293" width="0.0289%" height="15" fill="rgb(242,110,6)" fg:x="639" fg:w="1"/><text x="18.7182%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="18.4682%" y="277" width="0.0289%" height="15" fill="rgb(214,47,5)" fg:x="639" fg:w="1"/><text x="18.7182%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.03%)</title><rect x="18.4682%" y="261" width="0.0289%" height="15" fill="rgb(218,159,25)" fg:x="639" fg:w="1"/><text x="18.7182%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="18.4971%" y="261" width="0.0289%" height="15" fill="rgb(215,211,28)" fg:x="640" fg:w="1"/><text x="18.7471%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.09%)</title><rect x="18.4682%" y="325" width="0.0867%" height="15" fill="rgb(238,59,32)" fg:x="639" fg:w="3"/><text x="18.7182%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="18.4971%" y="309" width="0.0578%" height="15" fill="rgb(226,82,3)" fg:x="640" fg:w="2"/><text x="18.7471%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="18.4971%" y="293" width="0.0578%" height="15" fill="rgb(240,164,32)" fg:x="640" fg:w="2"/><text x="18.7471%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="18.4971%" y="277" width="0.0578%" height="15" fill="rgb(232,46,7)" fg:x="640" fg:w="2"/><text x="18.7471%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (1 samples, 0.03%)</title><rect x="18.5260%" y="261" width="0.0289%" height="15" fill="rgb(229,129,53)" fg:x="641" fg:w="1"/><text x="18.7760%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (6 samples, 0.17%)</title><rect x="18.5549%" y="325" width="0.1734%" height="15" fill="rgb(234,188,29)" fg:x="642" fg:w="6"/><text x="18.8049%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="18.7283%" y="325" width="0.0289%" height="15" fill="rgb(246,141,4)" fg:x="648" fg:w="1"/><text x="18.9783%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="18.7283%" y="309" width="0.0289%" height="15" fill="rgb(229,23,39)" fg:x="648" fg:w="1"/><text x="18.9783%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="18.7283%" y="293" width="0.0289%" height="15" fill="rgb(206,12,3)" fg:x="648" fg:w="1"/><text x="18.9783%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (40 samples, 1.16%)</title><rect x="17.6301%" y="453" width="1.1561%" height="15" fill="rgb(252,226,20)" fg:x="610" fg:w="40"/><text x="17.8801%" y="463.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 1.16%)</title><rect x="17.6301%" y="437" width="1.1561%" height="15" fill="rgb(216,123,35)" fg:x="610" fg:w="40"/><text x="17.8801%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (33 samples, 0.95%)</title><rect x="17.8324%" y="421" width="0.9538%" height="15" fill="rgb(212,68,40)" fg:x="617" fg:w="33"/><text x="18.0824%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (33 samples, 0.95%)</title><rect x="17.8324%" y="405" width="0.9538%" height="15" fill="rgb(254,125,32)" fg:x="617" fg:w="33"/><text x="18.0824%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (33 samples, 0.95%)</title><rect x="17.8324%" y="389" width="0.9538%" height="15" fill="rgb(253,97,22)" fg:x="617" fg:w="33"/><text x="18.0824%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (13 samples, 0.38%)</title><rect x="18.4104%" y="373" width="0.3757%" height="15" fill="rgb(241,101,14)" fg:x="637" fg:w="13"/><text x="18.6604%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13 samples, 0.38%)</title><rect x="18.4104%" y="357" width="0.3757%" height="15" fill="rgb(238,103,29)" fg:x="637" fg:w="13"/><text x="18.6604%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13 samples, 0.38%)</title><rect x="18.4104%" y="341" width="0.3757%" height="15" fill="rgb(233,195,47)" fg:x="637" fg:w="13"/><text x="18.6604%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="18.7572%" y="325" width="0.0289%" height="15" fill="rgb(246,218,30)" fg:x="649" fg:w="1"/><text x="19.0072%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="18.7572%" y="309" width="0.0289%" height="15" fill="rgb(219,145,47)" fg:x="649" fg:w="1"/><text x="19.0072%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (49 samples, 1.42%)</title><rect x="17.4277%" y="469" width="1.4162%" height="15" fill="rgb(243,12,26)" fg:x="603" fg:w="49"/><text x="17.6777%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (2 samples, 0.06%)</title><rect x="18.7861%" y="453" width="0.0578%" height="15" fill="rgb(214,87,16)" fg:x="650" fg:w="2"/><text x="19.0361%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (52 samples, 1.50%)</title><rect x="17.4277%" y="485" width="1.5029%" height="15" fill="rgb(208,99,42)" fg:x="603" fg:w="52"/><text x="17.6777%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (3 samples, 0.09%)</title><rect x="18.8439%" y="469" width="0.0867%" height="15" fill="rgb(253,99,2)" fg:x="652" fg:w="3"/><text x="19.0939%" y="479.50"></text></g><g><title>compare::Compare::compares_le (5 samples, 0.14%)</title><rect x="18.9884%" y="469" width="0.1445%" height="15" fill="rgb(220,168,23)" fg:x="657" fg:w="5"/><text x="19.2384%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (5 samples, 0.14%)</title><rect x="18.9884%" y="453" width="0.1445%" height="15" fill="rgb(242,38,24)" fg:x="657" fg:w="5"/><text x="19.2384%" y="463.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.14%)</title><rect x="18.9884%" y="437" width="0.1445%" height="15" fill="rgb(225,182,9)" fg:x="657" fg:w="5"/><text x="19.2384%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="19.1618%" y="437" width="0.1156%" height="15" fill="rgb(243,178,37)" fg:x="663" fg:w="4"/><text x="19.4118%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.09%)</title><rect x="19.3064%" y="309" width="0.0867%" height="15" fill="rgb(232,139,19)" fg:x="668" fg:w="3"/><text x="19.5564%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.06%)</title><rect x="19.3353%" y="293" width="0.0578%" height="15" fill="rgb(225,201,24)" fg:x="669" fg:w="2"/><text x="19.5853%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="19.2775%" y="357" width="0.2601%" height="15" fill="rgb(221,47,46)" fg:x="667" fg:w="9"/><text x="19.5275%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="19.2775%" y="341" width="0.2601%" height="15" fill="rgb(249,23,13)" fg:x="667" fg:w="9"/><text x="19.5275%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.26%)</title><rect x="19.2775%" y="325" width="0.2601%" height="15" fill="rgb(219,9,5)" fg:x="667" fg:w="9"/><text x="19.5275%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.14%)</title><rect x="19.3931%" y="309" width="0.1445%" height="15" fill="rgb(254,171,16)" fg:x="671" fg:w="5"/><text x="19.6431%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="19.4509%" y="293" width="0.0867%" height="15" fill="rgb(230,171,20)" fg:x="673" fg:w="3"/><text x="19.7009%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="19.5376%" y="357" width="0.0289%" height="15" fill="rgb(210,71,41)" fg:x="676" fg:w="1"/><text x="19.7876%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.38%)</title><rect x="19.2775%" y="389" width="0.3757%" height="15" fill="rgb(206,173,20)" fg:x="667" fg:w="13"/><text x="19.5275%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 0.38%)</title><rect x="19.2775%" y="373" width="0.3757%" height="15" fill="rgb(233,88,34)" fg:x="667" fg:w="13"/><text x="19.5275%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.09%)</title><rect x="19.5665%" y="357" width="0.0867%" height="15" fill="rgb(223,209,46)" fg:x="677" fg:w="3"/><text x="19.8165%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3 samples, 0.09%)</title><rect x="19.5665%" y="341" width="0.0867%" height="15" fill="rgb(250,43,18)" fg:x="677" fg:w="3"/><text x="19.8165%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (3 samples, 0.09%)</title><rect x="19.5665%" y="325" width="0.0867%" height="15" fill="rgb(208,13,10)" fg:x="677" fg:w="3"/><text x="19.8165%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.09%)</title><rect x="19.5665%" y="309" width="0.0867%" height="15" fill="rgb(212,200,36)" fg:x="677" fg:w="3"/><text x="19.8165%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="19.5665%" y="293" width="0.0867%" height="15" fill="rgb(225,90,30)" fg:x="677" fg:w="3"/><text x="19.8165%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="19.5665%" y="277" width="0.0867%" height="15" fill="rgb(236,182,39)" fg:x="677" fg:w="3"/><text x="19.8165%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="19.5665%" y="261" width="0.0867%" height="15" fill="rgb(212,144,35)" fg:x="677" fg:w="3"/><text x="19.8165%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="19.6243%" y="245" width="0.0289%" height="15" fill="rgb(228,63,44)" fg:x="679" fg:w="1"/><text x="19.8743%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="19.6821%" y="341" width="0.0289%" height="15" fill="rgb(228,109,6)" fg:x="681" fg:w="1"/><text x="19.9321%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.14%)</title><rect x="19.7110%" y="325" width="0.1445%" height="15" fill="rgb(238,117,24)" fg:x="682" fg:w="5"/><text x="19.9610%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.14%)</title><rect x="19.7110%" y="309" width="0.1445%" height="15" fill="rgb(242,26,26)" fg:x="682" fg:w="5"/><text x="19.9610%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.14%)</title><rect x="19.7110%" y="293" width="0.1445%" height="15" fill="rgb(221,92,48)" fg:x="682" fg:w="5"/><text x="19.9610%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (5 samples, 0.14%)</title><rect x="19.7110%" y="277" width="0.1445%" height="15" fill="rgb(209,209,32)" fg:x="682" fg:w="5"/><text x="19.9610%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 0.20%)</title><rect x="19.7110%" y="341" width="0.2023%" height="15" fill="rgb(221,70,22)" fg:x="682" fg:w="7"/><text x="19.9610%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="19.8555%" y="325" width="0.0578%" height="15" fill="rgb(248,145,5)" fg:x="687" fg:w="2"/><text x="20.1055%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="19.8555%" y="309" width="0.0578%" height="15" fill="rgb(226,116,26)" fg:x="687" fg:w="2"/><text x="20.1055%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="19.8555%" y="293" width="0.0578%" height="15" fill="rgb(244,5,17)" fg:x="687" fg:w="2"/><text x="20.1055%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.06%)</title><rect x="19.8555%" y="277" width="0.0578%" height="15" fill="rgb(252,159,33)" fg:x="687" fg:w="2"/><text x="20.1055%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="19.9133%" y="341" width="0.0289%" height="15" fill="rgb(206,71,0)" fg:x="689" fg:w="1"/><text x="20.1633%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (32 samples, 0.92%)</title><rect x="19.1329%" y="469" width="0.9249%" height="15" fill="rgb(233,118,54)" fg:x="662" fg:w="32"/><text x="19.3829%" y="479.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.92%)</title><rect x="19.1329%" y="453" width="0.9249%" height="15" fill="rgb(234,83,48)" fg:x="662" fg:w="32"/><text x="19.3829%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (27 samples, 0.78%)</title><rect x="19.2775%" y="437" width="0.7803%" height="15" fill="rgb(228,3,54)" fg:x="667" fg:w="27"/><text x="19.5275%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (27 samples, 0.78%)</title><rect x="19.2775%" y="421" width="0.7803%" height="15" fill="rgb(226,155,13)" fg:x="667" fg:w="27"/><text x="19.5275%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (27 samples, 0.78%)</title><rect x="19.2775%" y="405" width="0.7803%" height="15" fill="rgb(241,28,37)" fg:x="667" fg:w="27"/><text x="19.5275%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (14 samples, 0.40%)</title><rect x="19.6532%" y="389" width="0.4046%" height="15" fill="rgb(233,93,10)" fg:x="680" fg:w="14"/><text x="19.9032%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14 samples, 0.40%)</title><rect x="19.6532%" y="373" width="0.4046%" height="15" fill="rgb(225,113,19)" fg:x="680" fg:w="14"/><text x="19.9032%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (14 samples, 0.40%)</title><rect x="19.6532%" y="357" width="0.4046%" height="15" fill="rgb(241,2,18)" fg:x="680" fg:w="14"/><text x="19.9032%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.12%)</title><rect x="19.9422%" y="341" width="0.1156%" height="15" fill="rgb(228,207,21)" fg:x="690" fg:w="4"/><text x="20.1922%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.12%)</title><rect x="19.9422%" y="325" width="0.1156%" height="15" fill="rgb(213,211,35)" fg:x="690" fg:w="4"/><text x="20.1922%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (44 samples, 1.27%)</title><rect x="18.9306%" y="485" width="1.2717%" height="15" fill="rgb(209,83,10)" fg:x="655" fg:w="44"/><text x="19.1806%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (5 samples, 0.14%)</title><rect x="20.0578%" y="469" width="0.1445%" height="15" fill="rgb(209,164,1)" fg:x="694" fg:w="5"/><text x="20.3078%" y="479.50"></text></g><g><title>core::ptr::read (2 samples, 0.06%)</title><rect x="20.1445%" y="453" width="0.0578%" height="15" fill="rgb(213,184,43)" fg:x="697" fg:w="2"/><text x="20.3945%" y="463.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (134 samples, 3.87%)</title><rect x="16.4162%" y="501" width="3.8728%" height="15" fill="rgb(231,61,34)" fg:x="568" fg:w="134"/><text x="16.6662%" y="511.50">mut_..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (3 samples, 0.09%)</title><rect x="20.2023%" y="485" width="0.0867%" height="15" fill="rgb(235,75,3)" fg:x="699" fg:w="3"/><text x="20.4523%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="20.3179%" y="357" width="0.0867%" height="15" fill="rgb(220,106,47)" fg:x="703" fg:w="3"/><text x="20.5679%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.14%)</title><rect x="20.3179%" y="373" width="0.1445%" height="15" fill="rgb(210,196,33)" fg:x="703" fg:w="5"/><text x="20.5679%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.06%)</title><rect x="20.4046%" y="357" width="0.0578%" height="15" fill="rgb(229,154,42)" fg:x="706" fg:w="2"/><text x="20.6546%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.20%)</title><rect x="20.5780%" y="357" width="0.2023%" height="15" fill="rgb(228,114,26)" fg:x="712" fg:w="7"/><text x="20.8280%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (21 samples, 0.61%)</title><rect x="20.2890%" y="421" width="0.6069%" height="15" fill="rgb(208,144,1)" fg:x="702" fg:w="21"/><text x="20.5390%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (21 samples, 0.61%)</title><rect x="20.2890%" y="405" width="0.6069%" height="15" fill="rgb(239,112,37)" fg:x="702" fg:w="21"/><text x="20.5390%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (21 samples, 0.61%)</title><rect x="20.2890%" y="389" width="0.6069%" height="15" fill="rgb(210,96,50)" fg:x="702" fg:w="21"/><text x="20.5390%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.43%)</title><rect x="20.4624%" y="373" width="0.4335%" height="15" fill="rgb(222,178,2)" fg:x="708" fg:w="15"/><text x="20.7124%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.12%)</title><rect x="20.7803%" y="357" width="0.1156%" height="15" fill="rgb(226,74,18)" fg:x="719" fg:w="4"/><text x="21.0303%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.03%)</title><rect x="20.8960%" y="421" width="0.0289%" height="15" fill="rgb(225,67,54)" fg:x="723" fg:w="1"/><text x="21.1460%" y="431.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.03%)</title><rect x="20.8960%" y="405" width="0.0289%" height="15" fill="rgb(251,92,32)" fg:x="723" fg:w="1"/><text x="21.1460%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.03%)</title><rect x="20.8960%" y="389" width="0.0289%" height="15" fill="rgb(228,149,22)" fg:x="723" fg:w="1"/><text x="21.1460%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.03%)</title><rect x="20.8960%" y="373" width="0.0289%" height="15" fill="rgb(243,54,13)" fg:x="723" fg:w="1"/><text x="21.1460%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 0.78%)</title><rect x="20.2890%" y="453" width="0.7803%" height="15" fill="rgb(243,180,28)" fg:x="702" fg:w="27"/><text x="20.5390%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.78%)</title><rect x="20.2890%" y="437" width="0.7803%" height="15" fill="rgb(208,167,24)" fg:x="702" fg:w="27"/><text x="20.5390%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.14%)</title><rect x="20.9249%" y="421" width="0.1445%" height="15" fill="rgb(245,73,45)" fg:x="724" fg:w="5"/><text x="21.1749%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (5 samples, 0.14%)</title><rect x="20.9249%" y="405" width="0.1445%" height="15" fill="rgb(237,203,48)" fg:x="724" fg:w="5"/><text x="21.1749%" y="415.50"></text></g><g><title>core::hash::Hasher::write_i64 (5 samples, 0.14%)</title><rect x="20.9249%" y="389" width="0.1445%" height="15" fill="rgb(211,197,16)" fg:x="724" fg:w="5"/><text x="21.1749%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (5 samples, 0.14%)</title><rect x="20.9249%" y="373" width="0.1445%" height="15" fill="rgb(243,99,51)" fg:x="724" fg:w="5"/><text x="21.1749%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.9249%" y="357" width="0.1445%" height="15" fill="rgb(215,123,29)" fg:x="724" fg:w="5"/><text x="21.1749%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.9249%" y="341" width="0.1445%" height="15" fill="rgb(239,186,37)" fg:x="724" fg:w="5"/><text x="21.1749%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.14%)</title><rect x="20.9249%" y="325" width="0.1445%" height="15" fill="rgb(252,136,39)" fg:x="724" fg:w="5"/><text x="21.1749%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.12%)</title><rect x="20.9538%" y="309" width="0.1156%" height="15" fill="rgb(223,213,32)" fg:x="725" fg:w="4"/><text x="21.2038%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="20.9827%" y="293" width="0.0867%" height="15" fill="rgb(233,115,5)" fg:x="726" fg:w="3"/><text x="21.2327%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="21.1561%" y="405" width="0.0578%" height="15" fill="rgb(207,226,44)" fg:x="732" fg:w="2"/><text x="21.4061%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="21.1561%" y="389" width="0.0578%" height="15" fill="rgb(208,126,0)" fg:x="732" fg:w="2"/><text x="21.4061%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (10 samples, 0.29%)</title><rect x="21.2139%" y="405" width="0.2890%" height="15" fill="rgb(244,66,21)" fg:x="734" fg:w="10"/><text x="21.4639%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (10 samples, 0.29%)</title><rect x="21.2139%" y="389" width="0.2890%" height="15" fill="rgb(222,97,12)" fg:x="734" fg:w="10"/><text x="21.4639%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (10 samples, 0.29%)</title><rect x="21.2139%" y="373" width="0.2890%" height="15" fill="rgb(219,213,19)" fg:x="734" fg:w="10"/><text x="21.4639%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 0.29%)</title><rect x="21.2139%" y="357" width="0.2890%" height="15" fill="rgb(252,169,30)" fg:x="734" fg:w="10"/><text x="21.4639%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (10 samples, 0.29%)</title><rect x="21.2139%" y="341" width="0.2890%" height="15" fill="rgb(206,32,51)" fg:x="734" fg:w="10"/><text x="21.4639%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (3 samples, 0.09%)</title><rect x="21.5029%" y="405" width="0.0867%" height="15" fill="rgb(250,172,42)" fg:x="744" fg:w="3"/><text x="21.7529%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.06%)</title><rect x="21.5896%" y="405" width="0.0578%" height="15" fill="rgb(209,34,43)" fg:x="747" fg:w="2"/><text x="21.8396%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="21.6474%" y="405" width="0.0289%" height="15" fill="rgb(223,11,35)" fg:x="749" fg:w="1"/><text x="21.8974%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="21.6474%" y="389" width="0.0289%" height="15" fill="rgb(251,219,26)" fg:x="749" fg:w="1"/><text x="21.8974%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="21.6474%" y="373" width="0.0289%" height="15" fill="rgb(231,119,3)" fg:x="749" fg:w="1"/><text x="21.8974%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.14%)</title><rect x="21.6763%" y="405" width="0.1445%" height="15" fill="rgb(216,97,11)" fg:x="750" fg:w="5"/><text x="21.9263%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.14%)</title><rect x="21.6763%" y="389" width="0.1445%" height="15" fill="rgb(223,59,9)" fg:x="750" fg:w="5"/><text x="21.9263%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (27 samples, 0.78%)</title><rect x="21.0694%" y="421" width="0.7803%" height="15" fill="rgb(233,93,31)" fg:x="729" fg:w="27"/><text x="21.3194%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="21.8208%" y="405" width="0.0289%" height="15" fill="rgb(239,81,33)" fg:x="755" fg:w="1"/><text x="22.0708%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="21.8208%" y="389" width="0.0289%" height="15" fill="rgb(213,120,34)" fg:x="755" fg:w="1"/><text x="22.0708%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="21.8208%" y="373" width="0.0289%" height="15" fill="rgb(243,49,53)" fg:x="755" fg:w="1"/><text x="22.0708%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (56 samples, 1.62%)</title><rect x="20.2890%" y="501" width="1.6185%" height="15" fill="rgb(247,216,33)" fg:x="702" fg:w="56"/><text x="20.5390%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (56 samples, 1.62%)</title><rect x="20.2890%" y="485" width="1.6185%" height="15" fill="rgb(226,26,14)" fg:x="702" fg:w="56"/><text x="20.5390%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (56 samples, 1.62%)</title><rect x="20.2890%" y="469" width="1.6185%" height="15" fill="rgb(215,49,53)" fg:x="702" fg:w="56"/><text x="20.5390%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (29 samples, 0.84%)</title><rect x="21.0694%" y="453" width="0.8382%" height="15" fill="rgb(245,162,40)" fg:x="729" fg:w="29"/><text x="21.3194%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (29 samples, 0.84%)</title><rect x="21.0694%" y="437" width="0.8382%" height="15" fill="rgb(229,68,17)" fg:x="729" fg:w="29"/><text x="21.3194%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (2 samples, 0.06%)</title><rect x="21.8497%" y="421" width="0.0578%" height="15" fill="rgb(213,182,10)" fg:x="756" fg:w="2"/><text x="22.0997%" y="431.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.03%)</title><rect x="21.9075%" y="437" width="0.0289%" height="15" fill="rgb(245,125,30)" fg:x="758" fg:w="1"/><text x="22.1575%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="21.9364%" y="437" width="0.0289%" height="15" fill="rgb(232,202,2)" fg:x="759" fg:w="1"/><text x="22.1864%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.03%)</title><rect x="21.9364%" y="421" width="0.0289%" height="15" fill="rgb(237,140,51)" fg:x="759" fg:w="1"/><text x="22.1864%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (214 samples, 6.18%)</title><rect x="15.8092%" y="517" width="6.1850%" height="15" fill="rgb(236,157,25)" fg:x="547" fg:w="214"/><text x="16.0592%" y="527.50">mut_bina..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.09%)</title><rect x="21.9075%" y="501" width="0.0867%" height="15" fill="rgb(219,209,0)" fg:x="758" fg:w="3"/><text x="22.1575%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.09%)</title><rect x="21.9075%" y="485" width="0.0867%" height="15" fill="rgb(240,116,54)" fg:x="758" fg:w="3"/><text x="22.1575%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.09%)</title><rect x="21.9075%" y="469" width="0.0867%" height="15" fill="rgb(216,10,36)" fg:x="758" fg:w="3"/><text x="22.1575%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.09%)</title><rect x="21.9075%" y="453" width="0.0867%" height="15" fill="rgb(222,72,44)" fg:x="758" fg:w="3"/><text x="22.1575%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (1 samples, 0.03%)</title><rect x="21.9653%" y="437" width="0.0289%" height="15" fill="rgb(232,159,9)" fg:x="760" fg:w="1"/><text x="22.2153%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (225 samples, 6.50%)</title><rect x="15.5202%" y="533" width="6.5029%" height="15" fill="rgb(210,39,32)" fg:x="537" fg:w="225"/><text x="15.7702%" y="543.50">project1:..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (1 samples, 0.03%)</title><rect x="21.9942%" y="517" width="0.0289%" height="15" fill="rgb(216,194,45)" fg:x="761" fg:w="1"/><text x="22.2442%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="21.9942%" y="501" width="0.0289%" height="15" fill="rgb(218,18,35)" fg:x="761" fg:w="1"/><text x="22.2442%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="21.9942%" y="485" width="0.0289%" height="15" fill="rgb(207,83,51)" fg:x="761" fg:w="1"/><text x="22.2442%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (4 samples, 0.12%)</title><rect x="22.1098%" y="517" width="0.1156%" height="15" fill="rgb(225,63,43)" fg:x="765" fg:w="4"/><text x="22.3598%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (4 samples, 0.12%)</title><rect x="22.1098%" y="501" width="0.1156%" height="15" fill="rgb(207,57,36)" fg:x="765" fg:w="4"/><text x="22.3598%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (4 samples, 0.12%)</title><rect x="22.1098%" y="485" width="0.1156%" height="15" fill="rgb(216,99,33)" fg:x="765" fg:w="4"/><text x="22.3598%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (4 samples, 0.12%)</title><rect x="22.1098%" y="469" width="0.1156%" height="15" fill="rgb(225,42,16)" fg:x="765" fg:w="4"/><text x="22.3598%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="22.1098%" y="453" width="0.1156%" height="15" fill="rgb(220,201,45)" fg:x="765" fg:w="4"/><text x="22.3598%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 0.12%)</title><rect x="22.1098%" y="437" width="0.1156%" height="15" fill="rgb(225,33,4)" fg:x="765" fg:w="4"/><text x="22.3598%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.09%)</title><rect x="22.1387%" y="421" width="0.0867%" height="15" fill="rgb(224,33,50)" fg:x="766" fg:w="3"/><text x="22.3887%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.09%)</title><rect x="22.1387%" y="405" width="0.0867%" height="15" fill="rgb(246,198,51)" fg:x="766" fg:w="3"/><text x="22.3887%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.09%)</title><rect x="22.1387%" y="389" width="0.0867%" height="15" fill="rgb(205,22,4)" fg:x="766" fg:w="3"/><text x="22.3887%" y="399.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.09%)</title><rect x="22.1387%" y="373" width="0.0867%" height="15" fill="rgb(206,3,8)" fg:x="766" fg:w="3"/><text x="22.3887%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.09%)</title><rect x="22.1387%" y="357" width="0.0867%" height="15" fill="rgb(251,23,15)" fg:x="766" fg:w="3"/><text x="22.3887%" y="367.50"></text></g><g><title>__GI___libc_free (3 samples, 0.09%)</title><rect x="22.1387%" y="341" width="0.0867%" height="15" fill="rgb(252,88,28)" fg:x="766" fg:w="3"/><text x="22.3887%" y="351.50"></text></g><g><title>_int_free (3 samples, 0.09%)</title><rect x="22.1387%" y="325" width="0.0867%" height="15" fill="rgb(212,127,14)" fg:x="766" fg:w="3"/><text x="22.3887%" y="335.50"></text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="22.2254%" y="517" width="0.0289%" height="15" fill="rgb(247,145,37)" fg:x="769" fg:w="1"/><text x="22.4754%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="22.2254%" y="501" width="0.0289%" height="15" fill="rgb(209,117,53)" fg:x="769" fg:w="1"/><text x="22.4754%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="22.2254%" y="485" width="0.0289%" height="15" fill="rgb(212,90,42)" fg:x="769" fg:w="1"/><text x="22.4754%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (1 samples, 0.03%)</title><rect x="22.2543%" y="517" width="0.0289%" height="15" fill="rgb(218,164,37)" fg:x="770" fg:w="1"/><text x="22.5043%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (1 samples, 0.03%)</title><rect x="22.2543%" y="501" width="0.0289%" height="15" fill="rgb(246,65,34)" fg:x="770" fg:w="1"/><text x="22.5043%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="22.2543%" y="485" width="0.0289%" height="15" fill="rgb(231,100,33)" fg:x="770" fg:w="1"/><text x="22.5043%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="22.2543%" y="469" width="0.0289%" height="15" fill="rgb(228,126,14)" fg:x="770" fg:w="1"/><text x="22.5043%" y="479.50"></text></g><g><title>project1::solver::types::Lit::var (1 samples, 0.03%)</title><rect x="22.2832%" y="517" width="0.0289%" height="15" fill="rgb(215,173,21)" fg:x="771" fg:w="1"/><text x="22.5332%" y="527.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (1 samples, 0.03%)</title><rect x="22.2832%" y="501" width="0.0289%" height="15" fill="rgb(210,6,40)" fg:x="771" fg:w="1"/><text x="22.5332%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="22.3410%" y="469" width="0.0289%" height="15" fill="rgb(212,48,18)" fg:x="773" fg:w="1"/><text x="22.5910%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="22.3410%" y="453" width="0.0289%" height="15" fill="rgb(230,214,11)" fg:x="773" fg:w="1"/><text x="22.5910%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="22.3410%" y="437" width="0.0289%" height="15" fill="rgb(254,105,39)" fg:x="773" fg:w="1"/><text x="22.5910%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (1 samples, 0.03%)</title><rect x="22.3410%" y="421" width="0.0289%" height="15" fill="rgb(245,158,5)" fg:x="773" fg:w="1"/><text x="22.5910%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (1 samples, 0.03%)</title><rect x="22.3410%" y="405" width="0.0289%" height="15" fill="rgb(249,208,11)" fg:x="773" fg:w="1"/><text x="22.5910%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="22.3699%" y="453" width="0.0578%" height="15" fill="rgb(210,39,28)" fg:x="774" fg:w="2"/><text x="22.6199%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="22.4566%" y="389" width="0.0289%" height="15" fill="rgb(211,56,53)" fg:x="777" fg:w="1"/><text x="22.7066%" y="399.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="22.4855%" y="389" width="0.0289%" height="15" fill="rgb(226,201,30)" fg:x="778" fg:w="1"/><text x="22.7355%" y="399.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.03%)</title><rect x="22.4855%" y="373" width="0.0289%" height="15" fill="rgb(239,101,34)" fg:x="778" fg:w="1"/><text x="22.7355%" y="383.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="22.4855%" y="357" width="0.0289%" height="15" fill="rgb(226,209,5)" fg:x="778" fg:w="1"/><text x="22.7355%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (7 samples, 0.20%)</title><rect x="22.5145%" y="357" width="0.2023%" height="15" fill="rgb(250,105,47)" fg:x="779" fg:w="7"/><text x="22.7645%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 0.17%)</title><rect x="22.5434%" y="341" width="0.1734%" height="15" fill="rgb(230,72,3)" fg:x="780" fg:w="6"/><text x="22.7934%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.17%)</title><rect x="22.5434%" y="325" width="0.1734%" height="15" fill="rgb(232,218,39)" fg:x="780" fg:w="6"/><text x="22.7934%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.12%)</title><rect x="22.7168%" y="357" width="0.1156%" height="15" fill="rgb(248,166,6)" fg:x="786" fg:w="4"/><text x="22.9668%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.12%)</title><rect x="22.7168%" y="341" width="0.1156%" height="15" fill="rgb(247,89,20)" fg:x="786" fg:w="4"/><text x="22.9668%" y="351.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 0.12%)</title><rect x="22.7168%" y="325" width="0.1156%" height="15" fill="rgb(248,130,54)" fg:x="786" fg:w="4"/><text x="22.9668%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (15 samples, 0.43%)</title><rect x="22.5145%" y="373" width="0.4335%" height="15" fill="rgb(234,196,4)" fg:x="779" fg:w="15"/><text x="22.7645%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.12%)</title><rect x="22.8324%" y="357" width="0.1156%" height="15" fill="rgb(250,143,31)" fg:x="790" fg:w="4"/><text x="23.0824%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.12%)</title><rect x="22.8324%" y="341" width="0.1156%" height="15" fill="rgb(211,110,34)" fg:x="790" fg:w="4"/><text x="23.0824%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="22.8324%" y="325" width="0.1156%" height="15" fill="rgb(215,124,48)" fg:x="790" fg:w="4"/><text x="23.0824%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (16 samples, 0.46%)</title><rect x="22.5145%" y="389" width="0.4624%" height="15" fill="rgb(216,46,13)" fg:x="779" fg:w="16"/><text x="22.7645%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="22.9480%" y="373" width="0.0289%" height="15" fill="rgb(205,184,25)" fg:x="794" fg:w="1"/><text x="23.1980%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="22.9480%" y="357" width="0.0289%" height="15" fill="rgb(228,1,10)" fg:x="794" fg:w="1"/><text x="23.1980%" y="367.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.14%)</title><rect x="22.9769%" y="341" width="0.1445%" height="15" fill="rgb(213,116,27)" fg:x="795" fg:w="5"/><text x="23.2269%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.14%)</title><rect x="22.9769%" y="325" width="0.1445%" height="15" fill="rgb(241,95,50)" fg:x="795" fg:w="5"/><text x="23.2269%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.14%)</title><rect x="22.9769%" y="309" width="0.1445%" height="15" fill="rgb(238,48,32)" fg:x="795" fg:w="5"/><text x="23.2269%" y="319.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.14%)</title><rect x="22.9769%" y="293" width="0.1445%" height="15" fill="rgb(235,113,49)" fg:x="795" fg:w="5"/><text x="23.2269%" y="303.50"></text></g><g><title>__rdl_alloc (5 samples, 0.14%)</title><rect x="22.9769%" y="277" width="0.1445%" height="15" fill="rgb(205,127,43)" fg:x="795" fg:w="5"/><text x="23.2269%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.14%)</title><rect x="22.9769%" y="261" width="0.1445%" height="15" fill="rgb(250,162,2)" fg:x="795" fg:w="5"/><text x="23.2269%" y="271.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.14%)</title><rect x="22.9769%" y="245" width="0.1445%" height="15" fill="rgb(220,13,41)" fg:x="795" fg:w="5"/><text x="23.2269%" y="255.50"></text></g><g><title>tcache_get (4 samples, 0.12%)</title><rect x="23.0058%" y="229" width="0.1156%" height="15" fill="rgb(249,221,25)" fg:x="796" fg:w="4"/><text x="23.2558%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (26 samples, 0.75%)</title><rect x="22.4277%" y="453" width="0.7514%" height="15" fill="rgb(215,208,19)" fg:x="776" fg:w="26"/><text x="22.6777%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.72%)</title><rect x="22.4566%" y="437" width="0.7225%" height="15" fill="rgb(236,175,2)" fg:x="777" fg:w="25"/><text x="22.7066%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (25 samples, 0.72%)</title><rect x="22.4566%" y="421" width="0.7225%" height="15" fill="rgb(241,52,2)" fg:x="777" fg:w="25"/><text x="22.7066%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (25 samples, 0.72%)</title><rect x="22.4566%" y="405" width="0.7225%" height="15" fill="rgb(248,140,14)" fg:x="777" fg:w="25"/><text x="22.7066%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (7 samples, 0.20%)</title><rect x="22.9769%" y="389" width="0.2023%" height="15" fill="rgb(253,22,42)" fg:x="795" fg:w="7"/><text x="23.2269%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (7 samples, 0.20%)</title><rect x="22.9769%" y="373" width="0.2023%" height="15" fill="rgb(234,61,47)" fg:x="795" fg:w="7"/><text x="23.2269%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7 samples, 0.20%)</title><rect x="22.9769%" y="357" width="0.2023%" height="15" fill="rgb(208,226,15)" fg:x="795" fg:w="7"/><text x="23.2269%" y="367.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.06%)</title><rect x="23.1214%" y="341" width="0.0578%" height="15" fill="rgb(217,221,4)" fg:x="800" fg:w="2"/><text x="23.3714%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="23.1792%" y="437" width="0.0289%" height="15" fill="rgb(212,174,34)" fg:x="802" fg:w="1"/><text x="23.4292%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="23.1792%" y="421" width="0.0289%" height="15" fill="rgb(253,83,4)" fg:x="802" fg:w="1"/><text x="23.4292%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="23.2081%" y="437" width="0.0289%" height="15" fill="rgb(250,195,49)" fg:x="803" fg:w="1"/><text x="23.4581%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.06%)</title><rect x="23.2370%" y="421" width="0.0578%" height="15" fill="rgb(241,192,25)" fg:x="804" fg:w="2"/><text x="23.4870%" y="431.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.03%)</title><rect x="23.2659%" y="405" width="0.0289%" height="15" fill="rgb(208,124,10)" fg:x="805" fg:w="1"/><text x="23.5159%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3 samples, 0.09%)</title><rect x="23.2370%" y="437" width="0.0867%" height="15" fill="rgb(222,33,0)" fg:x="804" fg:w="3"/><text x="23.4870%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="23.2948%" y="421" width="0.0289%" height="15" fill="rgb(234,209,28)" fg:x="806" fg:w="1"/><text x="23.5448%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="23.2948%" y="405" width="0.0289%" height="15" fill="rgb(224,11,23)" fg:x="806" fg:w="1"/><text x="23.5448%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.09%)</title><rect x="23.3237%" y="437" width="0.0867%" height="15" fill="rgb(232,99,1)" fg:x="807" fg:w="3"/><text x="23.5737%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.09%)</title><rect x="23.3237%" y="421" width="0.0867%" height="15" fill="rgb(237,95,45)" fg:x="807" fg:w="3"/><text x="23.5737%" y="431.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.09%)</title><rect x="23.3237%" y="405" width="0.0867%" height="15" fill="rgb(208,109,11)" fg:x="807" fg:w="3"/><text x="23.5737%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.06%)</title><rect x="23.4104%" y="437" width="0.0578%" height="15" fill="rgb(216,190,48)" fg:x="810" fg:w="2"/><text x="23.6604%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.06%)</title><rect x="23.4682%" y="437" width="0.0578%" height="15" fill="rgb(251,171,36)" fg:x="812" fg:w="2"/><text x="23.7182%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.06%)</title><rect x="23.4682%" y="421" width="0.0578%" height="15" fill="rgb(230,62,22)" fg:x="812" fg:w="2"/><text x="23.7182%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="23.4682%" y="405" width="0.0578%" height="15" fill="rgb(225,114,35)" fg:x="812" fg:w="2"/><text x="23.7182%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (43 samples, 1.24%)</title><rect x="22.3699%" y="469" width="1.2428%" height="15" fill="rgb(215,118,42)" fg:x="774" fg:w="43"/><text x="22.6199%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (15 samples, 0.43%)</title><rect x="23.1792%" y="453" width="0.4335%" height="15" fill="rgb(243,119,21)" fg:x="802" fg:w="15"/><text x="23.4292%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.09%)</title><rect x="23.5260%" y="437" width="0.0867%" height="15" fill="rgb(252,177,53)" fg:x="814" fg:w="3"/><text x="23.7760%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.09%)</title><rect x="23.5260%" y="421" width="0.0867%" height="15" fill="rgb(237,209,29)" fg:x="814" fg:w="3"/><text x="23.7760%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (57 samples, 1.65%)</title><rect x="22.0231%" y="533" width="1.6474%" height="15" fill="rgb(212,65,23)" fg:x="762" fg:w="57"/><text x="22.2731%" y="543.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (47 samples, 1.36%)</title><rect x="22.3121%" y="517" width="1.3584%" height="15" fill="rgb(230,222,46)" fg:x="772" fg:w="47"/><text x="22.5621%" y="527.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (47 samples, 1.36%)</title><rect x="22.3121%" y="501" width="1.3584%" height="15" fill="rgb(215,135,32)" fg:x="772" fg:w="47"/><text x="22.5621%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (46 samples, 1.33%)</title><rect x="22.3410%" y="485" width="1.3295%" height="15" fill="rgb(246,101,22)" fg:x="773" fg:w="46"/><text x="22.5910%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.06%)</title><rect x="23.6127%" y="469" width="0.0578%" height="15" fill="rgb(206,107,13)" fg:x="817" fg:w="2"/><text x="23.8627%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.06%)</title><rect x="23.6127%" y="453" width="0.0578%" height="15" fill="rgb(250,100,44)" fg:x="817" fg:w="2"/><text x="23.8627%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="23.6416%" y="437" width="0.0289%" height="15" fill="rgb(231,147,38)" fg:x="818" fg:w="1"/><text x="23.8916%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="23.6416%" y="421" width="0.0289%" height="15" fill="rgb(229,8,40)" fg:x="818" fg:w="1"/><text x="23.8916%" y="431.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="23.7861%" y="437" width="0.0289%" height="15" fill="rgb(221,135,30)" fg:x="823" fg:w="1"/><text x="24.0361%" y="447.50"></text></g><g><title>_compound_head (1 samples, 0.03%)</title><rect x="23.8439%" y="341" width="0.0289%" height="15" fill="rgb(249,193,18)" fg:x="825" fg:w="1"/><text x="24.0939%" y="351.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="23.8728%" y="309" width="0.0289%" height="15" fill="rgb(209,133,39)" fg:x="826" fg:w="1"/><text x="24.1228%" y="319.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.03%)</title><rect x="23.8728%" y="293" width="0.0289%" height="15" fill="rgb(232,100,14)" fg:x="826" fg:w="1"/><text x="24.1228%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="23.9017%" y="309" width="0.0289%" height="15" fill="rgb(224,185,1)" fg:x="827" fg:w="1"/><text x="24.1517%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.29%)</title><rect x="23.6705%" y="469" width="0.2890%" height="15" fill="rgb(223,139,8)" fg:x="819" fg:w="10"/><text x="23.9205%" y="479.50"></text></g><g><title>core::ptr::write (10 samples, 0.29%)</title><rect x="23.6705%" y="453" width="0.2890%" height="15" fill="rgb(232,213,38)" fg:x="819" fg:w="10"/><text x="23.9205%" y="463.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="437" width="0.1445%" height="15" fill="rgb(207,94,22)" fg:x="824" fg:w="5"/><text x="24.0650%" y="447.50"></text></g><g><title>exc_page_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="421" width="0.1445%" height="15" fill="rgb(219,183,54)" fg:x="824" fg:w="5"/><text x="24.0650%" y="431.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="405" width="0.1445%" height="15" fill="rgb(216,185,54)" fg:x="824" fg:w="5"/><text x="24.0650%" y="415.50"></text></g><g><title>handle_mm_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="389" width="0.1445%" height="15" fill="rgb(254,217,39)" fg:x="824" fg:w="5"/><text x="24.0650%" y="399.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="373" width="0.1445%" height="15" fill="rgb(240,178,23)" fg:x="824" fg:w="5"/><text x="24.0650%" y="383.50"></text></g><g><title>handle_pte_fault (5 samples, 0.14%)</title><rect x="23.8150%" y="357" width="0.1445%" height="15" fill="rgb(218,11,47)" fg:x="824" fg:w="5"/><text x="24.0650%" y="367.50"></text></g><g><title>do_anonymous_page (3 samples, 0.09%)</title><rect x="23.8728%" y="341" width="0.0867%" height="15" fill="rgb(218,51,51)" fg:x="826" fg:w="3"/><text x="24.1228%" y="351.50"></text></g><g><title>__mem_cgroup_charge (3 samples, 0.09%)</title><rect x="23.8728%" y="325" width="0.0867%" height="15" fill="rgb(238,126,27)" fg:x="826" fg:w="3"/><text x="24.1228%" y="335.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.03%)</title><rect x="23.9306%" y="309" width="0.0289%" height="15" fill="rgb(249,202,22)" fg:x="828" fg:w="1"/><text x="24.1806%" y="319.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="24.1329%" y="197" width="0.0289%" height="15" fill="rgb(254,195,49)" fg:x="835" fg:w="1"/><text x="24.3829%" y="207.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="24.1329%" y="181" width="0.0289%" height="15" fill="rgb(208,123,14)" fg:x="835" fg:w="1"/><text x="24.3829%" y="191.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="24.1329%" y="165" width="0.0289%" height="15" fill="rgb(224,200,8)" fg:x="835" fg:w="1"/><text x="24.3829%" y="175.50"></text></g><g><title>find_vma (1 samples, 0.03%)</title><rect x="24.1329%" y="149" width="0.0289%" height="15" fill="rgb(217,61,36)" fg:x="835" fg:w="1"/><text x="24.3829%" y="159.50"></text></g><g><title>vmacache_find (1 samples, 0.03%)</title><rect x="24.1329%" y="133" width="0.0289%" height="15" fill="rgb(206,35,45)" fg:x="835" fg:w="1"/><text x="24.3829%" y="143.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="24.1618%" y="197" width="0.0289%" height="15" fill="rgb(217,65,33)" fg:x="836" fg:w="1"/><text x="24.4118%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="23.9595%" y="357" width="0.2601%" height="15" fill="rgb(222,158,48)" fg:x="829" fg:w="9"/><text x="24.2095%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.26%)</title><rect x="23.9595%" y="341" width="0.2601%" height="15" fill="rgb(254,2,54)" fg:x="829" fg:w="9"/><text x="24.2095%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.26%)</title><rect x="23.9595%" y="325" width="0.2601%" height="15" fill="rgb(250,143,38)" fg:x="829" fg:w="9"/><text x="24.2095%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.26%)</title><rect x="23.9595%" y="309" width="0.2601%" height="15" fill="rgb(248,25,0)" fg:x="829" fg:w="9"/><text x="24.2095%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.26%)</title><rect x="23.9595%" y="293" width="0.2601%" height="15" fill="rgb(206,152,27)" fg:x="829" fg:w="9"/><text x="24.2095%" y="303.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.26%)</title><rect x="23.9595%" y="277" width="0.2601%" height="15" fill="rgb(240,77,30)" fg:x="829" fg:w="9"/><text x="24.2095%" y="287.50"></text></g><g><title>__rdl_alloc (9 samples, 0.26%)</title><rect x="23.9595%" y="261" width="0.2601%" height="15" fill="rgb(231,5,3)" fg:x="829" fg:w="9"/><text x="24.2095%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.26%)</title><rect x="23.9595%" y="245" width="0.2601%" height="15" fill="rgb(207,226,32)" fg:x="829" fg:w="9"/><text x="24.2095%" y="255.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.26%)</title><rect x="23.9595%" y="229" width="0.2601%" height="15" fill="rgb(222,207,47)" fg:x="829" fg:w="9"/><text x="24.2095%" y="239.50"></text></g><g><title>_int_malloc (4 samples, 0.12%)</title><rect x="24.1040%" y="213" width="0.1156%" height="15" fill="rgb(229,115,45)" fg:x="834" fg:w="4"/><text x="24.3540%" y="223.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="24.1908%" y="197" width="0.0289%" height="15" fill="rgb(224,191,6)" fg:x="837" fg:w="1"/><text x="24.4408%" y="207.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="181" width="0.0289%" height="15" fill="rgb(230,227,24)" fg:x="837" fg:w="1"/><text x="24.4408%" y="191.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="165" width="0.0289%" height="15" fill="rgb(228,80,19)" fg:x="837" fg:w="1"/><text x="24.4408%" y="175.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="149" width="0.0289%" height="15" fill="rgb(247,229,0)" fg:x="837" fg:w="1"/><text x="24.4408%" y="159.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="133" width="0.0289%" height="15" fill="rgb(237,194,15)" fg:x="837" fg:w="1"/><text x="24.4408%" y="143.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="117" width="0.0289%" height="15" fill="rgb(219,203,20)" fg:x="837" fg:w="1"/><text x="24.4408%" y="127.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="24.1908%" y="101" width="0.0289%" height="15" fill="rgb(234,128,8)" fg:x="837" fg:w="1"/><text x="24.4408%" y="111.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="24.1908%" y="85" width="0.0289%" height="15" fill="rgb(248,202,8)" fg:x="837" fg:w="1"/><text x="24.4408%" y="95.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="24.1908%" y="69" width="0.0289%" height="15" fill="rgb(206,104,37)" fg:x="837" fg:w="1"/><text x="24.4408%" y="79.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="24.1908%" y="53" width="0.0289%" height="15" fill="rgb(223,8,27)" fg:x="837" fg:w="1"/><text x="24.4408%" y="63.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="24.1908%" y="37" width="0.0289%" height="15" fill="rgb(216,217,28)" fg:x="837" fg:w="1"/><text x="24.4408%" y="47.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (20 samples, 0.58%)</title><rect x="23.6705%" y="533" width="0.5780%" height="15" fill="rgb(249,199,1)" fg:x="819" fg:w="20"/><text x="23.9205%" y="543.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (20 samples, 0.58%)</title><rect x="23.6705%" y="517" width="0.5780%" height="15" fill="rgb(240,85,17)" fg:x="819" fg:w="20"/><text x="23.9205%" y="527.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (20 samples, 0.58%)</title><rect x="23.6705%" y="501" width="0.5780%" height="15" fill="rgb(206,108,45)" fg:x="819" fg:w="20"/><text x="23.9205%" y="511.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (20 samples, 0.58%)</title><rect x="23.6705%" y="485" width="0.5780%" height="15" fill="rgb(245,210,41)" fg:x="819" fg:w="20"/><text x="23.9205%" y="495.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (10 samples, 0.29%)</title><rect x="23.9595%" y="469" width="0.2890%" height="15" fill="rgb(206,13,37)" fg:x="829" fg:w="10"/><text x="24.2095%" y="479.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (10 samples, 0.29%)</title><rect x="23.9595%" y="453" width="0.2890%" height="15" fill="rgb(250,61,18)" fg:x="829" fg:w="10"/><text x="24.2095%" y="463.50"></text></g><g><title>project1::solver::clause::Clause::with_key (10 samples, 0.29%)</title><rect x="23.9595%" y="437" width="0.2890%" height="15" fill="rgb(235,172,48)" fg:x="829" fg:w="10"/><text x="24.2095%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.29%)</title><rect x="23.9595%" y="421" width="0.2890%" height="15" fill="rgb(249,201,17)" fg:x="829" fg:w="10"/><text x="24.2095%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.29%)</title><rect x="23.9595%" y="405" width="0.2890%" height="15" fill="rgb(219,208,6)" fg:x="829" fg:w="10"/><text x="24.2095%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.29%)</title><rect x="23.9595%" y="389" width="0.2890%" height="15" fill="rgb(248,31,23)" fg:x="829" fg:w="10"/><text x="24.2095%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.29%)</title><rect x="23.9595%" y="373" width="0.2890%" height="15" fill="rgb(245,15,42)" fg:x="829" fg:w="10"/><text x="24.2095%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="24.2197%" y="357" width="0.0289%" height="15" fill="rgb(222,217,39)" fg:x="838" fg:w="1"/><text x="24.4697%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="24.2197%" y="341" width="0.0289%" height="15" fill="rgb(210,219,27)" fg:x="838" fg:w="1"/><text x="24.4697%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.03%)</title><rect x="24.2197%" y="325" width="0.0289%" height="15" fill="rgb(252,166,36)" fg:x="838" fg:w="1"/><text x="24.4697%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="24.2486%" y="501" width="0.0289%" height="15" fill="rgb(245,132,34)" fg:x="839" fg:w="1"/><text x="24.4986%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="24.2486%" y="485" width="0.0289%" height="15" fill="rgb(236,54,3)" fg:x="839" fg:w="1"/><text x="24.4986%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="24.2775%" y="405" width="0.0289%" height="15" fill="rgb(241,173,43)" fg:x="840" fg:w="1"/><text x="24.5275%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="24.2775%" y="389" width="0.0289%" height="15" fill="rgb(215,190,9)" fg:x="840" fg:w="1"/><text x="24.5275%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.03%)</title><rect x="24.2775%" y="373" width="0.0289%" height="15" fill="rgb(242,101,16)" fg:x="840" fg:w="1"/><text x="24.5275%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.03%)</title><rect x="24.2775%" y="357" width="0.0289%" height="15" fill="rgb(223,190,21)" fg:x="840" fg:w="1"/><text x="24.5275%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.03%)</title><rect x="24.2775%" y="341" width="0.0289%" height="15" fill="rgb(215,228,25)" fg:x="840" fg:w="1"/><text x="24.5275%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="24.2775%" y="325" width="0.0289%" height="15" fill="rgb(225,36,22)" fg:x="840" fg:w="1"/><text x="24.5275%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (1 samples, 0.03%)</title><rect x="24.2775%" y="309" width="0.0289%" height="15" fill="rgb(251,106,46)" fg:x="840" fg:w="1"/><text x="24.5275%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.06%)</title><rect x="24.2775%" y="501" width="0.0578%" height="15" fill="rgb(208,90,1)" fg:x="840" fg:w="2"/><text x="24.5275%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (2 samples, 0.06%)</title><rect x="24.2775%" y="485" width="0.0578%" height="15" fill="rgb(243,10,4)" fg:x="840" fg:w="2"/><text x="24.5275%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.06%)</title><rect x="24.2775%" y="469" width="0.0578%" height="15" fill="rgb(212,137,27)" fg:x="840" fg:w="2"/><text x="24.5275%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.06%)</title><rect x="24.2775%" y="453" width="0.0578%" height="15" fill="rgb(231,220,49)" fg:x="840" fg:w="2"/><text x="24.5275%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.06%)</title><rect x="24.2775%" y="437" width="0.0578%" height="15" fill="rgb(237,96,20)" fg:x="840" fg:w="2"/><text x="24.5275%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.06%)</title><rect x="24.2775%" y="421" width="0.0578%" height="15" fill="rgb(239,229,30)" fg:x="840" fg:w="2"/><text x="24.5275%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.03%)</title><rect x="24.3064%" y="405" width="0.0289%" height="15" fill="rgb(219,65,33)" fg:x="841" fg:w="1"/><text x="24.5564%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.03%)</title><rect x="24.3064%" y="389" width="0.0289%" height="15" fill="rgb(243,134,7)" fg:x="841" fg:w="1"/><text x="24.5564%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.03%)</title><rect x="24.3064%" y="373" width="0.0289%" height="15" fill="rgb(216,177,54)" fg:x="841" fg:w="1"/><text x="24.5564%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (3 samples, 0.09%)</title><rect x="24.3353%" y="469" width="0.0867%" height="15" fill="rgb(211,160,20)" fg:x="842" fg:w="3"/><text x="24.5853%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4220%" y="325" width="0.0289%" height="15" fill="rgb(239,85,39)" fg:x="845" fg:w="1"/><text x="24.6720%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4220%" y="309" width="0.0289%" height="15" fill="rgb(232,125,22)" fg:x="845" fg:w="1"/><text x="24.6720%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.4220%" y="293" width="0.0289%" height="15" fill="rgb(244,57,34)" fg:x="845" fg:w="1"/><text x="24.6720%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.4220%" y="277" width="0.0289%" height="15" fill="rgb(214,203,32)" fg:x="845" fg:w="1"/><text x="24.6720%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.09%)</title><rect x="24.4220%" y="357" width="0.0867%" height="15" fill="rgb(207,58,43)" fg:x="845" fg:w="3"/><text x="24.6720%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="24.4220%" y="341" width="0.0867%" height="15" fill="rgb(215,193,15)" fg:x="845" fg:w="3"/><text x="24.6720%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="24.4509%" y="325" width="0.0578%" height="15" fill="rgb(232,15,44)" fg:x="846" fg:w="2"/><text x="24.7009%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="24.4509%" y="309" width="0.0578%" height="15" fill="rgb(212,3,48)" fg:x="846" fg:w="2"/><text x="24.7009%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="24.4509%" y="293" width="0.0578%" height="15" fill="rgb(218,128,7)" fg:x="846" fg:w="2"/><text x="24.7009%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="24.4509%" y="277" width="0.0578%" height="15" fill="rgb(226,216,39)" fg:x="846" fg:w="2"/><text x="24.7009%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.4509%" y="261" width="0.0578%" height="15" fill="rgb(243,47,51)" fg:x="846" fg:w="2"/><text x="24.7009%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.4509%" y="245" width="0.0578%" height="15" fill="rgb(241,183,40)" fg:x="846" fg:w="2"/><text x="24.7009%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="24.4509%" y="229" width="0.0578%" height="15" fill="rgb(231,217,32)" fg:x="846" fg:w="2"/><text x="24.7009%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="24.5087%" y="309" width="0.0289%" height="15" fill="rgb(229,61,38)" fg:x="848" fg:w="1"/><text x="24.7587%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="24.5087%" y="293" width="0.0289%" height="15" fill="rgb(225,210,5)" fg:x="848" fg:w="1"/><text x="24.7587%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="24.5087%" y="277" width="0.0289%" height="15" fill="rgb(231,79,45)" fg:x="848" fg:w="1"/><text x="24.7587%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="24.5376%" y="309" width="0.0289%" height="15" fill="rgb(224,100,7)" fg:x="849" fg:w="1"/><text x="24.7876%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="24.5376%" y="293" width="0.0289%" height="15" fill="rgb(241,198,18)" fg:x="849" fg:w="1"/><text x="24.7876%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.09%)</title><rect x="24.5087%" y="325" width="0.0867%" height="15" fill="rgb(252,97,53)" fg:x="848" fg:w="3"/><text x="24.7587%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.5665%" y="309" width="0.0289%" height="15" fill="rgb(220,88,7)" fg:x="850" fg:w="1"/><text x="24.8165%" y="319.50"></text></g><g><title>core::mem::drop (7 samples, 0.20%)</title><rect x="24.4220%" y="453" width="0.2023%" height="15" fill="rgb(213,176,14)" fg:x="845" fg:w="7"/><text x="24.6720%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (7 samples, 0.20%)</title><rect x="24.4220%" y="437" width="0.2023%" height="15" fill="rgb(246,73,7)" fg:x="845" fg:w="7"/><text x="24.6720%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.20%)</title><rect x="24.4220%" y="421" width="0.2023%" height="15" fill="rgb(245,64,36)" fg:x="845" fg:w="7"/><text x="24.6720%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (7 samples, 0.20%)</title><rect x="24.4220%" y="405" width="0.2023%" height="15" fill="rgb(245,80,10)" fg:x="845" fg:w="7"/><text x="24.6720%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7 samples, 0.20%)</title><rect x="24.4220%" y="389" width="0.2023%" height="15" fill="rgb(232,107,50)" fg:x="845" fg:w="7"/><text x="24.6720%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (7 samples, 0.20%)</title><rect x="24.4220%" y="373" width="0.2023%" height="15" fill="rgb(253,3,0)" fg:x="845" fg:w="7"/><text x="24.6720%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.12%)</title><rect x="24.5087%" y="357" width="0.1156%" height="15" fill="rgb(212,99,53)" fg:x="848" fg:w="4"/><text x="24.7587%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.12%)</title><rect x="24.5087%" y="341" width="0.1156%" height="15" fill="rgb(249,111,54)" fg:x="848" fg:w="4"/><text x="24.7587%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.5954%" y="325" width="0.0289%" height="15" fill="rgb(249,55,30)" fg:x="851" fg:w="1"/><text x="24.8454%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="24.6243%" y="453" width="0.0289%" height="15" fill="rgb(237,47,42)" fg:x="852" fg:w="1"/><text x="24.8743%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6532%" y="325" width="0.0289%" height="15" fill="rgb(211,20,18)" fg:x="853" fg:w="1"/><text x="24.9032%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6532%" y="309" width="0.0289%" height="15" fill="rgb(231,203,46)" fg:x="853" fg:w="1"/><text x="24.9032%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="24.6532%" y="293" width="0.0289%" height="15" fill="rgb(237,142,3)" fg:x="853" fg:w="1"/><text x="24.9032%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="24.6532%" y="277" width="0.0289%" height="15" fill="rgb(241,107,1)" fg:x="853" fg:w="1"/><text x="24.9032%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.6532%" y="261" width="0.0289%" height="15" fill="rgb(229,83,13)" fg:x="853" fg:w="1"/><text x="24.9032%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2 samples, 0.06%)</title><rect x="24.6532%" y="453" width="0.0578%" height="15" fill="rgb(241,91,40)" fg:x="853" fg:w="2"/><text x="24.9032%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="24.6532%" y="437" width="0.0578%" height="15" fill="rgb(225,3,45)" fg:x="853" fg:w="2"/><text x="24.9032%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="24.6532%" y="421" width="0.0578%" height="15" fill="rgb(244,223,14)" fg:x="853" fg:w="2"/><text x="24.9032%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.06%)</title><rect x="24.6532%" y="405" width="0.0578%" height="15" fill="rgb(224,124,37)" fg:x="853" fg:w="2"/><text x="24.9032%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.06%)</title><rect x="24.6532%" y="389" width="0.0578%" height="15" fill="rgb(251,171,30)" fg:x="853" fg:w="2"/><text x="24.9032%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.06%)</title><rect x="24.6532%" y="373" width="0.0578%" height="15" fill="rgb(236,46,54)" fg:x="853" fg:w="2"/><text x="24.9032%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.06%)</title><rect x="24.6532%" y="357" width="0.0578%" height="15" fill="rgb(245,213,5)" fg:x="853" fg:w="2"/><text x="24.9032%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="24.6532%" y="341" width="0.0578%" height="15" fill="rgb(230,144,27)" fg:x="853" fg:w="2"/><text x="24.9032%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.03%)</title><rect x="24.6821%" y="325" width="0.0289%" height="15" fill="rgb(220,86,6)" fg:x="854" fg:w="1"/><text x="24.9321%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (1 samples, 0.03%)</title><rect x="24.6821%" y="309" width="0.0289%" height="15" fill="rgb(240,20,13)" fg:x="854" fg:w="1"/><text x="24.9321%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (1 samples, 0.03%)</title><rect x="24.6821%" y="293" width="0.0289%" height="15" fill="rgb(217,89,34)" fg:x="854" fg:w="1"/><text x="24.9321%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.03%)</title><rect x="24.6821%" y="277" width="0.0289%" height="15" fill="rgb(229,13,5)" fg:x="854" fg:w="1"/><text x="24.9321%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.6821%" y="261" width="0.0289%" height="15" fill="rgb(244,67,35)" fg:x="854" fg:w="1"/><text x="24.9321%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.6821%" y="245" width="0.0289%" height="15" fill="rgb(221,40,2)" fg:x="854" fg:w="1"/><text x="24.9321%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="24.6821%" y="229" width="0.0289%" height="15" fill="rgb(237,157,21)" fg:x="854" fg:w="1"/><text x="24.9321%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="24.6821%" y="213" width="0.0289%" height="15" fill="rgb(222,94,11)" fg:x="854" fg:w="1"/><text x="24.9321%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.6821%" y="197" width="0.0289%" height="15" fill="rgb(249,113,6)" fg:x="854" fg:w="1"/><text x="24.9321%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.06%)</title><rect x="24.7399%" y="309" width="0.0578%" height="15" fill="rgb(238,137,36)" fg:x="856" fg:w="2"/><text x="24.9899%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="24.7688%" y="293" width="0.0289%" height="15" fill="rgb(210,102,26)" fg:x="857" fg:w="1"/><text x="25.0188%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="24.7110%" y="357" width="0.2312%" height="15" fill="rgb(218,30,30)" fg:x="855" fg:w="8"/><text x="24.9610%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="24.7110%" y="341" width="0.2312%" height="15" fill="rgb(214,67,26)" fg:x="855" fg:w="8"/><text x="24.9610%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.23%)</title><rect x="24.7110%" y="325" width="0.2312%" height="15" fill="rgb(251,9,53)" fg:x="855" fg:w="8"/><text x="24.9610%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.14%)</title><rect x="24.7977%" y="309" width="0.1445%" height="15" fill="rgb(228,204,25)" fg:x="858" fg:w="5"/><text x="25.0477%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.09%)</title><rect x="24.8555%" y="293" width="0.0867%" height="15" fill="rgb(207,153,8)" fg:x="860" fg:w="3"/><text x="25.1055%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.06%)</title><rect x="24.9422%" y="357" width="0.0578%" height="15" fill="rgb(242,9,16)" fg:x="863" fg:w="2"/><text x="25.1922%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.35%)</title><rect x="24.7110%" y="389" width="0.3468%" height="15" fill="rgb(217,211,10)" fg:x="855" fg:w="12"/><text x="24.9610%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12 samples, 0.35%)</title><rect x="24.7110%" y="373" width="0.3468%" height="15" fill="rgb(219,228,52)" fg:x="855" fg:w="12"/><text x="24.9610%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.06%)</title><rect x="25.0000%" y="357" width="0.0578%" height="15" fill="rgb(231,92,29)" fg:x="865" fg:w="2"/><text x="25.2500%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2 samples, 0.06%)</title><rect x="25.0000%" y="341" width="0.0578%" height="15" fill="rgb(232,8,23)" fg:x="865" fg:w="2"/><text x="25.2500%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (2 samples, 0.06%)</title><rect x="25.0000%" y="325" width="0.0578%" height="15" fill="rgb(216,211,34)" fg:x="865" fg:w="2"/><text x="25.2500%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.06%)</title><rect x="25.0000%" y="309" width="0.0578%" height="15" fill="rgb(236,151,0)" fg:x="865" fg:w="2"/><text x="25.2500%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="25.0000%" y="293" width="0.0578%" height="15" fill="rgb(209,168,3)" fg:x="865" fg:w="2"/><text x="25.2500%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="25.0000%" y="277" width="0.0578%" height="15" fill="rgb(208,129,28)" fg:x="865" fg:w="2"/><text x="25.2500%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="25.0000%" y="261" width="0.0578%" height="15" fill="rgb(229,78,22)" fg:x="865" fg:w="2"/><text x="25.2500%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.03%)</title><rect x="25.0289%" y="245" width="0.0289%" height="15" fill="rgb(228,187,13)" fg:x="866" fg:w="1"/><text x="25.2789%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.12%)</title><rect x="25.0578%" y="325" width="0.1156%" height="15" fill="rgb(240,119,24)" fg:x="867" fg:w="4"/><text x="25.3078%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.12%)</title><rect x="25.0578%" y="309" width="0.1156%" height="15" fill="rgb(209,194,42)" fg:x="867" fg:w="4"/><text x="25.3078%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.12%)</title><rect x="25.0578%" y="293" width="0.1156%" height="15" fill="rgb(247,200,46)" fg:x="867" fg:w="4"/><text x="25.3078%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4 samples, 0.12%)</title><rect x="25.0578%" y="277" width="0.1156%" height="15" fill="rgb(218,76,16)" fg:x="867" fg:w="4"/><text x="25.3078%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.14%)</title><rect x="25.0578%" y="341" width="0.1445%" height="15" fill="rgb(225,21,48)" fg:x="867" fg:w="5"/><text x="25.3078%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="25.1734%" y="325" width="0.0289%" height="15" fill="rgb(239,223,50)" fg:x="871" fg:w="1"/><text x="25.4234%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="25.1734%" y="309" width="0.0289%" height="15" fill="rgb(244,45,21)" fg:x="871" fg:w="1"/><text x="25.4234%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="25.1734%" y="293" width="0.0289%" height="15" fill="rgb(232,33,43)" fg:x="871" fg:w="1"/><text x="25.4234%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="25.1734%" y="277" width="0.0289%" height="15" fill="rgb(209,8,3)" fg:x="871" fg:w="1"/><text x="25.4234%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="25.2023%" y="341" width="0.0289%" height="15" fill="rgb(214,25,53)" fg:x="872" fg:w="1"/><text x="25.4523%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="25.2312%" y="341" width="0.0289%" height="15" fill="rgb(254,186,54)" fg:x="873" fg:w="1"/><text x="25.4812%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="25.2312%" y="325" width="0.0289%" height="15" fill="rgb(208,174,49)" fg:x="873" fg:w="1"/><text x="25.4812%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="25.2312%" y="309" width="0.0289%" height="15" fill="rgb(233,191,51)" fg:x="873" fg:w="1"/><text x="25.4812%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.23%)</title><rect x="25.0578%" y="357" width="0.2312%" height="15" fill="rgb(222,134,10)" fg:x="867" fg:w="8"/><text x="25.3078%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="25.2601%" y="341" width="0.0289%" height="15" fill="rgb(230,226,20)" fg:x="874" fg:w="1"/><text x="25.5101%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="25.2601%" y="325" width="0.0289%" height="15" fill="rgb(251,111,25)" fg:x="874" fg:w="1"/><text x="25.5101%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (37 samples, 1.07%)</title><rect x="24.2486%" y="533" width="1.0694%" height="15" fill="rgb(224,40,46)" fg:x="839" fg:w="37"/><text x="24.4986%" y="543.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (37 samples, 1.07%)</title><rect x="24.2486%" y="517" width="1.0694%" height="15" fill="rgb(236,108,47)" fg:x="839" fg:w="37"/><text x="24.4986%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (34 samples, 0.98%)</title><rect x="24.3353%" y="501" width="0.9827%" height="15" fill="rgb(234,93,0)" fg:x="842" fg:w="34"/><text x="24.5853%" y="511.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (34 samples, 0.98%)</title><rect x="24.3353%" y="485" width="0.9827%" height="15" fill="rgb(224,213,32)" fg:x="842" fg:w="34"/><text x="24.5853%" y="495.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (31 samples, 0.90%)</title><rect x="24.4220%" y="469" width="0.8960%" height="15" fill="rgb(251,11,48)" fg:x="845" fg:w="31"/><text x="24.6720%" y="479.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (21 samples, 0.61%)</title><rect x="24.7110%" y="453" width="0.6069%" height="15" fill="rgb(236,173,5)" fg:x="855" fg:w="21"/><text x="24.9610%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (21 samples, 0.61%)</title><rect x="24.7110%" y="437" width="0.6069%" height="15" fill="rgb(230,95,12)" fg:x="855" fg:w="21"/><text x="24.9610%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (21 samples, 0.61%)</title><rect x="24.7110%" y="421" width="0.6069%" height="15" fill="rgb(232,209,1)" fg:x="855" fg:w="21"/><text x="24.9610%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (21 samples, 0.61%)</title><rect x="24.7110%" y="405" width="0.6069%" height="15" fill="rgb(232,6,1)" fg:x="855" fg:w="21"/><text x="24.9610%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (9 samples, 0.26%)</title><rect x="25.0578%" y="389" width="0.2601%" height="15" fill="rgb(210,224,50)" fg:x="867" fg:w="9"/><text x="25.3078%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.26%)</title><rect x="25.0578%" y="373" width="0.2601%" height="15" fill="rgb(228,127,35)" fg:x="867" fg:w="9"/><text x="25.3078%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (1 samples, 0.03%)</title><rect x="25.2890%" y="357" width="0.0289%" height="15" fill="rgb(245,102,45)" fg:x="875" fg:w="1"/><text x="25.5390%" y="367.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="25.3179%" y="245" width="0.0289%" height="15" fill="rgb(214,1,49)" fg:x="876" fg:w="1"/><text x="25.5679%" y="255.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="25.3179%" y="229" width="0.0289%" height="15" fill="rgb(226,163,40)" fg:x="876" fg:w="1"/><text x="25.5679%" y="239.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="25.3179%" y="213" width="0.0289%" height="15" fill="rgb(239,212,28)" fg:x="876" fg:w="1"/><text x="25.5679%" y="223.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="25.3179%" y="197" width="0.0289%" height="15" fill="rgb(220,20,13)" fg:x="876" fg:w="1"/><text x="25.5679%" y="207.50"></text></g><g><title>_compound_head (1 samples, 0.03%)</title><rect x="25.3179%" y="181" width="0.0289%" height="15" fill="rgb(210,164,35)" fg:x="876" fg:w="1"/><text x="25.5679%" y="191.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="25.3179%" y="277" width="0.0578%" height="15" fill="rgb(248,109,41)" fg:x="876" fg:w="2"/><text x="25.5679%" y="287.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="25.3179%" y="261" width="0.0578%" height="15" fill="rgb(238,23,50)" fg:x="876" fg:w="2"/><text x="25.5679%" y="271.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="25.3468%" y="245" width="0.0289%" height="15" fill="rgb(211,48,49)" fg:x="877" fg:w="1"/><text x="25.5968%" y="255.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="25.3468%" y="229" width="0.0289%" height="15" fill="rgb(223,36,21)" fg:x="877" fg:w="1"/><text x="25.5968%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="25.3179%" y="453" width="0.0867%" height="15" fill="rgb(207,123,46)" fg:x="876" fg:w="3"/><text x="25.5679%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="25.3179%" y="437" width="0.0867%" height="15" fill="rgb(240,218,32)" fg:x="876" fg:w="3"/><text x="25.5679%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="25.3179%" y="421" width="0.0867%" height="15" fill="rgb(252,5,43)" fg:x="876" fg:w="3"/><text x="25.5679%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="25.3179%" y="405" width="0.0867%" height="15" fill="rgb(252,84,19)" fg:x="876" fg:w="3"/><text x="25.5679%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="25.3179%" y="389" width="0.0867%" height="15" fill="rgb(243,152,39)" fg:x="876" fg:w="3"/><text x="25.5679%" y="399.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="25.3179%" y="373" width="0.0867%" height="15" fill="rgb(234,160,15)" fg:x="876" fg:w="3"/><text x="25.5679%" y="383.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="25.3179%" y="357" width="0.0867%" height="15" fill="rgb(237,34,20)" fg:x="876" fg:w="3"/><text x="25.5679%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="25.3179%" y="341" width="0.0867%" height="15" fill="rgb(229,97,13)" fg:x="876" fg:w="3"/><text x="25.5679%" y="351.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="25.3179%" y="325" width="0.0867%" height="15" fill="rgb(234,71,50)" fg:x="876" fg:w="3"/><text x="25.5679%" y="335.50"></text></g><g><title>_int_malloc (3 samples, 0.09%)</title><rect x="25.3179%" y="309" width="0.0867%" height="15" fill="rgb(253,155,4)" fg:x="876" fg:w="3"/><text x="25.5679%" y="319.50"></text></g><g><title>sysmalloc (3 samples, 0.09%)</title><rect x="25.3179%" y="293" width="0.0867%" height="15" fill="rgb(222,185,37)" fg:x="876" fg:w="3"/><text x="25.5679%" y="303.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="25.3757%" y="277" width="0.0289%" height="15" fill="rgb(251,177,13)" fg:x="878" fg:w="1"/><text x="25.6257%" y="287.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="25.3757%" y="261" width="0.0289%" height="15" fill="rgb(250,179,40)" fg:x="878" fg:w="1"/><text x="25.6257%" y="271.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="25.3757%" y="245" width="0.0289%" height="15" fill="rgb(242,44,2)" fg:x="878" fg:w="1"/><text x="25.6257%" y="255.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="25.3757%" y="229" width="0.0289%" height="15" fill="rgb(216,177,13)" fg:x="878" fg:w="1"/><text x="25.6257%" y="239.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="25.3757%" y="213" width="0.0289%" height="15" fill="rgb(216,106,43)" fg:x="878" fg:w="1"/><text x="25.6257%" y="223.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="25.3757%" y="197" width="0.0289%" height="15" fill="rgb(216,183,2)" fg:x="878" fg:w="1"/><text x="25.6257%" y="207.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="25.3757%" y="181" width="0.0289%" height="15" fill="rgb(249,75,3)" fg:x="878" fg:w="1"/><text x="25.6257%" y="191.50"></text></g><g><title>vma_set_page_prot (1 samples, 0.03%)</title><rect x="25.3757%" y="165" width="0.0289%" height="15" fill="rgb(219,67,39)" fg:x="878" fg:w="1"/><text x="25.6257%" y="175.50"></text></g><g><title>vm_get_page_prot (1 samples, 0.03%)</title><rect x="25.3757%" y="149" width="0.0289%" height="15" fill="rgb(253,228,2)" fg:x="878" fg:w="1"/><text x="25.6257%" y="159.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="25.4624%" y="293" width="0.0289%" height="15" fill="rgb(235,138,27)" fg:x="881" fg:w="1"/><text x="25.7124%" y="303.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="25.4624%" y="277" width="0.0289%" height="15" fill="rgb(236,97,51)" fg:x="881" fg:w="1"/><text x="25.7124%" y="287.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="25.4624%" y="261" width="0.0289%" height="15" fill="rgb(240,80,30)" fg:x="881" fg:w="1"/><text x="25.7124%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.23%)</title><rect x="25.3179%" y="517" width="0.2312%" height="15" fill="rgb(230,178,19)" fg:x="876" fg:w="8"/><text x="25.5679%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.23%)</title><rect x="25.3179%" y="501" width="0.2312%" height="15" fill="rgb(210,190,27)" fg:x="876" fg:w="8"/><text x="25.5679%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.23%)</title><rect x="25.3179%" y="485" width="0.2312%" height="15" fill="rgb(222,107,31)" fg:x="876" fg:w="8"/><text x="25.5679%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.23%)</title><rect x="25.3179%" y="469" width="0.2312%" height="15" fill="rgb(216,127,34)" fg:x="876" fg:w="8"/><text x="25.5679%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.14%)</title><rect x="25.4046%" y="453" width="0.1445%" height="15" fill="rgb(234,116,52)" fg:x="879" fg:w="5"/><text x="25.6546%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.14%)</title><rect x="25.4046%" y="437" width="0.1445%" height="15" fill="rgb(222,124,15)" fg:x="879" fg:w="5"/><text x="25.6546%" y="447.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5 samples, 0.14%)</title><rect x="25.4046%" y="421" width="0.1445%" height="15" fill="rgb(231,179,28)" fg:x="879" fg:w="5"/><text x="25.6546%" y="431.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="405" width="0.0867%" height="15" fill="rgb(226,93,45)" fg:x="881" fg:w="3"/><text x="25.7124%" y="415.50"></text></g><g><title>exc_page_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="389" width="0.0867%" height="15" fill="rgb(215,8,51)" fg:x="881" fg:w="3"/><text x="25.7124%" y="399.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="373" width="0.0867%" height="15" fill="rgb(223,106,5)" fg:x="881" fg:w="3"/><text x="25.7124%" y="383.50"></text></g><g><title>handle_mm_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="357" width="0.0867%" height="15" fill="rgb(250,191,5)" fg:x="881" fg:w="3"/><text x="25.7124%" y="367.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="341" width="0.0867%" height="15" fill="rgb(242,132,44)" fg:x="881" fg:w="3"/><text x="25.7124%" y="351.50"></text></g><g><title>handle_pte_fault (3 samples, 0.09%)</title><rect x="25.4624%" y="325" width="0.0867%" height="15" fill="rgb(251,152,29)" fg:x="881" fg:w="3"/><text x="25.7124%" y="335.50"></text></g><g><title>do_anonymous_page (3 samples, 0.09%)</title><rect x="25.4624%" y="309" width="0.0867%" height="15" fill="rgb(218,179,5)" fg:x="881" fg:w="3"/><text x="25.7124%" y="319.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="25.4913%" y="293" width="0.0578%" height="15" fill="rgb(227,67,19)" fg:x="882" fg:w="2"/><text x="25.7413%" y="303.50"></text></g><g><title>__folio_alloc (2 samples, 0.06%)</title><rect x="25.4913%" y="277" width="0.0578%" height="15" fill="rgb(233,119,31)" fg:x="882" fg:w="2"/><text x="25.7413%" y="287.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="25.4913%" y="261" width="0.0578%" height="15" fill="rgb(241,120,22)" fg:x="882" fg:w="2"/><text x="25.7413%" y="271.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="25.4913%" y="245" width="0.0578%" height="15" fill="rgb(224,102,30)" fg:x="882" fg:w="2"/><text x="25.7413%" y="255.50"></text></g><g><title>rmqueue (2 samples, 0.06%)</title><rect x="25.4913%" y="229" width="0.0578%" height="15" fill="rgb(210,164,37)" fg:x="882" fg:w="2"/><text x="25.7413%" y="239.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (2 samples, 0.06%)</title><rect x="25.4913%" y="213" width="0.0578%" height="15" fill="rgb(226,191,16)" fg:x="882" fg:w="2"/><text x="25.7413%" y="223.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="25.5202%" y="197" width="0.0289%" height="15" fill="rgb(214,40,45)" fg:x="883" fg:w="1"/><text x="25.7702%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (2 samples, 0.06%)</title><rect x="25.6069%" y="453" width="0.0578%" height="15" fill="rgb(244,29,26)" fg:x="886" fg:w="2"/><text x="25.8569%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (2 samples, 0.06%)</title><rect x="25.6069%" y="437" width="0.0578%" height="15" fill="rgb(216,16,5)" fg:x="886" fg:w="2"/><text x="25.8569%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (5 samples, 0.14%)</title><rect x="25.5491%" y="517" width="0.1445%" height="15" fill="rgb(249,76,35)" fg:x="884" fg:w="5"/><text x="25.7991%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (5 samples, 0.14%)</title><rect x="25.5491%" y="501" width="0.1445%" height="15" fill="rgb(207,11,44)" fg:x="884" fg:w="5"/><text x="25.7991%" y="511.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="25.6069%" y="485" width="0.0867%" height="15" fill="rgb(228,190,49)" fg:x="886" fg:w="3"/><text x="25.8569%" y="495.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (3 samples, 0.09%)</title><rect x="25.6069%" y="469" width="0.0867%" height="15" fill="rgb(214,173,12)" fg:x="886" fg:w="3"/><text x="25.8569%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.6647%" y="453" width="0.0289%" height="15" fill="rgb(218,26,35)" fg:x="888" fg:w="1"/><text x="25.9147%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (1 samples, 0.03%)</title><rect x="25.6647%" y="437" width="0.0289%" height="15" fill="rgb(220,200,19)" fg:x="888" fg:w="1"/><text x="25.9147%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="25.8092%" y="437" width="0.0289%" height="15" fill="rgb(239,95,49)" fg:x="893" fg:w="1"/><text x="26.0592%" y="447.50"></text></g><g><title>core::slice::sort::find_streak (10 samples, 0.29%)</title><rect x="25.7803%" y="469" width="0.2890%" height="15" fill="rgb(235,85,53)" fg:x="892" fg:w="10"/><text x="26.0303%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (9 samples, 0.26%)</title><rect x="25.8092%" y="453" width="0.2601%" height="15" fill="rgb(233,133,31)" fg:x="893" fg:w="9"/><text x="26.0592%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (8 samples, 0.23%)</title><rect x="25.8382%" y="437" width="0.2312%" height="15" fill="rgb(218,25,20)" fg:x="894" fg:w="8"/><text x="26.0882%" y="447.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (4 samples, 0.12%)</title><rect x="25.9538%" y="421" width="0.1156%" height="15" fill="rgb(252,210,38)" fg:x="898" fg:w="4"/><text x="26.2038%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (4 samples, 0.12%)</title><rect x="25.9538%" y="405" width="0.1156%" height="15" fill="rgb(242,134,21)" fg:x="898" fg:w="4"/><text x="26.2038%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (4 samples, 0.12%)</title><rect x="25.9538%" y="389" width="0.1156%" height="15" fill="rgb(213,28,48)" fg:x="898" fg:w="4"/><text x="26.2038%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (4 samples, 0.12%)</title><rect x="25.9538%" y="373" width="0.1156%" height="15" fill="rgb(250,196,2)" fg:x="898" fg:w="4"/><text x="26.2038%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.06%)</title><rect x="26.3295%" y="437" width="0.0578%" height="15" fill="rgb(227,5,17)" fg:x="911" fg:w="2"/><text x="26.5795%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.14%)</title><rect x="27.2254%" y="389" width="0.1445%" height="15" fill="rgb(221,226,24)" fg:x="942" fg:w="5"/><text x="27.4754%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (19 samples, 0.55%)</title><rect x="27.3699%" y="389" width="0.5491%" height="15" fill="rgb(211,5,48)" fg:x="947" fg:w="19"/><text x="27.6199%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (19 samples, 0.55%)</title><rect x="27.3699%" y="373" width="0.5491%" height="15" fill="rgb(219,150,6)" fg:x="947" fg:w="19"/><text x="27.6199%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (27 samples, 0.78%)</title><rect x="27.2254%" y="421" width="0.7803%" height="15" fill="rgb(251,46,16)" fg:x="942" fg:w="27"/><text x="27.4754%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (27 samples, 0.78%)</title><rect x="27.2254%" y="405" width="0.7803%" height="15" fill="rgb(220,204,40)" fg:x="942" fg:w="27"/><text x="27.4754%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.09%)</title><rect x="27.9191%" y="389" width="0.0867%" height="15" fill="rgb(211,85,2)" fg:x="966" fg:w="3"/><text x="28.1691%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.09%)</title><rect x="27.9191%" y="373" width="0.0867%" height="15" fill="rgb(229,17,7)" fg:x="966" fg:w="3"/><text x="28.1691%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (61 samples, 1.76%)</title><rect x="26.3295%" y="453" width="1.7630%" height="15" fill="rgb(239,72,28)" fg:x="911" fg:w="61"/><text x="26.5795%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (59 samples, 1.71%)</title><rect x="26.3873%" y="437" width="1.7052%" height="15" fill="rgb(230,47,54)" fg:x="913" fg:w="59"/><text x="26.6373%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.09%)</title><rect x="28.0058%" y="421" width="0.0867%" height="15" fill="rgb(214,50,8)" fg:x="969" fg:w="3"/><text x="28.2558%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.23%)</title><rect x="28.0925%" y="453" width="0.2312%" height="15" fill="rgb(216,198,43)" fg:x="972" fg:w="8"/><text x="28.3425%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="28.2659%" y="437" width="0.0578%" height="15" fill="rgb(234,20,35)" fg:x="978" fg:w="2"/><text x="28.5159%" y="447.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="421" width="0.0578%" height="15" fill="rgb(254,45,19)" fg:x="978" fg:w="2"/><text x="28.5159%" y="431.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="405" width="0.0578%" height="15" fill="rgb(219,14,44)" fg:x="978" fg:w="2"/><text x="28.5159%" y="415.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="389" width="0.0578%" height="15" fill="rgb(217,220,26)" fg:x="978" fg:w="2"/><text x="28.5159%" y="399.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="373" width="0.0578%" height="15" fill="rgb(213,158,28)" fg:x="978" fg:w="2"/><text x="28.5159%" y="383.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="357" width="0.0578%" height="15" fill="rgb(252,51,52)" fg:x="978" fg:w="2"/><text x="28.5159%" y="367.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="28.2659%" y="341" width="0.0578%" height="15" fill="rgb(246,89,16)" fg:x="978" fg:w="2"/><text x="28.5159%" y="351.50"></text></g><g><title>do_anonymous_page (2 samples, 0.06%)</title><rect x="28.2659%" y="325" width="0.0578%" height="15" fill="rgb(216,158,49)" fg:x="978" fg:w="2"/><text x="28.5159%" y="335.50"></text></g><g><title>vma_alloc_folio (2 samples, 0.06%)</title><rect x="28.2659%" y="309" width="0.0578%" height="15" fill="rgb(236,107,19)" fg:x="978" fg:w="2"/><text x="28.5159%" y="319.50"></text></g><g><title>__folio_alloc (2 samples, 0.06%)</title><rect x="28.2659%" y="293" width="0.0578%" height="15" fill="rgb(228,185,30)" fg:x="978" fg:w="2"/><text x="28.5159%" y="303.50"></text></g><g><title>__alloc_pages (2 samples, 0.06%)</title><rect x="28.2659%" y="277" width="0.0578%" height="15" fill="rgb(246,134,8)" fg:x="978" fg:w="2"/><text x="28.5159%" y="287.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="28.2659%" y="261" width="0.0578%" height="15" fill="rgb(214,143,50)" fg:x="978" fg:w="2"/><text x="28.5159%" y="271.50"></text></g><g><title>rmqueue (2 samples, 0.06%)</title><rect x="28.2659%" y="245" width="0.0578%" height="15" fill="rgb(228,75,8)" fg:x="978" fg:w="2"/><text x="28.5159%" y="255.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (2 samples, 0.06%)</title><rect x="28.2659%" y="229" width="0.0578%" height="15" fill="rgb(207,175,4)" fg:x="978" fg:w="2"/><text x="28.5159%" y="239.50"></text></g><g><title>rmqueue_bulk (2 samples, 0.06%)</title><rect x="28.2659%" y="213" width="0.0578%" height="15" fill="rgb(205,108,24)" fg:x="978" fg:w="2"/><text x="28.5159%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (3 samples, 0.09%)</title><rect x="28.3237%" y="453" width="0.0867%" height="15" fill="rgb(244,120,49)" fg:x="980" fg:w="3"/><text x="28.5737%" y="463.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="28.3237%" y="437" width="0.0867%" height="15" fill="rgb(223,47,38)" fg:x="980" fg:w="3"/><text x="28.5737%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="28.3237%" y="421" width="0.0867%" height="15" fill="rgb(229,179,11)" fg:x="980" fg:w="3"/><text x="28.5737%" y="431.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.03%)</title><rect x="28.3815%" y="405" width="0.0289%" height="15" fill="rgb(231,122,1)" fg:x="982" fg:w="1"/><text x="28.6315%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.12%)</title><rect x="28.4104%" y="453" width="0.1156%" height="15" fill="rgb(245,119,9)" fg:x="983" fg:w="4"/><text x="28.6604%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="28.5260%" y="437" width="0.0289%" height="15" fill="rgb(241,163,25)" fg:x="987" fg:w="1"/><text x="28.7760%" y="447.50"></text></g><g><title>core::slice::sort::merge (87 samples, 2.51%)</title><rect x="26.0694%" y="469" width="2.5145%" height="15" fill="rgb(217,214,3)" fg:x="902" fg:w="87"/><text x="26.3194%" y="479.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.06%)</title><rect x="28.5260%" y="453" width="0.0578%" height="15" fill="rgb(240,86,28)" fg:x="987" fg:w="2"/><text x="28.7760%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="28.5549%" y="437" width="0.0289%" height="15" fill="rgb(215,47,9)" fg:x="988" fg:w="1"/><text x="28.8049%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (6 samples, 0.17%)</title><rect x="28.5838%" y="469" width="0.1734%" height="15" fill="rgb(252,25,45)" fg:x="989" fg:w="6"/><text x="28.8338%" y="479.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (2 samples, 0.06%)</title><rect x="28.7572%" y="469" width="0.0578%" height="15" fill="rgb(251,164,9)" fg:x="995" fg:w="2"/><text x="29.0072%" y="479.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (2 samples, 0.06%)</title><rect x="28.7572%" y="453" width="0.0578%" height="15" fill="rgb(233,194,0)" fg:x="995" fg:w="2"/><text x="29.0072%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.06%)</title><rect x="28.7572%" y="437" width="0.0578%" height="15" fill="rgb(249,111,24)" fg:x="995" fg:w="2"/><text x="29.0072%" y="447.50"></text></g><g><title>__rdl_alloc (2 samples, 0.06%)</title><rect x="28.7572%" y="421" width="0.0578%" height="15" fill="rgb(250,223,3)" fg:x="995" fg:w="2"/><text x="29.0072%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.06%)</title><rect x="28.7572%" y="405" width="0.0578%" height="15" fill="rgb(236,178,37)" fg:x="995" fg:w="2"/><text x="29.0072%" y="415.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="28.7572%" y="389" width="0.0578%" height="15" fill="rgb(241,158,50)" fg:x="995" fg:w="2"/><text x="29.0072%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="28.7861%" y="373" width="0.0289%" height="15" fill="rgb(213,121,41)" fg:x="996" fg:w="1"/><text x="29.0361%" y="383.50"></text></g><g><title>sysmalloc (1 samples, 0.03%)</title><rect x="28.7861%" y="357" width="0.0289%" height="15" fill="rgb(240,92,3)" fg:x="996" fg:w="1"/><text x="29.0361%" y="367.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="341" width="0.0289%" height="15" fill="rgb(205,123,3)" fg:x="996" fg:w="1"/><text x="29.0361%" y="351.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="325" width="0.0289%" height="15" fill="rgb(205,97,47)" fg:x="996" fg:w="1"/><text x="29.0361%" y="335.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="309" width="0.0289%" height="15" fill="rgb(247,152,14)" fg:x="996" fg:w="1"/><text x="29.0361%" y="319.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="293" width="0.0289%" height="15" fill="rgb(248,195,53)" fg:x="996" fg:w="1"/><text x="29.0361%" y="303.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="277" width="0.0289%" height="15" fill="rgb(226,201,16)" fg:x="996" fg:w="1"/><text x="29.0361%" y="287.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="28.7861%" y="261" width="0.0289%" height="15" fill="rgb(205,98,0)" fg:x="996" fg:w="1"/><text x="29.0361%" y="271.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="28.7861%" y="245" width="0.0289%" height="15" fill="rgb(214,191,48)" fg:x="996" fg:w="1"/><text x="29.0361%" y="255.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.03%)</title><rect x="28.7861%" y="229" width="0.0289%" height="15" fill="rgb(237,112,39)" fg:x="996" fg:w="1"/><text x="29.0361%" y="239.50"></text></g><g><title>__folio_alloc (1 samples, 0.03%)</title><rect x="28.7861%" y="213" width="0.0289%" height="15" fill="rgb(247,203,27)" fg:x="996" fg:w="1"/><text x="29.0361%" y="223.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="28.7861%" y="197" width="0.0289%" height="15" fill="rgb(235,124,28)" fg:x="996" fg:w="1"/><text x="29.0361%" y="207.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="28.7861%" y="181" width="0.0289%" height="15" fill="rgb(208,207,46)" fg:x="996" fg:w="1"/><text x="29.0361%" y="191.50"></text></g><g><title>rmqueue (1 samples, 0.03%)</title><rect x="28.7861%" y="165" width="0.0289%" height="15" fill="rgb(234,176,4)" fg:x="996" fg:w="1"/><text x="29.0361%" y="175.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.03%)</title><rect x="28.7861%" y="149" width="0.0289%" height="15" fill="rgb(230,133,28)" fg:x="996" fg:w="1"/><text x="29.0361%" y="159.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="28.7861%" y="133" width="0.0289%" height="15" fill="rgb(211,137,40)" fg:x="996" fg:w="1"/><text x="29.0361%" y="143.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (3 samples, 0.09%)</title><rect x="28.8150%" y="469" width="0.0867%" height="15" fill="rgb(254,35,13)" fg:x="997" fg:w="3"/><text x="29.0650%" y="479.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.06%)</title><rect x="28.8439%" y="453" width="0.0578%" height="15" fill="rgb(225,49,51)" fg:x="998" fg:w="2"/><text x="29.0939%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.06%)</title><rect x="28.8439%" y="437" width="0.0578%" height="15" fill="rgb(251,10,15)" fg:x="998" fg:w="2"/><text x="29.0939%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (2 samples, 0.06%)</title><rect x="28.9017%" y="469" width="0.0578%" height="15" fill="rgb(228,207,15)" fg:x="1000" fg:w="2"/><text x="29.1517%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="28.9595%" y="437" width="0.0289%" height="15" fill="rgb(241,99,19)" fg:x="1002" fg:w="1"/><text x="29.2095%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="28.9595%" y="421" width="0.0289%" height="15" fill="rgb(207,104,49)" fg:x="1002" fg:w="1"/><text x="29.2095%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="28.9595%" y="405" width="0.0289%" height="15" fill="rgb(234,99,18)" fg:x="1002" fg:w="1"/><text x="29.2095%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (6 samples, 0.17%)</title><rect x="29.0173%" y="405" width="0.1734%" height="15" fill="rgb(213,191,49)" fg:x="1004" fg:w="6"/><text x="29.2673%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (8 samples, 0.23%)</title><rect x="29.3931%" y="357" width="0.2312%" height="15" fill="rgb(210,226,19)" fg:x="1017" fg:w="8"/><text x="29.6431%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (8 samples, 0.23%)</title><rect x="29.3931%" y="341" width="0.2312%" height="15" fill="rgb(229,97,18)" fg:x="1017" fg:w="8"/><text x="29.6431%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (23 samples, 0.66%)</title><rect x="29.0173%" y="421" width="0.6647%" height="15" fill="rgb(211,167,15)" fg:x="1004" fg:w="23"/><text x="29.2673%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (17 samples, 0.49%)</title><rect x="29.1908%" y="405" width="0.4913%" height="15" fill="rgb(210,169,34)" fg:x="1010" fg:w="17"/><text x="29.4408%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (10 samples, 0.29%)</title><rect x="29.3931%" y="389" width="0.2890%" height="15" fill="rgb(241,121,31)" fg:x="1017" fg:w="10"/><text x="29.6431%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (10 samples, 0.29%)</title><rect x="29.3931%" y="373" width="0.2890%" height="15" fill="rgb(232,40,11)" fg:x="1017" fg:w="10"/><text x="29.6431%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.06%)</title><rect x="29.6243%" y="357" width="0.0578%" height="15" fill="rgb(205,86,26)" fg:x="1025" fg:w="2"/><text x="29.8743%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.06%)</title><rect x="29.6243%" y="341" width="0.0578%" height="15" fill="rgb(231,126,28)" fg:x="1025" fg:w="2"/><text x="29.8743%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.06%)</title><rect x="29.6821%" y="421" width="0.0578%" height="15" fill="rgb(219,221,18)" fg:x="1027" fg:w="2"/><text x="29.9321%" y="431.50"></text></g><g><title>core::slice::sort::insert_tail (29 samples, 0.84%)</title><rect x="28.9884%" y="437" width="0.8382%" height="15" fill="rgb(211,40,0)" fg:x="1003" fg:w="29"/><text x="29.2384%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (3 samples, 0.09%)</title><rect x="29.7399%" y="421" width="0.0867%" height="15" fill="rgb(239,85,43)" fg:x="1029" fg:w="3"/><text x="29.9899%" y="431.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="29.7399%" y="405" width="0.0867%" height="15" fill="rgb(231,55,21)" fg:x="1029" fg:w="3"/><text x="29.9899%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.09%)</title><rect x="29.7399%" y="389" width="0.0867%" height="15" fill="rgb(225,184,43)" fg:x="1029" fg:w="3"/><text x="29.9899%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (148 samples, 4.28%)</title><rect x="25.6936%" y="517" width="4.2775%" height="15" fill="rgb(251,158,41)" fg:x="889" fg:w="148"/><text x="25.9436%" y="527.50">alloc..</text></g><g><title>alloc::slice::stable_sort (148 samples, 4.28%)</title><rect x="25.6936%" y="501" width="4.2775%" height="15" fill="rgb(234,159,37)" fg:x="889" fg:w="148"/><text x="25.9436%" y="511.50">alloc..</text></g><g><title>core::slice::sort::merge_sort (148 samples, 4.28%)</title><rect x="25.6936%" y="485" width="4.2775%" height="15" fill="rgb(216,204,22)" fg:x="889" fg:w="148"/><text x="25.9436%" y="495.50">core:..</text></g><g><title>core::slice::sort::provide_sorted_batch (35 samples, 1.01%)</title><rect x="28.9595%" y="469" width="1.0116%" height="15" fill="rgb(214,17,3)" fg:x="1002" fg:w="35"/><text x="29.2095%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (35 samples, 1.01%)</title><rect x="28.9595%" y="453" width="1.0116%" height="15" fill="rgb(212,111,17)" fg:x="1002" fg:w="35"/><text x="29.2095%" y="463.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (5 samples, 0.14%)</title><rect x="29.8266%" y="437" width="0.1445%" height="15" fill="rgb(221,157,24)" fg:x="1032" fg:w="5"/><text x="30.0766%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (3 samples, 0.09%)</title><rect x="29.9711%" y="517" width="0.0867%" height="15" fill="rgb(252,16,13)" fg:x="1037" fg:w="3"/><text x="30.2211%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (3 samples, 0.09%)</title><rect x="29.9711%" y="501" width="0.0867%" height="15" fill="rgb(221,62,2)" fg:x="1037" fg:w="3"/><text x="30.2211%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (3 samples, 0.09%)</title><rect x="29.9711%" y="485" width="0.0867%" height="15" fill="rgb(247,87,22)" fg:x="1037" fg:w="3"/><text x="30.2211%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (3 samples, 0.09%)</title><rect x="29.9711%" y="469" width="0.0867%" height="15" fill="rgb(215,73,9)" fg:x="1037" fg:w="3"/><text x="30.2211%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3 samples, 0.09%)</title><rect x="29.9711%" y="453" width="0.0867%" height="15" fill="rgb(207,175,33)" fg:x="1037" fg:w="3"/><text x="30.2211%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1 samples, 0.03%)</title><rect x="30.0289%" y="437" width="0.0289%" height="15" fill="rgb(243,129,54)" fg:x="1039" fg:w="1"/><text x="30.2789%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1 samples, 0.03%)</title><rect x="30.0289%" y="421" width="0.0289%" height="15" fill="rgb(227,119,45)" fg:x="1039" fg:w="1"/><text x="30.2789%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1 samples, 0.03%)</title><rect x="30.0289%" y="405" width="0.0289%" height="15" fill="rgb(205,109,36)" fg:x="1039" fg:w="1"/><text x="30.2789%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1 samples, 0.03%)</title><rect x="30.0289%" y="389" width="0.0289%" height="15" fill="rgb(205,6,39)" fg:x="1039" fg:w="1"/><text x="30.2789%" y="399.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="325" width="0.0289%" height="15" fill="rgb(221,32,16)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="335.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="309" width="0.0289%" height="15" fill="rgb(228,144,50)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="319.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="293" width="0.0289%" height="15" fill="rgb(229,201,53)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="303.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="277" width="0.0289%" height="15" fill="rgb(249,153,27)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="287.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="261" width="0.0289%" height="15" fill="rgb(227,106,25)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="271.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="30.0578%" y="245" width="0.0289%" height="15" fill="rgb(230,65,29)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="255.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="30.0578%" y="229" width="0.0289%" height="15" fill="rgb(221,57,46)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="239.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="30.0578%" y="213" width="0.0289%" height="15" fill="rgb(229,161,17)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="223.50"></text></g><g><title>charge_memcg (1 samples, 0.03%)</title><rect x="30.0578%" y="197" width="0.0289%" height="15" fill="rgb(222,213,11)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="207.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="30.0578%" y="181" width="0.0289%" height="15" fill="rgb(235,35,13)" fg:x="1040" fg:w="1"/><text x="30.3078%" y="191.50"></text></g><g><title>grow_heap (1 samples, 0.03%)</title><rect x="30.0867%" y="325" width="0.0289%" height="15" fill="rgb(233,158,34)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="335.50"></text></g><g><title>__GI___mprotect (1 samples, 0.03%)</title><rect x="30.0867%" y="309" width="0.0289%" height="15" fill="rgb(215,151,48)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="30.0867%" y="293" width="0.0289%" height="15" fill="rgb(229,84,14)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="30.0867%" y="277" width="0.0289%" height="15" fill="rgb(229,68,14)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="287.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="30.0867%" y="261" width="0.0289%" height="15" fill="rgb(243,106,26)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="271.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="30.0867%" y="245" width="0.0289%" height="15" fill="rgb(206,45,38)" fg:x="1041" fg:w="1"/><text x="30.3367%" y="255.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (167 samples, 4.83%)</title><rect x="25.3179%" y="533" width="4.8266%" height="15" fill="rgb(226,6,15)" fg:x="876" fg:w="167"/><text x="25.5679%" y="543.50">projec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.09%)</title><rect x="30.0578%" y="517" width="0.0867%" height="15" fill="rgb(232,22,54)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="30.0578%" y="501" width="0.0867%" height="15" fill="rgb(229,222,32)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.09%)</title><rect x="30.0578%" y="485" width="0.0867%" height="15" fill="rgb(228,62,29)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.09%)</title><rect x="30.0578%" y="469" width="0.0867%" height="15" fill="rgb(251,103,34)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="30.0578%" y="453" width="0.0867%" height="15" fill="rgb(233,12,30)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="30.0578%" y="437" width="0.0867%" height="15" fill="rgb(238,52,0)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="447.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="30.0578%" y="421" width="0.0867%" height="15" fill="rgb(223,98,5)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="431.50"></text></g><g><title>__rdl_alloc (3 samples, 0.09%)</title><rect x="30.0578%" y="405" width="0.0867%" height="15" fill="rgb(228,75,37)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.09%)</title><rect x="30.0578%" y="389" width="0.0867%" height="15" fill="rgb(205,115,49)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="399.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="30.0578%" y="373" width="0.0867%" height="15" fill="rgb(250,154,43)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="383.50"></text></g><g><title>_int_malloc (3 samples, 0.09%)</title><rect x="30.0578%" y="357" width="0.0867%" height="15" fill="rgb(226,43,29)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="367.50"></text></g><g><title>sysmalloc (3 samples, 0.09%)</title><rect x="30.0578%" y="341" width="0.0867%" height="15" fill="rgb(249,228,39)" fg:x="1040" fg:w="3"/><text x="30.3078%" y="351.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="30.1156%" y="325" width="0.0289%" height="15" fill="rgb(216,79,43)" fg:x="1042" fg:w="1"/><text x="30.3656%" y="335.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (3 samples, 0.09%)</title><rect x="30.2601%" y="501" width="0.0867%" height="15" fill="rgb(228,95,12)" fg:x="1047" fg:w="3"/><text x="30.5101%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="30.3179%" y="485" width="0.0289%" height="15" fill="rgb(249,221,15)" fg:x="1049" fg:w="1"/><text x="30.5679%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="30.3179%" y="469" width="0.0289%" height="15" fill="rgb(233,34,13)" fg:x="1049" fg:w="1"/><text x="30.5679%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="30.3179%" y="453" width="0.0289%" height="15" fill="rgb(214,103,39)" fg:x="1049" fg:w="1"/><text x="30.5679%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="30.3179%" y="437" width="0.0289%" height="15" fill="rgb(251,126,39)" fg:x="1049" fg:w="1"/><text x="30.5679%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (5 samples, 0.14%)</title><rect x="30.2601%" y="517" width="0.1445%" height="15" fill="rgb(214,216,36)" fg:x="1047" fg:w="5"/><text x="30.5101%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="30.3468%" y="501" width="0.0578%" height="15" fill="rgb(220,221,8)" fg:x="1050" fg:w="2"/><text x="30.5968%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (256 samples, 7.40%)</title><rect x="30.4046%" y="517" width="7.3988%" height="15" fill="rgb(240,216,3)" fg:x="1052" fg:w="256"/><text x="30.6546%" y="527.50">project1::..</text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="37.7746%" y="501" width="0.0289%" height="15" fill="rgb(232,218,17)" fg:x="1307" fg:w="1"/><text x="38.0246%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.23%)</title><rect x="53.4971%" y="501" width="0.2312%" height="15" fill="rgb(229,163,45)" fg:x="1851" fg:w="8"/><text x="53.7471%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.23%)</title><rect x="53.4971%" y="485" width="0.2312%" height="15" fill="rgb(231,110,42)" fg:x="1851" fg:w="8"/><text x="53.7471%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.23%)</title><rect x="53.4971%" y="469" width="0.2312%" height="15" fill="rgb(208,170,48)" fg:x="1851" fg:w="8"/><text x="53.7471%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="53.7283%" y="501" width="0.0289%" height="15" fill="rgb(239,116,25)" fg:x="1859" fg:w="1"/><text x="53.9783%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="53.7283%" y="485" width="0.0289%" height="15" fill="rgb(219,200,50)" fg:x="1859" fg:w="1"/><text x="53.9783%" y="495.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="53.7283%" y="469" width="0.0289%" height="15" fill="rgb(245,200,0)" fg:x="1859" fg:w="1"/><text x="53.9783%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (53 samples, 1.53%)</title><rect x="53.7572%" y="469" width="1.5318%" height="15" fill="rgb(245,119,33)" fg:x="1860" fg:w="53"/><text x="54.0072%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (75 samples, 2.17%)</title><rect x="53.7572%" y="501" width="2.1676%" height="15" fill="rgb(231,125,12)" fg:x="1860" fg:w="75"/><text x="54.0072%" y="511.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (75 samples, 2.17%)</title><rect x="53.7572%" y="485" width="2.1676%" height="15" fill="rgb(216,96,41)" fg:x="1860" fg:w="75"/><text x="54.0072%" y="495.50">c..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (22 samples, 0.64%)</title><rect x="55.2890%" y="469" width="0.6358%" height="15" fill="rgb(248,43,45)" fg:x="1913" fg:w="22"/><text x="55.5390%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 1.50%)</title><rect x="55.9249%" y="469" width="1.5029%" height="15" fill="rgb(217,222,7)" fg:x="1935" fg:w="52"/><text x="56.1749%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (14 samples, 0.40%)</title><rect x="57.0231%" y="453" width="0.4046%" height="15" fill="rgb(233,28,6)" fg:x="1973" fg:w="14"/><text x="57.2731%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14 samples, 0.40%)</title><rect x="57.0231%" y="437" width="0.4046%" height="15" fill="rgb(231,218,15)" fg:x="1973" fg:w="14"/><text x="57.2731%" y="447.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (85 samples, 2.46%)</title><rect x="55.9249%" y="501" width="2.4566%" height="15" fill="rgb(226,171,48)" fg:x="1935" fg:w="85"/><text x="56.1749%" y="511.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (85 samples, 2.46%)</title><rect x="55.9249%" y="485" width="2.4566%" height="15" fill="rgb(235,201,9)" fg:x="1935" fg:w="85"/><text x="56.1749%" y="495.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.95%)</title><rect x="57.4277%" y="469" width="0.9538%" height="15" fill="rgb(217,80,15)" fg:x="1987" fg:w="33"/><text x="57.6777%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.95%)</title><rect x="57.4277%" y="453" width="0.9538%" height="15" fill="rgb(219,152,8)" fg:x="1987" fg:w="33"/><text x="57.6777%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.81%)</title><rect x="58.3815%" y="437" width="0.8092%" height="15" fill="rgb(243,107,38)" fg:x="2020" fg:w="28"/><text x="58.6315%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (33 samples, 0.95%)</title><rect x="58.3815%" y="469" width="0.9538%" height="15" fill="rgb(231,17,5)" fg:x="2020" fg:w="33"/><text x="58.6315%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (33 samples, 0.95%)</title><rect x="58.3815%" y="453" width="0.9538%" height="15" fill="rgb(209,25,54)" fg:x="2020" fg:w="33"/><text x="58.6315%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (5 samples, 0.14%)</title><rect x="59.1908%" y="437" width="0.1445%" height="15" fill="rgb(219,0,2)" fg:x="2048" fg:w="5"/><text x="59.4408%" y="447.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (38 samples, 1.10%)</title><rect x="58.3815%" y="501" width="1.0983%" height="15" fill="rgb(246,9,5)" fg:x="2020" fg:w="38"/><text x="58.6315%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (38 samples, 1.10%)</title><rect x="58.3815%" y="485" width="1.0983%" height="15" fill="rgb(226,159,4)" fg:x="2020" fg:w="38"/><text x="58.6315%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.14%)</title><rect x="59.3353%" y="469" width="0.1445%" height="15" fill="rgb(219,175,34)" fg:x="2053" fg:w="5"/><text x="59.5853%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.14%)</title><rect x="59.3353%" y="453" width="0.1445%" height="15" fill="rgb(236,10,46)" fg:x="2053" fg:w="5"/><text x="59.5853%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.06%)</title><rect x="59.4798%" y="469" width="0.0578%" height="15" fill="rgb(240,211,16)" fg:x="2058" fg:w="2"/><text x="59.7298%" y="479.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="437" width="0.0578%" height="15" fill="rgb(205,3,43)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="447.50"></text></g><g><title>exc_page_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="421" width="0.0578%" height="15" fill="rgb(245,7,22)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="431.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="405" width="0.0578%" height="15" fill="rgb(239,132,32)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="415.50"></text></g><g><title>handle_mm_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="389" width="0.0578%" height="15" fill="rgb(228,202,34)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="399.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="373" width="0.0578%" height="15" fill="rgb(254,200,22)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="383.50"></text></g><g><title>handle_pte_fault (2 samples, 0.06%)</title><rect x="67.7168%" y="357" width="0.0578%" height="15" fill="rgb(219,10,39)" fg:x="2343" fg:w="2"/><text x="67.9668%" y="367.50"></text></g><g><title>do_numa_page (1 samples, 0.03%)</title><rect x="67.7457%" y="341" width="0.0289%" height="15" fill="rgb(226,210,39)" fg:x="2344" fg:w="1"/><text x="67.9957%" y="351.50"></text></g><g><title>put_page (1 samples, 0.03%)</title><rect x="67.7457%" y="325" width="0.0289%" height="15" fill="rgb(208,219,16)" fg:x="2344" fg:w="1"/><text x="67.9957%" y="335.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="67.7746%" y="437" width="0.0289%" height="15" fill="rgb(216,158,51)" fg:x="2345" fg:w="1"/><text x="68.0246%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (287 samples, 8.29%)</title><rect x="59.5376%" y="469" width="8.2948%" height="15" fill="rgb(233,14,44)" fg:x="2060" fg:w="287"/><text x="59.7876%" y="479.50">core::option..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (287 samples, 8.29%)</title><rect x="59.5376%" y="453" width="8.2948%" height="15" fill="rgb(237,97,39)" fg:x="2060" fg:w="287"/><text x="59.7876%" y="463.50">slotmap::bas..</text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="67.8035%" y="437" width="0.0289%" height="15" fill="rgb(218,198,43)" fg:x="2346" fg:w="1"/><text x="68.0535%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (23 samples, 0.66%)</title><rect x="67.8324%" y="469" width="0.6647%" height="15" fill="rgb(231,104,20)" fg:x="2347" fg:w="23"/><text x="68.0824%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (23 samples, 0.66%)</title><rect x="67.8324%" y="453" width="0.6647%" height="15" fill="rgb(254,36,13)" fg:x="2347" fg:w="23"/><text x="68.0824%" y="463.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (315 samples, 9.10%)</title><rect x="59.4798%" y="501" width="9.1040%" height="15" fill="rgb(248,14,50)" fg:x="2058" fg:w="315"/><text x="59.7298%" y="511.50">&lt;project1::so..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (315 samples, 9.10%)</title><rect x="59.4798%" y="485" width="9.1040%" height="15" fill="rgb(217,107,29)" fg:x="2058" fg:w="315"/><text x="59.7298%" y="495.50">slotmap::basi..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (3 samples, 0.09%)</title><rect x="68.4971%" y="469" width="0.0867%" height="15" fill="rgb(251,169,33)" fg:x="2370" fg:w="3"/><text x="68.7471%" y="479.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (245 samples, 7.08%)</title><rect x="68.5838%" y="501" width="7.0809%" height="15" fill="rgb(217,108,32)" fg:x="2373" fg:w="245"/><text x="68.8338%" y="511.50">&lt;project1:..</text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="75.6358%" y="485" width="0.0289%" height="15" fill="rgb(219,66,42)" fg:x="2617" fg:w="1"/><text x="75.8858%" y="495.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (1 samples, 0.03%)</title><rect x="75.6647%" y="501" width="0.0289%" height="15" fill="rgb(206,180,7)" fg:x="2618" fg:w="1"/><text x="75.9147%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1 samples, 0.03%)</title><rect x="75.6647%" y="485" width="0.0289%" height="15" fill="rgb(208,226,31)" fg:x="2618" fg:w="1"/><text x="75.9147%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="76.7052%" y="485" width="0.0289%" height="15" fill="rgb(218,26,49)" fg:x="2654" fg:w="1"/><text x="76.9552%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="76.7052%" y="469" width="0.0289%" height="15" fill="rgb(233,197,48)" fg:x="2654" fg:w="1"/><text x="76.9552%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (151 samples, 4.36%)</title><rect x="75.6936%" y="501" width="4.3642%" height="15" fill="rgb(252,181,51)" fg:x="2619" fg:w="151"/><text x="75.9436%" y="511.50">alloc..</text></g><g><title>core::ptr::write (115 samples, 3.32%)</title><rect x="76.7341%" y="485" width="3.3237%" height="15" fill="rgb(253,90,19)" fg:x="2655" fg:w="115"/><text x="76.9841%" y="495.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (2 samples, 0.06%)</title><rect x="80.0578%" y="501" width="0.0578%" height="15" fill="rgb(215,171,30)" fg:x="2770" fg:w="2"/><text x="80.3078%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::le (36 samples, 1.04%)</title><rect x="80.1156%" y="501" width="1.0405%" height="15" fill="rgb(214,222,9)" fg:x="2772" fg:w="36"/><text x="80.3656%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="81.1272%" y="485" width="0.0289%" height="15" fill="rgb(223,3,22)" fg:x="2807" fg:w="1"/><text x="81.3772%" y="495.50"></text></g><g><title>irq_enter_rcu (1 samples, 0.03%)</title><rect x="81.1272%" y="469" width="0.0289%" height="15" fill="rgb(225,196,46)" fg:x="2807" fg:w="1"/><text x="81.3772%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (52 samples, 1.50%)</title><rect x="81.1561%" y="501" width="1.5029%" height="15" fill="rgb(209,110,37)" fg:x="2808" fg:w="52"/><text x="81.4061%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (52 samples, 1.50%)</title><rect x="81.1561%" y="485" width="1.5029%" height="15" fill="rgb(249,89,12)" fg:x="2808" fg:w="52"/><text x="81.4061%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (52 samples, 1.50%)</title><rect x="81.1561%" y="469" width="1.5029%" height="15" fill="rgb(226,27,33)" fg:x="2808" fg:w="52"/><text x="81.4061%" y="479.50"></text></g><g><title>core::intrinsics::copy (23 samples, 0.66%)</title><rect x="82.7746%" y="469" width="0.6647%" height="15" fill="rgb(213,82,22)" fg:x="2864" fg:w="23"/><text x="83.0246%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (34 samples, 0.98%)</title><rect x="82.6590%" y="501" width="0.9827%" height="15" fill="rgb(248,140,0)" fg:x="2860" fg:w="34"/><text x="82.9090%" y="511.50"></text></g><g><title>core::ptr::swap (30 samples, 0.87%)</title><rect x="82.7746%" y="485" width="0.8671%" height="15" fill="rgb(228,106,3)" fg:x="2864" fg:w="30"/><text x="83.0246%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.20%)</title><rect x="83.4393%" y="469" width="0.2023%" height="15" fill="rgb(209,23,37)" fg:x="2887" fg:w="7"/><text x="83.6893%" y="479.50"></text></g><g><title>log::__private_api::log (1 samples, 0.03%)</title><rect x="83.6416%" y="501" width="0.0289%" height="15" fill="rgb(241,93,50)" fg:x="2894" fg:w="1"/><text x="83.8916%" y="511.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (1 samples, 0.03%)</title><rect x="83.6416%" y="485" width="0.0289%" height="15" fill="rgb(253,46,43)" fg:x="2894" fg:w="1"/><text x="83.8916%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (150 samples, 4.34%)</title><rect x="83.6705%" y="469" width="4.3353%" height="15" fill="rgb(226,206,43)" fg:x="2895" fg:w="150"/><text x="83.9205%" y="479.50">core:..</text></g><g><title>log::max_level (152 samples, 4.39%)</title><rect x="83.6705%" y="501" width="4.3931%" height="15" fill="rgb(217,54,7)" fg:x="2895" fg:w="152"/><text x="83.9205%" y="511.50">log::..</text></g><g><title>core::sync::atomic::AtomicUsize::load (152 samples, 4.39%)</title><rect x="83.6705%" y="485" width="4.3931%" height="15" fill="rgb(223,5,52)" fg:x="2895" fg:w="152"/><text x="83.9205%" y="495.50">core:..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="88.0058%" y="469" width="0.0578%" height="15" fill="rgb(206,52,46)" fg:x="3045" fg:w="2"/><text x="88.2558%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.3815%" y="485" width="0.0289%" height="15" fill="rgb(253,136,11)" fg:x="3058" fg:w="1"/><text x="88.6315%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.3815%" y="469" width="0.0289%" height="15" fill="rgb(208,106,33)" fg:x="3058" fg:w="1"/><text x="88.6315%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="88.3815%" y="453" width="0.0289%" height="15" fill="rgb(206,54,4)" fg:x="3058" fg:w="1"/><text x="88.6315%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::le (3 samples, 0.09%)</title><rect x="88.4104%" y="485" width="0.0867%" height="15" fill="rgb(213,3,15)" fg:x="3059" fg:w="3"/><text x="88.6604%" y="495.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (2 samples, 0.06%)</title><rect x="88.4393%" y="469" width="0.0578%" height="15" fill="rgb(252,211,39)" fg:x="3060" fg:w="2"/><text x="88.6893%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.06%)</title><rect x="88.4393%" y="453" width="0.0578%" height="15" fill="rgb(223,6,36)" fg:x="3060" fg:w="2"/><text x="88.6893%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.09%)</title><rect x="88.4971%" y="453" width="0.0867%" height="15" fill="rgb(252,169,45)" fg:x="3062" fg:w="3"/><text x="88.7471%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.09%)</title><rect x="88.4971%" y="437" width="0.0867%" height="15" fill="rgb(212,48,26)" fg:x="3062" fg:w="3"/><text x="88.7471%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (20 samples, 0.58%)</title><rect x="88.0636%" y="501" width="0.5780%" height="15" fill="rgb(251,102,48)" fg:x="3047" fg:w="20"/><text x="88.3136%" y="511.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (5 samples, 0.14%)</title><rect x="88.4971%" y="485" width="0.1445%" height="15" fill="rgb(243,208,16)" fg:x="3062" fg:w="5"/><text x="88.7471%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.14%)</title><rect x="88.4971%" y="469" width="0.1445%" height="15" fill="rgb(219,96,24)" fg:x="3062" fg:w="5"/><text x="88.7471%" y="479.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="88.5838%" y="453" width="0.0578%" height="15" fill="rgb(219,33,29)" fg:x="3065" fg:w="2"/><text x="88.8338%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2 samples, 0.06%)</title><rect x="88.6416%" y="501" width="0.0578%" height="15" fill="rgb(223,176,5)" fg:x="3067" fg:w="2"/><text x="88.8916%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.17%)</title><rect x="88.6994%" y="469" width="0.1734%" height="15" fill="rgb(228,140,14)" fg:x="3069" fg:w="6"/><text x="88.9494%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (36 samples, 1.04%)</title><rect x="88.6994%" y="485" width="1.0405%" height="15" fill="rgb(217,179,31)" fg:x="3069" fg:w="36"/><text x="88.9494%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (30 samples, 0.87%)</title><rect x="88.8728%" y="469" width="0.8671%" height="15" fill="rgb(230,9,30)" fg:x="3075" fg:w="30"/><text x="89.1228%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.87%)</title><rect x="88.8728%" y="453" width="0.8671%" height="15" fill="rgb(230,136,20)" fg:x="3075" fg:w="30"/><text x="89.1228%" y="463.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="89.7110%" y="437" width="0.0289%" height="15" fill="rgb(215,210,22)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="89.7110%" y="421" width="0.0289%" height="15" fill="rgb(218,43,5)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="89.7110%" y="405" width="0.0289%" height="15" fill="rgb(216,11,5)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="415.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="89.7110%" y="389" width="0.0289%" height="15" fill="rgb(209,82,29)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="399.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="89.7110%" y="373" width="0.0289%" height="15" fill="rgb(244,115,12)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="383.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="89.7110%" y="357" width="0.0289%" height="15" fill="rgb(222,82,18)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="367.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="89.7110%" y="341" width="0.0289%" height="15" fill="rgb(249,227,8)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="351.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="89.7110%" y="325" width="0.0289%" height="15" fill="rgb(253,141,45)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="335.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="89.7110%" y="309" width="0.0289%" height="15" fill="rgb(234,184,4)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="319.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="89.7110%" y="293" width="0.0289%" height="15" fill="rgb(218,194,23)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="303.50"></text></g><g><title>hrtimer_active (1 samples, 0.03%)</title><rect x="89.7110%" y="277" width="0.0289%" height="15" fill="rgb(235,66,41)" fg:x="3104" fg:w="1"/><text x="89.9610%" y="287.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (108 samples, 3.12%)</title><rect x="89.7399%" y="469" width="3.1214%" height="15" fill="rgb(245,217,1)" fg:x="3105" fg:w="108"/><text x="89.9899%" y="479.50">&lt;pr..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (178 samples, 5.14%)</title><rect x="89.7399%" y="485" width="5.1445%" height="15" fill="rgb(229,91,1)" fg:x="3105" fg:w="178"/><text x="89.9899%" y="495.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (70 samples, 2.02%)</title><rect x="92.8613%" y="469" width="2.0231%" height="15" fill="rgb(207,101,30)" fg:x="3213" fg:w="70"/><text x="93.1113%" y="479.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (9 samples, 0.26%)</title><rect x="94.8844%" y="485" width="0.2601%" height="15" fill="rgb(223,82,49)" fg:x="3283" fg:w="9"/><text x="95.1344%" y="495.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (73 samples, 2.11%)</title><rect x="95.1445%" y="469" width="2.1098%" height="15" fill="rgb(218,167,17)" fg:x="3292" fg:w="73"/><text x="95.3945%" y="479.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (309 samples, 8.93%)</title><rect x="88.6994%" y="501" width="8.9306%" height="15" fill="rgb(208,103,14)" fg:x="3069" fg:w="309"/><text x="88.9494%" y="511.50">project1::sol..</text></g><g><title>project1::solver::types::Lit::var_idx (86 samples, 2.49%)</title><rect x="95.1445%" y="485" width="2.4855%" height="15" fill="rgb(238,20,8)" fg:x="3292" fg:w="86"/><text x="95.3945%" y="495.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (13 samples, 0.38%)</title><rect x="97.2543%" y="469" width="0.3757%" height="15" fill="rgb(218,80,54)" fg:x="3365" fg:w="13"/><text x="97.5043%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.20%)</title><rect x="97.6301%" y="469" width="0.2023%" height="15" fill="rgb(240,144,17)" fg:x="3378" fg:w="7"/><text x="97.8801%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.09%)</title><rect x="97.7457%" y="453" width="0.0867%" height="15" fill="rgb(245,27,50)" fg:x="3382" fg:w="3"/><text x="97.9957%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.09%)</title><rect x="97.7457%" y="437" width="0.0867%" height="15" fill="rgb(251,51,7)" fg:x="3382" fg:w="3"/><text x="97.9957%" y="447.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (20 samples, 0.58%)</title><rect x="97.6301%" y="501" width="0.5780%" height="15" fill="rgb(245,217,29)" fg:x="3378" fg:w="20"/><text x="97.8801%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (20 samples, 0.58%)</title><rect x="97.6301%" y="485" width="0.5780%" height="15" fill="rgb(221,176,29)" fg:x="3378" fg:w="20"/><text x="97.8801%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.38%)</title><rect x="97.8324%" y="469" width="0.3757%" height="15" fill="rgb(212,180,24)" fg:x="3385" fg:w="13"/><text x="98.0824%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.38%)</title><rect x="97.8324%" y="453" width="0.3757%" height="15" fill="rgb(254,24,2)" fg:x="3385" fg:w="13"/><text x="98.0824%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="98.2659%" y="485" width="0.0867%" height="15" fill="rgb(230,100,2)" fg:x="3400" fg:w="3"/><text x="98.5159%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.09%)</title><rect x="98.2659%" y="469" width="0.0867%" height="15" fill="rgb(219,142,25)" fg:x="3400" fg:w="3"/><text x="98.5159%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (9 samples, 0.26%)</title><rect x="98.2081%" y="501" width="0.2601%" height="15" fill="rgb(240,73,43)" fg:x="3398" fg:w="9"/><text x="98.4581%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.12%)</title><rect x="98.3526%" y="485" width="0.1156%" height="15" fill="rgb(214,114,15)" fg:x="3403" fg:w="4"/><text x="98.6026%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (4 samples, 0.12%)</title><rect x="98.3526%" y="469" width="0.1156%" height="15" fill="rgb(207,130,4)" fg:x="3403" fg:w="4"/><text x="98.6026%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.12%)</title><rect x="98.3526%" y="453" width="0.1156%" height="15" fill="rgb(221,25,40)" fg:x="3403" fg:w="4"/><text x="98.6026%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.09%)</title><rect x="98.3815%" y="437" width="0.0867%" height="15" fill="rgb(241,184,7)" fg:x="3404" fg:w="3"/><text x="98.6315%" y="447.50"></text></g><g><title>core::ptr::read (6 samples, 0.17%)</title><rect x="98.4682%" y="453" width="0.1734%" height="15" fill="rgb(235,159,4)" fg:x="3407" fg:w="6"/><text x="98.7182%" y="463.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (8 samples, 0.23%)</title><rect x="98.4682%" y="501" width="0.2312%" height="15" fill="rgb(214,87,48)" fg:x="3407" fg:w="8"/><text x="98.7182%" y="511.50"></text></g><g><title>core::mem::take (8 samples, 0.23%)</title><rect x="98.4682%" y="485" width="0.2312%" height="15" fill="rgb(246,198,24)" fg:x="3407" fg:w="8"/><text x="98.7182%" y="495.50"></text></g><g><title>core::mem::replace (8 samples, 0.23%)</title><rect x="98.4682%" y="469" width="0.2312%" height="15" fill="rgb(209,66,40)" fg:x="3407" fg:w="8"/><text x="98.7182%" y="479.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="98.6416%" y="453" width="0.0578%" height="15" fill="rgb(233,147,39)" fg:x="3413" fg:w="2"/><text x="98.8916%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (2,388 samples, 69.02%)</title><rect x="30.1445%" y="533" width="69.0173%" height="15" fill="rgb(231,145,52)" fg:x="1043" fg:w="2388"/><text x="30.3945%" y="543.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (2,123 samples, 61.36%)</title><rect x="37.8035%" y="517" width="61.3584%" height="15" fill="rgb(206,20,26)" fg:x="1308" fg:w="2123"/><text x="38.0535%" y="527.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::watch_list::Watcher::new (16 samples, 0.46%)</title><rect x="98.6994%" y="501" width="0.4624%" height="15" fill="rgb(238,220,4)" fg:x="3415" fg:w="16"/><text x="98.9494%" y="511.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (2 samples, 0.06%)</title><rect x="99.1618%" y="533" width="0.0578%" height="15" fill="rgb(252,195,42)" fg:x="3431" fg:w="2"/><text x="99.4118%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_constraints (1 samples, 0.03%)</title><rect x="99.2197%" y="517" width="0.0289%" height="15" fill="rgb(209,10,6)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_clause (1 samples, 0.03%)</title><rect x="99.2197%" y="501" width="0.0289%" height="15" fill="rgb(229,3,52)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="511.50"></text></g><g><title>project1::solver::watch_list::WatchList::remove_watcher (1 samples, 0.03%)</title><rect x="99.2197%" y="485" width="0.0289%" height="15" fill="rgb(253,49,37)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="495.50"></text></g><g><title>project1::solver::util::remove (1 samples, 0.03%)</title><rect x="99.2197%" y="469" width="0.0289%" height="15" fill="rgb(240,103,49)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="99.2197%" y="453" width="0.0289%" height="15" fill="rgb(250,182,30)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="463.50"></text></g><g><title>project1::solver::util::remove::{{closure}} (1 samples, 0.03%)</title><rect x="99.2197%" y="437" width="0.0289%" height="15" fill="rgb(248,8,30)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="447.50"></text></g><g><title>&lt;project1::solver::watch_list::Watcher as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="99.2197%" y="421" width="0.0289%" height="15" fill="rgb(237,120,30)" fg:x="3433" fg:w="1"/><text x="99.4697%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::simplify (2 samples, 0.06%)</title><rect x="99.2197%" y="533" width="0.0578%" height="15" fill="rgb(221,146,34)" fg:x="3433" fg:w="2"/><text x="99.4697%" y="543.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_satisfied_learnts (1 samples, 0.03%)</title><rect x="99.2486%" y="517" width="0.0289%" height="15" fill="rgb(242,55,13)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="527.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::remove_clause (1 samples, 0.03%)</title><rect x="99.2486%" y="501" width="0.0289%" height="15" fill="rgb(242,112,31)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="511.50"></text></g><g><title>project1::solver::watch_list::WatchList::remove_watcher (1 samples, 0.03%)</title><rect x="99.2486%" y="485" width="0.0289%" height="15" fill="rgb(249,192,27)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="495.50"></text></g><g><title>project1::solver::util::remove (1 samples, 0.03%)</title><rect x="99.2486%" y="469" width="0.0289%" height="15" fill="rgb(208,204,44)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.03%)</title><rect x="99.2486%" y="453" width="0.0289%" height="15" fill="rgb(208,93,54)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="463.50"></text></g><g><title>project1::solver::util::remove::{{closure}} (1 samples, 0.03%)</title><rect x="99.2486%" y="437" width="0.0289%" height="15" fill="rgb(242,1,31)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="447.50"></text></g><g><title>&lt;project1::solver::watch_list::Watcher as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="99.2486%" y="421" width="0.0289%" height="15" fill="rgb(241,83,25)" fg:x="3434" fg:w="1"/><text x="99.4986%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (8 samples, 0.23%)</title><rect x="99.2775%" y="533" width="0.2312%" height="15" fill="rgb(205,169,50)" fg:x="3435" fg:w="8"/><text x="99.5275%" y="543.50"></text></g><g><title>std::panic::catch_unwind (3,414 samples, 98.67%)</title><rect x="0.8960%" y="677" width="98.6705%" height="15" fill="rgb(239,186,37)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,414 samples, 98.67%)</title><rect x="0.8960%" y="661" width="98.6705%" height="15" fill="rgb(205,221,10)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,414 samples, 98.67%)</title><rect x="0.8960%" y="645" width="98.6705%" height="15" fill="rgb(218,196,15)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="655.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,414 samples, 98.67%)</title><rect x="0.8960%" y="629" width="98.6705%" height="15" fill="rgb(218,196,35)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="639.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,414 samples, 98.67%)</title><rect x="0.8960%" y="613" width="98.6705%" height="15" fill="rgb(233,63,24)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="623.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,414 samples, 98.67%)</title><rect x="0.8960%" y="597" width="98.6705%" height="15" fill="rgb(225,8,4)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (3,414 samples, 98.67%)</title><rect x="0.8960%" y="581" width="98.6705%" height="15" fill="rgb(234,105,35)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="591.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (3,414 samples, 98.67%)</title><rect x="0.8960%" y="565" width="98.6705%" height="15" fill="rgb(236,21,32)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="575.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (3,414 samples, 98.67%)</title><rect x="0.8960%" y="549" width="98.6705%" height="15" fill="rgb(228,109,6)" fg:x="31" fg:w="3414"/><text x="1.1460%" y="559.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (2 samples, 0.06%)</title><rect x="99.5087%" y="533" width="0.0578%" height="15" fill="rgb(229,215,31)" fg:x="3443" fg:w="2"/><text x="99.7587%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="99.5087%" y="517" width="0.0578%" height="15" fill="rgb(221,52,54)" fg:x="3443" fg:w="2"/><text x="99.7587%" y="527.50"></text></g><g><title>core::ptr::write (2 samples, 0.06%)</title><rect x="99.5087%" y="501" width="0.0578%" height="15" fill="rgb(252,129,43)" fg:x="3443" fg:w="2"/><text x="99.7587%" y="511.50"></text></g><g><title>error_entry (2 samples, 0.06%)</title><rect x="99.5087%" y="485" width="0.0578%" height="15" fill="rgb(248,183,27)" fg:x="3443" fg:w="2"/><text x="99.7587%" y="495.50"></text></g><g><title>__clone3 (3,415 samples, 98.70%)</title><rect x="0.8960%" y="789" width="98.6994%" height="15" fill="rgb(250,0,22)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="799.50">__clone3</text></g><g><title>start_thread (3,415 samples, 98.70%)</title><rect x="0.8960%" y="773" width="98.6994%" height="15" fill="rgb(213,166,10)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,415 samples, 98.70%)</title><rect x="0.8960%" y="757" width="98.6994%" height="15" fill="rgb(207,163,36)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="767.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,415 samples, 98.70%)</title><rect x="0.8960%" y="741" width="98.6994%" height="15" fill="rgb(208,122,22)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="751.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,415 samples, 98.70%)</title><rect x="0.8960%" y="725" width="98.6994%" height="15" fill="rgb(207,104,49)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="735.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,415 samples, 98.70%)</title><rect x="0.8960%" y="709" width="98.6994%" height="15" fill="rgb(248,211,50)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="719.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,415 samples, 98.70%)</title><rect x="0.8960%" y="693" width="98.6994%" height="15" fill="rgb(217,13,45)" fg:x="31" fg:w="3415"/><text x="1.1460%" y="703.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.03%)</title><rect x="99.5665%" y="677" width="0.0289%" height="15" fill="rgb(211,216,49)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="687.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.5665%" y="661" width="0.0289%" height="15" fill="rgb(221,58,53)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.5665%" y="645" width="0.0289%" height="15" fill="rgb(220,112,41)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="655.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.5665%" y="629" width="0.0289%" height="15" fill="rgb(236,38,28)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="639.50"></text></g><g><title>tcache_init (1 samples, 0.03%)</title><rect x="99.5665%" y="613" width="0.0289%" height="15" fill="rgb(227,195,22)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="623.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.5665%" y="597" width="0.0289%" height="15" fill="rgb(214,55,33)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="607.50"></text></g><g><title>arena_get2 (1 samples, 0.03%)</title><rect x="99.5665%" y="581" width="0.0289%" height="15" fill="rgb(248,80,13)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="591.50"></text></g><g><title>_int_new_arena (1 samples, 0.03%)</title><rect x="99.5665%" y="565" width="0.0289%" height="15" fill="rgb(238,52,6)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="575.50"></text></g><g><title>new_heap (1 samples, 0.03%)</title><rect x="99.5665%" y="549" width="0.0289%" height="15" fill="rgb(224,198,47)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="559.50"></text></g><g><title>alloc_new_heap (1 samples, 0.03%)</title><rect x="99.5665%" y="533" width="0.0289%" height="15" fill="rgb(233,171,20)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="543.50"></text></g><g><title>__GI___munmap (1 samples, 0.03%)</title><rect x="99.5665%" y="517" width="0.0289%" height="15" fill="rgb(241,30,25)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.5665%" y="501" width="0.0289%" height="15" fill="rgb(207,171,38)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.5665%" y="485" width="0.0289%" height="15" fill="rgb(234,70,1)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="495.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.03%)</title><rect x="99.5665%" y="469" width="0.0289%" height="15" fill="rgb(232,178,18)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="479.50"></text></g><g><title>__vm_munmap (1 samples, 0.03%)</title><rect x="99.5665%" y="453" width="0.0289%" height="15" fill="rgb(241,78,40)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="463.50"></text></g><g><title>__do_munmap (1 samples, 0.03%)</title><rect x="99.5665%" y="437" width="0.0289%" height="15" fill="rgb(222,35,25)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="447.50"></text></g><g><title>unmap_region (1 samples, 0.03%)</title><rect x="99.5665%" y="421" width="0.0289%" height="15" fill="rgb(207,92,16)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="431.50"></text></g><g><title>lru_add_drain (1 samples, 0.03%)</title><rect x="99.5665%" y="405" width="0.0289%" height="15" fill="rgb(216,59,51)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="415.50"></text></g><g><title>lru_add_drain_cpu (1 samples, 0.03%)</title><rect x="99.5665%" y="389" width="0.0289%" height="15" fill="rgb(213,80,28)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="399.50"></text></g><g><title>__pagevec_lru_add (1 samples, 0.03%)</title><rect x="99.5665%" y="373" width="0.0289%" height="15" fill="rgb(220,93,7)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="383.50"></text></g><g><title>folio_lruvec_lock_irqsave (1 samples, 0.03%)</title><rect x="99.5665%" y="357" width="0.0289%" height="15" fill="rgb(225,24,44)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="367.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="99.5665%" y="341" width="0.0289%" height="15" fill="rgb(243,74,40)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="351.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="99.5665%" y="325" width="0.0289%" height="15" fill="rgb(228,39,7)" fg:x="3445" fg:w="1"/><text x="99.8165%" y="335.50"></text></g><g><title>__irqentry_text_end (1 samples, 0.03%)</title><rect x="99.5954%" y="789" width="0.0289%" height="15" fill="rgb(227,79,8)" fg:x="3446" fg:w="1"/><text x="99.8454%" y="799.50"></text></g><g><title>_start (1 samples, 0.03%)</title><rect x="99.6243%" y="789" width="0.0289%" height="15" fill="rgb(236,58,11)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="799.50"></text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.6243%" y="773" width="0.0289%" height="15" fill="rgb(249,63,35)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="783.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.6243%" y="757" width="0.0289%" height="15" fill="rgb(252,114,16)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="767.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.6243%" y="741" width="0.0289%" height="15" fill="rgb(254,151,24)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="751.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.6243%" y="725" width="0.0289%" height="15" fill="rgb(253,54,39)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="735.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.6243%" y="709" width="0.0289%" height="15" fill="rgb(243,25,45)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="719.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.6243%" y="693" width="0.0289%" height="15" fill="rgb(234,134,9)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="703.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.6243%" y="677" width="0.0289%" height="15" fill="rgb(227,166,31)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="687.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.6243%" y="661" width="0.0289%" height="15" fill="rgb(245,143,41)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="671.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.03%)</title><rect x="99.6243%" y="645" width="0.0289%" height="15" fill="rgb(238,181,32)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="655.50"></text></g><g><title>_dl_map_segments (1 samples, 0.03%)</title><rect x="99.6243%" y="629" width="0.0289%" height="15" fill="rgb(224,113,18)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="639.50"></text></g><g><title>__mprotect (1 samples, 0.03%)</title><rect x="99.6243%" y="613" width="0.0289%" height="15" fill="rgb(240,229,28)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.6243%" y="597" width="0.0289%" height="15" fill="rgb(250,185,3)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.6243%" y="581" width="0.0289%" height="15" fill="rgb(212,59,25)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="591.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.03%)</title><rect x="99.6243%" y="565" width="0.0289%" height="15" fill="rgb(221,87,20)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="575.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.03%)</title><rect x="99.6243%" y="549" width="0.0289%" height="15" fill="rgb(213,74,28)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="559.50"></text></g><g><title>mprotect_fixup (1 samples, 0.03%)</title><rect x="99.6243%" y="533" width="0.0289%" height="15" fill="rgb(224,132,34)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="543.50"></text></g><g><title>change_protection (1 samples, 0.03%)</title><rect x="99.6243%" y="517" width="0.0289%" height="15" fill="rgb(222,101,24)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="527.50"></text></g><g><title>change_protection_range (1 samples, 0.03%)</title><rect x="99.6243%" y="501" width="0.0289%" height="15" fill="rgb(254,142,4)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="511.50"></text></g><g><title>change_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="99.6243%" y="485" width="0.0289%" height="15" fill="rgb(230,229,49)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="495.50"></text></g><g><title>change_pte_range (1 samples, 0.03%)</title><rect x="99.6243%" y="469" width="0.0289%" height="15" fill="rgb(238,70,47)" fg:x="3447" fg:w="1"/><text x="99.8743%" y="479.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.06%)</title><rect x="99.6532%" y="789" width="0.0578%" height="15" fill="rgb(231,160,17)" fg:x="3448" fg:w="2"/><text x="99.9032%" y="799.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.7110%" y="757" width="0.0289%" height="15" fill="rgb(218,68,53)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="767.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.7110%" y="741" width="0.0289%" height="15" fill="rgb(236,111,10)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="751.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.7110%" y="725" width="0.0289%" height="15" fill="rgb(224,34,41)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="735.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="99.7110%" y="709" width="0.0289%" height="15" fill="rgb(241,118,19)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="719.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="99.7110%" y="693" width="0.0289%" height="15" fill="rgb(238,129,25)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="703.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="99.7110%" y="677" width="0.0289%" height="15" fill="rgb(238,22,31)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="687.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.7110%" y="661" width="0.0289%" height="15" fill="rgb(222,174,48)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="671.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="99.7110%" y="645" width="0.0289%" height="15" fill="rgb(206,152,40)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="655.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="99.7110%" y="629" width="0.0289%" height="15" fill="rgb(218,99,54)" fg:x="3450" fg:w="1"/><text x="99.9610%" y="639.50"></text></g><g><title>mm_update_next_owner (1 samples, 0.03%)</title><rect x="99.7399%" y="693" width="0.0289%" height="15" fill="rgb(220,174,26)" fg:x="3451" fg:w="1"/><text x="99.9899%" y="703.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.09%)</title><rect x="99.7110%" y="789" width="0.0867%" height="15" fill="rgb(245,116,9)" fg:x="3450" fg:w="3"/><text x="99.9610%" y="799.50"></text></g><g><title>do_syscall_64 (3 samples, 0.09%)</title><rect x="99.7110%" y="773" width="0.0867%" height="15" fill="rgb(209,72,35)" fg:x="3450" fg:w="3"/><text x="99.9610%" y="783.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.06%)</title><rect x="99.7399%" y="757" width="0.0578%" height="15" fill="rgb(226,126,21)" fg:x="3451" fg:w="2"/><text x="99.9899%" y="767.50"></text></g><g><title>do_group_exit (2 samples, 0.06%)</title><rect x="99.7399%" y="741" width="0.0578%" height="15" fill="rgb(227,192,1)" fg:x="3451" fg:w="2"/><text x="99.9899%" y="751.50"></text></g><g><title>do_exit (2 samples, 0.06%)</title><rect x="99.7399%" y="725" width="0.0578%" height="15" fill="rgb(237,180,29)" fg:x="3451" fg:w="2"/><text x="99.9899%" y="735.50"></text></g><g><title>exit_mm (2 samples, 0.06%)</title><rect x="99.7399%" y="709" width="0.0578%" height="15" fill="rgb(230,197,35)" fg:x="3451" fg:w="2"/><text x="99.9899%" y="719.50"></text></g><g><title>mmput (1 samples, 0.03%)</title><rect x="99.7688%" y="693" width="0.0289%" height="15" fill="rgb(246,193,31)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="703.50"></text></g><g><title>exit_mmap (1 samples, 0.03%)</title><rect x="99.7688%" y="677" width="0.0289%" height="15" fill="rgb(241,36,4)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="687.50"></text></g><g><title>unmap_vmas (1 samples, 0.03%)</title><rect x="99.7688%" y="661" width="0.0289%" height="15" fill="rgb(241,130,17)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="671.50"></text></g><g><title>unmap_single_vma (1 samples, 0.03%)</title><rect x="99.7688%" y="645" width="0.0289%" height="15" fill="rgb(206,137,32)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="655.50"></text></g><g><title>unmap_page_range (1 samples, 0.03%)</title><rect x="99.7688%" y="629" width="0.0289%" height="15" fill="rgb(237,228,51)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="639.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="99.7688%" y="613" width="0.0289%" height="15" fill="rgb(243,6,42)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="623.50"></text></g><g><title>zap_pte_range (1 samples, 0.03%)</title><rect x="99.7688%" y="597" width="0.0289%" height="15" fill="rgb(251,74,28)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="607.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.03%)</title><rect x="99.7688%" y="581" width="0.0289%" height="15" fill="rgb(218,20,49)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="591.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="99.7688%" y="565" width="0.0289%" height="15" fill="rgb(238,28,14)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="575.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.03%)</title><rect x="99.7688%" y="549" width="0.0289%" height="15" fill="rgb(229,40,46)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="559.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="99.7688%" y="533" width="0.0289%" height="15" fill="rgb(244,195,20)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="543.50"></text></g><g><title>free_unref_page_list (1 samples, 0.03%)</title><rect x="99.7688%" y="517" width="0.0289%" height="15" fill="rgb(253,56,35)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="527.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.03%)</title><rect x="99.7688%" y="501" width="0.0289%" height="15" fill="rgb(210,149,44)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="511.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.03%)</title><rect x="99.7688%" y="485" width="0.0289%" height="15" fill="rgb(240,135,12)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="495.50"></text></g><g><title>__free_one_page (1 samples, 0.03%)</title><rect x="99.7688%" y="469" width="0.0289%" height="15" fill="rgb(251,24,50)" fg:x="3452" fg:w="1"/><text x="100.0188%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="99.7977%" y="789" width="0.0289%" height="15" fill="rgb(243,200,47)" fg:x="3453" fg:w="1"/><text x="100.0477%" y="799.50"></text></g><g><title>calculate_sigpending (1 samples, 0.03%)</title><rect x="99.8266%" y="757" width="0.0289%" height="15" fill="rgb(224,166,26)" fg:x="3454" fg:w="1"/><text x="100.0766%" y="767.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.03%)</title><rect x="99.8266%" y="741" width="0.0289%" height="15" fill="rgb(233,0,47)" fg:x="3454" fg:w="1"/><text x="100.0766%" y="751.50"></text></g><g><title>all (3,460 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(253,80,5)" fg:x="0" fg:w="3460"/><text x="0.2500%" y="831.50"></text></g><g><title>project1 (3,454 samples, 99.83%)</title><rect x="0.1734%" y="805" width="99.8266%" height="15" fill="rgb(214,133,25)" fg:x="6" fg:w="3454"/><text x="0.4234%" y="815.50">project1</text></g><g><title>ret_from_fork (6 samples, 0.17%)</title><rect x="99.8266%" y="789" width="0.1734%" height="15" fill="rgb(209,27,14)" fg:x="3454" fg:w="6"/><text x="100.0766%" y="799.50"></text></g><g><title>schedule_tail (6 samples, 0.17%)</title><rect x="99.8266%" y="773" width="0.1734%" height="15" fill="rgb(219,102,51)" fg:x="3454" fg:w="6"/><text x="100.0766%" y="783.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.14%)</title><rect x="99.8555%" y="757" width="0.1445%" height="15" fill="rgb(237,18,16)" fg:x="3455" fg:w="5"/><text x="100.1055%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.14%)</title><rect x="99.8555%" y="741" width="0.1445%" height="15" fill="rgb(241,85,17)" fg:x="3455" fg:w="5"/><text x="100.1055%" y="751.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.14%)</title><rect x="99.8555%" y="725" width="0.1445%" height="15" fill="rgb(236,90,42)" fg:x="3455" fg:w="5"/><text x="100.1055%" y="735.50"></text></g><g><title>intel_tfa_pmu_enable_all (5 samples, 0.14%)</title><rect x="99.8555%" y="709" width="0.1445%" height="15" fill="rgb(249,57,21)" fg:x="3455" fg:w="5"/><text x="100.1055%" y="719.50"></text></g><g><title>native_write_msr (5 samples, 0.14%)</title><rect x="99.8555%" y="693" width="0.1445%" height="15" fill="rgb(243,12,36)" fg:x="3455" fg:w="5"/><text x="100.1055%" y="703.50"></text></g></svg></svg>