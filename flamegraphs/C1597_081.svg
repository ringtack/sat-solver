<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="198812"><g><title>[[heap]] (75 samples, 0.04%)</title><rect x="0.0030%" y="725" width="0.0377%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="75"/><text x="0.2530%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (72 samples, 0.04%)</title><rect x="0.0045%" y="709" width="0.0362%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="72"/><text x="0.2545%" y="719.50"></text></g><g><title>__GI___libc_free (23 samples, 0.01%)</title><rect x="0.0407%" y="709" width="0.0116%" height="15" fill="rgb(221,193,54)" fg:x="81" fg:w="23"/><text x="0.2907%" y="719.50"></text></g><g><title>_int_free (22 samples, 0.01%)</title><rect x="0.0548%" y="709" width="0.0111%" height="15" fill="rgb(248,212,6)" fg:x="109" fg:w="22"/><text x="0.3048%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (205 samples, 0.10%)</title><rect x="0.0719%" y="709" width="0.1031%" height="15" fill="rgb(208,68,35)" fg:x="143" fg:w="205"/><text x="0.3219%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (180 samples, 0.09%)</title><rect x="0.0845%" y="693" width="0.0905%" height="15" fill="rgb(232,128,0)" fg:x="168" fg:w="180"/><text x="0.3345%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (180 samples, 0.09%)</title><rect x="0.0845%" y="677" width="0.0905%" height="15" fill="rgb(207,160,47)" fg:x="168" fg:w="180"/><text x="0.3345%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (180 samples, 0.09%)</title><rect x="0.0845%" y="661" width="0.0905%" height="15" fill="rgb(228,23,34)" fg:x="168" fg:w="180"/><text x="0.3345%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (180 samples, 0.09%)</title><rect x="0.0845%" y="645" width="0.0905%" height="15" fill="rgb(218,30,26)" fg:x="168" fg:w="180"/><text x="0.3345%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.01%)</title><rect x="0.1750%" y="709" width="0.0111%" height="15" fill="rgb(220,122,19)" fg:x="348" fg:w="22"/><text x="0.4250%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (85 samples, 0.04%)</title><rect x="0.1901%" y="677" width="0.0428%" height="15" fill="rgb(250,228,42)" fg:x="378" fg:w="85"/><text x="0.4401%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (85 samples, 0.04%)</title><rect x="0.1901%" y="661" width="0.0428%" height="15" fill="rgb(240,193,28)" fg:x="378" fg:w="85"/><text x="0.4401%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (105 samples, 0.05%)</title><rect x="0.1861%" y="709" width="0.0528%" height="15" fill="rgb(216,20,37)" fg:x="370" fg:w="105"/><text x="0.4361%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (97 samples, 0.05%)</title><rect x="0.1901%" y="693" width="0.0488%" height="15" fill="rgb(206,188,39)" fg:x="378" fg:w="97"/><text x="0.4401%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (74 samples, 0.04%)</title><rect x="0.2389%" y="709" width="0.0372%" height="15" fill="rgb(217,207,13)" fg:x="475" fg:w="74"/><text x="0.4889%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (27 samples, 0.01%)</title><rect x="0.3038%" y="677" width="0.0136%" height="15" fill="rgb(231,73,38)" fg:x="604" fg:w="27"/><text x="0.5538%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (21 samples, 0.01%)</title><rect x="0.3068%" y="661" width="0.0106%" height="15" fill="rgb(225,20,46)" fg:x="610" fg:w="21"/><text x="0.5568%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (21 samples, 0.01%)</title><rect x="0.3068%" y="645" width="0.0106%" height="15" fill="rgb(210,31,41)" fg:x="610" fg:w="21"/><text x="0.5568%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (78 samples, 0.04%)</title><rect x="0.2787%" y="709" width="0.0392%" height="15" fill="rgb(221,200,47)" fg:x="554" fg:w="78"/><text x="0.5287%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (67 samples, 0.03%)</title><rect x="0.2842%" y="693" width="0.0337%" height="15" fill="rgb(226,26,5)" fg:x="565" fg:w="67"/><text x="0.5342%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (64 samples, 0.03%)</title><rect x="0.3184%" y="709" width="0.0322%" height="15" fill="rgb(249,33,26)" fg:x="633" fg:w="64"/><text x="0.5684%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (239 samples, 0.12%)</title><rect x="0.3506%" y="709" width="0.1202%" height="15" fill="rgb(235,183,28)" fg:x="697" fg:w="239"/><text x="0.6006%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (29 samples, 0.01%)</title><rect x="0.4562%" y="693" width="0.0146%" height="15" fill="rgb(221,5,38)" fg:x="907" fg:w="29"/><text x="0.7062%" y="703.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="0.4562%" y="677" width="0.0146%" height="15" fill="rgb(247,18,42)" fg:x="907" fg:w="29"/><text x="0.7062%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (29 samples, 0.01%)</title><rect x="0.4562%" y="661" width="0.0146%" height="15" fill="rgb(241,131,45)" fg:x="907" fg:w="29"/><text x="0.7062%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (33 samples, 0.02%)</title><rect x="0.5040%" y="693" width="0.0166%" height="15" fill="rgb(249,31,29)" fg:x="1002" fg:w="33"/><text x="0.7540%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33 samples, 0.02%)</title><rect x="0.5040%" y="677" width="0.0166%" height="15" fill="rgb(225,111,53)" fg:x="1002" fg:w="33"/><text x="0.7540%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (33 samples, 0.02%)</title><rect x="0.5040%" y="661" width="0.0166%" height="15" fill="rgb(238,160,17)" fg:x="1002" fg:w="33"/><text x="0.7540%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (33 samples, 0.02%)</title><rect x="0.5040%" y="645" width="0.0166%" height="15" fill="rgb(214,148,48)" fg:x="1002" fg:w="33"/><text x="0.7540%" y="655.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (118 samples, 0.06%)</title><rect x="0.4708%" y="709" width="0.0594%" height="15" fill="rgb(232,36,49)" fg:x="936" fg:w="118"/><text x="0.7208%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (67 samples, 0.03%)</title><rect x="0.5301%" y="709" width="0.0337%" height="15" fill="rgb(209,103,24)" fg:x="1054" fg:w="67"/><text x="0.7801%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (49 samples, 0.02%)</title><rect x="0.5638%" y="709" width="0.0246%" height="15" fill="rgb(229,88,8)" fg:x="1121" fg:w="49"/><text x="0.8138%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (115 samples, 0.06%)</title><rect x="0.5885%" y="709" width="0.0578%" height="15" fill="rgb(213,181,19)" fg:x="1170" fg:w="115"/><text x="0.8385%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (28 samples, 0.01%)</title><rect x="0.6891%" y="661" width="0.0141%" height="15" fill="rgb(254,191,54)" fg:x="1370" fg:w="28"/><text x="0.9391%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.01%)</title><rect x="0.6891%" y="645" width="0.0141%" height="15" fill="rgb(241,83,37)" fg:x="1370" fg:w="28"/><text x="0.9391%" y="655.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (112 samples, 0.06%)</title><rect x="0.6891%" y="677" width="0.0563%" height="15" fill="rgb(233,36,39)" fg:x="1370" fg:w="112"/><text x="0.9391%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (84 samples, 0.04%)</title><rect x="0.7032%" y="661" width="0.0423%" height="15" fill="rgb(226,3,54)" fg:x="1398" fg:w="84"/><text x="0.9532%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (84 samples, 0.04%)</title><rect x="0.7032%" y="645" width="0.0423%" height="15" fill="rgb(245,192,40)" fg:x="1398" fg:w="84"/><text x="0.9532%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (84 samples, 0.04%)</title><rect x="0.7032%" y="629" width="0.0423%" height="15" fill="rgb(238,167,29)" fg:x="1398" fg:w="84"/><text x="0.9532%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (84 samples, 0.04%)</title><rect x="0.7032%" y="613" width="0.0423%" height="15" fill="rgb(232,182,51)" fg:x="1398" fg:w="84"/><text x="0.9532%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (84 samples, 0.04%)</title><rect x="0.7032%" y="597" width="0.0423%" height="15" fill="rgb(231,60,39)" fg:x="1398" fg:w="84"/><text x="0.9532%" y="607.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (176 samples, 0.09%)</title><rect x="0.6609%" y="693" width="0.0885%" height="15" fill="rgb(208,69,12)" fg:x="1314" fg:w="176"/><text x="0.9109%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (205 samples, 0.10%)</title><rect x="0.6539%" y="709" width="0.1031%" height="15" fill="rgb(235,93,37)" fg:x="1300" fg:w="205"/><text x="0.9039%" y="719.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (23 samples, 0.01%)</title><rect x="0.7570%" y="709" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="1505" fg:w="23"/><text x="1.0070%" y="719.50"></text></g><g><title>[anon] (1,449 samples, 0.73%)</title><rect x="0.0407%" y="725" width="0.7288%" height="15" fill="rgb(222,207,29)" fg:x="81" fg:w="1449"/><text x="0.2907%" y="735.50"></text></g><g><title>__GI___libc_malloc (62 samples, 0.03%)</title><rect x="0.7781%" y="709" width="0.0312%" height="15" fill="rgb(206,96,30)" fg:x="1547" fg:w="62"/><text x="1.0281%" y="719.50"></text></g><g><title>_int_free (45 samples, 0.02%)</title><rect x="0.8169%" y="709" width="0.0226%" height="15" fill="rgb(218,138,4)" fg:x="1624" fg:w="45"/><text x="1.0669%" y="719.50"></text></g><g><title>_int_malloc (24 samples, 0.01%)</title><rect x="0.8395%" y="709" width="0.0121%" height="15" fill="rgb(250,191,14)" fg:x="1669" fg:w="24"/><text x="1.0895%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.01%)</title><rect x="0.8571%" y="709" width="0.0121%" height="15" fill="rgb(239,60,40)" fg:x="1704" fg:w="24"/><text x="1.1071%" y="719.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (59 samples, 0.03%)</title><rect x="0.8717%" y="709" width="0.0297%" height="15" fill="rgb(206,27,48)" fg:x="1733" fg:w="59"/><text x="1.1217%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (111 samples, 0.06%)</title><rect x="0.9109%" y="677" width="0.0558%" height="15" fill="rgb(225,35,8)" fg:x="1811" fg:w="111"/><text x="1.1609%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (111 samples, 0.06%)</title><rect x="0.9109%" y="661" width="0.0558%" height="15" fill="rgb(250,213,24)" fg:x="1811" fg:w="111"/><text x="1.1609%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (120 samples, 0.06%)</title><rect x="0.9094%" y="709" width="0.0604%" height="15" fill="rgb(247,123,22)" fg:x="1808" fg:w="120"/><text x="1.1594%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (117 samples, 0.06%)</title><rect x="0.9109%" y="693" width="0.0588%" height="15" fill="rgb(231,138,38)" fg:x="1811" fg:w="117"/><text x="1.1609%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (120 samples, 0.06%)</title><rect x="0.9698%" y="709" width="0.0604%" height="15" fill="rgb(231,145,46)" fg:x="1928" fg:w="120"/><text x="1.2198%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (77 samples, 0.04%)</title><rect x="1.0377%" y="709" width="0.0387%" height="15" fill="rgb(251,118,11)" fg:x="2063" fg:w="77"/><text x="1.2877%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (239 samples, 0.12%)</title><rect x="1.0764%" y="709" width="0.1202%" height="15" fill="rgb(217,147,25)" fg:x="2140" fg:w="239"/><text x="1.3264%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (63 samples, 0.03%)</title><rect x="1.1649%" y="693" width="0.0317%" height="15" fill="rgb(247,81,37)" fg:x="2316" fg:w="63"/><text x="1.4149%" y="703.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.03%)</title><rect x="1.1649%" y="677" width="0.0317%" height="15" fill="rgb(209,12,38)" fg:x="2316" fg:w="63"/><text x="1.4149%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (63 samples, 0.03%)</title><rect x="1.1649%" y="661" width="0.0317%" height="15" fill="rgb(227,1,9)" fg:x="2316" fg:w="63"/><text x="1.4149%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (140 samples, 0.07%)</title><rect x="1.2871%" y="693" width="0.0704%" height="15" fill="rgb(248,47,43)" fg:x="2559" fg:w="140"/><text x="1.5371%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (140 samples, 0.07%)</title><rect x="1.2871%" y="677" width="0.0704%" height="15" fill="rgb(221,10,30)" fg:x="2559" fg:w="140"/><text x="1.5371%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (140 samples, 0.07%)</title><rect x="1.2871%" y="661" width="0.0704%" height="15" fill="rgb(210,229,1)" fg:x="2559" fg:w="140"/><text x="1.5371%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (140 samples, 0.07%)</title><rect x="1.2871%" y="645" width="0.0704%" height="15" fill="rgb(222,148,37)" fg:x="2559" fg:w="140"/><text x="1.5371%" y="655.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (384 samples, 0.19%)</title><rect x="1.1966%" y="709" width="0.1931%" height="15" fill="rgb(234,67,33)" fg:x="2379" fg:w="384"/><text x="1.4466%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (64 samples, 0.03%)</title><rect x="1.3576%" y="693" width="0.0322%" height="15" fill="rgb(247,98,35)" fg:x="2699" fg:w="64"/><text x="1.6076%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (64 samples, 0.03%)</title><rect x="1.3576%" y="677" width="0.0322%" height="15" fill="rgb(247,138,52)" fg:x="2699" fg:w="64"/><text x="1.6076%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (64 samples, 0.03%)</title><rect x="1.3576%" y="661" width="0.0322%" height="15" fill="rgb(213,79,30)" fg:x="2699" fg:w="64"/><text x="1.6076%" y="671.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.03%)</title><rect x="1.3576%" y="645" width="0.0322%" height="15" fill="rgb(246,177,23)" fg:x="2699" fg:w="64"/><text x="1.6076%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (64 samples, 0.03%)</title><rect x="1.3576%" y="629" width="0.0322%" height="15" fill="rgb(230,62,27)" fg:x="2699" fg:w="64"/><text x="1.6076%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (48 samples, 0.02%)</title><rect x="1.3898%" y="709" width="0.0241%" height="15" fill="rgb(216,154,8)" fg:x="2763" fg:w="48"/><text x="1.6398%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (74 samples, 0.04%)</title><rect x="1.4184%" y="709" width="0.0372%" height="15" fill="rgb(244,35,45)" fg:x="2820" fg:w="74"/><text x="1.6684%" y="719.50"></text></g><g><title>error_entry (20 samples, 0.01%)</title><rect x="1.4662%" y="693" width="0.0101%" height="15" fill="rgb(251,115,12)" fg:x="2915" fg:w="20"/><text x="1.7162%" y="703.50"></text></g><g><title>[unknown] (1,406 samples, 0.71%)</title><rect x="0.7696%" y="725" width="0.7072%" height="15" fill="rgb(240,54,50)" fg:x="1530" fg:w="1406"/><text x="1.0196%" y="735.50"></text></g><g><title>sysmalloc (23 samples, 0.01%)</title><rect x="1.4652%" y="709" width="0.0116%" height="15" fill="rgb(233,84,52)" fg:x="2913" fg:w="23"/><text x="1.7152%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.01%)</title><rect x="1.5678%" y="469" width="0.0131%" height="15" fill="rgb(207,117,47)" fg:x="3117" fg:w="26"/><text x="1.8178%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::le (21 samples, 0.01%)</title><rect x="1.5814%" y="469" width="0.0106%" height="15" fill="rgb(249,43,39)" fg:x="3144" fg:w="21"/><text x="1.8314%" y="479.50"></text></g><g><title>_int_free (30 samples, 0.02%)</title><rect x="1.5960%" y="341" width="0.0151%" height="15" fill="rgb(209,38,44)" fg:x="3173" fg:w="30"/><text x="1.8460%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (51 samples, 0.03%)</title><rect x="1.5920%" y="469" width="0.0257%" height="15" fill="rgb(236,212,23)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (51 samples, 0.03%)</title><rect x="1.5920%" y="453" width="0.0257%" height="15" fill="rgb(242,79,21)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.03%)</title><rect x="1.5920%" y="437" width="0.0257%" height="15" fill="rgb(211,96,35)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.03%)</title><rect x="1.5920%" y="421" width="0.0257%" height="15" fill="rgb(253,215,40)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.03%)</title><rect x="1.5920%" y="405" width="0.0257%" height="15" fill="rgb(211,81,21)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="415.50"></text></g><g><title>__rdl_dealloc (51 samples, 0.03%)</title><rect x="1.5920%" y="389" width="0.0257%" height="15" fill="rgb(208,190,38)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51 samples, 0.03%)</title><rect x="1.5920%" y="373" width="0.0257%" height="15" fill="rgb(235,213,38)" fg:x="3165" fg:w="51"/><text x="1.8420%" y="383.50"></text></g><g><title>__GI___libc_free (50 samples, 0.03%)</title><rect x="1.5925%" y="357" width="0.0251%" height="15" fill="rgb(237,122,38)" fg:x="3166" fg:w="50"/><text x="1.8425%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (98 samples, 0.05%)</title><rect x="1.6216%" y="469" width="0.0493%" height="15" fill="rgb(244,218,35)" fg:x="3224" fg:w="98"/><text x="1.8716%" y="479.50"></text></g><g><title>__rdl_alloc (160 samples, 0.08%)</title><rect x="3.0139%" y="293" width="0.0805%" height="15" fill="rgb(240,68,47)" fg:x="5992" fg:w="160"/><text x="3.2639%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (160 samples, 0.08%)</title><rect x="3.0139%" y="277" width="0.0805%" height="15" fill="rgb(210,16,53)" fg:x="5992" fg:w="160"/><text x="3.2639%" y="287.50"></text></g><g><title>__GI___libc_malloc (160 samples, 0.08%)</title><rect x="3.0139%" y="261" width="0.0805%" height="15" fill="rgb(235,124,12)" fg:x="5992" fg:w="160"/><text x="3.2639%" y="271.50"></text></g><g><title>tcache_get (118 samples, 0.06%)</title><rect x="3.0350%" y="245" width="0.0594%" height="15" fill="rgb(224,169,11)" fg:x="6034" fg:w="118"/><text x="3.2850%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (184 samples, 0.09%)</title><rect x="3.0089%" y="389" width="0.0925%" height="15" fill="rgb(250,166,2)" fg:x="5982" fg:w="184"/><text x="3.2589%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (184 samples, 0.09%)</title><rect x="3.0089%" y="373" width="0.0925%" height="15" fill="rgb(242,216,29)" fg:x="5982" fg:w="184"/><text x="3.2589%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (184 samples, 0.09%)</title><rect x="3.0089%" y="357" width="0.0925%" height="15" fill="rgb(230,116,27)" fg:x="5982" fg:w="184"/><text x="3.2589%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (174 samples, 0.09%)</title><rect x="3.0139%" y="341" width="0.0875%" height="15" fill="rgb(228,99,48)" fg:x="5992" fg:w="174"/><text x="3.2639%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (174 samples, 0.09%)</title><rect x="3.0139%" y="325" width="0.0875%" height="15" fill="rgb(253,11,6)" fg:x="5992" fg:w="174"/><text x="3.2639%" y="335.50"></text></g><g><title>alloc::alloc::alloc (174 samples, 0.09%)</title><rect x="3.0139%" y="309" width="0.0875%" height="15" fill="rgb(247,143,39)" fg:x="5992" fg:w="174"/><text x="3.2639%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (198 samples, 0.10%)</title><rect x="3.0089%" y="405" width="0.0996%" height="15" fill="rgb(236,97,10)" fg:x="5982" fg:w="198"/><text x="3.2589%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (205 samples, 0.10%)</title><rect x="3.0079%" y="453" width="0.1031%" height="15" fill="rgb(233,208,19)" fg:x="5980" fg:w="205"/><text x="3.2579%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (203 samples, 0.10%)</title><rect x="3.0089%" y="437" width="0.1021%" height="15" fill="rgb(216,164,2)" fg:x="5982" fg:w="203"/><text x="3.2589%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (203 samples, 0.10%)</title><rect x="3.0089%" y="421" width="0.1021%" height="15" fill="rgb(220,129,5)" fg:x="5982" fg:w="203"/><text x="3.2589%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.02%)</title><rect x="3.1110%" y="453" width="0.0231%" height="15" fill="rgb(242,17,10)" fg:x="6185" fg:w="46"/><text x="3.3610%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (32 samples, 0.02%)</title><rect x="3.1180%" y="437" width="0.0161%" height="15" fill="rgb(242,107,0)" fg:x="6199" fg:w="32"/><text x="3.3680%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (32 samples, 0.02%)</title><rect x="3.1180%" y="421" width="0.0161%" height="15" fill="rgb(251,28,31)" fg:x="6199" fg:w="32"/><text x="3.3680%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (88 samples, 0.04%)</title><rect x="3.1713%" y="421" width="0.0443%" height="15" fill="rgb(233,223,10)" fg:x="6305" fg:w="88"/><text x="3.4213%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (88 samples, 0.04%)</title><rect x="3.1713%" y="405" width="0.0443%" height="15" fill="rgb(215,21,27)" fg:x="6305" fg:w="88"/><text x="3.4213%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (157 samples, 0.08%)</title><rect x="3.1371%" y="437" width="0.0790%" height="15" fill="rgb(232,23,21)" fg:x="6237" fg:w="157"/><text x="3.3871%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.02%)</title><rect x="3.2161%" y="421" width="0.0196%" height="15" fill="rgb(244,5,23)" fg:x="6394" fg:w="39"/><text x="3.4661%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="3.2196%" y="405" width="0.0161%" height="15" fill="rgb(226,81,46)" fg:x="6401" fg:w="32"/><text x="3.4696%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (32 samples, 0.02%)</title><rect x="3.2196%" y="389" width="0.0161%" height="15" fill="rgb(247,70,30)" fg:x="6401" fg:w="32"/><text x="3.4696%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (32 samples, 0.02%)</title><rect x="3.2196%" y="373" width="0.0161%" height="15" fill="rgb(212,68,19)" fg:x="6401" fg:w="32"/><text x="3.4696%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (286 samples, 0.14%)</title><rect x="3.1371%" y="453" width="0.1439%" height="15" fill="rgb(240,187,13)" fg:x="6237" fg:w="286"/><text x="3.3871%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (129 samples, 0.06%)</title><rect x="3.2161%" y="437" width="0.0649%" height="15" fill="rgb(223,113,26)" fg:x="6394" fg:w="129"/><text x="3.4661%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (90 samples, 0.05%)</title><rect x="3.2357%" y="421" width="0.0453%" height="15" fill="rgb(206,192,2)" fg:x="6433" fg:w="90"/><text x="3.4857%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (42 samples, 0.02%)</title><rect x="3.2810%" y="437" width="0.0211%" height="15" fill="rgb(241,108,4)" fg:x="6523" fg:w="42"/><text x="3.5310%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (94 samples, 0.05%)</title><rect x="3.2810%" y="453" width="0.0473%" height="15" fill="rgb(247,173,49)" fg:x="6523" fg:w="94"/><text x="3.5310%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (52 samples, 0.03%)</title><rect x="3.3021%" y="437" width="0.0262%" height="15" fill="rgb(224,114,35)" fg:x="6565" fg:w="52"/><text x="3.5521%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (52 samples, 0.03%)</title><rect x="3.3021%" y="421" width="0.0262%" height="15" fill="rgb(245,159,27)" fg:x="6565" fg:w="52"/><text x="3.5521%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (289 samples, 0.15%)</title><rect x="3.3283%" y="453" width="0.1454%" height="15" fill="rgb(245,172,44)" fg:x="6617" fg:w="289"/><text x="3.5783%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (236 samples, 0.12%)</title><rect x="3.3549%" y="437" width="0.1187%" height="15" fill="rgb(236,23,11)" fg:x="6670" fg:w="236"/><text x="3.6049%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (344 samples, 0.17%)</title><rect x="3.4736%" y="421" width="0.1730%" height="15" fill="rgb(205,117,38)" fg:x="6906" fg:w="344"/><text x="3.7236%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (344 samples, 0.17%)</title><rect x="3.4736%" y="405" width="0.1730%" height="15" fill="rgb(237,72,25)" fg:x="6906" fg:w="344"/><text x="3.7236%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (33 samples, 0.02%)</title><rect x="3.6467%" y="405" width="0.0166%" height="15" fill="rgb(244,70,9)" fg:x="7250" fg:w="33"/><text x="3.8967%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (400 samples, 0.20%)</title><rect x="3.4736%" y="453" width="0.2012%" height="15" fill="rgb(217,125,39)" fg:x="6906" fg:w="400"/><text x="3.7236%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (400 samples, 0.20%)</title><rect x="3.4736%" y="437" width="0.2012%" height="15" fill="rgb(235,36,10)" fg:x="6906" fg:w="400"/><text x="3.7236%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (56 samples, 0.03%)</title><rect x="3.6467%" y="421" width="0.0282%" height="15" fill="rgb(251,123,47)" fg:x="7250" fg:w="56"/><text x="3.8967%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (23 samples, 0.01%)</title><rect x="3.6633%" y="405" width="0.0116%" height="15" fill="rgb(221,13,13)" fg:x="7283" fg:w="23"/><text x="3.9133%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (86 samples, 0.04%)</title><rect x="3.6889%" y="453" width="0.0433%" height="15" fill="rgb(238,131,9)" fg:x="7334" fg:w="86"/><text x="3.9389%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (35 samples, 0.02%)</title><rect x="4.0299%" y="277" width="0.0176%" height="15" fill="rgb(211,50,8)" fg:x="8012" fg:w="35"/><text x="4.2799%" y="287.50"></text></g><g><title>_int_free (20 samples, 0.01%)</title><rect x="4.0475%" y="277" width="0.0101%" height="15" fill="rgb(245,182,24)" fg:x="8047" fg:w="20"/><text x="4.2975%" y="287.50"></text></g><g><title>asm_exc_page_fault (22 samples, 0.01%)</title><rect x="4.0772%" y="261" width="0.0111%" height="15" fill="rgb(242,14,37)" fg:x="8106" fg:w="22"/><text x="4.3272%" y="271.50"></text></g><g><title>exc_page_fault (22 samples, 0.01%)</title><rect x="4.0772%" y="245" width="0.0111%" height="15" fill="rgb(246,228,12)" fg:x="8106" fg:w="22"/><text x="4.3272%" y="255.50"></text></g><g><title>charge_memcg (22 samples, 0.01%)</title><rect x="4.1159%" y="117" width="0.0111%" height="15" fill="rgb(213,55,15)" fg:x="8183" fg:w="22"/><text x="4.3659%" y="127.50"></text></g><g><title>__mem_cgroup_charge (47 samples, 0.02%)</title><rect x="4.1149%" y="133" width="0.0236%" height="15" fill="rgb(209,9,3)" fg:x="8181" fg:w="47"/><text x="4.3649%" y="143.50"></text></g><g><title>__alloc_pages (26 samples, 0.01%)</title><rect x="4.1502%" y="101" width="0.0131%" height="15" fill="rgb(230,59,30)" fg:x="8251" fg:w="26"/><text x="4.4002%" y="111.50"></text></g><g><title>get_page_from_freelist (21 samples, 0.01%)</title><rect x="4.1527%" y="85" width="0.0106%" height="15" fill="rgb(209,121,21)" fg:x="8256" fg:w="21"/><text x="4.4027%" y="95.50"></text></g><g><title>__folio_alloc (29 samples, 0.01%)</title><rect x="4.1502%" y="117" width="0.0146%" height="15" fill="rgb(220,109,13)" fg:x="8251" fg:w="29"/><text x="4.4002%" y="127.50"></text></g><g><title>do_anonymous_page (109 samples, 0.05%)</title><rect x="4.1104%" y="149" width="0.0548%" height="15" fill="rgb(232,18,1)" fg:x="8172" fg:w="109"/><text x="4.3604%" y="159.50"></text></g><g><title>vma_alloc_folio (33 samples, 0.02%)</title><rect x="4.1486%" y="133" width="0.0166%" height="15" fill="rgb(215,41,42)" fg:x="8248" fg:w="33"/><text x="4.3986%" y="143.50"></text></g><g><title>__handle_mm_fault (126 samples, 0.06%)</title><rect x="4.1049%" y="181" width="0.0634%" height="15" fill="rgb(224,123,36)" fg:x="8161" fg:w="126"/><text x="4.3549%" y="191.50"></text></g><g><title>handle_pte_fault (119 samples, 0.06%)</title><rect x="4.1084%" y="165" width="0.0599%" height="15" fill="rgb(240,125,3)" fg:x="8168" fg:w="119"/><text x="4.3584%" y="175.50"></text></g><g><title>handle_mm_fault (139 samples, 0.07%)</title><rect x="4.1044%" y="197" width="0.0699%" height="15" fill="rgb(205,98,50)" fg:x="8160" fg:w="139"/><text x="4.3544%" y="207.50"></text></g><g><title>do_user_addr_fault (146 samples, 0.07%)</title><rect x="4.1024%" y="213" width="0.0734%" height="15" fill="rgb(205,185,37)" fg:x="8156" fg:w="146"/><text x="4.3524%" y="223.50"></text></g><g><title>exc_page_fault (163 samples, 0.08%)</title><rect x="4.1009%" y="229" width="0.0820%" height="15" fill="rgb(238,207,15)" fg:x="8153" fg:w="163"/><text x="4.3509%" y="239.50"></text></g><g><title>asm_exc_page_fault (164 samples, 0.08%)</title><rect x="4.1009%" y="245" width="0.0825%" height="15" fill="rgb(213,199,42)" fg:x="8153" fg:w="164"/><text x="4.3509%" y="255.50"></text></g><g><title>change_protection (26 samples, 0.01%)</title><rect x="4.2010%" y="133" width="0.0131%" height="15" fill="rgb(235,201,11)" fg:x="8352" fg:w="26"/><text x="4.4510%" y="143.50"></text></g><g><title>change_protection_range (26 samples, 0.01%)</title><rect x="4.2010%" y="117" width="0.0131%" height="15" fill="rgb(207,46,11)" fg:x="8352" fg:w="26"/><text x="4.4510%" y="127.50"></text></g><g><title>perf_event_mmap_output (29 samples, 0.01%)</title><rect x="4.2638%" y="69" width="0.0146%" height="15" fill="rgb(241,35,35)" fg:x="8477" fg:w="29"/><text x="4.5138%" y="79.50"></text></g><g><title>perf_event_mmap_event (124 samples, 0.06%)</title><rect x="4.2176%" y="117" width="0.0624%" height="15" fill="rgb(243,32,47)" fg:x="8385" fg:w="124"/><text x="4.4676%" y="127.50"></text></g><g><title>perf_iterate_sb (117 samples, 0.06%)</title><rect x="4.2211%" y="101" width="0.0588%" height="15" fill="rgb(247,202,23)" fg:x="8392" fg:w="117"/><text x="4.4711%" y="111.50"></text></g><g><title>perf_iterate_ctx (115 samples, 0.06%)</title><rect x="4.2221%" y="85" width="0.0578%" height="15" fill="rgb(219,102,11)" fg:x="8394" fg:w="115"/><text x="4.4721%" y="95.50"></text></g><g><title>perf_event_mmap (128 samples, 0.06%)</title><rect x="4.2160%" y="133" width="0.0644%" height="15" fill="rgb(243,110,44)" fg:x="8382" fg:w="128"/><text x="4.4660%" y="143.50"></text></g><g><title>mprotect_fixup (176 samples, 0.09%)</title><rect x="4.1994%" y="149" width="0.0885%" height="15" fill="rgb(222,74,54)" fg:x="8349" fg:w="176"/><text x="4.4494%" y="159.50"></text></g><g><title>do_mprotect_pkey (205 samples, 0.10%)</title><rect x="4.1894%" y="165" width="0.1031%" height="15" fill="rgb(216,99,12)" fg:x="8329" fg:w="205"/><text x="4.4394%" y="175.50"></text></g><g><title>__x64_sys_mprotect (206 samples, 0.10%)</title><rect x="4.1894%" y="181" width="0.1036%" height="15" fill="rgb(226,22,26)" fg:x="8329" fg:w="206"/><text x="4.4394%" y="191.50"></text></g><g><title>do_syscall_64 (221 samples, 0.11%)</title><rect x="4.1884%" y="197" width="0.1112%" height="15" fill="rgb(217,163,10)" fg:x="8327" fg:w="221"/><text x="4.4384%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (231 samples, 0.12%)</title><rect x="4.1844%" y="213" width="0.1162%" height="15" fill="rgb(213,25,53)" fg:x="8319" fg:w="231"/><text x="4.4344%" y="223.50"></text></g><g><title>grow_heap (255 samples, 0.13%)</title><rect x="4.1833%" y="245" width="0.1283%" height="15" fill="rgb(252,105,26)" fg:x="8317" fg:w="255"/><text x="4.4333%" y="255.50"></text></g><g><title>__GI___mprotect (255 samples, 0.13%)</title><rect x="4.1833%" y="229" width="0.1283%" height="15" fill="rgb(220,39,43)" fg:x="8317" fg:w="255"/><text x="4.4333%" y="239.50"></text></g><g><title>_int_realloc (595 samples, 0.30%)</title><rect x="4.0159%" y="293" width="0.2993%" height="15" fill="rgb(229,68,48)" fg:x="7984" fg:w="595"/><text x="4.2659%" y="303.50"></text></g><g><title>_int_malloc (512 samples, 0.26%)</title><rect x="4.0576%" y="277" width="0.2575%" height="15" fill="rgb(252,8,32)" fg:x="8067" fg:w="512"/><text x="4.3076%" y="287.50"></text></g><g><title>sysmalloc (448 samples, 0.23%)</title><rect x="4.0898%" y="261" width="0.2253%" height="15" fill="rgb(223,20,43)" fg:x="8131" fg:w="448"/><text x="4.3398%" y="271.50"></text></g><g><title>arena_for_chunk (34 samples, 0.02%)</title><rect x="4.3151%" y="293" width="0.0171%" height="15" fill="rgb(229,81,49)" fg:x="8579" fg:w="34"/><text x="4.5651%" y="303.50"></text></g><g><title>arena_for_chunk (33 samples, 0.02%)</title><rect x="4.3156%" y="277" width="0.0166%" height="15" fill="rgb(236,28,36)" fg:x="8580" fg:w="33"/><text x="4.5656%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (832 samples, 0.42%)</title><rect x="3.9168%" y="389" width="0.4185%" height="15" fill="rgb(249,185,26)" fg:x="7787" fg:w="832"/><text x="4.1668%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (832 samples, 0.42%)</title><rect x="3.9168%" y="373" width="0.4185%" height="15" fill="rgb(249,174,33)" fg:x="7787" fg:w="832"/><text x="4.1668%" y="383.50"></text></g><g><title>alloc::alloc::realloc (831 samples, 0.42%)</title><rect x="3.9173%" y="357" width="0.4180%" height="15" fill="rgb(233,201,37)" fg:x="7788" fg:w="831"/><text x="4.1673%" y="367.50"></text></g><g><title>__rdl_realloc (831 samples, 0.42%)</title><rect x="3.9173%" y="341" width="0.4180%" height="15" fill="rgb(221,78,26)" fg:x="7788" fg:w="831"/><text x="4.1673%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (831 samples, 0.42%)</title><rect x="3.9173%" y="325" width="0.4180%" height="15" fill="rgb(250,127,30)" fg:x="7788" fg:w="831"/><text x="4.1673%" y="335.50"></text></g><g><title>__GI___libc_realloc (830 samples, 0.42%)</title><rect x="3.9178%" y="309" width="0.4175%" height="15" fill="rgb(230,49,44)" fg:x="7789" fg:w="830"/><text x="4.1678%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (836 samples, 0.42%)</title><rect x="3.9158%" y="405" width="0.4205%" height="15" fill="rgb(229,67,23)" fg:x="7785" fg:w="836"/><text x="4.1658%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (851 samples, 0.43%)</title><rect x="3.9102%" y="421" width="0.4280%" height="15" fill="rgb(249,83,47)" fg:x="7774" fg:w="851"/><text x="4.1602%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (852 samples, 0.43%)</title><rect x="3.9102%" y="437" width="0.4285%" height="15" fill="rgb(215,43,3)" fg:x="7774" fg:w="852"/><text x="4.1602%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (45 samples, 0.02%)</title><rect x="4.3388%" y="437" width="0.0226%" height="15" fill="rgb(238,154,13)" fg:x="8626" fg:w="45"/><text x="4.5888%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (45 samples, 0.02%)</title><rect x="4.3388%" y="421" width="0.0226%" height="15" fill="rgb(219,56,2)" fg:x="8626" fg:w="45"/><text x="4.5888%" y="431.50"></text></g><g><title>core::ptr::write (442 samples, 0.22%)</title><rect x="4.3614%" y="437" width="0.2223%" height="15" fill="rgb(233,0,4)" fg:x="8671" fg:w="442"/><text x="4.6114%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,698 samples, 0.85%)</title><rect x="3.7322%" y="453" width="0.8541%" height="15" fill="rgb(235,30,7)" fg:x="7420" fg:w="1698"/><text x="3.9822%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (34 samples, 0.02%)</title><rect x="4.5993%" y="421" width="0.0171%" height="15" fill="rgb(250,79,13)" fg:x="9144" fg:w="34"/><text x="4.8493%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.02%)</title><rect x="4.5993%" y="405" width="0.0171%" height="15" fill="rgb(211,146,34)" fg:x="9144" fg:w="34"/><text x="4.8493%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (28 samples, 0.01%)</title><rect x="4.6023%" y="389" width="0.0141%" height="15" fill="rgb(228,22,38)" fg:x="9150" fg:w="28"/><text x="4.8523%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.01%)</title><rect x="4.6179%" y="421" width="0.0116%" height="15" fill="rgb(235,168,5)" fg:x="9181" fg:w="23"/><text x="4.8679%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (301 samples, 0.15%)</title><rect x="4.5862%" y="453" width="0.1514%" height="15" fill="rgb(221,155,16)" fg:x="9118" fg:w="301"/><text x="4.8362%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (275 samples, 0.14%)</title><rect x="4.5993%" y="437" width="0.1383%" height="15" fill="rgb(215,215,53)" fg:x="9144" fg:w="275"/><text x="4.8493%" y="447.50"></text></g><g><title>core::ptr::write (215 samples, 0.11%)</title><rect x="4.6295%" y="421" width="0.1081%" height="15" fill="rgb(223,4,10)" fg:x="9204" fg:w="215"/><text x="4.8795%" y="431.50"></text></g><g><title>__memset_evex_unaligned_erms (185 samples, 0.09%)</title><rect x="4.6446%" y="405" width="0.0931%" height="15" fill="rgb(234,103,6)" fg:x="9234" fg:w="185"/><text x="4.8946%" y="415.50"></text></g><g><title>__rdl_alloc (384 samples, 0.19%)</title><rect x="4.7397%" y="341" width="0.1931%" height="15" fill="rgb(227,97,0)" fg:x="9423" fg:w="384"/><text x="4.9897%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (384 samples, 0.19%)</title><rect x="4.7397%" y="325" width="0.1931%" height="15" fill="rgb(234,150,53)" fg:x="9423" fg:w="384"/><text x="4.9897%" y="335.50"></text></g><g><title>__GI___libc_malloc (384 samples, 0.19%)</title><rect x="4.7397%" y="309" width="0.1931%" height="15" fill="rgb(228,201,54)" fg:x="9423" fg:w="384"/><text x="4.9897%" y="319.50"></text></g><g><title>tcache_get (118 samples, 0.06%)</title><rect x="4.8734%" y="293" width="0.0594%" height="15" fill="rgb(222,22,37)" fg:x="9689" fg:w="118"/><text x="5.1234%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (396 samples, 0.20%)</title><rect x="4.7376%" y="453" width="0.1992%" height="15" fill="rgb(237,53,32)" fg:x="9419" fg:w="396"/><text x="4.9876%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (396 samples, 0.20%)</title><rect x="4.7376%" y="437" width="0.1992%" height="15" fill="rgb(233,25,53)" fg:x="9419" fg:w="396"/><text x="4.9876%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (393 samples, 0.20%)</title><rect x="4.7392%" y="421" width="0.1977%" height="15" fill="rgb(210,40,34)" fg:x="9422" fg:w="393"/><text x="4.9892%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (393 samples, 0.20%)</title><rect x="4.7392%" y="405" width="0.1977%" height="15" fill="rgb(241,220,44)" fg:x="9422" fg:w="393"/><text x="4.9892%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (392 samples, 0.20%)</title><rect x="4.7397%" y="389" width="0.1972%" height="15" fill="rgb(235,28,35)" fg:x="9423" fg:w="392"/><text x="4.9897%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (392 samples, 0.20%)</title><rect x="4.7397%" y="373" width="0.1972%" height="15" fill="rgb(210,56,17)" fg:x="9423" fg:w="392"/><text x="4.9897%" y="383.50"></text></g><g><title>alloc::alloc::alloc (392 samples, 0.20%)</title><rect x="4.7397%" y="357" width="0.1972%" height="15" fill="rgb(224,130,29)" fg:x="9423" fg:w="392"/><text x="4.9897%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (125 samples, 0.06%)</title><rect x="5.0917%" y="309" width="0.0629%" height="15" fill="rgb(235,212,8)" fg:x="10123" fg:w="125"/><text x="5.3417%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (125 samples, 0.06%)</title><rect x="5.0917%" y="293" width="0.0629%" height="15" fill="rgb(223,33,50)" fg:x="10123" fg:w="125"/><text x="5.3417%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (99 samples, 0.05%)</title><rect x="5.1048%" y="277" width="0.0498%" height="15" fill="rgb(219,149,13)" fg:x="10149" fg:w="99"/><text x="5.3548%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (99 samples, 0.05%)</title><rect x="5.1048%" y="261" width="0.0498%" height="15" fill="rgb(250,156,29)" fg:x="10149" fg:w="99"/><text x="5.3548%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (99 samples, 0.05%)</title><rect x="5.1048%" y="245" width="0.0498%" height="15" fill="rgb(216,193,19)" fg:x="10149" fg:w="99"/><text x="5.3548%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (352 samples, 0.18%)</title><rect x="5.0133%" y="389" width="0.1771%" height="15" fill="rgb(216,135,14)" fg:x="9967" fg:w="352"/><text x="5.2633%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (351 samples, 0.18%)</title><rect x="5.0138%" y="373" width="0.1765%" height="15" fill="rgb(241,47,5)" fg:x="9968" fg:w="351"/><text x="5.2638%" y="383.50"></text></g><g><title>core::cmp::max_by (351 samples, 0.18%)</title><rect x="5.0138%" y="357" width="0.1765%" height="15" fill="rgb(233,42,35)" fg:x="9968" fg:w="351"/><text x="5.2638%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (196 samples, 0.10%)</title><rect x="5.0917%" y="341" width="0.0986%" height="15" fill="rgb(231,13,6)" fg:x="10123" fg:w="196"/><text x="5.3417%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (196 samples, 0.10%)</title><rect x="5.0917%" y="325" width="0.0986%" height="15" fill="rgb(207,181,40)" fg:x="10123" fg:w="196"/><text x="5.3417%" y="335.50"></text></g><g><title>project1::solver::types::Lit::var (71 samples, 0.04%)</title><rect x="5.1546%" y="309" width="0.0357%" height="15" fill="rgb(254,173,49)" fg:x="10248" fg:w="71"/><text x="5.4046%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (31 samples, 0.02%)</title><rect x="5.1747%" y="293" width="0.0156%" height="15" fill="rgb(221,1,38)" fg:x="10288" fg:w="31"/><text x="5.4247%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (488 samples, 0.25%)</title><rect x="4.9464%" y="405" width="0.2455%" height="15" fill="rgb(206,124,46)" fg:x="9834" fg:w="488"/><text x="5.1964%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (494 samples, 0.25%)</title><rect x="4.9459%" y="453" width="0.2485%" height="15" fill="rgb(249,21,11)" fg:x="9833" fg:w="494"/><text x="5.1959%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (493 samples, 0.25%)</title><rect x="4.9464%" y="437" width="0.2480%" height="15" fill="rgb(222,201,40)" fg:x="9834" fg:w="493"/><text x="5.1964%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (493 samples, 0.25%)</title><rect x="4.9464%" y="421" width="0.2480%" height="15" fill="rgb(235,61,29)" fg:x="9834" fg:w="493"/><text x="5.1964%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (22 samples, 0.01%)</title><rect x="5.2230%" y="421" width="0.0111%" height="15" fill="rgb(219,207,3)" fg:x="10384" fg:w="22"/><text x="5.4730%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (22 samples, 0.01%)</title><rect x="5.2230%" y="405" width="0.0111%" height="15" fill="rgb(222,56,46)" fg:x="10384" fg:w="22"/><text x="5.4730%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (67 samples, 0.03%)</title><rect x="5.2079%" y="453" width="0.0337%" height="15" fill="rgb(239,76,54)" fg:x="10354" fg:w="67"/><text x="5.4579%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (37 samples, 0.02%)</title><rect x="5.2230%" y="437" width="0.0186%" height="15" fill="rgb(231,124,27)" fg:x="10384" fg:w="37"/><text x="5.4730%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (24 samples, 0.01%)</title><rect x="5.2416%" y="453" width="0.0121%" height="15" fill="rgb(249,195,6)" fg:x="10421" fg:w="24"/><text x="5.4916%" y="463.50"></text></g><g><title>_int_free (141 samples, 0.07%)</title><rect x="5.2613%" y="325" width="0.0709%" height="15" fill="rgb(237,174,47)" fg:x="10460" fg:w="141"/><text x="5.5113%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (175 samples, 0.09%)</title><rect x="5.2537%" y="405" width="0.0880%" height="15" fill="rgb(206,201,31)" fg:x="10445" fg:w="175"/><text x="5.5037%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (175 samples, 0.09%)</title><rect x="5.2537%" y="389" width="0.0880%" height="15" fill="rgb(231,57,52)" fg:x="10445" fg:w="175"/><text x="5.5037%" y="399.50"></text></g><g><title>__rdl_dealloc (175 samples, 0.09%)</title><rect x="5.2537%" y="373" width="0.0880%" height="15" fill="rgb(248,177,22)" fg:x="10445" fg:w="175"/><text x="5.5037%" y="383.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (175 samples, 0.09%)</title><rect x="5.2537%" y="357" width="0.0880%" height="15" fill="rgb(215,211,37)" fg:x="10445" fg:w="175"/><text x="5.5037%" y="367.50"></text></g><g><title>__GI___libc_free (175 samples, 0.09%)</title><rect x="5.2537%" y="341" width="0.0880%" height="15" fill="rgb(241,128,51)" fg:x="10445" fg:w="175"/><text x="5.5037%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (184 samples, 0.09%)</title><rect x="5.2537%" y="453" width="0.0925%" height="15" fill="rgb(227,165,31)" fg:x="10445" fg:w="184"/><text x="5.5037%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (184 samples, 0.09%)</title><rect x="5.2537%" y="437" width="0.0925%" height="15" fill="rgb(228,167,24)" fg:x="10445" fg:w="184"/><text x="5.5037%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (184 samples, 0.09%)</title><rect x="5.2537%" y="421" width="0.0925%" height="15" fill="rgb(228,143,12)" fg:x="10445" fg:w="184"/><text x="5.5037%" y="431.50"></text></g><g><title>__memcpy_evex_unaligned_erms (735 samples, 0.37%)</title><rect x="5.3583%" y="421" width="0.3697%" height="15" fill="rgb(249,149,8)" fg:x="10653" fg:w="735"/><text x="5.6083%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (759 samples, 0.38%)</title><rect x="5.3468%" y="453" width="0.3818%" height="15" fill="rgb(243,35,44)" fg:x="10630" fg:w="759"/><text x="5.5968%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (742 samples, 0.37%)</title><rect x="5.3553%" y="437" width="0.3732%" height="15" fill="rgb(246,89,9)" fg:x="10647" fg:w="742"/><text x="5.6053%" y="447.50"></text></g><g><title>log::max_level (347 samples, 0.17%)</title><rect x="5.7356%" y="453" width="0.1745%" height="15" fill="rgb(233,213,13)" fg:x="11403" fg:w="347"/><text x="5.9856%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (347 samples, 0.17%)</title><rect x="5.7356%" y="437" width="0.1745%" height="15" fill="rgb(233,141,41)" fg:x="11403" fg:w="347"/><text x="5.9856%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (347 samples, 0.17%)</title><rect x="5.7356%" y="421" width="0.1745%" height="15" fill="rgb(239,167,4)" fg:x="11403" fg:w="347"/><text x="5.9856%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.01%)</title><rect x="6.0082%" y="421" width="0.0106%" height="15" fill="rgb(209,217,16)" fg:x="11945" fg:w="21"/><text x="6.2582%" y="431.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (263 samples, 0.13%)</title><rect x="5.9101%" y="453" width="0.1323%" height="15" fill="rgb(219,88,35)" fg:x="11750" fg:w="263"/><text x="6.1601%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (68 samples, 0.03%)</title><rect x="6.0082%" y="437" width="0.0342%" height="15" fill="rgb(220,193,23)" fg:x="11945" fg:w="68"/><text x="6.2582%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.02%)</title><rect x="6.0188%" y="421" width="0.0236%" height="15" fill="rgb(230,90,52)" fg:x="11966" fg:w="47"/><text x="6.2688%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (47 samples, 0.02%)</title><rect x="6.0188%" y="405" width="0.0236%" height="15" fill="rgb(252,106,19)" fg:x="11966" fg:w="47"/><text x="6.2688%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.02%)</title><rect x="6.3321%" y="421" width="0.0241%" height="15" fill="rgb(206,74,20)" fg:x="12589" fg:w="48"/><text x="6.5821%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (44 samples, 0.02%)</title><rect x="6.3341%" y="405" width="0.0221%" height="15" fill="rgb(230,138,44)" fg:x="12593" fg:w="44"/><text x="6.5841%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.02%)</title><rect x="6.3341%" y="389" width="0.0221%" height="15" fill="rgb(235,182,43)" fg:x="12593" fg:w="44"/><text x="6.5841%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (108 samples, 0.05%)</title><rect x="6.3321%" y="437" width="0.0543%" height="15" fill="rgb(242,16,51)" fg:x="12589" fg:w="108"/><text x="6.5821%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (60 samples, 0.03%)</title><rect x="6.3563%" y="421" width="0.0302%" height="15" fill="rgb(248,9,4)" fg:x="12637" fg:w="60"/><text x="6.6063%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (60 samples, 0.03%)</title><rect x="6.3563%" y="405" width="0.0302%" height="15" fill="rgb(210,31,22)" fg:x="12637" fg:w="60"/><text x="6.6063%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (65 samples, 0.03%)</title><rect x="6.3864%" y="437" width="0.0327%" height="15" fill="rgb(239,54,39)" fg:x="12697" fg:w="65"/><text x="6.6364%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (29 samples, 0.01%)</title><rect x="6.4045%" y="421" width="0.0146%" height="15" fill="rgb(230,99,41)" fg:x="12733" fg:w="29"/><text x="6.6545%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (28 samples, 0.01%)</title><rect x="6.4050%" y="405" width="0.0141%" height="15" fill="rgb(253,106,12)" fg:x="12734" fg:w="28"/><text x="6.6550%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (28 samples, 0.01%)</title><rect x="6.4050%" y="389" width="0.0141%" height="15" fill="rgb(213,46,41)" fg:x="12734" fg:w="28"/><text x="6.6550%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (196 samples, 0.10%)</title><rect x="6.4196%" y="437" width="0.0986%" height="15" fill="rgb(215,133,35)" fg:x="12763" fg:w="196"/><text x="6.6696%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (196 samples, 0.10%)</title><rect x="6.4196%" y="421" width="0.0986%" height="15" fill="rgb(213,28,5)" fg:x="12763" fg:w="196"/><text x="6.6696%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (367 samples, 0.18%)</title><rect x="6.5248%" y="437" width="0.1846%" height="15" fill="rgb(215,77,49)" fg:x="12972" fg:w="367"/><text x="6.7748%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (276 samples, 0.14%)</title><rect x="6.5705%" y="421" width="0.1388%" height="15" fill="rgb(248,100,22)" fg:x="13063" fg:w="276"/><text x="6.8205%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.04%)</title><rect x="6.8406%" y="229" width="0.0377%" height="15" fill="rgb(208,67,9)" fg:x="13600" fg:w="75"/><text x="7.0906%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (149 samples, 0.07%)</title><rect x="6.8235%" y="245" width="0.0749%" height="15" fill="rgb(219,133,21)" fg:x="13566" fg:w="149"/><text x="7.0735%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (40 samples, 0.02%)</title><rect x="6.8784%" y="229" width="0.0201%" height="15" fill="rgb(246,46,29)" fg:x="13675" fg:w="40"/><text x="7.1284%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (155 samples, 0.08%)</title><rect x="6.9427%" y="229" width="0.0780%" height="15" fill="rgb(246,185,52)" fg:x="13803" fg:w="155"/><text x="7.1927%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (582 samples, 0.29%)</title><rect x="6.7722%" y="293" width="0.2927%" height="15" fill="rgb(252,136,11)" fg:x="13464" fg:w="582"/><text x="7.0222%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (582 samples, 0.29%)</title><rect x="6.7722%" y="277" width="0.2927%" height="15" fill="rgb(219,138,53)" fg:x="13464" fg:w="582"/><text x="7.0222%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (582 samples, 0.29%)</title><rect x="6.7722%" y="261" width="0.2927%" height="15" fill="rgb(211,51,23)" fg:x="13464" fg:w="582"/><text x="7.0222%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (331 samples, 0.17%)</title><rect x="6.8985%" y="245" width="0.1665%" height="15" fill="rgb(247,221,28)" fg:x="13715" fg:w="331"/><text x="7.1485%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (88 samples, 0.04%)</title><rect x="7.0207%" y="229" width="0.0443%" height="15" fill="rgb(251,222,45)" fg:x="13958" fg:w="88"/><text x="7.2707%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (41 samples, 0.02%)</title><rect x="7.0650%" y="293" width="0.0206%" height="15" fill="rgb(217,162,53)" fg:x="14046" fg:w="41"/><text x="7.3150%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (41 samples, 0.02%)</title><rect x="7.0650%" y="277" width="0.0206%" height="15" fill="rgb(229,93,14)" fg:x="14046" fg:w="41"/><text x="7.3150%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (41 samples, 0.02%)</title><rect x="7.0650%" y="261" width="0.0206%" height="15" fill="rgb(209,67,49)" fg:x="14046" fg:w="41"/><text x="7.3150%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (40 samples, 0.02%)</title><rect x="7.0655%" y="245" width="0.0201%" height="15" fill="rgb(213,87,29)" fg:x="14047" fg:w="40"/><text x="7.3155%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.03%)</title><rect x="7.1072%" y="165" width="0.0342%" height="15" fill="rgb(205,151,52)" fg:x="14130" fg:w="68"/><text x="7.3572%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.01%)</title><rect x="7.1414%" y="165" width="0.0136%" height="15" fill="rgb(253,215,39)" fg:x="14198" fg:w="27"/><text x="7.3914%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (809 samples, 0.41%)</title><rect x="6.7591%" y="325" width="0.4069%" height="15" fill="rgb(221,220,41)" fg:x="13438" fg:w="809"/><text x="7.0091%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (809 samples, 0.41%)</title><rect x="6.7591%" y="309" width="0.4069%" height="15" fill="rgb(218,133,21)" fg:x="13438" fg:w="809"/><text x="7.0091%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (159 samples, 0.08%)</title><rect x="7.0861%" y="293" width="0.0800%" height="15" fill="rgb(221,193,43)" fg:x="14088" fg:w="159"/><text x="7.3361%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (120 samples, 0.06%)</title><rect x="7.1057%" y="277" width="0.0604%" height="15" fill="rgb(240,128,52)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (120 samples, 0.06%)</title><rect x="7.1057%" y="261" width="0.0604%" height="15" fill="rgb(253,114,12)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (120 samples, 0.06%)</title><rect x="7.1057%" y="245" width="0.0604%" height="15" fill="rgb(215,223,47)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (120 samples, 0.06%)</title><rect x="7.1057%" y="229" width="0.0604%" height="15" fill="rgb(248,225,23)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (120 samples, 0.06%)</title><rect x="7.1057%" y="213" width="0.0604%" height="15" fill="rgb(250,108,0)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (120 samples, 0.06%)</title><rect x="7.1057%" y="197" width="0.0604%" height="15" fill="rgb(228,208,7)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (120 samples, 0.06%)</title><rect x="7.1057%" y="181" width="0.0604%" height="15" fill="rgb(244,45,10)" fg:x="14127" fg:w="120"/><text x="7.3557%" y="191.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (22 samples, 0.01%)</title><rect x="7.1550%" y="165" width="0.0111%" height="15" fill="rgb(207,125,25)" fg:x="14225" fg:w="22"/><text x="7.4050%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.04%)</title><rect x="7.1832%" y="277" width="0.0372%" height="15" fill="rgb(210,195,18)" fg:x="14281" fg:w="74"/><text x="7.4332%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (63 samples, 0.03%)</title><rect x="7.1887%" y="261" width="0.0317%" height="15" fill="rgb(249,80,12)" fg:x="14292" fg:w="63"/><text x="7.4387%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (106 samples, 0.05%)</title><rect x="7.2204%" y="261" width="0.0533%" height="15" fill="rgb(221,65,9)" fg:x="14355" fg:w="106"/><text x="7.4704%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (106 samples, 0.05%)</title><rect x="7.2204%" y="245" width="0.0533%" height="15" fill="rgb(235,49,36)" fg:x="14355" fg:w="106"/><text x="7.4704%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (106 samples, 0.05%)</title><rect x="7.2204%" y="229" width="0.0533%" height="15" fill="rgb(225,32,20)" fg:x="14355" fg:w="106"/><text x="7.4704%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (106 samples, 0.05%)</title><rect x="7.2204%" y="213" width="0.0533%" height="15" fill="rgb(215,141,46)" fg:x="14355" fg:w="106"/><text x="7.4704%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (57 samples, 0.03%)</title><rect x="7.2737%" y="213" width="0.0287%" height="15" fill="rgb(250,160,47)" fg:x="14461" fg:w="57"/><text x="7.5237%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (172 samples, 0.09%)</title><rect x="7.2204%" y="277" width="0.0865%" height="15" fill="rgb(216,222,40)" fg:x="14355" fg:w="172"/><text x="7.4704%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (66 samples, 0.03%)</title><rect x="7.2737%" y="261" width="0.0332%" height="15" fill="rgb(234,217,39)" fg:x="14461" fg:w="66"/><text x="7.5237%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (66 samples, 0.03%)</title><rect x="7.2737%" y="245" width="0.0332%" height="15" fill="rgb(207,178,40)" fg:x="14461" fg:w="66"/><text x="7.5237%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (66 samples, 0.03%)</title><rect x="7.2737%" y="229" width="0.0332%" height="15" fill="rgb(221,136,13)" fg:x="14461" fg:w="66"/><text x="7.5237%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (168 samples, 0.08%)</title><rect x="7.3069%" y="277" width="0.0845%" height="15" fill="rgb(249,199,10)" fg:x="14527" fg:w="168"/><text x="7.5569%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (42 samples, 0.02%)</title><rect x="7.3914%" y="277" width="0.0211%" height="15" fill="rgb(249,222,13)" fg:x="14695" fg:w="42"/><text x="7.6414%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (42 samples, 0.02%)</title><rect x="7.3914%" y="261" width="0.0211%" height="15" fill="rgb(244,185,38)" fg:x="14695" fg:w="42"/><text x="7.6414%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.02%)</title><rect x="7.3914%" y="245" width="0.0211%" height="15" fill="rgb(236,202,9)" fg:x="14695" fg:w="42"/><text x="7.6414%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (577 samples, 0.29%)</title><rect x="7.1691%" y="293" width="0.2902%" height="15" fill="rgb(250,229,37)" fg:x="14253" fg:w="577"/><text x="7.4191%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (93 samples, 0.05%)</title><rect x="7.4125%" y="277" width="0.0468%" height="15" fill="rgb(206,174,23)" fg:x="14737" fg:w="93"/><text x="7.6625%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (93 samples, 0.05%)</title><rect x="7.4125%" y="261" width="0.0468%" height="15" fill="rgb(211,33,43)" fg:x="14737" fg:w="93"/><text x="7.6625%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,449 samples, 0.73%)</title><rect x="6.7385%" y="389" width="0.7288%" height="15" fill="rgb(245,58,50)" fg:x="13397" fg:w="1449"/><text x="6.9885%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,449 samples, 0.73%)</title><rect x="6.7385%" y="373" width="0.7288%" height="15" fill="rgb(244,68,36)" fg:x="13397" fg:w="1449"/><text x="6.9885%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,413 samples, 0.71%)</title><rect x="6.7566%" y="357" width="0.7107%" height="15" fill="rgb(232,229,15)" fg:x="13433" fg:w="1413"/><text x="7.0066%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,413 samples, 0.71%)</title><rect x="6.7566%" y="341" width="0.7107%" height="15" fill="rgb(254,30,23)" fg:x="13433" fg:w="1413"/><text x="7.0066%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (599 samples, 0.30%)</title><rect x="7.1661%" y="325" width="0.3013%" height="15" fill="rgb(235,160,14)" fg:x="14247" fg:w="599"/><text x="7.4161%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (599 samples, 0.30%)</title><rect x="7.1661%" y="309" width="0.3013%" height="15" fill="rgb(212,155,44)" fg:x="14247" fg:w="599"/><text x="7.4161%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (334 samples, 0.17%)</title><rect x="7.6213%" y="325" width="0.1680%" height="15" fill="rgb(226,2,50)" fg:x="15152" fg:w="334"/><text x="7.8713%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (44 samples, 0.02%)</title><rect x="7.8612%" y="181" width="0.0221%" height="15" fill="rgb(234,177,6)" fg:x="15629" fg:w="44"/><text x="8.1112%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (106 samples, 0.05%)</title><rect x="7.8456%" y="197" width="0.0533%" height="15" fill="rgb(217,24,9)" fg:x="15598" fg:w="106"/><text x="8.0956%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.02%)</title><rect x="7.8833%" y="181" width="0.0156%" height="15" fill="rgb(220,13,46)" fg:x="15673" fg:w="31"/><text x="8.1333%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (154 samples, 0.08%)</title><rect x="7.9507%" y="181" width="0.0775%" height="15" fill="rgb(239,221,27)" fg:x="15807" fg:w="154"/><text x="8.2007%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (493 samples, 0.25%)</title><rect x="7.8194%" y="245" width="0.2480%" height="15" fill="rgb(222,198,25)" fg:x="15546" fg:w="493"/><text x="8.0694%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (493 samples, 0.25%)</title><rect x="7.8194%" y="229" width="0.2480%" height="15" fill="rgb(211,99,13)" fg:x="15546" fg:w="493"/><text x="8.0694%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (493 samples, 0.25%)</title><rect x="7.8194%" y="213" width="0.2480%" height="15" fill="rgb(232,111,31)" fg:x="15546" fg:w="493"/><text x="8.0694%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (335 samples, 0.17%)</title><rect x="7.8989%" y="197" width="0.1685%" height="15" fill="rgb(245,82,37)" fg:x="15704" fg:w="335"/><text x="8.1489%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (78 samples, 0.04%)</title><rect x="8.0282%" y="181" width="0.0392%" height="15" fill="rgb(227,149,46)" fg:x="15961" fg:w="78"/><text x="8.2782%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (37 samples, 0.02%)</title><rect x="8.0674%" y="197" width="0.0186%" height="15" fill="rgb(218,36,50)" fg:x="16039" fg:w="37"/><text x="8.3174%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (60 samples, 0.03%)</title><rect x="8.0674%" y="245" width="0.0302%" height="15" fill="rgb(226,80,48)" fg:x="16039" fg:w="60"/><text x="8.3174%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (60 samples, 0.03%)</title><rect x="8.0674%" y="229" width="0.0302%" height="15" fill="rgb(238,224,15)" fg:x="16039" fg:w="60"/><text x="8.3174%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (60 samples, 0.03%)</title><rect x="8.0674%" y="213" width="0.0302%" height="15" fill="rgb(241,136,10)" fg:x="16039" fg:w="60"/><text x="8.3174%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (23 samples, 0.01%)</title><rect x="8.0860%" y="197" width="0.0116%" height="15" fill="rgb(208,32,45)" fg:x="16076" fg:w="23"/><text x="8.3360%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (54 samples, 0.03%)</title><rect x="8.1298%" y="117" width="0.0272%" height="15" fill="rgb(207,135,9)" fg:x="16163" fg:w="54"/><text x="8.3798%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (153 samples, 0.08%)</title><rect x="8.0976%" y="149" width="0.0770%" height="15" fill="rgb(206,86,44)" fg:x="16099" fg:w="153"/><text x="8.3476%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (123 samples, 0.06%)</title><rect x="8.1127%" y="133" width="0.0619%" height="15" fill="rgb(245,177,15)" fg:x="16129" fg:w="123"/><text x="8.3627%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="8.1570%" y="117" width="0.0176%" height="15" fill="rgb(206,64,50)" fg:x="16217" fg:w="35"/><text x="8.4070%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (719 samples, 0.36%)</title><rect x="7.8194%" y="261" width="0.3616%" height="15" fill="rgb(234,36,40)" fg:x="15546" fg:w="719"/><text x="8.0694%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (166 samples, 0.08%)</title><rect x="8.0976%" y="245" width="0.0835%" height="15" fill="rgb(213,64,8)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (166 samples, 0.08%)</title><rect x="8.0976%" y="229" width="0.0835%" height="15" fill="rgb(210,75,36)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (166 samples, 0.08%)</title><rect x="8.0976%" y="213" width="0.0835%" height="15" fill="rgb(229,88,21)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (166 samples, 0.08%)</title><rect x="8.0976%" y="197" width="0.0835%" height="15" fill="rgb(252,204,47)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (166 samples, 0.08%)</title><rect x="8.0976%" y="181" width="0.0835%" height="15" fill="rgb(208,77,27)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (166 samples, 0.08%)</title><rect x="8.0976%" y="165" width="0.0835%" height="15" fill="rgb(221,76,26)" fg:x="16099" fg:w="166"/><text x="8.3476%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (734 samples, 0.37%)</title><rect x="7.8194%" y="277" width="0.3692%" height="15" fill="rgb(225,139,18)" fg:x="15546" fg:w="734"/><text x="8.0694%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (26 samples, 0.01%)</title><rect x="8.2042%" y="197" width="0.0131%" height="15" fill="rgb(230,137,11)" fg:x="16311" fg:w="26"/><text x="8.4542%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (30 samples, 0.02%)</title><rect x="8.2042%" y="245" width="0.0151%" height="15" fill="rgb(212,28,1)" fg:x="16311" fg:w="30"/><text x="8.4542%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (30 samples, 0.02%)</title><rect x="8.2042%" y="229" width="0.0151%" height="15" fill="rgb(248,164,17)" fg:x="16311" fg:w="30"/><text x="8.4542%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (30 samples, 0.02%)</title><rect x="8.2042%" y="213" width="0.0151%" height="15" fill="rgb(222,171,42)" fg:x="16311" fg:w="30"/><text x="8.4542%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.03%)</title><rect x="8.2415%" y="229" width="0.0272%" height="15" fill="rgb(243,84,45)" fg:x="16385" fg:w="54"/><text x="8.4915%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (50 samples, 0.03%)</title><rect x="8.2435%" y="213" width="0.0251%" height="15" fill="rgb(252,49,23)" fg:x="16389" fg:w="50"/><text x="8.4935%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (30 samples, 0.02%)</title><rect x="8.2686%" y="229" width="0.0151%" height="15" fill="rgb(215,19,7)" fg:x="16439" fg:w="30"/><text x="8.5186%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (152 samples, 0.08%)</title><rect x="8.2837%" y="213" width="0.0765%" height="15" fill="rgb(238,81,41)" fg:x="16469" fg:w="152"/><text x="8.5337%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (152 samples, 0.08%)</title><rect x="8.2837%" y="197" width="0.0765%" height="15" fill="rgb(210,199,37)" fg:x="16469" fg:w="152"/><text x="8.5337%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (152 samples, 0.08%)</title><rect x="8.2837%" y="181" width="0.0765%" height="15" fill="rgb(244,192,49)" fg:x="16469" fg:w="152"/><text x="8.5337%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (152 samples, 0.08%)</title><rect x="8.2837%" y="165" width="0.0765%" height="15" fill="rgb(226,211,11)" fg:x="16469" fg:w="152"/><text x="8.5337%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (207 samples, 0.10%)</title><rect x="8.2837%" y="229" width="0.1041%" height="15" fill="rgb(236,162,54)" fg:x="16469" fg:w="207"/><text x="8.5337%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (55 samples, 0.03%)</title><rect x="8.3602%" y="213" width="0.0277%" height="15" fill="rgb(220,229,9)" fg:x="16621" fg:w="55"/><text x="8.6102%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (55 samples, 0.03%)</title><rect x="8.3602%" y="197" width="0.0277%" height="15" fill="rgb(250,87,22)" fg:x="16621" fg:w="55"/><text x="8.6102%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (55 samples, 0.03%)</title><rect x="8.3602%" y="181" width="0.0277%" height="15" fill="rgb(239,43,17)" fg:x="16621" fg:w="55"/><text x="8.6102%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (55 samples, 0.03%)</title><rect x="8.3602%" y="165" width="0.0277%" height="15" fill="rgb(231,177,25)" fg:x="16621" fg:w="55"/><text x="8.6102%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (107 samples, 0.05%)</title><rect x="8.3878%" y="229" width="0.0538%" height="15" fill="rgb(219,179,1)" fg:x="16676" fg:w="107"/><text x="8.6378%" y="239.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,843 samples, 0.93%)</title><rect x="7.5675%" y="341" width="0.9270%" height="15" fill="rgb(238,219,53)" fg:x="15045" fg:w="1843"/><text x="7.8175%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,391 samples, 0.70%)</title><rect x="7.7948%" y="325" width="0.6997%" height="15" fill="rgb(232,167,36)" fg:x="15497" fg:w="1391"/><text x="8.0448%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,391 samples, 0.70%)</title><rect x="7.7948%" y="309" width="0.6997%" height="15" fill="rgb(244,19,51)" fg:x="15497" fg:w="1391"/><text x="8.0448%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,355 samples, 0.68%)</title><rect x="7.8129%" y="293" width="0.6815%" height="15" fill="rgb(224,6,22)" fg:x="15533" fg:w="1355"/><text x="8.0629%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (608 samples, 0.31%)</title><rect x="8.1886%" y="277" width="0.3058%" height="15" fill="rgb(224,145,5)" fg:x="16280" fg:w="608"/><text x="8.4386%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (587 samples, 0.30%)</title><rect x="8.1992%" y="261" width="0.2953%" height="15" fill="rgb(234,130,49)" fg:x="16301" fg:w="587"/><text x="8.4492%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (547 samples, 0.28%)</title><rect x="8.2193%" y="245" width="0.2751%" height="15" fill="rgb(254,6,2)" fg:x="16341" fg:w="547"/><text x="8.4693%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (92 samples, 0.05%)</title><rect x="8.4482%" y="229" width="0.0463%" height="15" fill="rgb(208,96,46)" fg:x="16796" fg:w="92"/><text x="8.6982%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (92 samples, 0.05%)</title><rect x="8.4482%" y="213" width="0.0463%" height="15" fill="rgb(239,3,39)" fg:x="16796" fg:w="92"/><text x="8.6982%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,845 samples, 0.93%)</title><rect x="7.5675%" y="357" width="0.9280%" height="15" fill="rgb(233,210,1)" fg:x="15045" fg:w="1845"/><text x="7.8175%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (39 samples, 0.02%)</title><rect x="8.4955%" y="357" width="0.0196%" height="15" fill="rgb(244,137,37)" fg:x="16890" fg:w="39"/><text x="8.7455%" y="367.50"></text></g><g><title>core::ptr::read (25 samples, 0.01%)</title><rect x="8.5478%" y="341" width="0.0126%" height="15" fill="rgb(240,136,2)" fg:x="16994" fg:w="25"/><text x="8.7978%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (2,156 samples, 1.08%)</title><rect x="7.4789%" y="373" width="1.0844%" height="15" fill="rgb(239,18,37)" fg:x="14869" fg:w="2156"/><text x="7.7289%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (92 samples, 0.05%)</title><rect x="8.5171%" y="357" width="0.0463%" height="15" fill="rgb(218,185,22)" fg:x="16933" fg:w="92"/><text x="8.7671%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (2,433 samples, 1.22%)</title><rect x="7.4709%" y="389" width="1.2238%" height="15" fill="rgb(225,218,4)" fg:x="14853" fg:w="2433"/><text x="7.7209%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (261 samples, 0.13%)</title><rect x="8.5634%" y="373" width="0.1313%" height="15" fill="rgb(230,182,32)" fg:x="17025" fg:w="261"/><text x="8.8134%" y="383.50"></text></g><g><title>compare::Compare::compares_le (251 samples, 0.13%)</title><rect x="8.8315%" y="373" width="0.1262%" height="15" fill="rgb(242,56,43)" fg:x="17558" fg:w="251"/><text x="9.0815%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (251 samples, 0.13%)</title><rect x="8.8315%" y="357" width="0.1262%" height="15" fill="rgb(233,99,24)" fg:x="17558" fg:w="251"/><text x="9.0815%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (251 samples, 0.13%)</title><rect x="8.8315%" y="341" width="0.1262%" height="15" fill="rgb(234,209,42)" fg:x="17558" fg:w="251"/><text x="9.0815%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (186 samples, 0.09%)</title><rect x="9.0050%" y="341" width="0.0936%" height="15" fill="rgb(227,7,12)" fg:x="17903" fg:w="186"/><text x="9.2550%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (70 samples, 0.04%)</title><rect x="9.1634%" y="197" width="0.0352%" height="15" fill="rgb(245,203,43)" fg:x="18218" fg:w="70"/><text x="9.4134%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (127 samples, 0.06%)</title><rect x="9.1549%" y="213" width="0.0639%" height="15" fill="rgb(238,205,33)" fg:x="18201" fg:w="127"/><text x="9.4049%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (40 samples, 0.02%)</title><rect x="9.1986%" y="197" width="0.0201%" height="15" fill="rgb(231,56,7)" fg:x="18288" fg:w="40"/><text x="9.4486%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (105 samples, 0.05%)</title><rect x="9.2892%" y="197" width="0.0528%" height="15" fill="rgb(244,186,29)" fg:x="18468" fg:w="105"/><text x="9.5392%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (309 samples, 0.16%)</title><rect x="9.2188%" y="213" width="0.1554%" height="15" fill="rgb(234,111,31)" fg:x="18328" fg:w="309"/><text x="9.4688%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (64 samples, 0.03%)</title><rect x="9.3420%" y="197" width="0.0322%" height="15" fill="rgb(241,149,10)" fg:x="18573" fg:w="64"/><text x="9.5920%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (499 samples, 0.25%)</title><rect x="9.1237%" y="261" width="0.2510%" height="15" fill="rgb(249,206,44)" fg:x="18139" fg:w="499"/><text x="9.3737%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (499 samples, 0.25%)</title><rect x="9.1237%" y="245" width="0.2510%" height="15" fill="rgb(251,153,30)" fg:x="18139" fg:w="499"/><text x="9.3737%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (499 samples, 0.25%)</title><rect x="9.1237%" y="229" width="0.2510%" height="15" fill="rgb(239,152,38)" fg:x="18139" fg:w="499"/><text x="9.3737%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (56 samples, 0.03%)</title><rect x="9.3747%" y="261" width="0.0282%" height="15" fill="rgb(249,139,47)" fg:x="18638" fg:w="56"/><text x="9.6247%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (56 samples, 0.03%)</title><rect x="9.3747%" y="245" width="0.0282%" height="15" fill="rgb(244,64,35)" fg:x="18638" fg:w="56"/><text x="9.6247%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (56 samples, 0.03%)</title><rect x="9.3747%" y="229" width="0.0282%" height="15" fill="rgb(216,46,15)" fg:x="18638" fg:w="56"/><text x="9.6247%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (56 samples, 0.03%)</title><rect x="9.3747%" y="213" width="0.0282%" height="15" fill="rgb(250,74,19)" fg:x="18638" fg:w="56"/><text x="9.6247%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (31 samples, 0.02%)</title><rect x="9.4335%" y="133" width="0.0156%" height="15" fill="rgb(249,42,33)" fg:x="18755" fg:w="31"/><text x="9.6835%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (118 samples, 0.06%)</title><rect x="9.4029%" y="165" width="0.0594%" height="15" fill="rgb(242,149,17)" fg:x="18694" fg:w="118"/><text x="9.6529%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (90 samples, 0.05%)</title><rect x="9.4169%" y="149" width="0.0453%" height="15" fill="rgb(244,29,21)" fg:x="18722" fg:w="90"/><text x="9.6669%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.01%)</title><rect x="9.4491%" y="133" width="0.0131%" height="15" fill="rgb(220,130,37)" fg:x="18786" fg:w="26"/><text x="9.6991%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (708 samples, 0.36%)</title><rect x="9.1227%" y="277" width="0.3561%" height="15" fill="rgb(211,67,2)" fg:x="18137" fg:w="708"/><text x="9.3727%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (151 samples, 0.08%)</title><rect x="9.4029%" y="261" width="0.0760%" height="15" fill="rgb(235,68,52)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (151 samples, 0.08%)</title><rect x="9.4029%" y="245" width="0.0760%" height="15" fill="rgb(246,142,3)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (151 samples, 0.08%)</title><rect x="9.4029%" y="229" width="0.0760%" height="15" fill="rgb(241,25,7)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (151 samples, 0.08%)</title><rect x="9.4029%" y="213" width="0.0760%" height="15" fill="rgb(242,119,39)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (151 samples, 0.08%)</title><rect x="9.4029%" y="197" width="0.0760%" height="15" fill="rgb(241,98,45)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (151 samples, 0.08%)</title><rect x="9.4029%" y="181" width="0.0760%" height="15" fill="rgb(254,28,30)" fg:x="18694" fg:w="151"/><text x="9.6529%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (33 samples, 0.02%)</title><rect x="9.4622%" y="165" width="0.0166%" height="15" fill="rgb(241,142,54)" fg:x="18812" fg:w="33"/><text x="9.7122%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (709 samples, 0.36%)</title><rect x="9.1227%" y="293" width="0.3566%" height="15" fill="rgb(222,85,15)" fg:x="18137" fg:w="709"/><text x="9.3727%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (27 samples, 0.01%)</title><rect x="9.4944%" y="261" width="0.0136%" height="15" fill="rgb(210,85,47)" fg:x="18876" fg:w="27"/><text x="9.7444%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (27 samples, 0.01%)</title><rect x="9.4944%" y="245" width="0.0136%" height="15" fill="rgb(224,206,25)" fg:x="18876" fg:w="27"/><text x="9.7444%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (27 samples, 0.01%)</title><rect x="9.4944%" y="229" width="0.0136%" height="15" fill="rgb(243,201,19)" fg:x="18876" fg:w="27"/><text x="9.7444%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (27 samples, 0.01%)</title><rect x="9.4944%" y="213" width="0.0136%" height="15" fill="rgb(236,59,4)" fg:x="18876" fg:w="27"/><text x="9.7444%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.03%)</title><rect x="9.5301%" y="245" width="0.0312%" height="15" fill="rgb(254,179,45)" fg:x="18947" fg:w="62"/><text x="9.7801%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (59 samples, 0.03%)</title><rect x="9.5316%" y="229" width="0.0297%" height="15" fill="rgb(226,14,10)" fg:x="18950" fg:w="59"/><text x="9.7816%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (34 samples, 0.02%)</title><rect x="9.5618%" y="245" width="0.0171%" height="15" fill="rgb(244,27,41)" fg:x="19010" fg:w="34"/><text x="9.8118%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (147 samples, 0.07%)</title><rect x="9.5789%" y="229" width="0.0739%" height="15" fill="rgb(235,35,32)" fg:x="19044" fg:w="147"/><text x="9.8289%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (147 samples, 0.07%)</title><rect x="9.5789%" y="213" width="0.0739%" height="15" fill="rgb(218,68,31)" fg:x="19044" fg:w="147"/><text x="9.8289%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (147 samples, 0.07%)</title><rect x="9.5789%" y="197" width="0.0739%" height="15" fill="rgb(207,120,37)" fg:x="19044" fg:w="147"/><text x="9.8289%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (147 samples, 0.07%)</title><rect x="9.5789%" y="181" width="0.0739%" height="15" fill="rgb(227,98,0)" fg:x="19044" fg:w="147"/><text x="9.8289%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (65 samples, 0.03%)</title><rect x="9.6528%" y="181" width="0.0327%" height="15" fill="rgb(207,7,3)" fg:x="19191" fg:w="65"/><text x="9.9028%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (213 samples, 0.11%)</title><rect x="9.5789%" y="245" width="0.1071%" height="15" fill="rgb(206,98,19)" fg:x="19044" fg:w="213"/><text x="9.8289%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (66 samples, 0.03%)</title><rect x="9.6528%" y="229" width="0.0332%" height="15" fill="rgb(217,5,26)" fg:x="19191" fg:w="66"/><text x="9.9028%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (66 samples, 0.03%)</title><rect x="9.6528%" y="213" width="0.0332%" height="15" fill="rgb(235,190,38)" fg:x="19191" fg:w="66"/><text x="9.9028%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (66 samples, 0.03%)</title><rect x="9.6528%" y="197" width="0.0332%" height="15" fill="rgb(247,86,24)" fg:x="19191" fg:w="66"/><text x="9.9028%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (77 samples, 0.04%)</title><rect x="9.6860%" y="245" width="0.0387%" height="15" fill="rgb(205,101,16)" fg:x="19257" fg:w="77"/><text x="9.9360%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,600 samples, 0.80%)</title><rect x="8.9577%" y="373" width="0.8048%" height="15" fill="rgb(246,168,33)" fg:x="17809" fg:w="1600"/><text x="9.2077%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,600 samples, 0.80%)</title><rect x="8.9577%" y="357" width="0.8048%" height="15" fill="rgb(231,114,1)" fg:x="17809" fg:w="1600"/><text x="9.2077%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,310 samples, 0.66%)</title><rect x="9.1036%" y="341" width="0.6589%" height="15" fill="rgb(207,184,53)" fg:x="18099" fg:w="1310"/><text x="9.3536%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,310 samples, 0.66%)</title><rect x="9.1036%" y="325" width="0.6589%" height="15" fill="rgb(224,95,51)" fg:x="18099" fg:w="1310"/><text x="9.3536%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,275 samples, 0.64%)</title><rect x="9.1212%" y="309" width="0.6413%" height="15" fill="rgb(212,188,45)" fg:x="18134" fg:w="1275"/><text x="9.3712%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (563 samples, 0.28%)</title><rect x="9.4793%" y="293" width="0.2832%" height="15" fill="rgb(223,154,38)" fg:x="18846" fg:w="563"/><text x="9.7293%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (533 samples, 0.27%)</title><rect x="9.4944%" y="277" width="0.2681%" height="15" fill="rgb(251,22,52)" fg:x="18876" fg:w="533"/><text x="9.7444%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (506 samples, 0.25%)</title><rect x="9.5080%" y="261" width="0.2545%" height="15" fill="rgb(229,209,22)" fg:x="18903" fg:w="506"/><text x="9.7580%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (66 samples, 0.03%)</title><rect x="9.7293%" y="245" width="0.0332%" height="15" fill="rgb(234,138,34)" fg:x="19343" fg:w="66"/><text x="9.9793%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (66 samples, 0.03%)</title><rect x="9.7293%" y="229" width="0.0332%" height="15" fill="rgb(212,95,11)" fg:x="19343" fg:w="66"/><text x="9.9793%" y="239.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::get (30 samples, 0.02%)</title><rect x="9.7625%" y="373" width="0.0151%" height="15" fill="rgb(240,179,47)" fg:x="19409" fg:w="30"/><text x="10.0125%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (6,218 samples, 3.13%)</title><rect x="6.7094%" y="437" width="3.1276%" height="15" fill="rgb(240,163,11)" fg:x="13339" fg:w="6218"/><text x="6.9594%" y="447.50">cor..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (6,218 samples, 3.13%)</title><rect x="6.7094%" y="421" width="3.1276%" height="15" fill="rgb(236,37,12)" fg:x="13339" fg:w="6218"/><text x="6.9594%" y="431.50">&lt;mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (6,189 samples, 3.11%)</title><rect x="6.7239%" y="405" width="3.1130%" height="15" fill="rgb(232,164,16)" fg:x="13368" fg:w="6189"/><text x="6.9739%" y="415.50">mut..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2,271 samples, 1.14%)</title><rect x="8.6946%" y="389" width="1.1423%" height="15" fill="rgb(244,205,15)" fg:x="17286" fg:w="2271"/><text x="8.9446%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (118 samples, 0.06%)</title><rect x="9.7776%" y="373" width="0.0594%" height="15" fill="rgb(223,117,47)" fg:x="19439" fg:w="118"/><text x="10.0276%" y="383.50"></text></g><g><title>core::ptr::read (44 samples, 0.02%)</title><rect x="9.8148%" y="357" width="0.0221%" height="15" fill="rgb(244,107,35)" fg:x="19513" fg:w="44"/><text x="10.0648%" y="367.50"></text></g><g><title>log::__private_api::log (29 samples, 0.01%)</title><rect x="9.8369%" y="437" width="0.0146%" height="15" fill="rgb(205,140,8)" fg:x="19557" fg:w="29"/><text x="10.0869%" y="447.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (29 samples, 0.01%)</title><rect x="9.8369%" y="421" width="0.0146%" height="15" fill="rgb(228,84,46)" fg:x="19557" fg:w="29"/><text x="10.0869%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (152 samples, 0.08%)</title><rect x="10.0432%" y="277" width="0.0765%" height="15" fill="rgb(254,188,9)" fg:x="19967" fg:w="152"/><text x="10.2932%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (357 samples, 0.18%)</title><rect x="9.9924%" y="293" width="0.1796%" height="15" fill="rgb(206,112,54)" fg:x="19866" fg:w="357"/><text x="10.2424%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (104 samples, 0.05%)</title><rect x="10.1196%" y="277" width="0.0523%" height="15" fill="rgb(216,84,49)" fg:x="20119" fg:w="104"/><text x="10.3696%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (572 samples, 0.29%)</title><rect x="10.2851%" y="277" width="0.2877%" height="15" fill="rgb(214,194,35)" fg:x="20448" fg:w="572"/><text x="10.5351%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,193 samples, 0.60%)</title><rect x="10.1719%" y="293" width="0.6001%" height="15" fill="rgb(249,28,3)" fg:x="20223" fg:w="1193"/><text x="10.4219%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (396 samples, 0.20%)</title><rect x="10.5728%" y="277" width="0.1992%" height="15" fill="rgb(222,56,52)" fg:x="21020" fg:w="396"/><text x="10.8228%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,703 samples, 0.86%)</title><rect x="9.9164%" y="341" width="0.8566%" height="15" fill="rgb(245,217,50)" fg:x="19715" fg:w="1703"/><text x="10.1664%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,703 samples, 0.86%)</title><rect x="9.9164%" y="325" width="0.8566%" height="15" fill="rgb(213,201,24)" fg:x="19715" fg:w="1703"/><text x="10.1664%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,703 samples, 0.86%)</title><rect x="9.9164%" y="309" width="0.8566%" height="15" fill="rgb(248,116,28)" fg:x="19715" fg:w="1703"/><text x="10.1664%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (154 samples, 0.08%)</title><rect x="10.7730%" y="341" width="0.0775%" height="15" fill="rgb(219,72,43)" fg:x="21418" fg:w="154"/><text x="11.0230%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (154 samples, 0.08%)</title><rect x="10.7730%" y="325" width="0.0775%" height="15" fill="rgb(209,138,14)" fg:x="21418" fg:w="154"/><text x="11.0230%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (154 samples, 0.08%)</title><rect x="10.7730%" y="309" width="0.0775%" height="15" fill="rgb(222,18,33)" fg:x="21418" fg:w="154"/><text x="11.0230%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (143 samples, 0.07%)</title><rect x="10.7785%" y="293" width="0.0719%" height="15" fill="rgb(213,199,7)" fg:x="21429" fg:w="143"/><text x="11.0285%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (91 samples, 0.05%)</title><rect x="10.9541%" y="213" width="0.0458%" height="15" fill="rgb(250,110,10)" fg:x="21778" fg:w="91"/><text x="11.2041%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (368 samples, 0.19%)</title><rect x="10.8590%" y="325" width="0.1851%" height="15" fill="rgb(248,123,6)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (368 samples, 0.19%)</title><rect x="10.8590%" y="309" width="0.1851%" height="15" fill="rgb(206,91,31)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (368 samples, 0.19%)</title><rect x="10.8590%" y="293" width="0.1851%" height="15" fill="rgb(211,154,13)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (368 samples, 0.19%)</title><rect x="10.8590%" y="277" width="0.1851%" height="15" fill="rgb(225,148,7)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (368 samples, 0.19%)</title><rect x="10.8590%" y="261" width="0.1851%" height="15" fill="rgb(220,160,43)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (368 samples, 0.19%)</title><rect x="10.8590%" y="245" width="0.1851%" height="15" fill="rgb(213,52,39)" fg:x="21589" fg:w="368"/><text x="11.1090%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (278 samples, 0.14%)</title><rect x="10.9043%" y="229" width="0.1398%" height="15" fill="rgb(243,137,7)" fg:x="21679" fg:w="278"/><text x="11.1543%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (88 samples, 0.04%)</title><rect x="10.9998%" y="213" width="0.0443%" height="15" fill="rgb(230,79,13)" fg:x="21869" fg:w="88"/><text x="11.2498%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,267 samples, 1.14%)</title><rect x="9.9043%" y="357" width="1.1403%" height="15" fill="rgb(247,105,23)" fg:x="19691" fg:w="2267"/><text x="10.1543%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (385 samples, 0.19%)</title><rect x="10.8510%" y="341" width="0.1937%" height="15" fill="rgb(223,179,41)" fg:x="21573" fg:w="385"/><text x="11.1010%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (2,272 samples, 1.14%)</title><rect x="9.9028%" y="373" width="1.1428%" height="15" fill="rgb(218,9,34)" fg:x="19688" fg:w="2272"/><text x="10.1528%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (523 samples, 0.26%)</title><rect x="11.1050%" y="325" width="0.2631%" height="15" fill="rgb(222,106,8)" fg:x="22078" fg:w="523"/><text x="11.3550%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (522 samples, 0.26%)</title><rect x="11.1055%" y="309" width="0.2626%" height="15" fill="rgb(211,220,0)" fg:x="22079" fg:w="522"/><text x="11.3555%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (432 samples, 0.22%)</title><rect x="11.3720%" y="309" width="0.2173%" height="15" fill="rgb(229,52,16)" fg:x="22609" fg:w="432"/><text x="11.6220%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (432 samples, 0.22%)</title><rect x="11.3720%" y="293" width="0.2173%" height="15" fill="rgb(212,155,18)" fg:x="22609" fg:w="432"/><text x="11.6220%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (432 samples, 0.22%)</title><rect x="11.3720%" y="277" width="0.2173%" height="15" fill="rgb(242,21,14)" fg:x="22609" fg:w="432"/><text x="11.6220%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (432 samples, 0.22%)</title><rect x="11.3720%" y="261" width="0.2173%" height="15" fill="rgb(222,19,48)" fg:x="22609" fg:w="432"/><text x="11.6220%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (86 samples, 0.04%)</title><rect x="11.5893%" y="261" width="0.0433%" height="15" fill="rgb(232,45,27)" fg:x="23041" fg:w="86"/><text x="11.8393%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (522 samples, 0.26%)</title><rect x="11.3720%" y="325" width="0.2626%" height="15" fill="rgb(249,103,42)" fg:x="22609" fg:w="522"/><text x="11.6220%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (90 samples, 0.05%)</title><rect x="11.5893%" y="309" width="0.0453%" height="15" fill="rgb(246,81,33)" fg:x="23041" fg:w="90"/><text x="11.8393%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (90 samples, 0.05%)</title><rect x="11.5893%" y="293" width="0.0453%" height="15" fill="rgb(252,33,42)" fg:x="23041" fg:w="90"/><text x="11.8393%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (90 samples, 0.05%)</title><rect x="11.5893%" y="277" width="0.0453%" height="15" fill="rgb(209,212,41)" fg:x="23041" fg:w="90"/><text x="11.8393%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (461 samples, 0.23%)</title><rect x="11.6346%" y="325" width="0.2319%" height="15" fill="rgb(207,154,6)" fg:x="23131" fg:w="461"/><text x="11.8846%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (203 samples, 0.10%)</title><rect x="11.8665%" y="325" width="0.1021%" height="15" fill="rgb(223,64,47)" fg:x="23592" fg:w="203"/><text x="12.1165%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (203 samples, 0.10%)</title><rect x="11.8665%" y="309" width="0.1021%" height="15" fill="rgb(211,161,38)" fg:x="23592" fg:w="203"/><text x="12.1165%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (203 samples, 0.10%)</title><rect x="11.8665%" y="293" width="0.1021%" height="15" fill="rgb(219,138,40)" fg:x="23592" fg:w="203"/><text x="12.1165%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (340 samples, 0.17%)</title><rect x="11.9686%" y="325" width="0.1710%" height="15" fill="rgb(241,228,46)" fg:x="23795" fg:w="340"/><text x="12.2186%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (340 samples, 0.17%)</title><rect x="11.9686%" y="309" width="0.1710%" height="15" fill="rgb(223,209,38)" fg:x="23795" fg:w="340"/><text x="12.2186%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,480 samples, 1.25%)</title><rect x="11.0456%" y="341" width="1.2474%" height="15" fill="rgb(236,164,45)" fg:x="21960" fg:w="2480"/><text x="11.2956%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (305 samples, 0.15%)</title><rect x="12.1396%" y="325" width="0.1534%" height="15" fill="rgb(231,15,5)" fg:x="24135" fg:w="305"/><text x="12.3896%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (305 samples, 0.15%)</title><rect x="12.1396%" y="309" width="0.1534%" height="15" fill="rgb(252,35,15)" fg:x="24135" fg:w="305"/><text x="12.3896%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (305 samples, 0.15%)</title><rect x="12.1396%" y="293" width="0.1534%" height="15" fill="rgb(248,181,18)" fg:x="24135" fg:w="305"/><text x="12.3896%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,905 samples, 2.47%)</title><rect x="9.8515%" y="389" width="2.4672%" height="15" fill="rgb(233,39,42)" fg:x="19586" fg:w="4905"/><text x="10.1015%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,531 samples, 1.27%)</title><rect x="11.0456%" y="373" width="1.2731%" height="15" fill="rgb(238,110,33)" fg:x="21960" fg:w="2531"/><text x="11.2956%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,531 samples, 1.27%)</title><rect x="11.0456%" y="357" width="1.2731%" height="15" fill="rgb(233,195,10)" fg:x="21960" fg:w="2531"/><text x="11.2956%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (51 samples, 0.03%)</title><rect x="12.2930%" y="341" width="0.0257%" height="15" fill="rgb(254,105,3)" fg:x="24440" fg:w="51"/><text x="12.5430%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (4,916 samples, 2.47%)</title><rect x="9.8515%" y="437" width="2.4727%" height="15" fill="rgb(221,225,9)" fg:x="19586" fg:w="4916"/><text x="10.1015%" y="447.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,916 samples, 2.47%)</title><rect x="9.8515%" y="421" width="2.4727%" height="15" fill="rgb(224,227,45)" fg:x="19586" fg:w="4916"/><text x="10.1015%" y="431.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,916 samples, 2.47%)</title><rect x="9.8515%" y="405" width="2.4727%" height="15" fill="rgb(229,198,43)" fg:x="19586" fg:w="4916"/><text x="10.1015%" y="415.50">ha..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (12,490 samples, 6.28%)</title><rect x="6.0424%" y="453" width="6.2823%" height="15" fill="rgb(206,209,35)" fg:x="12013" fg:w="12490"/><text x="6.2924%" y="463.50">project1..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (56 samples, 0.03%)</title><rect x="12.3428%" y="421" width="0.0282%" height="15" fill="rgb(245,195,53)" fg:x="24539" fg:w="56"/><text x="12.5928%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (211 samples, 0.11%)</title><rect x="12.6592%" y="357" width="0.1061%" height="15" fill="rgb(240,92,26)" fg:x="25168" fg:w="211"/><text x="12.9092%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (211 samples, 0.11%)</title><rect x="12.6592%" y="341" width="0.1061%" height="15" fill="rgb(207,40,23)" fg:x="25168" fg:w="211"/><text x="12.9092%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (113 samples, 0.06%)</title><rect x="13.2442%" y="325" width="0.0568%" height="15" fill="rgb(223,111,35)" fg:x="26331" fg:w="113"/><text x="13.4942%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 0.02%)</title><rect x="13.3010%" y="309" width="0.0226%" height="15" fill="rgb(229,147,28)" fg:x="26444" fg:w="45"/><text x="13.5510%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (295 samples, 0.15%)</title><rect x="13.2442%" y="341" width="0.1484%" height="15" fill="rgb(211,29,28)" fg:x="26331" fg:w="295"/><text x="13.4942%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (182 samples, 0.09%)</title><rect x="13.3010%" y="325" width="0.0915%" height="15" fill="rgb(228,72,33)" fg:x="26444" fg:w="182"/><text x="13.5510%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (137 samples, 0.07%)</title><rect x="13.3236%" y="309" width="0.0689%" height="15" fill="rgb(205,214,31)" fg:x="26489" fg:w="137"/><text x="13.5736%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.11%)</title><rect x="13.3956%" y="341" width="0.1081%" height="15" fill="rgb(224,111,15)" fg:x="26632" fg:w="215"/><text x="13.6456%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (188 samples, 0.09%)</title><rect x="13.4092%" y="325" width="0.0946%" height="15" fill="rgb(253,21,26)" fg:x="26659" fg:w="188"/><text x="13.6592%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (633 samples, 0.32%)</title><rect x="13.5037%" y="309" width="0.3184%" height="15" fill="rgb(245,139,43)" fg:x="26847" fg:w="633"/><text x="13.7537%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (619 samples, 0.31%)</title><rect x="13.5108%" y="293" width="0.3113%" height="15" fill="rgb(252,170,7)" fg:x="26861" fg:w="619"/><text x="13.7608%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (661 samples, 0.33%)</title><rect x="13.5037%" y="341" width="0.3325%" height="15" fill="rgb(231,118,14)" fg:x="26847" fg:w="661"/><text x="13.7537%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (661 samples, 0.33%)</title><rect x="13.5037%" y="325" width="0.3325%" height="15" fill="rgb(238,83,0)" fg:x="26847" fg:w="661"/><text x="13.7537%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (28 samples, 0.01%)</title><rect x="13.8221%" y="309" width="0.0141%" height="15" fill="rgb(221,39,39)" fg:x="27480" fg:w="28"/><text x="14.0721%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (28 samples, 0.01%)</title><rect x="13.8221%" y="293" width="0.0141%" height="15" fill="rgb(222,119,46)" fg:x="27480" fg:w="28"/><text x="14.0721%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (34 samples, 0.02%)</title><rect x="13.8362%" y="341" width="0.0171%" height="15" fill="rgb(222,165,49)" fg:x="27508" fg:w="34"/><text x="14.0862%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (96 samples, 0.05%)</title><rect x="13.8533%" y="341" width="0.0483%" height="15" fill="rgb(219,113,52)" fg:x="27542" fg:w="96"/><text x="14.1033%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (90 samples, 0.05%)</title><rect x="13.9016%" y="341" width="0.0453%" height="15" fill="rgb(214,7,15)" fg:x="27638" fg:w="90"/><text x="14.1516%" y="351.50"></text></g><g><title>core::ptr::read (55 samples, 0.03%)</title><rect x="13.9192%" y="325" width="0.0277%" height="15" fill="rgb(235,32,4)" fg:x="27673" fg:w="55"/><text x="14.1692%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (246 samples, 0.12%)</title><rect x="13.9468%" y="341" width="0.1237%" height="15" fill="rgb(238,90,54)" fg:x="27728" fg:w="246"/><text x="14.1968%" y="351.50"></text></g><g><title>core::ptr::write (123 samples, 0.06%)</title><rect x="14.0087%" y="325" width="0.0619%" height="15" fill="rgb(213,208,19)" fg:x="27851" fg:w="123"/><text x="14.2587%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (34 samples, 0.02%)</title><rect x="14.0706%" y="341" width="0.0171%" height="15" fill="rgb(233,156,4)" fg:x="27974" fg:w="34"/><text x="14.3206%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (368 samples, 0.19%)</title><rect x="14.0887%" y="341" width="0.1851%" height="15" fill="rgb(207,194,5)" fg:x="28010" fg:w="368"/><text x="14.3387%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (21 samples, 0.01%)</title><rect x="14.2738%" y="341" width="0.0106%" height="15" fill="rgb(206,111,30)" fg:x="28378" fg:w="21"/><text x="14.5238%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.01%)</title><rect x="14.2843%" y="293" width="0.0116%" height="15" fill="rgb(243,70,54)" fg:x="28399" fg:w="23"/><text x="14.5343%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (48 samples, 0.02%)</title><rect x="14.2959%" y="277" width="0.0241%" height="15" fill="rgb(242,28,8)" fg:x="28422" fg:w="48"/><text x="14.5459%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (90 samples, 0.05%)</title><rect x="14.2843%" y="341" width="0.0453%" height="15" fill="rgb(219,106,18)" fg:x="28399" fg:w="90"/><text x="14.5343%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (90 samples, 0.05%)</title><rect x="14.2843%" y="325" width="0.0453%" height="15" fill="rgb(244,222,10)" fg:x="28399" fg:w="90"/><text x="14.5343%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (90 samples, 0.05%)</title><rect x="14.2843%" y="309" width="0.0453%" height="15" fill="rgb(236,179,52)" fg:x="28399" fg:w="90"/><text x="14.5343%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (67 samples, 0.03%)</title><rect x="14.2959%" y="293" width="0.0337%" height="15" fill="rgb(213,23,39)" fg:x="28422" fg:w="67"/><text x="14.5459%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (179 samples, 0.09%)</title><rect x="14.3296%" y="341" width="0.0900%" height="15" fill="rgb(238,48,10)" fg:x="28489" fg:w="179"/><text x="14.5796%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (179 samples, 0.09%)</title><rect x="14.3296%" y="325" width="0.0900%" height="15" fill="rgb(251,196,23)" fg:x="28489" fg:w="179"/><text x="14.5796%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.02%)</title><rect x="14.4005%" y="309" width="0.0191%" height="15" fill="rgb(250,152,24)" fg:x="28630" fg:w="38"/><text x="14.6505%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.02%)</title><rect x="14.4005%" y="293" width="0.0191%" height="15" fill="rgb(209,150,17)" fg:x="28630" fg:w="38"/><text x="14.6505%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.02%)</title><rect x="14.4005%" y="277" width="0.0191%" height="15" fill="rgb(234,202,34)" fg:x="28630" fg:w="38"/><text x="14.6505%" y="287.50"></text></g><g><title>project1::solver::types::Lit::var (722 samples, 0.36%)</title><rect x="14.4197%" y="341" width="0.3632%" height="15" fill="rgb(253,148,53)" fg:x="28668" fg:w="722"/><text x="14.6697%" y="351.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (134 samples, 0.07%)</title><rect x="14.7154%" y="325" width="0.0674%" height="15" fill="rgb(218,129,16)" fg:x="29256" fg:w="134"/><text x="14.9654%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (4,012 samples, 2.02%)</title><rect x="12.7653%" y="357" width="2.0180%" height="15" fill="rgb(216,85,19)" fg:x="25379" fg:w="4012"/><text x="13.0153%" y="367.50">p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.01%)</title><rect x="14.7833%" y="325" width="0.0146%" height="15" fill="rgb(235,228,7)" fg:x="29391" fg:w="29"/><text x="15.0333%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (67 samples, 0.03%)</title><rect x="14.7833%" y="357" width="0.0337%" height="15" fill="rgb(245,175,0)" fg:x="29391" fg:w="67"/><text x="15.0333%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (67 samples, 0.03%)</title><rect x="14.7833%" y="341" width="0.0337%" height="15" fill="rgb(208,168,36)" fg:x="29391" fg:w="67"/><text x="15.0333%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.02%)</title><rect x="14.7979%" y="325" width="0.0191%" height="15" fill="rgb(246,171,24)" fg:x="29420" fg:w="38"/><text x="15.0479%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.02%)</title><rect x="14.7979%" y="309" width="0.0191%" height="15" fill="rgb(215,142,24)" fg:x="29420" fg:w="38"/><text x="15.0479%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (4,587 samples, 2.31%)</title><rect x="12.5224%" y="389" width="2.3072%" height="15" fill="rgb(250,187,7)" fg:x="24896" fg:w="4587"/><text x="12.7724%" y="399.50">a..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (4,587 samples, 2.31%)</title><rect x="12.5224%" y="373" width="2.3072%" height="15" fill="rgb(228,66,33)" fg:x="24896" fg:w="4587"/><text x="12.7724%" y="383.50">p..</text></g><g><title>project1::solver::types::Lit::var (25 samples, 0.01%)</title><rect x="14.8170%" y="357" width="0.0126%" height="15" fill="rgb(234,215,21)" fg:x="29458" fg:w="25"/><text x="15.0670%" y="367.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (25 samples, 0.01%)</title><rect x="14.8170%" y="341" width="0.0126%" height="15" fill="rgb(222,191,20)" fg:x="29458" fg:w="25"/><text x="15.0670%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (5,068 samples, 2.55%)</title><rect x="12.3780%" y="405" width="2.5491%" height="15" fill="rgb(245,79,54)" fg:x="24609" fg:w="5068"/><text x="12.6280%" y="415.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (193 samples, 0.10%)</title><rect x="14.8301%" y="389" width="0.0971%" height="15" fill="rgb(240,10,37)" fg:x="29484" fg:w="193"/><text x="15.0801%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="14.9277%" y="373" width="0.0101%" height="15" fill="rgb(214,192,32)" fg:x="29678" fg:w="20"/><text x="15.1777%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (5,104 samples, 2.57%)</title><rect x="12.3710%" y="421" width="2.5672%" height="15" fill="rgb(209,36,54)" fg:x="24595" fg:w="5104"/><text x="12.6210%" y="431.50">al..</text></g><g><title>core::mem::drop (21 samples, 0.01%)</title><rect x="14.9277%" y="405" width="0.0106%" height="15" fill="rgb(220,10,11)" fg:x="29678" fg:w="21"/><text x="15.1777%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain_mut::BackshiftOnDrop&lt;project1::solver::types::Lit,alloc::alloc::Global&gt;&gt; (21 samples, 0.01%)</title><rect x="14.9277%" y="389" width="0.0106%" height="15" fill="rgb(221,106,17)" fg:x="29678" fg:w="21"/><text x="15.1777%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5,164 samples, 2.60%)</title><rect x="12.3413%" y="437" width="2.5974%" height="15" fill="rgb(251,142,44)" fg:x="24536" fg:w="5164"/><text x="12.5913%" y="447.50">al..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.02%)</title><rect x="14.9508%" y="405" width="0.0231%" height="15" fill="rgb(238,13,15)" fg:x="29724" fg:w="46"/><text x="15.2008%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (110 samples, 0.06%)</title><rect x="14.9915%" y="389" width="0.0553%" height="15" fill="rgb(208,107,27)" fg:x="29805" fg:w="110"/><text x="15.2415%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (70 samples, 0.04%)</title><rect x="15.0117%" y="373" width="0.0352%" height="15" fill="rgb(205,136,37)" fg:x="29845" fg:w="70"/><text x="15.2617%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (70 samples, 0.04%)</title><rect x="15.0117%" y="357" width="0.0352%" height="15" fill="rgb(250,205,27)" fg:x="29845" fg:w="70"/><text x="15.2617%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (253 samples, 0.13%)</title><rect x="14.9392%" y="421" width="0.1273%" height="15" fill="rgb(210,80,43)" fg:x="29701" fg:w="253"/><text x="15.1892%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (184 samples, 0.09%)</title><rect x="14.9739%" y="405" width="0.0925%" height="15" fill="rgb(247,160,36)" fg:x="29770" fg:w="184"/><text x="15.2239%" y="415.50"></text></g><g><title>project1::solver::types::Lit::var (39 samples, 0.02%)</title><rect x="15.0469%" y="389" width="0.0196%" height="15" fill="rgb(234,13,49)" fg:x="29915" fg:w="39"/><text x="15.2969%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (39 samples, 0.02%)</title><rect x="15.0469%" y="373" width="0.0196%" height="15" fill="rgb(234,122,0)" fg:x="29915" fg:w="39"/><text x="15.2969%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (5,452 samples, 2.74%)</title><rect x="12.3247%" y="453" width="2.7423%" height="15" fill="rgb(207,146,38)" fg:x="24503" fg:w="5452"/><text x="12.5747%" y="463.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (254 samples, 0.13%)</title><rect x="14.9392%" y="437" width="0.1278%" height="15" fill="rgb(207,177,25)" fg:x="29701" fg:w="254"/><text x="15.1892%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (79 samples, 0.04%)</title><rect x="15.2682%" y="405" width="0.0397%" height="15" fill="rgb(211,178,42)" fg:x="30355" fg:w="79"/><text x="15.5182%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (36 samples, 0.02%)</title><rect x="15.2898%" y="389" width="0.0181%" height="15" fill="rgb(230,69,54)" fg:x="30398" fg:w="36"/><text x="15.5398%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (36 samples, 0.02%)</title><rect x="15.2898%" y="373" width="0.0181%" height="15" fill="rgb(214,135,41)" fg:x="30398" fg:w="36"/><text x="15.5398%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (495 samples, 0.25%)</title><rect x="15.0670%" y="453" width="0.2490%" height="15" fill="rgb(237,67,25)" fg:x="29955" fg:w="495"/><text x="15.3170%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (495 samples, 0.25%)</title><rect x="15.0670%" y="437" width="0.2490%" height="15" fill="rgb(222,189,50)" fg:x="29955" fg:w="495"/><text x="15.3170%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (95 samples, 0.05%)</title><rect x="15.2682%" y="421" width="0.0478%" height="15" fill="rgb(245,148,34)" fg:x="30355" fg:w="95"/><text x="15.5182%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (25 samples, 0.01%)</title><rect x="15.3160%" y="453" width="0.0126%" height="15" fill="rgb(222,29,6)" fg:x="30450" fg:w="25"/><text x="15.5660%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.01%)</title><rect x="15.3160%" y="437" width="0.0126%" height="15" fill="rgb(221,189,43)" fg:x="30450" fg:w="25"/><text x="15.5660%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (25 samples, 0.01%)</title><rect x="15.3160%" y="421" width="0.0126%" height="15" fill="rgb(207,36,27)" fg:x="30450" fg:w="25"/><text x="15.5660%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (25 samples, 0.01%)</title><rect x="15.3160%" y="405" width="0.0126%" height="15" fill="rgb(217,90,24)" fg:x="30450" fg:w="25"/><text x="15.5660%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (226 samples, 0.11%)</title><rect x="15.3286%" y="453" width="0.1137%" height="15" fill="rgb(224,66,35)" fg:x="30475" fg:w="226"/><text x="15.5786%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (196 samples, 0.10%)</title><rect x="15.4422%" y="453" width="0.0986%" height="15" fill="rgb(221,13,50)" fg:x="30701" fg:w="196"/><text x="15.6922%" y="463.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (196 samples, 0.10%)</title><rect x="15.4422%" y="437" width="0.0986%" height="15" fill="rgb(236,68,49)" fg:x="30701" fg:w="196"/><text x="15.6922%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (196 samples, 0.10%)</title><rect x="15.4422%" y="421" width="0.0986%" height="15" fill="rgb(229,146,28)" fg:x="30701" fg:w="196"/><text x="15.6922%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (196 samples, 0.10%)</title><rect x="15.4422%" y="405" width="0.0986%" height="15" fill="rgb(225,31,38)" fg:x="30701" fg:w="196"/><text x="15.6922%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (196 samples, 0.10%)</title><rect x="15.4422%" y="389" width="0.0986%" height="15" fill="rgb(250,208,3)" fg:x="30701" fg:w="196"/><text x="15.6922%" y="399.50"></text></g><g><title>project1::solver::types::Lit::var (456 samples, 0.23%)</title><rect x="15.5468%" y="453" width="0.2294%" height="15" fill="rgb(246,54,23)" fg:x="30909" fg:w="456"/><text x="15.7968%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (218 samples, 0.11%)</title><rect x="15.6666%" y="437" width="0.1097%" height="15" fill="rgb(243,76,11)" fg:x="31147" fg:w="218"/><text x="15.9166%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (28,121 samples, 14.14%)</title><rect x="1.6709%" y="469" width="14.1445%" height="15" fill="rgb(245,21,50)" fg:x="3322" fg:w="28121"/><text x="1.9209%" y="479.50">project1::solver::cdc..</text></g><g><title>project1::solver::types::Lit::var_idx (78 samples, 0.04%)</title><rect x="15.7762%" y="453" width="0.0392%" height="15" fill="rgb(228,9,43)" fg:x="31365" fg:w="78"/><text x="16.0262%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (53 samples, 0.03%)</title><rect x="15.7888%" y="437" width="0.0267%" height="15" fill="rgb(208,100,47)" fg:x="31390" fg:w="53"/><text x="16.0388%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (137 samples, 0.07%)</title><rect x="15.8154%" y="469" width="0.0689%" height="15" fill="rgb(232,26,8)" fg:x="31443" fg:w="137"/><text x="16.0654%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (119 samples, 0.06%)</title><rect x="15.8245%" y="453" width="0.0599%" height="15" fill="rgb(216,166,38)" fg:x="31461" fg:w="119"/><text x="16.0745%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (113 samples, 0.06%)</title><rect x="15.8275%" y="437" width="0.0568%" height="15" fill="rgb(251,202,51)" fg:x="31467" fg:w="113"/><text x="16.0775%" y="447.50"></text></g><g><title>core::ptr::write (82 samples, 0.04%)</title><rect x="15.8431%" y="421" width="0.0412%" height="15" fill="rgb(254,216,34)" fg:x="31498" fg:w="82"/><text x="16.0931%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (41 samples, 0.02%)</title><rect x="15.9814%" y="437" width="0.0206%" height="15" fill="rgb(251,32,27)" fg:x="31773" fg:w="41"/><text x="16.2314%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (35 samples, 0.02%)</title><rect x="15.9844%" y="421" width="0.0176%" height="15" fill="rgb(208,127,28)" fg:x="31779" fg:w="35"/><text x="16.2344%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35 samples, 0.02%)</title><rect x="15.9844%" y="405" width="0.0176%" height="15" fill="rgb(224,137,22)" fg:x="31779" fg:w="35"/><text x="16.2344%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (183 samples, 0.09%)</title><rect x="15.9814%" y="453" width="0.0920%" height="15" fill="rgb(254,70,32)" fg:x="31773" fg:w="183"/><text x="16.2314%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (142 samples, 0.07%)</title><rect x="16.0021%" y="437" width="0.0714%" height="15" fill="rgb(229,75,37)" fg:x="31814" fg:w="142"/><text x="16.2521%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (142 samples, 0.07%)</title><rect x="16.0021%" y="421" width="0.0714%" height="15" fill="rgb(252,64,23)" fg:x="31814" fg:w="142"/><text x="16.2521%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (155 samples, 0.08%)</title><rect x="16.0755%" y="453" width="0.0780%" height="15" fill="rgb(232,162,48)" fg:x="31960" fg:w="155"/><text x="16.3255%" y="463.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (100 samples, 0.05%)</title><rect x="16.1032%" y="437" width="0.0503%" height="15" fill="rgb(246,160,12)" fg:x="32015" fg:w="100"/><text x="16.3532%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (100 samples, 0.05%)</title><rect x="16.1032%" y="421" width="0.0503%" height="15" fill="rgb(247,166,0)" fg:x="32015" fg:w="100"/><text x="16.3532%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (90 samples, 0.05%)</title><rect x="16.2380%" y="437" width="0.0453%" height="15" fill="rgb(249,219,21)" fg:x="32283" fg:w="90"/><text x="16.4880%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (73 samples, 0.04%)</title><rect x="16.2465%" y="421" width="0.0367%" height="15" fill="rgb(205,209,3)" fg:x="32300" fg:w="73"/><text x="16.4965%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (73 samples, 0.04%)</title><rect x="16.2465%" y="405" width="0.0367%" height="15" fill="rgb(243,44,1)" fg:x="32300" fg:w="73"/><text x="16.4965%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (46 samples, 0.02%)</title><rect x="16.2832%" y="437" width="0.0231%" height="15" fill="rgb(206,159,16)" fg:x="32373" fg:w="46"/><text x="16.5332%" y="447.50"></text></g><g><title>core::ptr::write (35 samples, 0.02%)</title><rect x="16.2888%" y="421" width="0.0176%" height="15" fill="rgb(244,77,30)" fg:x="32384" fg:w="35"/><text x="16.5388%" y="431.50"></text></g><g><title>core::ptr::read (391 samples, 0.20%)</title><rect x="16.3064%" y="421" width="0.1967%" height="15" fill="rgb(218,69,12)" fg:x="32419" fg:w="391"/><text x="16.5564%" y="431.50"></text></g><g><title>core::mem::replace (512 samples, 0.26%)</title><rect x="16.3064%" y="437" width="0.2575%" height="15" fill="rgb(212,87,7)" fg:x="32419" fg:w="512"/><text x="16.5564%" y="447.50"></text></g><g><title>core::ptr::write (121 samples, 0.06%)</title><rect x="16.5030%" y="421" width="0.0609%" height="15" fill="rgb(245,114,25)" fg:x="32810" fg:w="121"/><text x="16.7530%" y="431.50"></text></g><g><title>core::ptr::read (33 samples, 0.02%)</title><rect x="16.5639%" y="405" width="0.0166%" height="15" fill="rgb(210,61,42)" fg:x="32931" fg:w="33"/><text x="16.8139%" y="415.50"></text></g><g><title>core::mem::swap (115 samples, 0.06%)</title><rect x="16.5639%" y="437" width="0.0578%" height="15" fill="rgb(211,52,33)" fg:x="32931" fg:w="115"/><text x="16.8139%" y="447.50"></text></g><g><title>core::mem::swap_simple (115 samples, 0.06%)</title><rect x="16.5639%" y="421" width="0.0578%" height="15" fill="rgb(234,58,33)" fg:x="32931" fg:w="115"/><text x="16.8139%" y="431.50"></text></g><g><title>core::ptr::write (82 samples, 0.04%)</title><rect x="16.5805%" y="405" width="0.0412%" height="15" fill="rgb(220,115,36)" fg:x="32964" fg:w="82"/><text x="16.8305%" y="415.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (93 samples, 0.05%)</title><rect x="16.6217%" y="437" width="0.0468%" height="15" fill="rgb(243,153,54)" fg:x="33046" fg:w="93"/><text x="16.8717%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (108 samples, 0.05%)</title><rect x="16.6997%" y="389" width="0.0543%" height="15" fill="rgb(251,47,18)" fg:x="33201" fg:w="108"/><text x="16.9497%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.01%)</title><rect x="16.7596%" y="261" width="0.0106%" height="15" fill="rgb(242,102,42)" fg:x="33320" fg:w="21"/><text x="17.0096%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="16.7555%" y="309" width="0.0337%" height="15" fill="rgb(234,31,38)" fg:x="33312" fg:w="67"/><text x="17.0055%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="16.7555%" y="293" width="0.0337%" height="15" fill="rgb(221,117,51)" fg:x="33312" fg:w="67"/><text x="17.0055%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="16.7555%" y="277" width="0.0337%" height="15" fill="rgb(212,20,18)" fg:x="33312" fg:w="67"/><text x="17.0055%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (38 samples, 0.02%)</title><rect x="16.7701%" y="261" width="0.0191%" height="15" fill="rgb(245,133,36)" fg:x="33341" fg:w="38"/><text x="17.0201%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (98 samples, 0.05%)</title><rect x="16.7555%" y="341" width="0.0493%" height="15" fill="rgb(212,6,19)" fg:x="33312" fg:w="98"/><text x="17.0055%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (98 samples, 0.05%)</title><rect x="16.7555%" y="325" width="0.0493%" height="15" fill="rgb(218,1,36)" fg:x="33312" fg:w="98"/><text x="17.0055%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (255 samples, 0.13%)</title><rect x="16.6957%" y="421" width="0.1283%" height="15" fill="rgb(246,84,54)" fg:x="33193" fg:w="255"/><text x="16.9457%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (255 samples, 0.13%)</title><rect x="16.6957%" y="405" width="0.1283%" height="15" fill="rgb(242,110,6)" fg:x="33193" fg:w="255"/><text x="16.9457%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (138 samples, 0.07%)</title><rect x="16.7545%" y="389" width="0.0694%" height="15" fill="rgb(214,47,5)" fg:x="33310" fg:w="138"/><text x="17.0045%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (138 samples, 0.07%)</title><rect x="16.7545%" y="373" width="0.0694%" height="15" fill="rgb(218,159,25)" fg:x="33310" fg:w="138"/><text x="17.0045%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (136 samples, 0.07%)</title><rect x="16.7555%" y="357" width="0.0684%" height="15" fill="rgb(215,211,28)" fg:x="33312" fg:w="136"/><text x="17.0055%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (38 samples, 0.02%)</title><rect x="16.8048%" y="341" width="0.0191%" height="15" fill="rgb(238,59,32)" fg:x="33410" fg:w="38"/><text x="17.0548%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (37 samples, 0.02%)</title><rect x="16.8053%" y="325" width="0.0186%" height="15" fill="rgb(226,82,3)" fg:x="33411" fg:w="37"/><text x="17.0553%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (36 samples, 0.02%)</title><rect x="16.8058%" y="309" width="0.0181%" height="15" fill="rgb(240,164,32)" fg:x="33412" fg:w="36"/><text x="17.0558%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (297 samples, 0.15%)</title><rect x="16.6771%" y="437" width="0.1494%" height="15" fill="rgb(232,46,7)" fg:x="33156" fg:w="297"/><text x="16.9271%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (66 samples, 0.03%)</title><rect x="16.9929%" y="261" width="0.0332%" height="15" fill="rgb(229,129,53)" fg:x="33784" fg:w="66"/><text x="17.2429%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (186 samples, 0.09%)</title><rect x="16.9633%" y="277" width="0.0936%" height="15" fill="rgb(234,188,29)" fg:x="33725" fg:w="186"/><text x="17.2133%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (61 samples, 0.03%)</title><rect x="17.0261%" y="261" width="0.0307%" height="15" fill="rgb(246,141,4)" fg:x="33850" fg:w="61"/><text x="17.2761%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (432 samples, 0.22%)</title><rect x="17.1821%" y="261" width="0.2173%" height="15" fill="rgb(229,23,39)" fg:x="34160" fg:w="432"/><text x="17.4321%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,196 samples, 0.60%)</title><rect x="16.9004%" y="325" width="0.6016%" height="15" fill="rgb(206,12,3)" fg:x="33600" fg:w="1196"/><text x="17.1504%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,196 samples, 0.60%)</title><rect x="16.9004%" y="309" width="0.6016%" height="15" fill="rgb(252,226,20)" fg:x="33600" fg:w="1196"/><text x="17.1504%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,196 samples, 0.60%)</title><rect x="16.9004%" y="293" width="0.6016%" height="15" fill="rgb(216,123,35)" fg:x="33600" fg:w="1196"/><text x="17.1504%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (885 samples, 0.45%)</title><rect x="17.0568%" y="277" width="0.4451%" height="15" fill="rgb(212,68,40)" fg:x="33911" fg:w="885"/><text x="17.3068%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (204 samples, 0.10%)</title><rect x="17.3994%" y="261" width="0.1026%" height="15" fill="rgb(254,125,32)" fg:x="34592" fg:w="204"/><text x="17.6494%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (34 samples, 0.02%)</title><rect x="17.5020%" y="277" width="0.0171%" height="15" fill="rgb(253,97,22)" fg:x="34796" fg:w="34"/><text x="17.7520%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (81 samples, 0.04%)</title><rect x="17.5020%" y="325" width="0.0407%" height="15" fill="rgb(241,101,14)" fg:x="34796" fg:w="81"/><text x="17.7520%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (81 samples, 0.04%)</title><rect x="17.5020%" y="309" width="0.0407%" height="15" fill="rgb(238,103,29)" fg:x="34796" fg:w="81"/><text x="17.7520%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (81 samples, 0.04%)</title><rect x="17.5020%" y="293" width="0.0407%" height="15" fill="rgb(233,195,47)" fg:x="34796" fg:w="81"/><text x="17.7520%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (47 samples, 0.02%)</title><rect x="17.5191%" y="277" width="0.0236%" height="15" fill="rgb(246,218,30)" fg:x="34830" fg:w="47"/><text x="17.7691%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (78 samples, 0.04%)</title><rect x="17.5995%" y="197" width="0.0392%" height="15" fill="rgb(219,145,47)" fg:x="34990" fg:w="78"/><text x="17.8495%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (45 samples, 0.02%)</title><rect x="17.6388%" y="197" width="0.0226%" height="15" fill="rgb(243,12,26)" fg:x="35068" fg:w="45"/><text x="17.8888%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (235 samples, 0.12%)</title><rect x="17.5447%" y="229" width="0.1182%" height="15" fill="rgb(214,87,16)" fg:x="34881" fg:w="235"/><text x="17.7947%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (174 samples, 0.09%)</title><rect x="17.5754%" y="213" width="0.0875%" height="15" fill="rgb(208,99,42)" fg:x="34942" fg:w="174"/><text x="17.8254%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,543 samples, 0.78%)</title><rect x="16.8918%" y="341" width="0.7761%" height="15" fill="rgb(253,99,2)" fg:x="33583" fg:w="1543"/><text x="17.1418%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (249 samples, 0.13%)</title><rect x="17.5427%" y="325" width="0.1252%" height="15" fill="rgb(220,168,23)" fg:x="34877" fg:w="249"/><text x="17.7927%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (245 samples, 0.12%)</title><rect x="17.5447%" y="309" width="0.1232%" height="15" fill="rgb(242,38,24)" fg:x="34881" fg:w="245"/><text x="17.7947%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (245 samples, 0.12%)</title><rect x="17.5447%" y="293" width="0.1232%" height="15" fill="rgb(225,182,9)" fg:x="34881" fg:w="245"/><text x="17.7947%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (245 samples, 0.12%)</title><rect x="17.5447%" y="277" width="0.1232%" height="15" fill="rgb(243,178,37)" fg:x="34881" fg:w="245"/><text x="17.7947%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (245 samples, 0.12%)</title><rect x="17.5447%" y="261" width="0.1232%" height="15" fill="rgb(232,139,19)" fg:x="34881" fg:w="245"/><text x="17.7947%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (245 samples, 0.12%)</title><rect x="17.5447%" y="245" width="0.1232%" height="15" fill="rgb(225,201,24)" fg:x="34881" fg:w="245"/><text x="17.7947%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1,571 samples, 0.79%)</title><rect x="16.8918%" y="357" width="0.7902%" height="15" fill="rgb(221,47,46)" fg:x="33583" fg:w="1571"/><text x="17.1418%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (28 samples, 0.01%)</title><rect x="17.6679%" y="341" width="0.0141%" height="15" fill="rgb(249,23,13)" fg:x="35126" fg:w="28"/><text x="17.9179%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 0.08%)</title><rect x="17.7228%" y="309" width="0.0820%" height="15" fill="rgb(219,9,5)" fg:x="35235" fg:w="163"/><text x="17.9728%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (160 samples, 0.08%)</title><rect x="17.7243%" y="293" width="0.0805%" height="15" fill="rgb(254,171,16)" fg:x="35238" fg:w="160"/><text x="17.9743%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (344 samples, 0.17%)</title><rect x="17.8053%" y="293" width="0.1730%" height="15" fill="rgb(230,171,20)" fg:x="35399" fg:w="344"/><text x="18.0553%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (344 samples, 0.17%)</title><rect x="17.8053%" y="277" width="0.1730%" height="15" fill="rgb(210,71,41)" fg:x="35399" fg:w="344"/><text x="18.0553%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (344 samples, 0.17%)</title><rect x="17.8053%" y="261" width="0.1730%" height="15" fill="rgb(206,173,20)" fg:x="35399" fg:w="344"/><text x="18.0553%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (344 samples, 0.17%)</title><rect x="17.8053%" y="245" width="0.1730%" height="15" fill="rgb(233,88,34)" fg:x="35399" fg:w="344"/><text x="18.0553%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (443 samples, 0.22%)</title><rect x="17.8053%" y="309" width="0.2228%" height="15" fill="rgb(223,209,46)" fg:x="35399" fg:w="443"/><text x="18.0553%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (99 samples, 0.05%)</title><rect x="17.9783%" y="293" width="0.0498%" height="15" fill="rgb(250,43,18)" fg:x="35743" fg:w="99"/><text x="18.2283%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (99 samples, 0.05%)</title><rect x="17.9783%" y="277" width="0.0498%" height="15" fill="rgb(208,13,10)" fg:x="35743" fg:w="99"/><text x="18.2283%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (99 samples, 0.05%)</title><rect x="17.9783%" y="261" width="0.0498%" height="15" fill="rgb(212,200,36)" fg:x="35743" fg:w="99"/><text x="18.2283%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (99 samples, 0.05%)</title><rect x="17.9783%" y="245" width="0.0498%" height="15" fill="rgb(225,90,30)" fg:x="35743" fg:w="99"/><text x="18.2283%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (342 samples, 0.17%)</title><rect x="18.0281%" y="309" width="0.1720%" height="15" fill="rgb(236,182,39)" fg:x="35842" fg:w="342"/><text x="18.2781%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (93 samples, 0.05%)</title><rect x="18.2001%" y="309" width="0.0468%" height="15" fill="rgb(212,144,35)" fg:x="36184" fg:w="93"/><text x="18.4501%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (93 samples, 0.05%)</title><rect x="18.2001%" y="293" width="0.0468%" height="15" fill="rgb(228,63,44)" fg:x="36184" fg:w="93"/><text x="18.4501%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (93 samples, 0.05%)</title><rect x="18.2001%" y="277" width="0.0468%" height="15" fill="rgb(228,109,6)" fg:x="36184" fg:w="93"/><text x="18.4501%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,332 samples, 0.67%)</title><rect x="17.6820%" y="325" width="0.6700%" height="15" fill="rgb(238,117,24)" fg:x="35154" fg:w="1332"/><text x="17.9320%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (209 samples, 0.11%)</title><rect x="18.2469%" y="309" width="0.1051%" height="15" fill="rgb(242,26,26)" fg:x="36277" fg:w="209"/><text x="18.4969%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (209 samples, 0.11%)</title><rect x="18.2469%" y="293" width="0.1051%" height="15" fill="rgb(221,92,48)" fg:x="36277" fg:w="209"/><text x="18.4969%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,993 samples, 1.51%)</title><rect x="16.8632%" y="373" width="1.5054%" height="15" fill="rgb(209,209,32)" fg:x="33526" fg:w="2993"/><text x="17.1132%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,365 samples, 0.69%)</title><rect x="17.6820%" y="357" width="0.6866%" height="15" fill="rgb(221,70,22)" fg:x="35154" fg:w="1365"/><text x="17.9320%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,365 samples, 0.69%)</title><rect x="17.6820%" y="341" width="0.6866%" height="15" fill="rgb(248,145,5)" fg:x="35154" fg:w="1365"/><text x="17.9320%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (33 samples, 0.02%)</title><rect x="18.3520%" y="325" width="0.0166%" height="15" fill="rgb(226,116,26)" fg:x="36486" fg:w="33"/><text x="18.6020%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (3,023 samples, 1.52%)</title><rect x="16.8566%" y="421" width="1.5205%" height="15" fill="rgb(244,5,17)" fg:x="33513" fg:w="3023"/><text x="17.1066%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,023 samples, 1.52%)</title><rect x="16.8566%" y="405" width="1.5205%" height="15" fill="rgb(252,159,33)" fg:x="33513" fg:w="3023"/><text x="17.1066%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,010 samples, 1.51%)</title><rect x="16.8632%" y="389" width="1.5140%" height="15" fill="rgb(206,71,0)" fg:x="33526" fg:w="3010"/><text x="17.1132%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (36 samples, 0.02%)</title><rect x="18.3772%" y="405" width="0.0181%" height="15" fill="rgb(233,118,54)" fg:x="36536" fg:w="36"/><text x="18.6272%" y="415.50"></text></g><g><title>compare::Compare::compares_ge (26 samples, 0.01%)</title><rect x="18.5195%" y="389" width="0.0131%" height="15" fill="rgb(234,83,48)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (26 samples, 0.01%)</title><rect x="18.5195%" y="373" width="0.0131%" height="15" fill="rgb(228,3,54)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (26 samples, 0.01%)</title><rect x="18.5195%" y="357" width="0.0131%" height="15" fill="rgb(226,155,13)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (26 samples, 0.01%)</title><rect x="18.5195%" y="341" width="0.0131%" height="15" fill="rgb(241,28,37)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (26 samples, 0.01%)</title><rect x="18.5195%" y="325" width="0.0131%" height="15" fill="rgb(233,93,10)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (26 samples, 0.01%)</title><rect x="18.5195%" y="309" width="0.0131%" height="15" fill="rgb(225,113,19)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="319.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (26 samples, 0.01%)</title><rect x="18.5195%" y="293" width="0.0131%" height="15" fill="rgb(241,2,18)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="303.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (26 samples, 0.01%)</title><rect x="18.5195%" y="277" width="0.0131%" height="15" fill="rgb(228,207,21)" fg:x="36819" fg:w="26"/><text x="18.7695%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (596 samples, 0.30%)</title><rect x="18.6412%" y="357" width="0.2998%" height="15" fill="rgb(213,211,35)" fg:x="37061" fg:w="596"/><text x="18.8912%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.03%)</title><rect x="19.0552%" y="213" width="0.0337%" height="15" fill="rgb(209,83,10)" fg:x="37884" fg:w="67"/><text x="19.3052%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (177 samples, 0.09%)</title><rect x="19.0275%" y="229" width="0.0890%" height="15" fill="rgb(209,164,1)" fg:x="37829" fg:w="177"/><text x="19.2775%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (55 samples, 0.03%)</title><rect x="19.0889%" y="213" width="0.0277%" height="15" fill="rgb(213,184,43)" fg:x="37951" fg:w="55"/><text x="19.3389%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (291 samples, 0.15%)</title><rect x="19.1955%" y="213" width="0.1464%" height="15" fill="rgb(231,61,34)" fg:x="38163" fg:w="291"/><text x="19.4455%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (835 samples, 0.42%)</title><rect x="18.9742%" y="277" width="0.4200%" height="15" fill="rgb(235,75,3)" fg:x="37723" fg:w="835"/><text x="19.2242%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (835 samples, 0.42%)</title><rect x="18.9742%" y="261" width="0.4200%" height="15" fill="rgb(220,106,47)" fg:x="37723" fg:w="835"/><text x="19.2242%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (835 samples, 0.42%)</title><rect x="18.9742%" y="245" width="0.4200%" height="15" fill="rgb(210,196,33)" fg:x="37723" fg:w="835"/><text x="19.2242%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (552 samples, 0.28%)</title><rect x="19.1166%" y="229" width="0.2776%" height="15" fill="rgb(229,154,42)" fg:x="38006" fg:w="552"/><text x="19.3666%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (104 samples, 0.05%)</title><rect x="19.3419%" y="213" width="0.0523%" height="15" fill="rgb(228,114,26)" fg:x="38454" fg:w="104"/><text x="19.5919%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (66 samples, 0.03%)</title><rect x="19.3942%" y="229" width="0.0332%" height="15" fill="rgb(208,144,1)" fg:x="38558" fg:w="66"/><text x="19.6442%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (97 samples, 0.05%)</title><rect x="19.3942%" y="277" width="0.0488%" height="15" fill="rgb(239,112,37)" fg:x="38558" fg:w="97"/><text x="19.6442%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (97 samples, 0.05%)</title><rect x="19.3942%" y="261" width="0.0488%" height="15" fill="rgb(210,96,50)" fg:x="38558" fg:w="97"/><text x="19.6442%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (97 samples, 0.05%)</title><rect x="19.3942%" y="245" width="0.0488%" height="15" fill="rgb(222,178,2)" fg:x="38558" fg:w="97"/><text x="19.6442%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (31 samples, 0.02%)</title><rect x="19.4274%" y="229" width="0.0156%" height="15" fill="rgb(226,74,18)" fg:x="38624" fg:w="31"/><text x="19.6774%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (72 samples, 0.04%)</title><rect x="19.5054%" y="149" width="0.0362%" height="15" fill="rgb(225,67,54)" fg:x="38779" fg:w="72"/><text x="19.7554%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (243 samples, 0.12%)</title><rect x="19.4435%" y="181" width="0.1222%" height="15" fill="rgb(251,92,32)" fg:x="38656" fg:w="243"/><text x="19.6935%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (186 samples, 0.09%)</title><rect x="19.4722%" y="165" width="0.0936%" height="15" fill="rgb(228,149,22)" fg:x="38713" fg:w="186"/><text x="19.7222%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (48 samples, 0.02%)</title><rect x="19.5416%" y="149" width="0.0241%" height="15" fill="rgb(243,54,13)" fg:x="38851" fg:w="48"/><text x="19.7916%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,202 samples, 0.60%)</title><rect x="18.9737%" y="293" width="0.6046%" height="15" fill="rgb(243,180,28)" fg:x="37722" fg:w="1202"/><text x="19.2237%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (268 samples, 0.13%)</title><rect x="19.4435%" y="277" width="0.1348%" height="15" fill="rgb(208,167,24)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (268 samples, 0.13%)</title><rect x="19.4435%" y="261" width="0.1348%" height="15" fill="rgb(245,73,45)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (268 samples, 0.13%)</title><rect x="19.4435%" y="245" width="0.1348%" height="15" fill="rgb(237,203,48)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (268 samples, 0.13%)</title><rect x="19.4435%" y="229" width="0.1348%" height="15" fill="rgb(211,197,16)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (268 samples, 0.13%)</title><rect x="19.4435%" y="213" width="0.1348%" height="15" fill="rgb(243,99,51)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (268 samples, 0.13%)</title><rect x="19.4435%" y="197" width="0.1348%" height="15" fill="rgb(215,123,29)" fg:x="38656" fg:w="268"/><text x="19.6935%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (25 samples, 0.01%)</title><rect x="19.5657%" y="181" width="0.0126%" height="15" fill="rgb(239,186,37)" fg:x="38899" fg:w="25"/><text x="19.8157%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,242 samples, 0.62%)</title><rect x="18.9737%" y="309" width="0.6247%" height="15" fill="rgb(252,136,39)" fg:x="37722" fg:w="1242"/><text x="19.2237%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (40 samples, 0.02%)</title><rect x="19.5783%" y="293" width="0.0201%" height="15" fill="rgb(223,213,32)" fg:x="38924" fg:w="40"/><text x="19.8283%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (24 samples, 0.01%)</title><rect x="19.6266%" y="277" width="0.0121%" height="15" fill="rgb(233,115,5)" fg:x="39020" fg:w="24"/><text x="19.8766%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (43 samples, 0.02%)</title><rect x="19.6387%" y="229" width="0.0216%" height="15" fill="rgb(207,226,44)" fg:x="39044" fg:w="43"/><text x="19.8887%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (44 samples, 0.02%)</title><rect x="19.6387%" y="277" width="0.0221%" height="15" fill="rgb(208,126,0)" fg:x="39044" fg:w="44"/><text x="19.8887%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (44 samples, 0.02%)</title><rect x="19.6387%" y="261" width="0.0221%" height="15" fill="rgb(244,66,21)" fg:x="39044" fg:w="44"/><text x="19.8887%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (44 samples, 0.02%)</title><rect x="19.6387%" y="245" width="0.0221%" height="15" fill="rgb(222,97,12)" fg:x="39044" fg:w="44"/><text x="19.8887%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.08%)</title><rect x="19.6874%" y="261" width="0.0754%" height="15" fill="rgb(219,213,19)" fg:x="39141" fg:w="150"/><text x="19.9374%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (149 samples, 0.07%)</title><rect x="19.6879%" y="245" width="0.0749%" height="15" fill="rgb(252,169,30)" fg:x="39142" fg:w="149"/><text x="19.9379%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (56 samples, 0.03%)</title><rect x="19.7629%" y="261" width="0.0282%" height="15" fill="rgb(206,32,51)" fg:x="39291" fg:w="56"/><text x="20.0129%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (303 samples, 0.15%)</title><rect x="19.7911%" y="245" width="0.1524%" height="15" fill="rgb(250,172,42)" fg:x="39347" fg:w="303"/><text x="20.0411%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (303 samples, 0.15%)</title><rect x="19.7911%" y="229" width="0.1524%" height="15" fill="rgb(209,34,43)" fg:x="39347" fg:w="303"/><text x="20.0411%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (303 samples, 0.15%)</title><rect x="19.7911%" y="213" width="0.1524%" height="15" fill="rgb(223,11,35)" fg:x="39347" fg:w="303"/><text x="20.0411%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (303 samples, 0.15%)</title><rect x="19.7911%" y="197" width="0.1524%" height="15" fill="rgb(251,219,26)" fg:x="39347" fg:w="303"/><text x="20.0411%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (409 samples, 0.21%)</title><rect x="19.7911%" y="261" width="0.2057%" height="15" fill="rgb(231,119,3)" fg:x="39347" fg:w="409"/><text x="20.0411%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (106 samples, 0.05%)</title><rect x="19.9435%" y="245" width="0.0533%" height="15" fill="rgb(216,97,11)" fg:x="39650" fg:w="106"/><text x="20.1935%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (106 samples, 0.05%)</title><rect x="19.9435%" y="229" width="0.0533%" height="15" fill="rgb(223,59,9)" fg:x="39650" fg:w="106"/><text x="20.1935%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (106 samples, 0.05%)</title><rect x="19.9435%" y="213" width="0.0533%" height="15" fill="rgb(233,93,31)" fg:x="39650" fg:w="106"/><text x="20.1935%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (106 samples, 0.05%)</title><rect x="19.9435%" y="197" width="0.0533%" height="15" fill="rgb(239,81,33)" fg:x="39650" fg:w="106"/><text x="20.1935%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (184 samples, 0.09%)</title><rect x="19.9968%" y="261" width="0.0925%" height="15" fill="rgb(213,120,34)" fg:x="39756" fg:w="184"/><text x="20.2468%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (27 samples, 0.01%)</title><rect x="20.0893%" y="261" width="0.0136%" height="15" fill="rgb(243,49,53)" fg:x="39940" fg:w="27"/><text x="20.3393%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (27 samples, 0.01%)</title><rect x="20.0893%" y="245" width="0.0136%" height="15" fill="rgb(247,216,33)" fg:x="39940" fg:w="27"/><text x="20.3393%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.01%)</title><rect x="20.0893%" y="229" width="0.0136%" height="15" fill="rgb(226,26,14)" fg:x="39940" fg:w="27"/><text x="20.3393%" y="239.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3,306 samples, 1.66%)</title><rect x="18.5331%" y="373" width="1.6629%" height="15" fill="rgb(215,49,53)" fg:x="36846" fg:w="3306"/><text x="18.7831%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,493 samples, 1.25%)</title><rect x="18.9420%" y="357" width="1.2539%" height="15" fill="rgb(245,162,40)" fg:x="37659" fg:w="2493"/><text x="19.1920%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,493 samples, 1.25%)</title><rect x="18.9420%" y="341" width="1.2539%" height="15" fill="rgb(229,68,17)" fg:x="37659" fg:w="2493"/><text x="19.1920%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,432 samples, 1.22%)</title><rect x="18.9727%" y="325" width="1.2233%" height="15" fill="rgb(213,182,10)" fg:x="37720" fg:w="2432"/><text x="19.2227%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,188 samples, 0.60%)</title><rect x="19.5984%" y="309" width="0.5975%" height="15" fill="rgb(245,125,30)" fg:x="38964" fg:w="1188"/><text x="19.8484%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,132 samples, 0.57%)</title><rect x="19.6266%" y="293" width="0.5694%" height="15" fill="rgb(232,202,2)" fg:x="39020" fg:w="1132"/><text x="19.8766%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,064 samples, 0.54%)</title><rect x="19.6608%" y="277" width="0.5352%" height="15" fill="rgb(237,140,51)" fg:x="39088" fg:w="1064"/><text x="19.9108%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (185 samples, 0.09%)</title><rect x="20.1029%" y="261" width="0.0931%" height="15" fill="rgb(236,157,25)" fg:x="39967" fg:w="185"/><text x="20.3529%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (185 samples, 0.09%)</title><rect x="20.1029%" y="245" width="0.0931%" height="15" fill="rgb(219,209,0)" fg:x="39967" fg:w="185"/><text x="20.3529%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3,315 samples, 1.67%)</title><rect x="18.5331%" y="389" width="1.6674%" height="15" fill="rgb(240,116,54)" fg:x="36846" fg:w="3315"/><text x="18.7831%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (48 samples, 0.02%)</title><rect x="20.2005%" y="389" width="0.0241%" height="15" fill="rgb(216,10,36)" fg:x="40161" fg:w="48"/><text x="20.4505%" y="399.50"></text></g><g><title>core::ptr::read (62 samples, 0.03%)</title><rect x="20.2699%" y="373" width="0.0312%" height="15" fill="rgb(222,72,44)" fg:x="40299" fg:w="62"/><text x="20.5199%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (3,791 samples, 1.91%)</title><rect x="18.3953%" y="405" width="1.9068%" height="15" fill="rgb(232,159,9)" fg:x="36572" fg:w="3791"/><text x="18.6453%" y="415.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (154 samples, 0.08%)</title><rect x="20.2246%" y="389" width="0.0775%" height="15" fill="rgb(210,39,32)" fg:x="40209" fg:w="154"/><text x="20.4746%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (4,161 samples, 2.09%)</title><rect x="18.3772%" y="421" width="2.0929%" height="15" fill="rgb(216,194,45)" fg:x="36536" fg:w="4161"/><text x="18.6272%" y="431.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (334 samples, 0.17%)</title><rect x="20.3021%" y="405" width="0.1680%" height="15" fill="rgb(218,18,35)" fg:x="40363" fg:w="334"/><text x="20.5521%" y="415.50"></text></g><g><title>compare::Compare::compares_le (542 samples, 0.27%)</title><rect x="20.6456%" y="405" width="0.2726%" height="15" fill="rgb(207,83,51)" fg:x="41046" fg:w="542"/><text x="20.8956%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (542 samples, 0.27%)</title><rect x="20.6456%" y="389" width="0.2726%" height="15" fill="rgb(225,63,43)" fg:x="41046" fg:w="542"/><text x="20.8956%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (542 samples, 0.27%)</title><rect x="20.6456%" y="373" width="0.2726%" height="15" fill="rgb(207,57,36)" fg:x="41046" fg:w="542"/><text x="20.8956%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (214 samples, 0.11%)</title><rect x="20.9927%" y="373" width="0.1076%" height="15" fill="rgb(216,99,33)" fg:x="41736" fg:w="214"/><text x="21.2427%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (108 samples, 0.05%)</title><rect x="21.2145%" y="229" width="0.0543%" height="15" fill="rgb(225,42,16)" fg:x="42177" fg:w="108"/><text x="21.4645%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (222 samples, 0.11%)</title><rect x="21.1863%" y="245" width="0.1117%" height="15" fill="rgb(220,201,45)" fg:x="42121" fg:w="222"/><text x="21.4363%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (58 samples, 0.03%)</title><rect x="21.2688%" y="229" width="0.0292%" height="15" fill="rgb(225,33,4)" fg:x="42285" fg:w="58"/><text x="21.5188%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (161 samples, 0.08%)</title><rect x="21.4238%" y="229" width="0.0810%" height="15" fill="rgb(224,33,50)" fg:x="42593" fg:w="161"/><text x="21.6738%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (855 samples, 0.43%)</title><rect x="21.1340%" y="293" width="0.4301%" height="15" fill="rgb(246,198,51)" fg:x="42017" fg:w="855"/><text x="21.3840%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (855 samples, 0.43%)</title><rect x="21.1340%" y="277" width="0.4301%" height="15" fill="rgb(205,22,4)" fg:x="42017" fg:w="855"/><text x="21.3840%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (855 samples, 0.43%)</title><rect x="21.1340%" y="261" width="0.4301%" height="15" fill="rgb(206,3,8)" fg:x="42017" fg:w="855"/><text x="21.3840%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (529 samples, 0.27%)</title><rect x="21.2980%" y="245" width="0.2661%" height="15" fill="rgb(251,23,15)" fg:x="42343" fg:w="529"/><text x="21.5480%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (118 samples, 0.06%)</title><rect x="21.5047%" y="229" width="0.0594%" height="15" fill="rgb(252,88,28)" fg:x="42754" fg:w="118"/><text x="21.7547%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (116 samples, 0.06%)</title><rect x="21.5641%" y="245" width="0.0583%" height="15" fill="rgb(212,127,14)" fg:x="42872" fg:w="116"/><text x="21.8141%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (118 samples, 0.06%)</title><rect x="21.5641%" y="293" width="0.0594%" height="15" fill="rgb(247,145,37)" fg:x="42872" fg:w="118"/><text x="21.8141%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (118 samples, 0.06%)</title><rect x="21.5641%" y="277" width="0.0594%" height="15" fill="rgb(209,117,53)" fg:x="42872" fg:w="118"/><text x="21.8141%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (118 samples, 0.06%)</title><rect x="21.5641%" y="261" width="0.0594%" height="15" fill="rgb(212,90,42)" fg:x="42872" fg:w="118"/><text x="21.8141%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (47 samples, 0.02%)</title><rect x="21.6798%" y="165" width="0.0236%" height="15" fill="rgb(218,164,37)" fg:x="43102" fg:w="47"/><text x="21.9298%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (212 samples, 0.11%)</title><rect x="21.6239%" y="197" width="0.1066%" height="15" fill="rgb(246,65,34)" fg:x="42991" fg:w="212"/><text x="21.8739%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (156 samples, 0.08%)</title><rect x="21.6521%" y="181" width="0.0785%" height="15" fill="rgb(231,100,33)" fg:x="43047" fg:w="156"/><text x="21.9021%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (54 samples, 0.03%)</title><rect x="21.7034%" y="165" width="0.0272%" height="15" fill="rgb(228,126,14)" fg:x="43149" fg:w="54"/><text x="21.9534%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,242 samples, 0.62%)</title><rect x="21.1335%" y="309" width="0.6247%" height="15" fill="rgb(215,173,21)" fg:x="42016" fg:w="1242"/><text x="21.3835%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (268 samples, 0.13%)</title><rect x="21.6234%" y="293" width="0.1348%" height="15" fill="rgb(210,6,40)" fg:x="42990" fg:w="268"/><text x="21.8734%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (267 samples, 0.13%)</title><rect x="21.6239%" y="277" width="0.1343%" height="15" fill="rgb(212,48,18)" fg:x="42991" fg:w="267"/><text x="21.8739%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (267 samples, 0.13%)</title><rect x="21.6239%" y="261" width="0.1343%" height="15" fill="rgb(230,214,11)" fg:x="42991" fg:w="267"/><text x="21.8739%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (267 samples, 0.13%)</title><rect x="21.6239%" y="245" width="0.1343%" height="15" fill="rgb(254,105,39)" fg:x="42991" fg:w="267"/><text x="21.8739%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (267 samples, 0.13%)</title><rect x="21.6239%" y="229" width="0.1343%" height="15" fill="rgb(245,158,5)" fg:x="42991" fg:w="267"/><text x="21.8739%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (267 samples, 0.13%)</title><rect x="21.6239%" y="213" width="0.1343%" height="15" fill="rgb(249,208,11)" fg:x="42991" fg:w="267"/><text x="21.8739%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (55 samples, 0.03%)</title><rect x="21.7306%" y="197" width="0.0277%" height="15" fill="rgb(210,39,28)" fg:x="43203" fg:w="55"/><text x="21.9806%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (1,243 samples, 0.63%)</title><rect x="21.1335%" y="325" width="0.6252%" height="15" fill="rgb(211,56,53)" fg:x="42016" fg:w="1243"/><text x="21.3835%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (54 samples, 0.03%)</title><rect x="21.7924%" y="245" width="0.0272%" height="15" fill="rgb(226,201,30)" fg:x="43326" fg:w="54"/><text x="22.0424%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (55 samples, 0.03%)</title><rect x="21.7924%" y="293" width="0.0277%" height="15" fill="rgb(239,101,34)" fg:x="43326" fg:w="55"/><text x="22.0424%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (55 samples, 0.03%)</title><rect x="21.7924%" y="277" width="0.0277%" height="15" fill="rgb(226,209,5)" fg:x="43326" fg:w="55"/><text x="22.0424%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (55 samples, 0.03%)</title><rect x="21.7924%" y="261" width="0.0277%" height="15" fill="rgb(250,105,47)" fg:x="43326" fg:w="55"/><text x="22.0424%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (114 samples, 0.06%)</title><rect x="21.8513%" y="277" width="0.0573%" height="15" fill="rgb(230,72,3)" fg:x="43443" fg:w="114"/><text x="22.1013%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (107 samples, 0.05%)</title><rect x="21.8548%" y="261" width="0.0538%" height="15" fill="rgb(232,218,39)" fg:x="43450" fg:w="107"/><text x="22.1048%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (56 samples, 0.03%)</title><rect x="21.9091%" y="277" width="0.0282%" height="15" fill="rgb(248,166,6)" fg:x="43558" fg:w="56"/><text x="22.1591%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (323 samples, 0.16%)</title><rect x="21.9373%" y="261" width="0.1625%" height="15" fill="rgb(247,89,20)" fg:x="43614" fg:w="323"/><text x="22.1873%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (323 samples, 0.16%)</title><rect x="21.9373%" y="245" width="0.1625%" height="15" fill="rgb(248,130,54)" fg:x="43614" fg:w="323"/><text x="22.1873%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (323 samples, 0.16%)</title><rect x="21.9373%" y="229" width="0.1625%" height="15" fill="rgb(234,196,4)" fg:x="43614" fg:w="323"/><text x="22.1873%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (323 samples, 0.16%)</title><rect x="21.9373%" y="213" width="0.1625%" height="15" fill="rgb(250,143,31)" fg:x="43614" fg:w="323"/><text x="22.1873%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (432 samples, 0.22%)</title><rect x="21.9373%" y="277" width="0.2173%" height="15" fill="rgb(211,110,34)" fg:x="43614" fg:w="432"/><text x="22.1873%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (109 samples, 0.05%)</title><rect x="22.0998%" y="261" width="0.0548%" height="15" fill="rgb(215,124,48)" fg:x="43937" fg:w="109"/><text x="22.3498%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (109 samples, 0.05%)</title><rect x="22.0998%" y="245" width="0.0548%" height="15" fill="rgb(216,46,13)" fg:x="43937" fg:w="109"/><text x="22.3498%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (109 samples, 0.05%)</title><rect x="22.0998%" y="229" width="0.0548%" height="15" fill="rgb(205,184,25)" fg:x="43937" fg:w="109"/><text x="22.3498%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (109 samples, 0.05%)</title><rect x="22.0998%" y="213" width="0.0548%" height="15" fill="rgb(228,1,10)" fg:x="43937" fg:w="109"/><text x="22.3498%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (112 samples, 0.06%)</title><rect x="22.1546%" y="277" width="0.0563%" height="15" fill="rgb(213,116,27)" fg:x="44046" fg:w="112"/><text x="22.4046%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (26 samples, 0.01%)</title><rect x="22.2109%" y="277" width="0.0131%" height="15" fill="rgb(241,95,50)" fg:x="44158" fg:w="26"/><text x="22.4609%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (26 samples, 0.01%)</title><rect x="22.2109%" y="261" width="0.0131%" height="15" fill="rgb(238,48,32)" fg:x="44158" fg:w="26"/><text x="22.4609%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.01%)</title><rect x="22.2109%" y="245" width="0.0131%" height="15" fill="rgb(235,113,49)" fg:x="44158" fg:w="26"/><text x="22.4609%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2,748 samples, 1.38%)</title><rect x="20.9183%" y="405" width="1.3822%" height="15" fill="rgb(205,127,43)" fg:x="41588" fg:w="2748"/><text x="21.1683%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2,748 samples, 1.38%)</title><rect x="20.9183%" y="389" width="1.3822%" height="15" fill="rgb(250,162,2)" fg:x="41588" fg:w="2748"/><text x="21.1683%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,370 samples, 1.19%)</title><rect x="21.1084%" y="373" width="1.1921%" height="15" fill="rgb(220,13,41)" fg:x="41966" fg:w="2370"/><text x="21.3584%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,370 samples, 1.19%)</title><rect x="21.1084%" y="357" width="1.1921%" height="15" fill="rgb(249,221,25)" fg:x="41966" fg:w="2370"/><text x="21.3584%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,323 samples, 1.17%)</title><rect x="21.1320%" y="341" width="1.1684%" height="15" fill="rgb(215,208,19)" fg:x="42013" fg:w="2323"/><text x="21.3820%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,077 samples, 0.54%)</title><rect x="21.7587%" y="325" width="0.5417%" height="15" fill="rgb(236,175,2)" fg:x="43259" fg:w="1077"/><text x="22.0087%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,011 samples, 0.51%)</title><rect x="21.7919%" y="309" width="0.5085%" height="15" fill="rgb(241,52,2)" fg:x="43325" fg:w="1011"/><text x="22.0419%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (955 samples, 0.48%)</title><rect x="21.8201%" y="293" width="0.4804%" height="15" fill="rgb(248,140,14)" fg:x="43381" fg:w="955"/><text x="22.0701%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (152 samples, 0.08%)</title><rect x="22.2240%" y="277" width="0.0765%" height="15" fill="rgb(253,22,42)" fg:x="44184" fg:w="152"/><text x="22.4740%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (152 samples, 0.08%)</title><rect x="22.2240%" y="261" width="0.0765%" height="15" fill="rgb(234,61,47)" fg:x="44184" fg:w="152"/><text x="22.4740%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::get (52 samples, 0.03%)</title><rect x="22.3005%" y="405" width="0.0262%" height="15" fill="rgb(208,226,15)" fg:x="44336" fg:w="52"/><text x="22.5505%" y="415.50"></text></g><g><title>core::ptr::read (115 samples, 0.06%)</title><rect x="22.4066%" y="389" width="0.0578%" height="15" fill="rgb(217,221,4)" fg:x="44547" fg:w="115"/><text x="22.6566%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (11,210 samples, 5.64%)</title><rect x="16.8264%" y="437" width="5.6385%" height="15" fill="rgb(212,174,34)" fg:x="33453" fg:w="11210"/><text x="17.0764%" y="447.50">mut_bin..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (3,966 samples, 1.99%)</title><rect x="20.4701%" y="421" width="1.9948%" height="15" fill="rgb(253,83,4)" fg:x="40697" fg:w="3966"/><text x="20.7201%" y="431.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (275 samples, 0.14%)</title><rect x="22.3266%" y="405" width="0.1383%" height="15" fill="rgb(250,195,49)" fg:x="44388" fg:w="275"/><text x="22.5766%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (64 samples, 0.03%)</title><rect x="22.6043%" y="293" width="0.0322%" height="15" fill="rgb(241,192,25)" fg:x="44940" fg:w="64"/><text x="22.8543%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (197 samples, 0.10%)</title><rect x="22.5701%" y="309" width="0.0991%" height="15" fill="rgb(208,124,10)" fg:x="44872" fg:w="197"/><text x="22.8201%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (65 samples, 0.03%)</title><rect x="22.6365%" y="293" width="0.0327%" height="15" fill="rgb(222,33,0)" fg:x="45004" fg:w="65"/><text x="22.8865%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (273 samples, 0.14%)</title><rect x="22.7441%" y="293" width="0.1373%" height="15" fill="rgb(234,209,28)" fg:x="45218" fg:w="273"/><text x="22.9941%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (620 samples, 0.31%)</title><rect x="22.6692%" y="309" width="0.3119%" height="15" fill="rgb(224,11,23)" fg:x="45069" fg:w="620"/><text x="22.9192%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (198 samples, 0.10%)</title><rect x="22.8814%" y="293" width="0.0996%" height="15" fill="rgb(232,99,1)" fg:x="45491" fg:w="198"/><text x="23.1314%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (939 samples, 0.47%)</title><rect x="22.5092%" y="357" width="0.4723%" height="15" fill="rgb(237,95,45)" fg:x="44751" fg:w="939"/><text x="22.7592%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (939 samples, 0.47%)</title><rect x="22.5092%" y="341" width="0.4723%" height="15" fill="rgb(208,109,11)" fg:x="44751" fg:w="939"/><text x="22.7592%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (939 samples, 0.47%)</title><rect x="22.5092%" y="325" width="0.4723%" height="15" fill="rgb(216,190,48)" fg:x="44751" fg:w="939"/><text x="22.7592%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (102 samples, 0.05%)</title><rect x="22.9815%" y="357" width="0.0513%" height="15" fill="rgb(251,171,36)" fg:x="45690" fg:w="102"/><text x="23.2315%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (102 samples, 0.05%)</title><rect x="22.9815%" y="341" width="0.0513%" height="15" fill="rgb(230,62,22)" fg:x="45690" fg:w="102"/><text x="23.2315%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (102 samples, 0.05%)</title><rect x="22.9815%" y="325" width="0.0513%" height="15" fill="rgb(225,114,35)" fg:x="45690" fg:w="102"/><text x="23.2315%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (90 samples, 0.05%)</title><rect x="22.9875%" y="309" width="0.0453%" height="15" fill="rgb(215,118,42)" fg:x="45702" fg:w="90"/><text x="23.2375%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (76 samples, 0.04%)</title><rect x="23.0902%" y="229" width="0.0382%" height="15" fill="rgb(243,119,21)" fg:x="45906" fg:w="76"/><text x="23.3402%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (252 samples, 0.13%)</title><rect x="23.0328%" y="261" width="0.1268%" height="15" fill="rgb(252,177,53)" fg:x="45792" fg:w="252"/><text x="23.2828%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (199 samples, 0.10%)</title><rect x="23.0595%" y="245" width="0.1001%" height="15" fill="rgb(237,209,29)" fg:x="45845" fg:w="199"/><text x="23.3095%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (62 samples, 0.03%)</title><rect x="23.1284%" y="229" width="0.0312%" height="15" fill="rgb(212,65,23)" fg:x="45982" fg:w="62"/><text x="23.3784%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,337 samples, 0.67%)</title><rect x="22.4876%" y="373" width="0.6725%" height="15" fill="rgb(230,222,46)" fg:x="44708" fg:w="1337"/><text x="22.7376%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (253 samples, 0.13%)</title><rect x="23.0328%" y="357" width="0.1273%" height="15" fill="rgb(215,135,32)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (253 samples, 0.13%)</title><rect x="23.0328%" y="341" width="0.1273%" height="15" fill="rgb(246,101,22)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (253 samples, 0.13%)</title><rect x="23.0328%" y="325" width="0.1273%" height="15" fill="rgb(206,107,13)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (253 samples, 0.13%)</title><rect x="23.0328%" y="309" width="0.1273%" height="15" fill="rgb(250,100,44)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (253 samples, 0.13%)</title><rect x="23.0328%" y="293" width="0.1273%" height="15" fill="rgb(231,147,38)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (253 samples, 0.13%)</title><rect x="23.0328%" y="277" width="0.1273%" height="15" fill="rgb(229,8,40)" fg:x="45792" fg:w="253"/><text x="23.2828%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1,338 samples, 0.67%)</title><rect x="22.4876%" y="389" width="0.6730%" height="15" fill="rgb(221,135,30)" fg:x="44708" fg:w="1338"/><text x="22.7376%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.06%)</title><rect x="23.1928%" y="341" width="0.0644%" height="15" fill="rgb(249,193,18)" fg:x="46110" fg:w="128"/><text x="23.4428%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (121 samples, 0.06%)</title><rect x="23.1963%" y="325" width="0.0609%" height="15" fill="rgb(209,133,39)" fg:x="46117" fg:w="121"/><text x="23.4463%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (38 samples, 0.02%)</title><rect x="23.2380%" y="309" width="0.0191%" height="15" fill="rgb(232,100,14)" fg:x="46200" fg:w="38"/><text x="23.4880%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (467 samples, 0.23%)</title><rect x="23.2597%" y="325" width="0.2349%" height="15" fill="rgb(224,185,1)" fg:x="46243" fg:w="467"/><text x="23.5097%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (467 samples, 0.23%)</title><rect x="23.2597%" y="309" width="0.2349%" height="15" fill="rgb(223,139,8)" fg:x="46243" fg:w="467"/><text x="23.5097%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (467 samples, 0.23%)</title><rect x="23.2597%" y="293" width="0.2349%" height="15" fill="rgb(232,213,38)" fg:x="46243" fg:w="467"/><text x="23.5097%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (467 samples, 0.23%)</title><rect x="23.2597%" y="277" width="0.2349%" height="15" fill="rgb(207,94,22)" fg:x="46243" fg:w="467"/><text x="23.5097%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (104 samples, 0.05%)</title><rect x="23.4946%" y="277" width="0.0523%" height="15" fill="rgb(219,183,54)" fg:x="46710" fg:w="104"/><text x="23.7446%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (572 samples, 0.29%)</title><rect x="23.2597%" y="341" width="0.2877%" height="15" fill="rgb(216,185,54)" fg:x="46243" fg:w="572"/><text x="23.5097%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (105 samples, 0.05%)</title><rect x="23.4946%" y="325" width="0.0528%" height="15" fill="rgb(254,217,39)" fg:x="46710" fg:w="105"/><text x="23.7446%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (105 samples, 0.05%)</title><rect x="23.4946%" y="309" width="0.0528%" height="15" fill="rgb(240,178,23)" fg:x="46710" fg:w="105"/><text x="23.7446%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (105 samples, 0.05%)</title><rect x="23.4946%" y="293" width="0.0528%" height="15" fill="rgb(218,11,47)" fg:x="46710" fg:w="105"/><text x="23.7446%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (178 samples, 0.09%)</title><rect x="23.5474%" y="341" width="0.0895%" height="15" fill="rgb(218,51,51)" fg:x="46815" fg:w="178"/><text x="23.7974%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (34 samples, 0.02%)</title><rect x="23.6369%" y="341" width="0.0171%" height="15" fill="rgb(238,126,27)" fg:x="46993" fg:w="34"/><text x="23.8869%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (34 samples, 0.02%)</title><rect x="23.6369%" y="325" width="0.0171%" height="15" fill="rgb(249,202,22)" fg:x="46993" fg:w="34"/><text x="23.8869%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.02%)</title><rect x="23.6369%" y="309" width="0.0171%" height="15" fill="rgb(254,195,49)" fg:x="46993" fg:w="34"/><text x="23.8869%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (136 samples, 0.07%)</title><rect x="23.6540%" y="341" width="0.0684%" height="15" fill="rgb(208,123,14)" fg:x="47027" fg:w="136"/><text x="23.9040%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (136 samples, 0.07%)</title><rect x="23.6540%" y="325" width="0.0684%" height="15" fill="rgb(224,200,8)" fg:x="47027" fg:w="136"/><text x="23.9040%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,201 samples, 0.60%)</title><rect x="23.1611%" y="357" width="0.6041%" height="15" fill="rgb(217,61,36)" fg:x="46047" fg:w="1201"/><text x="23.4111%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (85 samples, 0.04%)</title><rect x="23.7224%" y="341" width="0.0428%" height="15" fill="rgb(206,35,45)" fg:x="47163" fg:w="85"/><text x="23.9724%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (85 samples, 0.04%)</title><rect x="23.7224%" y="325" width="0.0428%" height="15" fill="rgb(217,65,33)" fg:x="47163" fg:w="85"/><text x="23.9724%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (85 samples, 0.04%)</title><rect x="23.7224%" y="309" width="0.0428%" height="15" fill="rgb(222,158,48)" fg:x="47163" fg:w="85"/><text x="23.9724%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,594 samples, 1.30%)</title><rect x="22.4649%" y="437" width="1.3048%" height="15" fill="rgb(254,2,54)" fg:x="44663" fg:w="2594"/><text x="22.7149%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,594 samples, 1.30%)</title><rect x="22.4649%" y="421" width="1.3048%" height="15" fill="rgb(250,143,38)" fg:x="44663" fg:w="2594"/><text x="22.7149%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,594 samples, 1.30%)</title><rect x="22.4649%" y="405" width="1.3048%" height="15" fill="rgb(248,25,0)" fg:x="44663" fg:w="2594"/><text x="22.7149%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,211 samples, 0.61%)</title><rect x="23.1606%" y="389" width="0.6091%" height="15" fill="rgb(206,152,27)" fg:x="46046" fg:w="1211"/><text x="23.4106%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,211 samples, 0.61%)</title><rect x="23.1606%" y="373" width="0.6091%" height="15" fill="rgb(240,77,30)" fg:x="46046" fg:w="1211"/><text x="23.4106%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 0.01%)</title><rect x="23.7813%" y="325" width="0.0116%" height="15" fill="rgb(231,5,3)" fg:x="47280" fg:w="23"/><text x="24.0313%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.01%)</title><rect x="23.7999%" y="309" width="0.0126%" height="15" fill="rgb(207,226,32)" fg:x="47317" fg:w="25"/><text x="24.0499%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (86 samples, 0.04%)</title><rect x="23.7757%" y="373" width="0.0433%" height="15" fill="rgb(222,207,47)" fg:x="47269" fg:w="86"/><text x="24.0257%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (86 samples, 0.04%)</title><rect x="23.7757%" y="357" width="0.0433%" height="15" fill="rgb(229,115,45)" fg:x="47269" fg:w="86"/><text x="24.0257%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (86 samples, 0.04%)</title><rect x="23.7757%" y="341" width="0.0433%" height="15" fill="rgb(224,191,6)" fg:x="47269" fg:w="86"/><text x="24.0257%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52 samples, 0.03%)</title><rect x="23.7928%" y="325" width="0.0262%" height="15" fill="rgb(230,227,24)" fg:x="47303" fg:w="52"/><text x="24.0428%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.01%)</title><rect x="23.8215%" y="277" width="0.0131%" height="15" fill="rgb(228,80,19)" fg:x="47360" fg:w="26"/><text x="24.0715%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22 samples, 0.01%)</title><rect x="23.8235%" y="261" width="0.0111%" height="15" fill="rgb(247,229,0)" fg:x="47364" fg:w="22"/><text x="24.0735%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (122 samples, 0.06%)</title><rect x="23.7737%" y="405" width="0.0614%" height="15" fill="rgb(237,194,15)" fg:x="47265" fg:w="122"/><text x="24.0237%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (122 samples, 0.06%)</title><rect x="23.7737%" y="389" width="0.0614%" height="15" fill="rgb(219,203,20)" fg:x="47265" fg:w="122"/><text x="24.0237%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.01%)</title><rect x="23.8215%" y="373" width="0.0136%" height="15" fill="rgb(234,128,8)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (27 samples, 0.01%)</title><rect x="23.8215%" y="357" width="0.0136%" height="15" fill="rgb(248,202,8)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="367.50"></text></g><g><title>core::hash::Hasher::write_i64 (27 samples, 0.01%)</title><rect x="23.8215%" y="341" width="0.0136%" height="15" fill="rgb(206,104,37)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (27 samples, 0.01%)</title><rect x="23.8215%" y="325" width="0.0136%" height="15" fill="rgb(223,8,27)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="23.8215%" y="309" width="0.0136%" height="15" fill="rgb(216,217,28)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="23.8215%" y="293" width="0.0136%" height="15" fill="rgb(249,199,1)" fg:x="47360" fg:w="27"/><text x="24.0715%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.02%)</title><rect x="23.8597%" y="373" width="0.0166%" height="15" fill="rgb(240,85,17)" fg:x="47436" fg:w="33"/><text x="24.1097%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (110 samples, 0.06%)</title><rect x="23.8351%" y="405" width="0.0553%" height="15" fill="rgb(206,108,45)" fg:x="47387" fg:w="110"/><text x="24.0851%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (104 samples, 0.05%)</title><rect x="23.8381%" y="389" width="0.0523%" height="15" fill="rgb(245,210,41)" fg:x="47393" fg:w="104"/><text x="24.0881%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (15,409 samples, 7.75%)</title><rect x="16.1590%" y="453" width="7.7505%" height="15" fill="rgb(206,13,37)" fg:x="32126" fg:w="15409"/><text x="16.4090%" y="463.50">mut_binary_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (278 samples, 0.14%)</title><rect x="23.7697%" y="437" width="0.1398%" height="15" fill="rgb(250,61,18)" fg:x="47257" fg:w="278"/><text x="24.0197%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (276 samples, 0.14%)</title><rect x="23.7707%" y="421" width="0.1388%" height="15" fill="rgb(235,172,48)" fg:x="47259" fg:w="276"/><text x="24.0207%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (38 samples, 0.02%)</title><rect x="23.8904%" y="405" width="0.0191%" height="15" fill="rgb(249,201,17)" fg:x="47497" fg:w="38"/><text x="24.1404%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (30 samples, 0.02%)</title><rect x="23.8944%" y="389" width="0.0151%" height="15" fill="rgb(219,208,6)" fg:x="47505" fg:w="30"/><text x="24.1444%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (64 samples, 0.03%)</title><rect x="23.9191%" y="453" width="0.0322%" height="15" fill="rgb(248,31,23)" fg:x="47554" fg:w="64"/><text x="24.1691%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (64 samples, 0.03%)</title><rect x="23.9191%" y="437" width="0.0322%" height="15" fill="rgb(245,15,42)" fg:x="47554" fg:w="64"/><text x="24.1691%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_size (38 samples, 0.02%)</title><rect x="23.9513%" y="453" width="0.0191%" height="15" fill="rgb(222,217,39)" fg:x="47618" fg:w="38"/><text x="24.2013%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (38 samples, 0.02%)</title><rect x="23.9513%" y="437" width="0.0191%" height="15" fill="rgb(210,219,27)" fg:x="47618" fg:w="38"/><text x="24.2013%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (55 samples, 0.03%)</title><rect x="23.9709%" y="453" width="0.0277%" height="15" fill="rgb(252,166,36)" fg:x="47657" fg:w="55"/><text x="24.2209%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (16,183 samples, 8.14%)</title><rect x="15.8844%" y="469" width="8.1399%" height="15" fill="rgb(245,132,34)" fg:x="31580" fg:w="16183"/><text x="16.1344%" y="479.50">project1::s..</text></g><g><title>project1::solver::types::Lit::var_idx (51 samples, 0.03%)</title><rect x="23.9986%" y="453" width="0.0257%" height="15" fill="rgb(236,54,3)" fg:x="47712" fg:w="51"/><text x="24.2486%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (51 samples, 0.03%)</title><rect x="23.9986%" y="437" width="0.0257%" height="15" fill="rgb(241,173,43)" fg:x="47712" fg:w="51"/><text x="24.2486%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (45 samples, 0.02%)</title><rect x="24.0292%" y="453" width="0.0226%" height="15" fill="rgb(215,190,9)" fg:x="47773" fg:w="45"/><text x="24.2792%" y="463.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (45 samples, 0.02%)</title><rect x="24.0292%" y="437" width="0.0226%" height="15" fill="rgb(242,101,16)" fg:x="47773" fg:w="45"/><text x="24.2792%" y="447.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (45 samples, 0.02%)</title><rect x="24.0292%" y="421" width="0.0226%" height="15" fill="rgb(223,190,21)" fg:x="47773" fg:w="45"/><text x="24.2792%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (45 samples, 0.02%)</title><rect x="24.0292%" y="405" width="0.0226%" height="15" fill="rgb(215,228,25)" fg:x="47773" fg:w="45"/><text x="24.2792%" y="415.50"></text></g><g><title>_int_free (38 samples, 0.02%)</title><rect x="24.0660%" y="261" width="0.0191%" height="15" fill="rgb(225,36,22)" fg:x="47846" fg:w="38"/><text x="24.3160%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (65 samples, 0.03%)</title><rect x="24.0554%" y="341" width="0.0327%" height="15" fill="rgb(251,106,46)" fg:x="47825" fg:w="65"/><text x="24.3054%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (62 samples, 0.03%)</title><rect x="24.0569%" y="325" width="0.0312%" height="15" fill="rgb(208,90,1)" fg:x="47828" fg:w="62"/><text x="24.3069%" y="335.50"></text></g><g><title>__rdl_dealloc (62 samples, 0.03%)</title><rect x="24.0569%" y="309" width="0.0312%" height="15" fill="rgb(243,10,4)" fg:x="47828" fg:w="62"/><text x="24.3069%" y="319.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (62 samples, 0.03%)</title><rect x="24.0569%" y="293" width="0.0312%" height="15" fill="rgb(212,137,27)" fg:x="47828" fg:w="62"/><text x="24.3069%" y="303.50"></text></g><g><title>__GI___libc_free (62 samples, 0.03%)</title><rect x="24.0569%" y="277" width="0.0312%" height="15" fill="rgb(231,220,49)" fg:x="47828" fg:w="62"/><text x="24.3069%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (73 samples, 0.04%)</title><rect x="24.0519%" y="453" width="0.0367%" height="15" fill="rgb(237,96,20)" fg:x="47818" fg:w="73"/><text x="24.3019%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (73 samples, 0.04%)</title><rect x="24.0519%" y="437" width="0.0367%" height="15" fill="rgb(239,229,30)" fg:x="47818" fg:w="73"/><text x="24.3019%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (73 samples, 0.04%)</title><rect x="24.0519%" y="421" width="0.0367%" height="15" fill="rgb(219,65,33)" fg:x="47818" fg:w="73"/><text x="24.3019%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (73 samples, 0.04%)</title><rect x="24.0519%" y="405" width="0.0367%" height="15" fill="rgb(243,134,7)" fg:x="47818" fg:w="73"/><text x="24.3019%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.04%)</title><rect x="24.0519%" y="389" width="0.0367%" height="15" fill="rgb(216,177,54)" fg:x="47818" fg:w="73"/><text x="24.3019%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (71 samples, 0.04%)</title><rect x="24.0529%" y="373" width="0.0357%" height="15" fill="rgb(211,160,20)" fg:x="47820" fg:w="71"/><text x="24.3029%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (66 samples, 0.03%)</title><rect x="24.0554%" y="357" width="0.0332%" height="15" fill="rgb(239,85,39)" fg:x="47825" fg:w="66"/><text x="24.3054%" y="367.50"></text></g><g><title>log::max_level (42 samples, 0.02%)</title><rect x="24.0886%" y="453" width="0.0211%" height="15" fill="rgb(232,125,22)" fg:x="47891" fg:w="42"/><text x="24.3386%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (42 samples, 0.02%)</title><rect x="24.0886%" y="437" width="0.0211%" height="15" fill="rgb(244,57,34)" fg:x="47891" fg:w="42"/><text x="24.3386%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.02%)</title><rect x="24.0886%" y="421" width="0.0211%" height="15" fill="rgb(214,203,32)" fg:x="47891" fg:w="42"/><text x="24.3386%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (35 samples, 0.02%)</title><rect x="24.1142%" y="389" width="0.0176%" height="15" fill="rgb(207,58,43)" fg:x="47942" fg:w="35"/><text x="24.3642%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35 samples, 0.02%)</title><rect x="24.1142%" y="373" width="0.0176%" height="15" fill="rgb(215,193,15)" fg:x="47942" fg:w="35"/><text x="24.3642%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.02%)</title><rect x="24.1127%" y="405" width="0.0196%" height="15" fill="rgb(232,15,44)" fg:x="47939" fg:w="39"/><text x="24.3627%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (57 samples, 0.03%)</title><rect x="24.1097%" y="453" width="0.0287%" height="15" fill="rgb(212,3,48)" fg:x="47933" fg:w="57"/><text x="24.3597%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (57 samples, 0.03%)</title><rect x="24.1097%" y="437" width="0.0287%" height="15" fill="rgb(218,128,7)" fg:x="47933" fg:w="57"/><text x="24.3597%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (51 samples, 0.03%)</title><rect x="24.1127%" y="421" width="0.0257%" height="15" fill="rgb(226,216,39)" fg:x="47939" fg:w="51"/><text x="24.3627%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (83 samples, 0.04%)</title><rect x="24.1384%" y="453" width="0.0417%" height="15" fill="rgb(243,47,51)" fg:x="47990" fg:w="83"/><text x="24.3884%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (64 samples, 0.03%)</title><rect x="24.2893%" y="341" width="0.0322%" height="15" fill="rgb(241,183,40)" fg:x="48290" fg:w="64"/><text x="24.5393%" y="351.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (64 samples, 0.03%)</title><rect x="24.2893%" y="325" width="0.0322%" height="15" fill="rgb(231,217,32)" fg:x="48290" fg:w="64"/><text x="24.5393%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (64 samples, 0.03%)</title><rect x="24.2893%" y="309" width="0.0322%" height="15" fill="rgb(229,61,38)" fg:x="48290" fg:w="64"/><text x="24.5393%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (104 samples, 0.05%)</title><rect x="24.2893%" y="405" width="0.0523%" height="15" fill="rgb(225,210,5)" fg:x="48290" fg:w="104"/><text x="24.5393%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (104 samples, 0.05%)</title><rect x="24.2893%" y="389" width="0.0523%" height="15" fill="rgb(231,79,45)" fg:x="48290" fg:w="104"/><text x="24.5393%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (104 samples, 0.05%)</title><rect x="24.2893%" y="373" width="0.0523%" height="15" fill="rgb(224,100,7)" fg:x="48290" fg:w="104"/><text x="24.5393%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (104 samples, 0.05%)</title><rect x="24.2893%" y="357" width="0.0523%" height="15" fill="rgb(241,198,18)" fg:x="48290" fg:w="104"/><text x="24.5393%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.02%)</title><rect x="24.3215%" y="341" width="0.0201%" height="15" fill="rgb(252,97,53)" fg:x="48354" fg:w="40"/><text x="24.5715%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.01%)</title><rect x="24.3652%" y="389" width="0.0111%" height="15" fill="rgb(220,88,7)" fg:x="48441" fg:w="22"/><text x="24.6152%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.01%)</title><rect x="24.4019%" y="341" width="0.0106%" height="15" fill="rgb(213,176,14)" fg:x="48514" fg:w="21"/><text x="24.6519%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.02%)</title><rect x="24.4155%" y="293" width="0.0221%" height="15" fill="rgb(246,73,7)" fg:x="48541" fg:w="44"/><text x="24.6655%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (29 samples, 0.01%)</title><rect x="24.4231%" y="277" width="0.0146%" height="15" fill="rgb(245,64,36)" fg:x="48556" fg:w="29"/><text x="24.6731%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.03%)</title><rect x="24.4130%" y="325" width="0.0251%" height="15" fill="rgb(245,80,10)" fg:x="48536" fg:w="50"/><text x="24.6630%" y="335.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (45 samples, 0.02%)</title><rect x="24.4155%" y="309" width="0.0226%" height="15" fill="rgb(232,107,50)" fg:x="48541" fg:w="45"/><text x="24.6655%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.02%)</title><rect x="24.4382%" y="325" width="0.0161%" height="15" fill="rgb(253,3,0)" fg:x="48586" fg:w="32"/><text x="24.6882%" y="335.50"></text></g><g><title>core::mem::swap (20 samples, 0.01%)</title><rect x="24.4543%" y="325" width="0.0101%" height="15" fill="rgb(212,99,53)" fg:x="48618" fg:w="20"/><text x="24.7043%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping (20 samples, 0.01%)</title><rect x="24.4543%" y="309" width="0.0101%" height="15" fill="rgb(249,111,54)" fg:x="48618" fg:w="20"/><text x="24.7043%" y="319.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (20 samples, 0.01%)</title><rect x="24.4543%" y="293" width="0.0101%" height="15" fill="rgb(249,55,30)" fg:x="48618" fg:w="20"/><text x="24.7043%" y="303.50"></text></g><g><title>core::mem::swap_simple (20 samples, 0.01%)</title><rect x="24.4543%" y="277" width="0.0101%" height="15" fill="rgb(237,47,42)" fg:x="48618" fg:w="20"/><text x="24.7043%" y="287.50"></text></g><g><title>_int_free (64 samples, 0.03%)</title><rect x="24.4804%" y="181" width="0.0322%" height="15" fill="rgb(211,20,18)" fg:x="48670" fg:w="64"/><text x="24.7304%" y="191.50"></text></g><g><title>__GI___libc_free (104 samples, 0.05%)</title><rect x="24.4719%" y="197" width="0.0523%" height="15" fill="rgb(231,203,46)" fg:x="48653" fg:w="104"/><text x="24.7219%" y="207.50"></text></g><g><title>arena_for_chunk (23 samples, 0.01%)</title><rect x="24.5126%" y="181" width="0.0116%" height="15" fill="rgb(237,142,3)" fg:x="48734" fg:w="23"/><text x="24.7626%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (116 samples, 0.06%)</title><rect x="24.4663%" y="261" width="0.0583%" height="15" fill="rgb(241,107,1)" fg:x="48642" fg:w="116"/><text x="24.7163%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (111 samples, 0.06%)</title><rect x="24.4688%" y="245" width="0.0558%" height="15" fill="rgb(229,83,13)" fg:x="48647" fg:w="111"/><text x="24.7188%" y="255.50"></text></g><g><title>__rdl_dealloc (111 samples, 0.06%)</title><rect x="24.4688%" y="229" width="0.0558%" height="15" fill="rgb(241,91,40)" fg:x="48647" fg:w="111"/><text x="24.7188%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (105 samples, 0.05%)</title><rect x="24.4719%" y="213" width="0.0528%" height="15" fill="rgb(225,3,45)" fg:x="48653" fg:w="105"/><text x="24.7219%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (122 samples, 0.06%)</title><rect x="24.4643%" y="325" width="0.0614%" height="15" fill="rgb(244,223,14)" fg:x="48638" fg:w="122"/><text x="24.7143%" y="335.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.06%)</title><rect x="24.4643%" y="309" width="0.0614%" height="15" fill="rgb(224,124,37)" fg:x="48638" fg:w="122"/><text x="24.7143%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (119 samples, 0.06%)</title><rect x="24.4658%" y="293" width="0.0599%" height="15" fill="rgb(251,171,30)" fg:x="48641" fg:w="119"/><text x="24.7158%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (118 samples, 0.06%)</title><rect x="24.4663%" y="277" width="0.0594%" height="15" fill="rgb(236,46,54)" fg:x="48642" fg:w="118"/><text x="24.7163%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (53 samples, 0.03%)</title><rect x="24.5257%" y="325" width="0.0267%" height="15" fill="rgb(245,213,5)" fg:x="48760" fg:w="53"/><text x="24.7757%" y="335.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (53 samples, 0.03%)</title><rect x="24.5257%" y="309" width="0.0267%" height="15" fill="rgb(230,144,27)" fg:x="48760" fg:w="53"/><text x="24.7757%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (53 samples, 0.03%)</title><rect x="24.5257%" y="293" width="0.0267%" height="15" fill="rgb(220,86,6)" fg:x="48760" fg:w="53"/><text x="24.7757%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (53 samples, 0.03%)</title><rect x="24.5257%" y="277" width="0.0267%" height="15" fill="rgb(240,20,13)" fg:x="48760" fg:w="53"/><text x="24.7757%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (53 samples, 0.03%)</title><rect x="24.5257%" y="261" width="0.0267%" height="15" fill="rgb(217,89,34)" fg:x="48760" fg:w="53"/><text x="24.7757%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (21 samples, 0.01%)</title><rect x="24.5528%" y="325" width="0.0106%" height="15" fill="rgb(229,13,5)" fg:x="48814" fg:w="21"/><text x="24.8028%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (21 samples, 0.01%)</title><rect x="24.5528%" y="309" width="0.0106%" height="15" fill="rgb(244,67,35)" fg:x="48814" fg:w="21"/><text x="24.8028%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (77 samples, 0.04%)</title><rect x="24.6167%" y="277" width="0.0387%" height="15" fill="rgb(221,40,2)" fg:x="48941" fg:w="77"/><text x="24.8667%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (307 samples, 0.15%)</title><rect x="24.5765%" y="293" width="0.1544%" height="15" fill="rgb(237,157,21)" fg:x="48861" fg:w="307"/><text x="24.8265%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (150 samples, 0.08%)</title><rect x="24.6555%" y="277" width="0.0754%" height="15" fill="rgb(222,94,11)" fg:x="49018" fg:w="150"/><text x="24.9055%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (150 samples, 0.08%)</title><rect x="24.6555%" y="261" width="0.0754%" height="15" fill="rgb(249,113,6)" fg:x="49018" fg:w="150"/><text x="24.9055%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (251 samples, 0.13%)</title><rect x="24.7480%" y="277" width="0.1262%" height="15" fill="rgb(238,137,36)" fg:x="49202" fg:w="251"/><text x="24.9980%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (251 samples, 0.13%)</title><rect x="24.7480%" y="261" width="0.1262%" height="15" fill="rgb(210,102,26)" fg:x="49202" fg:w="251"/><text x="24.9980%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (288 samples, 0.14%)</title><rect x="24.7309%" y="293" width="0.1449%" height="15" fill="rgb(218,30,30)" fg:x="49168" fg:w="288"/><text x="24.9809%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (48 samples, 0.02%)</title><rect x="24.8758%" y="293" width="0.0241%" height="15" fill="rgb(214,67,26)" fg:x="49456" fg:w="48"/><text x="25.1258%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,044 samples, 0.53%)</title><rect x="24.5634%" y="309" width="0.5251%" height="15" fill="rgb(251,9,53)" fg:x="48835" fg:w="1044"/><text x="24.8134%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (375 samples, 0.19%)</title><rect x="24.8999%" y="293" width="0.1886%" height="15" fill="rgb(228,204,25)" fg:x="49504" fg:w="375"/><text x="25.1499%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (375 samples, 0.19%)</title><rect x="24.8999%" y="277" width="0.1886%" height="15" fill="rgb(207,153,8)" fg:x="49504" fg:w="375"/><text x="25.1499%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (375 samples, 0.19%)</title><rect x="24.8999%" y="261" width="0.1886%" height="15" fill="rgb(242,9,16)" fg:x="49504" fg:w="375"/><text x="25.1499%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (55 samples, 0.03%)</title><rect x="25.0885%" y="293" width="0.0277%" height="15" fill="rgb(217,211,10)" fg:x="49879" fg:w="55"/><text x="25.3385%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,124 samples, 0.57%)</title><rect x="24.5634%" y="325" width="0.5654%" height="15" fill="rgb(219,228,52)" fg:x="48835" fg:w="1124"/><text x="24.8134%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (80 samples, 0.04%)</title><rect x="25.0885%" y="309" width="0.0402%" height="15" fill="rgb(231,92,29)" fg:x="49879" fg:w="80"/><text x="25.3385%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (25 samples, 0.01%)</title><rect x="25.1162%" y="293" width="0.0126%" height="15" fill="rgb(232,8,23)" fg:x="49934" fg:w="25"/><text x="25.3662%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (21 samples, 0.01%)</title><rect x="25.1333%" y="293" width="0.0106%" height="15" fill="rgb(216,211,34)" fg:x="49968" fg:w="21"/><text x="25.3833%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (21 samples, 0.01%)</title><rect x="25.1333%" y="277" width="0.0106%" height="15" fill="rgb(236,151,0)" fg:x="49968" fg:w="21"/><text x="25.3833%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (24 samples, 0.01%)</title><rect x="25.1529%" y="277" width="0.0121%" height="15" fill="rgb(209,168,3)" fg:x="50007" fg:w="24"/><text x="25.4029%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (22 samples, 0.01%)</title><rect x="25.1539%" y="261" width="0.0111%" height="15" fill="rgb(208,129,28)" fg:x="50009" fg:w="22"/><text x="25.4039%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.01%)</title><rect x="25.1539%" y="245" width="0.0111%" height="15" fill="rgb(229,78,22)" fg:x="50009" fg:w="22"/><text x="25.4039%" y="255.50"></text></g><g><title>__rdl_alloc (310 samples, 0.16%)</title><rect x="25.1650%" y="213" width="0.1559%" height="15" fill="rgb(228,187,13)" fg:x="50031" fg:w="310"/><text x="25.4150%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (310 samples, 0.16%)</title><rect x="25.1650%" y="197" width="0.1559%" height="15" fill="rgb(240,119,24)" fg:x="50031" fg:w="310"/><text x="25.4150%" y="207.50"></text></g><g><title>__GI___libc_malloc (307 samples, 0.15%)</title><rect x="25.1665%" y="181" width="0.1544%" height="15" fill="rgb(209,194,42)" fg:x="50034" fg:w="307"/><text x="25.4165%" y="191.50"></text></g><g><title>tcache_get (189 samples, 0.10%)</title><rect x="25.2258%" y="165" width="0.0951%" height="15" fill="rgb(247,200,46)" fg:x="50152" fg:w="189"/><text x="25.4758%" y="175.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (318 samples, 0.16%)</title><rect x="25.1650%" y="277" width="0.1600%" height="15" fill="rgb(218,76,16)" fg:x="50031" fg:w="318"/><text x="25.4150%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (318 samples, 0.16%)</title><rect x="25.1650%" y="261" width="0.1600%" height="15" fill="rgb(225,21,48)" fg:x="50031" fg:w="318"/><text x="25.4150%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (318 samples, 0.16%)</title><rect x="25.1650%" y="245" width="0.1600%" height="15" fill="rgb(239,223,50)" fg:x="50031" fg:w="318"/><text x="25.4150%" y="255.50"></text></g><g><title>alloc::alloc::alloc (318 samples, 0.16%)</title><rect x="25.1650%" y="229" width="0.1600%" height="15" fill="rgb(244,45,21)" fg:x="50031" fg:w="318"/><text x="25.4150%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (371 samples, 0.19%)</title><rect x="25.1449%" y="293" width="0.1866%" height="15" fill="rgb(232,33,43)" fg:x="49991" fg:w="371"/><text x="25.3949%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,910 samples, 0.96%)</title><rect x="24.4125%" y="341" width="0.9607%" height="15" fill="rgb(209,8,3)" fg:x="48535" fg:w="1910"/><text x="24.6625%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (486 samples, 0.24%)</title><rect x="25.1288%" y="325" width="0.2445%" height="15" fill="rgb(214,25,53)" fg:x="49959" fg:w="486"/><text x="25.3788%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (477 samples, 0.24%)</title><rect x="25.1333%" y="309" width="0.2399%" height="15" fill="rgb(254,186,54)" fg:x="49968" fg:w="477"/><text x="25.3833%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (83 samples, 0.04%)</title><rect x="25.3315%" y="293" width="0.0417%" height="15" fill="rgb(208,174,49)" fg:x="50362" fg:w="83"/><text x="25.5815%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (22 samples, 0.01%)</title><rect x="25.3622%" y="277" width="0.0111%" height="15" fill="rgb(233,191,51)" fg:x="50423" fg:w="22"/><text x="25.6122%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (22 samples, 0.01%)</title><rect x="25.3622%" y="261" width="0.0111%" height="15" fill="rgb(222,134,10)" fg:x="50423" fg:w="22"/><text x="25.6122%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,997 samples, 1.00%)</title><rect x="24.3763%" y="389" width="1.0045%" height="15" fill="rgb(230,226,20)" fg:x="48463" fg:w="1997"/><text x="24.6263%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,986 samples, 1.00%)</title><rect x="24.3818%" y="373" width="0.9989%" height="15" fill="rgb(251,111,25)" fg:x="48474" fg:w="1986"/><text x="24.6318%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,969 samples, 0.99%)</title><rect x="24.3904%" y="357" width="0.9904%" height="15" fill="rgb(224,40,46)" fg:x="48491" fg:w="1969"/><text x="24.6404%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (231 samples, 0.12%)</title><rect x="25.4296%" y="373" width="0.1162%" height="15" fill="rgb(236,108,47)" fg:x="50557" fg:w="231"/><text x="25.6796%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (229 samples, 0.12%)</title><rect x="25.4306%" y="357" width="0.1152%" height="15" fill="rgb(234,93,0)" fg:x="50559" fg:w="229"/><text x="25.6806%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (44 samples, 0.02%)</title><rect x="25.5236%" y="341" width="0.0221%" height="15" fill="rgb(224,213,32)" fg:x="50744" fg:w="44"/><text x="25.7736%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (86 samples, 0.04%)</title><rect x="25.5457%" y="373" width="0.0433%" height="15" fill="rgb(251,11,48)" fg:x="50788" fg:w="86"/><text x="25.7957%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (86 samples, 0.04%)</title><rect x="25.5457%" y="357" width="0.0433%" height="15" fill="rgb(236,173,5)" fg:x="50788" fg:w="86"/><text x="25.7957%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (74 samples, 0.04%)</title><rect x="25.5890%" y="373" width="0.0372%" height="15" fill="rgb(230,95,12)" fg:x="50874" fg:w="74"/><text x="25.8390%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (74 samples, 0.04%)</title><rect x="25.5890%" y="357" width="0.0372%" height="15" fill="rgb(232,209,1)" fg:x="50874" fg:w="74"/><text x="25.8390%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (74 samples, 0.04%)</title><rect x="25.5890%" y="341" width="0.0372%" height="15" fill="rgb(232,6,1)" fg:x="50874" fg:w="74"/><text x="25.8390%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.04%)</title><rect x="25.5890%" y="325" width="0.0372%" height="15" fill="rgb(210,224,50)" fg:x="50874" fg:w="74"/><text x="25.8390%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (73 samples, 0.04%)</title><rect x="25.5895%" y="309" width="0.0367%" height="15" fill="rgb(228,127,35)" fg:x="50875" fg:w="73"/><text x="25.8395%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (56 samples, 0.03%)</title><rect x="25.6463%" y="357" width="0.0282%" height="15" fill="rgb(245,102,45)" fg:x="50988" fg:w="56"/><text x="25.8963%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (124 samples, 0.06%)</title><rect x="25.6262%" y="373" width="0.0624%" height="15" fill="rgb(214,1,49)" fg:x="50948" fg:w="124"/><text x="25.8762%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (28 samples, 0.01%)</title><rect x="25.6745%" y="357" width="0.0141%" height="15" fill="rgb(226,163,40)" fg:x="51044" fg:w="28"/><text x="25.9245%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.01%)</title><rect x="25.6745%" y="341" width="0.0141%" height="15" fill="rgb(239,212,28)" fg:x="51044" fg:w="28"/><text x="25.9245%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (142 samples, 0.07%)</title><rect x="25.7092%" y="357" width="0.0714%" height="15" fill="rgb(220,20,13)" fg:x="51113" fg:w="142"/><text x="25.9592%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (216 samples, 0.11%)</title><rect x="25.6886%" y="373" width="0.1086%" height="15" fill="rgb(210,164,35)" fg:x="51072" fg:w="216"/><text x="25.9386%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (30 samples, 0.02%)</title><rect x="25.7821%" y="357" width="0.0151%" height="15" fill="rgb(248,109,41)" fg:x="51258" fg:w="30"/><text x="26.0321%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (30 samples, 0.02%)</title><rect x="25.7821%" y="341" width="0.0151%" height="15" fill="rgb(238,23,50)" fg:x="51258" fg:w="30"/><text x="26.0321%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (210 samples, 0.11%)</title><rect x="25.7972%" y="373" width="0.1056%" height="15" fill="rgb(211,48,49)" fg:x="51288" fg:w="210"/><text x="26.0472%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (136 samples, 0.07%)</title><rect x="25.9029%" y="373" width="0.0684%" height="15" fill="rgb(223,36,21)" fg:x="51498" fg:w="136"/><text x="26.1529%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (136 samples, 0.07%)</title><rect x="25.9029%" y="357" width="0.0684%" height="15" fill="rgb(207,123,46)" fg:x="51498" fg:w="136"/><text x="26.1529%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (136 samples, 0.07%)</title><rect x="25.9029%" y="341" width="0.0684%" height="15" fill="rgb(240,218,32)" fg:x="51498" fg:w="136"/><text x="26.1529%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (192 samples, 0.10%)</title><rect x="25.9713%" y="373" width="0.0966%" height="15" fill="rgb(252,5,43)" fg:x="51634" fg:w="192"/><text x="26.2213%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (192 samples, 0.10%)</title><rect x="25.9713%" y="357" width="0.0966%" height="15" fill="rgb(252,84,19)" fg:x="51634" fg:w="192"/><text x="26.2213%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3,446 samples, 1.73%)</title><rect x="24.3416%" y="405" width="1.7333%" height="15" fill="rgb(243,152,39)" fg:x="48394" fg:w="3446"/><text x="24.5916%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,380 samples, 0.69%)</title><rect x="25.3808%" y="389" width="0.6941%" height="15" fill="rgb(234,160,15)" fg:x="50460" fg:w="1380"/><text x="25.6308%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (40 samples, 0.02%)</title><rect x="26.0814%" y="389" width="0.0201%" height="15" fill="rgb(237,34,20)" fg:x="51853" fg:w="40"/><text x="26.3314%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (40 samples, 0.02%)</title><rect x="26.0814%" y="373" width="0.0201%" height="15" fill="rgb(229,97,13)" fg:x="51853" fg:w="40"/><text x="26.3314%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (40 samples, 0.02%)</title><rect x="26.0814%" y="357" width="0.0201%" height="15" fill="rgb(234,71,50)" fg:x="51853" fg:w="40"/><text x="26.3314%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (40 samples, 0.02%)</title><rect x="26.0814%" y="341" width="0.0201%" height="15" fill="rgb(253,155,4)" fg:x="51853" fg:w="40"/><text x="26.3314%" y="351.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (27 samples, 0.01%)</title><rect x="26.1544%" y="373" width="0.0136%" height="15" fill="rgb(222,185,37)" fg:x="51998" fg:w="27"/><text x="26.4044%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (44 samples, 0.02%)</title><rect x="26.1679%" y="373" width="0.0221%" height="15" fill="rgb(251,177,13)" fg:x="52025" fg:w="44"/><text x="26.4179%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (44 samples, 0.02%)</title><rect x="26.1679%" y="357" width="0.0221%" height="15" fill="rgb(250,179,40)" fg:x="52025" fg:w="44"/><text x="26.4179%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (4,309 samples, 2.17%)</title><rect x="24.0242%" y="469" width="2.1674%" height="15" fill="rgb(242,44,2)" fg:x="47763" fg:w="4309"/><text x="24.2742%" y="479.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3,999 samples, 2.01%)</title><rect x="24.1801%" y="453" width="2.0114%" height="15" fill="rgb(216,177,13)" fg:x="48073" fg:w="3999"/><text x="24.4301%" y="463.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3,999 samples, 2.01%)</title><rect x="24.1801%" y="437" width="2.0114%" height="15" fill="rgb(216,106,43)" fg:x="48073" fg:w="3999"/><text x="24.4301%" y="447.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,828 samples, 1.93%)</title><rect x="24.2661%" y="421" width="1.9254%" height="15" fill="rgb(216,183,2)" fg:x="48244" fg:w="3828"/><text x="24.5161%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (232 samples, 0.12%)</title><rect x="26.0749%" y="405" width="0.1167%" height="15" fill="rgb(249,75,3)" fg:x="51840" fg:w="232"/><text x="26.3249%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (179 samples, 0.09%)</title><rect x="26.1015%" y="389" width="0.0900%" height="15" fill="rgb(219,67,39)" fg:x="51893" fg:w="179"/><text x="26.3515%" y="399.50"></text></g><g><title>__irqentry_text_end (33 samples, 0.02%)</title><rect x="26.2439%" y="373" width="0.0166%" height="15" fill="rgb(253,228,2)" fg:x="52176" fg:w="33"/><text x="26.4939%" y="383.50"></text></g><g><title>charge_memcg (52 samples, 0.03%)</title><rect x="26.3053%" y="245" width="0.0262%" height="15" fill="rgb(235,138,27)" fg:x="52298" fg:w="52"/><text x="26.5553%" y="255.50"></text></g><g><title>try_charge_memcg (21 samples, 0.01%)</title><rect x="26.3208%" y="229" width="0.0106%" height="15" fill="rgb(236,97,51)" fg:x="52329" fg:w="21"/><text x="26.5708%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (60 samples, 0.03%)</title><rect x="26.3314%" y="245" width="0.0302%" height="15" fill="rgb(240,80,30)" fg:x="52350" fg:w="60"/><text x="26.5814%" y="255.50"></text></g><g><title>__mem_cgroup_charge (123 samples, 0.06%)</title><rect x="26.3022%" y="261" width="0.0619%" height="15" fill="rgb(230,178,19)" fg:x="52292" fg:w="123"/><text x="26.5522%" y="271.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (20 samples, 0.01%)</title><rect x="26.3651%" y="261" width="0.0101%" height="15" fill="rgb(210,190,27)" fg:x="52417" fg:w="20"/><text x="26.6151%" y="271.50"></text></g><g><title>lru_cache_add (20 samples, 0.01%)</title><rect x="26.3651%" y="245" width="0.0101%" height="15" fill="rgb(222,107,31)" fg:x="52417" fg:w="20"/><text x="26.6151%" y="255.50"></text></g><g><title>folio_add_lru (20 samples, 0.01%)</title><rect x="26.3651%" y="229" width="0.0101%" height="15" fill="rgb(216,127,34)" fg:x="52417" fg:w="20"/><text x="26.6151%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (29 samples, 0.01%)</title><rect x="26.3757%" y="245" width="0.0146%" height="15" fill="rgb(234,116,52)" fg:x="52438" fg:w="29"/><text x="26.6257%" y="255.50"></text></g><g><title>page_add_new_anon_rmap (31 samples, 0.02%)</title><rect x="26.3752%" y="261" width="0.0156%" height="15" fill="rgb(222,124,15)" fg:x="52437" fg:w="31"/><text x="26.6252%" y="271.50"></text></g><g><title>clear_page_erms (22 samples, 0.01%)</title><rect x="26.4008%" y="197" width="0.0111%" height="15" fill="rgb(231,179,28)" fg:x="52488" fg:w="22"/><text x="26.6508%" y="207.50"></text></g><g><title>get_page_from_freelist (50 samples, 0.03%)</title><rect x="26.4003%" y="213" width="0.0251%" height="15" fill="rgb(226,93,45)" fg:x="52487" fg:w="50"/><text x="26.6503%" y="223.50"></text></g><g><title>rmqueue (26 samples, 0.01%)</title><rect x="26.4124%" y="197" width="0.0131%" height="15" fill="rgb(215,8,51)" fg:x="52511" fg:w="26"/><text x="26.6624%" y="207.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (26 samples, 0.01%)</title><rect x="26.4124%" y="181" width="0.0131%" height="15" fill="rgb(223,106,5)" fg:x="52511" fg:w="26"/><text x="26.6624%" y="191.50"></text></g><g><title>__alloc_pages (61 samples, 0.03%)</title><rect x="26.3953%" y="229" width="0.0307%" height="15" fill="rgb(250,191,5)" fg:x="52477" fg:w="61"/><text x="26.6453%" y="239.50"></text></g><g><title>__folio_alloc (63 samples, 0.03%)</title><rect x="26.3953%" y="245" width="0.0317%" height="15" fill="rgb(242,132,44)" fg:x="52477" fg:w="63"/><text x="26.6453%" y="255.50"></text></g><g><title>do_anonymous_page (262 samples, 0.13%)</title><rect x="26.2962%" y="277" width="0.1318%" height="15" fill="rgb(251,152,29)" fg:x="52280" fg:w="262"/><text x="26.5462%" y="287.50"></text></g><g><title>vma_alloc_folio (72 samples, 0.04%)</title><rect x="26.3918%" y="261" width="0.0362%" height="15" fill="rgb(218,179,5)" fg:x="52470" fg:w="72"/><text x="26.6418%" y="271.50"></text></g><g><title>handle_pte_fault (293 samples, 0.15%)</title><rect x="26.2851%" y="293" width="0.1474%" height="15" fill="rgb(227,67,19)" fg:x="52258" fg:w="293"/><text x="26.5351%" y="303.50"></text></g><g><title>__handle_mm_fault (322 samples, 0.16%)</title><rect x="26.2711%" y="309" width="0.1620%" height="15" fill="rgb(233,119,31)" fg:x="52230" fg:w="322"/><text x="26.5211%" y="319.50"></text></g><g><title>count_memcg_events.constprop.0 (20 samples, 0.01%)</title><rect x="26.4330%" y="309" width="0.0101%" height="15" fill="rgb(241,120,22)" fg:x="52552" fg:w="20"/><text x="26.6830%" y="319.50"></text></g><g><title>__count_memcg_events (20 samples, 0.01%)</title><rect x="26.4330%" y="293" width="0.0101%" height="15" fill="rgb(224,102,30)" fg:x="52552" fg:w="20"/><text x="26.6830%" y="303.50"></text></g><g><title>handle_mm_fault (357 samples, 0.18%)</title><rect x="26.2690%" y="325" width="0.1796%" height="15" fill="rgb(210,164,37)" fg:x="52226" fg:w="357"/><text x="26.5190%" y="335.50"></text></g><g><title>do_user_addr_fault (373 samples, 0.19%)</title><rect x="26.2620%" y="341" width="0.1876%" height="15" fill="rgb(226,191,16)" fg:x="52212" fg:w="373"/><text x="26.5120%" y="351.50"></text></g><g><title>irqentry_exit (25 samples, 0.01%)</title><rect x="26.4496%" y="341" width="0.0126%" height="15" fill="rgb(214,40,45)" fg:x="52585" fg:w="25"/><text x="26.6996%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (25 samples, 0.01%)</title><rect x="26.4496%" y="325" width="0.0126%" height="15" fill="rgb(244,29,26)" fg:x="52585" fg:w="25"/><text x="26.6996%" y="335.50"></text></g><g><title>asm_exc_page_fault (403 samples, 0.20%)</title><rect x="26.2605%" y="373" width="0.2027%" height="15" fill="rgb(216,16,5)" fg:x="52209" fg:w="403"/><text x="26.5105%" y="383.50"></text></g><g><title>exc_page_fault (403 samples, 0.20%)</title><rect x="26.2605%" y="357" width="0.2027%" height="15" fill="rgb(249,76,35)" fg:x="52209" fg:w="403"/><text x="26.5105%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (514 samples, 0.26%)</title><rect x="26.2157%" y="405" width="0.2585%" height="15" fill="rgb(207,11,44)" fg:x="52120" fg:w="514"/><text x="26.4657%" y="415.50"></text></g><g><title>core::ptr::write (503 samples, 0.25%)</title><rect x="26.2213%" y="389" width="0.2530%" height="15" fill="rgb(228,190,49)" fg:x="52131" fg:w="503"/><text x="26.4713%" y="399.50"></text></g><g><title>__x64_sys_mprotect (22 samples, 0.01%)</title><rect x="26.6302%" y="53" width="0.0111%" height="15" fill="rgb(214,173,12)" fg:x="52944" fg:w="22"/><text x="26.8802%" y="63.50"></text></g><g><title>do_mprotect_pkey (22 samples, 0.01%)</title><rect x="26.6302%" y="37" width="0.0111%" height="15" fill="rgb(218,26,35)" fg:x="52944" fg:w="22"/><text x="26.8802%" y="47.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (26 samples, 0.01%)</title><rect x="26.6292%" y="85" width="0.0131%" height="15" fill="rgb(220,200,19)" fg:x="52942" fg:w="26"/><text x="26.8792%" y="95.50"></text></g><g><title>do_syscall_64 (24 samples, 0.01%)</title><rect x="26.6302%" y="69" width="0.0121%" height="15" fill="rgb(239,95,49)" fg:x="52944" fg:w="24"/><text x="26.8802%" y="79.50"></text></g><g><title>grow_heap (30 samples, 0.02%)</title><rect x="26.6292%" y="117" width="0.0151%" height="15" fill="rgb(235,85,53)" fg:x="52942" fg:w="30"/><text x="26.8792%" y="127.50"></text></g><g><title>__GI___mprotect (30 samples, 0.02%)</title><rect x="26.6292%" y="101" width="0.0151%" height="15" fill="rgb(233,133,31)" fg:x="52942" fg:w="30"/><text x="26.8792%" y="111.50"></text></g><g><title>_int_malloc (159 samples, 0.08%)</title><rect x="26.5653%" y="149" width="0.0800%" height="15" fill="rgb(218,25,20)" fg:x="52815" fg:w="159"/><text x="26.8153%" y="159.50"></text></g><g><title>sysmalloc (48 samples, 0.02%)</title><rect x="26.6211%" y="133" width="0.0241%" height="15" fill="rgb(252,210,38)" fg:x="52926" fg:w="48"/><text x="26.8711%" y="143.50"></text></g><g><title>__rdl_alloc (360 samples, 0.18%)</title><rect x="26.4768%" y="197" width="0.1811%" height="15" fill="rgb(242,134,21)" fg:x="52639" fg:w="360"/><text x="26.7268%" y="207.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (360 samples, 0.18%)</title><rect x="26.4768%" y="181" width="0.1811%" height="15" fill="rgb(213,28,48)" fg:x="52639" fg:w="360"/><text x="26.7268%" y="191.50"></text></g><g><title>__GI___libc_malloc (360 samples, 0.18%)</title><rect x="26.4768%" y="165" width="0.1811%" height="15" fill="rgb(250,196,2)" fg:x="52639" fg:w="360"/><text x="26.7268%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (364 samples, 0.18%)</title><rect x="26.4768%" y="245" width="0.1831%" height="15" fill="rgb(227,5,17)" fg:x="52639" fg:w="364"/><text x="26.7268%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (364 samples, 0.18%)</title><rect x="26.4768%" y="229" width="0.1831%" height="15" fill="rgb(221,226,24)" fg:x="52639" fg:w="364"/><text x="26.7268%" y="239.50"></text></g><g><title>alloc::alloc::alloc (364 samples, 0.18%)</title><rect x="26.4768%" y="213" width="0.1831%" height="15" fill="rgb(211,5,48)" fg:x="52639" fg:w="364"/><text x="26.7268%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (369 samples, 0.19%)</title><rect x="26.4753%" y="293" width="0.1856%" height="15" fill="rgb(219,150,6)" fg:x="52636" fg:w="369"/><text x="26.7253%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (369 samples, 0.19%)</title><rect x="26.4753%" y="277" width="0.1856%" height="15" fill="rgb(251,46,16)" fg:x="52636" fg:w="369"/><text x="26.7253%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (369 samples, 0.19%)</title><rect x="26.4753%" y="261" width="0.1856%" height="15" fill="rgb(220,204,40)" fg:x="52636" fg:w="369"/><text x="26.7253%" y="271.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (402 samples, 0.20%)</title><rect x="26.4743%" y="389" width="0.2022%" height="15" fill="rgb(211,85,2)" fg:x="52634" fg:w="402"/><text x="26.7243%" y="399.50"></text></g><g><title>project1::solver::clause::Clause::with_key (400 samples, 0.20%)</title><rect x="26.4753%" y="373" width="0.2012%" height="15" fill="rgb(229,17,7)" fg:x="52636" fg:w="400"/><text x="26.7253%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (400 samples, 0.20%)</title><rect x="26.4753%" y="357" width="0.2012%" height="15" fill="rgb(239,72,28)" fg:x="52636" fg:w="400"/><text x="26.7253%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (400 samples, 0.20%)</title><rect x="26.4753%" y="341" width="0.2012%" height="15" fill="rgb(230,47,54)" fg:x="52636" fg:w="400"/><text x="26.7253%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (400 samples, 0.20%)</title><rect x="26.4753%" y="325" width="0.2012%" height="15" fill="rgb(214,50,8)" fg:x="52636" fg:w="400"/><text x="26.7253%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (400 samples, 0.20%)</title><rect x="26.4753%" y="309" width="0.2012%" height="15" fill="rgb(216,198,43)" fg:x="52636" fg:w="400"/><text x="26.7253%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.02%)</title><rect x="26.6609%" y="293" width="0.0156%" height="15" fill="rgb(234,20,35)" fg:x="53005" fg:w="31"/><text x="26.9109%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.02%)</title><rect x="26.6609%" y="277" width="0.0156%" height="15" fill="rgb(254,45,19)" fg:x="53005" fg:w="31"/><text x="26.9109%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (28 samples, 0.01%)</title><rect x="26.6624%" y="261" width="0.0141%" height="15" fill="rgb(219,14,44)" fg:x="53008" fg:w="28"/><text x="26.9124%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (965 samples, 0.49%)</title><rect x="26.1916%" y="469" width="0.4854%" height="15" fill="rgb(217,220,26)" fg:x="52072" fg:w="965"/><text x="26.4416%" y="479.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (965 samples, 0.49%)</title><rect x="26.1916%" y="453" width="0.4854%" height="15" fill="rgb(213,158,28)" fg:x="52072" fg:w="965"/><text x="26.4416%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (965 samples, 0.49%)</title><rect x="26.1916%" y="437" width="0.4854%" height="15" fill="rgb(252,51,52)" fg:x="52072" fg:w="965"/><text x="26.4416%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (934 samples, 0.47%)</title><rect x="26.2072%" y="421" width="0.4698%" height="15" fill="rgb(246,89,16)" fg:x="52103" fg:w="934"/><text x="26.4572%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (403 samples, 0.20%)</title><rect x="26.4743%" y="405" width="0.2027%" height="15" fill="rgb(216,158,49)" fg:x="52634" fg:w="403"/><text x="26.7243%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (56 samples, 0.03%)</title><rect x="26.7066%" y="437" width="0.0282%" height="15" fill="rgb(236,107,19)" fg:x="53096" fg:w="56"/><text x="26.9566%" y="447.50"></text></g><g><title>core::ptr::read (47 samples, 0.02%)</title><rect x="26.7112%" y="421" width="0.0236%" height="15" fill="rgb(228,185,30)" fg:x="53105" fg:w="47"/><text x="26.9612%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 0.01%)</title><rect x="26.7499%" y="261" width="0.0141%" height="15" fill="rgb(246,134,8)" fg:x="53182" fg:w="28"/><text x="26.9999%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (66 samples, 0.03%)</title><rect x="26.7363%" y="325" width="0.0332%" height="15" fill="rgb(214,143,50)" fg:x="53155" fg:w="66"/><text x="26.9863%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (66 samples, 0.03%)</title><rect x="26.7363%" y="309" width="0.0332%" height="15" fill="rgb(228,75,8)" fg:x="53155" fg:w="66"/><text x="26.9863%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (66 samples, 0.03%)</title><rect x="26.7363%" y="293" width="0.0332%" height="15" fill="rgb(207,175,4)" fg:x="53155" fg:w="66"/><text x="26.9863%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (47 samples, 0.02%)</title><rect x="26.7459%" y="277" width="0.0236%" height="15" fill="rgb(205,108,24)" fg:x="53174" fg:w="47"/><text x="26.9959%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (104 samples, 0.05%)</title><rect x="26.7348%" y="341" width="0.0523%" height="15" fill="rgb(244,120,49)" fg:x="53152" fg:w="104"/><text x="26.9848%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22 samples, 0.01%)</title><rect x="26.7760%" y="325" width="0.0111%" height="15" fill="rgb(223,47,38)" fg:x="53234" fg:w="22"/><text x="27.0260%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (21 samples, 0.01%)</title><rect x="26.7766%" y="309" width="0.0106%" height="15" fill="rgb(229,179,11)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (21 samples, 0.01%)</title><rect x="26.7766%" y="293" width="0.0106%" height="15" fill="rgb(231,122,1)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (21 samples, 0.01%)</title><rect x="26.7766%" y="277" width="0.0106%" height="15" fill="rgb(245,119,9)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="26.7766%" y="261" width="0.0106%" height="15" fill="rgb(241,163,25)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="26.7766%" y="245" width="0.0106%" height="15" fill="rgb(217,214,3)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="26.7766%" y="229" width="0.0106%" height="15" fill="rgb(240,86,28)" fg:x="53235" fg:w="21"/><text x="27.0266%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (105 samples, 0.05%)</title><rect x="26.7348%" y="357" width="0.0528%" height="15" fill="rgb(215,47,9)" fg:x="53152" fg:w="105"/><text x="26.9848%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (25 samples, 0.01%)</title><rect x="26.7967%" y="293" width="0.0126%" height="15" fill="rgb(252,25,45)" fg:x="53275" fg:w="25"/><text x="27.0467%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (25 samples, 0.01%)</title><rect x="26.7967%" y="277" width="0.0126%" height="15" fill="rgb(251,164,9)" fg:x="53275" fg:w="25"/><text x="27.0467%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.01%)</title><rect x="26.7967%" y="261" width="0.0126%" height="15" fill="rgb(233,194,0)" fg:x="53275" fg:w="25"/><text x="27.0467%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (25 samples, 0.01%)</title><rect x="26.7967%" y="245" width="0.0126%" height="15" fill="rgb(249,111,24)" fg:x="53275" fg:w="25"/><text x="27.0467%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (33 samples, 0.02%)</title><rect x="26.7967%" y="309" width="0.0166%" height="15" fill="rgb(250,223,3)" fg:x="53275" fg:w="33"/><text x="27.0467%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (72 samples, 0.04%)</title><rect x="26.7876%" y="341" width="0.0362%" height="15" fill="rgb(236,178,37)" fg:x="53257" fg:w="72"/><text x="27.0376%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (70 samples, 0.04%)</title><rect x="26.7886%" y="325" width="0.0352%" height="15" fill="rgb(241,158,50)" fg:x="53259" fg:w="70"/><text x="27.0386%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (234 samples, 0.12%)</title><rect x="26.7348%" y="437" width="0.1177%" height="15" fill="rgb(213,121,41)" fg:x="53152" fg:w="234"/><text x="26.9848%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (234 samples, 0.12%)</title><rect x="26.7348%" y="421" width="0.1177%" height="15" fill="rgb(240,92,3)" fg:x="53152" fg:w="234"/><text x="26.9848%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (234 samples, 0.12%)</title><rect x="26.7348%" y="405" width="0.1177%" height="15" fill="rgb(205,123,3)" fg:x="53152" fg:w="234"/><text x="26.9848%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (234 samples, 0.12%)</title><rect x="26.7348%" y="389" width="0.1177%" height="15" fill="rgb(205,97,47)" fg:x="53152" fg:w="234"/><text x="26.9848%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (234 samples, 0.12%)</title><rect x="26.7348%" y="373" width="0.1177%" height="15" fill="rgb(247,152,14)" fg:x="53152" fg:w="234"/><text x="26.9848%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (129 samples, 0.06%)</title><rect x="26.7876%" y="357" width="0.0649%" height="15" fill="rgb(248,195,53)" fg:x="53257" fg:w="129"/><text x="27.0376%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (57 samples, 0.03%)</title><rect x="26.8238%" y="341" width="0.0287%" height="15" fill="rgb(226,201,16)" fg:x="53329" fg:w="57"/><text x="27.0738%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (56 samples, 0.03%)</title><rect x="26.8243%" y="325" width="0.0282%" height="15" fill="rgb(205,98,0)" fg:x="53330" fg:w="56"/><text x="27.0743%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (53 samples, 0.03%)</title><rect x="26.8258%" y="309" width="0.0267%" height="15" fill="rgb(214,191,48)" fg:x="53333" fg:w="53"/><text x="27.0758%" y="319.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (39 samples, 0.02%)</title><rect x="26.8837%" y="373" width="0.0196%" height="15" fill="rgb(237,112,39)" fg:x="53448" fg:w="39"/><text x="27.1337%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (39 samples, 0.02%)</title><rect x="26.8837%" y="357" width="0.0196%" height="15" fill="rgb(247,203,27)" fg:x="53448" fg:w="39"/><text x="27.1337%" y="367.50"></text></g><g><title>compare::Compare::compares_le (71 samples, 0.04%)</title><rect x="26.8837%" y="389" width="0.0357%" height="15" fill="rgb(235,124,28)" fg:x="53448" fg:w="71"/><text x="27.1337%" y="399.50"></text></g><g><title>core::cmp::PartialEq::ne (32 samples, 0.02%)</title><rect x="26.9033%" y="373" width="0.0161%" height="15" fill="rgb(208,207,46)" fg:x="53487" fg:w="32"/><text x="27.1533%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (23 samples, 0.01%)</title><rect x="26.9078%" y="357" width="0.0116%" height="15" fill="rgb(234,176,4)" fg:x="53496" fg:w="23"/><text x="27.1578%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76 samples, 0.04%)</title><rect x="26.9315%" y="341" width="0.0382%" height="15" fill="rgb(230,133,28)" fg:x="53543" fg:w="76"/><text x="27.1815%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (63 samples, 0.03%)</title><rect x="26.9757%" y="261" width="0.0317%" height="15" fill="rgb(211,137,40)" fg:x="53631" fg:w="63"/><text x="27.2257%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (63 samples, 0.03%)</title><rect x="26.9757%" y="245" width="0.0317%" height="15" fill="rgb(254,35,13)" fg:x="53631" fg:w="63"/><text x="27.2257%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (63 samples, 0.03%)</title><rect x="26.9757%" y="229" width="0.0317%" height="15" fill="rgb(225,49,51)" fg:x="53631" fg:w="63"/><text x="27.2257%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (34 samples, 0.02%)</title><rect x="26.9903%" y="213" width="0.0171%" height="15" fill="rgb(251,10,15)" fg:x="53660" fg:w="34"/><text x="27.2403%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="27.0114%" y="165" width="0.0106%" height="15" fill="rgb(228,207,15)" fg:x="53702" fg:w="21"/><text x="27.2614%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (96 samples, 0.05%)</title><rect x="26.9757%" y="293" width="0.0483%" height="15" fill="rgb(241,99,19)" fg:x="53631" fg:w="96"/><text x="27.2257%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (96 samples, 0.05%)</title><rect x="26.9757%" y="277" width="0.0483%" height="15" fill="rgb(207,104,49)" fg:x="53631" fg:w="96"/><text x="27.2257%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.01%)</title><rect x="27.0114%" y="261" width="0.0126%" height="15" fill="rgb(234,99,18)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (25 samples, 0.01%)</title><rect x="27.0114%" y="245" width="0.0126%" height="15" fill="rgb(213,191,49)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (25 samples, 0.01%)</title><rect x="27.0114%" y="229" width="0.0126%" height="15" fill="rgb(210,226,19)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (25 samples, 0.01%)</title><rect x="27.0114%" y="213" width="0.0126%" height="15" fill="rgb(229,97,18)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.01%)</title><rect x="27.0114%" y="197" width="0.0126%" height="15" fill="rgb(211,167,15)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25 samples, 0.01%)</title><rect x="27.0114%" y="181" width="0.0126%" height="15" fill="rgb(210,169,34)" fg:x="53702" fg:w="25"/><text x="27.2614%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (31 samples, 0.02%)</title><rect x="27.0401%" y="229" width="0.0156%" height="15" fill="rgb(241,121,31)" fg:x="53759" fg:w="31"/><text x="27.2901%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (31 samples, 0.02%)</title><rect x="27.0401%" y="213" width="0.0156%" height="15" fill="rgb(232,40,11)" fg:x="53759" fg:w="31"/><text x="27.2901%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.02%)</title><rect x="27.0401%" y="197" width="0.0156%" height="15" fill="rgb(205,86,26)" fg:x="53759" fg:w="31"/><text x="27.2901%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (31 samples, 0.02%)</title><rect x="27.0401%" y="181" width="0.0156%" height="15" fill="rgb(231,126,28)" fg:x="53759" fg:w="31"/><text x="27.2901%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (35 samples, 0.02%)</title><rect x="27.0401%" y="245" width="0.0176%" height="15" fill="rgb(219,221,18)" fg:x="53759" fg:w="35"/><text x="27.2901%" y="255.50"></text></g><g><title>core::mem::drop (297 samples, 0.15%)</title><rect x="26.9194%" y="389" width="0.1494%" height="15" fill="rgb(211,40,0)" fg:x="53519" fg:w="297"/><text x="27.1694%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (297 samples, 0.15%)</title><rect x="26.9194%" y="373" width="0.1494%" height="15" fill="rgb(239,85,43)" fg:x="53519" fg:w="297"/><text x="27.1694%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (297 samples, 0.15%)</title><rect x="26.9194%" y="357" width="0.1494%" height="15" fill="rgb(231,55,21)" fg:x="53519" fg:w="297"/><text x="27.1694%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (191 samples, 0.10%)</title><rect x="26.9727%" y="341" width="0.0961%" height="15" fill="rgb(225,184,43)" fg:x="53625" fg:w="191"/><text x="27.2227%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (191 samples, 0.10%)</title><rect x="26.9727%" y="325" width="0.0961%" height="15" fill="rgb(251,158,41)" fg:x="53625" fg:w="191"/><text x="27.2227%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (189 samples, 0.10%)</title><rect x="26.9737%" y="309" width="0.0951%" height="15" fill="rgb(234,159,37)" fg:x="53627" fg:w="189"/><text x="27.2237%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (89 samples, 0.04%)</title><rect x="27.0240%" y="293" width="0.0448%" height="15" fill="rgb(216,204,22)" fg:x="53727" fg:w="89"/><text x="27.2740%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (82 samples, 0.04%)</title><rect x="27.0275%" y="277" width="0.0412%" height="15" fill="rgb(214,17,3)" fg:x="53734" fg:w="82"/><text x="27.2775%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (73 samples, 0.04%)</title><rect x="27.0321%" y="261" width="0.0367%" height="15" fill="rgb(212,111,17)" fg:x="53743" fg:w="73"/><text x="27.2821%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.03%)</title><rect x="27.0985%" y="341" width="0.0312%" height="15" fill="rgb(221,157,24)" fg:x="53875" fg:w="62"/><text x="27.3485%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="27.1317%" y="261" width="0.0342%" height="15" fill="rgb(252,16,13)" fg:x="53941" fg:w="68"/><text x="27.3817%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="27.1317%" y="245" width="0.0342%" height="15" fill="rgb(221,62,2)" fg:x="53941" fg:w="68"/><text x="27.3817%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="27.1317%" y="229" width="0.0342%" height="15" fill="rgb(247,87,22)" fg:x="53941" fg:w="68"/><text x="27.3817%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (42 samples, 0.02%)</title><rect x="27.1447%" y="213" width="0.0211%" height="15" fill="rgb(215,73,9)" fg:x="53967" fg:w="42"/><text x="27.3947%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.01%)</title><rect x="27.1699%" y="165" width="0.0116%" height="15" fill="rgb(207,175,33)" fg:x="54017" fg:w="23"/><text x="27.4199%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (103 samples, 0.05%)</title><rect x="27.1317%" y="293" width="0.0518%" height="15" fill="rgb(243,129,54)" fg:x="53941" fg:w="103"/><text x="27.3817%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (103 samples, 0.05%)</title><rect x="27.1317%" y="277" width="0.0518%" height="15" fill="rgb(227,119,45)" fg:x="53941" fg:w="103"/><text x="27.3817%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (27 samples, 0.01%)</title><rect x="27.1699%" y="261" width="0.0136%" height="15" fill="rgb(205,109,36)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (27 samples, 0.01%)</title><rect x="27.1699%" y="245" width="0.0136%" height="15" fill="rgb(205,6,39)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (27 samples, 0.01%)</title><rect x="27.1699%" y="229" width="0.0136%" height="15" fill="rgb(221,32,16)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (27 samples, 0.01%)</title><rect x="27.1699%" y="213" width="0.0136%" height="15" fill="rgb(228,144,50)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="27.1699%" y="197" width="0.0136%" height="15" fill="rgb(229,201,53)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (27 samples, 0.01%)</title><rect x="27.1699%" y="181" width="0.0136%" height="15" fill="rgb(249,153,27)" fg:x="54017" fg:w="27"/><text x="27.4199%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (226 samples, 0.11%)</title><rect x="27.0975%" y="373" width="0.1137%" height="15" fill="rgb(227,106,25)" fg:x="53873" fg:w="226"/><text x="27.3475%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (226 samples, 0.11%)</title><rect x="27.0975%" y="357" width="0.1137%" height="15" fill="rgb(230,65,29)" fg:x="53873" fg:w="226"/><text x="27.3475%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (158 samples, 0.08%)</title><rect x="27.1317%" y="341" width="0.0795%" height="15" fill="rgb(221,57,46)" fg:x="53941" fg:w="158"/><text x="27.3817%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (158 samples, 0.08%)</title><rect x="27.1317%" y="325" width="0.0795%" height="15" fill="rgb(229,161,17)" fg:x="53941" fg:w="158"/><text x="27.3817%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (158 samples, 0.08%)</title><rect x="27.1317%" y="309" width="0.0795%" height="15" fill="rgb(222,213,11)" fg:x="53941" fg:w="158"/><text x="27.3817%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (55 samples, 0.03%)</title><rect x="27.1835%" y="293" width="0.0277%" height="15" fill="rgb(235,35,13)" fg:x="54044" fg:w="55"/><text x="27.4335%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (45 samples, 0.02%)</title><rect x="27.1885%" y="277" width="0.0226%" height="15" fill="rgb(233,158,34)" fg:x="54054" fg:w="45"/><text x="27.4385%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43 samples, 0.02%)</title><rect x="27.1895%" y="261" width="0.0216%" height="15" fill="rgb(215,151,48)" fg:x="54056" fg:w="43"/><text x="27.4395%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (292 samples, 0.15%)</title><rect x="27.0753%" y="389" width="0.1469%" height="15" fill="rgb(229,84,14)" fg:x="53829" fg:w="292"/><text x="27.3253%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (21 samples, 0.01%)</title><rect x="27.2116%" y="373" width="0.0106%" height="15" fill="rgb(229,68,14)" fg:x="54100" fg:w="21"/><text x="27.4616%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (31 samples, 0.02%)</title><rect x="27.2569%" y="373" width="0.0156%" height="15" fill="rgb(243,106,26)" fg:x="54190" fg:w="31"/><text x="27.5069%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (40 samples, 0.02%)</title><rect x="27.3273%" y="229" width="0.0201%" height="15" fill="rgb(206,45,38)" fg:x="54330" fg:w="40"/><text x="27.5773%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (81 samples, 0.04%)</title><rect x="27.3158%" y="245" width="0.0407%" height="15" fill="rgb(226,6,15)" fg:x="54307" fg:w="81"/><text x="27.5658%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (113 samples, 0.06%)</title><rect x="27.3827%" y="229" width="0.0568%" height="15" fill="rgb(232,22,54)" fg:x="54440" fg:w="113"/><text x="27.6327%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (350 samples, 0.18%)</title><rect x="27.2946%" y="293" width="0.1760%" height="15" fill="rgb(229,222,32)" fg:x="54265" fg:w="350"/><text x="27.5446%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (350 samples, 0.18%)</title><rect x="27.2946%" y="277" width="0.1760%" height="15" fill="rgb(228,62,29)" fg:x="54265" fg:w="350"/><text x="27.5446%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (350 samples, 0.18%)</title><rect x="27.2946%" y="261" width="0.1760%" height="15" fill="rgb(251,103,34)" fg:x="54265" fg:w="350"/><text x="27.5446%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (227 samples, 0.11%)</title><rect x="27.3565%" y="245" width="0.1142%" height="15" fill="rgb(233,12,30)" fg:x="54388" fg:w="227"/><text x="27.6065%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (62 samples, 0.03%)</title><rect x="27.4395%" y="229" width="0.0312%" height="15" fill="rgb(238,52,0)" fg:x="54553" fg:w="62"/><text x="27.6895%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (20 samples, 0.01%)</title><rect x="27.4707%" y="245" width="0.0101%" height="15" fill="rgb(223,98,5)" fg:x="54615" fg:w="20"/><text x="27.7207%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (29 samples, 0.01%)</title><rect x="27.4707%" y="293" width="0.0146%" height="15" fill="rgb(228,75,37)" fg:x="54615" fg:w="29"/><text x="27.7207%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (29 samples, 0.01%)</title><rect x="27.4707%" y="277" width="0.0146%" height="15" fill="rgb(205,115,49)" fg:x="54615" fg:w="29"/><text x="27.7207%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (29 samples, 0.01%)</title><rect x="27.4707%" y="261" width="0.0146%" height="15" fill="rgb(250,154,43)" fg:x="54615" fg:w="29"/><text x="27.7207%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.01%)</title><rect x="27.5170%" y="165" width="0.0131%" height="15" fill="rgb(226,43,29)" fg:x="54707" fg:w="26"/><text x="27.7670%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (99 samples, 0.05%)</title><rect x="27.4893%" y="197" width="0.0498%" height="15" fill="rgb(249,228,39)" fg:x="54652" fg:w="99"/><text x="27.7393%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (70 samples, 0.04%)</title><rect x="27.5039%" y="181" width="0.0352%" height="15" fill="rgb(216,79,43)" fg:x="54681" fg:w="70"/><text x="27.7539%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (503 samples, 0.25%)</title><rect x="27.2901%" y="309" width="0.2530%" height="15" fill="rgb(228,95,12)" fg:x="54256" fg:w="503"/><text x="27.5401%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (115 samples, 0.06%)</title><rect x="27.4853%" y="293" width="0.0578%" height="15" fill="rgb(249,221,15)" fg:x="54644" fg:w="115"/><text x="27.7353%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (107 samples, 0.05%)</title><rect x="27.4893%" y="277" width="0.0538%" height="15" fill="rgb(233,34,13)" fg:x="54652" fg:w="107"/><text x="27.7393%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (107 samples, 0.05%)</title><rect x="27.4893%" y="261" width="0.0538%" height="15" fill="rgb(214,103,39)" fg:x="54652" fg:w="107"/><text x="27.7393%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (107 samples, 0.05%)</title><rect x="27.4893%" y="245" width="0.0538%" height="15" fill="rgb(251,126,39)" fg:x="54652" fg:w="107"/><text x="27.7393%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (107 samples, 0.05%)</title><rect x="27.4893%" y="229" width="0.0538%" height="15" fill="rgb(214,216,36)" fg:x="54652" fg:w="107"/><text x="27.7393%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (107 samples, 0.05%)</title><rect x="27.4893%" y="213" width="0.0538%" height="15" fill="rgb(220,221,8)" fg:x="54652" fg:w="107"/><text x="27.7393%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (511 samples, 0.26%)</title><rect x="27.2901%" y="325" width="0.2570%" height="15" fill="rgb(240,216,3)" fg:x="54256" fg:w="511"/><text x="27.5401%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="27.5763%" y="277" width="0.0176%" height="15" fill="rgb(232,218,17)" fg:x="54825" fg:w="35"/><text x="27.8263%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (33 samples, 0.02%)</title><rect x="27.5773%" y="261" width="0.0166%" height="15" fill="rgb(229,163,45)" fg:x="54827" fg:w="33"/><text x="27.8273%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (148 samples, 0.07%)</title><rect x="27.5989%" y="261" width="0.0744%" height="15" fill="rgb(231,110,42)" fg:x="54870" fg:w="148"/><text x="27.8489%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (148 samples, 0.07%)</title><rect x="27.5989%" y="245" width="0.0744%" height="15" fill="rgb(208,170,48)" fg:x="54870" fg:w="148"/><text x="27.8489%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (148 samples, 0.07%)</title><rect x="27.5989%" y="229" width="0.0744%" height="15" fill="rgb(239,116,25)" fg:x="54870" fg:w="148"/><text x="27.8489%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (148 samples, 0.07%)</title><rect x="27.5989%" y="213" width="0.0744%" height="15" fill="rgb(219,200,50)" fg:x="54870" fg:w="148"/><text x="27.8489%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (181 samples, 0.09%)</title><rect x="27.5989%" y="277" width="0.0910%" height="15" fill="rgb(245,200,0)" fg:x="54870" fg:w="181"/><text x="27.8489%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (33 samples, 0.02%)</title><rect x="27.6734%" y="261" width="0.0166%" height="15" fill="rgb(245,119,33)" fg:x="55018" fg:w="33"/><text x="27.9234%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (33 samples, 0.02%)</title><rect x="27.6734%" y="245" width="0.0166%" height="15" fill="rgb(231,125,12)" fg:x="55018" fg:w="33"/><text x="27.9234%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (33 samples, 0.02%)</title><rect x="27.6734%" y="229" width="0.0166%" height="15" fill="rgb(216,96,41)" fg:x="55018" fg:w="33"/><text x="27.9234%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (33 samples, 0.02%)</title><rect x="27.6734%" y="213" width="0.0166%" height="15" fill="rgb(248,43,45)" fg:x="55018" fg:w="33"/><text x="27.9234%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (72 samples, 0.04%)</title><rect x="27.6900%" y="277" width="0.0362%" height="15" fill="rgb(217,222,7)" fg:x="55051" fg:w="72"/><text x="27.9400%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (56 samples, 0.03%)</title><rect x="27.7262%" y="277" width="0.0282%" height="15" fill="rgb(233,28,6)" fg:x="55123" fg:w="56"/><text x="27.9762%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (56 samples, 0.03%)</title><rect x="27.7262%" y="261" width="0.0282%" height="15" fill="rgb(231,218,15)" fg:x="55123" fg:w="56"/><text x="27.9762%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.03%)</title><rect x="27.7262%" y="245" width="0.0282%" height="15" fill="rgb(226,171,48)" fg:x="55123" fg:w="56"/><text x="27.9762%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (1,107 samples, 0.56%)</title><rect x="27.2267%" y="389" width="0.5568%" height="15" fill="rgb(235,201,9)" fg:x="54130" fg:w="1107"/><text x="27.4767%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,016 samples, 0.51%)</title><rect x="27.2725%" y="373" width="0.5110%" height="15" fill="rgb(217,80,15)" fg:x="54221" fg:w="1016"/><text x="27.5225%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,010 samples, 0.51%)</title><rect x="27.2755%" y="357" width="0.5080%" height="15" fill="rgb(219,152,8)" fg:x="54227" fg:w="1010"/><text x="27.5255%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (995 samples, 0.50%)</title><rect x="27.2831%" y="341" width="0.5005%" height="15" fill="rgb(243,107,38)" fg:x="54242" fg:w="995"/><text x="27.5331%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (470 samples, 0.24%)</title><rect x="27.5471%" y="325" width="0.2364%" height="15" fill="rgb(231,17,5)" fg:x="54767" fg:w="470"/><text x="27.7971%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (454 samples, 0.23%)</title><rect x="27.5552%" y="309" width="0.2284%" height="15" fill="rgb(209,25,54)" fg:x="54783" fg:w="454"/><text x="27.8052%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (432 samples, 0.22%)</title><rect x="27.5662%" y="293" width="0.2173%" height="15" fill="rgb(219,0,2)" fg:x="54805" fg:w="432"/><text x="27.8162%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (58 samples, 0.03%)</title><rect x="27.7544%" y="277" width="0.0292%" height="15" fill="rgb(246,9,5)" fg:x="55179" fg:w="58"/><text x="28.0044%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (58 samples, 0.03%)</title><rect x="27.7544%" y="261" width="0.0292%" height="15" fill="rgb(226,159,4)" fg:x="55179" fg:w="58"/><text x="28.0044%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,859 samples, 0.94%)</title><rect x="26.8525%" y="437" width="0.9351%" height="15" fill="rgb(219,175,34)" fg:x="53386" fg:w="1859"/><text x="27.1025%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (1,853 samples, 0.93%)</title><rect x="26.8555%" y="421" width="0.9320%" height="15" fill="rgb(236,10,46)" fg:x="53392" fg:w="1853"/><text x="27.1055%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (1,833 samples, 0.92%)</title><rect x="26.8656%" y="405" width="0.9220%" height="15" fill="rgb(240,211,16)" fg:x="53412" fg:w="1833"/><text x="27.1156%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2,170 samples, 1.09%)</title><rect x="26.6986%" y="453" width="1.0915%" height="15" fill="rgb(205,3,43)" fg:x="53080" fg:w="2170"/><text x="26.9486%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (2,207 samples, 1.11%)</title><rect x="26.6815%" y="469" width="1.1101%" height="15" fill="rgb(245,7,22)" fg:x="53046" fg:w="2207"/><text x="26.9315%" y="479.50"></text></g><g><title>__mem_cgroup_charge (22 samples, 0.01%)</title><rect x="27.8087%" y="101" width="0.0111%" height="15" fill="rgb(239,132,32)" fg:x="55287" fg:w="22"/><text x="28.0587%" y="111.50"></text></g><g><title>do_anonymous_page (55 samples, 0.03%)</title><rect x="27.8072%" y="117" width="0.0277%" height="15" fill="rgb(228,202,34)" fg:x="55284" fg:w="55"/><text x="28.0572%" y="127.50"></text></g><g><title>__handle_mm_fault (61 samples, 0.03%)</title><rect x="27.8057%" y="149" width="0.0307%" height="15" fill="rgb(254,200,22)" fg:x="55281" fg:w="61"/><text x="28.0557%" y="159.50"></text></g><g><title>handle_pte_fault (61 samples, 0.03%)</title><rect x="27.8057%" y="133" width="0.0307%" height="15" fill="rgb(219,10,39)" fg:x="55281" fg:w="61"/><text x="28.0557%" y="143.50"></text></g><g><title>do_user_addr_fault (68 samples, 0.03%)</title><rect x="27.8042%" y="181" width="0.0342%" height="15" fill="rgb(226,210,39)" fg:x="55278" fg:w="68"/><text x="28.0542%" y="191.50"></text></g><g><title>handle_mm_fault (66 samples, 0.03%)</title><rect x="27.8052%" y="165" width="0.0332%" height="15" fill="rgb(208,219,16)" fg:x="55280" fg:w="66"/><text x="28.0552%" y="175.50"></text></g><g><title>asm_exc_page_fault (81 samples, 0.04%)</title><rect x="27.8032%" y="213" width="0.0407%" height="15" fill="rgb(216,158,51)" fg:x="55276" fg:w="81"/><text x="28.0532%" y="223.50"></text></g><g><title>exc_page_fault (80 samples, 0.04%)</title><rect x="27.8037%" y="197" width="0.0402%" height="15" fill="rgb(233,14,44)" fg:x="55277" fg:w="80"/><text x="28.0537%" y="207.50"></text></g><g><title>perf_event_mmap_event (51 samples, 0.03%)</title><rect x="27.8514%" y="85" width="0.0257%" height="15" fill="rgb(237,97,39)" fg:x="55372" fg:w="51"/><text x="28.1014%" y="95.50"></text></g><g><title>perf_iterate_sb (47 samples, 0.02%)</title><rect x="27.8534%" y="69" width="0.0236%" height="15" fill="rgb(218,198,43)" fg:x="55376" fg:w="47"/><text x="28.1034%" y="79.50"></text></g><g><title>perf_iterate_ctx (46 samples, 0.02%)</title><rect x="27.8540%" y="53" width="0.0231%" height="15" fill="rgb(231,104,20)" fg:x="55377" fg:w="46"/><text x="28.1040%" y="63.50"></text></g><g><title>perf_event_mmap (55 samples, 0.03%)</title><rect x="27.8509%" y="101" width="0.0277%" height="15" fill="rgb(254,36,13)" fg:x="55371" fg:w="55"/><text x="28.1009%" y="111.50"></text></g><g><title>__x64_sys_mprotect (68 samples, 0.03%)</title><rect x="27.8464%" y="149" width="0.0342%" height="15" fill="rgb(248,14,50)" fg:x="55362" fg:w="68"/><text x="28.0964%" y="159.50"></text></g><g><title>do_mprotect_pkey (68 samples, 0.03%)</title><rect x="27.8464%" y="133" width="0.0342%" height="15" fill="rgb(217,107,29)" fg:x="55362" fg:w="68"/><text x="28.0964%" y="143.50"></text></g><g><title>mprotect_fixup (65 samples, 0.03%)</title><rect x="27.8479%" y="117" width="0.0327%" height="15" fill="rgb(251,169,33)" fg:x="55365" fg:w="65"/><text x="28.0979%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (79 samples, 0.04%)</title><rect x="27.8444%" y="181" width="0.0397%" height="15" fill="rgb(217,108,32)" fg:x="55358" fg:w="79"/><text x="28.0944%" y="191.50"></text></g><g><title>do_syscall_64 (76 samples, 0.04%)</title><rect x="27.8459%" y="165" width="0.0382%" height="15" fill="rgb(219,66,42)" fg:x="55361" fg:w="76"/><text x="28.0959%" y="175.50"></text></g><g><title>grow_heap (88 samples, 0.04%)</title><rect x="27.8439%" y="213" width="0.0443%" height="15" fill="rgb(206,180,7)" fg:x="55357" fg:w="88"/><text x="28.0939%" y="223.50"></text></g><g><title>__GI___mprotect (88 samples, 0.04%)</title><rect x="27.8439%" y="197" width="0.0443%" height="15" fill="rgb(208,226,31)" fg:x="55357" fg:w="88"/><text x="28.0939%" y="207.50"></text></g><g><title>__GI___libc_malloc (191 samples, 0.10%)</title><rect x="27.7941%" y="261" width="0.0961%" height="15" fill="rgb(218,26,49)" fg:x="55258" fg:w="191"/><text x="28.0441%" y="271.50"></text></g><g><title>_int_malloc (188 samples, 0.09%)</title><rect x="27.7956%" y="245" width="0.0946%" height="15" fill="rgb(233,197,48)" fg:x="55261" fg:w="188"/><text x="28.0456%" y="255.50"></text></g><g><title>sysmalloc (186 samples, 0.09%)</title><rect x="27.7966%" y="229" width="0.0936%" height="15" fill="rgb(252,181,51)" fg:x="55263" fg:w="186"/><text x="28.0466%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (192 samples, 0.10%)</title><rect x="27.7941%" y="389" width="0.0966%" height="15" fill="rgb(253,90,19)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (192 samples, 0.10%)</title><rect x="27.7941%" y="373" width="0.0966%" height="15" fill="rgb(215,171,30)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (192 samples, 0.10%)</title><rect x="27.7941%" y="357" width="0.0966%" height="15" fill="rgb(214,222,9)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (192 samples, 0.10%)</title><rect x="27.7941%" y="341" width="0.0966%" height="15" fill="rgb(223,3,22)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (192 samples, 0.10%)</title><rect x="27.7941%" y="325" width="0.0966%" height="15" fill="rgb(225,196,46)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="335.50"></text></g><g><title>alloc::alloc::alloc (192 samples, 0.10%)</title><rect x="27.7941%" y="309" width="0.0966%" height="15" fill="rgb(209,110,37)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="319.50"></text></g><g><title>__rdl_alloc (192 samples, 0.10%)</title><rect x="27.7941%" y="293" width="0.0966%" height="15" fill="rgb(249,89,12)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (192 samples, 0.10%)</title><rect x="27.7941%" y="277" width="0.0966%" height="15" fill="rgb(226,27,33)" fg:x="55258" fg:w="192"/><text x="28.0441%" y="287.50"></text></g><g><title>__irqentry_text_end (24 samples, 0.01%)</title><rect x="27.9083%" y="341" width="0.0121%" height="15" fill="rgb(213,82,22)" fg:x="55485" fg:w="24"/><text x="28.1583%" y="351.50"></text></g><g><title>charge_memcg (44 samples, 0.02%)</title><rect x="27.9374%" y="213" width="0.0221%" height="15" fill="rgb(248,140,0)" fg:x="55543" fg:w="44"/><text x="28.1874%" y="223.50"></text></g><g><title>__mem_cgroup_charge (74 samples, 0.04%)</title><rect x="27.9364%" y="229" width="0.0372%" height="15" fill="rgb(228,106,3)" fg:x="55541" fg:w="74"/><text x="28.1864%" y="239.50"></text></g><g><title>clear_page_erms (27 samples, 0.01%)</title><rect x="27.9903%" y="165" width="0.0136%" height="15" fill="rgb(209,23,37)" fg:x="55648" fg:w="27"/><text x="28.2403%" y="175.50"></text></g><g><title>do_anonymous_page (156 samples, 0.08%)</title><rect x="27.9314%" y="245" width="0.0785%" height="15" fill="rgb(241,93,50)" fg:x="55531" fg:w="156"/><text x="28.1814%" y="255.50"></text></g><g><title>vma_alloc_folio (44 samples, 0.02%)</title><rect x="27.9877%" y="229" width="0.0221%" height="15" fill="rgb(253,46,43)" fg:x="55643" fg:w="44"/><text x="28.2377%" y="239.50"></text></g><g><title>__folio_alloc (43 samples, 0.02%)</title><rect x="27.9883%" y="213" width="0.0216%" height="15" fill="rgb(226,206,43)" fg:x="55644" fg:w="43"/><text x="28.2383%" y="223.50"></text></g><g><title>__alloc_pages (41 samples, 0.02%)</title><rect x="27.9893%" y="197" width="0.0206%" height="15" fill="rgb(217,54,7)" fg:x="55646" fg:w="41"/><text x="28.2393%" y="207.50"></text></g><g><title>get_page_from_freelist (40 samples, 0.02%)</title><rect x="27.9898%" y="181" width="0.0201%" height="15" fill="rgb(223,5,52)" fg:x="55647" fg:w="40"/><text x="28.2398%" y="191.50"></text></g><g><title>__handle_mm_fault (174 samples, 0.09%)</title><rect x="27.9234%" y="277" width="0.0875%" height="15" fill="rgb(206,52,46)" fg:x="55515" fg:w="174"/><text x="28.1734%" y="287.50"></text></g><g><title>handle_pte_fault (166 samples, 0.08%)</title><rect x="27.9274%" y="261" width="0.0835%" height="15" fill="rgb(253,136,11)" fg:x="55523" fg:w="166"/><text x="28.1774%" y="271.50"></text></g><g><title>do_user_addr_fault (186 samples, 0.09%)</title><rect x="27.9208%" y="309" width="0.0936%" height="15" fill="rgb(208,106,33)" fg:x="55510" fg:w="186"/><text x="28.1708%" y="319.50"></text></g><g><title>handle_mm_fault (182 samples, 0.09%)</title><rect x="27.9229%" y="293" width="0.0915%" height="15" fill="rgb(206,54,4)" fg:x="55514" fg:w="182"/><text x="28.1729%" y="303.50"></text></g><g><title>asm_exc_page_fault (209 samples, 0.11%)</title><rect x="27.9203%" y="341" width="0.1051%" height="15" fill="rgb(213,3,15)" fg:x="55509" fg:w="209"/><text x="28.1703%" y="351.50"></text></g><g><title>exc_page_fault (208 samples, 0.10%)</title><rect x="27.9208%" y="325" width="0.1046%" height="15" fill="rgb(252,211,39)" fg:x="55510" fg:w="208"/><text x="28.1708%" y="335.50"></text></g><g><title>irqentry_exit (21 samples, 0.01%)</title><rect x="28.0149%" y="309" width="0.0106%" height="15" fill="rgb(223,6,36)" fg:x="55697" fg:w="21"/><text x="28.2649%" y="319.50"></text></g><g><title>irqentry_exit_to_user_mode (21 samples, 0.01%)</title><rect x="28.0149%" y="293" width="0.0106%" height="15" fill="rgb(252,169,45)" fg:x="55697" fg:w="21"/><text x="28.2649%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (481 samples, 0.24%)</title><rect x="27.7941%" y="453" width="0.2419%" height="15" fill="rgb(212,48,26)" fg:x="55258" fg:w="481"/><text x="28.0441%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (481 samples, 0.24%)</title><rect x="27.7941%" y="437" width="0.2419%" height="15" fill="rgb(251,102,48)" fg:x="55258" fg:w="481"/><text x="28.0441%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (481 samples, 0.24%)</title><rect x="27.7941%" y="421" width="0.2419%" height="15" fill="rgb(243,208,16)" fg:x="55258" fg:w="481"/><text x="28.0441%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (481 samples, 0.24%)</title><rect x="27.7941%" y="405" width="0.2419%" height="15" fill="rgb(219,96,24)" fg:x="55258" fg:w="481"/><text x="28.0441%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (289 samples, 0.15%)</title><rect x="27.8907%" y="389" width="0.1454%" height="15" fill="rgb(219,33,29)" fg:x="55450" fg:w="289"/><text x="28.1407%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (289 samples, 0.15%)</title><rect x="27.8907%" y="373" width="0.1454%" height="15" fill="rgb(223,176,5)" fg:x="55450" fg:w="289"/><text x="28.1407%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (283 samples, 0.14%)</title><rect x="27.8937%" y="357" width="0.1423%" height="15" fill="rgb(228,140,14)" fg:x="55456" fg:w="283"/><text x="28.1437%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (115 samples, 0.06%)</title><rect x="28.1140%" y="389" width="0.0578%" height="15" fill="rgb(217,179,31)" fg:x="55894" fg:w="115"/><text x="28.3640%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (115 samples, 0.06%)</title><rect x="28.1140%" y="373" width="0.0578%" height="15" fill="rgb(230,9,30)" fg:x="55894" fg:w="115"/><text x="28.3640%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (127 samples, 0.06%)</title><rect x="28.1140%" y="421" width="0.0639%" height="15" fill="rgb(230,136,20)" fg:x="55894" fg:w="127"/><text x="28.3640%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (127 samples, 0.06%)</title><rect x="28.1140%" y="405" width="0.0639%" height="15" fill="rgb(215,210,22)" fg:x="55894" fg:w="127"/><text x="28.3640%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (286 samples, 0.14%)</title><rect x="28.0370%" y="437" width="0.1439%" height="15" fill="rgb(218,43,5)" fg:x="55741" fg:w="286"/><text x="28.2870%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (302 samples, 0.15%)</title><rect x="28.0360%" y="453" width="0.1519%" height="15" fill="rgb(216,11,5)" fg:x="55739" fg:w="302"/><text x="28.2860%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (258 samples, 0.13%)</title><rect x="28.3479%" y="325" width="0.1298%" height="15" fill="rgb(209,82,29)" fg:x="56359" fg:w="258"/><text x="28.5979%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (254 samples, 0.13%)</title><rect x="28.3499%" y="309" width="0.1278%" height="15" fill="rgb(244,115,12)" fg:x="56363" fg:w="254"/><text x="28.5999%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (269 samples, 0.14%)</title><rect x="28.3439%" y="357" width="0.1353%" height="15" fill="rgb(222,82,18)" fg:x="56351" fg:w="269"/><text x="28.5939%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (269 samples, 0.14%)</title><rect x="28.3439%" y="341" width="0.1353%" height="15" fill="rgb(249,227,8)" fg:x="56351" fg:w="269"/><text x="28.5939%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (396 samples, 0.20%)</title><rect x="28.2865%" y="389" width="0.1992%" height="15" fill="rgb(253,141,45)" fg:x="56237" fg:w="396"/><text x="28.5365%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (379 samples, 0.19%)</title><rect x="28.2951%" y="373" width="0.1906%" height="15" fill="rgb(234,184,4)" fg:x="56254" fg:w="379"/><text x="28.5451%" y="383.50"></text></g><g><title>core::slice::sort::find_streak (446 samples, 0.22%)</title><rect x="28.2619%" y="405" width="0.2243%" height="15" fill="rgb(218,194,23)" fg:x="56188" fg:w="446"/><text x="28.5119%" y="415.50"></text></g><g><title>core::slice::sort::merge_sort (301 samples, 0.15%)</title><rect x="28.7699%" y="373" width="0.1514%" height="15" fill="rgb(235,66,41)" fg:x="57198" fg:w="301"/><text x="29.0199%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1,641 samples, 0.83%)</title><rect x="29.4504%" y="325" width="0.8254%" height="15" fill="rgb(245,217,1)" fg:x="58551" fg:w="1641"/><text x="29.7004%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1,555 samples, 0.78%)</title><rect x="29.4937%" y="309" width="0.7821%" height="15" fill="rgb(229,91,1)" fg:x="58637" fg:w="1555"/><text x="29.7437%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1,755 samples, 0.88%)</title><rect x="29.4409%" y="357" width="0.8827%" height="15" fill="rgb(207,101,30)" fg:x="58532" fg:w="1755"/><text x="29.6909%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1,753 samples, 0.88%)</title><rect x="29.4419%" y="341" width="0.8817%" height="15" fill="rgb(223,82,49)" fg:x="58534" fg:w="1753"/><text x="29.6919%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (95 samples, 0.05%)</title><rect x="30.2758%" y="325" width="0.0478%" height="15" fill="rgb(218,167,17)" fg:x="60192" fg:w="95"/><text x="30.5258%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (95 samples, 0.05%)</title><rect x="30.2758%" y="309" width="0.0478%" height="15" fill="rgb(208,103,14)" fg:x="60192" fg:w="95"/><text x="30.5258%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (75 samples, 0.04%)</title><rect x="30.3241%" y="357" width="0.0377%" height="15" fill="rgb(238,20,8)" fg:x="60288" fg:w="75"/><text x="30.5741%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (3,306 samples, 1.66%)</title><rect x="28.7699%" y="389" width="1.6629%" height="15" fill="rgb(218,80,54)" fg:x="57198" fg:w="3306"/><text x="29.0199%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3,005 samples, 1.51%)</title><rect x="28.9213%" y="373" width="1.5115%" height="15" fill="rgb(240,144,17)" fg:x="57499" fg:w="3005"/><text x="29.1713%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (138 samples, 0.07%)</title><rect x="30.3634%" y="357" width="0.0694%" height="15" fill="rgb(245,27,50)" fg:x="60366" fg:w="138"/><text x="30.6134%" y="367.50"></text></g><g><title>__mem_cgroup_charge (22 samples, 0.01%)</title><rect x="30.6787%" y="245" width="0.0111%" height="15" fill="rgb(251,51,7)" fg:x="60993" fg:w="22"/><text x="30.9287%" y="255.50"></text></g><g><title>__handle_mm_fault (61 samples, 0.03%)</title><rect x="30.6707%" y="293" width="0.0307%" height="15" fill="rgb(245,217,29)" fg:x="60977" fg:w="61"/><text x="30.9207%" y="303.50"></text></g><g><title>handle_pte_fault (56 samples, 0.03%)</title><rect x="30.6732%" y="277" width="0.0282%" height="15" fill="rgb(221,176,29)" fg:x="60982" fg:w="56"/><text x="30.9232%" y="287.50"></text></g><g><title>do_anonymous_page (50 samples, 0.03%)</title><rect x="30.6762%" y="261" width="0.0251%" height="15" fill="rgb(212,180,24)" fg:x="60988" fg:w="50"/><text x="30.9262%" y="271.50"></text></g><g><title>handle_mm_fault (64 samples, 0.03%)</title><rect x="30.6707%" y="309" width="0.0322%" height="15" fill="rgb(254,24,2)" fg:x="60977" fg:w="64"/><text x="30.9207%" y="319.50"></text></g><g><title>do_user_addr_fault (66 samples, 0.03%)</title><rect x="30.6702%" y="325" width="0.0332%" height="15" fill="rgb(230,100,2)" fg:x="60976" fg:w="66"/><text x="30.9202%" y="335.50"></text></g><g><title>asm_exc_page_fault (75 samples, 0.04%)</title><rect x="30.6692%" y="357" width="0.0377%" height="15" fill="rgb(219,142,25)" fg:x="60974" fg:w="75"/><text x="30.9192%" y="367.50"></text></g><g><title>exc_page_fault (75 samples, 0.04%)</title><rect x="30.6692%" y="341" width="0.0377%" height="15" fill="rgb(240,73,43)" fg:x="60974" fg:w="75"/><text x="30.9192%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (552 samples, 0.28%)</title><rect x="30.4328%" y="389" width="0.2776%" height="15" fill="rgb(214,114,15)" fg:x="60504" fg:w="552"/><text x="30.6828%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (188 samples, 0.09%)</title><rect x="30.6159%" y="373" width="0.0946%" height="15" fill="rgb(207,130,4)" fg:x="60868" fg:w="188"/><text x="30.8659%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (24 samples, 0.01%)</title><rect x="30.7104%" y="389" width="0.0121%" height="15" fill="rgb(221,25,40)" fg:x="61056" fg:w="24"/><text x="30.9604%" y="399.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.01%)</title><rect x="30.7104%" y="373" width="0.0121%" height="15" fill="rgb(241,184,7)" fg:x="61056" fg:w="24"/><text x="30.9604%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.01%)</title><rect x="30.7104%" y="357" width="0.0121%" height="15" fill="rgb(235,159,4)" fg:x="61056" fg:w="24"/><text x="30.9604%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (34 samples, 0.02%)</title><rect x="30.7225%" y="389" width="0.0171%" height="15" fill="rgb(214,87,48)" fg:x="61080" fg:w="34"/><text x="30.9725%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (53 samples, 0.03%)</title><rect x="30.7396%" y="373" width="0.0267%" height="15" fill="rgb(246,198,24)" fg:x="61114" fg:w="53"/><text x="30.9896%" y="383.50"></text></g><g><title>core::slice::sort::merge (4,564 samples, 2.30%)</title><rect x="28.4862%" y="405" width="2.2956%" height="15" fill="rgb(209,66,40)" fg:x="56634" fg:w="4564"/><text x="28.7362%" y="415.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (84 samples, 0.04%)</title><rect x="30.7396%" y="389" width="0.0423%" height="15" fill="rgb(233,147,39)" fg:x="61114" fg:w="84"/><text x="30.9896%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (31 samples, 0.02%)</title><rect x="30.7663%" y="373" width="0.0156%" height="15" fill="rgb(231,145,52)" fg:x="61167" fg:w="31"/><text x="31.0163%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (270 samples, 0.14%)</title><rect x="30.7818%" y="405" width="0.1358%" height="15" fill="rgb(206,20,26)" fg:x="61198" fg:w="270"/><text x="31.0318%" y="415.50"></text></g><g><title>__handle_mm_fault (44 samples, 0.02%)</title><rect x="30.9307%" y="213" width="0.0221%" height="15" fill="rgb(238,220,4)" fg:x="61494" fg:w="44"/><text x="31.1807%" y="223.50"></text></g><g><title>handle_pte_fault (43 samples, 0.02%)</title><rect x="30.9312%" y="197" width="0.0216%" height="15" fill="rgb(252,195,42)" fg:x="61495" fg:w="43"/><text x="31.1812%" y="207.50"></text></g><g><title>do_anonymous_page (42 samples, 0.02%)</title><rect x="30.9317%" y="181" width="0.0211%" height="15" fill="rgb(209,10,6)" fg:x="61496" fg:w="42"/><text x="31.1817%" y="191.50"></text></g><g><title>do_user_addr_fault (47 samples, 0.02%)</title><rect x="30.9297%" y="245" width="0.0236%" height="15" fill="rgb(229,3,52)" fg:x="61492" fg:w="47"/><text x="31.1797%" y="255.50"></text></g><g><title>handle_mm_fault (45 samples, 0.02%)</title><rect x="30.9307%" y="229" width="0.0226%" height="15" fill="rgb(253,49,37)" fg:x="61494" fg:w="45"/><text x="31.1807%" y="239.50"></text></g><g><title>exc_page_fault (52 samples, 0.03%)</title><rect x="30.9297%" y="261" width="0.0262%" height="15" fill="rgb(240,103,49)" fg:x="61492" fg:w="52"/><text x="31.1797%" y="271.50"></text></g><g><title>asm_exc_page_fault (54 samples, 0.03%)</title><rect x="30.9292%" y="277" width="0.0272%" height="15" fill="rgb(250,182,30)" fg:x="61491" fg:w="54"/><text x="31.1792%" y="287.50"></text></g><g><title>perf_event_mmap (26 samples, 0.01%)</title><rect x="30.9624%" y="165" width="0.0131%" height="15" fill="rgb(248,8,30)" fg:x="61557" fg:w="26"/><text x="31.2124%" y="175.50"></text></g><g><title>perf_event_mmap_event (26 samples, 0.01%)</title><rect x="30.9624%" y="149" width="0.0131%" height="15" fill="rgb(237,120,30)" fg:x="61557" fg:w="26"/><text x="31.2124%" y="159.50"></text></g><g><title>perf_iterate_sb (26 samples, 0.01%)</title><rect x="30.9624%" y="133" width="0.0131%" height="15" fill="rgb(221,146,34)" fg:x="61557" fg:w="26"/><text x="31.2124%" y="143.50"></text></g><g><title>perf_iterate_ctx (26 samples, 0.01%)</title><rect x="30.9624%" y="117" width="0.0131%" height="15" fill="rgb(242,55,13)" fg:x="61557" fg:w="26"/><text x="31.2124%" y="127.50"></text></g><g><title>do_mprotect_pkey (39 samples, 0.02%)</title><rect x="30.9584%" y="197" width="0.0196%" height="15" fill="rgb(242,112,31)" fg:x="61549" fg:w="39"/><text x="31.2084%" y="207.50"></text></g><g><title>mprotect_fixup (34 samples, 0.02%)</title><rect x="30.9609%" y="181" width="0.0171%" height="15" fill="rgb(249,192,27)" fg:x="61554" fg:w="34"/><text x="31.2109%" y="191.50"></text></g><g><title>__x64_sys_mprotect (40 samples, 0.02%)</title><rect x="30.9584%" y="213" width="0.0201%" height="15" fill="rgb(208,204,44)" fg:x="61549" fg:w="40"/><text x="31.2084%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (48 samples, 0.02%)</title><rect x="30.9564%" y="245" width="0.0241%" height="15" fill="rgb(208,93,54)" fg:x="61545" fg:w="48"/><text x="31.2064%" y="255.50"></text></g><g><title>do_syscall_64 (45 samples, 0.02%)</title><rect x="30.9579%" y="229" width="0.0226%" height="15" fill="rgb(242,1,31)" fg:x="61548" fg:w="45"/><text x="31.2079%" y="239.50"></text></g><g><title>grow_heap (61 samples, 0.03%)</title><rect x="30.9564%" y="277" width="0.0307%" height="15" fill="rgb(241,83,25)" fg:x="61545" fg:w="61"/><text x="31.2064%" y="287.50"></text></g><g><title>__GI___mprotect (61 samples, 0.03%)</title><rect x="30.9564%" y="261" width="0.0307%" height="15" fill="rgb(205,169,50)" fg:x="61545" fg:w="61"/><text x="31.2064%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (140 samples, 0.07%)</title><rect x="30.9177%" y="405" width="0.0704%" height="15" fill="rgb(239,186,37)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="415.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (140 samples, 0.07%)</title><rect x="30.9177%" y="389" width="0.0704%" height="15" fill="rgb(205,221,10)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="399.50"></text></g><g><title>alloc::alloc::alloc (140 samples, 0.07%)</title><rect x="30.9177%" y="373" width="0.0704%" height="15" fill="rgb(218,196,15)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="383.50"></text></g><g><title>__rdl_alloc (140 samples, 0.07%)</title><rect x="30.9177%" y="357" width="0.0704%" height="15" fill="rgb(218,196,35)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (140 samples, 0.07%)</title><rect x="30.9177%" y="341" width="0.0704%" height="15" fill="rgb(233,63,24)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="351.50"></text></g><g><title>__GI___libc_malloc (140 samples, 0.07%)</title><rect x="30.9177%" y="325" width="0.0704%" height="15" fill="rgb(225,8,4)" fg:x="61468" fg:w="140"/><text x="31.1677%" y="335.50"></text></g><g><title>_int_malloc (137 samples, 0.07%)</title><rect x="30.9192%" y="309" width="0.0689%" height="15" fill="rgb(234,105,35)" fg:x="61471" fg:w="137"/><text x="31.1692%" y="319.50"></text></g><g><title>sysmalloc (136 samples, 0.07%)</title><rect x="30.9197%" y="293" width="0.0684%" height="15" fill="rgb(236,21,32)" fg:x="61472" fg:w="136"/><text x="31.1697%" y="303.50"></text></g><g><title>core::intrinsics::copy (37 samples, 0.02%)</title><rect x="30.9956%" y="389" width="0.0186%" height="15" fill="rgb(228,109,6)" fg:x="61623" fg:w="37"/><text x="31.2456%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (37 samples, 0.02%)</title><rect x="30.9956%" y="373" width="0.0186%" height="15" fill="rgb(229,215,31)" fg:x="61623" fg:w="37"/><text x="31.2456%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (42 samples, 0.02%)</title><rect x="30.9946%" y="405" width="0.0211%" height="15" fill="rgb(221,52,54)" fg:x="61621" fg:w="42"/><text x="31.2446%" y="415.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (98 samples, 0.05%)</title><rect x="31.0157%" y="405" width="0.0493%" height="15" fill="rgb(252,129,43)" fg:x="61663" fg:w="98"/><text x="31.2657%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="31.1440%" y="357" width="0.0106%" height="15" fill="rgb(248,183,27)" fg:x="61918" fg:w="21"/><text x="31.3940%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (21 samples, 0.01%)</title><rect x="31.1440%" y="341" width="0.0106%" height="15" fill="rgb(250,0,22)" fg:x="61918" fg:w="21"/><text x="31.3940%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (21 samples, 0.01%)</title><rect x="31.1440%" y="325" width="0.0106%" height="15" fill="rgb(213,166,10)" fg:x="61918" fg:w="21"/><text x="31.3940%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (21 samples, 0.01%)</title><rect x="31.1440%" y="309" width="0.0106%" height="15" fill="rgb(207,163,36)" fg:x="61918" fg:w="21"/><text x="31.3940%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (109 samples, 0.05%)</title><rect x="31.1546%" y="341" width="0.0548%" height="15" fill="rgb(208,122,22)" fg:x="61939" fg:w="109"/><text x="31.4046%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (472 samples, 0.24%)</title><rect x="31.3799%" y="293" width="0.2374%" height="15" fill="rgb(207,104,49)" fg:x="62387" fg:w="472"/><text x="31.6299%" y="303.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (470 samples, 0.24%)</title><rect x="31.3809%" y="277" width="0.2364%" height="15" fill="rgb(248,211,50)" fg:x="62389" fg:w="470"/><text x="31.6309%" y="287.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (497 samples, 0.25%)</title><rect x="31.3784%" y="325" width="0.2500%" height="15" fill="rgb(217,13,45)" fg:x="62384" fg:w="497"/><text x="31.6284%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (494 samples, 0.25%)</title><rect x="31.3799%" y="309" width="0.2485%" height="15" fill="rgb(211,216,49)" fg:x="62387" fg:w="494"/><text x="31.6299%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (22 samples, 0.01%)</title><rect x="31.6173%" y="293" width="0.0111%" height="15" fill="rgb(221,58,53)" fg:x="62859" fg:w="22"/><text x="31.8673%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (22 samples, 0.01%)</title><rect x="31.6173%" y="277" width="0.0111%" height="15" fill="rgb(220,112,41)" fg:x="62859" fg:w="22"/><text x="31.8673%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1,011 samples, 0.51%)</title><rect x="31.1546%" y="357" width="0.5085%" height="15" fill="rgb(236,38,28)" fg:x="61939" fg:w="1011"/><text x="31.4046%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (902 samples, 0.45%)</title><rect x="31.2094%" y="341" width="0.4537%" height="15" fill="rgb(227,195,22)" fg:x="62048" fg:w="902"/><text x="31.4594%" y="351.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (49 samples, 0.02%)</title><rect x="31.6384%" y="325" width="0.0246%" height="15" fill="rgb(214,55,33)" fg:x="62901" fg:w="49"/><text x="31.8884%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (170 samples, 0.09%)</title><rect x="31.6631%" y="357" width="0.0855%" height="15" fill="rgb(248,80,13)" fg:x="62950" fg:w="170"/><text x="31.9131%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (49 samples, 0.02%)</title><rect x="31.7486%" y="357" width="0.0246%" height="15" fill="rgb(238,52,6)" fg:x="63120" fg:w="49"/><text x="31.9986%" y="367.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.02%)</title><rect x="31.7486%" y="341" width="0.0246%" height="15" fill="rgb(224,198,47)" fg:x="63120" fg:w="49"/><text x="31.9986%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.02%)</title><rect x="31.7486%" y="325" width="0.0246%" height="15" fill="rgb(233,171,20)" fg:x="63120" fg:w="49"/><text x="31.9986%" y="335.50"></text></g><g><title>core::slice::sort::insert_tail (1,383 samples, 0.70%)</title><rect x="31.1078%" y="373" width="0.6956%" height="15" fill="rgb(241,30,25)" fg:x="61846" fg:w="1383"/><text x="31.3578%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (60 samples, 0.03%)</title><rect x="31.7732%" y="357" width="0.0302%" height="15" fill="rgb(207,171,38)" fg:x="63169" fg:w="60"/><text x="32.0232%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (7,227 samples, 3.64%)</title><rect x="28.1879%" y="453" width="3.6351%" height="15" fill="rgb(234,70,1)" fg:x="56041" fg:w="7227"/><text x="28.4379%" y="463.50">allo..</text></g><g><title>alloc::slice::stable_sort (7,227 samples, 3.64%)</title><rect x="28.1879%" y="437" width="3.6351%" height="15" fill="rgb(232,178,18)" fg:x="56041" fg:w="7227"/><text x="28.4379%" y="447.50">allo..</text></g><g><title>core::slice::sort::merge_sort (7,225 samples, 3.63%)</title><rect x="28.1889%" y="421" width="3.6341%" height="15" fill="rgb(241,78,40)" fg:x="56043" fg:w="7225"/><text x="28.4389%" y="431.50">core..</text></g><g><title>core::slice::sort::provide_sorted_batch (1,506 samples, 0.76%)</title><rect x="31.0655%" y="405" width="0.7575%" height="15" fill="rgb(222,35,25)" fg:x="61762" fg:w="1506"/><text x="31.3155%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,487 samples, 0.75%)</title><rect x="31.0751%" y="389" width="0.7479%" height="15" fill="rgb(207,92,16)" fg:x="61781" fg:w="1487"/><text x="31.3251%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (39 samples, 0.02%)</title><rect x="31.8034%" y="373" width="0.0196%" height="15" fill="rgb(216,59,51)" fg:x="63229" fg:w="39"/><text x="32.0534%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (102 samples, 0.05%)</title><rect x="31.8658%" y="341" width="0.0513%" height="15" fill="rgb(213,80,28)" fg:x="63353" fg:w="102"/><text x="32.1158%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (102 samples, 0.05%)</title><rect x="31.8658%" y="325" width="0.0513%" height="15" fill="rgb(220,93,7)" fg:x="63353" fg:w="102"/><text x="32.1158%" y="335.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (123 samples, 0.06%)</title><rect x="31.8658%" y="373" width="0.0619%" height="15" fill="rgb(225,24,44)" fg:x="63353" fg:w="123"/><text x="32.1158%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (123 samples, 0.06%)</title><rect x="31.8658%" y="357" width="0.0619%" height="15" fill="rgb(243,74,40)" fg:x="63353" fg:w="123"/><text x="32.1158%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (21 samples, 0.01%)</title><rect x="31.9171%" y="341" width="0.0106%" height="15" fill="rgb(228,39,7)" fg:x="63455" fg:w="21"/><text x="32.1671%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (21 samples, 0.01%)</title><rect x="31.9171%" y="325" width="0.0106%" height="15" fill="rgb(227,79,8)" fg:x="63455" fg:w="21"/><text x="32.1671%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::le (60 samples, 0.03%)</title><rect x="31.9282%" y="373" width="0.0302%" height="15" fill="rgb(236,58,11)" fg:x="63477" fg:w="60"/><text x="32.1782%" y="383.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (36 samples, 0.02%)</title><rect x="31.9402%" y="357" width="0.0181%" height="15" fill="rgb(249,63,35)" fg:x="63501" fg:w="36"/><text x="32.1902%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (36 samples, 0.02%)</title><rect x="31.9402%" y="341" width="0.0181%" height="15" fill="rgb(252,114,16)" fg:x="63501" fg:w="36"/><text x="32.1902%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (245 samples, 0.12%)</title><rect x="31.8376%" y="405" width="0.1232%" height="15" fill="rgb(254,151,24)" fg:x="63297" fg:w="245"/><text x="32.0876%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (245 samples, 0.12%)</title><rect x="31.8376%" y="389" width="0.1232%" height="15" fill="rgb(253,54,39)" fg:x="63297" fg:w="245"/><text x="32.0876%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (279 samples, 0.14%)</title><rect x="31.8230%" y="453" width="0.1403%" height="15" fill="rgb(243,25,45)" fg:x="63268" fg:w="279"/><text x="32.0730%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (278 samples, 0.14%)</title><rect x="31.8235%" y="437" width="0.1398%" height="15" fill="rgb(234,134,9)" fg:x="63269" fg:w="278"/><text x="32.0735%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (278 samples, 0.14%)</title><rect x="31.8235%" y="421" width="0.1398%" height="15" fill="rgb(227,166,31)" fg:x="63269" fg:w="278"/><text x="32.0735%" y="431.50"></text></g><g><title>handle_pte_fault (47 samples, 0.02%)</title><rect x="31.9744%" y="181" width="0.0236%" height="15" fill="rgb(245,143,41)" fg:x="63569" fg:w="47"/><text x="32.2244%" y="191.50"></text></g><g><title>do_anonymous_page (41 samples, 0.02%)</title><rect x="31.9774%" y="165" width="0.0206%" height="15" fill="rgb(238,181,32)" fg:x="63575" fg:w="41"/><text x="32.2274%" y="175.50"></text></g><g><title>__handle_mm_fault (50 samples, 0.03%)</title><rect x="31.9734%" y="197" width="0.0251%" height="15" fill="rgb(224,113,18)" fg:x="63567" fg:w="50"/><text x="32.2234%" y="207.50"></text></g><g><title>do_user_addr_fault (57 samples, 0.03%)</title><rect x="31.9704%" y="229" width="0.0287%" height="15" fill="rgb(240,229,28)" fg:x="63561" fg:w="57"/><text x="32.2204%" y="239.50"></text></g><g><title>handle_mm_fault (52 samples, 0.03%)</title><rect x="31.9729%" y="213" width="0.0262%" height="15" fill="rgb(250,185,3)" fg:x="63566" fg:w="52"/><text x="32.2229%" y="223.50"></text></g><g><title>asm_exc_page_fault (66 samples, 0.03%)</title><rect x="31.9694%" y="261" width="0.0332%" height="15" fill="rgb(212,59,25)" fg:x="63559" fg:w="66"/><text x="32.2194%" y="271.50"></text></g><g><title>exc_page_fault (66 samples, 0.03%)</title><rect x="31.9694%" y="245" width="0.0332%" height="15" fill="rgb(221,87,20)" fg:x="63559" fg:w="66"/><text x="32.2194%" y="255.50"></text></g><g><title>perf_event_mmap (38 samples, 0.02%)</title><rect x="32.0091%" y="149" width="0.0191%" height="15" fill="rgb(213,74,28)" fg:x="63638" fg:w="38"/><text x="32.2591%" y="159.50"></text></g><g><title>perf_event_mmap_event (38 samples, 0.02%)</title><rect x="32.0091%" y="133" width="0.0191%" height="15" fill="rgb(224,132,34)" fg:x="63638" fg:w="38"/><text x="32.2591%" y="143.50"></text></g><g><title>perf_iterate_sb (35 samples, 0.02%)</title><rect x="32.0106%" y="117" width="0.0176%" height="15" fill="rgb(222,101,24)" fg:x="63641" fg:w="35"/><text x="32.2606%" y="127.50"></text></g><g><title>perf_iterate_ctx (33 samples, 0.02%)</title><rect x="32.0116%" y="101" width="0.0166%" height="15" fill="rgb(254,142,4)" fg:x="63643" fg:w="33"/><text x="32.2616%" y="111.50"></text></g><g><title>mprotect_fixup (47 samples, 0.02%)</title><rect x="32.0061%" y="165" width="0.0236%" height="15" fill="rgb(230,229,49)" fg:x="63632" fg:w="47"/><text x="32.2561%" y="175.50"></text></g><g><title>__x64_sys_mprotect (53 samples, 0.03%)</title><rect x="32.0046%" y="197" width="0.0267%" height="15" fill="rgb(238,70,47)" fg:x="63629" fg:w="53"/><text x="32.2546%" y="207.50"></text></g><g><title>do_mprotect_pkey (53 samples, 0.03%)</title><rect x="32.0046%" y="181" width="0.0267%" height="15" fill="rgb(231,160,17)" fg:x="63629" fg:w="53"/><text x="32.2546%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (66 samples, 0.03%)</title><rect x="32.0031%" y="229" width="0.0332%" height="15" fill="rgb(218,68,53)" fg:x="63626" fg:w="66"/><text x="32.2531%" y="239.50"></text></g><g><title>do_syscall_64 (64 samples, 0.03%)</title><rect x="32.0041%" y="213" width="0.0322%" height="15" fill="rgb(236,111,10)" fg:x="63628" fg:w="64"/><text x="32.2541%" y="223.50"></text></g><g><title>grow_heap (84 samples, 0.04%)</title><rect x="32.0026%" y="261" width="0.0423%" height="15" fill="rgb(224,34,41)" fg:x="63625" fg:w="84"/><text x="32.2526%" y="271.50"></text></g><g><title>__GI___mprotect (84 samples, 0.04%)</title><rect x="32.0026%" y="245" width="0.0423%" height="15" fill="rgb(241,118,19)" fg:x="63625" fg:w="84"/><text x="32.2526%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (167 samples, 0.08%)</title><rect x="31.9634%" y="453" width="0.0840%" height="15" fill="rgb(238,129,25)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (167 samples, 0.08%)</title><rect x="31.9634%" y="437" width="0.0840%" height="15" fill="rgb(238,22,31)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (167 samples, 0.08%)</title><rect x="31.9634%" y="421" width="0.0840%" height="15" fill="rgb(222,174,48)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (167 samples, 0.08%)</title><rect x="31.9634%" y="405" width="0.0840%" height="15" fill="rgb(206,152,40)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (167 samples, 0.08%)</title><rect x="31.9634%" y="389" width="0.0840%" height="15" fill="rgb(218,99,54)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (167 samples, 0.08%)</title><rect x="31.9634%" y="373" width="0.0840%" height="15" fill="rgb(220,174,26)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="383.50"></text></g><g><title>alloc::alloc::alloc (167 samples, 0.08%)</title><rect x="31.9634%" y="357" width="0.0840%" height="15" fill="rgb(245,116,9)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="367.50"></text></g><g><title>__rdl_alloc (167 samples, 0.08%)</title><rect x="31.9634%" y="341" width="0.0840%" height="15" fill="rgb(209,72,35)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="351.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (167 samples, 0.08%)</title><rect x="31.9634%" y="325" width="0.0840%" height="15" fill="rgb(226,126,21)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="335.50"></text></g><g><title>__GI___libc_malloc (167 samples, 0.08%)</title><rect x="31.9634%" y="309" width="0.0840%" height="15" fill="rgb(227,192,1)" fg:x="63547" fg:w="167"/><text x="32.2134%" y="319.50"></text></g><g><title>_int_malloc (165 samples, 0.08%)</title><rect x="31.9644%" y="293" width="0.0830%" height="15" fill="rgb(237,180,29)" fg:x="63549" fg:w="165"/><text x="32.2144%" y="303.50"></text></g><g><title>sysmalloc (165 samples, 0.08%)</title><rect x="31.9644%" y="277" width="0.0830%" height="15" fill="rgb(230,197,35)" fg:x="63549" fg:w="165"/><text x="32.2144%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (8,475 samples, 4.26%)</title><rect x="27.7916%" y="469" width="4.2628%" height="15" fill="rgb(246,193,31)" fg:x="55253" fg:w="8475"/><text x="28.0416%" y="479.50">proje..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (128 samples, 0.06%)</title><rect x="32.0544%" y="469" width="0.0644%" height="15" fill="rgb(241,36,4)" fg:x="63728" fg:w="128"/><text x="32.3044%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (101 samples, 0.05%)</title><rect x="32.0680%" y="453" width="0.0508%" height="15" fill="rgb(241,130,17)" fg:x="63755" fg:w="101"/><text x="32.3180%" y="463.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (219 samples, 0.11%)</title><rect x="32.1832%" y="437" width="0.1102%" height="15" fill="rgb(206,137,32)" fg:x="63984" fg:w="219"/><text x="32.4332%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (244 samples, 0.12%)</title><rect x="32.1832%" y="453" width="0.1227%" height="15" fill="rgb(237,228,51)" fg:x="63984" fg:w="244"/><text x="32.4332%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (25 samples, 0.01%)</title><rect x="32.2933%" y="437" width="0.0126%" height="15" fill="rgb(243,6,42)" fg:x="64203" fg:w="25"/><text x="32.5433%" y="447.50"></text></g><g><title>__hrtimer_run_queues (35 samples, 0.02%)</title><rect x="39.3432%" y="373" width="0.0176%" height="15" fill="rgb(251,74,28)" fg:x="78219" fg:w="35"/><text x="39.5932%" y="383.50"></text></g><g><title>tick_sched_timer (35 samples, 0.02%)</title><rect x="39.3432%" y="357" width="0.0176%" height="15" fill="rgb(218,20,49)" fg:x="78219" fg:w="35"/><text x="39.5932%" y="367.50"></text></g><g><title>tick_sched_handle (25 samples, 0.01%)</title><rect x="39.3482%" y="341" width="0.0126%" height="15" fill="rgb(238,28,14)" fg:x="78229" fg:w="25"/><text x="39.5982%" y="351.50"></text></g><g><title>update_process_times (25 samples, 0.01%)</title><rect x="39.3482%" y="325" width="0.0126%" height="15" fill="rgb(229,40,46)" fg:x="78229" fg:w="25"/><text x="39.5982%" y="335.50"></text></g><g><title>scheduler_tick (21 samples, 0.01%)</title><rect x="39.3502%" y="309" width="0.0106%" height="15" fill="rgb(244,195,20)" fg:x="78233" fg:w="21"/><text x="39.6002%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (40 samples, 0.02%)</title><rect x="39.3432%" y="405" width="0.0201%" height="15" fill="rgb(253,56,35)" fg:x="78219" fg:w="40"/><text x="39.5932%" y="415.50"></text></g><g><title>hrtimer_interrupt (40 samples, 0.02%)</title><rect x="39.3432%" y="389" width="0.0201%" height="15" fill="rgb(210,149,44)" fg:x="78219" fg:w="40"/><text x="39.5932%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (50 samples, 0.03%)</title><rect x="39.3427%" y="437" width="0.0251%" height="15" fill="rgb(240,135,12)" fg:x="78218" fg:w="50"/><text x="39.5927%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (50 samples, 0.03%)</title><rect x="39.3427%" y="421" width="0.0251%" height="15" fill="rgb(251,24,50)" fg:x="78218" fg:w="50"/><text x="39.5927%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (14,041 samples, 7.06%)</title><rect x="32.3059%" y="453" width="7.0625%" height="15" fill="rgb(243,200,47)" fg:x="64228" fg:w="14041"/><text x="32.5559%" y="463.50">project1:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (88 samples, 0.04%)</title><rect x="60.2267%" y="437" width="0.0443%" height="15" fill="rgb(224,166,26)" fg:x="119738" fg:w="88"/><text x="60.4767%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (88 samples, 0.04%)</title><rect x="60.2267%" y="421" width="0.0443%" height="15" fill="rgb(233,0,47)" fg:x="119738" fg:w="88"/><text x="60.4767%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (76 samples, 0.04%)</title><rect x="60.2328%" y="405" width="0.0382%" height="15" fill="rgb(253,80,5)" fg:x="119750" fg:w="76"/><text x="60.4828%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2,402 samples, 1.21%)</title><rect x="60.2710%" y="405" width="1.2082%" height="15" fill="rgb(214,133,25)" fg:x="119826" fg:w="2402"/><text x="60.5210%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,891 samples, 1.96%)</title><rect x="60.2710%" y="437" width="1.9571%" height="15" fill="rgb(209,27,14)" fg:x="119826" fg:w="3891"/><text x="60.5210%" y="447.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,891 samples, 1.96%)</title><rect x="60.2710%" y="421" width="1.9571%" height="15" fill="rgb(219,102,51)" fg:x="119826" fg:w="3891"/><text x="60.5210%" y="431.50">c..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1,489 samples, 0.75%)</title><rect x="61.4792%" y="405" width="0.7489%" height="15" fill="rgb(237,18,16)" fg:x="122228" fg:w="1489"/><text x="61.7292%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,544 samples, 0.78%)</title><rect x="63.3493%" y="389" width="0.7766%" height="15" fill="rgb(241,85,17)" fg:x="125946" fg:w="1544"/><text x="63.5993%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,544 samples, 0.78%)</title><rect x="63.3493%" y="373" width="0.7766%" height="15" fill="rgb(236,90,42)" fg:x="125946" fg:w="1544"/><text x="63.5993%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,785 samples, 1.90%)</title><rect x="62.2281%" y="405" width="1.9038%" height="15" fill="rgb(249,57,21)" fg:x="123717" fg:w="3785"/><text x="62.4781%" y="415.50">&lt;..</text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (5,535 samples, 2.78%)</title><rect x="62.2281%" y="437" width="2.7840%" height="15" fill="rgb(243,12,36)" fg:x="123717" fg:w="5535"/><text x="62.4781%" y="447.50">&lt;p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,535 samples, 2.78%)</title><rect x="62.2281%" y="421" width="2.7840%" height="15" fill="rgb(253,128,47)" fg:x="123717" fg:w="5535"/><text x="62.4781%" y="431.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,750 samples, 0.88%)</title><rect x="64.1319%" y="405" width="0.8802%" height="15" fill="rgb(207,33,20)" fg:x="127502" fg:w="1750"/><text x="64.3819%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,750 samples, 0.88%)</title><rect x="64.1319%" y="389" width="0.8802%" height="15" fill="rgb(233,215,35)" fg:x="127502" fg:w="1750"/><text x="64.3819%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (347 samples, 0.17%)</title><rect x="65.0172%" y="389" width="0.1745%" height="15" fill="rgb(249,188,52)" fg:x="129262" fg:w="347"/><text x="65.2672%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (347 samples, 0.17%)</title><rect x="65.0172%" y="373" width="0.1745%" height="15" fill="rgb(225,12,32)" fg:x="129262" fg:w="347"/><text x="65.2672%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (369 samples, 0.19%)</title><rect x="65.0122%" y="405" width="0.1856%" height="15" fill="rgb(247,98,14)" fg:x="129252" fg:w="369"/><text x="65.2622%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1,742 samples, 0.88%)</title><rect x="65.0122%" y="437" width="0.8762%" height="15" fill="rgb(247,219,48)" fg:x="129252" fg:w="1742"/><text x="65.2622%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,742 samples, 0.88%)</title><rect x="65.0122%" y="421" width="0.8762%" height="15" fill="rgb(253,60,48)" fg:x="129252" fg:w="1742"/><text x="65.2622%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,373 samples, 0.69%)</title><rect x="65.1978%" y="405" width="0.6906%" height="15" fill="rgb(245,15,52)" fg:x="129621" fg:w="1373"/><text x="65.4478%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,373 samples, 0.69%)</title><rect x="65.1978%" y="389" width="0.6906%" height="15" fill="rgb(220,133,28)" fg:x="129621" fg:w="1373"/><text x="65.4478%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (557 samples, 0.28%)</title><rect x="65.8884%" y="405" width="0.2802%" height="15" fill="rgb(217,180,4)" fg:x="130994" fg:w="557"/><text x="66.1384%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (19,042 samples, 9.58%)</title><rect x="66.1685%" y="405" width="9.5779%" height="15" fill="rgb(251,24,1)" fg:x="131551" fg:w="19042"/><text x="66.4185%" y="415.50">core::option::..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (19,042 samples, 9.58%)</title><rect x="66.1685%" y="389" width="9.5779%" height="15" fill="rgb(212,185,49)" fg:x="131551" fg:w="19042"/><text x="66.4185%" y="399.50">slotmap::basic..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (633 samples, 0.32%)</title><rect x="75.7464%" y="405" width="0.3184%" height="15" fill="rgb(215,175,22)" fg:x="150593" fg:w="633"/><text x="75.9964%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (633 samples, 0.32%)</title><rect x="75.7464%" y="389" width="0.3184%" height="15" fill="rgb(250,205,14)" fg:x="150593" fg:w="633"/><text x="75.9964%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (20,546 samples, 10.33%)</title><rect x="65.8884%" y="437" width="10.3344%" height="15" fill="rgb(225,211,22)" fg:x="130994" fg:w="20546"/><text x="66.1384%" y="447.50">&lt;project1::solv..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (20,546 samples, 10.33%)</title><rect x="65.8884%" y="421" width="10.3344%" height="15" fill="rgb(251,179,42)" fg:x="130994" fg:w="20546"/><text x="66.1384%" y="431.50">slotmap::basic:..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (314 samples, 0.16%)</title><rect x="76.0648%" y="405" width="0.1579%" height="15" fill="rgb(208,216,51)" fg:x="151226" fg:w="314"/><text x="76.3148%" y="415.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (7,322 samples, 3.68%)</title><rect x="76.2228%" y="437" width="3.6829%" height="15" fill="rgb(235,36,11)" fg:x="151540" fg:w="7322"/><text x="76.4728%" y="447.50">&lt;pro..</text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (54 samples, 0.03%)</title><rect x="79.9056%" y="421" width="0.0272%" height="15" fill="rgb(213,189,28)" fg:x="158862" fg:w="54"/><text x="80.1556%" y="431.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (68 samples, 0.03%)</title><rect x="79.9056%" y="437" width="0.0342%" height="15" fill="rgb(227,203,42)" fg:x="158862" fg:w="68"/><text x="80.1556%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (24 samples, 0.01%)</title><rect x="79.9434%" y="437" width="0.0121%" height="15" fill="rgb(244,72,36)" fg:x="158937" fg:w="24"/><text x="80.1934%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (45 samples, 0.02%)</title><rect x="81.2607%" y="421" width="0.0226%" height="15" fill="rgb(213,53,17)" fg:x="161556" fg:w="45"/><text x="81.5107%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (45 samples, 0.02%)</title><rect x="81.2607%" y="405" width="0.0226%" height="15" fill="rgb(207,167,3)" fg:x="161556" fg:w="45"/><text x="81.5107%" y="415.50"></text></g><g><title>tick_sched_timer (21 samples, 0.01%)</title><rect x="81.2838%" y="341" width="0.0106%" height="15" fill="rgb(216,98,30)" fg:x="161602" fg:w="21"/><text x="81.5338%" y="351.50"></text></g><g><title>__hrtimer_run_queues (22 samples, 0.01%)</title><rect x="81.2838%" y="357" width="0.0111%" height="15" fill="rgb(236,123,15)" fg:x="161602" fg:w="22"/><text x="81.5338%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (25 samples, 0.01%)</title><rect x="81.2838%" y="389" width="0.0126%" height="15" fill="rgb(248,81,50)" fg:x="161602" fg:w="25"/><text x="81.5338%" y="399.50"></text></g><g><title>hrtimer_interrupt (25 samples, 0.01%)</title><rect x="81.2838%" y="373" width="0.0126%" height="15" fill="rgb(214,120,4)" fg:x="161602" fg:w="25"/><text x="81.5338%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (30 samples, 0.02%)</title><rect x="81.2838%" y="421" width="0.0151%" height="15" fill="rgb(208,179,34)" fg:x="161602" fg:w="30"/><text x="81.5338%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (30 samples, 0.02%)</title><rect x="81.2838%" y="405" width="0.0151%" height="15" fill="rgb(227,140,7)" fg:x="161602" fg:w="30"/><text x="81.5338%" y="415.50"></text></g><g><title>core::ptr::write (6,463 samples, 3.25%)</title><rect x="81.3055%" y="421" width="3.2508%" height="15" fill="rgb(214,22,6)" fg:x="161645" fg:w="6463"/><text x="81.5555%" y="431.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,148 samples, 4.60%)</title><rect x="79.9554%" y="437" width="4.6013%" height="15" fill="rgb(207,137,27)" fg:x="158961" fg:w="9148"/><text x="80.2054%" y="447.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (51 samples, 0.03%)</title><rect x="84.5568%" y="437" width="0.0257%" height="15" fill="rgb(210,8,46)" fg:x="168109" fg:w="51"/><text x="84.8068%" y="447.50"></text></g><g><title>tick_sched_do_timer (32 samples, 0.02%)</title><rect x="84.5849%" y="341" width="0.0161%" height="15" fill="rgb(240,16,54)" fg:x="168165" fg:w="32"/><text x="84.8349%" y="351.50"></text></g><g><title>tick_do_update_jiffies64 (30 samples, 0.02%)</title><rect x="84.5859%" y="325" width="0.0151%" height="15" fill="rgb(211,209,29)" fg:x="168167" fg:w="30"/><text x="84.8359%" y="335.50"></text></g><g><title>update_wall_time (29 samples, 0.01%)</title><rect x="84.5864%" y="309" width="0.0146%" height="15" fill="rgb(226,228,24)" fg:x="168168" fg:w="29"/><text x="84.8364%" y="319.50"></text></g><g><title>timekeeping_advance (29 samples, 0.01%)</title><rect x="84.5864%" y="293" width="0.0146%" height="15" fill="rgb(222,84,9)" fg:x="168168" fg:w="29"/><text x="84.8364%" y="303.50"></text></g><g><title>task_tick_fair (24 samples, 0.01%)</title><rect x="84.6156%" y="293" width="0.0121%" height="15" fill="rgb(234,203,30)" fg:x="168226" fg:w="24"/><text x="84.8656%" y="303.50"></text></g><g><title>scheduler_tick (55 samples, 0.03%)</title><rect x="84.6086%" y="309" width="0.0277%" height="15" fill="rgb(238,109,14)" fg:x="168212" fg:w="55"/><text x="84.8586%" y="319.50"></text></g><g><title>__hrtimer_run_queues (107 samples, 0.05%)</title><rect x="84.5829%" y="373" width="0.0538%" height="15" fill="rgb(233,206,34)" fg:x="168161" fg:w="107"/><text x="84.8329%" y="383.50"></text></g><g><title>tick_sched_timer (106 samples, 0.05%)</title><rect x="84.5834%" y="357" width="0.0533%" height="15" fill="rgb(220,167,47)" fg:x="168162" fg:w="106"/><text x="84.8334%" y="367.50"></text></g><g><title>tick_sched_handle (71 samples, 0.04%)</title><rect x="84.6010%" y="341" width="0.0357%" height="15" fill="rgb(238,105,10)" fg:x="168197" fg:w="71"/><text x="84.8510%" y="351.50"></text></g><g><title>update_process_times (71 samples, 0.04%)</title><rect x="84.6010%" y="325" width="0.0357%" height="15" fill="rgb(213,227,17)" fg:x="168197" fg:w="71"/><text x="84.8510%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (119 samples, 0.06%)</title><rect x="84.5824%" y="405" width="0.0599%" height="15" fill="rgb(217,132,38)" fg:x="168160" fg:w="119"/><text x="84.8324%" y="415.50"></text></g><g><title>hrtimer_interrupt (118 samples, 0.06%)</title><rect x="84.5829%" y="389" width="0.0594%" height="15" fill="rgb(242,146,4)" fg:x="168161" fg:w="118"/><text x="84.8329%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (138 samples, 0.07%)</title><rect x="84.5824%" y="437" width="0.0694%" height="15" fill="rgb(212,61,9)" fg:x="168160" fg:w="138"/><text x="84.8324%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (138 samples, 0.07%)</title><rect x="84.5824%" y="421" width="0.0694%" height="15" fill="rgb(247,126,22)" fg:x="168160" fg:w="138"/><text x="84.8324%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (127 samples, 0.06%)</title><rect x="84.6584%" y="437" width="0.0639%" height="15" fill="rgb(220,196,2)" fg:x="168311" fg:w="127"/><text x="84.9084%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (251 samples, 0.13%)</title><rect x="85.1925%" y="405" width="0.1262%" height="15" fill="rgb(208,46,4)" fg:x="169373" fg:w="251"/><text x="85.4425%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,187 samples, 0.60%)</title><rect x="84.7223%" y="437" width="0.5970%" height="15" fill="rgb(252,104,46)" fg:x="168438" fg:w="1187"/><text x="84.9723%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,187 samples, 0.60%)</title><rect x="84.7223%" y="421" width="0.5970%" height="15" fill="rgb(237,152,48)" fg:x="168438" fg:w="1187"/><text x="84.9723%" y="431.50"></text></g><g><title>core::intrinsics::copy (762 samples, 0.38%)</title><rect x="85.3877%" y="405" width="0.3833%" height="15" fill="rgb(221,59,37)" fg:x="169761" fg:w="762"/><text x="85.6377%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,543 samples, 0.78%)</title><rect x="85.3193%" y="437" width="0.7761%" height="15" fill="rgb(209,202,51)" fg:x="169625" fg:w="1543"/><text x="85.5693%" y="447.50"></text></g><g><title>core::ptr::swap (1,407 samples, 0.71%)</title><rect x="85.3877%" y="421" width="0.7077%" height="15" fill="rgb(228,81,30)" fg:x="169761" fg:w="1407"/><text x="85.6377%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (645 samples, 0.32%)</title><rect x="85.7710%" y="405" width="0.3244%" height="15" fill="rgb(227,42,39)" fg:x="170523" fg:w="645"/><text x="86.0210%" y="415.50"></text></g><g><title>log::__private_api::log (57 samples, 0.03%)</title><rect x="86.0954%" y="437" width="0.0287%" height="15" fill="rgb(221,26,2)" fg:x="171168" fg:w="57"/><text x="86.3454%" y="447.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (57 samples, 0.03%)</title><rect x="86.0954%" y="421" width="0.0287%" height="15" fill="rgb(254,61,31)" fg:x="171168" fg:w="57"/><text x="86.3454%" y="431.50"></text></g><g><title>__hrtimer_run_queues (47 samples, 0.02%)</title><rect x="89.4357%" y="325" width="0.0236%" height="15" fill="rgb(222,173,38)" fg:x="177809" fg:w="47"/><text x="89.6857%" y="335.50"></text></g><g><title>tick_sched_timer (46 samples, 0.02%)</title><rect x="89.4363%" y="309" width="0.0231%" height="15" fill="rgb(218,50,12)" fg:x="177810" fg:w="46"/><text x="89.6863%" y="319.50"></text></g><g><title>tick_sched_handle (30 samples, 0.02%)</title><rect x="89.4443%" y="293" width="0.0151%" height="15" fill="rgb(223,88,40)" fg:x="177826" fg:w="30"/><text x="89.6943%" y="303.50"></text></g><g><title>update_process_times (30 samples, 0.02%)</title><rect x="89.4443%" y="277" width="0.0151%" height="15" fill="rgb(237,54,19)" fg:x="177826" fg:w="30"/><text x="89.6943%" y="287.50"></text></g><g><title>scheduler_tick (27 samples, 0.01%)</title><rect x="89.4458%" y="261" width="0.0136%" height="15" fill="rgb(251,129,25)" fg:x="177829" fg:w="27"/><text x="89.6958%" y="271.50"></text></g><g><title>__sysvec_apic_timer_interrupt (53 samples, 0.03%)</title><rect x="89.4352%" y="357" width="0.0267%" height="15" fill="rgb(238,97,19)" fg:x="177808" fg:w="53"/><text x="89.6852%" y="367.50"></text></g><g><title>hrtimer_interrupt (53 samples, 0.03%)</title><rect x="89.4352%" y="341" width="0.0267%" height="15" fill="rgb(240,169,18)" fg:x="177808" fg:w="53"/><text x="89.6852%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (56 samples, 0.03%)</title><rect x="89.4352%" y="389" width="0.0282%" height="15" fill="rgb(230,187,49)" fg:x="177808" fg:w="56"/><text x="89.6852%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (56 samples, 0.03%)</title><rect x="89.4352%" y="373" width="0.0282%" height="15" fill="rgb(209,44,26)" fg:x="177808" fg:w="56"/><text x="89.6852%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (6,641 samples, 3.34%)</title><rect x="86.1241%" y="405" width="3.3403%" height="15" fill="rgb(244,0,6)" fg:x="171225" fg:w="6641"/><text x="86.3741%" y="415.50">cor..</text></g><g><title>log::max_level (6,669 samples, 3.35%)</title><rect x="86.1241%" y="437" width="3.3544%" height="15" fill="rgb(248,18,21)" fg:x="171225" fg:w="6669"/><text x="86.3741%" y="447.50">log..</text></g><g><title>core::sync::atomic::AtomicUsize::load (6,669 samples, 3.35%)</title><rect x="86.1241%" y="421" width="3.3544%" height="15" fill="rgb(245,180,19)" fg:x="171225" fg:w="6669"/><text x="86.3741%" y="431.50">cor..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (28 samples, 0.01%)</title><rect x="89.4644%" y="405" width="0.0141%" height="15" fill="rgb(252,118,36)" fg:x="177866" fg:w="28"/><text x="89.7144%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (97 samples, 0.05%)</title><rect x="89.8130%" y="405" width="0.0488%" height="15" fill="rgb(210,224,19)" fg:x="178559" fg:w="97"/><text x="90.0630%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (57 samples, 0.03%)</title><rect x="89.8331%" y="389" width="0.0287%" height="15" fill="rgb(218,30,24)" fg:x="178599" fg:w="57"/><text x="90.0831%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (57 samples, 0.03%)</title><rect x="89.8331%" y="373" width="0.0287%" height="15" fill="rgb(219,75,50)" fg:x="178599" fg:w="57"/><text x="90.0831%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (174 samples, 0.09%)</title><rect x="89.8130%" y="421" width="0.0875%" height="15" fill="rgb(234,72,50)" fg:x="178559" fg:w="174"/><text x="90.0630%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (77 samples, 0.04%)</title><rect x="89.8618%" y="405" width="0.0387%" height="15" fill="rgb(219,100,48)" fg:x="178656" fg:w="77"/><text x="90.1118%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (77 samples, 0.04%)</title><rect x="89.8618%" y="389" width="0.0387%" height="15" fill="rgb(253,5,41)" fg:x="178656" fg:w="77"/><text x="90.1118%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (99 samples, 0.05%)</title><rect x="89.9116%" y="389" width="0.0498%" height="15" fill="rgb(247,181,11)" fg:x="178755" fg:w="99"/><text x="90.1616%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::le (117 samples, 0.06%)</title><rect x="89.9030%" y="421" width="0.0588%" height="15" fill="rgb(222,223,25)" fg:x="178738" fg:w="117"/><text x="90.1530%" y="431.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (100 samples, 0.05%)</title><rect x="89.9116%" y="405" width="0.0503%" height="15" fill="rgb(214,198,28)" fg:x="178755" fg:w="100"/><text x="90.1616%" y="415.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (113 samples, 0.06%)</title><rect x="89.9694%" y="421" width="0.0568%" height="15" fill="rgb(230,46,43)" fg:x="178870" fg:w="113"/><text x="90.2194%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (113 samples, 0.06%)</title><rect x="89.9694%" y="405" width="0.0568%" height="15" fill="rgb(233,65,53)" fg:x="178870" fg:w="113"/><text x="90.2194%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (60 samples, 0.03%)</title><rect x="89.9961%" y="389" width="0.0302%" height="15" fill="rgb(221,121,27)" fg:x="178923" fg:w="60"/><text x="90.2461%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (60 samples, 0.03%)</title><rect x="89.9961%" y="373" width="0.0302%" height="15" fill="rgb(247,70,47)" fg:x="178923" fg:w="60"/><text x="90.2461%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1,223 samples, 0.62%)</title><rect x="89.4785%" y="437" width="0.6152%" height="15" fill="rgb(228,85,35)" fg:x="177894" fg:w="1223"/><text x="89.7285%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var_idx (125 samples, 0.06%)</title><rect x="90.0308%" y="421" width="0.0629%" height="15" fill="rgb(209,50,18)" fg:x="178992" fg:w="125"/><text x="90.2808%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (125 samples, 0.06%)</title><rect x="90.0308%" y="405" width="0.0629%" height="15" fill="rgb(250,19,35)" fg:x="178992" fg:w="125"/><text x="90.2808%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (70 samples, 0.04%)</title><rect x="90.0937%" y="437" width="0.0352%" height="15" fill="rgb(253,107,29)" fg:x="179117" fg:w="70"/><text x="90.3437%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (67 samples, 0.03%)</title><rect x="90.2244%" y="389" width="0.0337%" height="15" fill="rgb(252,179,29)" fg:x="179377" fg:w="67"/><text x="90.4744%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (67 samples, 0.03%)</title><rect x="90.2244%" y="373" width="0.0337%" height="15" fill="rgb(238,194,6)" fg:x="179377" fg:w="67"/><text x="90.4744%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (261 samples, 0.13%)</title><rect x="90.1289%" y="405" width="0.1313%" height="15" fill="rgb(238,164,29)" fg:x="179187" fg:w="261"/><text x="90.3789%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,690 samples, 0.85%)</title><rect x="90.1289%" y="421" width="0.8500%" height="15" fill="rgb(224,25,9)" fg:x="179187" fg:w="1690"/><text x="90.3789%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,429 samples, 0.72%)</title><rect x="90.2601%" y="405" width="0.7188%" height="15" fill="rgb(244,153,23)" fg:x="179448" fg:w="1429"/><text x="90.5101%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,429 samples, 0.72%)</title><rect x="90.2601%" y="389" width="0.7188%" height="15" fill="rgb(212,203,14)" fg:x="179448" fg:w="1429"/><text x="90.5101%" y="399.50"></text></g><g><title>__hrtimer_run_queues (25 samples, 0.01%)</title><rect x="94.3122%" y="325" width="0.0126%" height="15" fill="rgb(220,164,20)" fg:x="187504" fg:w="25"/><text x="94.5622%" y="335.50"></text></g><g><title>tick_sched_timer (25 samples, 0.01%)</title><rect x="94.3122%" y="309" width="0.0126%" height="15" fill="rgb(222,203,48)" fg:x="187504" fg:w="25"/><text x="94.5622%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (31 samples, 0.02%)</title><rect x="94.3122%" y="357" width="0.0156%" height="15" fill="rgb(215,159,22)" fg:x="187504" fg:w="31"/><text x="94.5622%" y="367.50"></text></g><g><title>hrtimer_interrupt (31 samples, 0.02%)</title><rect x="94.3122%" y="341" width="0.0156%" height="15" fill="rgb(216,183,47)" fg:x="187504" fg:w="31"/><text x="94.5622%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (35 samples, 0.02%)</title><rect x="94.3122%" y="389" width="0.0176%" height="15" fill="rgb(229,195,25)" fg:x="187504" fg:w="35"/><text x="94.5622%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (35 samples, 0.02%)</title><rect x="94.3122%" y="373" width="0.0176%" height="15" fill="rgb(224,132,51)" fg:x="187504" fg:w="35"/><text x="94.5622%" y="383.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (6,663 samples, 3.35%)</title><rect x="90.9789%" y="405" width="3.3514%" height="15" fill="rgb(240,63,7)" fg:x="180877" fg:w="6663"/><text x="91.2289%" y="415.50">&lt;pr..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (9,698 samples, 4.88%)</title><rect x="90.9789%" y="421" width="4.8780%" height="15" fill="rgb(249,182,41)" fg:x="180877" fg:w="9698"/><text x="91.2289%" y="431.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (3,035 samples, 1.53%)</title><rect x="94.3303%" y="405" width="1.5266%" height="15" fill="rgb(243,47,26)" fg:x="187540" fg:w="3035"/><text x="94.5803%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (841 samples, 0.42%)</title><rect x="95.8569%" y="421" width="0.4230%" height="15" fill="rgb(233,48,2)" fg:x="190575" fg:w="841"/><text x="96.1069%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (3,353 samples, 1.69%)</title><rect x="96.2799%" y="405" width="1.6865%" height="15" fill="rgb(244,165,34)" fg:x="191416" fg:w="3353"/><text x="96.5299%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (16,078 samples, 8.09%)</title><rect x="90.1289%" y="437" width="8.0870%" height="15" fill="rgb(207,89,7)" fg:x="179187" fg:w="16078"/><text x="90.3789%" y="447.50">project1::s..</text></g><g><title>project1::solver::types::Lit::var_idx (3,849 samples, 1.94%)</title><rect x="96.2799%" y="421" width="1.9360%" height="15" fill="rgb(244,117,36)" fg:x="191416" fg:w="3849"/><text x="96.5299%" y="431.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (496 samples, 0.25%)</title><rect x="97.9664%" y="405" width="0.2495%" height="15" fill="rgb(226,144,34)" fg:x="194769" fg:w="496"/><text x="98.2164%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (131 samples, 0.07%)</title><rect x="98.2159%" y="405" width="0.0659%" height="15" fill="rgb(213,23,19)" fg:x="195265" fg:w="131"/><text x="98.4659%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (82 samples, 0.04%)</title><rect x="98.2405%" y="389" width="0.0412%" height="15" fill="rgb(217,75,12)" fg:x="195314" fg:w="82"/><text x="98.4905%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (82 samples, 0.04%)</title><rect x="98.2405%" y="373" width="0.0412%" height="15" fill="rgb(224,159,17)" fg:x="195314" fg:w="82"/><text x="98.4905%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (887 samples, 0.45%)</title><rect x="98.2159%" y="437" width="0.4462%" height="15" fill="rgb(217,118,1)" fg:x="195265" fg:w="887"/><text x="98.4659%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (887 samples, 0.45%)</title><rect x="98.2159%" y="421" width="0.4462%" height="15" fill="rgb(232,180,48)" fg:x="195265" fg:w="887"/><text x="98.4659%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (756 samples, 0.38%)</title><rect x="98.2818%" y="405" width="0.3803%" height="15" fill="rgb(230,27,33)" fg:x="195396" fg:w="756"/><text x="98.5318%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (756 samples, 0.38%)</title><rect x="98.2818%" y="389" width="0.3803%" height="15" fill="rgb(205,31,21)" fg:x="195396" fg:w="756"/><text x="98.5318%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (33 samples, 0.02%)</title><rect x="98.6937%" y="421" width="0.0166%" height="15" fill="rgb(253,59,4)" fg:x="196215" fg:w="33"/><text x="98.9437%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (20 samples, 0.01%)</title><rect x="98.7003%" y="405" width="0.0101%" height="15" fill="rgb(224,201,9)" fg:x="196228" fg:w="20"/><text x="98.9503%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (20 samples, 0.01%)</title><rect x="98.7003%" y="389" width="0.0101%" height="15" fill="rgb(229,206,30)" fg:x="196228" fg:w="20"/><text x="98.9503%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (263 samples, 0.13%)</title><rect x="98.6621%" y="437" width="0.1323%" height="15" fill="rgb(212,67,47)" fg:x="196152" fg:w="263"/><text x="98.9121%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (167 samples, 0.08%)</title><rect x="98.7103%" y="421" width="0.0840%" height="15" fill="rgb(211,96,50)" fg:x="196248" fg:w="167"/><text x="98.9603%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (167 samples, 0.08%)</title><rect x="98.7103%" y="405" width="0.0840%" height="15" fill="rgb(252,114,18)" fg:x="196248" fg:w="167"/><text x="98.9603%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167 samples, 0.08%)</title><rect x="98.7103%" y="389" width="0.0840%" height="15" fill="rgb(223,58,37)" fg:x="196248" fg:w="167"/><text x="98.9603%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (167 samples, 0.08%)</title><rect x="98.7103%" y="373" width="0.0840%" height="15" fill="rgb(237,70,4)" fg:x="196248" fg:w="167"/><text x="98.9603%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (27 samples, 0.01%)</title><rect x="98.7943%" y="421" width="0.0136%" height="15" fill="rgb(244,85,46)" fg:x="196415" fg:w="27"/><text x="99.0443%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (25 samples, 0.01%)</title><rect x="98.7953%" y="405" width="0.0126%" height="15" fill="rgb(223,39,52)" fg:x="196417" fg:w="25"/><text x="99.0453%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (25 samples, 0.01%)</title><rect x="98.7953%" y="389" width="0.0126%" height="15" fill="rgb(218,200,14)" fg:x="196417" fg:w="25"/><text x="99.0453%" y="399.50"></text></g><g><title>core::ptr::read (267 samples, 0.13%)</title><rect x="98.8079%" y="389" width="0.1343%" height="15" fill="rgb(208,171,16)" fg:x="196442" fg:w="267"/><text x="99.0579%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (360 samples, 0.18%)</title><rect x="98.7943%" y="437" width="0.1811%" height="15" fill="rgb(234,200,18)" fg:x="196415" fg:w="360"/><text x="99.0443%" y="447.50"></text></g><g><title>core::mem::take (333 samples, 0.17%)</title><rect x="98.8079%" y="421" width="0.1675%" height="15" fill="rgb(228,45,11)" fg:x="196442" fg:w="333"/><text x="99.0579%" y="431.50"></text></g><g><title>core::mem::replace (333 samples, 0.17%)</title><rect x="98.8079%" y="405" width="0.1675%" height="15" fill="rgb(237,182,11)" fg:x="196442" fg:w="333"/><text x="99.0579%" y="415.50"></text></g><g><title>core::ptr::write (66 samples, 0.03%)</title><rect x="98.9422%" y="389" width="0.0332%" height="15" fill="rgb(241,175,49)" fg:x="196709" fg:w="66"/><text x="99.1922%" y="399.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (768 samples, 0.39%)</title><rect x="98.9754%" y="437" width="0.3863%" height="15" fill="rgb(247,38,35)" fg:x="196775" fg:w="768"/><text x="99.2254%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (133,692 samples, 67.25%)</title><rect x="32.1188%" y="469" width="67.2454%" height="15" fill="rgb(228,39,49)" fg:x="63856" fg:w="133692"/><text x="32.3688%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (119,279 samples, 60.00%)</title><rect x="39.3683%" y="453" width="59.9959%" height="15" fill="rgb(226,101,26)" fg:x="78269" fg:w="119279"/><text x="39.6183%" y="463.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (607 samples, 0.31%)</title><rect x="99.3642%" y="469" width="0.3053%" height="15" fill="rgb(206,141,19)" fg:x="197548" fg:w="607"/><text x="99.6142%" y="479.50"></text></g><g><title>std::panic::catch_unwind (195,262 samples, 98.21%)</title><rect x="1.4818%" y="613" width="98.2144%" height="15" fill="rgb(211,200,13)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (195,262 samples, 98.21%)</title><rect x="1.4818%" y="597" width="98.2144%" height="15" fill="rgb(241,121,6)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (195,262 samples, 98.21%)</title><rect x="1.4818%" y="581" width="98.2144%" height="15" fill="rgb(234,221,29)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (195,262 samples, 98.21%)</title><rect x="1.4818%" y="565" width="98.2144%" height="15" fill="rgb(229,136,5)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (195,262 samples, 98.21%)</title><rect x="1.4818%" y="549" width="98.2144%" height="15" fill="rgb(238,36,11)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="559.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (195,262 samples, 98.21%)</title><rect x="1.4818%" y="533" width="98.2144%" height="15" fill="rgb(251,55,41)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (195,262 samples, 98.21%)</title><rect x="1.4818%" y="517" width="98.2144%" height="15" fill="rgb(242,34,40)" fg:x="2946" fg:w="195262"/><text x="1.7318%" y="527.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (195,260 samples, 98.21%)</title><rect x="1.4828%" y="501" width="98.2134%" height="15" fill="rgb(215,42,17)" fg:x="2948" fg:w="195260"/><text x="1.7328%" y="511.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (195,260 samples, 98.21%)</title><rect x="1.4828%" y="485" width="98.2134%" height="15" fill="rgb(207,44,46)" fg:x="2948" fg:w="195260"/><text x="1.7328%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>__clone3 (195,264 samples, 98.22%)</title><rect x="1.4813%" y="725" width="98.2154%" height="15" fill="rgb(211,206,28)" fg:x="2945" fg:w="195264"/><text x="1.7313%" y="735.50">__clone3</text></g><g><title>start_thread (195,263 samples, 98.21%)</title><rect x="1.4818%" y="709" width="98.2149%" height="15" fill="rgb(237,167,16)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="719.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (195,263 samples, 98.21%)</title><rect x="1.4818%" y="693" width="98.2149%" height="15" fill="rgb(233,66,6)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="703.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (195,263 samples, 98.21%)</title><rect x="1.4818%" y="677" width="98.2149%" height="15" fill="rgb(246,123,29)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (195,263 samples, 98.21%)</title><rect x="1.4818%" y="661" width="98.2149%" height="15" fill="rgb(209,62,40)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (195,263 samples, 98.21%)</title><rect x="1.4818%" y="645" width="98.2149%" height="15" fill="rgb(218,4,25)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (195,263 samples, 98.21%)</title><rect x="1.4818%" y="629" width="98.2149%" height="15" fill="rgb(253,91,49)" fg:x="2946" fg:w="195263"/><text x="1.7318%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>asm_exc_page_fault (174 samples, 0.09%)</title><rect x="99.6982%" y="725" width="0.0875%" height="15" fill="rgb(228,155,29)" fg:x="198212" fg:w="174"/><text x="99.9482%" y="735.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (29 samples, 0.01%)</title><rect x="99.7857%" y="725" width="0.0146%" height="15" fill="rgb(243,57,37)" fg:x="198386" fg:w="29"/><text x="100.0357%" y="735.50"></text></g><g><title>page_remove_rmap (30 samples, 0.02%)</title><rect x="99.8416%" y="517" width="0.0151%" height="15" fill="rgb(244,167,17)" fg:x="198497" fg:w="30"/><text x="100.0916%" y="527.50"></text></g><g><title>free_unref_page_list (58 samples, 0.03%)</title><rect x="99.8873%" y="453" width="0.0292%" height="15" fill="rgb(207,181,38)" fg:x="198588" fg:w="58"/><text x="100.1373%" y="463.50"></text></g><g><title>free_unref_page_commit (43 samples, 0.02%)</title><rect x="99.8949%" y="437" width="0.0216%" height="15" fill="rgb(211,8,23)" fg:x="198603" fg:w="43"/><text x="100.1449%" y="447.50"></text></g><g><title>free_pcppages_bulk (37 samples, 0.02%)</title><rect x="99.8979%" y="421" width="0.0186%" height="15" fill="rgb(235,11,44)" fg:x="198609" fg:w="37"/><text x="100.1479%" y="431.50"></text></g><g><title>__free_one_page (36 samples, 0.02%)</title><rect x="99.8984%" y="405" width="0.0181%" height="15" fill="rgb(248,18,52)" fg:x="198610" fg:w="36"/><text x="100.1484%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (127 samples, 0.06%)</title><rect x="99.8566%" y="485" width="0.0639%" height="15" fill="rgb(208,4,7)" fg:x="198527" fg:w="127"/><text x="100.1066%" y="495.50"></text></g><g><title>release_pages (119 samples, 0.06%)</title><rect x="99.8607%" y="469" width="0.0599%" height="15" fill="rgb(240,17,39)" fg:x="198535" fg:w="119"/><text x="100.1107%" y="479.50"></text></g><g><title>tlb_flush_mmu (128 samples, 0.06%)</title><rect x="99.8566%" y="517" width="0.0644%" height="15" fill="rgb(207,170,3)" fg:x="198527" fg:w="128"/><text x="100.1066%" y="527.50"></text></g><g><title>tlb_batch_pages_flush (128 samples, 0.06%)</title><rect x="99.8566%" y="501" width="0.0644%" height="15" fill="rgb(236,100,52)" fg:x="198527" fg:w="128"/><text x="100.1066%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (225 samples, 0.11%)</title><rect x="99.8099%" y="725" width="0.1132%" height="15" fill="rgb(246,78,51)" fg:x="198434" fg:w="225"/><text x="100.0599%" y="735.50"></text></g><g><title>do_syscall_64 (225 samples, 0.11%)</title><rect x="99.8099%" y="709" width="0.1132%" height="15" fill="rgb(211,17,15)" fg:x="198434" fg:w="225"/><text x="100.0599%" y="719.50"></text></g><g><title>__x64_sys_exit_group (224 samples, 0.11%)</title><rect x="99.8104%" y="693" width="0.1127%" height="15" fill="rgb(209,59,46)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="703.50"></text></g><g><title>do_group_exit (224 samples, 0.11%)</title><rect x="99.8104%" y="677" width="0.1127%" height="15" fill="rgb(210,92,25)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="687.50"></text></g><g><title>do_exit (224 samples, 0.11%)</title><rect x="99.8104%" y="661" width="0.1127%" height="15" fill="rgb(238,174,52)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="671.50"></text></g><g><title>exit_mm (224 samples, 0.11%)</title><rect x="99.8104%" y="645" width="0.1127%" height="15" fill="rgb(230,73,7)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="655.50"></text></g><g><title>mmput (224 samples, 0.11%)</title><rect x="99.8104%" y="629" width="0.1127%" height="15" fill="rgb(243,124,40)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="639.50"></text></g><g><title>exit_mmap (224 samples, 0.11%)</title><rect x="99.8104%" y="613" width="0.1127%" height="15" fill="rgb(244,170,11)" fg:x="198435" fg:w="224"/><text x="100.0604%" y="623.50"></text></g><g><title>unmap_vmas (222 samples, 0.11%)</title><rect x="99.8114%" y="597" width="0.1117%" height="15" fill="rgb(207,114,54)" fg:x="198437" fg:w="222"/><text x="100.0614%" y="607.50"></text></g><g><title>unmap_single_vma (222 samples, 0.11%)</title><rect x="99.8114%" y="581" width="0.1117%" height="15" fill="rgb(205,42,20)" fg:x="198437" fg:w="222"/><text x="100.0614%" y="591.50"></text></g><g><title>unmap_page_range (222 samples, 0.11%)</title><rect x="99.8114%" y="565" width="0.1117%" height="15" fill="rgb(230,30,28)" fg:x="198437" fg:w="222"/><text x="100.0614%" y="575.50"></text></g><g><title>zap_pmd_range.isra.0 (222 samples, 0.11%)</title><rect x="99.8114%" y="549" width="0.1117%" height="15" fill="rgb(205,73,54)" fg:x="198437" fg:w="222"/><text x="100.0614%" y="559.50"></text></g><g><title>zap_pte_range (219 samples, 0.11%)</title><rect x="99.8129%" y="533" width="0.1102%" height="15" fill="rgb(254,227,23)" fg:x="198440" fg:w="219"/><text x="100.0629%" y="543.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (27 samples, 0.01%)</title><rect x="99.9306%" y="725" width="0.0136%" height="15" fill="rgb(228,202,34)" fg:x="198674" fg:w="27"/><text x="100.1806%" y="735.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (41 samples, 0.02%)</title><rect x="99.9452%" y="725" width="0.0206%" height="15" fill="rgb(222,225,37)" fg:x="198703" fg:w="41"/><text x="100.1952%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (56 samples, 0.03%)</title><rect x="99.9683%" y="725" width="0.0282%" height="15" fill="rgb(221,14,54)" fg:x="198749" fg:w="56"/><text x="100.2183%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (36 samples, 0.02%)</title><rect x="99.9784%" y="709" width="0.0181%" height="15" fill="rgb(254,102,2)" fg:x="198769" fg:w="36"/><text x="100.2284%" y="719.50"></text></g><g><title>all (198,812 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(232,104,17)" fg:x="0" fg:w="198812"/><text x="0.2500%" y="767.50"></text></g><g><title>project1 (198,806 samples, 100.00%)</title><rect x="0.0030%" y="741" width="99.9970%" height="15" fill="rgb(250,220,14)" fg:x="6" fg:w="198806"/><text x="0.2530%" y="751.50">project1</text></g></svg></svg>