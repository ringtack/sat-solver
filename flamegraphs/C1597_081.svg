<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="197217"><g><title>[[heap]] (27 samples, 0.01%)</title><rect x="0.0030%" y="709" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="27"/><text x="0.2530%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (20 samples, 0.01%)</title><rect x="0.0066%" y="693" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="20"/><text x="0.2566%" y="703.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (35 samples, 0.02%)</title><rect x="0.0543%" y="693" width="0.0177%" height="15" fill="rgb(221,193,54)" fg:x="107" fg:w="35"/><text x="0.3043%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (88 samples, 0.04%)</title><rect x="0.0720%" y="693" width="0.0446%" height="15" fill="rgb(248,212,6)" fg:x="142" fg:w="88"/><text x="0.3220%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (28 samples, 0.01%)</title><rect x="0.1024%" y="677" width="0.0142%" height="15" fill="rgb(208,68,35)" fg:x="202" fg:w="28"/><text x="0.3524%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (28 samples, 0.01%)</title><rect x="0.1024%" y="661" width="0.0142%" height="15" fill="rgb(232,128,0)" fg:x="202" fg:w="28"/><text x="0.3524%" y="671.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (43 samples, 0.02%)</title><rect x="0.1207%" y="693" width="0.0218%" height="15" fill="rgb(207,160,47)" fg:x="238" fg:w="43"/><text x="0.3707%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (27 samples, 0.01%)</title><rect x="0.1288%" y="677" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="254" fg:w="27"/><text x="0.3788%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (27 samples, 0.01%)</title><rect x="0.1288%" y="661" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="254" fg:w="27"/><text x="0.3788%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (27 samples, 0.01%)</title><rect x="0.1288%" y="645" width="0.0137%" height="15" fill="rgb(220,122,19)" fg:x="254" fg:w="27"/><text x="0.3788%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.01%)</title><rect x="0.1288%" y="629" width="0.0137%" height="15" fill="rgb(250,228,42)" fg:x="254" fg:w="27"/><text x="0.3788%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (38 samples, 0.02%)</title><rect x="0.1775%" y="645" width="0.0193%" height="15" fill="rgb(240,193,28)" fg:x="350" fg:w="38"/><text x="0.4275%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (38 samples, 0.02%)</title><rect x="0.1775%" y="629" width="0.0193%" height="15" fill="rgb(216,20,37)" fg:x="350" fg:w="38"/><text x="0.4275%" y="639.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.02%)</title><rect x="0.1775%" y="613" width="0.0193%" height="15" fill="rgb(206,188,39)" fg:x="350" fg:w="38"/><text x="0.4275%" y="623.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (190 samples, 0.10%)</title><rect x="0.1460%" y="661" width="0.0963%" height="15" fill="rgb(217,207,13)" fg:x="288" fg:w="190"/><text x="0.3960%" y="671.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (90 samples, 0.05%)</title><rect x="0.1967%" y="645" width="0.0456%" height="15" fill="rgb(231,73,38)" fg:x="388" fg:w="90"/><text x="0.4467%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (90 samples, 0.05%)</title><rect x="0.1967%" y="629" width="0.0456%" height="15" fill="rgb(225,20,46)" fg:x="388" fg:w="90"/><text x="0.4467%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (90 samples, 0.05%)</title><rect x="0.1967%" y="613" width="0.0456%" height="15" fill="rgb(210,31,41)" fg:x="388" fg:w="90"/><text x="0.4467%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (90 samples, 0.05%)</title><rect x="0.1967%" y="597" width="0.0456%" height="15" fill="rgb(221,200,47)" fg:x="388" fg:w="90"/><text x="0.4467%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (90 samples, 0.05%)</title><rect x="0.1967%" y="581" width="0.0456%" height="15" fill="rgb(226,26,5)" fg:x="388" fg:w="90"/><text x="0.4467%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (90 samples, 0.05%)</title><rect x="0.1967%" y="565" width="0.0456%" height="15" fill="rgb(249,33,26)" fg:x="388" fg:w="90"/><text x="0.4467%" y="575.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (34 samples, 0.02%)</title><rect x="0.2424%" y="661" width="0.0172%" height="15" fill="rgb(235,183,28)" fg:x="478" fg:w="34"/><text x="0.4924%" y="671.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (27 samples, 0.01%)</title><rect x="0.2459%" y="645" width="0.0137%" height="15" fill="rgb(221,5,38)" fg:x="485" fg:w="27"/><text x="0.4959%" y="655.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (27 samples, 0.01%)</title><rect x="0.2459%" y="629" width="0.0137%" height="15" fill="rgb(247,18,42)" fg:x="485" fg:w="27"/><text x="0.4959%" y="639.50"></text></g><g><title>[anon] (482 samples, 0.24%)</title><rect x="0.0167%" y="709" width="0.2444%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="482"/><text x="0.2667%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (234 samples, 0.12%)</title><rect x="0.1425%" y="693" width="0.1187%" height="15" fill="rgb(249,31,29)" fg:x="281" fg:w="234"/><text x="0.3925%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (234 samples, 0.12%)</title><rect x="0.1425%" y="677" width="0.1187%" height="15" fill="rgb(225,111,53)" fg:x="281" fg:w="234"/><text x="0.3925%" y="687.50"></text></g><g><title>__GI___libc_free (35 samples, 0.02%)</title><rect x="0.2677%" y="693" width="0.0177%" height="15" fill="rgb(238,160,17)" fg:x="528" fg:w="35"/><text x="0.5177%" y="703.50"></text></g><g><title>__GI___libc_malloc (83 samples, 0.04%)</title><rect x="0.2855%" y="693" width="0.0421%" height="15" fill="rgb(214,148,48)" fg:x="563" fg:w="83"/><text x="0.5355%" y="703.50"></text></g><g><title>_int_free (27 samples, 0.01%)</title><rect x="0.3397%" y="693" width="0.0137%" height="15" fill="rgb(232,36,49)" fg:x="670" fg:w="27"/><text x="0.5897%" y="703.50"></text></g><g><title>_int_malloc (21 samples, 0.01%)</title><rect x="0.3534%" y="693" width="0.0106%" height="15" fill="rgb(209,103,24)" fg:x="697" fg:w="21"/><text x="0.6034%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.01%)</title><rect x="0.3676%" y="693" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="725" fg:w="21"/><text x="0.6176%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.02%)</title><rect x="0.3925%" y="693" width="0.0208%" height="15" fill="rgb(213,181,19)" fg:x="774" fg:w="41"/><text x="0.6425%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (47 samples, 0.02%)</title><rect x="0.4133%" y="693" width="0.0238%" height="15" fill="rgb(254,191,54)" fg:x="815" fg:w="47"/><text x="0.6633%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (47 samples, 0.02%)</title><rect x="0.4133%" y="677" width="0.0238%" height="15" fill="rgb(241,83,37)" fg:x="815" fg:w="47"/><text x="0.6633%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (23 samples, 0.01%)</title><rect x="0.4371%" y="693" width="0.0117%" height="15" fill="rgb(233,36,39)" fg:x="862" fg:w="23"/><text x="0.6871%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (25 samples, 0.01%)</title><rect x="0.4487%" y="693" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="885" fg:w="25"/><text x="0.6987%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (320 samples, 0.16%)</title><rect x="0.4614%" y="693" width="0.1623%" height="15" fill="rgb(245,192,40)" fg:x="910" fg:w="320"/><text x="0.7114%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (151 samples, 0.08%)</title><rect x="0.5471%" y="677" width="0.0766%" height="15" fill="rgb(238,167,29)" fg:x="1079" fg:w="151"/><text x="0.7971%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (151 samples, 0.08%)</title><rect x="0.5471%" y="661" width="0.0766%" height="15" fill="rgb(232,182,51)" fg:x="1079" fg:w="151"/><text x="0.7971%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (151 samples, 0.08%)</title><rect x="0.5471%" y="645" width="0.0766%" height="15" fill="rgb(231,60,39)" fg:x="1079" fg:w="151"/><text x="0.7971%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (151 samples, 0.08%)</title><rect x="0.5471%" y="629" width="0.0766%" height="15" fill="rgb(208,69,12)" fg:x="1079" fg:w="151"/><text x="0.7971%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (67 samples, 0.03%)</title><rect x="0.6237%" y="693" width="0.0340%" height="15" fill="rgb(235,93,37)" fg:x="1230" fg:w="67"/><text x="0.8737%" y="703.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (54 samples, 0.03%)</title><rect x="0.6303%" y="677" width="0.0274%" height="15" fill="rgb(213,116,39)" fg:x="1243" fg:w="54"/><text x="0.8803%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (213 samples, 0.11%)</title><rect x="0.6577%" y="693" width="0.1080%" height="15" fill="rgb(222,207,29)" fg:x="1297" fg:w="213"/><text x="0.9077%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (41 samples, 0.02%)</title><rect x="0.7657%" y="693" width="0.0208%" height="15" fill="rgb(206,96,30)" fg:x="1510" fg:w="41"/><text x="1.0157%" y="703.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (27 samples, 0.01%)</title><rect x="0.7864%" y="693" width="0.0137%" height="15" fill="rgb(218,138,4)" fg:x="1551" fg:w="27"/><text x="1.0364%" y="703.50"></text></g><g><title>[unknown] (1,062 samples, 0.54%)</title><rect x="0.2677%" y="709" width="0.5385%" height="15" fill="rgb(250,191,14)" fg:x="528" fg:w="1062"/><text x="0.5177%" y="719.50"></text></g><g><title>core::cmp::PartialOrd::le (25 samples, 0.01%)</title><rect x="0.8767%" y="453" width="0.0127%" height="15" fill="rgb(239,60,40)" fg:x="1729" fg:w="25"/><text x="1.1267%" y="463.50"></text></g><g><title>_int_free (25 samples, 0.01%)</title><rect x="0.9021%" y="325" width="0.0127%" height="15" fill="rgb(206,27,48)" fg:x="1779" fg:w="25"/><text x="1.1521%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (72 samples, 0.04%)</title><rect x="0.8894%" y="453" width="0.0365%" height="15" fill="rgb(225,35,8)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (72 samples, 0.04%)</title><rect x="0.8894%" y="437" width="0.0365%" height="15" fill="rgb(250,213,24)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.04%)</title><rect x="0.8894%" y="421" width="0.0365%" height="15" fill="rgb(247,123,22)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (72 samples, 0.04%)</title><rect x="0.8894%" y="405" width="0.0365%" height="15" fill="rgb(231,138,38)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.04%)</title><rect x="0.8894%" y="389" width="0.0365%" height="15" fill="rgb(231,145,46)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="399.50"></text></g><g><title>__rdl_dealloc (72 samples, 0.04%)</title><rect x="0.8894%" y="373" width="0.0365%" height="15" fill="rgb(251,118,11)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (72 samples, 0.04%)</title><rect x="0.8894%" y="357" width="0.0365%" height="15" fill="rgb(217,147,25)" fg:x="1754" fg:w="72"/><text x="1.1394%" y="367.50"></text></g><g><title>__GI___libc_free (66 samples, 0.03%)</title><rect x="0.8924%" y="341" width="0.0335%" height="15" fill="rgb(247,81,37)" fg:x="1760" fg:w="66"/><text x="1.1424%" y="351.50"></text></g><g><title>arena_for_chunk (22 samples, 0.01%)</title><rect x="0.9147%" y="325" width="0.0112%" height="15" fill="rgb(209,12,38)" fg:x="1804" fg:w="22"/><text x="1.1647%" y="335.50"></text></g><g><title>arena_for_chunk (22 samples, 0.01%)</title><rect x="0.9147%" y="309" width="0.0112%" height="15" fill="rgb(227,1,9)" fg:x="1804" fg:w="22"/><text x="1.1647%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (105 samples, 0.05%)</title><rect x="0.9289%" y="453" width="0.0532%" height="15" fill="rgb(248,47,43)" fg:x="1832" fg:w="105"/><text x="1.1789%" y="463.50"></text></g><g><title>__rdl_alloc (217 samples, 0.11%)</title><rect x="2.3081%" y="277" width="0.1100%" height="15" fill="rgb(221,10,30)" fg:x="4552" fg:w="217"/><text x="2.5581%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (215 samples, 0.11%)</title><rect x="2.3091%" y="261" width="0.1090%" height="15" fill="rgb(210,229,1)" fg:x="4554" fg:w="215"/><text x="2.5591%" y="271.50"></text></g><g><title>__GI___libc_malloc (215 samples, 0.11%)</title><rect x="2.3091%" y="245" width="0.1090%" height="15" fill="rgb(222,148,37)" fg:x="4554" fg:w="215"/><text x="2.5591%" y="255.50"></text></g><g><title>tcache_get (159 samples, 0.08%)</title><rect x="2.3375%" y="229" width="0.0806%" height="15" fill="rgb(234,67,33)" fg:x="4610" fg:w="159"/><text x="2.5875%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (231 samples, 0.12%)</title><rect x="2.3081%" y="325" width="0.1171%" height="15" fill="rgb(247,98,35)" fg:x="4552" fg:w="231"/><text x="2.5581%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (231 samples, 0.12%)</title><rect x="2.3081%" y="309" width="0.1171%" height="15" fill="rgb(247,138,52)" fg:x="4552" fg:w="231"/><text x="2.5581%" y="319.50"></text></g><g><title>alloc::alloc::alloc (231 samples, 0.12%)</title><rect x="2.3081%" y="293" width="0.1171%" height="15" fill="rgb(213,79,30)" fg:x="4552" fg:w="231"/><text x="2.5581%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (259 samples, 0.13%)</title><rect x="2.2970%" y="373" width="0.1313%" height="15" fill="rgb(246,177,23)" fg:x="4530" fg:w="259"/><text x="2.5470%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (259 samples, 0.13%)</title><rect x="2.2970%" y="357" width="0.1313%" height="15" fill="rgb(230,62,27)" fg:x="4530" fg:w="259"/><text x="2.5470%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (259 samples, 0.13%)</title><rect x="2.2970%" y="341" width="0.1313%" height="15" fill="rgb(216,154,8)" fg:x="4530" fg:w="259"/><text x="2.5470%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (273 samples, 0.14%)</title><rect x="2.2965%" y="437" width="0.1384%" height="15" fill="rgb(244,35,45)" fg:x="4529" fg:w="273"/><text x="2.5465%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (272 samples, 0.14%)</title><rect x="2.2970%" y="421" width="0.1379%" height="15" fill="rgb(251,115,12)" fg:x="4530" fg:w="272"/><text x="2.5470%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (272 samples, 0.14%)</title><rect x="2.2970%" y="405" width="0.1379%" height="15" fill="rgb(240,54,50)" fg:x="4530" fg:w="272"/><text x="2.5470%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (272 samples, 0.14%)</title><rect x="2.2970%" y="389" width="0.1379%" height="15" fill="rgb(233,84,52)" fg:x="4530" fg:w="272"/><text x="2.5470%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.02%)</title><rect x="2.4349%" y="437" width="0.0218%" height="15" fill="rgb(207,117,47)" fg:x="4802" fg:w="43"/><text x="2.6849%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (188 samples, 0.10%)</title><rect x="2.4602%" y="421" width="0.0953%" height="15" fill="rgb(249,43,39)" fg:x="4852" fg:w="188"/><text x="2.7102%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (41 samples, 0.02%)</title><rect x="2.5348%" y="405" width="0.0208%" height="15" fill="rgb(209,38,44)" fg:x="4999" fg:w="41"/><text x="2.7848%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (41 samples, 0.02%)</title><rect x="2.5348%" y="389" width="0.0208%" height="15" fill="rgb(236,212,23)" fg:x="4999" fg:w="41"/><text x="2.7848%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (275 samples, 0.14%)</title><rect x="2.4602%" y="437" width="0.1394%" height="15" fill="rgb(242,79,21)" fg:x="4852" fg:w="275"/><text x="2.7102%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (87 samples, 0.04%)</title><rect x="2.5556%" y="421" width="0.0441%" height="15" fill="rgb(211,96,35)" fg:x="5040" fg:w="87"/><text x="2.8056%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (71 samples, 0.04%)</title><rect x="2.5637%" y="405" width="0.0360%" height="15" fill="rgb(253,215,40)" fg:x="5056" fg:w="71"/><text x="2.8137%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (59 samples, 0.03%)</title><rect x="2.5997%" y="421" width="0.0299%" height="15" fill="rgb(211,81,21)" fg:x="5127" fg:w="59"/><text x="2.8497%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (95 samples, 0.05%)</title><rect x="2.5997%" y="437" width="0.0482%" height="15" fill="rgb(208,190,38)" fg:x="5127" fg:w="95"/><text x="2.8497%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (36 samples, 0.02%)</title><rect x="2.6296%" y="421" width="0.0183%" height="15" fill="rgb(235,213,38)" fg:x="5186" fg:w="36"/><text x="2.8796%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (36 samples, 0.02%)</title><rect x="2.6296%" y="405" width="0.0183%" height="15" fill="rgb(237,122,38)" fg:x="5186" fg:w="36"/><text x="2.8796%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (739 samples, 0.37%)</title><rect x="2.6478%" y="437" width="0.3747%" height="15" fill="rgb(244,218,35)" fg:x="5222" fg:w="739"/><text x="2.8978%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (582 samples, 0.30%)</title><rect x="2.7275%" y="421" width="0.2951%" height="15" fill="rgb(240,68,47)" fg:x="5379" fg:w="582"/><text x="2.9775%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (370 samples, 0.19%)</title><rect x="3.0530%" y="405" width="0.1876%" height="15" fill="rgb(210,16,53)" fg:x="6021" fg:w="370"/><text x="3.3030%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (370 samples, 0.19%)</title><rect x="3.0530%" y="389" width="0.1876%" height="15" fill="rgb(235,124,12)" fg:x="6021" fg:w="370"/><text x="3.3030%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (470 samples, 0.24%)</title><rect x="3.0226%" y="437" width="0.2383%" height="15" fill="rgb(224,169,11)" fg:x="5961" fg:w="470"/><text x="3.2726%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (453 samples, 0.23%)</title><rect x="3.0312%" y="421" width="0.2297%" height="15" fill="rgb(250,166,2)" fg:x="5978" fg:w="453"/><text x="3.2812%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (40 samples, 0.02%)</title><rect x="3.2406%" y="405" width="0.0203%" height="15" fill="rgb(242,216,29)" fg:x="6391" fg:w="40"/><text x="3.4906%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (40 samples, 0.02%)</title><rect x="3.2406%" y="389" width="0.0203%" height="15" fill="rgb(230,116,27)" fg:x="6391" fg:w="40"/><text x="3.4906%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (54 samples, 0.03%)</title><rect x="3.2685%" y="437" width="0.0274%" height="15" fill="rgb(228,99,48)" fg:x="6446" fg:w="54"/><text x="3.5185%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (34 samples, 0.02%)</title><rect x="3.2959%" y="437" width="0.0172%" height="15" fill="rgb(253,11,6)" fg:x="6500" fg:w="34"/><text x="3.5459%" y="447.50"></text></g><g><title>__memcpy_evex_unaligned_erms (37 samples, 0.02%)</title><rect x="3.6189%" y="261" width="0.0188%" height="15" fill="rgb(247,143,39)" fg:x="7137" fg:w="37"/><text x="3.8689%" y="271.50"></text></g><g><title>_int_free (36 samples, 0.02%)</title><rect x="3.6376%" y="261" width="0.0183%" height="15" fill="rgb(236,97,10)" fg:x="7174" fg:w="36"/><text x="3.8876%" y="271.50"></text></g><g><title>charge_memcg (26 samples, 0.01%)</title><rect x="3.7142%" y="101" width="0.0132%" height="15" fill="rgb(233,208,19)" fg:x="7325" fg:w="26"/><text x="3.9642%" y="111.50"></text></g><g><title>__mem_cgroup_charge (44 samples, 0.02%)</title><rect x="3.7132%" y="117" width="0.0223%" height="15" fill="rgb(216,164,2)" fg:x="7323" fg:w="44"/><text x="3.9632%" y="127.50"></text></g><g><title>__alloc_pages (30 samples, 0.02%)</title><rect x="3.7482%" y="85" width="0.0152%" height="15" fill="rgb(220,129,5)" fg:x="7392" fg:w="30"/><text x="3.9982%" y="95.50"></text></g><g><title>get_page_from_freelist (26 samples, 0.01%)</title><rect x="3.7502%" y="69" width="0.0132%" height="15" fill="rgb(242,17,10)" fg:x="7396" fg:w="26"/><text x="4.0002%" y="79.50"></text></g><g><title>handle_pte_fault (117 samples, 0.06%)</title><rect x="3.7051%" y="149" width="0.0593%" height="15" fill="rgb(242,107,0)" fg:x="7307" fg:w="117"/><text x="3.9551%" y="159.50"></text></g><g><title>do_anonymous_page (110 samples, 0.06%)</title><rect x="3.7086%" y="133" width="0.0558%" height="15" fill="rgb(251,28,31)" fg:x="7314" fg:w="110"/><text x="3.9586%" y="143.50"></text></g><g><title>vma_alloc_folio (37 samples, 0.02%)</title><rect x="3.7456%" y="117" width="0.0188%" height="15" fill="rgb(233,223,10)" fg:x="7387" fg:w="37"/><text x="3.9956%" y="127.50"></text></g><g><title>__folio_alloc (32 samples, 0.02%)</title><rect x="3.7482%" y="101" width="0.0162%" height="15" fill="rgb(215,21,27)" fg:x="7392" fg:w="32"/><text x="3.9982%" y="111.50"></text></g><g><title>__handle_mm_fault (119 samples, 0.06%)</title><rect x="3.7045%" y="165" width="0.0603%" height="15" fill="rgb(232,23,21)" fg:x="7306" fg:w="119"/><text x="3.9545%" y="175.50"></text></g><g><title>handle_mm_fault (132 samples, 0.07%)</title><rect x="3.7035%" y="181" width="0.0669%" height="15" fill="rgb(244,5,23)" fg:x="7304" fg:w="132"/><text x="3.9535%" y="191.50"></text></g><g><title>do_user_addr_fault (135 samples, 0.07%)</title><rect x="3.7030%" y="197" width="0.0685%" height="15" fill="rgb(226,81,46)" fg:x="7303" fg:w="135"/><text x="3.9530%" y="207.50"></text></g><g><title>asm_exc_page_fault (152 samples, 0.08%)</title><rect x="3.7015%" y="229" width="0.0771%" height="15" fill="rgb(247,70,30)" fg:x="7300" fg:w="152"/><text x="3.9515%" y="239.50"></text></g><g><title>exc_page_fault (152 samples, 0.08%)</title><rect x="3.7015%" y="213" width="0.0771%" height="15" fill="rgb(212,68,19)" fg:x="7300" fg:w="152"/><text x="3.9515%" y="223.50"></text></g><g><title>perf_event_mmap_output (42 samples, 0.02%)</title><rect x="3.8435%" y="53" width="0.0213%" height="15" fill="rgb(240,187,13)" fg:x="7580" fg:w="42"/><text x="4.0935%" y="63.50"></text></g><g><title>perf_event_mmap_event (125 samples, 0.06%)</title><rect x="3.8019%" y="101" width="0.0634%" height="15" fill="rgb(223,113,26)" fg:x="7498" fg:w="125"/><text x="4.0519%" y="111.50"></text></g><g><title>perf_iterate_sb (121 samples, 0.06%)</title><rect x="3.8039%" y="85" width="0.0614%" height="15" fill="rgb(206,192,2)" fg:x="7502" fg:w="121"/><text x="4.0539%" y="95.50"></text></g><g><title>perf_iterate_ctx (120 samples, 0.06%)</title><rect x="3.8044%" y="69" width="0.0608%" height="15" fill="rgb(241,108,4)" fg:x="7503" fg:w="120"/><text x="4.0544%" y="79.50"></text></g><g><title>perf_event_mmap (129 samples, 0.07%)</title><rect x="3.8009%" y="117" width="0.0654%" height="15" fill="rgb(247,173,49)" fg:x="7496" fg:w="129"/><text x="4.0509%" y="127.50"></text></g><g><title>vma_merge (20 samples, 0.01%)</title><rect x="3.8668%" y="117" width="0.0101%" height="15" fill="rgb(224,114,35)" fg:x="7626" fg:w="20"/><text x="4.1168%" y="127.50"></text></g><g><title>mprotect_fixup (173 samples, 0.09%)</title><rect x="3.7902%" y="133" width="0.0877%" height="15" fill="rgb(245,159,27)" fg:x="7475" fg:w="173"/><text x="4.0402%" y="143.50"></text></g><g><title>do_mprotect_pkey (197 samples, 0.10%)</title><rect x="3.7816%" y="149" width="0.0999%" height="15" fill="rgb(245,172,44)" fg:x="7458" fg:w="197"/><text x="4.0316%" y="159.50"></text></g><g><title>__x64_sys_mprotect (199 samples, 0.10%)</title><rect x="3.7811%" y="165" width="0.1009%" height="15" fill="rgb(236,23,11)" fg:x="7457" fg:w="199"/><text x="4.0311%" y="175.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (226 samples, 0.11%)</title><rect x="3.7791%" y="197" width="0.1146%" height="15" fill="rgb(205,117,38)" fg:x="7453" fg:w="226"/><text x="4.0291%" y="207.50"></text></g><g><title>do_syscall_64 (224 samples, 0.11%)</title><rect x="3.7801%" y="181" width="0.1136%" height="15" fill="rgb(237,72,25)" fg:x="7455" fg:w="224"/><text x="4.0301%" y="191.50"></text></g><g><title>grow_heap (259 samples, 0.13%)</title><rect x="3.7786%" y="229" width="0.1313%" height="15" fill="rgb(244,70,9)" fg:x="7452" fg:w="259"/><text x="4.0286%" y="239.50"></text></g><g><title>__GI___mprotect (259 samples, 0.13%)</title><rect x="3.7786%" y="213" width="0.1313%" height="15" fill="rgb(217,125,39)" fg:x="7452" fg:w="259"/><text x="4.0286%" y="223.50"></text></g><g><title>_int_realloc (595 samples, 0.30%)</title><rect x="3.6118%" y="277" width="0.3017%" height="15" fill="rgb(235,36,10)" fg:x="7123" fg:w="595"/><text x="3.8618%" y="287.50"></text></g><g><title>_int_malloc (508 samples, 0.26%)</title><rect x="3.6559%" y="261" width="0.2576%" height="15" fill="rgb(251,123,47)" fg:x="7210" fg:w="508"/><text x="3.9059%" y="271.50"></text></g><g><title>sysmalloc (449 samples, 0.23%)</title><rect x="3.6858%" y="245" width="0.2277%" height="15" fill="rgb(221,13,13)" fg:x="7269" fg:w="449"/><text x="3.9358%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (806 samples, 0.41%)</title><rect x="3.5316%" y="373" width="0.4087%" height="15" fill="rgb(238,131,9)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (806 samples, 0.41%)</title><rect x="3.5316%" y="357" width="0.4087%" height="15" fill="rgb(211,50,8)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="367.50"></text></g><g><title>alloc::alloc::realloc (806 samples, 0.41%)</title><rect x="3.5316%" y="341" width="0.4087%" height="15" fill="rgb(245,182,24)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="351.50"></text></g><g><title>__rdl_realloc (806 samples, 0.41%)</title><rect x="3.5316%" y="325" width="0.4087%" height="15" fill="rgb(242,14,37)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (806 samples, 0.41%)</title><rect x="3.5316%" y="309" width="0.4087%" height="15" fill="rgb(246,228,12)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="319.50"></text></g><g><title>__GI___libc_realloc (806 samples, 0.41%)</title><rect x="3.5316%" y="293" width="0.4087%" height="15" fill="rgb(213,55,15)" fg:x="6965" fg:w="806"/><text x="3.7816%" y="303.50"></text></g><g><title>arena_for_chunk (53 samples, 0.03%)</title><rect x="3.9135%" y="277" width="0.0269%" height="15" fill="rgb(209,9,3)" fg:x="7718" fg:w="53"/><text x="4.1635%" y="287.50"></text></g><g><title>arena_for_chunk (52 samples, 0.03%)</title><rect x="3.9140%" y="261" width="0.0264%" height="15" fill="rgb(230,59,30)" fg:x="7719" fg:w="52"/><text x="4.1640%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (814 samples, 0.41%)</title><rect x="3.5306%" y="389" width="0.4127%" height="15" fill="rgb(209,121,21)" fg:x="6963" fg:w="814"/><text x="3.7806%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (827 samples, 0.42%)</title><rect x="3.5271%" y="421" width="0.4193%" height="15" fill="rgb(220,109,13)" fg:x="6956" fg:w="827"/><text x="3.7771%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (827 samples, 0.42%)</title><rect x="3.5271%" y="405" width="0.4193%" height="15" fill="rgb(232,18,1)" fg:x="6956" fg:w="827"/><text x="3.7771%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (100 samples, 0.05%)</title><rect x="3.9464%" y="421" width="0.0507%" height="15" fill="rgb(215,41,42)" fg:x="7783" fg:w="100"/><text x="4.1964%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (100 samples, 0.05%)</title><rect x="3.9464%" y="405" width="0.0507%" height="15" fill="rgb(224,123,36)" fg:x="7783" fg:w="100"/><text x="4.1964%" y="415.50"></text></g><g><title>core::ptr::write (564 samples, 0.29%)</title><rect x="3.9981%" y="421" width="0.2860%" height="15" fill="rgb(240,125,3)" fg:x="7885" fg:w="564"/><text x="4.2481%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,931 samples, 0.98%)</title><rect x="3.3131%" y="437" width="0.9791%" height="15" fill="rgb(205,98,50)" fg:x="6534" fg:w="1931"/><text x="3.5631%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (28 samples, 0.01%)</title><rect x="4.3156%" y="405" width="0.0142%" height="15" fill="rgb(205,185,37)" fg:x="8511" fg:w="28"/><text x="4.5656%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.01%)</title><rect x="4.3156%" y="389" width="0.0142%" height="15" fill="rgb(238,207,15)" fg:x="8511" fg:w="28"/><text x="4.5656%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (28 samples, 0.01%)</title><rect x="4.3156%" y="373" width="0.0142%" height="15" fill="rgb(213,199,42)" fg:x="8511" fg:w="28"/><text x="4.5656%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (255 samples, 0.13%)</title><rect x="4.3029%" y="421" width="0.1293%" height="15" fill="rgb(235,201,11)" fg:x="8486" fg:w="255"/><text x="4.5529%" y="431.50"></text></g><g><title>core::ptr::write (196 samples, 0.10%)</title><rect x="4.3328%" y="405" width="0.0994%" height="15" fill="rgb(207,46,11)" fg:x="8545" fg:w="196"/><text x="4.5828%" y="415.50"></text></g><g><title>__memset_evex_unaligned_erms (173 samples, 0.09%)</title><rect x="4.3445%" y="389" width="0.0877%" height="15" fill="rgb(241,35,35)" fg:x="8568" fg:w="173"/><text x="4.5945%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (287 samples, 0.15%)</title><rect x="4.2922%" y="437" width="0.1455%" height="15" fill="rgb(243,32,47)" fg:x="8465" fg:w="287"/><text x="4.5422%" y="447.50"></text></g><g><title>__rdl_alloc (347 samples, 0.18%)</title><rect x="4.4408%" y="325" width="0.1759%" height="15" fill="rgb(247,202,23)" fg:x="8758" fg:w="347"/><text x="4.6908%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (347 samples, 0.18%)</title><rect x="4.4408%" y="309" width="0.1759%" height="15" fill="rgb(219,102,11)" fg:x="8758" fg:w="347"/><text x="4.6908%" y="319.50"></text></g><g><title>__GI___libc_malloc (346 samples, 0.18%)</title><rect x="4.4413%" y="293" width="0.1754%" height="15" fill="rgb(243,110,44)" fg:x="8759" fg:w="346"/><text x="4.6913%" y="303.50"></text></g><g><title>tcache_get (106 samples, 0.05%)</title><rect x="4.5630%" y="277" width="0.0537%" height="15" fill="rgb(222,74,54)" fg:x="8999" fg:w="106"/><text x="4.8130%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (363 samples, 0.18%)</title><rect x="4.4378%" y="437" width="0.1841%" height="15" fill="rgb(216,99,12)" fg:x="8752" fg:w="363"/><text x="4.6878%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (363 samples, 0.18%)</title><rect x="4.4378%" y="421" width="0.1841%" height="15" fill="rgb(226,22,26)" fg:x="8752" fg:w="363"/><text x="4.6878%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (361 samples, 0.18%)</title><rect x="4.4388%" y="405" width="0.1830%" height="15" fill="rgb(217,163,10)" fg:x="8754" fg:w="361"/><text x="4.6888%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (361 samples, 0.18%)</title><rect x="4.4388%" y="389" width="0.1830%" height="15" fill="rgb(213,25,53)" fg:x="8754" fg:w="361"/><text x="4.6888%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (357 samples, 0.18%)</title><rect x="4.4408%" y="373" width="0.1810%" height="15" fill="rgb(252,105,26)" fg:x="8758" fg:w="357"/><text x="4.6908%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (357 samples, 0.18%)</title><rect x="4.4408%" y="357" width="0.1810%" height="15" fill="rgb(220,39,43)" fg:x="8758" fg:w="357"/><text x="4.6908%" y="367.50"></text></g><g><title>alloc::alloc::alloc (357 samples, 0.18%)</title><rect x="4.4408%" y="341" width="0.1810%" height="15" fill="rgb(229,68,48)" fg:x="8758" fg:w="357"/><text x="4.6908%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::le (67 samples, 0.03%)</title><rect x="4.6264%" y="437" width="0.0340%" height="15" fill="rgb(252,8,32)" fg:x="9124" fg:w="67"/><text x="4.8764%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (106 samples, 0.05%)</title><rect x="4.8186%" y="293" width="0.0537%" height="15" fill="rgb(223,20,43)" fg:x="9503" fg:w="106"/><text x="5.0686%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (106 samples, 0.05%)</title><rect x="4.8186%" y="277" width="0.0537%" height="15" fill="rgb(229,81,49)" fg:x="9503" fg:w="106"/><text x="5.0686%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (72 samples, 0.04%)</title><rect x="4.8358%" y="261" width="0.0365%" height="15" fill="rgb(236,28,36)" fg:x="9537" fg:w="72"/><text x="5.0858%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (72 samples, 0.04%)</title><rect x="4.8358%" y="245" width="0.0365%" height="15" fill="rgb(249,185,26)" fg:x="9537" fg:w="72"/><text x="5.0858%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (72 samples, 0.04%)</title><rect x="4.8358%" y="229" width="0.0365%" height="15" fill="rgb(249,174,33)" fg:x="9537" fg:w="72"/><text x="5.0858%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (326 samples, 0.17%)</title><rect x="4.7491%" y="373" width="0.1653%" height="15" fill="rgb(233,201,37)" fg:x="9366" fg:w="326"/><text x="4.9991%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (323 samples, 0.16%)</title><rect x="4.7506%" y="357" width="0.1638%" height="15" fill="rgb(221,78,26)" fg:x="9369" fg:w="323"/><text x="5.0006%" y="367.50"></text></g><g><title>core::cmp::max_by (323 samples, 0.16%)</title><rect x="4.7506%" y="341" width="0.1638%" height="15" fill="rgb(250,127,30)" fg:x="9369" fg:w="323"/><text x="5.0006%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (189 samples, 0.10%)</title><rect x="4.8186%" y="325" width="0.0958%" height="15" fill="rgb(230,49,44)" fg:x="9503" fg:w="189"/><text x="5.0686%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (189 samples, 0.10%)</title><rect x="4.8186%" y="309" width="0.0958%" height="15" fill="rgb(229,67,23)" fg:x="9503" fg:w="189"/><text x="5.0686%" y="319.50"></text></g><g><title>project1::solver::types::Lit::var (83 samples, 0.04%)</title><rect x="4.8723%" y="293" width="0.0421%" height="15" fill="rgb(249,83,47)" fg:x="9609" fg:w="83"/><text x="5.1223%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (27 samples, 0.01%)</title><rect x="4.9007%" y="277" width="0.0137%" height="15" fill="rgb(215,43,3)" fg:x="9665" fg:w="27"/><text x="5.1507%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (504 samples, 0.26%)</title><rect x="4.6603%" y="389" width="0.2556%" height="15" fill="rgb(238,154,13)" fg:x="9191" fg:w="504"/><text x="4.9103%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (508 samples, 0.26%)</title><rect x="4.6603%" y="437" width="0.2576%" height="15" fill="rgb(219,56,2)" fg:x="9191" fg:w="508"/><text x="4.9103%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (508 samples, 0.26%)</title><rect x="4.6603%" y="421" width="0.2576%" height="15" fill="rgb(233,0,4)" fg:x="9191" fg:w="508"/><text x="4.9103%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (508 samples, 0.26%)</title><rect x="4.6603%" y="405" width="0.2576%" height="15" fill="rgb(235,30,7)" fg:x="9191" fg:w="508"/><text x="4.9103%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.01%)</title><rect x="4.9347%" y="357" width="0.0127%" height="15" fill="rgb(250,79,13)" fg:x="9732" fg:w="25"/><text x="5.1847%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.02%)</title><rect x="4.9347%" y="373" width="0.0157%" height="15" fill="rgb(211,146,34)" fg:x="9732" fg:w="31"/><text x="5.1847%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (48 samples, 0.02%)</title><rect x="4.9286%" y="405" width="0.0243%" height="15" fill="rgb(228,22,38)" fg:x="9720" fg:w="48"/><text x="5.1786%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (48 samples, 0.02%)</title><rect x="4.9286%" y="389" width="0.0243%" height="15" fill="rgb(235,168,5)" fg:x="9720" fg:w="48"/><text x="5.1786%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (121 samples, 0.06%)</title><rect x="4.9286%" y="437" width="0.0614%" height="15" fill="rgb(221,155,16)" fg:x="9720" fg:w="121"/><text x="5.1786%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (121 samples, 0.06%)</title><rect x="4.9286%" y="421" width="0.0614%" height="15" fill="rgb(215,215,53)" fg:x="9720" fg:w="121"/><text x="5.1786%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (73 samples, 0.04%)</title><rect x="4.9529%" y="405" width="0.0370%" height="15" fill="rgb(223,4,10)" fg:x="9768" fg:w="73"/><text x="5.2029%" y="415.50"></text></g><g><title>_int_free (134 samples, 0.07%)</title><rect x="5.0006%" y="309" width="0.0679%" height="15" fill="rgb(234,103,6)" fg:x="9862" fg:w="134"/><text x="5.2506%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (167 samples, 0.08%)</title><rect x="4.9920%" y="389" width="0.0847%" height="15" fill="rgb(227,97,0)" fg:x="9845" fg:w="167"/><text x="5.2420%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (167 samples, 0.08%)</title><rect x="4.9920%" y="373" width="0.0847%" height="15" fill="rgb(234,150,53)" fg:x="9845" fg:w="167"/><text x="5.2420%" y="383.50"></text></g><g><title>__rdl_dealloc (167 samples, 0.08%)</title><rect x="4.9920%" y="357" width="0.0847%" height="15" fill="rgb(228,201,54)" fg:x="9845" fg:w="167"/><text x="5.2420%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (167 samples, 0.08%)</title><rect x="4.9920%" y="341" width="0.0847%" height="15" fill="rgb(222,22,37)" fg:x="9845" fg:w="167"/><text x="5.2420%" y="351.50"></text></g><g><title>__GI___libc_free (167 samples, 0.08%)</title><rect x="4.9920%" y="325" width="0.0847%" height="15" fill="rgb(237,53,32)" fg:x="9845" fg:w="167"/><text x="5.2420%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (172 samples, 0.09%)</title><rect x="4.9904%" y="437" width="0.0872%" height="15" fill="rgb(233,25,53)" fg:x="9842" fg:w="172"/><text x="5.2404%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (172 samples, 0.09%)</title><rect x="4.9904%" y="421" width="0.0872%" height="15" fill="rgb(210,40,34)" fg:x="9842" fg:w="172"/><text x="5.2404%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (172 samples, 0.09%)</title><rect x="4.9904%" y="405" width="0.0872%" height="15" fill="rgb(241,220,44)" fg:x="9842" fg:w="172"/><text x="5.2404%" y="415.50"></text></g><g><title>__memcpy_evex_unaligned_erms (730 samples, 0.37%)</title><rect x="5.1096%" y="405" width="0.3702%" height="15" fill="rgb(235,28,35)" fg:x="10077" fg:w="730"/><text x="5.3596%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (782 samples, 0.40%)</title><rect x="5.0842%" y="437" width="0.3965%" height="15" fill="rgb(210,56,17)" fg:x="10027" fg:w="782"/><text x="5.3342%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (759 samples, 0.38%)</title><rect x="5.0959%" y="421" width="0.3849%" height="15" fill="rgb(224,130,29)" fg:x="10050" fg:w="759"/><text x="5.3459%" y="431.50"></text></g><g><title>log::max_level (274 samples, 0.14%)</title><rect x="5.4818%" y="437" width="0.1389%" height="15" fill="rgb(235,212,8)" fg:x="10811" fg:w="274"/><text x="5.7318%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (274 samples, 0.14%)</title><rect x="5.4818%" y="421" width="0.1389%" height="15" fill="rgb(223,33,50)" fg:x="10811" fg:w="274"/><text x="5.7318%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (274 samples, 0.14%)</title><rect x="5.4818%" y="405" width="0.1389%" height="15" fill="rgb(219,149,13)" fg:x="10811" fg:w="274"/><text x="5.7318%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (104 samples, 0.05%)</title><rect x="5.7176%" y="405" width="0.0527%" height="15" fill="rgb(250,156,29)" fg:x="11276" fg:w="104"/><text x="5.9676%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (35 samples, 0.02%)</title><rect x="5.7525%" y="389" width="0.0177%" height="15" fill="rgb(216,193,19)" fg:x="11345" fg:w="35"/><text x="6.0025%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35 samples, 0.02%)</title><rect x="5.7525%" y="373" width="0.0177%" height="15" fill="rgb(216,135,14)" fg:x="11345" fg:w="35"/><text x="6.0025%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (151 samples, 0.08%)</title><rect x="5.7176%" y="421" width="0.0766%" height="15" fill="rgb(241,47,5)" fg:x="11276" fg:w="151"/><text x="5.9676%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (47 samples, 0.02%)</title><rect x="5.7703%" y="405" width="0.0238%" height="15" fill="rgb(233,42,35)" fg:x="11380" fg:w="47"/><text x="6.0203%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (47 samples, 0.02%)</title><rect x="5.7703%" y="389" width="0.0238%" height="15" fill="rgb(231,13,6)" fg:x="11380" fg:w="47"/><text x="6.0203%" y="399.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (383 samples, 0.19%)</title><rect x="5.6207%" y="437" width="0.1942%" height="15" fill="rgb(207,181,40)" fg:x="11085" fg:w="383"/><text x="5.8707%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (41 samples, 0.02%)</title><rect x="5.7941%" y="421" width="0.0208%" height="15" fill="rgb(254,173,49)" fg:x="11427" fg:w="41"/><text x="6.0441%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.04%)</title><rect x="6.0390%" y="405" width="0.0370%" height="15" fill="rgb(221,1,38)" fg:x="11910" fg:w="73"/><text x="6.2890%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (45 samples, 0.02%)</title><rect x="6.0532%" y="389" width="0.0228%" height="15" fill="rgb(206,124,46)" fg:x="11938" fg:w="45"/><text x="6.3032%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (45 samples, 0.02%)</title><rect x="6.0532%" y="373" width="0.0228%" height="15" fill="rgb(249,21,11)" fg:x="11938" fg:w="45"/><text x="6.3032%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (105 samples, 0.05%)</title><rect x="6.0390%" y="421" width="0.0532%" height="15" fill="rgb(222,201,40)" fg:x="11910" fg:w="105"/><text x="6.2890%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32 samples, 0.02%)</title><rect x="6.0760%" y="405" width="0.0162%" height="15" fill="rgb(235,61,29)" fg:x="11983" fg:w="32"/><text x="6.3260%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32 samples, 0.02%)</title><rect x="6.0760%" y="389" width="0.0162%" height="15" fill="rgb(219,207,3)" fg:x="11983" fg:w="32"/><text x="6.3260%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (29 samples, 0.01%)</title><rect x="6.0923%" y="421" width="0.0147%" height="15" fill="rgb(222,56,46)" fg:x="12015" fg:w="29"/><text x="6.3423%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (29 samples, 0.01%)</title><rect x="6.0923%" y="405" width="0.0147%" height="15" fill="rgb(239,76,54)" fg:x="12015" fg:w="29"/><text x="6.3423%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (25 samples, 0.01%)</title><rect x="6.0943%" y="389" width="0.0127%" height="15" fill="rgb(231,124,27)" fg:x="12019" fg:w="25"/><text x="6.3443%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (25 samples, 0.01%)</title><rect x="6.0943%" y="373" width="0.0127%" height="15" fill="rgb(249,195,6)" fg:x="12019" fg:w="25"/><text x="6.3443%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (44 samples, 0.02%)</title><rect x="6.1070%" y="421" width="0.0223%" height="15" fill="rgb(237,174,47)" fg:x="12044" fg:w="44"/><text x="6.3570%" y="431.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (44 samples, 0.02%)</title><rect x="6.1070%" y="405" width="0.0223%" height="15" fill="rgb(206,201,31)" fg:x="12044" fg:w="44"/><text x="6.3570%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (44 samples, 0.02%)</title><rect x="6.1070%" y="389" width="0.0223%" height="15" fill="rgb(231,57,52)" fg:x="12044" fg:w="44"/><text x="6.3570%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (138 samples, 0.07%)</title><rect x="6.1293%" y="421" width="0.0700%" height="15" fill="rgb(248,177,22)" fg:x="12088" fg:w="138"/><text x="6.3793%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (138 samples, 0.07%)</title><rect x="6.1293%" y="405" width="0.0700%" height="15" fill="rgb(215,211,37)" fg:x="12088" fg:w="138"/><text x="6.3793%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::MulAssign&lt;T&gt;&gt;::mul_assign (38 samples, 0.02%)</title><rect x="6.1993%" y="421" width="0.0193%" height="15" fill="rgb(241,128,51)" fg:x="12226" fg:w="38"/><text x="6.4493%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (38 samples, 0.02%)</title><rect x="6.1993%" y="405" width="0.0193%" height="15" fill="rgb(227,165,31)" fg:x="12226" fg:w="38"/><text x="6.4493%" y="415.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (283 samples, 0.14%)</title><rect x="6.2185%" y="421" width="0.1435%" height="15" fill="rgb(228,167,24)" fg:x="12264" fg:w="283"/><text x="6.4685%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (192 samples, 0.10%)</title><rect x="6.2647%" y="405" width="0.0974%" height="15" fill="rgb(228,143,12)" fg:x="12355" fg:w="192"/><text x="6.5147%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (61 samples, 0.03%)</title><rect x="6.4442%" y="213" width="0.0309%" height="15" fill="rgb(249,149,8)" fg:x="12709" fg:w="61"/><text x="6.6942%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (137 samples, 0.07%)</title><rect x="6.4234%" y="229" width="0.0695%" height="15" fill="rgb(243,35,44)" fg:x="12668" fg:w="137"/><text x="6.6734%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="6.4751%" y="213" width="0.0177%" height="15" fill="rgb(246,89,9)" fg:x="12770" fg:w="35"/><text x="6.7251%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (166 samples, 0.08%)</title><rect x="6.5476%" y="213" width="0.0842%" height="15" fill="rgb(233,213,13)" fg:x="12913" fg:w="166"/><text x="6.7976%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (87 samples, 0.04%)</title><rect x="6.6318%" y="213" width="0.0441%" height="15" fill="rgb(233,141,41)" fg:x="13079" fg:w="87"/><text x="6.8818%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (567 samples, 0.29%)</title><rect x="6.4016%" y="277" width="0.2875%" height="15" fill="rgb(239,167,4)" fg:x="12625" fg:w="567"/><text x="6.6516%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (567 samples, 0.29%)</title><rect x="6.4016%" y="261" width="0.2875%" height="15" fill="rgb(209,217,16)" fg:x="12625" fg:w="567"/><text x="6.6516%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (567 samples, 0.29%)</title><rect x="6.4016%" y="245" width="0.2875%" height="15" fill="rgb(219,88,35)" fg:x="12625" fg:w="567"/><text x="6.6516%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (387 samples, 0.20%)</title><rect x="6.4928%" y="229" width="0.1962%" height="15" fill="rgb(220,193,23)" fg:x="12805" fg:w="387"/><text x="6.7428%" y="239.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (26 samples, 0.01%)</title><rect x="6.6759%" y="213" width="0.0132%" height="15" fill="rgb(230,90,52)" fg:x="13166" fg:w="26"/><text x="6.9259%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (62 samples, 0.03%)</title><rect x="6.6891%" y="277" width="0.0314%" height="15" fill="rgb(252,106,19)" fg:x="13192" fg:w="62"/><text x="6.9391%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (32 samples, 0.02%)</title><rect x="6.7043%" y="261" width="0.0162%" height="15" fill="rgb(206,74,20)" fg:x="13222" fg:w="32"/><text x="6.9543%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (32 samples, 0.02%)</title><rect x="6.7043%" y="245" width="0.0162%" height="15" fill="rgb(230,138,44)" fg:x="13222" fg:w="32"/><text x="6.9543%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (32 samples, 0.02%)</title><rect x="6.7043%" y="229" width="0.0162%" height="15" fill="rgb(235,182,43)" fg:x="13222" fg:w="32"/><text x="6.9543%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (73 samples, 0.04%)</title><rect x="6.7535%" y="149" width="0.0370%" height="15" fill="rgb(242,16,51)" fg:x="13319" fg:w="73"/><text x="7.0035%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (800 samples, 0.41%)</title><rect x="6.4016%" y="309" width="0.4056%" height="15" fill="rgb(248,9,4)" fg:x="12625" fg:w="800"/><text x="6.6516%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (800 samples, 0.41%)</title><rect x="6.4016%" y="293" width="0.4056%" height="15" fill="rgb(210,31,22)" fg:x="12625" fg:w="800"/><text x="6.6516%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (171 samples, 0.09%)</title><rect x="6.7205%" y="277" width="0.0867%" height="15" fill="rgb(239,54,39)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (171 samples, 0.09%)</title><rect x="6.7205%" y="261" width="0.0867%" height="15" fill="rgb(230,99,41)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (171 samples, 0.09%)</title><rect x="6.7205%" y="245" width="0.0867%" height="15" fill="rgb(253,106,12)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (171 samples, 0.09%)</title><rect x="6.7205%" y="229" width="0.0867%" height="15" fill="rgb(213,46,41)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 0.09%)</title><rect x="6.7205%" y="213" width="0.0867%" height="15" fill="rgb(215,133,35)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (171 samples, 0.09%)</title><rect x="6.7205%" y="197" width="0.0867%" height="15" fill="rgb(213,28,5)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (171 samples, 0.09%)</title><rect x="6.7205%" y="181" width="0.0867%" height="15" fill="rgb(215,77,49)" fg:x="13254" fg:w="171"/><text x="6.9705%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (106 samples, 0.05%)</title><rect x="6.7535%" y="165" width="0.0537%" height="15" fill="rgb(248,100,22)" fg:x="13319" fg:w="106"/><text x="7.0035%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (33 samples, 0.02%)</title><rect x="6.7905%" y="149" width="0.0167%" height="15" fill="rgb(208,67,9)" fg:x="13392" fg:w="33"/><text x="7.0405%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.03%)</title><rect x="6.8336%" y="261" width="0.0274%" height="15" fill="rgb(219,133,21)" fg:x="13477" fg:w="54"/><text x="7.0836%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (44 samples, 0.02%)</title><rect x="6.8387%" y="245" width="0.0223%" height="15" fill="rgb(246,46,29)" fg:x="13487" fg:w="44"/><text x="7.0887%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (117 samples, 0.06%)</title><rect x="6.8610%" y="245" width="0.0593%" height="15" fill="rgb(246,185,52)" fg:x="13531" fg:w="117"/><text x="7.1110%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (117 samples, 0.06%)</title><rect x="6.8610%" y="229" width="0.0593%" height="15" fill="rgb(252,136,11)" fg:x="13531" fg:w="117"/><text x="7.1110%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (117 samples, 0.06%)</title><rect x="6.8610%" y="213" width="0.0593%" height="15" fill="rgb(219,138,53)" fg:x="13531" fg:w="117"/><text x="7.1110%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (117 samples, 0.06%)</title><rect x="6.8610%" y="197" width="0.0593%" height="15" fill="rgb(211,51,23)" fg:x="13531" fg:w="117"/><text x="7.1110%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (54 samples, 0.03%)</title><rect x="6.9203%" y="197" width="0.0274%" height="15" fill="rgb(247,221,28)" fg:x="13648" fg:w="54"/><text x="7.1703%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (172 samples, 0.09%)</title><rect x="6.8610%" y="261" width="0.0872%" height="15" fill="rgb(251,222,45)" fg:x="13531" fg:w="172"/><text x="7.1110%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (55 samples, 0.03%)</title><rect x="6.9203%" y="245" width="0.0279%" height="15" fill="rgb(217,162,53)" fg:x="13648" fg:w="55"/><text x="7.1703%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (55 samples, 0.03%)</title><rect x="6.9203%" y="229" width="0.0279%" height="15" fill="rgb(229,93,14)" fg:x="13648" fg:w="55"/><text x="7.1703%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (55 samples, 0.03%)</title><rect x="6.9203%" y="213" width="0.0279%" height="15" fill="rgb(209,67,49)" fg:x="13648" fg:w="55"/><text x="7.1703%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (108 samples, 0.05%)</title><rect x="6.9482%" y="261" width="0.0548%" height="15" fill="rgb(213,87,29)" fg:x="13703" fg:w="108"/><text x="7.1982%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (22 samples, 0.01%)</title><rect x="7.0121%" y="261" width="0.0112%" height="15" fill="rgb(205,151,52)" fg:x="13829" fg:w="22"/><text x="7.2621%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.01%)</title><rect x="7.0121%" y="245" width="0.0112%" height="15" fill="rgb(253,215,39)" fg:x="13829" fg:w="22"/><text x="7.2621%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.01%)</title><rect x="7.0121%" y="229" width="0.0112%" height="15" fill="rgb(221,220,41)" fg:x="13829" fg:w="22"/><text x="7.2621%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,339 samples, 0.68%)</title><rect x="6.4006%" y="325" width="0.6789%" height="15" fill="rgb(218,133,21)" fg:x="12623" fg:w="1339"/><text x="6.6506%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (537 samples, 0.27%)</title><rect x="6.8072%" y="309" width="0.2723%" height="15" fill="rgb(221,193,43)" fg:x="13425" fg:w="537"/><text x="7.0572%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (537 samples, 0.27%)</title><rect x="6.8072%" y="293" width="0.2723%" height="15" fill="rgb(240,128,52)" fg:x="13425" fg:w="537"/><text x="7.0572%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (523 samples, 0.27%)</title><rect x="6.8143%" y="277" width="0.2652%" height="15" fill="rgb(253,114,12)" fg:x="13439" fg:w="523"/><text x="7.0643%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (111 samples, 0.06%)</title><rect x="7.0232%" y="261" width="0.0563%" height="15" fill="rgb(215,223,47)" fg:x="13851" fg:w="111"/><text x="7.2732%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (111 samples, 0.06%)</title><rect x="7.0232%" y="245" width="0.0563%" height="15" fill="rgb(248,225,23)" fg:x="13851" fg:w="111"/><text x="7.2732%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,373 samples, 0.70%)</title><rect x="6.4006%" y="373" width="0.6962%" height="15" fill="rgb(250,108,0)" fg:x="12623" fg:w="1373"/><text x="6.6506%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,373 samples, 0.70%)</title><rect x="6.4006%" y="357" width="0.6962%" height="15" fill="rgb(228,208,7)" fg:x="12623" fg:w="1373"/><text x="6.6506%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,373 samples, 0.70%)</title><rect x="6.4006%" y="341" width="0.6962%" height="15" fill="rgb(244,45,10)" fg:x="12623" fg:w="1373"/><text x="6.6506%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (34 samples, 0.02%)</title><rect x="7.0795%" y="325" width="0.0172%" height="15" fill="rgb(207,125,25)" fg:x="13962" fg:w="34"/><text x="7.3295%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (23 samples, 0.01%)</title><rect x="7.1353%" y="341" width="0.0117%" height="15" fill="rgb(210,195,18)" fg:x="14072" fg:w="23"/><text x="7.3853%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (23 samples, 0.01%)</title><rect x="7.1353%" y="325" width="0.0117%" height="15" fill="rgb(249,80,12)" fg:x="14072" fg:w="23"/><text x="7.3853%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (23 samples, 0.01%)</title><rect x="7.1353%" y="309" width="0.0117%" height="15" fill="rgb(221,65,9)" fg:x="14072" fg:w="23"/><text x="7.3853%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (63 samples, 0.03%)</title><rect x="7.1469%" y="245" width="0.0319%" height="15" fill="rgb(235,49,36)" fg:x="14095" fg:w="63"/><text x="7.3969%" y="255.50"></text></g><g><title>compare::Compare::compares_ge (77 samples, 0.04%)</title><rect x="7.1469%" y="341" width="0.0390%" height="15" fill="rgb(225,32,20)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="351.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (77 samples, 0.04%)</title><rect x="7.1469%" y="325" width="0.0390%" height="15" fill="rgb(215,141,46)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (77 samples, 0.04%)</title><rect x="7.1469%" y="309" width="0.0390%" height="15" fill="rgb(250,160,47)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (77 samples, 0.04%)</title><rect x="7.1469%" y="293" width="0.0390%" height="15" fill="rgb(216,222,40)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="303.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (77 samples, 0.04%)</title><rect x="7.1469%" y="277" width="0.0390%" height="15" fill="rgb(234,217,39)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="287.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (77 samples, 0.04%)</title><rect x="7.1469%" y="261" width="0.0390%" height="15" fill="rgb(207,178,40)" fg:x="14095" fg:w="77"/><text x="7.3969%" y="271.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (102 samples, 0.05%)</title><rect x="7.1860%" y="325" width="0.0517%" height="15" fill="rgb(221,136,13)" fg:x="14172" fg:w="102"/><text x="7.4360%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (102 samples, 0.05%)</title><rect x="7.1860%" y="309" width="0.0517%" height="15" fill="rgb(249,199,10)" fg:x="14172" fg:w="102"/><text x="7.4360%" y="319.50"></text></g><g><title>compare::Compare::compares_le (122 samples, 0.06%)</title><rect x="7.1860%" y="341" width="0.0619%" height="15" fill="rgb(249,222,13)" fg:x="14172" fg:w="122"/><text x="7.4360%" y="351.50"></text></g><g><title>core::cmp::PartialEq::ne (20 samples, 0.01%)</title><rect x="7.2377%" y="325" width="0.0101%" height="15" fill="rgb(244,185,38)" fg:x="14274" fg:w="20"/><text x="7.4877%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (349 samples, 0.18%)</title><rect x="7.2661%" y="309" width="0.1770%" height="15" fill="rgb(236,202,9)" fg:x="14330" fg:w="349"/><text x="7.5161%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (23 samples, 0.01%)</title><rect x="7.4431%" y="309" width="0.0117%" height="15" fill="rgb(250,229,37)" fg:x="14679" fg:w="23"/><text x="7.6931%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (23 samples, 0.01%)</title><rect x="7.4431%" y="293" width="0.0117%" height="15" fill="rgb(206,174,23)" fg:x="14679" fg:w="23"/><text x="7.6931%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.01%)</title><rect x="7.4431%" y="277" width="0.0117%" height="15" fill="rgb(211,33,43)" fg:x="14679" fg:w="23"/><text x="7.6931%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.04%)</title><rect x="7.5019%" y="165" width="0.0380%" height="15" fill="rgb(245,58,50)" fg:x="14795" fg:w="75"/><text x="7.7519%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (177 samples, 0.09%)</title><rect x="7.4852%" y="181" width="0.0897%" height="15" fill="rgb(244,68,36)" fg:x="14762" fg:w="177"/><text x="7.7352%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (69 samples, 0.03%)</title><rect x="7.5399%" y="165" width="0.0350%" height="15" fill="rgb(232,229,15)" fg:x="14870" fg:w="69"/><text x="7.7899%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (179 samples, 0.09%)</title><rect x="7.6251%" y="165" width="0.0908%" height="15" fill="rgb(254,30,23)" fg:x="15038" fg:w="179"/><text x="7.8751%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (52 samples, 0.03%)</title><rect x="7.7159%" y="165" width="0.0264%" height="15" fill="rgb(235,160,14)" fg:x="15217" fg:w="52"/><text x="7.9659%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (559 samples, 0.28%)</title><rect x="7.4593%" y="229" width="0.2834%" height="15" fill="rgb(212,155,44)" fg:x="14711" fg:w="559"/><text x="7.7093%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (559 samples, 0.28%)</title><rect x="7.4593%" y="213" width="0.2834%" height="15" fill="rgb(226,2,50)" fg:x="14711" fg:w="559"/><text x="7.7093%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (559 samples, 0.28%)</title><rect x="7.4593%" y="197" width="0.2834%" height="15" fill="rgb(234,177,6)" fg:x="14711" fg:w="559"/><text x="7.7093%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (331 samples, 0.17%)</title><rect x="7.5749%" y="181" width="0.1678%" height="15" fill="rgb(217,24,9)" fg:x="14939" fg:w="331"/><text x="7.8249%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (71 samples, 0.04%)</title><rect x="7.7427%" y="229" width="0.0360%" height="15" fill="rgb(220,13,46)" fg:x="15270" fg:w="71"/><text x="7.9927%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (39 samples, 0.02%)</title><rect x="7.7590%" y="213" width="0.0198%" height="15" fill="rgb(239,221,27)" fg:x="15302" fg:w="39"/><text x="8.0090%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (39 samples, 0.02%)</title><rect x="7.7590%" y="197" width="0.0198%" height="15" fill="rgb(222,198,25)" fg:x="15302" fg:w="39"/><text x="8.0090%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (39 samples, 0.02%)</title><rect x="7.7590%" y="181" width="0.0198%" height="15" fill="rgb(211,99,13)" fg:x="15302" fg:w="39"/><text x="8.0090%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.01%)</title><rect x="7.8381%" y="101" width="0.0122%" height="15" fill="rgb(232,111,31)" fg:x="15458" fg:w="24"/><text x="8.0881%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (776 samples, 0.39%)</title><rect x="7.4593%" y="261" width="0.3935%" height="15" fill="rgb(245,82,37)" fg:x="14711" fg:w="776"/><text x="7.7093%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (776 samples, 0.39%)</title><rect x="7.4593%" y="245" width="0.3935%" height="15" fill="rgb(227,149,46)" fg:x="14711" fg:w="776"/><text x="7.7093%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (146 samples, 0.07%)</title><rect x="7.7787%" y="229" width="0.0740%" height="15" fill="rgb(218,36,50)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (146 samples, 0.07%)</title><rect x="7.7787%" y="213" width="0.0740%" height="15" fill="rgb(226,80,48)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="223.50"></text></g><g><title>core::hash::Hasher::write_i64 (146 samples, 0.07%)</title><rect x="7.7787%" y="197" width="0.0740%" height="15" fill="rgb(238,224,15)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (146 samples, 0.07%)</title><rect x="7.7787%" y="181" width="0.0740%" height="15" fill="rgb(241,136,10)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (146 samples, 0.07%)</title><rect x="7.7787%" y="165" width="0.0740%" height="15" fill="rgb(208,32,45)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (146 samples, 0.07%)</title><rect x="7.7787%" y="149" width="0.0740%" height="15" fill="rgb(207,135,9)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (146 samples, 0.07%)</title><rect x="7.7787%" y="133" width="0.0740%" height="15" fill="rgb(206,86,44)" fg:x="15341" fg:w="146"/><text x="8.0287%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (75 samples, 0.04%)</title><rect x="7.8147%" y="117" width="0.0380%" height="15" fill="rgb(245,177,15)" fg:x="15412" fg:w="75"/><text x="8.0647%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.03%)</title><rect x="7.8675%" y="213" width="0.0294%" height="15" fill="rgb(206,64,50)" fg:x="15516" fg:w="58"/><text x="8.1175%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (38 samples, 0.02%)</title><rect x="7.8776%" y="197" width="0.0193%" height="15" fill="rgb(234,36,40)" fg:x="15536" fg:w="38"/><text x="8.1276%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (129 samples, 0.07%)</title><rect x="7.8969%" y="197" width="0.0654%" height="15" fill="rgb(213,64,8)" fg:x="15574" fg:w="129"/><text x="8.1469%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (129 samples, 0.07%)</title><rect x="7.8969%" y="181" width="0.0654%" height="15" fill="rgb(210,75,36)" fg:x="15574" fg:w="129"/><text x="8.1469%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.07%)</title><rect x="7.8969%" y="165" width="0.0654%" height="15" fill="rgb(229,88,21)" fg:x="15574" fg:w="129"/><text x="8.1469%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (129 samples, 0.07%)</title><rect x="7.8969%" y="149" width="0.0654%" height="15" fill="rgb(252,204,47)" fg:x="15574" fg:w="129"/><text x="8.1469%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (71 samples, 0.04%)</title><rect x="7.9623%" y="149" width="0.0360%" height="15" fill="rgb(208,77,27)" fg:x="15703" fg:w="71"/><text x="8.2123%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (206 samples, 0.10%)</title><rect x="7.8969%" y="213" width="0.1045%" height="15" fill="rgb(221,76,26)" fg:x="15574" fg:w="206"/><text x="8.1469%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (77 samples, 0.04%)</title><rect x="7.9623%" y="197" width="0.0390%" height="15" fill="rgb(225,139,18)" fg:x="15703" fg:w="77"/><text x="8.2123%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (77 samples, 0.04%)</title><rect x="7.9623%" y="181" width="0.0390%" height="15" fill="rgb(230,137,11)" fg:x="15703" fg:w="77"/><text x="8.2123%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (77 samples, 0.04%)</title><rect x="7.9623%" y="165" width="0.0390%" height="15" fill="rgb(212,28,1)" fg:x="15703" fg:w="77"/><text x="8.2123%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (89 samples, 0.05%)</title><rect x="8.0013%" y="213" width="0.0451%" height="15" fill="rgb(248,164,17)" fg:x="15780" fg:w="89"/><text x="8.2513%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (40 samples, 0.02%)</title><rect x="8.0536%" y="213" width="0.0203%" height="15" fill="rgb(222,171,42)" fg:x="15883" fg:w="40"/><text x="8.3036%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (40 samples, 0.02%)</title><rect x="8.0536%" y="197" width="0.0203%" height="15" fill="rgb(243,84,45)" fg:x="15883" fg:w="40"/><text x="8.3036%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.02%)</title><rect x="8.0536%" y="181" width="0.0203%" height="15" fill="rgb(252,49,23)" fg:x="15883" fg:w="40"/><text x="8.3036%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (544 samples, 0.28%)</title><rect x="7.8528%" y="229" width="0.2758%" height="15" fill="rgb(215,19,7)" fg:x="15487" fg:w="544"/><text x="8.1028%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (108 samples, 0.05%)</title><rect x="8.0738%" y="213" width="0.0548%" height="15" fill="rgb(238,81,41)" fg:x="15923" fg:w="108"/><text x="8.3238%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (108 samples, 0.05%)</title><rect x="8.0738%" y="197" width="0.0548%" height="15" fill="rgb(210,199,37)" fg:x="15923" fg:w="108"/><text x="8.3238%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (552 samples, 0.28%)</title><rect x="7.8528%" y="245" width="0.2799%" height="15" fill="rgb(244,192,49)" fg:x="15487" fg:w="552"/><text x="8.1028%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,744 samples, 0.88%)</title><rect x="7.2499%" y="341" width="0.8843%" height="15" fill="rgb(226,211,11)" fg:x="14298" fg:w="1744"/><text x="7.4999%" y="351.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,744 samples, 0.88%)</title><rect x="7.2499%" y="325" width="0.8843%" height="15" fill="rgb(236,162,54)" fg:x="14298" fg:w="1744"/><text x="7.4999%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,340 samples, 0.68%)</title><rect x="7.4547%" y="309" width="0.6795%" height="15" fill="rgb(220,229,9)" fg:x="14702" fg:w="1340"/><text x="7.7047%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,340 samples, 0.68%)</title><rect x="7.4547%" y="293" width="0.6795%" height="15" fill="rgb(250,87,22)" fg:x="14702" fg:w="1340"/><text x="7.7047%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,340 samples, 0.68%)</title><rect x="7.4547%" y="277" width="0.6795%" height="15" fill="rgb(239,43,17)" fg:x="14702" fg:w="1340"/><text x="7.7047%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (555 samples, 0.28%)</title><rect x="7.8528%" y="261" width="0.2814%" height="15" fill="rgb(231,177,25)" fg:x="15487" fg:w="555"/><text x="8.1028%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (2,127 samples, 1.08%)</title><rect x="7.1023%" y="357" width="1.0785%" height="15" fill="rgb(219,179,1)" fg:x="14007" fg:w="2127"/><text x="7.3523%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (92 samples, 0.05%)</title><rect x="8.1342%" y="341" width="0.0466%" height="15" fill="rgb(238,219,53)" fg:x="16042" fg:w="92"/><text x="8.3842%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (2,170 samples, 1.10%)</title><rect x="7.0973%" y="373" width="1.1003%" height="15" fill="rgb(232,167,36)" fg:x="13997" fg:w="2170"/><text x="7.3473%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (33 samples, 0.02%)</title><rect x="8.1808%" y="357" width="0.0167%" height="15" fill="rgb(244,19,51)" fg:x="16134" fg:w="33"/><text x="8.4308%" y="367.50"></text></g><g><title>compare::Compare::compares_le (242 samples, 0.12%)</title><rect x="8.2432%" y="357" width="0.1227%" height="15" fill="rgb(224,6,22)" fg:x="16257" fg:w="242"/><text x="8.4932%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (242 samples, 0.12%)</title><rect x="8.2432%" y="341" width="0.1227%" height="15" fill="rgb(224,145,5)" fg:x="16257" fg:w="242"/><text x="8.4932%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (242 samples, 0.12%)</title><rect x="8.2432%" y="325" width="0.1227%" height="15" fill="rgb(234,130,49)" fg:x="16257" fg:w="242"/><text x="8.4932%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (50 samples, 0.03%)</title><rect x="8.3406%" y="309" width="0.0254%" height="15" fill="rgb(254,6,2)" fg:x="16449" fg:w="50"/><text x="8.5906%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (50 samples, 0.03%)</title><rect x="8.3406%" y="293" width="0.0254%" height="15" fill="rgb(208,96,46)" fg:x="16449" fg:w="50"/><text x="8.5906%" y="303.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (50 samples, 0.03%)</title><rect x="8.3406%" y="277" width="0.0254%" height="15" fill="rgb(239,3,39)" fg:x="16449" fg:w="50"/><text x="8.5906%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (50 samples, 0.03%)</title><rect x="8.3406%" y="261" width="0.0254%" height="15" fill="rgb(233,210,1)" fg:x="16449" fg:w="50"/><text x="8.5906%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (207 samples, 0.10%)</title><rect x="8.3730%" y="325" width="0.1050%" height="15" fill="rgb(244,137,37)" fg:x="16513" fg:w="207"/><text x="8.6230%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.01%)</title><rect x="8.5383%" y="181" width="0.0137%" height="15" fill="rgb(240,136,2)" fg:x="16839" fg:w="27"/><text x="8.7883%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (28 samples, 0.01%)</title><rect x="8.5520%" y="181" width="0.0142%" height="15" fill="rgb(239,18,37)" fg:x="16866" fg:w="28"/><text x="8.8020%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (86 samples, 0.04%)</title><rect x="8.5236%" y="197" width="0.0436%" height="15" fill="rgb(218,185,22)" fg:x="16810" fg:w="86"/><text x="8.7736%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (182 samples, 0.09%)</title><rect x="8.6144%" y="181" width="0.0923%" height="15" fill="rgb(225,218,4)" fg:x="16989" fg:w="182"/><text x="8.8644%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (334 samples, 0.17%)</title><rect x="8.5672%" y="197" width="0.1694%" height="15" fill="rgb(230,182,32)" fg:x="16896" fg:w="334"/><text x="8.8172%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (59 samples, 0.03%)</title><rect x="8.7067%" y="181" width="0.0299%" height="15" fill="rgb(242,56,43)" fg:x="17171" fg:w="59"/><text x="8.9567%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (497 samples, 0.25%)</title><rect x="8.4856%" y="245" width="0.2520%" height="15" fill="rgb(233,99,24)" fg:x="16735" fg:w="497"/><text x="8.7356%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (497 samples, 0.25%)</title><rect x="8.4856%" y="229" width="0.2520%" height="15" fill="rgb(234,209,42)" fg:x="16735" fg:w="497"/><text x="8.7356%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (497 samples, 0.25%)</title><rect x="8.4856%" y="213" width="0.2520%" height="15" fill="rgb(227,7,12)" fg:x="16735" fg:w="497"/><text x="8.7356%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (40 samples, 0.02%)</title><rect x="8.7376%" y="245" width="0.0203%" height="15" fill="rgb(245,203,43)" fg:x="17232" fg:w="40"/><text x="8.9876%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (65 samples, 0.03%)</title><rect x="8.8233%" y="117" width="0.0330%" height="15" fill="rgb(238,205,33)" fg:x="17401" fg:w="65"/><text x="9.0733%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (743 samples, 0.38%)</title><rect x="8.4856%" y="277" width="0.3767%" height="15" fill="rgb(231,56,7)" fg:x="16735" fg:w="743"/><text x="8.7356%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (743 samples, 0.38%)</title><rect x="8.4856%" y="261" width="0.3767%" height="15" fill="rgb(244,186,29)" fg:x="16735" fg:w="743"/><text x="8.7356%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (206 samples, 0.10%)</title><rect x="8.7579%" y="245" width="0.1045%" height="15" fill="rgb(234,111,31)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (206 samples, 0.10%)</title><rect x="8.7579%" y="229" width="0.1045%" height="15" fill="rgb(241,149,10)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (206 samples, 0.10%)</title><rect x="8.7579%" y="213" width="0.1045%" height="15" fill="rgb(249,206,44)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (206 samples, 0.10%)</title><rect x="8.7579%" y="197" width="0.1045%" height="15" fill="rgb(251,153,30)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (206 samples, 0.10%)</title><rect x="8.7579%" y="181" width="0.1045%" height="15" fill="rgb(239,152,38)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (206 samples, 0.10%)</title><rect x="8.7579%" y="165" width="0.1045%" height="15" fill="rgb(249,139,47)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (206 samples, 0.10%)</title><rect x="8.7579%" y="149" width="0.1045%" height="15" fill="rgb(244,64,35)" fg:x="17272" fg:w="206"/><text x="9.0079%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (110 samples, 0.06%)</title><rect x="8.8065%" y="133" width="0.0558%" height="15" fill="rgb(216,46,15)" fg:x="17368" fg:w="110"/><text x="9.0565%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.03%)</title><rect x="8.8770%" y="229" width="0.0269%" height="15" fill="rgb(250,74,19)" fg:x="17507" fg:w="53"/><text x="9.1270%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (36 samples, 0.02%)</title><rect x="8.8856%" y="213" width="0.0183%" height="15" fill="rgb(249,42,33)" fg:x="17524" fg:w="36"/><text x="9.1356%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (153 samples, 0.08%)</title><rect x="8.9039%" y="213" width="0.0776%" height="15" fill="rgb(242,149,17)" fg:x="17560" fg:w="153"/><text x="9.1539%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (153 samples, 0.08%)</title><rect x="8.9039%" y="197" width="0.0776%" height="15" fill="rgb(244,29,21)" fg:x="17560" fg:w="153"/><text x="9.1539%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (153 samples, 0.08%)</title><rect x="8.9039%" y="181" width="0.0776%" height="15" fill="rgb(220,130,37)" fg:x="17560" fg:w="153"/><text x="9.1539%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (153 samples, 0.08%)</title><rect x="8.9039%" y="165" width="0.0776%" height="15" fill="rgb(211,67,2)" fg:x="17560" fg:w="153"/><text x="9.1539%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (67 samples, 0.03%)</title><rect x="8.9815%" y="165" width="0.0340%" height="15" fill="rgb(235,68,52)" fg:x="17713" fg:w="67"/><text x="9.2315%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (225 samples, 0.11%)</title><rect x="8.9039%" y="229" width="0.1141%" height="15" fill="rgb(246,142,3)" fg:x="17560" fg:w="225"/><text x="9.1539%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (72 samples, 0.04%)</title><rect x="8.9815%" y="213" width="0.0365%" height="15" fill="rgb(241,25,7)" fg:x="17713" fg:w="72"/><text x="9.2315%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (72 samples, 0.04%)</title><rect x="8.9815%" y="197" width="0.0365%" height="15" fill="rgb(242,119,39)" fg:x="17713" fg:w="72"/><text x="9.2315%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (72 samples, 0.04%)</title><rect x="8.9815%" y="181" width="0.0365%" height="15" fill="rgb(241,98,45)" fg:x="17713" fg:w="72"/><text x="9.2315%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.02%)</title><rect x="9.0180%" y="229" width="0.0167%" height="15" fill="rgb(254,28,30)" fg:x="17785" fg:w="33"/><text x="9.2680%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (22 samples, 0.01%)</title><rect x="9.0347%" y="229" width="0.0112%" height="15" fill="rgb(241,142,54)" fg:x="17818" fg:w="22"/><text x="9.2847%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.01%)</title><rect x="9.0347%" y="213" width="0.0112%" height="15" fill="rgb(222,85,15)" fg:x="17818" fg:w="22"/><text x="9.2847%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.01%)</title><rect x="9.0347%" y="197" width="0.0112%" height="15" fill="rgb(210,85,47)" fg:x="17818" fg:w="22"/><text x="9.2847%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (82 samples, 0.04%)</title><rect x="9.0459%" y="229" width="0.0416%" height="15" fill="rgb(224,206,25)" fg:x="17840" fg:w="82"/><text x="9.2959%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (82 samples, 0.04%)</title><rect x="9.0459%" y="213" width="0.0416%" height="15" fill="rgb(243,201,19)" fg:x="17840" fg:w="82"/><text x="9.2959%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (491 samples, 0.25%)</title><rect x="8.8623%" y="245" width="0.2490%" height="15" fill="rgb(236,59,4)" fg:x="17478" fg:w="491"/><text x="9.1123%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (47 samples, 0.02%)</title><rect x="9.0875%" y="229" width="0.0238%" height="15" fill="rgb(254,179,45)" fg:x="17922" fg:w="47"/><text x="9.3375%" y="239.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,497 samples, 0.76%)</title><rect x="8.3659%" y="341" width="0.7591%" height="15" fill="rgb(226,14,10)" fg:x="16499" fg:w="1497"/><text x="8.6159%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,265 samples, 0.64%)</title><rect x="8.4835%" y="325" width="0.6414%" height="15" fill="rgb(244,27,41)" fg:x="16731" fg:w="1265"/><text x="8.7335%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,265 samples, 0.64%)</title><rect x="8.4835%" y="309" width="0.6414%" height="15" fill="rgb(235,35,32)" fg:x="16731" fg:w="1265"/><text x="8.7335%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,265 samples, 0.64%)</title><rect x="8.4835%" y="293" width="0.6414%" height="15" fill="rgb(218,68,31)" fg:x="16731" fg:w="1265"/><text x="8.7335%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (518 samples, 0.26%)</title><rect x="8.8623%" y="277" width="0.2627%" height="15" fill="rgb(207,120,37)" fg:x="17478" fg:w="518"/><text x="9.1123%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (518 samples, 0.26%)</title><rect x="8.8623%" y="261" width="0.2627%" height="15" fill="rgb(227,98,0)" fg:x="17478" fg:w="518"/><text x="9.1123%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (27 samples, 0.01%)</title><rect x="9.1113%" y="245" width="0.0137%" height="15" fill="rgb(207,7,3)" fg:x="17969" fg:w="27"/><text x="9.3613%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,510 samples, 0.77%)</title><rect x="8.3659%" y="357" width="0.7657%" height="15" fill="rgb(206,98,19)" fg:x="16499" fg:w="1510"/><text x="8.6159%" y="367.50"></text></g><g><title>core::ptr::read (107 samples, 0.05%)</title><rect x="9.1716%" y="341" width="0.0543%" height="15" fill="rgb(217,5,26)" fg:x="18088" fg:w="107"/><text x="9.4216%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2,049 samples, 1.04%)</title><rect x="8.1976%" y="373" width="1.0390%" height="15" fill="rgb(235,190,38)" fg:x="16167" fg:w="2049"/><text x="8.4476%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (207 samples, 0.10%)</title><rect x="9.1316%" y="357" width="0.1050%" height="15" fill="rgb(247,86,24)" fg:x="18009" fg:w="207"/><text x="9.3816%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (21 samples, 0.01%)</title><rect x="9.2259%" y="341" width="0.0106%" height="15" fill="rgb(205,101,16)" fg:x="18195" fg:w="21"/><text x="9.4759%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (21 samples, 0.01%)</title><rect x="9.2259%" y="325" width="0.0106%" height="15" fill="rgb(246,168,33)" fg:x="18195" fg:w="21"/><text x="9.4759%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (21 samples, 0.01%)</title><rect x="9.2259%" y="309" width="0.0106%" height="15" fill="rgb(231,114,1)" fg:x="18195" fg:w="21"/><text x="9.4759%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (5,694 samples, 2.89%)</title><rect x="6.3818%" y="389" width="2.8872%" height="15" fill="rgb(207,184,53)" fg:x="12586" fg:w="5694"/><text x="6.6318%" y="399.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (64 samples, 0.03%)</title><rect x="9.2365%" y="373" width="0.0325%" height="15" fill="rgb(224,95,51)" fg:x="18216" fg:w="64"/><text x="9.4865%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (5,735 samples, 2.91%)</title><rect x="6.3620%" y="421" width="2.9080%" height="15" fill="rgb(212,188,45)" fg:x="12547" fg:w="5735"/><text x="6.6120%" y="431.50">co..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (5,735 samples, 2.91%)</title><rect x="6.3620%" y="405" width="2.9080%" height="15" fill="rgb(223,154,38)" fg:x="12547" fg:w="5735"/><text x="6.6120%" y="415.50">&lt;m..</text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (44 samples, 0.02%)</title><rect x="9.2700%" y="405" width="0.0223%" height="15" fill="rgb(251,22,52)" fg:x="18282" fg:w="44"/><text x="9.5200%" y="415.50"></text></g><g><title>log::__private_api::log (103 samples, 0.05%)</title><rect x="9.2700%" y="421" width="0.0522%" height="15" fill="rgb(229,209,22)" fg:x="18282" fg:w="103"/><text x="9.5200%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (59 samples, 0.03%)</title><rect x="9.2923%" y="405" width="0.0299%" height="15" fill="rgb(234,138,34)" fg:x="18326" fg:w="59"/><text x="9.5423%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (164 samples, 0.08%)</title><rect x="9.4581%" y="261" width="0.0832%" height="15" fill="rgb(212,95,11)" fg:x="18653" fg:w="164"/><text x="9.7081%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (333 samples, 0.17%)</title><rect x="9.4216%" y="277" width="0.1688%" height="15" fill="rgb(240,179,47)" fg:x="18581" fg:w="333"/><text x="9.6716%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (97 samples, 0.05%)</title><rect x="9.5413%" y="261" width="0.0492%" height="15" fill="rgb(240,163,11)" fg:x="18817" fg:w="97"/><text x="9.7913%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (448 samples, 0.23%)</title><rect x="9.7137%" y="261" width="0.2272%" height="15" fill="rgb(236,37,12)" fg:x="19157" fg:w="448"/><text x="9.9637%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (912 samples, 0.46%)</title><rect x="9.5905%" y="277" width="0.4624%" height="15" fill="rgb(232,164,16)" fg:x="18914" fg:w="912"/><text x="9.8405%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (221 samples, 0.11%)</title><rect x="9.9408%" y="261" width="0.1121%" height="15" fill="rgb(244,205,15)" fg:x="19605" fg:w="221"/><text x="10.1908%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,384 samples, 0.70%)</title><rect x="9.3521%" y="325" width="0.7018%" height="15" fill="rgb(223,117,47)" fg:x="18444" fg:w="1384"/><text x="9.6021%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,384 samples, 0.70%)</title><rect x="9.3521%" y="309" width="0.7018%" height="15" fill="rgb(244,107,35)" fg:x="18444" fg:w="1384"/><text x="9.6021%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,384 samples, 0.70%)</title><rect x="9.3521%" y="293" width="0.7018%" height="15" fill="rgb(205,140,8)" fg:x="18444" fg:w="1384"/><text x="9.6021%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (238 samples, 0.12%)</title><rect x="10.0539%" y="325" width="0.1207%" height="15" fill="rgb(228,84,46)" fg:x="19828" fg:w="238"/><text x="10.3039%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (178 samples, 0.09%)</title><rect x="10.0843%" y="309" width="0.0903%" height="15" fill="rgb(254,188,9)" fg:x="19888" fg:w="178"/><text x="10.3343%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (178 samples, 0.09%)</title><rect x="10.0843%" y="293" width="0.0903%" height="15" fill="rgb(206,112,54)" fg:x="19888" fg:w="178"/><text x="10.3343%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (178 samples, 0.09%)</title><rect x="10.0843%" y="277" width="0.0903%" height="15" fill="rgb(216,84,49)" fg:x="19888" fg:w="178"/><text x="10.3343%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (123 samples, 0.06%)</title><rect x="10.3024%" y="197" width="0.0624%" height="15" fill="rgb(214,194,35)" fg:x="20318" fg:w="123"/><text x="10.5524%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (2,069 samples, 1.05%)</title><rect x="9.3521%" y="357" width="1.0491%" height="15" fill="rgb(249,28,3)" fg:x="18444" fg:w="2069"/><text x="9.6021%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,069 samples, 1.05%)</title><rect x="9.3521%" y="341" width="1.0491%" height="15" fill="rgb(222,56,52)" fg:x="18444" fg:w="2069"/><text x="9.6021%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (447 samples, 0.23%)</title><rect x="10.1746%" y="325" width="0.2267%" height="15" fill="rgb(245,217,50)" fg:x="20066" fg:w="447"/><text x="10.4246%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (447 samples, 0.23%)</title><rect x="10.1746%" y="309" width="0.2267%" height="15" fill="rgb(213,201,24)" fg:x="20066" fg:w="447"/><text x="10.4246%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (414 samples, 0.21%)</title><rect x="10.1913%" y="293" width="0.2099%" height="15" fill="rgb(248,116,28)" fg:x="20099" fg:w="414"/><text x="10.4413%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (414 samples, 0.21%)</title><rect x="10.1913%" y="277" width="0.2099%" height="15" fill="rgb(219,72,43)" fg:x="20099" fg:w="414"/><text x="10.4413%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (414 samples, 0.21%)</title><rect x="10.1913%" y="261" width="0.2099%" height="15" fill="rgb(209,138,14)" fg:x="20099" fg:w="414"/><text x="10.4413%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (414 samples, 0.21%)</title><rect x="10.1913%" y="245" width="0.2099%" height="15" fill="rgb(222,18,33)" fg:x="20099" fg:w="414"/><text x="10.4413%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (414 samples, 0.21%)</title><rect x="10.1913%" y="229" width="0.2099%" height="15" fill="rgb(213,199,7)" fg:x="20099" fg:w="414"/><text x="10.4413%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (301 samples, 0.15%)</title><rect x="10.2486%" y="213" width="0.1526%" height="15" fill="rgb(250,110,10)" fg:x="20212" fg:w="301"/><text x="10.4986%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (72 samples, 0.04%)</title><rect x="10.3647%" y="197" width="0.0365%" height="15" fill="rgb(248,123,6)" fg:x="20441" fg:w="72"/><text x="10.6147%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (372 samples, 0.19%)</title><rect x="10.5285%" y="309" width="0.1886%" height="15" fill="rgb(206,91,31)" fg:x="20764" fg:w="372"/><text x="10.7785%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (370 samples, 0.19%)</title><rect x="10.5295%" y="293" width="0.1876%" height="15" fill="rgb(211,154,13)" fg:x="20766" fg:w="370"/><text x="10.7795%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (471 samples, 0.24%)</title><rect x="10.7217%" y="309" width="0.2388%" height="15" fill="rgb(225,148,7)" fg:x="21145" fg:w="471"/><text x="10.9717%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (471 samples, 0.24%)</title><rect x="10.7217%" y="293" width="0.2388%" height="15" fill="rgb(220,160,43)" fg:x="21145" fg:w="471"/><text x="10.9717%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (471 samples, 0.24%)</title><rect x="10.7217%" y="277" width="0.2388%" height="15" fill="rgb(213,52,39)" fg:x="21145" fg:w="471"/><text x="10.9717%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (471 samples, 0.24%)</title><rect x="10.7217%" y="261" width="0.2388%" height="15" fill="rgb(243,137,7)" fg:x="21145" fg:w="471"/><text x="10.9717%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (471 samples, 0.24%)</title><rect x="10.7217%" y="245" width="0.2388%" height="15" fill="rgb(230,79,13)" fg:x="21145" fg:w="471"/><text x="10.9717%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (310 samples, 0.16%)</title><rect x="10.9605%" y="309" width="0.1572%" height="15" fill="rgb(247,105,23)" fg:x="21616" fg:w="310"/><text x="11.2105%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (78 samples, 0.04%)</title><rect x="11.1228%" y="309" width="0.0396%" height="15" fill="rgb(223,179,41)" fg:x="21936" fg:w="78"/><text x="11.3728%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (255 samples, 0.13%)</title><rect x="11.1623%" y="309" width="0.1293%" height="15" fill="rgb(218,9,34)" fg:x="22014" fg:w="255"/><text x="11.4123%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (255 samples, 0.13%)</title><rect x="11.1623%" y="293" width="0.1293%" height="15" fill="rgb(222,106,8)" fg:x="22014" fg:w="255"/><text x="11.4123%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (255 samples, 0.13%)</title><rect x="11.1623%" y="277" width="0.1293%" height="15" fill="rgb(211,220,0)" fg:x="22014" fg:w="255"/><text x="11.4123%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (334 samples, 0.17%)</title><rect x="11.2916%" y="309" width="0.1694%" height="15" fill="rgb(229,52,16)" fg:x="22269" fg:w="334"/><text x="11.5416%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (334 samples, 0.17%)</title><rect x="11.2916%" y="293" width="0.1694%" height="15" fill="rgb(212,155,18)" fg:x="22269" fg:w="334"/><text x="11.5416%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (450 samples, 0.23%)</title><rect x="11.4610%" y="309" width="0.2282%" height="15" fill="rgb(242,21,14)" fg:x="22603" fg:w="450"/><text x="11.7110%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (450 samples, 0.23%)</title><rect x="11.4610%" y="293" width="0.2282%" height="15" fill="rgb(222,19,48)" fg:x="22603" fg:w="450"/><text x="11.7110%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (450 samples, 0.23%)</title><rect x="11.4610%" y="277" width="0.2282%" height="15" fill="rgb(232,45,27)" fg:x="22603" fg:w="450"/><text x="11.7110%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,567 samples, 1.30%)</title><rect x="10.4012%" y="325" width="1.3016%" height="15" fill="rgb(249,103,42)" fg:x="20513" fg:w="2567"/><text x="10.6512%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (27 samples, 0.01%)</title><rect x="11.6892%" y="309" width="0.0137%" height="15" fill="rgb(246,81,33)" fg:x="23053" fg:w="27"/><text x="11.9392%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (4,765 samples, 2.42%)</title><rect x="9.3222%" y="421" width="2.4161%" height="15" fill="rgb(252,33,42)" fg:x="18385" fg:w="4765"/><text x="9.5722%" y="431.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4,765 samples, 2.42%)</title><rect x="9.3222%" y="405" width="2.4161%" height="15" fill="rgb(209,212,41)" fg:x="18385" fg:w="4765"/><text x="9.5722%" y="415.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4,765 samples, 2.42%)</title><rect x="9.3222%" y="389" width="2.4161%" height="15" fill="rgb(207,154,6)" fg:x="18385" fg:w="4765"/><text x="9.5722%" y="399.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4,765 samples, 2.42%)</title><rect x="9.3222%" y="373" width="2.4161%" height="15" fill="rgb(223,64,47)" fg:x="18385" fg:w="4765"/><text x="9.5722%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,637 samples, 1.34%)</title><rect x="10.4012%" y="357" width="1.3371%" height="15" fill="rgb(211,161,38)" fg:x="20513" fg:w="2637"/><text x="10.6512%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,637 samples, 1.34%)</title><rect x="10.4012%" y="341" width="1.3371%" height="15" fill="rgb(219,138,40)" fg:x="20513" fg:w="2637"/><text x="10.6512%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (70 samples, 0.04%)</title><rect x="11.7028%" y="325" width="0.0355%" height="15" fill="rgb(241,228,46)" fg:x="23080" fg:w="70"/><text x="11.9528%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (11,728 samples, 5.95%)</title><rect x="5.8149%" y="437" width="5.9467%" height="15" fill="rgb(223,209,38)" fg:x="11468" fg:w="11728"/><text x="6.0649%" y="447.50">project1..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (45 samples, 0.02%)</title><rect x="11.7388%" y="421" width="0.0228%" height="15" fill="rgb(236,164,45)" fg:x="23151" fg:w="45"/><text x="11.9888%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (232 samples, 0.12%)</title><rect x="11.9807%" y="341" width="0.1176%" height="15" fill="rgb(231,15,5)" fg:x="23628" fg:w="232"/><text x="12.2307%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (232 samples, 0.12%)</title><rect x="11.9807%" y="325" width="0.1176%" height="15" fill="rgb(252,35,15)" fg:x="23628" fg:w="232"/><text x="12.2307%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (124 samples, 0.06%)</title><rect x="12.6242%" y="309" width="0.0629%" height="15" fill="rgb(248,181,18)" fg:x="24897" fg:w="124"/><text x="12.8742%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (65 samples, 0.03%)</title><rect x="12.6870%" y="293" width="0.0330%" height="15" fill="rgb(233,39,42)" fg:x="25021" fg:w="65"/><text x="12.9370%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (271 samples, 0.14%)</title><rect x="12.6242%" y="325" width="0.1374%" height="15" fill="rgb(238,110,33)" fg:x="24897" fg:w="271"/><text x="12.8742%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (147 samples, 0.07%)</title><rect x="12.6870%" y="309" width="0.0745%" height="15" fill="rgb(233,195,10)" fg:x="25021" fg:w="147"/><text x="12.9370%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (82 samples, 0.04%)</title><rect x="12.7200%" y="293" width="0.0416%" height="15" fill="rgb(254,105,3)" fg:x="25086" fg:w="82"/><text x="12.9700%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (237 samples, 0.12%)</title><rect x="12.7631%" y="325" width="0.1202%" height="15" fill="rgb(221,225,9)" fg:x="25171" fg:w="237"/><text x="13.0131%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (237 samples, 0.12%)</title><rect x="12.7631%" y="309" width="0.1202%" height="15" fill="rgb(224,227,45)" fg:x="25171" fg:w="237"/><text x="13.0131%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (640 samples, 0.32%)</title><rect x="12.8833%" y="293" width="0.3245%" height="15" fill="rgb(229,198,43)" fg:x="25408" fg:w="640"/><text x="13.1333%" y="303.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (639 samples, 0.32%)</title><rect x="12.8838%" y="277" width="0.3240%" height="15" fill="rgb(206,209,35)" fg:x="25409" fg:w="639"/><text x="13.1338%" y="287.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (676 samples, 0.34%)</title><rect x="12.8833%" y="325" width="0.3428%" height="15" fill="rgb(245,195,53)" fg:x="25408" fg:w="676"/><text x="13.1333%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (676 samples, 0.34%)</title><rect x="12.8833%" y="309" width="0.3428%" height="15" fill="rgb(240,92,26)" fg:x="25408" fg:w="676"/><text x="13.1333%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (36 samples, 0.02%)</title><rect x="13.2078%" y="293" width="0.0183%" height="15" fill="rgb(207,40,23)" fg:x="26048" fg:w="36"/><text x="13.4578%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (36 samples, 0.02%)</title><rect x="13.2078%" y="277" width="0.0183%" height="15" fill="rgb(223,111,35)" fg:x="26048" fg:w="36"/><text x="13.4578%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (33 samples, 0.02%)</title><rect x="13.2260%" y="325" width="0.0167%" height="15" fill="rgb(229,147,28)" fg:x="26084" fg:w="33"/><text x="13.4760%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (92 samples, 0.05%)</title><rect x="13.2428%" y="325" width="0.0466%" height="15" fill="rgb(211,29,28)" fg:x="26117" fg:w="92"/><text x="13.4928%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (24 samples, 0.01%)</title><rect x="13.3026%" y="309" width="0.0122%" height="15" fill="rgb(228,72,33)" fg:x="26235" fg:w="24"/><text x="13.5526%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (24 samples, 0.01%)</title><rect x="13.3026%" y="293" width="0.0122%" height="15" fill="rgb(205,214,31)" fg:x="26235" fg:w="24"/><text x="13.5526%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (112 samples, 0.06%)</title><rect x="13.2894%" y="325" width="0.0568%" height="15" fill="rgb(224,111,15)" fg:x="26209" fg:w="112"/><text x="13.5394%" y="335.50"></text></g><g><title>core::ptr::read (62 samples, 0.03%)</title><rect x="13.3148%" y="309" width="0.0314%" height="15" fill="rgb(253,21,26)" fg:x="26259" fg:w="62"/><text x="13.5648%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (28 samples, 0.01%)</title><rect x="13.3959%" y="309" width="0.0142%" height="15" fill="rgb(245,139,43)" fg:x="26419" fg:w="28"/><text x="13.6459%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.01%)</title><rect x="13.3959%" y="293" width="0.0142%" height="15" fill="rgb(252,170,7)" fg:x="26419" fg:w="28"/><text x="13.6459%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (208 samples, 0.11%)</title><rect x="13.3462%" y="325" width="0.1055%" height="15" fill="rgb(231,118,14)" fg:x="26321" fg:w="208"/><text x="13.5962%" y="335.50"></text></g><g><title>core::ptr::write (82 samples, 0.04%)</title><rect x="13.4101%" y="309" width="0.0416%" height="15" fill="rgb(238,83,0)" fg:x="26447" fg:w="82"/><text x="13.6601%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (35 samples, 0.02%)</title><rect x="13.4517%" y="325" width="0.0177%" height="15" fill="rgb(221,39,39)" fg:x="26529" fg:w="35"/><text x="13.7017%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (337 samples, 0.17%)</title><rect x="13.4725%" y="325" width="0.1709%" height="15" fill="rgb(222,119,46)" fg:x="26570" fg:w="337"/><text x="13.7225%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.01%)</title><rect x="13.6439%" y="277" width="0.0112%" height="15" fill="rgb(222,165,49)" fg:x="26908" fg:w="22"/><text x="13.8939%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (110 samples, 0.06%)</title><rect x="13.6439%" y="325" width="0.0558%" height="15" fill="rgb(219,113,52)" fg:x="26908" fg:w="110"/><text x="13.8939%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (110 samples, 0.06%)</title><rect x="13.6439%" y="309" width="0.0558%" height="15" fill="rgb(214,7,15)" fg:x="26908" fg:w="110"/><text x="13.8939%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (110 samples, 0.06%)</title><rect x="13.6439%" y="293" width="0.0558%" height="15" fill="rgb(235,32,4)" fg:x="26908" fg:w="110"/><text x="13.8939%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (88 samples, 0.04%)</title><rect x="13.6550%" y="277" width="0.0446%" height="15" fill="rgb(238,90,54)" fg:x="26930" fg:w="88"/><text x="13.9050%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (88 samples, 0.04%)</title><rect x="13.6550%" y="261" width="0.0446%" height="15" fill="rgb(213,208,19)" fg:x="26930" fg:w="88"/><text x="13.9050%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (200 samples, 0.10%)</title><rect x="13.6996%" y="325" width="0.1014%" height="15" fill="rgb(233,156,4)" fg:x="27018" fg:w="200"/><text x="13.9496%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (200 samples, 0.10%)</title><rect x="13.6996%" y="309" width="0.1014%" height="15" fill="rgb(207,194,5)" fg:x="27018" fg:w="200"/><text x="13.9496%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.02%)</title><rect x="13.7792%" y="293" width="0.0218%" height="15" fill="rgb(206,111,30)" fg:x="27175" fg:w="43"/><text x="14.0292%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (34 samples, 0.02%)</title><rect x="13.7838%" y="277" width="0.0172%" height="15" fill="rgb(243,70,54)" fg:x="27184" fg:w="34"/><text x="14.0338%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (34 samples, 0.02%)</title><rect x="13.7838%" y="261" width="0.0172%" height="15" fill="rgb(242,28,8)" fg:x="27184" fg:w="34"/><text x="14.0338%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (4,047 samples, 2.05%)</title><rect x="12.0983%" y="341" width="2.0521%" height="15" fill="rgb(219,106,18)" fg:x="23860" fg:w="4047"/><text x="12.3483%" y="351.50">p..</text></g><g><title>project1::solver::types::Lit::var (689 samples, 0.35%)</title><rect x="13.8010%" y="325" width="0.3494%" height="15" fill="rgb(244,222,10)" fg:x="27218" fg:w="689"/><text x="14.0510%" y="335.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (124 samples, 0.06%)</title><rect x="14.0875%" y="309" width="0.0629%" height="15" fill="rgb(236,179,52)" fg:x="27783" fg:w="124"/><text x="14.3375%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.04%)</title><rect x="14.1504%" y="309" width="0.0370%" height="15" fill="rgb(213,23,39)" fg:x="27907" fg:w="73"/><text x="14.4004%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (150 samples, 0.08%)</title><rect x="14.1504%" y="341" width="0.0761%" height="15" fill="rgb(238,48,10)" fg:x="27907" fg:w="150"/><text x="14.4004%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (150 samples, 0.08%)</title><rect x="14.1504%" y="325" width="0.0761%" height="15" fill="rgb(251,196,23)" fg:x="27907" fg:w="150"/><text x="14.4004%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (77 samples, 0.04%)</title><rect x="14.1874%" y="309" width="0.0390%" height="15" fill="rgb(250,152,24)" fg:x="27980" fg:w="77"/><text x="14.4374%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (77 samples, 0.04%)</title><rect x="14.1874%" y="293" width="0.0390%" height="15" fill="rgb(209,150,17)" fg:x="27980" fg:w="77"/><text x="14.4374%" y="303.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (43 samples, 0.02%)</title><rect x="14.3091%" y="325" width="0.0218%" height="15" fill="rgb(234,202,34)" fg:x="28220" fg:w="43"/><text x="14.5591%" y="335.50"></text></g><g><title>project1::solver::types::Lit::var (217 samples, 0.11%)</title><rect x="14.2265%" y="341" width="0.1100%" height="15" fill="rgb(253,148,53)" fg:x="28057" fg:w="217"/><text x="14.4765%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (4,816 samples, 2.44%)</title><rect x="11.8950%" y="357" width="2.4420%" height="15" fill="rgb(218,129,16)" fg:x="23459" fg:w="4816"/><text x="12.1450%" y="367.50">pr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (4,934 samples, 2.50%)</title><rect x="11.8950%" y="373" width="2.5018%" height="15" fill="rgb(216,85,19)" fg:x="23459" fg:w="4934"/><text x="12.1450%" y="383.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (118 samples, 0.06%)</title><rect x="14.3370%" y="357" width="0.0598%" height="15" fill="rgb(235,228,7)" fg:x="28275" fg:w="118"/><text x="14.5870%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (5,365 samples, 2.72%)</title><rect x="11.7617%" y="389" width="2.7204%" height="15" fill="rgb(245,175,0)" fg:x="23196" fg:w="5365"/><text x="12.0117%" y="399.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (167 samples, 0.08%)</title><rect x="14.3973%" y="373" width="0.0847%" height="15" fill="rgb(208,168,36)" fg:x="28394" fg:w="167"/><text x="14.6473%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (5,385 samples, 2.73%)</title><rect x="11.7617%" y="405" width="2.7305%" height="15" fill="rgb(246,171,24)" fg:x="23196" fg:w="5385"/><text x="12.0117%" y="415.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5,392 samples, 2.73%)</title><rect x="11.7617%" y="421" width="2.7340%" height="15" fill="rgb(215,142,24)" fg:x="23196" fg:w="5392"/><text x="12.0117%" y="431.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (107 samples, 0.05%)</title><rect x="14.5216%" y="373" width="0.0543%" height="15" fill="rgb(250,187,7)" fg:x="28639" fg:w="107"/><text x="14.7716%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (48 samples, 0.02%)</title><rect x="14.5515%" y="357" width="0.0243%" height="15" fill="rgb(228,66,33)" fg:x="28698" fg:w="48"/><text x="14.8015%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (48 samples, 0.02%)</title><rect x="14.5515%" y="341" width="0.0243%" height="15" fill="rgb(234,215,21)" fg:x="28698" fg:w="48"/><text x="14.8015%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (224 samples, 0.11%)</title><rect x="14.4957%" y="405" width="0.1136%" height="15" fill="rgb(222,191,20)" fg:x="28588" fg:w="224"/><text x="14.7457%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (214 samples, 0.11%)</title><rect x="14.5008%" y="389" width="0.1085%" height="15" fill="rgb(245,79,54)" fg:x="28598" fg:w="214"/><text x="14.7508%" y="399.50"></text></g><g><title>project1::solver::types::Lit::var (66 samples, 0.03%)</title><rect x="14.5758%" y="373" width="0.0335%" height="15" fill="rgb(240,10,37)" fg:x="28746" fg:w="66"/><text x="14.8258%" y="383.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (42 samples, 0.02%)</title><rect x="14.5880%" y="357" width="0.0213%" height="15" fill="rgb(214,192,32)" fg:x="28770" fg:w="42"/><text x="14.8380%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (5,626 samples, 2.85%)</title><rect x="11.7617%" y="437" width="2.8527%" height="15" fill="rgb(209,36,54)" fg:x="23196" fg:w="5626"/><text x="12.0117%" y="447.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (234 samples, 0.12%)</title><rect x="14.4957%" y="421" width="0.1187%" height="15" fill="rgb(220,10,11)" fg:x="28588" fg:w="234"/><text x="14.7457%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (237 samples, 0.12%)</title><rect x="14.8451%" y="389" width="0.1202%" height="15" fill="rgb(221,106,17)" fg:x="29277" fg:w="237"/><text x="15.0951%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (49 samples, 0.02%)</title><rect x="14.9404%" y="373" width="0.0248%" height="15" fill="rgb(251,142,44)" fg:x="29465" fg:w="49"/><text x="15.1904%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (49 samples, 0.02%)</title><rect x="14.9404%" y="357" width="0.0248%" height="15" fill="rgb(238,13,15)" fg:x="29465" fg:w="49"/><text x="15.1904%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (737 samples, 0.37%)</title><rect x="14.6144%" y="437" width="0.3737%" height="15" fill="rgb(208,107,27)" fg:x="28822" fg:w="737"/><text x="14.8644%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (737 samples, 0.37%)</title><rect x="14.6144%" y="421" width="0.3737%" height="15" fill="rgb(205,136,37)" fg:x="28822" fg:w="737"/><text x="14.8644%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (282 samples, 0.14%)</title><rect x="14.8451%" y="405" width="0.1430%" height="15" fill="rgb(250,205,27)" fg:x="29277" fg:w="282"/><text x="15.0951%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (45 samples, 0.02%)</title><rect x="14.9652%" y="389" width="0.0228%" height="15" fill="rgb(210,80,43)" fg:x="29514" fg:w="45"/><text x="15.2152%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 0.02%)</title><rect x="14.9652%" y="373" width="0.0228%" height="15" fill="rgb(247,160,36)" fg:x="29514" fg:w="45"/><text x="15.2152%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (62 samples, 0.03%)</title><rect x="14.9881%" y="405" width="0.0314%" height="15" fill="rgb(234,13,49)" fg:x="29559" fg:w="62"/><text x="15.2381%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (79 samples, 0.04%)</title><rect x="14.9881%" y="437" width="0.0401%" height="15" fill="rgb(234,122,0)" fg:x="29559" fg:w="79"/><text x="15.2381%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (79 samples, 0.04%)</title><rect x="14.9881%" y="421" width="0.0401%" height="15" fill="rgb(207,146,38)" fg:x="29559" fg:w="79"/><text x="15.2381%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (255 samples, 0.13%)</title><rect x="15.0281%" y="437" width="0.1293%" height="15" fill="rgb(207,177,25)" fg:x="29638" fg:w="255"/><text x="15.2781%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (354 samples, 0.18%)</title><rect x="15.1574%" y="437" width="0.1795%" height="15" fill="rgb(211,178,42)" fg:x="29893" fg:w="354"/><text x="15.4074%" y="447.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (354 samples, 0.18%)</title><rect x="15.1574%" y="421" width="0.1795%" height="15" fill="rgb(230,69,54)" fg:x="29893" fg:w="354"/><text x="15.4074%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (354 samples, 0.18%)</title><rect x="15.1574%" y="405" width="0.1795%" height="15" fill="rgb(214,135,41)" fg:x="29893" fg:w="354"/><text x="15.4074%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (354 samples, 0.18%)</title><rect x="15.1574%" y="389" width="0.1795%" height="15" fill="rgb(237,67,25)" fg:x="29893" fg:w="354"/><text x="15.4074%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (354 samples, 0.18%)</title><rect x="15.1574%" y="373" width="0.1795%" height="15" fill="rgb(222,189,50)" fg:x="29893" fg:w="354"/><text x="15.4074%" y="383.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (141 samples, 0.07%)</title><rect x="15.4175%" y="421" width="0.0715%" height="15" fill="rgb(245,148,34)" fg:x="30406" fg:w="141"/><text x="15.6675%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (340 samples, 0.17%)</title><rect x="15.3455%" y="437" width="0.1724%" height="15" fill="rgb(222,29,6)" fg:x="30264" fg:w="340"/><text x="15.5955%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (57 samples, 0.03%)</title><rect x="15.4890%" y="421" width="0.0289%" height="15" fill="rgb(221,189,43)" fg:x="30547" fg:w="57"/><text x="15.7390%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (136 samples, 0.07%)</title><rect x="15.5798%" y="421" width="0.0690%" height="15" fill="rgb(207,36,27)" fg:x="30726" fg:w="136"/><text x="15.8298%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (28,951 samples, 14.68%)</title><rect x="0.9822%" y="453" width="14.6798%" height="15" fill="rgb(217,90,24)" fg:x="1937" fg:w="28951"/><text x="1.2322%" y="463.50">project1::solver::cdcl..</text></g><g><title>project1::solver::types::Lit::var_idx (284 samples, 0.14%)</title><rect x="15.5179%" y="437" width="0.1440%" height="15" fill="rgb(224,66,35)" fg:x="30604" fg:w="284"/><text x="15.7679%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (26 samples, 0.01%)</title><rect x="15.6488%" y="421" width="0.0132%" height="15" fill="rgb(221,13,50)" fg:x="30862" fg:w="26"/><text x="15.8988%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (167 samples, 0.08%)</title><rect x="15.6619%" y="453" width="0.0847%" height="15" fill="rgb(236,68,49)" fg:x="30888" fg:w="167"/><text x="15.9119%" y="463.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (151 samples, 0.08%)</title><rect x="15.6700%" y="437" width="0.0766%" height="15" fill="rgb(229,146,28)" fg:x="30904" fg:w="151"/><text x="15.9200%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (145 samples, 0.07%)</title><rect x="15.6731%" y="421" width="0.0735%" height="15" fill="rgb(225,31,38)" fg:x="30910" fg:w="145"/><text x="15.9231%" y="431.50"></text></g><g><title>core::ptr::write (101 samples, 0.05%)</title><rect x="15.6954%" y="405" width="0.0512%" height="15" fill="rgb(250,208,3)" fg:x="30954" fg:w="101"/><text x="15.9454%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (127 samples, 0.06%)</title><rect x="15.8516%" y="421" width="0.0644%" height="15" fill="rgb(246,54,23)" fg:x="31262" fg:w="127"/><text x="16.1016%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (79 samples, 0.04%)</title><rect x="15.8759%" y="405" width="0.0401%" height="15" fill="rgb(243,76,11)" fg:x="31310" fg:w="79"/><text x="16.1259%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (79 samples, 0.04%)</title><rect x="15.8759%" y="389" width="0.0401%" height="15" fill="rgb(245,21,50)" fg:x="31310" fg:w="79"/><text x="16.1259%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (210 samples, 0.11%)</title><rect x="15.8516%" y="437" width="0.1065%" height="15" fill="rgb(228,9,43)" fg:x="31262" fg:w="210"/><text x="16.1016%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (83 samples, 0.04%)</title><rect x="15.9160%" y="421" width="0.0421%" height="15" fill="rgb(208,100,47)" fg:x="31389" fg:w="83"/><text x="16.1660%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (83 samples, 0.04%)</title><rect x="15.9160%" y="405" width="0.0421%" height="15" fill="rgb(232,26,8)" fg:x="31389" fg:w="83"/><text x="16.1660%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (85 samples, 0.04%)</title><rect x="15.9606%" y="437" width="0.0431%" height="15" fill="rgb(216,166,38)" fg:x="31477" fg:w="85"/><text x="16.2106%" y="447.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (38 samples, 0.02%)</title><rect x="15.9844%" y="421" width="0.0193%" height="15" fill="rgb(251,202,51)" fg:x="31524" fg:w="38"/><text x="16.2344%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (38 samples, 0.02%)</title><rect x="15.9844%" y="405" width="0.0193%" height="15" fill="rgb(254,216,34)" fg:x="31524" fg:w="38"/><text x="16.2344%" y="415.50"></text></g><g><title>log::max_level (29 samples, 0.01%)</title><rect x="16.0052%" y="437" width="0.0147%" height="15" fill="rgb(251,32,27)" fg:x="31565" fg:w="29"/><text x="16.2552%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.01%)</title><rect x="16.0052%" y="421" width="0.0147%" height="15" fill="rgb(208,127,28)" fg:x="31565" fg:w="29"/><text x="16.2552%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.01%)</title><rect x="16.0052%" y="405" width="0.0147%" height="15" fill="rgb(224,137,22)" fg:x="31565" fg:w="29"/><text x="16.2552%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (32 samples, 0.02%)</title><rect x="16.0285%" y="405" width="0.0162%" height="15" fill="rgb(254,70,32)" fg:x="31611" fg:w="32"/><text x="16.2785%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (58 samples, 0.03%)</title><rect x="16.0285%" y="421" width="0.0294%" height="15" fill="rgb(229,75,37)" fg:x="31611" fg:w="58"/><text x="16.2785%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (26 samples, 0.01%)</title><rect x="16.0448%" y="405" width="0.0132%" height="15" fill="rgb(252,64,23)" fg:x="31643" fg:w="26"/><text x="16.2948%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (26 samples, 0.01%)</title><rect x="16.0448%" y="389" width="0.0132%" height="15" fill="rgb(232,162,48)" fg:x="31643" fg:w="26"/><text x="16.2948%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (45 samples, 0.02%)</title><rect x="16.0579%" y="421" width="0.0228%" height="15" fill="rgb(246,160,12)" fg:x="31669" fg:w="45"/><text x="16.3079%" y="431.50"></text></g><g><title>core::ptr::write (38 samples, 0.02%)</title><rect x="16.0615%" y="405" width="0.0193%" height="15" fill="rgb(247,166,0)" fg:x="31676" fg:w="38"/><text x="16.3115%" y="415.50"></text></g><g><title>core::ptr::read (452 samples, 0.23%)</title><rect x="16.0808%" y="405" width="0.2292%" height="15" fill="rgb(249,219,21)" fg:x="31714" fg:w="452"/><text x="16.3308%" y="415.50"></text></g><g><title>core::mem::replace (581 samples, 0.29%)</title><rect x="16.0808%" y="421" width="0.2946%" height="15" fill="rgb(205,209,3)" fg:x="31714" fg:w="581"/><text x="16.3308%" y="431.50"></text></g><g><title>core::ptr::write (129 samples, 0.07%)</title><rect x="16.3100%" y="405" width="0.0654%" height="15" fill="rgb(243,44,1)" fg:x="32166" fg:w="129"/><text x="16.5600%" y="415.50"></text></g><g><title>core::mem::swap (69 samples, 0.03%)</title><rect x="16.3754%" y="421" width="0.0350%" height="15" fill="rgb(206,159,16)" fg:x="32295" fg:w="69"/><text x="16.6254%" y="431.50"></text></g><g><title>core::mem::swap_simple (69 samples, 0.03%)</title><rect x="16.3754%" y="405" width="0.0350%" height="15" fill="rgb(244,77,30)" fg:x="32295" fg:w="69"/><text x="16.6254%" y="415.50"></text></g><g><title>core::ptr::write (59 samples, 0.03%)</title><rect x="16.3804%" y="389" width="0.0299%" height="15" fill="rgb(218,69,12)" fg:x="32305" fg:w="59"/><text x="16.6304%" y="399.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (65 samples, 0.03%)</title><rect x="16.4104%" y="421" width="0.0330%" height="15" fill="rgb(212,87,7)" fg:x="32364" fg:w="65"/><text x="16.6604%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (102 samples, 0.05%)</title><rect x="16.4687%" y="373" width="0.0517%" height="15" fill="rgb(245,114,25)" fg:x="32479" fg:w="102"/><text x="16.7187%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (60 samples, 0.03%)</title><rect x="16.5204%" y="293" width="0.0304%" height="15" fill="rgb(210,61,42)" fg:x="32581" fg:w="60"/><text x="16.7704%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (60 samples, 0.03%)</title><rect x="16.5204%" y="277" width="0.0304%" height="15" fill="rgb(211,52,33)" fg:x="32581" fg:w="60"/><text x="16.7704%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (60 samples, 0.03%)</title><rect x="16.5204%" y="261" width="0.0304%" height="15" fill="rgb(234,58,33)" fg:x="32581" fg:w="60"/><text x="16.7704%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (36 samples, 0.02%)</title><rect x="16.5326%" y="245" width="0.0183%" height="15" fill="rgb(220,115,36)" fg:x="32605" fg:w="36"/><text x="16.7826%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (87 samples, 0.04%)</title><rect x="16.5204%" y="325" width="0.0441%" height="15" fill="rgb(243,153,54)" fg:x="32581" fg:w="87"/><text x="16.7704%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (87 samples, 0.04%)</title><rect x="16.5204%" y="309" width="0.0441%" height="15" fill="rgb(251,47,18)" fg:x="32581" fg:w="87"/><text x="16.7704%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (21 samples, 0.01%)</title><rect x="16.5538%" y="293" width="0.0106%" height="15" fill="rgb(242,102,42)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (21 samples, 0.01%)</title><rect x="16.5538%" y="277" width="0.0106%" height="15" fill="rgb(234,31,38)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (21 samples, 0.01%)</title><rect x="16.5538%" y="261" width="0.0106%" height="15" fill="rgb(221,117,51)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (21 samples, 0.01%)</title><rect x="16.5538%" y="245" width="0.0106%" height="15" fill="rgb(212,20,18)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="16.5538%" y="229" width="0.0106%" height="15" fill="rgb(245,133,36)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="16.5538%" y="213" width="0.0106%" height="15" fill="rgb(212,6,19)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.01%)</title><rect x="16.5538%" y="197" width="0.0106%" height="15" fill="rgb(218,1,36)" fg:x="32647" fg:w="21"/><text x="16.8038%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (34 samples, 0.02%)</title><rect x="16.5645%" y="309" width="0.0172%" height="15" fill="rgb(246,84,54)" fg:x="32668" fg:w="34"/><text x="16.8145%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (34 samples, 0.02%)</title><rect x="16.5645%" y="293" width="0.0172%" height="15" fill="rgb(242,110,6)" fg:x="32668" fg:w="34"/><text x="16.8145%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (229 samples, 0.12%)</title><rect x="16.4671%" y="405" width="0.1161%" height="15" fill="rgb(214,47,5)" fg:x="32476" fg:w="229"/><text x="16.7171%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (229 samples, 0.12%)</title><rect x="16.4671%" y="389" width="0.1161%" height="15" fill="rgb(218,159,25)" fg:x="32476" fg:w="229"/><text x="16.7171%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (124 samples, 0.06%)</title><rect x="16.5204%" y="373" width="0.0629%" height="15" fill="rgb(215,211,28)" fg:x="32581" fg:w="124"/><text x="16.7704%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (124 samples, 0.06%)</title><rect x="16.5204%" y="357" width="0.0629%" height="15" fill="rgb(238,59,32)" fg:x="32581" fg:w="124"/><text x="16.7704%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (124 samples, 0.06%)</title><rect x="16.5204%" y="341" width="0.0629%" height="15" fill="rgb(226,82,3)" fg:x="32581" fg:w="124"/><text x="16.7704%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (37 samples, 0.02%)</title><rect x="16.5645%" y="325" width="0.0188%" height="15" fill="rgb(240,164,32)" fg:x="32668" fg:w="37"/><text x="16.8145%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (278 samples, 0.14%)</title><rect x="16.4469%" y="421" width="0.1410%" height="15" fill="rgb(232,46,7)" fg:x="32436" fg:w="278"/><text x="16.6969%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (118 samples, 0.06%)</title><rect x="16.6674%" y="245" width="0.0598%" height="15" fill="rgb(229,129,53)" fg:x="32871" fg:w="118"/><text x="16.9174%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (215 samples, 0.11%)</title><rect x="16.6426%" y="261" width="0.1090%" height="15" fill="rgb(234,188,29)" fg:x="32822" fg:w="215"/><text x="16.8926%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (48 samples, 0.02%)</title><rect x="16.7273%" y="245" width="0.0243%" height="15" fill="rgb(246,141,4)" fg:x="32989" fg:w="48"/><text x="16.9773%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (218 samples, 0.11%)</title><rect x="16.8307%" y="245" width="0.1105%" height="15" fill="rgb(229,23,39)" fg:x="33193" fg:w="218"/><text x="17.0807%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (143 samples, 0.07%)</title><rect x="16.9412%" y="245" width="0.0725%" height="15" fill="rgb(206,12,3)" fg:x="33411" fg:w="143"/><text x="17.1912%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (800 samples, 0.41%)</title><rect x="16.6253%" y="309" width="0.4056%" height="15" fill="rgb(252,226,20)" fg:x="32788" fg:w="800"/><text x="16.8753%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (800 samples, 0.41%)</title><rect x="16.6253%" y="293" width="0.4056%" height="15" fill="rgb(216,123,35)" fg:x="32788" fg:w="800"/><text x="16.8753%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (800 samples, 0.41%)</title><rect x="16.6253%" y="277" width="0.4056%" height="15" fill="rgb(212,68,40)" fg:x="32788" fg:w="800"/><text x="16.8753%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (551 samples, 0.28%)</title><rect x="16.7516%" y="261" width="0.2794%" height="15" fill="rgb(254,125,32)" fg:x="33037" fg:w="551"/><text x="17.0016%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (34 samples, 0.02%)</title><rect x="17.0137%" y="245" width="0.0172%" height="15" fill="rgb(253,97,22)" fg:x="33554" fg:w="34"/><text x="17.2637%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (109 samples, 0.06%)</title><rect x="17.0310%" y="309" width="0.0553%" height="15" fill="rgb(241,101,14)" fg:x="33588" fg:w="109"/><text x="17.2810%" y="319.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (71 samples, 0.04%)</title><rect x="17.0503%" y="293" width="0.0360%" height="15" fill="rgb(238,103,29)" fg:x="33626" fg:w="71"/><text x="17.3003%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (71 samples, 0.04%)</title><rect x="17.0503%" y="277" width="0.0360%" height="15" fill="rgb(233,195,47)" fg:x="33626" fg:w="71"/><text x="17.3003%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (71 samples, 0.04%)</title><rect x="17.0503%" y="261" width="0.0360%" height="15" fill="rgb(246,218,30)" fg:x="33626" fg:w="71"/><text x="17.3003%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (92 samples, 0.05%)</title><rect x="17.1436%" y="181" width="0.0466%" height="15" fill="rgb(219,145,47)" fg:x="33810" fg:w="92"/><text x="17.3936%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,154 samples, 0.59%)</title><rect x="16.6253%" y="341" width="0.5851%" height="15" fill="rgb(243,12,26)" fg:x="32788" fg:w="1154"/><text x="16.8753%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,154 samples, 0.59%)</title><rect x="16.6253%" y="325" width="0.5851%" height="15" fill="rgb(214,87,16)" fg:x="32788" fg:w="1154"/><text x="16.8753%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (245 samples, 0.12%)</title><rect x="17.0863%" y="309" width="0.1242%" height="15" fill="rgb(208,99,42)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (245 samples, 0.12%)</title><rect x="17.0863%" y="293" width="0.1242%" height="15" fill="rgb(253,99,2)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i64 (245 samples, 0.12%)</title><rect x="17.0863%" y="277" width="0.1242%" height="15" fill="rgb(220,168,23)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (245 samples, 0.12%)</title><rect x="17.0863%" y="261" width="0.1242%" height="15" fill="rgb(242,38,24)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (245 samples, 0.12%)</title><rect x="17.0863%" y="245" width="0.1242%" height="15" fill="rgb(225,182,9)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (245 samples, 0.12%)</title><rect x="17.0863%" y="229" width="0.1242%" height="15" fill="rgb(243,178,37)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (245 samples, 0.12%)</title><rect x="17.0863%" y="213" width="0.1242%" height="15" fill="rgb(232,139,19)" fg:x="33697" fg:w="245"/><text x="17.3363%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (158 samples, 0.08%)</title><rect x="17.1304%" y="197" width="0.0801%" height="15" fill="rgb(225,201,24)" fg:x="33784" fg:w="158"/><text x="17.3804%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (40 samples, 0.02%)</title><rect x="17.1902%" y="181" width="0.0203%" height="15" fill="rgb(221,47,46)" fg:x="33902" fg:w="40"/><text x="17.4402%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.03%)</title><rect x="17.2394%" y="293" width="0.0289%" height="15" fill="rgb(249,23,13)" fg:x="33999" fg:w="57"/><text x="17.4894%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (41 samples, 0.02%)</title><rect x="17.2475%" y="277" width="0.0208%" height="15" fill="rgb(219,9,5)" fg:x="34015" fg:w="41"/><text x="17.4975%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (87 samples, 0.04%)</title><rect x="17.2683%" y="277" width="0.0441%" height="15" fill="rgb(254,171,16)" fg:x="34056" fg:w="87"/><text x="17.5183%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (87 samples, 0.04%)</title><rect x="17.2683%" y="261" width="0.0441%" height="15" fill="rgb(230,171,20)" fg:x="34056" fg:w="87"/><text x="17.5183%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (87 samples, 0.04%)</title><rect x="17.2683%" y="245" width="0.0441%" height="15" fill="rgb(210,71,41)" fg:x="34056" fg:w="87"/><text x="17.5183%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (87 samples, 0.04%)</title><rect x="17.2683%" y="229" width="0.0441%" height="15" fill="rgb(206,173,20)" fg:x="34056" fg:w="87"/><text x="17.5183%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (63 samples, 0.03%)</title><rect x="17.3124%" y="229" width="0.0319%" height="15" fill="rgb(233,88,34)" fg:x="34143" fg:w="63"/><text x="17.5624%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (165 samples, 0.08%)</title><rect x="17.2683%" y="293" width="0.0837%" height="15" fill="rgb(223,209,46)" fg:x="34056" fg:w="165"/><text x="17.5183%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (78 samples, 0.04%)</title><rect x="17.3124%" y="277" width="0.0396%" height="15" fill="rgb(250,43,18)" fg:x="34143" fg:w="78"/><text x="17.5624%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (78 samples, 0.04%)</title><rect x="17.3124%" y="261" width="0.0396%" height="15" fill="rgb(208,13,10)" fg:x="34143" fg:w="78"/><text x="17.5624%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (78 samples, 0.04%)</title><rect x="17.3124%" y="245" width="0.0396%" height="15" fill="rgb(212,200,36)" fg:x="34143" fg:w="78"/><text x="17.5624%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (100 samples, 0.05%)</title><rect x="17.3520%" y="293" width="0.0507%" height="15" fill="rgb(225,90,30)" fg:x="34221" fg:w="100"/><text x="17.6020%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (57 samples, 0.03%)</title><rect x="17.4027%" y="293" width="0.0289%" height="15" fill="rgb(236,182,39)" fg:x="34321" fg:w="57"/><text x="17.6527%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (56 samples, 0.03%)</title><rect x="17.4316%" y="293" width="0.0284%" height="15" fill="rgb(212,144,35)" fg:x="34378" fg:w="56"/><text x="17.6816%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (56 samples, 0.03%)</title><rect x="17.4316%" y="277" width="0.0284%" height="15" fill="rgb(228,63,44)" fg:x="34378" fg:w="56"/><text x="17.6816%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (493 samples, 0.25%)</title><rect x="17.2105%" y="325" width="0.2500%" height="15" fill="rgb(228,109,6)" fg:x="33942" fg:w="493"/><text x="17.4605%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (480 samples, 0.24%)</title><rect x="17.2171%" y="309" width="0.2434%" height="15" fill="rgb(238,117,24)" fg:x="33955" fg:w="480"/><text x="17.4671%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,659 samples, 0.84%)</title><rect x="16.6203%" y="357" width="0.8412%" height="15" fill="rgb(242,26,26)" fg:x="32778" fg:w="1659"/><text x="16.8703%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (495 samples, 0.25%)</title><rect x="17.2105%" y="341" width="0.2510%" height="15" fill="rgb(221,92,48)" fg:x="33942" fg:w="495"/><text x="17.4605%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,721 samples, 0.87%)</title><rect x="16.6203%" y="405" width="0.8726%" height="15" fill="rgb(209,209,32)" fg:x="32778" fg:w="1721"/><text x="16.8703%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,721 samples, 0.87%)</title><rect x="16.6203%" y="389" width="0.8726%" height="15" fill="rgb(221,70,22)" fg:x="32778" fg:w="1721"/><text x="16.8703%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,721 samples, 0.87%)</title><rect x="16.6203%" y="373" width="0.8726%" height="15" fill="rgb(248,145,5)" fg:x="32778" fg:w="1721"/><text x="16.8703%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (62 samples, 0.03%)</title><rect x="17.4615%" y="357" width="0.0314%" height="15" fill="rgb(226,116,26)" fg:x="34437" fg:w="62"/><text x="17.7115%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (30 samples, 0.02%)</title><rect x="17.4929%" y="389" width="0.0152%" height="15" fill="rgb(244,5,17)" fg:x="34499" fg:w="30"/><text x="17.7429%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (29 samples, 0.01%)</title><rect x="17.5522%" y="373" width="0.0147%" height="15" fill="rgb(252,159,33)" fg:x="34616" fg:w="29"/><text x="17.8022%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.01%)</title><rect x="17.5522%" y="357" width="0.0147%" height="15" fill="rgb(206,71,0)" fg:x="34616" fg:w="29"/><text x="17.8022%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29 samples, 0.01%)</title><rect x="17.5522%" y="341" width="0.0147%" height="15" fill="rgb(233,118,54)" fg:x="34616" fg:w="29"/><text x="17.8022%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (133 samples, 0.07%)</title><rect x="17.5669%" y="277" width="0.0674%" height="15" fill="rgb(234,83,48)" fg:x="34645" fg:w="133"/><text x="17.8169%" y="287.50"></text></g><g><title>compare::Compare::compares_ge (147 samples, 0.07%)</title><rect x="17.5669%" y="373" width="0.0745%" height="15" fill="rgb(228,3,54)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (147 samples, 0.07%)</title><rect x="17.5669%" y="357" width="0.0745%" height="15" fill="rgb(226,155,13)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (147 samples, 0.07%)</title><rect x="17.5669%" y="341" width="0.0745%" height="15" fill="rgb(241,28,37)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (147 samples, 0.07%)</title><rect x="17.5669%" y="325" width="0.0745%" height="15" fill="rgb(233,93,10)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (147 samples, 0.07%)</title><rect x="17.5669%" y="309" width="0.0745%" height="15" fill="rgb(225,113,19)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (147 samples, 0.07%)</title><rect x="17.5669%" y="293" width="0.0745%" height="15" fill="rgb(241,2,18)" fg:x="34645" fg:w="147"/><text x="17.8169%" y="303.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (142 samples, 0.07%)</title><rect x="17.6415%" y="357" width="0.0720%" height="15" fill="rgb(228,207,21)" fg:x="34792" fg:w="142"/><text x="17.8915%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (142 samples, 0.07%)</title><rect x="17.6415%" y="341" width="0.0720%" height="15" fill="rgb(213,211,35)" fg:x="34792" fg:w="142"/><text x="17.8915%" y="351.50"></text></g><g><title>compare::Compare::compares_le (168 samples, 0.09%)</title><rect x="17.6415%" y="373" width="0.0852%" height="15" fill="rgb(209,83,10)" fg:x="34792" fg:w="168"/><text x="17.8915%" y="383.50"></text></g><g><title>core::cmp::PartialEq::ne (26 samples, 0.01%)</title><rect x="17.7135%" y="357" width="0.0132%" height="15" fill="rgb(209,164,1)" fg:x="34934" fg:w="26"/><text x="17.9635%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (600 samples, 0.30%)</title><rect x="17.7434%" y="341" width="0.3042%" height="15" fill="rgb(213,184,43)" fg:x="34993" fg:w="600"/><text x="17.9934%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (28 samples, 0.01%)</title><rect x="18.0476%" y="341" width="0.0142%" height="15" fill="rgb(231,61,34)" fg:x="35593" fg:w="28"/><text x="18.2976%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (28 samples, 0.01%)</title><rect x="18.0476%" y="325" width="0.0142%" height="15" fill="rgb(235,75,3)" fg:x="35593" fg:w="28"/><text x="18.2976%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (28 samples, 0.01%)</title><rect x="18.0476%" y="309" width="0.0142%" height="15" fill="rgb(220,106,47)" fg:x="35593" fg:w="28"/><text x="18.2976%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (85 samples, 0.04%)</title><rect x="18.1450%" y="197" width="0.0431%" height="15" fill="rgb(210,196,33)" fg:x="35785" fg:w="85"/><text x="18.3950%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (244 samples, 0.12%)</title><rect x="18.1191%" y="213" width="0.1237%" height="15" fill="rgb(229,154,42)" fg:x="35734" fg:w="244"/><text x="18.3691%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (108 samples, 0.05%)</title><rect x="18.1881%" y="197" width="0.0548%" height="15" fill="rgb(228,114,26)" fg:x="35870" fg:w="108"/><text x="18.4381%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (265 samples, 0.13%)</title><rect x="18.3255%" y="197" width="0.1344%" height="15" fill="rgb(208,144,1)" fg:x="36141" fg:w="265"/><text x="18.5755%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (533 samples, 0.27%)</title><rect x="18.2428%" y="213" width="0.2703%" height="15" fill="rgb(239,112,37)" fg:x="35978" fg:w="533"/><text x="18.4928%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (105 samples, 0.05%)</title><rect x="18.4599%" y="197" width="0.0532%" height="15" fill="rgb(210,96,50)" fg:x="36406" fg:w="105"/><text x="18.7099%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (873 samples, 0.44%)</title><rect x="18.0710%" y="261" width="0.4427%" height="15" fill="rgb(222,178,2)" fg:x="35639" fg:w="873"/><text x="18.3210%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (873 samples, 0.44%)</title><rect x="18.0710%" y="245" width="0.4427%" height="15" fill="rgb(226,74,18)" fg:x="35639" fg:w="873"/><text x="18.3210%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (873 samples, 0.44%)</title><rect x="18.0710%" y="229" width="0.4427%" height="15" fill="rgb(225,67,54)" fg:x="35639" fg:w="873"/><text x="18.3210%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (101 samples, 0.05%)</title><rect x="18.5136%" y="261" width="0.0512%" height="15" fill="rgb(251,92,32)" fg:x="36512" fg:w="101"/><text x="18.7636%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (61 samples, 0.03%)</title><rect x="18.5339%" y="245" width="0.0309%" height="15" fill="rgb(228,149,22)" fg:x="36552" fg:w="61"/><text x="18.7839%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (61 samples, 0.03%)</title><rect x="18.5339%" y="229" width="0.0309%" height="15" fill="rgb(243,54,13)" fg:x="36552" fg:w="61"/><text x="18.7839%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (61 samples, 0.03%)</title><rect x="18.5339%" y="213" width="0.0309%" height="15" fill="rgb(243,180,28)" fg:x="36552" fg:w="61"/><text x="18.7839%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (59 samples, 0.03%)</title><rect x="18.6541%" y="133" width="0.0299%" height="15" fill="rgb(208,167,24)" fg:x="36789" fg:w="59"/><text x="18.9041%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (1,223 samples, 0.62%)</title><rect x="18.0710%" y="293" width="0.6201%" height="15" fill="rgb(245,73,45)" fg:x="35639" fg:w="1223"/><text x="18.3210%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,223 samples, 0.62%)</title><rect x="18.0710%" y="277" width="0.6201%" height="15" fill="rgb(237,203,48)" fg:x="35639" fg:w="1223"/><text x="18.3210%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (249 samples, 0.13%)</title><rect x="18.5648%" y="261" width="0.1263%" height="15" fill="rgb(211,197,16)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (249 samples, 0.13%)</title><rect x="18.5648%" y="245" width="0.1263%" height="15" fill="rgb(243,99,51)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (249 samples, 0.13%)</title><rect x="18.5648%" y="229" width="0.1263%" height="15" fill="rgb(215,123,29)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (249 samples, 0.13%)</title><rect x="18.5648%" y="213" width="0.1263%" height="15" fill="rgb(239,186,37)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (249 samples, 0.13%)</title><rect x="18.5648%" y="197" width="0.1263%" height="15" fill="rgb(252,136,39)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (249 samples, 0.13%)</title><rect x="18.5648%" y="181" width="0.1263%" height="15" fill="rgb(223,213,32)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (249 samples, 0.13%)</title><rect x="18.5648%" y="165" width="0.1263%" height="15" fill="rgb(233,115,5)" fg:x="36613" fg:w="249"/><text x="18.8148%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (148 samples, 0.08%)</title><rect x="18.6160%" y="149" width="0.0750%" height="15" fill="rgb(207,226,44)" fg:x="36714" fg:w="148"/><text x="18.8660%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.04%)</title><rect x="18.7073%" y="245" width="0.0401%" height="15" fill="rgb(208,126,0)" fg:x="36894" fg:w="79"/><text x="18.9573%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (34 samples, 0.02%)</title><rect x="18.7301%" y="229" width="0.0172%" height="15" fill="rgb(244,66,21)" fg:x="36939" fg:w="34"/><text x="18.9801%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (176 samples, 0.09%)</title><rect x="18.7474%" y="229" width="0.0892%" height="15" fill="rgb(222,97,12)" fg:x="36973" fg:w="176"/><text x="18.9974%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (176 samples, 0.09%)</title><rect x="18.7474%" y="213" width="0.0892%" height="15" fill="rgb(219,213,19)" fg:x="36973" fg:w="176"/><text x="18.9974%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (176 samples, 0.09%)</title><rect x="18.7474%" y="197" width="0.0892%" height="15" fill="rgb(252,169,30)" fg:x="36973" fg:w="176"/><text x="18.9974%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (176 samples, 0.09%)</title><rect x="18.7474%" y="181" width="0.0892%" height="15" fill="rgb(206,32,51)" fg:x="36973" fg:w="176"/><text x="18.9974%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (90 samples, 0.05%)</title><rect x="18.8366%" y="181" width="0.0456%" height="15" fill="rgb(250,172,42)" fg:x="37149" fg:w="90"/><text x="19.0866%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (295 samples, 0.15%)</title><rect x="18.7474%" y="245" width="0.1496%" height="15" fill="rgb(209,34,43)" fg:x="36973" fg:w="295"/><text x="18.9974%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (119 samples, 0.06%)</title><rect x="18.8366%" y="229" width="0.0603%" height="15" fill="rgb(223,11,35)" fg:x="37149" fg:w="119"/><text x="19.0866%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (119 samples, 0.06%)</title><rect x="18.8366%" y="213" width="0.0603%" height="15" fill="rgb(251,219,26)" fg:x="37149" fg:w="119"/><text x="19.0866%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (119 samples, 0.06%)</title><rect x="18.8366%" y="197" width="0.0603%" height="15" fill="rgb(231,119,3)" fg:x="37149" fg:w="119"/><text x="19.0866%" y="207.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (29 samples, 0.01%)</title><rect x="18.8822%" y="181" width="0.0147%" height="15" fill="rgb(216,97,11)" fg:x="37239" fg:w="29"/><text x="19.1322%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (152 samples, 0.08%)</title><rect x="18.8970%" y="245" width="0.0771%" height="15" fill="rgb(223,59,9)" fg:x="37268" fg:w="152"/><text x="19.1470%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (30 samples, 0.02%)</title><rect x="18.9740%" y="245" width="0.0152%" height="15" fill="rgb(233,93,31)" fg:x="37420" fg:w="30"/><text x="19.2240%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (64 samples, 0.03%)</title><rect x="18.9892%" y="245" width="0.0325%" height="15" fill="rgb(239,81,33)" fg:x="37450" fg:w="64"/><text x="19.2392%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (64 samples, 0.03%)</title><rect x="18.9892%" y="229" width="0.0325%" height="15" fill="rgb(213,120,34)" fg:x="37450" fg:w="64"/><text x="19.2392%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.03%)</title><rect x="18.9892%" y="213" width="0.0325%" height="15" fill="rgb(243,49,53)" fg:x="37450" fg:w="64"/><text x="19.2392%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (845 samples, 0.43%)</title><rect x="18.6911%" y="261" width="0.4285%" height="15" fill="rgb(247,216,33)" fg:x="36862" fg:w="845"/><text x="18.9411%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (193 samples, 0.10%)</title><rect x="19.0217%" y="245" width="0.0979%" height="15" fill="rgb(226,26,14)" fg:x="37514" fg:w="193"/><text x="19.2717%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (193 samples, 0.10%)</title><rect x="19.0217%" y="229" width="0.0979%" height="15" fill="rgb(215,49,53)" fg:x="37514" fg:w="193"/><text x="19.2717%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2,749 samples, 1.39%)</title><rect x="17.7287%" y="373" width="1.3939%" height="15" fill="rgb(245,162,40)" fg:x="34964" fg:w="2749"/><text x="17.9787%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2,749 samples, 1.39%)</title><rect x="17.7287%" y="357" width="1.3939%" height="15" fill="rgb(229,68,17)" fg:x="34964" fg:w="2749"/><text x="17.9787%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,092 samples, 1.06%)</title><rect x="18.0618%" y="341" width="1.0608%" height="15" fill="rgb(213,182,10)" fg:x="35621" fg:w="2092"/><text x="18.3118%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,092 samples, 1.06%)</title><rect x="18.0618%" y="325" width="1.0608%" height="15" fill="rgb(245,125,30)" fg:x="35621" fg:w="2092"/><text x="18.3118%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,092 samples, 1.06%)</title><rect x="18.0618%" y="309" width="1.0608%" height="15" fill="rgb(232,202,2)" fg:x="35621" fg:w="2092"/><text x="18.3118%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (851 samples, 0.43%)</title><rect x="18.6911%" y="293" width="0.4315%" height="15" fill="rgb(237,140,51)" fg:x="36862" fg:w="851"/><text x="18.9411%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (851 samples, 0.43%)</title><rect x="18.6911%" y="277" width="0.4315%" height="15" fill="rgb(236,157,25)" fg:x="36862" fg:w="851"/><text x="18.9411%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (3,347 samples, 1.70%)</title><rect x="17.5081%" y="389" width="1.6971%" height="15" fill="rgb(219,209,0)" fg:x="34529" fg:w="3347"/><text x="17.7581%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (163 samples, 0.08%)</title><rect x="19.1226%" y="373" width="0.0827%" height="15" fill="rgb(240,116,54)" fg:x="37713" fg:w="163"/><text x="19.3726%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (3,448 samples, 1.75%)</title><rect x="17.4929%" y="405" width="1.7483%" height="15" fill="rgb(216,10,36)" fg:x="34499" fg:w="3448"/><text x="17.7429%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (71 samples, 0.04%)</title><rect x="19.2052%" y="389" width="0.0360%" height="15" fill="rgb(222,72,44)" fg:x="37876" fg:w="71"/><text x="19.4552%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (28 samples, 0.01%)</title><rect x="19.3173%" y="389" width="0.0142%" height="15" fill="rgb(232,159,9)" fg:x="38097" fg:w="28"/><text x="19.5673%" y="399.50"></text></g><g><title>compare::Compare::compares_le (283 samples, 0.14%)</title><rect x="19.3315%" y="389" width="0.1435%" height="15" fill="rgb(210,39,32)" fg:x="38125" fg:w="283"/><text x="19.5815%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (283 samples, 0.14%)</title><rect x="19.3315%" y="373" width="0.1435%" height="15" fill="rgb(216,194,45)" fg:x="38125" fg:w="283"/><text x="19.5815%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (283 samples, 0.14%)</title><rect x="19.3315%" y="357" width="0.1435%" height="15" fill="rgb(218,18,35)" fg:x="38125" fg:w="283"/><text x="19.5815%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (461 samples, 0.23%)</title><rect x="19.4897%" y="357" width="0.2338%" height="15" fill="rgb(207,83,51)" fg:x="38437" fg:w="461"/><text x="19.7397%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (58 samples, 0.03%)</title><rect x="19.8193%" y="213" width="0.0294%" height="15" fill="rgb(225,63,43)" fg:x="39087" fg:w="58"/><text x="20.0693%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (166 samples, 0.08%)</title><rect x="19.7929%" y="229" width="0.0842%" height="15" fill="rgb(207,57,36)" fg:x="39035" fg:w="166"/><text x="20.0429%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (56 samples, 0.03%)</title><rect x="19.8487%" y="213" width="0.0284%" height="15" fill="rgb(216,99,33)" fg:x="39145" fg:w="56"/><text x="20.0987%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (292 samples, 0.15%)</title><rect x="19.9582%" y="213" width="0.1481%" height="15" fill="rgb(225,42,16)" fg:x="39361" fg:w="292"/><text x="20.2082%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (847 samples, 0.43%)</title><rect x="19.7331%" y="277" width="0.4295%" height="15" fill="rgb(220,201,45)" fg:x="38917" fg:w="847"/><text x="19.9831%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (847 samples, 0.43%)</title><rect x="19.7331%" y="261" width="0.4295%" height="15" fill="rgb(225,33,4)" fg:x="38917" fg:w="847"/><text x="19.9831%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (847 samples, 0.43%)</title><rect x="19.7331%" y="245" width="0.4295%" height="15" fill="rgb(224,33,50)" fg:x="38917" fg:w="847"/><text x="19.9831%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (563 samples, 0.29%)</title><rect x="19.8771%" y="229" width="0.2855%" height="15" fill="rgb(246,198,51)" fg:x="39201" fg:w="563"/><text x="20.1271%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (111 samples, 0.06%)</title><rect x="20.1063%" y="213" width="0.0563%" height="15" fill="rgb(205,22,4)" fg:x="39653" fg:w="111"/><text x="20.3563%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (67 samples, 0.03%)</title><rect x="20.1626%" y="277" width="0.0340%" height="15" fill="rgb(206,3,8)" fg:x="39764" fg:w="67"/><text x="20.4126%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (140 samples, 0.07%)</title><rect x="20.3213%" y="149" width="0.0710%" height="15" fill="rgb(251,23,15)" fg:x="40077" fg:w="140"/><text x="20.5713%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (1,307 samples, 0.66%)</title><rect x="19.7331%" y="309" width="0.6627%" height="15" fill="rgb(252,88,28)" fg:x="38917" fg:w="1307"/><text x="19.9831%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,307 samples, 0.66%)</title><rect x="19.7331%" y="293" width="0.6627%" height="15" fill="rgb(212,127,14)" fg:x="38917" fg:w="1307"/><text x="19.9831%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (393 samples, 0.20%)</title><rect x="20.1965%" y="277" width="0.1993%" height="15" fill="rgb(247,145,37)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (393 samples, 0.20%)</title><rect x="20.1965%" y="261" width="0.1993%" height="15" fill="rgb(209,117,53)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (393 samples, 0.20%)</title><rect x="20.1965%" y="245" width="0.1993%" height="15" fill="rgb(212,90,42)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (393 samples, 0.20%)</title><rect x="20.1965%" y="229" width="0.1993%" height="15" fill="rgb(218,164,37)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (393 samples, 0.20%)</title><rect x="20.1965%" y="213" width="0.1993%" height="15" fill="rgb(246,65,34)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (393 samples, 0.20%)</title><rect x="20.1965%" y="197" width="0.1993%" height="15" fill="rgb(231,100,33)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (393 samples, 0.20%)</title><rect x="20.1965%" y="181" width="0.1993%" height="15" fill="rgb(228,126,14)" fg:x="39831" fg:w="393"/><text x="20.4465%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (215 samples, 0.11%)</title><rect x="20.2868%" y="165" width="0.1090%" height="15" fill="rgb(215,173,21)" fg:x="40009" fg:w="215"/><text x="20.5368%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.05%)</title><rect x="20.4247%" y="261" width="0.0527%" height="15" fill="rgb(210,6,40)" fg:x="40281" fg:w="104"/><text x="20.6747%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (64 samples, 0.03%)</title><rect x="20.4450%" y="245" width="0.0325%" height="15" fill="rgb(212,48,18)" fg:x="40321" fg:w="64"/><text x="20.6950%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (270 samples, 0.14%)</title><rect x="20.4774%" y="245" width="0.1369%" height="15" fill="rgb(230,214,11)" fg:x="40385" fg:w="270"/><text x="20.7274%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (270 samples, 0.14%)</title><rect x="20.4774%" y="229" width="0.1369%" height="15" fill="rgb(254,105,39)" fg:x="40385" fg:w="270"/><text x="20.7274%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (270 samples, 0.14%)</title><rect x="20.4774%" y="213" width="0.1369%" height="15" fill="rgb(245,158,5)" fg:x="40385" fg:w="270"/><text x="20.7274%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (270 samples, 0.14%)</title><rect x="20.4774%" y="197" width="0.1369%" height="15" fill="rgb(249,208,11)" fg:x="40385" fg:w="270"/><text x="20.7274%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (100 samples, 0.05%)</title><rect x="20.6143%" y="197" width="0.0507%" height="15" fill="rgb(210,39,28)" fg:x="40655" fg:w="100"/><text x="20.8643%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (373 samples, 0.19%)</title><rect x="20.4774%" y="261" width="0.1891%" height="15" fill="rgb(211,56,53)" fg:x="40385" fg:w="373"/><text x="20.7274%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (103 samples, 0.05%)</title><rect x="20.6143%" y="245" width="0.0522%" height="15" fill="rgb(226,201,30)" fg:x="40655" fg:w="103"/><text x="20.8643%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (103 samples, 0.05%)</title><rect x="20.6143%" y="229" width="0.0522%" height="15" fill="rgb(239,101,34)" fg:x="40655" fg:w="103"/><text x="20.8643%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (103 samples, 0.05%)</title><rect x="20.6143%" y="213" width="0.0522%" height="15" fill="rgb(226,209,5)" fg:x="40655" fg:w="103"/><text x="20.8643%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (56 samples, 0.03%)</title><rect x="20.6666%" y="261" width="0.0284%" height="15" fill="rgb(250,105,47)" fg:x="40758" fg:w="56"/><text x="20.9166%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (33 samples, 0.02%)</title><rect x="20.6950%" y="261" width="0.0167%" height="15" fill="rgb(230,72,3)" fg:x="40814" fg:w="33"/><text x="20.9450%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (33 samples, 0.02%)</title><rect x="20.6950%" y="245" width="0.0167%" height="15" fill="rgb(232,218,39)" fg:x="40814" fg:w="33"/><text x="20.9450%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.02%)</title><rect x="20.6950%" y="229" width="0.0167%" height="15" fill="rgb(248,166,6)" fg:x="40814" fg:w="33"/><text x="20.9450%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (163 samples, 0.08%)</title><rect x="20.7117%" y="261" width="0.0827%" height="15" fill="rgb(247,89,20)" fg:x="40847" fg:w="163"/><text x="20.9617%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (163 samples, 0.08%)</title><rect x="20.7117%" y="245" width="0.0827%" height="15" fill="rgb(248,130,54)" fg:x="40847" fg:w="163"/><text x="20.9617%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (852 samples, 0.43%)</title><rect x="20.3958%" y="277" width="0.4320%" height="15" fill="rgb(234,196,4)" fg:x="40224" fg:w="852"/><text x="20.6458%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (66 samples, 0.03%)</title><rect x="20.7944%" y="261" width="0.0335%" height="15" fill="rgb(250,143,31)" fg:x="41010" fg:w="66"/><text x="21.0444%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (896 samples, 0.45%)</title><rect x="20.3958%" y="293" width="0.4543%" height="15" fill="rgb(211,110,34)" fg:x="40224" fg:w="896"/><text x="20.6458%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (44 samples, 0.02%)</title><rect x="20.8278%" y="277" width="0.0223%" height="15" fill="rgb(215,124,48)" fg:x="41076" fg:w="44"/><text x="21.0778%" y="287.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2,713 samples, 1.38%)</title><rect x="19.4750%" y="373" width="1.3756%" height="15" fill="rgb(216,46,13)" fg:x="38408" fg:w="2713"/><text x="19.7250%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,212 samples, 1.12%)</title><rect x="19.7290%" y="357" width="1.1216%" height="15" fill="rgb(205,184,25)" fg:x="38909" fg:w="2212"/><text x="19.9790%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,212 samples, 1.12%)</title><rect x="19.7290%" y="341" width="1.1216%" height="15" fill="rgb(228,1,10)" fg:x="38909" fg:w="2212"/><text x="19.9790%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,212 samples, 1.12%)</title><rect x="19.7290%" y="325" width="1.1216%" height="15" fill="rgb(213,116,27)" fg:x="38909" fg:w="2212"/><text x="19.9790%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (897 samples, 0.45%)</title><rect x="20.3958%" y="309" width="0.4548%" height="15" fill="rgb(241,95,50)" fg:x="40224" fg:w="897"/><text x="20.6458%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2,736 samples, 1.39%)</title><rect x="19.4750%" y="389" width="1.3873%" height="15" fill="rgb(238,48,32)" fg:x="38408" fg:w="2736"/><text x="19.7250%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (23 samples, 0.01%)</title><rect x="20.8506%" y="373" width="0.0117%" height="15" fill="rgb(235,113,49)" fg:x="41121" fg:w="23"/><text x="21.1006%" y="383.50"></text></g><g><title>core::ptr::read (115 samples, 0.06%)</title><rect x="20.9302%" y="373" width="0.0583%" height="15" fill="rgb(205,127,43)" fg:x="41278" fg:w="115"/><text x="21.1802%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (3,481 samples, 1.77%)</title><rect x="19.2412%" y="405" width="1.7651%" height="15" fill="rgb(250,162,2)" fg:x="37947" fg:w="3481"/><text x="19.4912%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (284 samples, 0.14%)</title><rect x="20.8623%" y="389" width="0.1440%" height="15" fill="rgb(220,13,41)" fg:x="41144" fg:w="284"/><text x="21.1123%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (35 samples, 0.02%)</title><rect x="20.9886%" y="373" width="0.0177%" height="15" fill="rgb(249,221,25)" fg:x="41393" fg:w="35"/><text x="21.2386%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (35 samples, 0.02%)</title><rect x="20.9886%" y="357" width="0.0177%" height="15" fill="rgb(215,208,19)" fg:x="41393" fg:w="35"/><text x="21.2386%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (35 samples, 0.02%)</title><rect x="20.9886%" y="341" width="0.0177%" height="15" fill="rgb(236,175,2)" fg:x="41393" fg:w="35"/><text x="21.2386%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (8,811 samples, 4.47%)</title><rect x="16.5878%" y="421" width="4.4677%" height="15" fill="rgb(241,52,2)" fg:x="32714" fg:w="8811"/><text x="16.8378%" y="431.50">mut_b..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (97 samples, 0.05%)</title><rect x="21.0063%" y="405" width="0.0492%" height="15" fill="rgb(248,140,14)" fg:x="41428" fg:w="97"/><text x="21.2563%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (108 samples, 0.05%)</title><rect x="21.1473%" y="277" width="0.0548%" height="15" fill="rgb(253,22,42)" fg:x="41706" fg:w="108"/><text x="21.3973%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (229 samples, 0.12%)</title><rect x="21.1189%" y="293" width="0.1161%" height="15" fill="rgb(234,61,47)" fg:x="41650" fg:w="229"/><text x="21.3689%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (65 samples, 0.03%)</title><rect x="21.2020%" y="277" width="0.0330%" height="15" fill="rgb(208,226,15)" fg:x="41814" fg:w="65"/><text x="21.4520%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (264 samples, 0.13%)</title><rect x="21.3222%" y="277" width="0.1339%" height="15" fill="rgb(217,221,4)" fg:x="42051" fg:w="264"/><text x="21.5722%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (955 samples, 0.48%)</title><rect x="21.0707%" y="341" width="0.4842%" height="15" fill="rgb(212,174,34)" fg:x="41555" fg:w="955"/><text x="21.3207%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (955 samples, 0.48%)</title><rect x="21.0707%" y="325" width="0.4842%" height="15" fill="rgb(253,83,4)" fg:x="41555" fg:w="955"/><text x="21.3207%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (955 samples, 0.48%)</title><rect x="21.0707%" y="309" width="0.4842%" height="15" fill="rgb(250,195,49)" fg:x="41555" fg:w="955"/><text x="21.3207%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (631 samples, 0.32%)</title><rect x="21.2350%" y="293" width="0.3200%" height="15" fill="rgb(241,192,25)" fg:x="41879" fg:w="631"/><text x="21.4850%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (195 samples, 0.10%)</title><rect x="21.4561%" y="277" width="0.0989%" height="15" fill="rgb(208,124,10)" fg:x="42315" fg:w="195"/><text x="21.7061%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (105 samples, 0.05%)</title><rect x="21.5549%" y="341" width="0.0532%" height="15" fill="rgb(222,33,0)" fg:x="42510" fg:w="105"/><text x="21.8049%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (96 samples, 0.05%)</title><rect x="21.5595%" y="325" width="0.0487%" height="15" fill="rgb(234,209,28)" fg:x="42519" fg:w="96"/><text x="21.8095%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (96 samples, 0.05%)</title><rect x="21.5595%" y="309" width="0.0487%" height="15" fill="rgb(224,11,23)" fg:x="42519" fg:w="96"/><text x="21.8095%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (96 samples, 0.05%)</title><rect x="21.5595%" y="293" width="0.0487%" height="15" fill="rgb(232,99,1)" fg:x="42519" fg:w="96"/><text x="21.8095%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (135 samples, 0.07%)</title><rect x="21.6508%" y="213" width="0.0685%" height="15" fill="rgb(237,95,45)" fg:x="42699" fg:w="135"/><text x="21.9008%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (204 samples, 0.10%)</title><rect x="21.6330%" y="229" width="0.1034%" height="15" fill="rgb(208,109,11)" fg:x="42664" fg:w="204"/><text x="21.8830%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="21.7192%" y="213" width="0.0172%" height="15" fill="rgb(216,190,48)" fg:x="42834" fg:w="34"/><text x="21.9692%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (1,314 samples, 0.67%)</title><rect x="21.0707%" y="373" width="0.6663%" height="15" fill="rgb(251,171,36)" fg:x="41555" fg:w="1314"/><text x="21.3207%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,314 samples, 0.67%)</title><rect x="21.0707%" y="357" width="0.6663%" height="15" fill="rgb(230,62,22)" fg:x="41555" fg:w="1314"/><text x="21.3207%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (254 samples, 0.13%)</title><rect x="21.6082%" y="341" width="0.1288%" height="15" fill="rgb(225,114,35)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (254 samples, 0.13%)</title><rect x="21.6082%" y="325" width="0.1288%" height="15" fill="rgb(215,118,42)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (254 samples, 0.13%)</title><rect x="21.6082%" y="309" width="0.1288%" height="15" fill="rgb(243,119,21)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (254 samples, 0.13%)</title><rect x="21.6082%" y="293" width="0.1288%" height="15" fill="rgb(252,177,53)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (254 samples, 0.13%)</title><rect x="21.6082%" y="277" width="0.1288%" height="15" fill="rgb(237,209,29)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (254 samples, 0.13%)</title><rect x="21.6082%" y="261" width="0.1288%" height="15" fill="rgb(212,65,23)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (254 samples, 0.13%)</title><rect x="21.6082%" y="245" width="0.1288%" height="15" fill="rgb(230,222,46)" fg:x="42615" fg:w="254"/><text x="21.8582%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.03%)</title><rect x="21.8049%" y="325" width="0.0274%" height="15" fill="rgb(215,135,32)" fg:x="43003" fg:w="54"/><text x="22.0549%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (45 samples, 0.02%)</title><rect x="21.8095%" y="309" width="0.0228%" height="15" fill="rgb(246,101,22)" fg:x="43012" fg:w="45"/><text x="22.0595%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (448 samples, 0.23%)</title><rect x="21.8328%" y="325" width="0.2272%" height="15" fill="rgb(206,107,13)" fg:x="43058" fg:w="448"/><text x="22.0828%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (448 samples, 0.23%)</title><rect x="21.8328%" y="309" width="0.2272%" height="15" fill="rgb(250,100,44)" fg:x="43058" fg:w="448"/><text x="22.0828%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (448 samples, 0.23%)</title><rect x="21.8328%" y="293" width="0.2272%" height="15" fill="rgb(231,147,38)" fg:x="43058" fg:w="448"/><text x="22.0828%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (448 samples, 0.23%)</title><rect x="21.8328%" y="277" width="0.2272%" height="15" fill="rgb(229,8,40)" fg:x="43058" fg:w="448"/><text x="22.0828%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (448 samples, 0.23%)</title><rect x="21.8328%" y="261" width="0.2272%" height="15" fill="rgb(221,135,30)" fg:x="43058" fg:w="448"/><text x="22.0828%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (144 samples, 0.07%)</title><rect x="22.0600%" y="325" width="0.0730%" height="15" fill="rgb(249,193,18)" fg:x="43506" fg:w="144"/><text x="22.3100%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (26 samples, 0.01%)</title><rect x="22.1330%" y="325" width="0.0132%" height="15" fill="rgb(209,133,39)" fg:x="43650" fg:w="26"/><text x="22.3830%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (23 samples, 0.01%)</title><rect x="22.1462%" y="325" width="0.0117%" height="15" fill="rgb(232,100,14)" fg:x="43676" fg:w="23"/><text x="22.3962%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (23 samples, 0.01%)</title><rect x="22.1462%" y="309" width="0.0117%" height="15" fill="rgb(224,185,1)" fg:x="43676" fg:w="23"/><text x="22.3962%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.01%)</title><rect x="22.1462%" y="293" width="0.0117%" height="15" fill="rgb(223,139,8)" fg:x="43676" fg:w="23"/><text x="22.3962%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (224 samples, 0.11%)</title><rect x="22.1578%" y="325" width="0.1136%" height="15" fill="rgb(232,213,38)" fg:x="43699" fg:w="224"/><text x="22.4078%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (224 samples, 0.11%)</title><rect x="22.1578%" y="309" width="0.1136%" height="15" fill="rgb(207,94,22)" fg:x="43699" fg:w="224"/><text x="22.4078%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (139 samples, 0.07%)</title><rect x="22.2714%" y="325" width="0.0705%" height="15" fill="rgb(219,183,54)" fg:x="43923" fg:w="139"/><text x="22.5214%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (139 samples, 0.07%)</title><rect x="22.2714%" y="309" width="0.0705%" height="15" fill="rgb(216,185,54)" fg:x="43923" fg:w="139"/><text x="22.5214%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (139 samples, 0.07%)</title><rect x="22.2714%" y="293" width="0.0705%" height="15" fill="rgb(254,217,39)" fg:x="43923" fg:w="139"/><text x="22.5214%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,226 samples, 0.62%)</title><rect x="21.7370%" y="341" width="0.6217%" height="15" fill="rgb(240,178,23)" fg:x="42869" fg:w="1226"/><text x="21.9870%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (33 samples, 0.02%)</title><rect x="22.3419%" y="325" width="0.0167%" height="15" fill="rgb(218,11,47)" fg:x="44062" fg:w="33"/><text x="22.5919%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,349 samples, 0.68%)</title><rect x="21.7370%" y="357" width="0.6840%" height="15" fill="rgb(218,51,51)" fg:x="42869" fg:w="1349"/><text x="21.9870%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (123 samples, 0.06%)</title><rect x="22.3586%" y="341" width="0.0624%" height="15" fill="rgb(238,126,27)" fg:x="44095" fg:w="123"/><text x="22.6086%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,695 samples, 1.37%)</title><rect x="21.0555%" y="421" width="1.3665%" height="15" fill="rgb(249,202,22)" fg:x="41525" fg:w="2695"/><text x="21.3055%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,695 samples, 1.37%)</title><rect x="21.0555%" y="405" width="1.3665%" height="15" fill="rgb(254,195,49)" fg:x="41525" fg:w="2695"/><text x="21.3055%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,695 samples, 1.37%)</title><rect x="21.0555%" y="389" width="1.3665%" height="15" fill="rgb(208,123,14)" fg:x="41525" fg:w="2695"/><text x="21.3055%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,351 samples, 0.69%)</title><rect x="21.7370%" y="373" width="0.6850%" height="15" fill="rgb(224,200,8)" fg:x="42869" fg:w="1351"/><text x="21.9870%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.01%)</title><rect x="22.4433%" y="357" width="0.0122%" height="15" fill="rgb(217,61,36)" fg:x="44262" fg:w="24"/><text x="22.6933%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.01%)</title><rect x="22.4433%" y="341" width="0.0122%" height="15" fill="rgb(206,35,45)" fg:x="44262" fg:w="24"/><text x="22.6933%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (100 samples, 0.05%)</title><rect x="22.4220%" y="389" width="0.0507%" height="15" fill="rgb(217,65,33)" fg:x="44220" fg:w="100"/><text x="22.6720%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (99 samples, 0.05%)</title><rect x="22.4225%" y="373" width="0.0502%" height="15" fill="rgb(222,158,48)" fg:x="44221" fg:w="99"/><text x="22.6725%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (32 samples, 0.02%)</title><rect x="22.4565%" y="357" width="0.0162%" height="15" fill="rgb(254,2,54)" fg:x="44288" fg:w="32"/><text x="22.7065%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (129 samples, 0.07%)</title><rect x="22.4220%" y="405" width="0.0654%" height="15" fill="rgb(250,143,38)" fg:x="44220" fg:w="129"/><text x="22.6720%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (29 samples, 0.01%)</title><rect x="22.4727%" y="389" width="0.0147%" height="15" fill="rgb(248,25,0)" fg:x="44320" fg:w="29"/><text x="22.7227%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (24 samples, 0.01%)</title><rect x="22.4752%" y="373" width="0.0122%" height="15" fill="rgb(206,152,27)" fg:x="44325" fg:w="24"/><text x="22.7252%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (12,896 samples, 6.54%)</title><rect x="16.0199%" y="437" width="6.5390%" height="15" fill="rgb(240,77,30)" fg:x="31594" fg:w="12896"/><text x="16.2699%" y="447.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (270 samples, 0.14%)</title><rect x="22.4220%" y="421" width="0.1369%" height="15" fill="rgb(231,5,3)" fg:x="44220" fg:w="270"/><text x="22.6720%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (141 samples, 0.07%)</title><rect x="22.4874%" y="405" width="0.0715%" height="15" fill="rgb(207,226,32)" fg:x="44349" fg:w="141"/><text x="22.7374%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (72 samples, 0.04%)</title><rect x="22.5680%" y="437" width="0.0365%" height="15" fill="rgb(222,207,47)" fg:x="44508" fg:w="72"/><text x="22.8180%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (72 samples, 0.04%)</title><rect x="22.5680%" y="421" width="0.0365%" height="15" fill="rgb(229,115,45)" fg:x="44508" fg:w="72"/><text x="22.8180%" y="431.50"></text></g><g><title>core::ptr::read (45 samples, 0.02%)</title><rect x="22.5817%" y="405" width="0.0228%" height="15" fill="rgb(224,191,6)" fg:x="44535" fg:w="45"/><text x="22.8317%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (13,569 samples, 6.88%)</title><rect x="15.7466%" y="453" width="6.8802%" height="15" fill="rgb(230,227,24)" fg:x="31055" fg:w="13569"/><text x="15.9966%" y="463.50">project1:..</text></g><g><title>project1::solver::types::Lit::var (29 samples, 0.01%)</title><rect x="22.6121%" y="437" width="0.0147%" height="15" fill="rgb(228,80,19)" fg:x="44595" fg:w="29"/><text x="22.8621%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (29 samples, 0.01%)</title><rect x="22.6121%" y="421" width="0.0147%" height="15" fill="rgb(247,229,0)" fg:x="44595" fg:w="29"/><text x="22.8621%" y="431.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (44 samples, 0.02%)</title><rect x="22.6583%" y="437" width="0.0223%" height="15" fill="rgb(237,194,15)" fg:x="44686" fg:w="44"/><text x="22.9083%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (44 samples, 0.02%)</title><rect x="22.6583%" y="421" width="0.0223%" height="15" fill="rgb(219,203,20)" fg:x="44686" fg:w="44"/><text x="22.9083%" y="431.50"></text></g><g><title>_int_free (44 samples, 0.02%)</title><rect x="22.6943%" y="245" width="0.0223%" height="15" fill="rgb(234,128,8)" fg:x="44757" fg:w="44"/><text x="22.9443%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (70 samples, 0.04%)</title><rect x="22.6847%" y="325" width="0.0355%" height="15" fill="rgb(248,202,8)" fg:x="44738" fg:w="70"/><text x="22.9347%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (66 samples, 0.03%)</title><rect x="22.6867%" y="309" width="0.0335%" height="15" fill="rgb(206,104,37)" fg:x="44742" fg:w="66"/><text x="22.9367%" y="319.50"></text></g><g><title>__rdl_dealloc (66 samples, 0.03%)</title><rect x="22.6867%" y="293" width="0.0335%" height="15" fill="rgb(223,8,27)" fg:x="44742" fg:w="66"/><text x="22.9367%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (66 samples, 0.03%)</title><rect x="22.6867%" y="277" width="0.0335%" height="15" fill="rgb(216,217,28)" fg:x="44742" fg:w="66"/><text x="22.9367%" y="287.50"></text></g><g><title>__GI___libc_free (66 samples, 0.03%)</title><rect x="22.6867%" y="261" width="0.0335%" height="15" fill="rgb(249,199,1)" fg:x="44742" fg:w="66"/><text x="22.9367%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (76 samples, 0.04%)</title><rect x="22.6831%" y="437" width="0.0385%" height="15" fill="rgb(240,85,17)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (76 samples, 0.04%)</title><rect x="22.6831%" y="421" width="0.0385%" height="15" fill="rgb(206,108,45)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (76 samples, 0.04%)</title><rect x="22.6831%" y="405" width="0.0385%" height="15" fill="rgb(245,210,41)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (76 samples, 0.04%)</title><rect x="22.6831%" y="389" width="0.0385%" height="15" fill="rgb(206,13,37)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.04%)</title><rect x="22.6831%" y="373" width="0.0385%" height="15" fill="rgb(250,61,18)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (76 samples, 0.04%)</title><rect x="22.6831%" y="357" width="0.0385%" height="15" fill="rgb(235,172,48)" fg:x="44735" fg:w="76"/><text x="22.9331%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (73 samples, 0.04%)</title><rect x="22.6847%" y="341" width="0.0370%" height="15" fill="rgb(249,201,17)" fg:x="44738" fg:w="73"/><text x="22.9347%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (83 samples, 0.04%)</title><rect x="22.7343%" y="389" width="0.0421%" height="15" fill="rgb(219,208,6)" fg:x="44836" fg:w="83"/><text x="22.9843%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (24 samples, 0.01%)</title><rect x="22.7643%" y="373" width="0.0122%" height="15" fill="rgb(248,31,23)" fg:x="44895" fg:w="24"/><text x="23.0143%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (24 samples, 0.01%)</title><rect x="22.7643%" y="357" width="0.0122%" height="15" fill="rgb(245,15,42)" fg:x="44895" fg:w="24"/><text x="23.0143%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (106 samples, 0.05%)</title><rect x="22.7298%" y="437" width="0.0537%" height="15" fill="rgb(222,217,39)" fg:x="44827" fg:w="106"/><text x="22.9798%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (106 samples, 0.05%)</title><rect x="22.7298%" y="421" width="0.0537%" height="15" fill="rgb(210,219,27)" fg:x="44827" fg:w="106"/><text x="22.9798%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (97 samples, 0.05%)</title><rect x="22.7343%" y="405" width="0.0492%" height="15" fill="rgb(252,166,36)" fg:x="44836" fg:w="97"/><text x="22.9843%" y="415.50"></text></g><g><title>project1::solver::types::Lit::var (31 samples, 0.02%)</title><rect x="22.7835%" y="437" width="0.0157%" height="15" fill="rgb(245,132,34)" fg:x="44933" fg:w="31"/><text x="23.0335%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30 samples, 0.02%)</title><rect x="22.8662%" y="389" width="0.0152%" height="15" fill="rgb(236,54,3)" fg:x="45096" fg:w="30"/><text x="23.1162%" y="399.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (32 samples, 0.02%)</title><rect x="22.8814%" y="325" width="0.0162%" height="15" fill="rgb(241,173,43)" fg:x="45126" fg:w="32"/><text x="23.1314%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (61 samples, 0.03%)</title><rect x="22.8814%" y="389" width="0.0309%" height="15" fill="rgb(215,190,9)" fg:x="45126" fg:w="61"/><text x="23.1314%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (61 samples, 0.03%)</title><rect x="22.8814%" y="373" width="0.0309%" height="15" fill="rgb(242,101,16)" fg:x="45126" fg:w="61"/><text x="23.1314%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (61 samples, 0.03%)</title><rect x="22.8814%" y="357" width="0.0309%" height="15" fill="rgb(223,190,21)" fg:x="45126" fg:w="61"/><text x="23.1314%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (61 samples, 0.03%)</title><rect x="22.8814%" y="341" width="0.0309%" height="15" fill="rgb(215,228,25)" fg:x="45126" fg:w="61"/><text x="23.1314%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.01%)</title><rect x="22.8976%" y="325" width="0.0147%" height="15" fill="rgb(225,36,22)" fg:x="45158" fg:w="29"/><text x="23.1476%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.02%)</title><rect x="22.9123%" y="373" width="0.0208%" height="15" fill="rgb(251,106,46)" fg:x="45187" fg:w="41"/><text x="23.1623%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.03%)</title><rect x="22.9681%" y="309" width="0.0299%" height="15" fill="rgb(208,90,1)" fg:x="45297" fg:w="59"/><text x="23.2181%" y="319.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (48 samples, 0.02%)</title><rect x="22.9737%" y="293" width="0.0243%" height="15" fill="rgb(243,10,4)" fg:x="45308" fg:w="48"/><text x="23.2237%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.02%)</title><rect x="22.9742%" y="277" width="0.0238%" height="15" fill="rgb(212,137,27)" fg:x="45309" fg:w="47"/><text x="23.2242%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (47 samples, 0.02%)</title><rect x="22.9742%" y="261" width="0.0238%" height="15" fill="rgb(231,220,49)" fg:x="45309" fg:w="47"/><text x="23.2242%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.02%)</title><rect x="22.9980%" y="309" width="0.0193%" height="15" fill="rgb(237,96,20)" fg:x="45356" fg:w="38"/><text x="23.2480%" y="319.50"></text></g><g><title>_int_free (71 samples, 0.04%)</title><rect x="23.0335%" y="165" width="0.0360%" height="15" fill="rgb(239,229,30)" fg:x="45426" fg:w="71"/><text x="23.2835%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (104 samples, 0.05%)</title><rect x="23.0254%" y="245" width="0.0527%" height="15" fill="rgb(219,65,33)" fg:x="45410" fg:w="104"/><text x="23.2754%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (94 samples, 0.05%)</title><rect x="23.0305%" y="229" width="0.0477%" height="15" fill="rgb(243,134,7)" fg:x="45420" fg:w="94"/><text x="23.2805%" y="239.50"></text></g><g><title>__rdl_dealloc (94 samples, 0.05%)</title><rect x="23.0305%" y="213" width="0.0477%" height="15" fill="rgb(216,177,54)" fg:x="45420" fg:w="94"/><text x="23.2805%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (94 samples, 0.05%)</title><rect x="23.0305%" y="197" width="0.0477%" height="15" fill="rgb(211,160,20)" fg:x="45420" fg:w="94"/><text x="23.2805%" y="207.50"></text></g><g><title>__GI___libc_free (94 samples, 0.05%)</title><rect x="23.0305%" y="181" width="0.0477%" height="15" fill="rgb(239,85,39)" fg:x="45420" fg:w="94"/><text x="23.2805%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (116 samples, 0.06%)</title><rect x="23.0244%" y="309" width="0.0588%" height="15" fill="rgb(232,125,22)" fg:x="45408" fg:w="116"/><text x="23.2744%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (116 samples, 0.06%)</title><rect x="23.0244%" y="293" width="0.0588%" height="15" fill="rgb(244,57,34)" fg:x="45408" fg:w="116"/><text x="23.2744%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (116 samples, 0.06%)</title><rect x="23.0244%" y="277" width="0.0588%" height="15" fill="rgb(214,203,32)" fg:x="45408" fg:w="116"/><text x="23.2744%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (114 samples, 0.06%)</title><rect x="23.0254%" y="261" width="0.0578%" height="15" fill="rgb(207,58,43)" fg:x="45410" fg:w="114"/><text x="23.2754%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (46 samples, 0.02%)</title><rect x="23.0832%" y="309" width="0.0233%" height="15" fill="rgb(215,193,15)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="319.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (46 samples, 0.02%)</title><rect x="23.0832%" y="293" width="0.0233%" height="15" fill="rgb(232,15,44)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (46 samples, 0.02%)</title><rect x="23.0832%" y="277" width="0.0233%" height="15" fill="rgb(212,3,48)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (46 samples, 0.02%)</title><rect x="23.0832%" y="261" width="0.0233%" height="15" fill="rgb(218,128,7)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (46 samples, 0.02%)</title><rect x="23.0832%" y="245" width="0.0233%" height="15" fill="rgb(226,216,39)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (46 samples, 0.02%)</title><rect x="23.0832%" y="229" width="0.0233%" height="15" fill="rgb(243,47,51)" fg:x="45524" fg:w="46"/><text x="23.3332%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (76 samples, 0.04%)</title><rect x="23.1466%" y="261" width="0.0385%" height="15" fill="rgb(241,183,40)" fg:x="45649" fg:w="76"/><text x="23.3966%" y="271.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (31 samples, 0.02%)</title><rect x="23.1694%" y="245" width="0.0157%" height="15" fill="rgb(231,217,32)" fg:x="45694" fg:w="31"/><text x="23.4194%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (287 samples, 0.15%)</title><rect x="23.1136%" y="277" width="0.1455%" height="15" fill="rgb(229,61,38)" fg:x="45584" fg:w="287"/><text x="23.3636%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (146 samples, 0.07%)</title><rect x="23.1851%" y="261" width="0.0740%" height="15" fill="rgb(225,210,5)" fg:x="45725" fg:w="146"/><text x="23.4351%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (146 samples, 0.07%)</title><rect x="23.1851%" y="245" width="0.0740%" height="15" fill="rgb(231,79,45)" fg:x="45725" fg:w="146"/><text x="23.4351%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (230 samples, 0.12%)</title><rect x="23.2804%" y="261" width="0.1166%" height="15" fill="rgb(224,100,7)" fg:x="45913" fg:w="230"/><text x="23.5304%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (230 samples, 0.12%)</title><rect x="23.2804%" y="245" width="0.1166%" height="15" fill="rgb(241,198,18)" fg:x="45913" fg:w="230"/><text x="23.5304%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (273 samples, 0.14%)</title><rect x="23.2592%" y="277" width="0.1384%" height="15" fill="rgb(252,97,53)" fg:x="45871" fg:w="273"/><text x="23.5092%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (45 samples, 0.02%)</title><rect x="23.3976%" y="277" width="0.0228%" height="15" fill="rgb(220,88,7)" fg:x="46144" fg:w="45"/><text x="23.6476%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (984 samples, 0.50%)</title><rect x="23.1136%" y="293" width="0.4989%" height="15" fill="rgb(213,176,14)" fg:x="45584" fg:w="984"/><text x="23.3636%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (379 samples, 0.19%)</title><rect x="23.4204%" y="277" width="0.1922%" height="15" fill="rgb(246,73,7)" fg:x="46189" fg:w="379"/><text x="23.6704%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (379 samples, 0.19%)</title><rect x="23.4204%" y="261" width="0.1922%" height="15" fill="rgb(245,64,36)" fg:x="46189" fg:w="379"/><text x="23.6704%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (379 samples, 0.19%)</title><rect x="23.4204%" y="245" width="0.1922%" height="15" fill="rgb(245,80,10)" fg:x="46189" fg:w="379"/><text x="23.6704%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (71 samples, 0.04%)</title><rect x="23.6126%" y="277" width="0.0360%" height="15" fill="rgb(232,107,50)" fg:x="46568" fg:w="71"/><text x="23.8626%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,099 samples, 0.56%)</title><rect x="23.1136%" y="309" width="0.5573%" height="15" fill="rgb(253,3,0)" fg:x="45584" fg:w="1099"/><text x="23.3636%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (115 samples, 0.06%)</title><rect x="23.6126%" y="293" width="0.0583%" height="15" fill="rgb(212,99,53)" fg:x="46568" fg:w="115"/><text x="23.8626%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (44 samples, 0.02%)</title><rect x="23.6486%" y="277" width="0.0223%" height="15" fill="rgb(249,111,54)" fg:x="46639" fg:w="44"/><text x="23.8986%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (29 samples, 0.01%)</title><rect x="23.6709%" y="277" width="0.0147%" height="15" fill="rgb(249,55,30)" fg:x="46683" fg:w="29"/><text x="23.9209%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (29 samples, 0.01%)</title><rect x="23.6709%" y="261" width="0.0147%" height="15" fill="rgb(237,47,42)" fg:x="46683" fg:w="29"/><text x="23.9209%" y="271.50"></text></g><g><title>__memset_evex_unaligned_erms (21 samples, 0.01%)</title><rect x="23.6749%" y="245" width="0.0106%" height="15" fill="rgb(211,20,18)" fg:x="46691" fg:w="21"/><text x="23.9249%" y="255.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (22 samples, 0.01%)</title><rect x="23.6937%" y="261" width="0.0112%" height="15" fill="rgb(231,203,46)" fg:x="46728" fg:w="22"/><text x="23.9437%" y="271.50"></text></g><g><title>__rdl_alloc (345 samples, 0.17%)</title><rect x="23.7079%" y="197" width="0.1749%" height="15" fill="rgb(237,142,3)" fg:x="46756" fg:w="345"/><text x="23.9579%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (345 samples, 0.17%)</title><rect x="23.7079%" y="181" width="0.1749%" height="15" fill="rgb(241,107,1)" fg:x="46756" fg:w="345"/><text x="23.9579%" y="191.50"></text></g><g><title>__GI___libc_malloc (333 samples, 0.17%)</title><rect x="23.7140%" y="165" width="0.1688%" height="15" fill="rgb(229,83,13)" fg:x="46768" fg:w="333"/><text x="23.9640%" y="175.50"></text></g><g><title>tcache_get (242 samples, 0.12%)</title><rect x="23.7601%" y="149" width="0.1227%" height="15" fill="rgb(241,91,40)" fg:x="46859" fg:w="242"/><text x="24.0101%" y="159.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (354 samples, 0.18%)</title><rect x="23.7049%" y="261" width="0.1795%" height="15" fill="rgb(225,3,45)" fg:x="46750" fg:w="354"/><text x="23.9549%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (354 samples, 0.18%)</title><rect x="23.7049%" y="245" width="0.1795%" height="15" fill="rgb(244,223,14)" fg:x="46750" fg:w="354"/><text x="23.9549%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (354 samples, 0.18%)</title><rect x="23.7049%" y="229" width="0.1795%" height="15" fill="rgb(224,124,37)" fg:x="46750" fg:w="354"/><text x="23.9549%" y="239.50"></text></g><g><title>alloc::alloc::alloc (348 samples, 0.18%)</title><rect x="23.7079%" y="213" width="0.1765%" height="15" fill="rgb(251,171,30)" fg:x="46756" fg:w="348"/><text x="23.9579%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (402 samples, 0.20%)</title><rect x="23.6891%" y="277" width="0.2038%" height="15" fill="rgb(236,46,54)" fg:x="46719" fg:w="402"/><text x="23.9391%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,924 samples, 0.98%)</title><rect x="22.9646%" y="325" width="0.9756%" height="15" fill="rgb(245,213,5)" fg:x="45290" fg:w="1924"/><text x="23.2146%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (531 samples, 0.27%)</title><rect x="23.6709%" y="309" width="0.2692%" height="15" fill="rgb(230,144,27)" fg:x="46683" fg:w="531"/><text x="23.9209%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (531 samples, 0.27%)</title><rect x="23.6709%" y="293" width="0.2692%" height="15" fill="rgb(220,86,6)" fg:x="46683" fg:w="531"/><text x="23.9209%" y="303.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (93 samples, 0.05%)</title><rect x="23.8930%" y="277" width="0.0472%" height="15" fill="rgb(240,20,13)" fg:x="47121" fg:w="93"/><text x="24.1430%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (29 samples, 0.01%)</title><rect x="23.9254%" y="261" width="0.0147%" height="15" fill="rgb(217,89,34)" fg:x="47185" fg:w="29"/><text x="24.1754%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (23 samples, 0.01%)</title><rect x="23.9285%" y="245" width="0.0117%" height="15" fill="rgb(229,13,5)" fg:x="47191" fg:w="23"/><text x="24.1785%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,001 samples, 1.01%)</title><rect x="22.9331%" y="373" width="1.0146%" height="15" fill="rgb(244,67,35)" fg:x="45228" fg:w="2001"/><text x="23.1831%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,982 samples, 1.00%)</title><rect x="22.9427%" y="357" width="1.0050%" height="15" fill="rgb(221,40,2)" fg:x="45247" fg:w="1982"/><text x="23.1927%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,969 samples, 1.00%)</title><rect x="22.9493%" y="341" width="0.9984%" height="15" fill="rgb(237,157,21)" fg:x="45260" fg:w="1969"/><text x="23.1993%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (229 samples, 0.12%)</title><rect x="23.9589%" y="357" width="0.1161%" height="15" fill="rgb(222,94,11)" fg:x="47251" fg:w="229"/><text x="24.2089%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (229 samples, 0.12%)</title><rect x="23.9589%" y="341" width="0.1161%" height="15" fill="rgb(249,113,6)" fg:x="47251" fg:w="229"/><text x="24.2089%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (132 samples, 0.07%)</title><rect x="24.0750%" y="357" width="0.0669%" height="15" fill="rgb(238,137,36)" fg:x="47480" fg:w="132"/><text x="24.3250%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (85 samples, 0.04%)</title><rect x="24.1419%" y="357" width="0.0431%" height="15" fill="rgb(210,102,26)" fg:x="47612" fg:w="85"/><text x="24.3919%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (85 samples, 0.04%)</title><rect x="24.1419%" y="341" width="0.0431%" height="15" fill="rgb(218,30,30)" fg:x="47612" fg:w="85"/><text x="24.3919%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (85 samples, 0.04%)</title><rect x="24.1419%" y="325" width="0.0431%" height="15" fill="rgb(214,67,26)" fg:x="47612" fg:w="85"/><text x="24.3919%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.04%)</title><rect x="24.1419%" y="309" width="0.0431%" height="15" fill="rgb(251,9,53)" fg:x="47612" fg:w="85"/><text x="24.3919%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (85 samples, 0.04%)</title><rect x="24.1419%" y="293" width="0.0431%" height="15" fill="rgb(228,204,25)" fg:x="47612" fg:w="85"/><text x="24.3919%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (57 samples, 0.03%)</title><rect x="24.1982%" y="341" width="0.0289%" height="15" fill="rgb(207,153,8)" fg:x="47723" fg:w="57"/><text x="24.4482%" y="351.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (42 samples, 0.02%)</title><rect x="24.2058%" y="325" width="0.0213%" height="15" fill="rgb(242,9,16)" fg:x="47738" fg:w="42"/><text x="24.4558%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (191 samples, 0.10%)</title><rect x="24.1850%" y="357" width="0.0968%" height="15" fill="rgb(217,211,10)" fg:x="47697" fg:w="191"/><text x="24.4350%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (108 samples, 0.05%)</title><rect x="24.2271%" y="341" width="0.0548%" height="15" fill="rgb(219,228,52)" fg:x="47780" fg:w="108"/><text x="24.4771%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (108 samples, 0.05%)</title><rect x="24.2271%" y="325" width="0.0548%" height="15" fill="rgb(231,92,29)" fg:x="47780" fg:w="108"/><text x="24.4771%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (140 samples, 0.07%)</title><rect x="24.2819%" y="341" width="0.0710%" height="15" fill="rgb(232,8,23)" fg:x="47888" fg:w="140"/><text x="24.5319%" y="351.50"></text></g><g><title>hashbrown::raw::is_full (31 samples, 0.02%)</title><rect x="24.3372%" y="325" width="0.0157%" height="15" fill="rgb(216,211,34)" fg:x="47997" fg:w="31"/><text x="24.5872%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (27 samples, 0.01%)</title><rect x="24.3539%" y="341" width="0.0137%" height="15" fill="rgb(236,151,0)" fg:x="48030" fg:w="27"/><text x="24.6039%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (27 samples, 0.01%)</title><rect x="24.3539%" y="325" width="0.0137%" height="15" fill="rgb(209,168,3)" fg:x="48030" fg:w="27"/><text x="24.6039%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (171 samples, 0.09%)</title><rect x="24.2819%" y="357" width="0.0867%" height="15" fill="rgb(208,129,28)" fg:x="47888" fg:w="171"/><text x="24.5319%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (25 samples, 0.01%)</title><rect x="24.3686%" y="357" width="0.0127%" height="15" fill="rgb(229,78,22)" fg:x="48059" fg:w="25"/><text x="24.6186%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (141 samples, 0.07%)</title><rect x="24.3929%" y="357" width="0.0715%" height="15" fill="rgb(228,187,13)" fg:x="48107" fg:w="141"/><text x="24.6429%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (141 samples, 0.07%)</title><rect x="24.3929%" y="341" width="0.0715%" height="15" fill="rgb(240,119,24)" fg:x="48107" fg:w="141"/><text x="24.6429%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (141 samples, 0.07%)</title><rect x="24.3929%" y="325" width="0.0715%" height="15" fill="rgb(209,194,42)" fg:x="48107" fg:w="141"/><text x="24.6429%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (193 samples, 0.10%)</title><rect x="24.4644%" y="357" width="0.0979%" height="15" fill="rgb(247,200,46)" fg:x="48248" fg:w="193"/><text x="24.7144%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (193 samples, 0.10%)</title><rect x="24.4644%" y="341" width="0.0979%" height="15" fill="rgb(218,76,16)" fg:x="48248" fg:w="193"/><text x="24.7144%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3,290 samples, 1.67%)</title><rect x="22.9123%" y="389" width="1.6682%" height="15" fill="rgb(225,21,48)" fg:x="45187" fg:w="3290"/><text x="23.1623%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,248 samples, 0.63%)</title><rect x="23.9477%" y="373" width="0.6328%" height="15" fill="rgb(239,223,50)" fg:x="47229" fg:w="1248"/><text x="24.1977%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (36 samples, 0.02%)</title><rect x="24.5623%" y="357" width="0.0183%" height="15" fill="rgb(244,45,21)" fg:x="48441" fg:w="36"/><text x="24.8123%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 0.02%)</title><rect x="24.5623%" y="341" width="0.0183%" height="15" fill="rgb(232,33,43)" fg:x="48441" fg:w="36"/><text x="24.8123%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.02%)</title><rect x="24.5623%" y="325" width="0.0183%" height="15" fill="rgb(209,8,3)" fg:x="48441" fg:w="36"/><text x="24.8123%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (22 samples, 0.01%)</title><rect x="24.5887%" y="373" width="0.0112%" height="15" fill="rgb(214,25,53)" fg:x="48493" fg:w="22"/><text x="24.8387%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (22 samples, 0.01%)</title><rect x="24.5887%" y="357" width="0.0112%" height="15" fill="rgb(254,186,54)" fg:x="48493" fg:w="22"/><text x="24.8387%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (22 samples, 0.01%)</title><rect x="24.5887%" y="341" width="0.0112%" height="15" fill="rgb(208,174,49)" fg:x="48493" fg:w="22"/><text x="24.8387%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (22 samples, 0.01%)</title><rect x="24.5887%" y="325" width="0.0112%" height="15" fill="rgb(233,191,51)" fg:x="48493" fg:w="22"/><text x="24.8387%" y="335.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (30 samples, 0.02%)</title><rect x="24.6561%" y="357" width="0.0152%" height="15" fill="rgb(222,134,10)" fg:x="48626" fg:w="30"/><text x="24.9061%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (54 samples, 0.03%)</title><rect x="24.6713%" y="357" width="0.0274%" height="15" fill="rgb(230,226,20)" fg:x="48656" fg:w="54"/><text x="24.9213%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (54 samples, 0.03%)</title><rect x="24.6713%" y="341" width="0.0274%" height="15" fill="rgb(251,111,25)" fg:x="48656" fg:w="54"/><text x="24.9213%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (4,099 samples, 2.08%)</title><rect x="22.6269%" y="453" width="2.0784%" height="15" fill="rgb(224,40,46)" fg:x="44624" fg:w="4099"/><text x="22.8769%" y="463.50">p..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3,759 samples, 1.91%)</title><rect x="22.7993%" y="437" width="1.9060%" height="15" fill="rgb(236,108,47)" fg:x="44964" fg:w="3759"/><text x="23.0493%" y="447.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3,759 samples, 1.91%)</title><rect x="22.7993%" y="421" width="1.9060%" height="15" fill="rgb(234,93,0)" fg:x="44964" fg:w="3759"/><text x="23.0493%" y="431.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,678 samples, 1.86%)</title><rect x="22.8403%" y="405" width="1.8650%" height="15" fill="rgb(224,213,32)" fg:x="45045" fg:w="3678"/><text x="23.0903%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (246 samples, 0.12%)</title><rect x="24.5805%" y="389" width="0.1247%" height="15" fill="rgb(251,11,48)" fg:x="48477" fg:w="246"/><text x="24.8305%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (208 samples, 0.11%)</title><rect x="24.5998%" y="373" width="0.1055%" height="15" fill="rgb(236,173,5)" fg:x="48515" fg:w="208"/><text x="24.8498%" y="383.50"></text></g><g><title>__irqentry_text_end (25 samples, 0.01%)</title><rect x="24.7524%" y="357" width="0.0127%" height="15" fill="rgb(230,95,12)" fg:x="48816" fg:w="25"/><text x="25.0024%" y="367.50"></text></g><g><title>charge_memcg (50 samples, 0.03%)</title><rect x="24.8036%" y="229" width="0.0254%" height="15" fill="rgb(232,209,1)" fg:x="48917" fg:w="50"/><text x="25.0536%" y="239.50"></text></g><g><title>try_charge_memcg (20 samples, 0.01%)</title><rect x="24.8189%" y="213" width="0.0101%" height="15" fill="rgb(232,6,1)" fg:x="48947" fg:w="20"/><text x="25.0689%" y="223.50"></text></g><g><title>get_mem_cgroup_from_mm (37 samples, 0.02%)</title><rect x="24.8290%" y="229" width="0.0188%" height="15" fill="rgb(210,224,50)" fg:x="48967" fg:w="37"/><text x="25.0790%" y="239.50"></text></g><g><title>__mem_cgroup_charge (95 samples, 0.05%)</title><rect x="24.8011%" y="245" width="0.0482%" height="15" fill="rgb(228,127,35)" fg:x="48912" fg:w="95"/><text x="25.0511%" y="255.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (20 samples, 0.01%)</title><rect x="24.8508%" y="245" width="0.0101%" height="15" fill="rgb(245,102,45)" fg:x="49010" fg:w="20"/><text x="25.1008%" y="255.50"></text></g><g><title>lru_cache_add (20 samples, 0.01%)</title><rect x="24.8508%" y="229" width="0.0101%" height="15" fill="rgb(214,1,49)" fg:x="49010" fg:w="20"/><text x="25.1008%" y="239.50"></text></g><g><title>folio_add_lru (20 samples, 0.01%)</title><rect x="24.8508%" y="213" width="0.0101%" height="15" fill="rgb(226,163,40)" fg:x="49010" fg:w="20"/><text x="25.1008%" y="223.50"></text></g><g><title>page_add_new_anon_rmap (22 samples, 0.01%)</title><rect x="24.8609%" y="245" width="0.0112%" height="15" fill="rgb(239,212,28)" fg:x="49030" fg:w="22"/><text x="25.1109%" y="255.50"></text></g><g><title>__alloc_pages (59 samples, 0.03%)</title><rect x="24.8767%" y="213" width="0.0299%" height="15" fill="rgb(220,20,13)" fg:x="49061" fg:w="59"/><text x="25.1267%" y="223.50"></text></g><g><title>get_page_from_freelist (52 samples, 0.03%)</title><rect x="24.8802%" y="197" width="0.0264%" height="15" fill="rgb(210,164,35)" fg:x="49068" fg:w="52"/><text x="25.1302%" y="207.50"></text></g><g><title>rmqueue (32 samples, 0.02%)</title><rect x="24.8903%" y="181" width="0.0162%" height="15" fill="rgb(248,109,41)" fg:x="49088" fg:w="32"/><text x="25.1403%" y="191.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (31 samples, 0.02%)</title><rect x="24.8909%" y="165" width="0.0157%" height="15" fill="rgb(238,23,50)" fg:x="49089" fg:w="31"/><text x="25.1409%" y="175.50"></text></g><g><title>__folio_alloc (62 samples, 0.03%)</title><rect x="24.8762%" y="229" width="0.0314%" height="15" fill="rgb(211,48,49)" fg:x="49060" fg:w="62"/><text x="25.1262%" y="239.50"></text></g><g><title>do_anonymous_page (229 samples, 0.12%)</title><rect x="24.7920%" y="261" width="0.1161%" height="15" fill="rgb(223,36,21)" fg:x="48894" fg:w="229"/><text x="25.0420%" y="271.50"></text></g><g><title>vma_alloc_folio (71 samples, 0.04%)</title><rect x="24.8721%" y="245" width="0.0360%" height="15" fill="rgb(207,123,46)" fg:x="49052" fg:w="71"/><text x="25.1221%" y="255.50"></text></g><g><title>handle_pte_fault (250 samples, 0.13%)</title><rect x="24.7834%" y="277" width="0.1268%" height="15" fill="rgb(240,218,32)" fg:x="48877" fg:w="250"/><text x="25.0334%" y="287.50"></text></g><g><title>__handle_mm_fault (270 samples, 0.14%)</title><rect x="24.7737%" y="293" width="0.1369%" height="15" fill="rgb(252,5,43)" fg:x="48858" fg:w="270"/><text x="25.0237%" y="303.50"></text></g><g><title>handle_mm_fault (298 samples, 0.15%)</title><rect x="24.7707%" y="309" width="0.1511%" height="15" fill="rgb(252,84,19)" fg:x="48852" fg:w="298"/><text x="25.0207%" y="319.50"></text></g><g><title>do_user_addr_fault (311 samples, 0.16%)</title><rect x="24.7661%" y="325" width="0.1577%" height="15" fill="rgb(243,152,39)" fg:x="48843" fg:w="311"/><text x="25.0161%" y="335.50"></text></g><g><title>irqentry_exit (44 samples, 0.02%)</title><rect x="24.9238%" y="325" width="0.0223%" height="15" fill="rgb(234,160,15)" fg:x="49154" fg:w="44"/><text x="25.1738%" y="335.50"></text></g><g><title>irqentry_exit_to_user_mode (42 samples, 0.02%)</title><rect x="24.9248%" y="309" width="0.0213%" height="15" fill="rgb(237,34,20)" fg:x="49156" fg:w="42"/><text x="25.1748%" y="319.50"></text></g><g><title>asm_exc_page_fault (359 samples, 0.18%)</title><rect x="24.7651%" y="357" width="0.1820%" height="15" fill="rgb(229,97,13)" fg:x="48841" fg:w="359"/><text x="25.0151%" y="367.50"></text></g><g><title>exc_page_fault (359 samples, 0.18%)</title><rect x="24.7651%" y="341" width="0.1820%" height="15" fill="rgb(234,71,50)" fg:x="48841" fg:w="359"/><text x="25.0151%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (447 samples, 0.23%)</title><rect x="24.7286%" y="389" width="0.2267%" height="15" fill="rgb(253,155,4)" fg:x="48769" fg:w="447"/><text x="24.9786%" y="399.50"></text></g><g><title>core::ptr::write (439 samples, 0.22%)</title><rect x="24.7327%" y="373" width="0.2226%" height="15" fill="rgb(222,185,37)" fg:x="48777" fg:w="439"/><text x="24.9827%" y="383.50"></text></g><g><title>_int_malloc (174 samples, 0.09%)</title><rect x="25.0526%" y="133" width="0.0882%" height="15" fill="rgb(251,177,13)" fg:x="49408" fg:w="174"/><text x="25.3026%" y="143.50"></text></g><g><title>sysmalloc (39 samples, 0.02%)</title><rect x="25.1211%" y="117" width="0.0198%" height="15" fill="rgb(250,179,40)" fg:x="49543" fg:w="39"/><text x="25.3711%" y="127.50"></text></g><g><title>__rdl_alloc (376 samples, 0.19%)</title><rect x="24.9558%" y="181" width="0.1907%" height="15" fill="rgb(242,44,2)" fg:x="49217" fg:w="376"/><text x="25.2058%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (376 samples, 0.19%)</title><rect x="24.9558%" y="165" width="0.1907%" height="15" fill="rgb(216,177,13)" fg:x="49217" fg:w="376"/><text x="25.2058%" y="175.50"></text></g><g><title>__GI___libc_malloc (375 samples, 0.19%)</title><rect x="24.9563%" y="149" width="0.1901%" height="15" fill="rgb(216,106,43)" fg:x="49218" fg:w="375"/><text x="25.2063%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (380 samples, 0.19%)</title><rect x="24.9558%" y="229" width="0.1927%" height="15" fill="rgb(216,183,2)" fg:x="49217" fg:w="380"/><text x="25.2058%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (380 samples, 0.19%)</title><rect x="24.9558%" y="213" width="0.1927%" height="15" fill="rgb(249,75,3)" fg:x="49217" fg:w="380"/><text x="25.2058%" y="223.50"></text></g><g><title>alloc::alloc::alloc (380 samples, 0.19%)</title><rect x="24.9558%" y="197" width="0.1927%" height="15" fill="rgb(219,67,39)" fg:x="49217" fg:w="380"/><text x="25.2058%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (382 samples, 0.19%)</title><rect x="24.9558%" y="277" width="0.1937%" height="15" fill="rgb(253,228,2)" fg:x="49217" fg:w="382"/><text x="25.2058%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (382 samples, 0.19%)</title><rect x="24.9558%" y="261" width="0.1937%" height="15" fill="rgb(235,138,27)" fg:x="49217" fg:w="382"/><text x="25.2058%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (382 samples, 0.19%)</title><rect x="24.9558%" y="245" width="0.1937%" height="15" fill="rgb(236,97,51)" fg:x="49217" fg:w="382"/><text x="25.2058%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (414 samples, 0.21%)</title><rect x="24.9558%" y="293" width="0.2099%" height="15" fill="rgb(240,80,30)" fg:x="49217" fg:w="414"/><text x="25.2058%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32 samples, 0.02%)</title><rect x="25.1495%" y="277" width="0.0162%" height="15" fill="rgb(230,178,19)" fg:x="49599" fg:w="32"/><text x="25.3995%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.02%)</title><rect x="25.1495%" y="261" width="0.0162%" height="15" fill="rgb(210,190,27)" fg:x="49599" fg:w="32"/><text x="25.3995%" y="271.50"></text></g><g><title>__memcpy_evex_unaligned_erms (30 samples, 0.02%)</title><rect x="25.1505%" y="245" width="0.0152%" height="15" fill="rgb(222,107,31)" fg:x="49601" fg:w="30"/><text x="25.4005%" y="255.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (416 samples, 0.21%)</title><rect x="24.9553%" y="373" width="0.2109%" height="15" fill="rgb(216,127,34)" fg:x="49216" fg:w="416"/><text x="25.2053%" y="383.50"></text></g><g><title>project1::solver::clause::Clause::with_key (415 samples, 0.21%)</title><rect x="24.9558%" y="357" width="0.2104%" height="15" fill="rgb(234,116,52)" fg:x="49217" fg:w="415"/><text x="25.2058%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (415 samples, 0.21%)</title><rect x="24.9558%" y="341" width="0.2104%" height="15" fill="rgb(222,124,15)" fg:x="49217" fg:w="415"/><text x="25.2058%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (415 samples, 0.21%)</title><rect x="24.9558%" y="325" width="0.2104%" height="15" fill="rgb(231,179,28)" fg:x="49217" fg:w="415"/><text x="25.2058%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (415 samples, 0.21%)</title><rect x="24.9558%" y="309" width="0.2104%" height="15" fill="rgb(226,93,45)" fg:x="49217" fg:w="415"/><text x="25.2058%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (912 samples, 0.46%)</title><rect x="24.7053%" y="453" width="0.4624%" height="15" fill="rgb(215,8,51)" fg:x="48723" fg:w="912"/><text x="24.9553%" y="463.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (912 samples, 0.46%)</title><rect x="24.7053%" y="437" width="0.4624%" height="15" fill="rgb(223,106,5)" fg:x="48723" fg:w="912"/><text x="24.9553%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (912 samples, 0.46%)</title><rect x="24.7053%" y="421" width="0.4624%" height="15" fill="rgb(250,191,5)" fg:x="48723" fg:w="912"/><text x="24.9553%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (883 samples, 0.45%)</title><rect x="24.7200%" y="405" width="0.4477%" height="15" fill="rgb(242,132,44)" fg:x="48752" fg:w="883"/><text x="24.9700%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (419 samples, 0.21%)</title><rect x="24.9553%" y="389" width="0.2125%" height="15" fill="rgb(251,152,29)" fg:x="49216" fg:w="419"/><text x="25.2053%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (68 samples, 0.03%)</title><rect x="25.1936%" y="421" width="0.0345%" height="15" fill="rgb(218,179,5)" fg:x="49686" fg:w="68"/><text x="25.4436%" y="431.50"></text></g><g><title>core::ptr::read (60 samples, 0.03%)</title><rect x="25.1976%" y="405" width="0.0304%" height="15" fill="rgb(227,67,19)" fg:x="49694" fg:w="60"/><text x="25.4476%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="25.2280%" y="309" width="0.0340%" height="15" fill="rgb(233,119,31)" fg:x="49754" fg:w="67"/><text x="25.4780%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="25.2280%" y="293" width="0.0340%" height="15" fill="rgb(241,120,22)" fg:x="49754" fg:w="67"/><text x="25.4780%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (67 samples, 0.03%)</title><rect x="25.2280%" y="277" width="0.0340%" height="15" fill="rgb(224,102,30)" fg:x="49754" fg:w="67"/><text x="25.4780%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (44 samples, 0.02%)</title><rect x="25.2397%" y="261" width="0.0223%" height="15" fill="rgb(210,164,37)" fg:x="49777" fg:w="44"/><text x="25.4897%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (83 samples, 0.04%)</title><rect x="25.2280%" y="341" width="0.0421%" height="15" fill="rgb(226,191,16)" fg:x="49754" fg:w="83"/><text x="25.4780%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (83 samples, 0.04%)</title><rect x="25.2280%" y="325" width="0.0421%" height="15" fill="rgb(214,40,45)" fg:x="49754" fg:w="83"/><text x="25.4780%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (32 samples, 0.02%)</title><rect x="25.2757%" y="277" width="0.0162%" height="15" fill="rgb(244,29,26)" fg:x="49848" fg:w="32"/><text x="25.5257%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (32 samples, 0.02%)</title><rect x="25.2757%" y="261" width="0.0162%" height="15" fill="rgb(216,16,5)" fg:x="49848" fg:w="32"/><text x="25.5257%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.02%)</title><rect x="25.2757%" y="245" width="0.0162%" height="15" fill="rgb(249,76,35)" fg:x="49848" fg:w="32"/><text x="25.5257%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (32 samples, 0.02%)</title><rect x="25.2757%" y="229" width="0.0162%" height="15" fill="rgb(207,11,44)" fg:x="49848" fg:w="32"/><text x="25.5257%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (37 samples, 0.02%)</title><rect x="25.2757%" y="293" width="0.0188%" height="15" fill="rgb(228,190,49)" fg:x="49848" fg:w="37"/><text x="25.5257%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (78 samples, 0.04%)</title><rect x="25.2701%" y="325" width="0.0396%" height="15" fill="rgb(214,173,12)" fg:x="49837" fg:w="78"/><text x="25.5201%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (78 samples, 0.04%)</title><rect x="25.2701%" y="309" width="0.0396%" height="15" fill="rgb(218,26,35)" fg:x="49837" fg:w="78"/><text x="25.5201%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (56 samples, 0.03%)</title><rect x="25.3097%" y="293" width="0.0284%" height="15" fill="rgb(220,200,19)" fg:x="49915" fg:w="56"/><text x="25.5597%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (219 samples, 0.11%)</title><rect x="25.2280%" y="421" width="0.1110%" height="15" fill="rgb(239,95,49)" fg:x="49754" fg:w="219"/><text x="25.4780%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (219 samples, 0.11%)</title><rect x="25.2280%" y="405" width="0.1110%" height="15" fill="rgb(235,85,53)" fg:x="49754" fg:w="219"/><text x="25.4780%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (219 samples, 0.11%)</title><rect x="25.2280%" y="389" width="0.1110%" height="15" fill="rgb(233,133,31)" fg:x="49754" fg:w="219"/><text x="25.4780%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (219 samples, 0.11%)</title><rect x="25.2280%" y="373" width="0.1110%" height="15" fill="rgb(218,25,20)" fg:x="49754" fg:w="219"/><text x="25.4780%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (219 samples, 0.11%)</title><rect x="25.2280%" y="357" width="0.1110%" height="15" fill="rgb(252,210,38)" fg:x="49754" fg:w="219"/><text x="25.4780%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (136 samples, 0.07%)</title><rect x="25.2701%" y="341" width="0.0690%" height="15" fill="rgb(242,134,21)" fg:x="49837" fg:w="136"/><text x="25.5201%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (58 samples, 0.03%)</title><rect x="25.3097%" y="325" width="0.0294%" height="15" fill="rgb(213,28,48)" fg:x="49915" fg:w="58"/><text x="25.5597%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (58 samples, 0.03%)</title><rect x="25.3097%" y="309" width="0.0294%" height="15" fill="rgb(250,196,2)" fg:x="49915" fg:w="58"/><text x="25.5597%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (146 samples, 0.07%)</title><rect x="25.3472%" y="389" width="0.0740%" height="15" fill="rgb(227,5,17)" fg:x="49989" fg:w="146"/><text x="25.5972%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (20 samples, 0.01%)</title><rect x="25.4527%" y="181" width="0.0101%" height="15" fill="rgb(221,226,24)" fg:x="50197" fg:w="20"/><text x="25.7027%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (74 samples, 0.04%)</title><rect x="25.4309%" y="245" width="0.0375%" height="15" fill="rgb(211,5,48)" fg:x="50154" fg:w="74"/><text x="25.6809%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (74 samples, 0.04%)</title><rect x="25.4309%" y="229" width="0.0375%" height="15" fill="rgb(219,150,6)" fg:x="50154" fg:w="74"/><text x="25.6809%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (74 samples, 0.04%)</title><rect x="25.4309%" y="213" width="0.0375%" height="15" fill="rgb(251,46,16)" fg:x="50154" fg:w="74"/><text x="25.6809%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (46 samples, 0.02%)</title><rect x="25.4451%" y="197" width="0.0233%" height="15" fill="rgb(220,204,40)" fg:x="50182" fg:w="46"/><text x="25.6951%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (98 samples, 0.05%)</title><rect x="25.4309%" y="277" width="0.0497%" height="15" fill="rgb(211,85,2)" fg:x="50154" fg:w="98"/><text x="25.6809%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (98 samples, 0.05%)</title><rect x="25.4309%" y="261" width="0.0497%" height="15" fill="rgb(229,17,7)" fg:x="50154" fg:w="98"/><text x="25.6809%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (48 samples, 0.02%)</title><rect x="25.4877%" y="213" width="0.0243%" height="15" fill="rgb(239,72,28)" fg:x="50266" fg:w="48"/><text x="25.7377%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (48 samples, 0.02%)</title><rect x="25.4877%" y="197" width="0.0243%" height="15" fill="rgb(230,47,54)" fg:x="50266" fg:w="48"/><text x="25.7377%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (48 samples, 0.02%)</title><rect x="25.4877%" y="181" width="0.0243%" height="15" fill="rgb(214,50,8)" fg:x="50266" fg:w="48"/><text x="25.7377%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (48 samples, 0.02%)</title><rect x="25.4877%" y="165" width="0.0243%" height="15" fill="rgb(216,198,43)" fg:x="50266" fg:w="48"/><text x="25.7377%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (55 samples, 0.03%)</title><rect x="25.4877%" y="229" width="0.0279%" height="15" fill="rgb(234,20,35)" fg:x="50266" fg:w="55"/><text x="25.7377%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (103 samples, 0.05%)</title><rect x="25.4806%" y="245" width="0.0522%" height="15" fill="rgb(254,45,19)" fg:x="50252" fg:w="103"/><text x="25.7306%" y="255.50"></text></g><g><title>core::mem::drop (212 samples, 0.11%)</title><rect x="25.4263%" y="373" width="0.1075%" height="15" fill="rgb(219,14,44)" fg:x="50145" fg:w="212"/><text x="25.6763%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (212 samples, 0.11%)</title><rect x="25.4263%" y="357" width="0.1075%" height="15" fill="rgb(217,220,26)" fg:x="50145" fg:w="212"/><text x="25.6763%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (212 samples, 0.11%)</title><rect x="25.4263%" y="341" width="0.1075%" height="15" fill="rgb(213,158,28)" fg:x="50145" fg:w="212"/><text x="25.6763%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (204 samples, 0.10%)</title><rect x="25.4304%" y="325" width="0.1034%" height="15" fill="rgb(252,51,52)" fg:x="50153" fg:w="204"/><text x="25.6804%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (204 samples, 0.10%)</title><rect x="25.4304%" y="309" width="0.1034%" height="15" fill="rgb(246,89,16)" fg:x="50153" fg:w="204"/><text x="25.6804%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (204 samples, 0.10%)</title><rect x="25.4304%" y="293" width="0.1034%" height="15" fill="rgb(216,158,49)" fg:x="50153" fg:w="204"/><text x="25.6804%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (105 samples, 0.05%)</title><rect x="25.4806%" y="277" width="0.0532%" height="15" fill="rgb(236,107,19)" fg:x="50252" fg:w="105"/><text x="25.7306%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (105 samples, 0.05%)</title><rect x="25.4806%" y="261" width="0.0532%" height="15" fill="rgb(228,185,30)" fg:x="50252" fg:w="105"/><text x="25.7306%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 0.04%)</title><rect x="25.5597%" y="325" width="0.0406%" height="15" fill="rgb(246,134,8)" fg:x="50408" fg:w="80"/><text x="25.8097%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.01%)</title><rect x="25.6048%" y="197" width="0.0106%" height="15" fill="rgb(214,143,50)" fg:x="50497" fg:w="21"/><text x="25.8548%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23 samples, 0.01%)</title><rect x="25.6210%" y="181" width="0.0117%" height="15" fill="rgb(228,75,8)" fg:x="50529" fg:w="23"/><text x="25.8710%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="25.6012%" y="245" width="0.0345%" height="15" fill="rgb(207,175,4)" fg:x="50490" fg:w="68"/><text x="25.8512%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="25.6012%" y="229" width="0.0345%" height="15" fill="rgb(205,108,24)" fg:x="50490" fg:w="68"/><text x="25.8512%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (68 samples, 0.03%)</title><rect x="25.6012%" y="213" width="0.0345%" height="15" fill="rgb(244,120,49)" fg:x="50490" fg:w="68"/><text x="25.8512%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (40 samples, 0.02%)</title><rect x="25.6154%" y="197" width="0.0203%" height="15" fill="rgb(223,47,38)" fg:x="50518" fg:w="40"/><text x="25.8654%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (86 samples, 0.04%)</title><rect x="25.6012%" y="277" width="0.0436%" height="15" fill="rgb(229,179,11)" fg:x="50490" fg:w="86"/><text x="25.8512%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (86 samples, 0.04%)</title><rect x="25.6012%" y="261" width="0.0436%" height="15" fill="rgb(231,122,1)" fg:x="50490" fg:w="86"/><text x="25.8512%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25 samples, 0.01%)</title><rect x="25.6448%" y="261" width="0.0127%" height="15" fill="rgb(245,119,9)" fg:x="50576" fg:w="25"/><text x="25.8948%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (25 samples, 0.01%)</title><rect x="25.6448%" y="245" width="0.0127%" height="15" fill="rgb(241,163,25)" fg:x="50576" fg:w="25"/><text x="25.8948%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (203 samples, 0.10%)</title><rect x="25.5597%" y="357" width="0.1029%" height="15" fill="rgb(217,214,3)" fg:x="50408" fg:w="203"/><text x="25.8097%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.10%)</title><rect x="25.5597%" y="341" width="0.1029%" height="15" fill="rgb(240,86,28)" fg:x="50408" fg:w="203"/><text x="25.8097%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (121 samples, 0.06%)</title><rect x="25.6012%" y="325" width="0.0614%" height="15" fill="rgb(215,47,9)" fg:x="50490" fg:w="121"/><text x="25.8512%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (121 samples, 0.06%)</title><rect x="25.6012%" y="309" width="0.0614%" height="15" fill="rgb(252,25,45)" fg:x="50490" fg:w="121"/><text x="25.8512%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (121 samples, 0.06%)</title><rect x="25.6012%" y="293" width="0.0614%" height="15" fill="rgb(251,164,9)" fg:x="50490" fg:w="121"/><text x="25.8512%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (35 samples, 0.02%)</title><rect x="25.6448%" y="277" width="0.0177%" height="15" fill="rgb(233,194,0)" fg:x="50576" fg:w="35"/><text x="25.8948%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (254 samples, 0.13%)</title><rect x="25.5414%" y="373" width="0.1288%" height="15" fill="rgb(249,111,24)" fg:x="50372" fg:w="254"/><text x="25.7914%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.02%)</title><rect x="25.7341%" y="213" width="0.0177%" height="15" fill="rgb(250,223,3)" fg:x="50752" fg:w="35"/><text x="25.9841%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (36 samples, 0.02%)</title><rect x="25.7518%" y="213" width="0.0183%" height="15" fill="rgb(236,178,37)" fg:x="50787" fg:w="36"/><text x="26.0018%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (96 samples, 0.05%)</title><rect x="25.7219%" y="229" width="0.0487%" height="15" fill="rgb(241,158,50)" fg:x="50728" fg:w="96"/><text x="25.9719%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (129 samples, 0.07%)</title><rect x="25.8046%" y="213" width="0.0654%" height="15" fill="rgb(213,121,41)" fg:x="50891" fg:w="129"/><text x="26.0546%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (422 samples, 0.21%)</title><rect x="25.6910%" y="277" width="0.2140%" height="15" fill="rgb(240,92,3)" fg:x="50667" fg:w="422"/><text x="25.9410%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (422 samples, 0.21%)</title><rect x="25.6910%" y="261" width="0.2140%" height="15" fill="rgb(205,123,3)" fg:x="50667" fg:w="422"/><text x="25.9410%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (422 samples, 0.21%)</title><rect x="25.6910%" y="245" width="0.2140%" height="15" fill="rgb(205,97,47)" fg:x="50667" fg:w="422"/><text x="25.9410%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (265 samples, 0.13%)</title><rect x="25.7706%" y="229" width="0.1344%" height="15" fill="rgb(247,152,14)" fg:x="50824" fg:w="265"/><text x="26.0206%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (69 samples, 0.03%)</title><rect x="25.8700%" y="213" width="0.0350%" height="15" fill="rgb(248,195,53)" fg:x="51020" fg:w="69"/><text x="26.1200%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (26 samples, 0.01%)</title><rect x="25.9050%" y="277" width="0.0132%" height="15" fill="rgb(226,201,16)" fg:x="51089" fg:w="26"/><text x="26.1550%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (20 samples, 0.01%)</title><rect x="25.9080%" y="261" width="0.0101%" height="15" fill="rgb(205,98,0)" fg:x="51095" fg:w="20"/><text x="26.1580%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (20 samples, 0.01%)</title><rect x="25.9080%" y="245" width="0.0101%" height="15" fill="rgb(214,191,48)" fg:x="51095" fg:w="20"/><text x="26.1580%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (20 samples, 0.01%)</title><rect x="25.9080%" y="229" width="0.0101%" height="15" fill="rgb(237,112,39)" fg:x="51095" fg:w="20"/><text x="26.1580%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.02%)</title><rect x="25.9415%" y="149" width="0.0177%" height="15" fill="rgb(247,203,27)" fg:x="51161" fg:w="35"/><text x="26.1915%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (564 samples, 0.29%)</title><rect x="25.6910%" y="309" width="0.2860%" height="15" fill="rgb(235,124,28)" fg:x="50667" fg:w="564"/><text x="25.9410%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (564 samples, 0.29%)</title><rect x="25.6910%" y="293" width="0.2860%" height="15" fill="rgb(208,207,46)" fg:x="50667" fg:w="564"/><text x="25.9410%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (116 samples, 0.06%)</title><rect x="25.9182%" y="277" width="0.0588%" height="15" fill="rgb(234,176,4)" fg:x="51115" fg:w="116"/><text x="26.1682%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (116 samples, 0.06%)</title><rect x="25.9182%" y="261" width="0.0588%" height="15" fill="rgb(230,133,28)" fg:x="51115" fg:w="116"/><text x="26.1682%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (102 samples, 0.05%)</title><rect x="25.9252%" y="245" width="0.0517%" height="15" fill="rgb(211,137,40)" fg:x="51129" fg:w="102"/><text x="26.1752%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (102 samples, 0.05%)</title><rect x="25.9252%" y="229" width="0.0517%" height="15" fill="rgb(254,35,13)" fg:x="51129" fg:w="102"/><text x="26.1752%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (102 samples, 0.05%)</title><rect x="25.9252%" y="213" width="0.0517%" height="15" fill="rgb(225,49,51)" fg:x="51129" fg:w="102"/><text x="26.1752%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (102 samples, 0.05%)</title><rect x="25.9252%" y="197" width="0.0517%" height="15" fill="rgb(251,10,15)" fg:x="51129" fg:w="102"/><text x="26.1752%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (102 samples, 0.05%)</title><rect x="25.9252%" y="181" width="0.0517%" height="15" fill="rgb(228,207,15)" fg:x="51129" fg:w="102"/><text x="26.1752%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (89 samples, 0.05%)</title><rect x="25.9318%" y="165" width="0.0451%" height="15" fill="rgb(241,99,19)" fg:x="51142" fg:w="89"/><text x="26.1818%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="25.9592%" y="149" width="0.0177%" height="15" fill="rgb(207,104,49)" fg:x="51196" fg:w="35"/><text x="26.2092%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (135 samples, 0.07%)</title><rect x="26.0054%" y="245" width="0.0685%" height="15" fill="rgb(234,99,18)" fg:x="51287" fg:w="135"/><text x="26.2554%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (135 samples, 0.07%)</title><rect x="26.0054%" y="229" width="0.0685%" height="15" fill="rgb(213,191,49)" fg:x="51287" fg:w="135"/><text x="26.2554%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.07%)</title><rect x="26.0054%" y="213" width="0.0685%" height="15" fill="rgb(210,226,19)" fg:x="51287" fg:w="135"/><text x="26.2554%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (135 samples, 0.07%)</title><rect x="26.0054%" y="197" width="0.0685%" height="15" fill="rgb(229,97,18)" fg:x="51287" fg:w="135"/><text x="26.2554%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (166 samples, 0.08%)</title><rect x="26.0054%" y="261" width="0.0842%" height="15" fill="rgb(211,167,15)" fg:x="51287" fg:w="166"/><text x="26.2554%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (31 samples, 0.02%)</title><rect x="26.0738%" y="245" width="0.0157%" height="15" fill="rgb(210,169,34)" fg:x="51422" fg:w="31"/><text x="26.3238%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (31 samples, 0.02%)</title><rect x="26.0738%" y="229" width="0.0157%" height="15" fill="rgb(241,121,31)" fg:x="51422" fg:w="31"/><text x="26.3238%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (31 samples, 0.02%)</title><rect x="26.0738%" y="213" width="0.0157%" height="15" fill="rgb(232,40,11)" fg:x="51422" fg:w="31"/><text x="26.3238%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.02%)</title><rect x="26.0738%" y="197" width="0.0157%" height="15" fill="rgb(205,86,26)" fg:x="51422" fg:w="31"/><text x="26.3238%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (79 samples, 0.04%)</title><rect x="26.0895%" y="261" width="0.0401%" height="15" fill="rgb(231,126,28)" fg:x="51453" fg:w="79"/><text x="26.3395%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (22 samples, 0.01%)</title><rect x="26.1296%" y="261" width="0.0112%" height="15" fill="rgb(219,221,18)" fg:x="51532" fg:w="22"/><text x="26.3796%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (64 samples, 0.03%)</title><rect x="26.1407%" y="261" width="0.0325%" height="15" fill="rgb(211,40,0)" fg:x="51554" fg:w="64"/><text x="26.3907%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (64 samples, 0.03%)</title><rect x="26.1407%" y="245" width="0.0325%" height="15" fill="rgb(239,85,43)" fg:x="51554" fg:w="64"/><text x="26.3907%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.03%)</title><rect x="26.1407%" y="229" width="0.0325%" height="15" fill="rgb(231,55,21)" fg:x="51554" fg:w="64"/><text x="26.3907%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (98 samples, 0.05%)</title><rect x="26.1732%" y="261" width="0.0497%" height="15" fill="rgb(225,184,43)" fg:x="51618" fg:w="98"/><text x="26.4232%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (98 samples, 0.05%)</title><rect x="26.1732%" y="245" width="0.0497%" height="15" fill="rgb(251,158,41)" fg:x="51618" fg:w="98"/><text x="26.4232%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (490 samples, 0.25%)</title><rect x="25.9770%" y="277" width="0.2485%" height="15" fill="rgb(234,159,37)" fg:x="51231" fg:w="490"/><text x="26.2270%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (509 samples, 0.26%)</title><rect x="25.9770%" y="293" width="0.2581%" height="15" fill="rgb(216,204,22)" fg:x="51231" fg:w="509"/><text x="26.2270%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (1,116 samples, 0.57%)</title><rect x="25.6702%" y="373" width="0.5659%" height="15" fill="rgb(214,17,3)" fg:x="50626" fg:w="1116"/><text x="25.9202%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,079 samples, 0.55%)</title><rect x="25.6890%" y="357" width="0.5471%" height="15" fill="rgb(212,111,17)" fg:x="50663" fg:w="1079"/><text x="25.9390%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,079 samples, 0.55%)</title><rect x="25.6890%" y="341" width="0.5471%" height="15" fill="rgb(221,157,24)" fg:x="50663" fg:w="1079"/><text x="25.9390%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,079 samples, 0.55%)</title><rect x="25.6890%" y="325" width="0.5471%" height="15" fill="rgb(252,16,13)" fg:x="50663" fg:w="1079"/><text x="25.9390%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (511 samples, 0.26%)</title><rect x="25.9770%" y="309" width="0.2591%" height="15" fill="rgb(221,62,2)" fg:x="51231" fg:w="511"/><text x="26.2270%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,777 samples, 0.90%)</title><rect x="25.3391%" y="421" width="0.9010%" height="15" fill="rgb(247,87,22)" fg:x="49973" fg:w="1777"/><text x="25.5891%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (1,777 samples, 0.90%)</title><rect x="25.3391%" y="405" width="0.9010%" height="15" fill="rgb(215,73,9)" fg:x="49973" fg:w="1777"/><text x="25.5891%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (1,615 samples, 0.82%)</title><rect x="25.4212%" y="389" width="0.8189%" height="15" fill="rgb(207,175,33)" fg:x="50135" fg:w="1615"/><text x="25.6712%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2,082 samples, 1.06%)</title><rect x="25.1880%" y="437" width="1.0557%" height="15" fill="rgb(243,129,54)" fg:x="49675" fg:w="2082"/><text x="25.4380%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (2,116 samples, 1.07%)</title><rect x="25.1718%" y="453" width="1.0729%" height="15" fill="rgb(227,119,45)" fg:x="49643" fg:w="2116"/><text x="25.4218%" y="463.50"></text></g><g><title>__mem_cgroup_charge (22 samples, 0.01%)</title><rect x="26.2594%" y="85" width="0.0112%" height="15" fill="rgb(205,109,36)" fg:x="51788" fg:w="22"/><text x="26.5094%" y="95.50"></text></g><g><title>do_anonymous_page (45 samples, 0.02%)</title><rect x="26.2564%" y="101" width="0.0228%" height="15" fill="rgb(205,6,39)" fg:x="51782" fg:w="45"/><text x="26.5064%" y="111.50"></text></g><g><title>__handle_mm_fault (54 samples, 0.03%)</title><rect x="26.2533%" y="133" width="0.0274%" height="15" fill="rgb(221,32,16)" fg:x="51776" fg:w="54"/><text x="26.5033%" y="143.50"></text></g><g><title>handle_pte_fault (52 samples, 0.03%)</title><rect x="26.2543%" y="117" width="0.0264%" height="15" fill="rgb(228,144,50)" fg:x="51778" fg:w="52"/><text x="26.5043%" y="127.50"></text></g><g><title>handle_mm_fault (59 samples, 0.03%)</title><rect x="26.2528%" y="149" width="0.0299%" height="15" fill="rgb(229,201,53)" fg:x="51775" fg:w="59"/><text x="26.5028%" y="159.50"></text></g><g><title>do_user_addr_fault (63 samples, 0.03%)</title><rect x="26.2518%" y="165" width="0.0319%" height="15" fill="rgb(249,153,27)" fg:x="51773" fg:w="63"/><text x="26.5018%" y="175.50"></text></g><g><title>exc_page_fault (65 samples, 0.03%)</title><rect x="26.2518%" y="181" width="0.0330%" height="15" fill="rgb(227,106,25)" fg:x="51773" fg:w="65"/><text x="26.5018%" y="191.50"></text></g><g><title>asm_exc_page_fault (66 samples, 0.03%)</title><rect x="26.2518%" y="197" width="0.0335%" height="15" fill="rgb(230,65,29)" fg:x="51773" fg:w="66"/><text x="26.5018%" y="207.50"></text></g><g><title>perf_event_mmap (51 samples, 0.03%)</title><rect x="26.2964%" y="85" width="0.0259%" height="15" fill="rgb(221,57,46)" fg:x="51861" fg:w="51"/><text x="26.5464%" y="95.50"></text></g><g><title>perf_event_mmap_event (51 samples, 0.03%)</title><rect x="26.2964%" y="69" width="0.0259%" height="15" fill="rgb(229,161,17)" fg:x="51861" fg:w="51"/><text x="26.5464%" y="79.50"></text></g><g><title>perf_iterate_sb (49 samples, 0.02%)</title><rect x="26.2974%" y="53" width="0.0248%" height="15" fill="rgb(222,213,11)" fg:x="51863" fg:w="49"/><text x="26.5474%" y="63.50"></text></g><g><title>perf_iterate_ctx (47 samples, 0.02%)</title><rect x="26.2984%" y="37" width="0.0238%" height="15" fill="rgb(235,35,13)" fg:x="51865" fg:w="47"/><text x="26.5484%" y="47.50"></text></g><g><title>mprotect_fixup (66 samples, 0.03%)</title><rect x="26.2919%" y="101" width="0.0335%" height="15" fill="rgb(233,158,34)" fg:x="51852" fg:w="66"/><text x="26.5419%" y="111.50"></text></g><g><title>__x64_sys_mprotect (76 samples, 0.04%)</title><rect x="26.2878%" y="133" width="0.0385%" height="15" fill="rgb(215,151,48)" fg:x="51844" fg:w="76"/><text x="26.5378%" y="143.50"></text></g><g><title>do_mprotect_pkey (75 samples, 0.04%)</title><rect x="26.2883%" y="117" width="0.0380%" height="15" fill="rgb(229,84,14)" fg:x="51845" fg:w="75"/><text x="26.5383%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (80 samples, 0.04%)</title><rect x="26.2868%" y="165" width="0.0406%" height="15" fill="rgb(229,68,14)" fg:x="51842" fg:w="80"/><text x="26.5368%" y="175.50"></text></g><g><title>do_syscall_64 (78 samples, 0.04%)</title><rect x="26.2878%" y="149" width="0.0396%" height="15" fill="rgb(243,106,26)" fg:x="51844" fg:w="78"/><text x="26.5378%" y="159.50"></text></g><g><title>grow_heap (94 samples, 0.05%)</title><rect x="26.2858%" y="197" width="0.0477%" height="15" fill="rgb(206,45,38)" fg:x="51840" fg:w="94"/><text x="26.5358%" y="207.50"></text></g><g><title>__GI___mprotect (93 samples, 0.05%)</title><rect x="26.2863%" y="181" width="0.0472%" height="15" fill="rgb(226,6,15)" fg:x="51841" fg:w="93"/><text x="26.5363%" y="191.50"></text></g><g><title>__GI___libc_malloc (178 samples, 0.09%)</title><rect x="26.2452%" y="245" width="0.0903%" height="15" fill="rgb(232,22,54)" fg:x="51760" fg:w="178"/><text x="26.4952%" y="255.50"></text></g><g><title>_int_malloc (178 samples, 0.09%)</title><rect x="26.2452%" y="229" width="0.0903%" height="15" fill="rgb(229,222,32)" fg:x="51760" fg:w="178"/><text x="26.4952%" y="239.50"></text></g><g><title>sysmalloc (174 samples, 0.09%)</title><rect x="26.2472%" y="213" width="0.0882%" height="15" fill="rgb(228,62,29)" fg:x="51764" fg:w="174"/><text x="26.4972%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (179 samples, 0.09%)</title><rect x="26.2452%" y="373" width="0.0908%" height="15" fill="rgb(251,103,34)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (179 samples, 0.09%)</title><rect x="26.2452%" y="357" width="0.0908%" height="15" fill="rgb(233,12,30)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (179 samples, 0.09%)</title><rect x="26.2452%" y="341" width="0.0908%" height="15" fill="rgb(238,52,0)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (179 samples, 0.09%)</title><rect x="26.2452%" y="325" width="0.0908%" height="15" fill="rgb(223,98,5)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (179 samples, 0.09%)</title><rect x="26.2452%" y="309" width="0.0908%" height="15" fill="rgb(228,75,37)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="319.50"></text></g><g><title>alloc::alloc::alloc (179 samples, 0.09%)</title><rect x="26.2452%" y="293" width="0.0908%" height="15" fill="rgb(205,115,49)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="303.50"></text></g><g><title>__rdl_alloc (179 samples, 0.09%)</title><rect x="26.2452%" y="277" width="0.0908%" height="15" fill="rgb(250,154,43)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (179 samples, 0.09%)</title><rect x="26.2452%" y="261" width="0.0908%" height="15" fill="rgb(226,43,29)" fg:x="51760" fg:w="179"/><text x="26.4952%" y="271.50"></text></g><g><title>__irqentry_text_end (22 samples, 0.01%)</title><rect x="26.3512%" y="325" width="0.0112%" height="15" fill="rgb(249,228,39)" fg:x="51969" fg:w="22"/><text x="26.6012%" y="335.50"></text></g><g><title>charge_memcg (47 samples, 0.02%)</title><rect x="26.3791%" y="197" width="0.0238%" height="15" fill="rgb(216,79,43)" fg:x="52024" fg:w="47"/><text x="26.6291%" y="207.50"></text></g><g><title>try_charge_memcg (20 samples, 0.01%)</title><rect x="26.3928%" y="181" width="0.0101%" height="15" fill="rgb(228,95,12)" fg:x="52051" fg:w="20"/><text x="26.6428%" y="191.50"></text></g><g><title>__mem_cgroup_charge (71 samples, 0.04%)</title><rect x="26.3770%" y="213" width="0.0360%" height="15" fill="rgb(249,221,15)" fg:x="52020" fg:w="71"/><text x="26.6270%" y="223.50"></text></g><g><title>clear_page_erms (21 samples, 0.01%)</title><rect x="26.4318%" y="149" width="0.0106%" height="15" fill="rgb(233,34,13)" fg:x="52128" fg:w="21"/><text x="26.6818%" y="159.50"></text></g><g><title>handle_pte_fault (156 samples, 0.08%)</title><rect x="26.3689%" y="245" width="0.0791%" height="15" fill="rgb(214,103,39)" fg:x="52004" fg:w="156"/><text x="26.6189%" y="255.50"></text></g><g><title>do_anonymous_page (147 samples, 0.07%)</title><rect x="26.3735%" y="229" width="0.0745%" height="15" fill="rgb(251,126,39)" fg:x="52013" fg:w="147"/><text x="26.6235%" y="239.50"></text></g><g><title>vma_alloc_folio (40 samples, 0.02%)</title><rect x="26.4277%" y="213" width="0.0203%" height="15" fill="rgb(214,216,36)" fg:x="52120" fg:w="40"/><text x="26.6777%" y="223.50"></text></g><g><title>__folio_alloc (39 samples, 0.02%)</title><rect x="26.4282%" y="197" width="0.0198%" height="15" fill="rgb(220,221,8)" fg:x="52121" fg:w="39"/><text x="26.6782%" y="207.50"></text></g><g><title>__alloc_pages (38 samples, 0.02%)</title><rect x="26.4288%" y="181" width="0.0193%" height="15" fill="rgb(240,216,3)" fg:x="52122" fg:w="38"/><text x="26.6788%" y="191.50"></text></g><g><title>get_page_from_freelist (33 samples, 0.02%)</title><rect x="26.4313%" y="165" width="0.0167%" height="15" fill="rgb(232,218,17)" fg:x="52127" fg:w="33"/><text x="26.6813%" y="175.50"></text></g><g><title>__handle_mm_fault (161 samples, 0.08%)</title><rect x="26.3674%" y="261" width="0.0816%" height="15" fill="rgb(229,163,45)" fg:x="52001" fg:w="161"/><text x="26.6174%" y="271.50"></text></g><g><title>handle_mm_fault (166 samples, 0.08%)</title><rect x="26.3659%" y="277" width="0.0842%" height="15" fill="rgb(231,110,42)" fg:x="51998" fg:w="166"/><text x="26.6159%" y="287.50"></text></g><g><title>do_user_addr_fault (170 samples, 0.09%)</title><rect x="26.3644%" y="293" width="0.0862%" height="15" fill="rgb(208,170,48)" fg:x="51995" fg:w="170"/><text x="26.6144%" y="303.50"></text></g><g><title>irqentry_exit (34 samples, 0.02%)</title><rect x="26.4511%" y="293" width="0.0172%" height="15" fill="rgb(239,116,25)" fg:x="52166" fg:w="34"/><text x="26.7011%" y="303.50"></text></g><g><title>irqentry_exit_to_user_mode (34 samples, 0.02%)</title><rect x="26.4511%" y="277" width="0.0172%" height="15" fill="rgb(219,200,50)" fg:x="52166" fg:w="34"/><text x="26.7011%" y="287.50"></text></g><g><title>asm_exc_page_fault (210 samples, 0.11%)</title><rect x="26.3623%" y="325" width="0.1065%" height="15" fill="rgb(245,200,0)" fg:x="51991" fg:w="210"/><text x="26.6123%" y="335.50"></text></g><g><title>exc_page_fault (210 samples, 0.11%)</title><rect x="26.3623%" y="309" width="0.1065%" height="15" fill="rgb(245,119,33)" fg:x="51991" fg:w="210"/><text x="26.6123%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (468 samples, 0.24%)</title><rect x="26.2452%" y="437" width="0.2373%" height="15" fill="rgb(231,125,12)" fg:x="51760" fg:w="468"/><text x="26.4952%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (468 samples, 0.24%)</title><rect x="26.2452%" y="421" width="0.2373%" height="15" fill="rgb(216,96,41)" fg:x="51760" fg:w="468"/><text x="26.4952%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (468 samples, 0.24%)</title><rect x="26.2452%" y="405" width="0.2373%" height="15" fill="rgb(248,43,45)" fg:x="51760" fg:w="468"/><text x="26.4952%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (468 samples, 0.24%)</title><rect x="26.2452%" y="389" width="0.2373%" height="15" fill="rgb(217,222,7)" fg:x="51760" fg:w="468"/><text x="26.4952%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (289 samples, 0.15%)</title><rect x="26.3360%" y="373" width="0.1465%" height="15" fill="rgb(233,28,6)" fg:x="51939" fg:w="289"/><text x="26.5860%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (289 samples, 0.15%)</title><rect x="26.3360%" y="357" width="0.1465%" height="15" fill="rgb(231,218,15)" fg:x="51939" fg:w="289"/><text x="26.5860%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (285 samples, 0.14%)</title><rect x="26.3380%" y="341" width="0.1445%" height="15" fill="rgb(226,171,48)" fg:x="51943" fg:w="285"/><text x="26.5880%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (104 samples, 0.05%)</title><rect x="26.5697%" y="373" width="0.0527%" height="15" fill="rgb(235,201,9)" fg:x="52400" fg:w="104"/><text x="26.8197%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (104 samples, 0.05%)</title><rect x="26.5697%" y="357" width="0.0527%" height="15" fill="rgb(217,80,15)" fg:x="52400" fg:w="104"/><text x="26.8197%" y="367.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (133 samples, 0.07%)</title><rect x="26.5697%" y="405" width="0.0674%" height="15" fill="rgb(219,152,8)" fg:x="52400" fg:w="133"/><text x="26.8197%" y="415.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (133 samples, 0.07%)</title><rect x="26.5697%" y="389" width="0.0674%" height="15" fill="rgb(243,107,38)" fg:x="52400" fg:w="133"/><text x="26.8197%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (29 samples, 0.01%)</title><rect x="26.6225%" y="373" width="0.0147%" height="15" fill="rgb(231,17,5)" fg:x="52504" fg:w="29"/><text x="26.8725%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (29 samples, 0.01%)</title><rect x="26.6225%" y="357" width="0.0147%" height="15" fill="rgb(209,25,54)" fg:x="52504" fg:w="29"/><text x="26.8725%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (301 samples, 0.15%)</title><rect x="26.4876%" y="421" width="0.1526%" height="15" fill="rgb(219,0,2)" fg:x="52238" fg:w="301"/><text x="26.7376%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (318 samples, 0.16%)</title><rect x="26.4825%" y="437" width="0.1612%" height="15" fill="rgb(246,9,5)" fg:x="52228" fg:w="318"/><text x="26.7325%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (250 samples, 0.13%)</title><rect x="26.8126%" y="309" width="0.1268%" height="15" fill="rgb(226,159,4)" fg:x="52879" fg:w="250"/><text x="27.0626%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (250 samples, 0.13%)</title><rect x="26.8126%" y="293" width="0.1268%" height="15" fill="rgb(219,175,34)" fg:x="52879" fg:w="250"/><text x="27.0626%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (254 samples, 0.13%)</title><rect x="26.8126%" y="341" width="0.1288%" height="15" fill="rgb(236,10,46)" fg:x="52879" fg:w="254"/><text x="27.0626%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (254 samples, 0.13%)</title><rect x="26.8126%" y="325" width="0.1288%" height="15" fill="rgb(240,211,16)" fg:x="52879" fg:w="254"/><text x="27.0626%" y="335.50"></text></g><g><title>core::slice::sort::find_streak (422 samples, 0.21%)</title><rect x="26.7284%" y="389" width="0.2140%" height="15" fill="rgb(205,3,43)" fg:x="52713" fg:w="422"/><text x="26.9784%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (399 samples, 0.20%)</title><rect x="26.7401%" y="373" width="0.2023%" height="15" fill="rgb(245,7,22)" fg:x="52736" fg:w="399"/><text x="26.9901%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (382 samples, 0.19%)</title><rect x="26.7487%" y="357" width="0.1937%" height="15" fill="rgb(239,132,32)" fg:x="52753" fg:w="382"/><text x="26.9987%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (64 samples, 0.03%)</title><rect x="27.0940%" y="357" width="0.0325%" height="15" fill="rgb(228,202,34)" fg:x="53434" fg:w="64"/><text x="27.3440%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (83 samples, 0.04%)</title><rect x="27.7334%" y="309" width="0.0421%" height="15" fill="rgb(254,200,22)" fg:x="54695" fg:w="83"/><text x="27.9834%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1,454 samples, 0.74%)</title><rect x="27.7755%" y="309" width="0.7373%" height="15" fill="rgb(219,10,39)" fg:x="54778" fg:w="1454"/><text x="28.0255%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1,454 samples, 0.74%)</title><rect x="27.7755%" y="293" width="0.7373%" height="15" fill="rgb(226,210,39)" fg:x="54778" fg:w="1454"/><text x="28.0255%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (1,684 samples, 0.85%)</title><rect x="27.7334%" y="341" width="0.8539%" height="15" fill="rgb(208,219,16)" fg:x="54695" fg:w="1684"/><text x="27.9834%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (1,684 samples, 0.85%)</title><rect x="27.7334%" y="325" width="0.8539%" height="15" fill="rgb(216,158,51)" fg:x="54695" fg:w="1684"/><text x="27.9834%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (147 samples, 0.07%)</title><rect x="28.5128%" y="309" width="0.0745%" height="15" fill="rgb(233,14,44)" fg:x="56232" fg:w="147"/><text x="28.7628%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (147 samples, 0.07%)</title><rect x="28.5128%" y="293" width="0.0745%" height="15" fill="rgb(237,97,39)" fg:x="56232" fg:w="147"/><text x="28.7628%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (53 samples, 0.03%)</title><rect x="28.5873%" y="341" width="0.0269%" height="15" fill="rgb(218,198,43)" fg:x="56379" fg:w="53"/><text x="28.8373%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (3,130 samples, 1.59%)</title><rect x="27.0940%" y="373" width="1.5871%" height="15" fill="rgb(231,104,20)" fg:x="53434" fg:w="3130"/><text x="27.3440%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3,066 samples, 1.55%)</title><rect x="27.1265%" y="357" width="1.5546%" height="15" fill="rgb(254,36,13)" fg:x="53498" fg:w="3066"/><text x="27.3765%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (129 samples, 0.07%)</title><rect x="28.6157%" y="341" width="0.0654%" height="15" fill="rgb(248,14,50)" fg:x="56435" fg:w="129"/><text x="28.8657%" y="351.50"></text></g><g><title>charge_memcg (22 samples, 0.01%)</title><rect x="28.9823%" y="213" width="0.0112%" height="15" fill="rgb(217,107,29)" fg:x="57158" fg:w="22"/><text x="29.2323%" y="223.50"></text></g><g><title>__mem_cgroup_charge (30 samples, 0.02%)</title><rect x="28.9813%" y="229" width="0.0152%" height="15" fill="rgb(251,169,33)" fg:x="57156" fg:w="30"/><text x="29.2313%" y="239.50"></text></g><g><title>__handle_mm_fault (61 samples, 0.03%)</title><rect x="28.9767%" y="277" width="0.0309%" height="15" fill="rgb(217,108,32)" fg:x="57147" fg:w="61"/><text x="29.2267%" y="287.50"></text></g><g><title>handle_pte_fault (58 samples, 0.03%)</title><rect x="28.9782%" y="261" width="0.0294%" height="15" fill="rgb(219,66,42)" fg:x="57150" fg:w="58"/><text x="29.2282%" y="271.50"></text></g><g><title>do_anonymous_page (53 samples, 0.03%)</title><rect x="28.9808%" y="245" width="0.0269%" height="15" fill="rgb(206,180,7)" fg:x="57155" fg:w="53"/><text x="29.2308%" y="255.50"></text></g><g><title>do_user_addr_fault (66 samples, 0.03%)</title><rect x="28.9762%" y="309" width="0.0335%" height="15" fill="rgb(208,226,31)" fg:x="57146" fg:w="66"/><text x="29.2262%" y="319.50"></text></g><g><title>handle_mm_fault (65 samples, 0.03%)</title><rect x="28.9767%" y="293" width="0.0330%" height="15" fill="rgb(218,26,49)" fg:x="57147" fg:w="65"/><text x="29.2267%" y="303.50"></text></g><g><title>exc_page_fault (73 samples, 0.04%)</title><rect x="28.9757%" y="325" width="0.0370%" height="15" fill="rgb(233,197,48)" fg:x="57145" fg:w="73"/><text x="29.2257%" y="335.50"></text></g><g><title>asm_exc_page_fault (74 samples, 0.04%)</title><rect x="28.9757%" y="341" width="0.0375%" height="15" fill="rgb(252,181,51)" fg:x="57145" fg:w="74"/><text x="29.2257%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (198 samples, 0.10%)</title><rect x="28.9179%" y="357" width="0.1004%" height="15" fill="rgb(253,90,19)" fg:x="57031" fg:w="198"/><text x="29.1679%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (667 samples, 0.34%)</title><rect x="28.6811%" y="373" width="0.3382%" height="15" fill="rgb(215,171,30)" fg:x="56564" fg:w="667"/><text x="28.9311%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge::MergeHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (27 samples, 0.01%)</title><rect x="29.0193%" y="373" width="0.0137%" height="15" fill="rgb(214,222,9)" fg:x="57231" fg:w="27"/><text x="29.2693%" y="383.50"></text></g><g><title>&lt;core::slice::sort::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.01%)</title><rect x="29.0193%" y="357" width="0.0137%" height="15" fill="rgb(223,3,22)" fg:x="57231" fg:w="27"/><text x="29.2693%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.01%)</title><rect x="29.0193%" y="341" width="0.0137%" height="15" fill="rgb(225,196,46)" fg:x="57231" fg:w="27"/><text x="29.2693%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (22 samples, 0.01%)</title><rect x="29.0218%" y="325" width="0.0112%" height="15" fill="rgb(209,110,37)" fg:x="57236" fg:w="22"/><text x="29.2718%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (104 samples, 0.05%)</title><rect x="29.0330%" y="373" width="0.0527%" height="15" fill="rgb(249,89,12)" fg:x="57258" fg:w="104"/><text x="29.2830%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (46 samples, 0.02%)</title><rect x="29.0857%" y="357" width="0.0233%" height="15" fill="rgb(226,27,33)" fg:x="57362" fg:w="46"/><text x="29.3357%" y="367.50"></text></g><g><title>core::slice::sort::merge (4,297 samples, 2.18%)</title><rect x="26.9424%" y="389" width="2.1788%" height="15" fill="rgb(213,82,22)" fg:x="53135" fg:w="4297"/><text x="27.1924%" y="399.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (70 samples, 0.04%)</title><rect x="29.0857%" y="373" width="0.0355%" height="15" fill="rgb(248,140,0)" fg:x="57362" fg:w="70"/><text x="29.3357%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (24 samples, 0.01%)</title><rect x="29.1091%" y="357" width="0.0122%" height="15" fill="rgb(228,106,3)" fg:x="57408" fg:w="24"/><text x="29.3591%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (448 samples, 0.23%)</title><rect x="29.1212%" y="389" width="0.2272%" height="15" fill="rgb(209,23,37)" fg:x="57432" fg:w="448"/><text x="29.3712%" y="399.50"></text></g><g><title>__handle_mm_fault (41 samples, 0.02%)</title><rect x="29.3580%" y="197" width="0.0208%" height="15" fill="rgb(241,93,50)" fg:x="57899" fg:w="41"/><text x="29.6080%" y="207.50"></text></g><g><title>handle_pte_fault (40 samples, 0.02%)</title><rect x="29.3585%" y="181" width="0.0203%" height="15" fill="rgb(253,46,43)" fg:x="57900" fg:w="40"/><text x="29.6085%" y="191.50"></text></g><g><title>do_anonymous_page (37 samples, 0.02%)</title><rect x="29.3600%" y="165" width="0.0188%" height="15" fill="rgb(226,206,43)" fg:x="57903" fg:w="37"/><text x="29.6100%" y="175.50"></text></g><g><title>do_user_addr_fault (45 samples, 0.02%)</title><rect x="29.3580%" y="229" width="0.0228%" height="15" fill="rgb(217,54,7)" fg:x="57899" fg:w="45"/><text x="29.6080%" y="239.50"></text></g><g><title>handle_mm_fault (45 samples, 0.02%)</title><rect x="29.3580%" y="213" width="0.0228%" height="15" fill="rgb(223,5,52)" fg:x="57899" fg:w="45"/><text x="29.6080%" y="223.50"></text></g><g><title>asm_exc_page_fault (52 samples, 0.03%)</title><rect x="29.3570%" y="261" width="0.0264%" height="15" fill="rgb(206,52,46)" fg:x="57897" fg:w="52"/><text x="29.6070%" y="271.50"></text></g><g><title>exc_page_fault (52 samples, 0.03%)</title><rect x="29.3570%" y="245" width="0.0264%" height="15" fill="rgb(253,136,11)" fg:x="57897" fg:w="52"/><text x="29.6070%" y="255.50"></text></g><g><title>perf_event_mmap (33 samples, 0.02%)</title><rect x="29.3900%" y="149" width="0.0167%" height="15" fill="rgb(208,106,33)" fg:x="57962" fg:w="33"/><text x="29.6400%" y="159.50"></text></g><g><title>perf_event_mmap_event (32 samples, 0.02%)</title><rect x="29.3905%" y="133" width="0.0162%" height="15" fill="rgb(206,54,4)" fg:x="57963" fg:w="32"/><text x="29.6405%" y="143.50"></text></g><g><title>perf_iterate_sb (31 samples, 0.02%)</title><rect x="29.3910%" y="117" width="0.0157%" height="15" fill="rgb(213,3,15)" fg:x="57964" fg:w="31"/><text x="29.6410%" y="127.50"></text></g><g><title>perf_iterate_ctx (31 samples, 0.02%)</title><rect x="29.3910%" y="101" width="0.0157%" height="15" fill="rgb(252,211,39)" fg:x="57964" fg:w="31"/><text x="29.6410%" y="111.50"></text></g><g><title>mprotect_fixup (46 samples, 0.02%)</title><rect x="29.3874%" y="165" width="0.0233%" height="15" fill="rgb(223,6,36)" fg:x="57957" fg:w="46"/><text x="29.6374%" y="175.50"></text></g><g><title>__x64_sys_mprotect (51 samples, 0.03%)</title><rect x="29.3864%" y="197" width="0.0259%" height="15" fill="rgb(252,169,45)" fg:x="57955" fg:w="51"/><text x="29.6364%" y="207.50"></text></g><g><title>do_mprotect_pkey (51 samples, 0.03%)</title><rect x="29.3864%" y="181" width="0.0259%" height="15" fill="rgb(212,48,26)" fg:x="57955" fg:w="51"/><text x="29.6364%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (63 samples, 0.03%)</title><rect x="29.3849%" y="229" width="0.0319%" height="15" fill="rgb(251,102,48)" fg:x="57952" fg:w="63"/><text x="29.6349%" y="239.50"></text></g><g><title>do_syscall_64 (60 samples, 0.03%)</title><rect x="29.3864%" y="213" width="0.0304%" height="15" fill="rgb(243,208,16)" fg:x="57955" fg:w="60"/><text x="29.6364%" y="223.50"></text></g><g><title>grow_heap (73 samples, 0.04%)</title><rect x="29.3834%" y="261" width="0.0370%" height="15" fill="rgb(219,96,24)" fg:x="57949" fg:w="73"/><text x="29.6334%" y="271.50"></text></g><g><title>__GI___mprotect (72 samples, 0.04%)</title><rect x="29.3839%" y="245" width="0.0365%" height="15" fill="rgb(219,33,29)" fg:x="57950" fg:w="72"/><text x="29.6339%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (146 samples, 0.07%)</title><rect x="29.3484%" y="389" width="0.0740%" height="15" fill="rgb(223,176,5)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="399.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (146 samples, 0.07%)</title><rect x="29.3484%" y="373" width="0.0740%" height="15" fill="rgb(228,140,14)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="383.50"></text></g><g><title>alloc::alloc::alloc (146 samples, 0.07%)</title><rect x="29.3484%" y="357" width="0.0740%" height="15" fill="rgb(217,179,31)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="367.50"></text></g><g><title>__rdl_alloc (146 samples, 0.07%)</title><rect x="29.3484%" y="341" width="0.0740%" height="15" fill="rgb(230,9,30)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (146 samples, 0.07%)</title><rect x="29.3484%" y="325" width="0.0740%" height="15" fill="rgb(230,136,20)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="335.50"></text></g><g><title>__GI___libc_malloc (146 samples, 0.07%)</title><rect x="29.3484%" y="309" width="0.0740%" height="15" fill="rgb(215,210,22)" fg:x="57880" fg:w="146"/><text x="29.5984%" y="319.50"></text></g><g><title>_int_malloc (143 samples, 0.07%)</title><rect x="29.3499%" y="293" width="0.0725%" height="15" fill="rgb(218,43,5)" fg:x="57883" fg:w="143"/><text x="29.5999%" y="303.50"></text></g><g><title>sysmalloc (142 samples, 0.07%)</title><rect x="29.3504%" y="277" width="0.0720%" height="15" fill="rgb(216,11,5)" fg:x="57884" fg:w="142"/><text x="29.6004%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (44 samples, 0.02%)</title><rect x="29.4300%" y="389" width="0.0223%" height="15" fill="rgb(209,82,29)" fg:x="58041" fg:w="44"/><text x="29.6800%" y="399.50"></text></g><g><title>core::intrinsics::copy (44 samples, 0.02%)</title><rect x="29.4300%" y="373" width="0.0223%" height="15" fill="rgb(244,115,12)" fg:x="58041" fg:w="44"/><text x="29.6800%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (43 samples, 0.02%)</title><rect x="29.4305%" y="357" width="0.0218%" height="15" fill="rgb(222,82,18)" fg:x="58042" fg:w="43"/><text x="29.6805%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (104 samples, 0.05%)</title><rect x="29.4523%" y="389" width="0.0527%" height="15" fill="rgb(249,227,8)" fg:x="58085" fg:w="104"/><text x="29.7023%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (41 samples, 0.02%)</title><rect x="29.5365%" y="341" width="0.0208%" height="15" fill="rgb(253,141,45)" fg:x="58251" fg:w="41"/><text x="29.7865%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (32 samples, 0.02%)</title><rect x="29.5411%" y="325" width="0.0162%" height="15" fill="rgb(234,184,4)" fg:x="58260" fg:w="32"/><text x="29.7911%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (46 samples, 0.02%)</title><rect x="29.5365%" y="357" width="0.0233%" height="15" fill="rgb(218,194,23)" fg:x="58251" fg:w="46"/><text x="29.7865%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="29.5608%" y="341" width="0.0106%" height="15" fill="rgb(235,66,41)" fg:x="58299" fg:w="21"/><text x="29.8108%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (21 samples, 0.01%)</title><rect x="29.5608%" y="325" width="0.0106%" height="15" fill="rgb(245,217,1)" fg:x="58299" fg:w="21"/><text x="29.8108%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (21 samples, 0.01%)</title><rect x="29.5608%" y="309" width="0.0106%" height="15" fill="rgb(229,91,1)" fg:x="58299" fg:w="21"/><text x="29.8108%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (21 samples, 0.01%)</title><rect x="29.5608%" y="293" width="0.0106%" height="15" fill="rgb(207,101,30)" fg:x="58299" fg:w="21"/><text x="29.8108%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (128 samples, 0.06%)</title><rect x="29.5715%" y="325" width="0.0649%" height="15" fill="rgb(223,82,49)" fg:x="58320" fg:w="128"/><text x="29.8215%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (454 samples, 0.23%)</title><rect x="29.8423%" y="277" width="0.2302%" height="15" fill="rgb(218,167,17)" fg:x="58854" fg:w="454"/><text x="30.0923%" y="287.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (454 samples, 0.23%)</title><rect x="29.8423%" y="261" width="0.2302%" height="15" fill="rgb(208,103,14)" fg:x="58854" fg:w="454"/><text x="30.0923%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (49 samples, 0.02%)</title><rect x="30.0725%" y="277" width="0.0248%" height="15" fill="rgb(238,20,8)" fg:x="59308" fg:w="49"/><text x="30.3225%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (49 samples, 0.02%)</title><rect x="30.0725%" y="261" width="0.0248%" height="15" fill="rgb(218,80,54)" fg:x="59308" fg:w="49"/><text x="30.3225%" y="271.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (528 samples, 0.27%)</title><rect x="29.8367%" y="309" width="0.2677%" height="15" fill="rgb(240,144,17)" fg:x="58843" fg:w="528"/><text x="30.0867%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (517 samples, 0.26%)</title><rect x="29.8423%" y="293" width="0.2621%" height="15" fill="rgb(245,27,50)" fg:x="58854" fg:w="517"/><text x="30.0923%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (23 samples, 0.01%)</title><rect x="30.1044%" y="309" width="0.0117%" height="15" fill="rgb(251,51,7)" fg:x="59371" fg:w="23"/><text x="30.3544%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1,075 samples, 0.55%)</title><rect x="29.5715%" y="341" width="0.5451%" height="15" fill="rgb(245,217,29)" fg:x="58320" fg:w="1075"/><text x="29.8215%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (947 samples, 0.48%)</title><rect x="29.6364%" y="325" width="0.4802%" height="15" fill="rgb(221,176,29)" fg:x="58448" fg:w="947"/><text x="29.8864%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (117 samples, 0.06%)</title><rect x="30.1166%" y="341" width="0.0593%" height="15" fill="rgb(212,180,24)" fg:x="59395" fg:w="117"/><text x="30.3666%" y="351.50"></text></g><g><title>core::slice::sort::insert_tail (1,295 samples, 0.66%)</title><rect x="29.5598%" y="357" width="0.6566%" height="15" fill="rgb(254,24,2)" fg:x="58297" fg:w="1295"/><text x="29.8098%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (80 samples, 0.04%)</title><rect x="30.1759%" y="341" width="0.0406%" height="15" fill="rgb(230,100,2)" fg:x="59512" fg:w="80"/><text x="30.4259%" y="351.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.04%)</title><rect x="30.1759%" y="325" width="0.0406%" height="15" fill="rgb(219,142,25)" fg:x="59512" fg:w="80"/><text x="30.4259%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 0.04%)</title><rect x="30.1759%" y="309" width="0.0406%" height="15" fill="rgb(240,73,43)" fg:x="59512" fg:w="80"/><text x="30.4259%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (7,222 samples, 3.66%)</title><rect x="26.6437%" y="437" width="3.6620%" height="15" fill="rgb(214,114,15)" fg:x="52546" fg:w="7222"/><text x="26.8937%" y="447.50">allo..</text></g><g><title>alloc::slice::stable_sort (7,222 samples, 3.66%)</title><rect x="26.6437%" y="421" width="3.6620%" height="15" fill="rgb(207,130,4)" fg:x="52546" fg:w="7222"/><text x="26.8937%" y="431.50">allo..</text></g><g><title>core::slice::sort::merge_sort (7,219 samples, 3.66%)</title><rect x="26.6453%" y="405" width="3.6604%" height="15" fill="rgb(221,25,40)" fg:x="52549" fg:w="7219"/><text x="26.8953%" y="415.50">core..</text></g><g><title>core::slice::sort::provide_sorted_batch (1,578 samples, 0.80%)</title><rect x="29.5056%" y="389" width="0.8001%" height="15" fill="rgb(241,184,7)" fg:x="58190" fg:w="1578"/><text x="29.7556%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,557 samples, 0.79%)</title><rect x="29.5162%" y="373" width="0.7895%" height="15" fill="rgb(235,159,4)" fg:x="58211" fg:w="1557"/><text x="29.7662%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (176 samples, 0.09%)</title><rect x="30.2165%" y="357" width="0.0892%" height="15" fill="rgb(214,87,48)" fg:x="59592" fg:w="176"/><text x="30.4665%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (117 samples, 0.06%)</title><rect x="30.3610%" y="325" width="0.0593%" height="15" fill="rgb(246,198,24)" fg:x="59877" fg:w="117"/><text x="30.6110%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (117 samples, 0.06%)</title><rect x="30.3610%" y="309" width="0.0593%" height="15" fill="rgb(209,66,40)" fg:x="59877" fg:w="117"/><text x="30.6110%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (122 samples, 0.06%)</title><rect x="30.3610%" y="357" width="0.0619%" height="15" fill="rgb(233,147,39)" fg:x="59877" fg:w="122"/><text x="30.6110%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (122 samples, 0.06%)</title><rect x="30.3610%" y="341" width="0.0619%" height="15" fill="rgb(231,145,52)" fg:x="59877" fg:w="122"/><text x="30.6110%" y="351.50"></text></g><g><title>core::cmp::PartialOrd::le (25 samples, 0.01%)</title><rect x="30.4238%" y="357" width="0.0127%" height="15" fill="rgb(206,20,26)" fg:x="60001" fg:w="25"/><text x="30.6738%" y="367.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (22 samples, 0.01%)</title><rect x="30.4254%" y="341" width="0.0112%" height="15" fill="rgb(238,220,4)" fg:x="60004" fg:w="22"/><text x="30.6754%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.01%)</title><rect x="30.4254%" y="325" width="0.0112%" height="15" fill="rgb(252,195,42)" fg:x="60004" fg:w="22"/><text x="30.6754%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (223 samples, 0.11%)</title><rect x="30.3240%" y="389" width="0.1131%" height="15" fill="rgb(209,10,6)" fg:x="59804" fg:w="223"/><text x="30.5740%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (223 samples, 0.11%)</title><rect x="30.3240%" y="373" width="0.1131%" height="15" fill="rgb(229,3,52)" fg:x="59804" fg:w="223"/><text x="30.5740%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (264 samples, 0.13%)</title><rect x="30.3057%" y="437" width="0.1339%" height="15" fill="rgb(253,49,37)" fg:x="59768" fg:w="264"/><text x="30.5557%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (264 samples, 0.13%)</title><rect x="30.3057%" y="421" width="0.1339%" height="15" fill="rgb(240,103,49)" fg:x="59768" fg:w="264"/><text x="30.5557%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (259 samples, 0.13%)</title><rect x="30.3082%" y="405" width="0.1313%" height="15" fill="rgb(250,182,30)" fg:x="59773" fg:w="259"/><text x="30.5582%" y="415.50"></text></g><g><title>__mem_cgroup_charge (25 samples, 0.01%)</title><rect x="30.4543%" y="133" width="0.0127%" height="15" fill="rgb(248,8,30)" fg:x="60061" fg:w="25"/><text x="30.7043%" y="143.50"></text></g><g><title>handle_pte_fault (48 samples, 0.02%)</title><rect x="30.4522%" y="165" width="0.0243%" height="15" fill="rgb(237,120,30)" fg:x="60057" fg:w="48"/><text x="30.7022%" y="175.50"></text></g><g><title>do_anonymous_page (47 samples, 0.02%)</title><rect x="30.4528%" y="149" width="0.0238%" height="15" fill="rgb(221,146,34)" fg:x="60058" fg:w="47"/><text x="30.7028%" y="159.50"></text></g><g><title>__handle_mm_fault (50 samples, 0.03%)</title><rect x="30.4517%" y="181" width="0.0254%" height="15" fill="rgb(242,55,13)" fg:x="60056" fg:w="50"/><text x="30.7017%" y="191.50"></text></g><g><title>handle_mm_fault (53 samples, 0.03%)</title><rect x="30.4517%" y="197" width="0.0269%" height="15" fill="rgb(242,112,31)" fg:x="60056" fg:w="53"/><text x="30.7017%" y="207.50"></text></g><g><title>do_user_addr_fault (55 samples, 0.03%)</title><rect x="30.4512%" y="213" width="0.0279%" height="15" fill="rgb(249,192,27)" fg:x="60055" fg:w="55"/><text x="30.7012%" y="223.50"></text></g><g><title>asm_exc_page_fault (61 samples, 0.03%)</title><rect x="30.4507%" y="245" width="0.0309%" height="15" fill="rgb(208,204,44)" fg:x="60054" fg:w="61"/><text x="30.7007%" y="255.50"></text></g><g><title>exc_page_fault (61 samples, 0.03%)</title><rect x="30.4507%" y="229" width="0.0309%" height="15" fill="rgb(208,93,54)" fg:x="60054" fg:w="61"/><text x="30.7007%" y="239.50"></text></g><g><title>perf_event_mmap (38 samples, 0.02%)</title><rect x="30.4888%" y="133" width="0.0193%" height="15" fill="rgb(242,1,31)" fg:x="60129" fg:w="38"/><text x="30.7388%" y="143.50"></text></g><g><title>perf_event_mmap_event (38 samples, 0.02%)</title><rect x="30.4888%" y="117" width="0.0193%" height="15" fill="rgb(241,83,25)" fg:x="60129" fg:w="38"/><text x="30.7388%" y="127.50"></text></g><g><title>perf_iterate_sb (36 samples, 0.02%)</title><rect x="30.4898%" y="101" width="0.0183%" height="15" fill="rgb(205,169,50)" fg:x="60131" fg:w="36"/><text x="30.7398%" y="111.50"></text></g><g><title>perf_iterate_ctx (35 samples, 0.02%)</title><rect x="30.4903%" y="85" width="0.0177%" height="15" fill="rgb(239,186,37)" fg:x="60132" fg:w="35"/><text x="30.7403%" y="95.50"></text></g><g><title>mprotect_fixup (46 samples, 0.02%)</title><rect x="30.4857%" y="149" width="0.0233%" height="15" fill="rgb(205,221,10)" fg:x="60123" fg:w="46"/><text x="30.7357%" y="159.50"></text></g><g><title>__x64_sys_mprotect (51 samples, 0.03%)</title><rect x="30.4837%" y="181" width="0.0259%" height="15" fill="rgb(218,196,15)" fg:x="60119" fg:w="51"/><text x="30.7337%" y="191.50"></text></g><g><title>do_mprotect_pkey (51 samples, 0.03%)</title><rect x="30.4837%" y="165" width="0.0259%" height="15" fill="rgb(218,196,35)" fg:x="60119" fg:w="51"/><text x="30.7337%" y="175.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (62 samples, 0.03%)</title><rect x="30.4822%" y="213" width="0.0314%" height="15" fill="rgb(233,63,24)" fg:x="60116" fg:w="62"/><text x="30.7322%" y="223.50"></text></g><g><title>do_syscall_64 (59 samples, 0.03%)</title><rect x="30.4837%" y="197" width="0.0299%" height="15" fill="rgb(225,8,4)" fg:x="60119" fg:w="59"/><text x="30.7337%" y="207.50"></text></g><g><title>grow_heap (73 samples, 0.04%)</title><rect x="30.4817%" y="245" width="0.0370%" height="15" fill="rgb(234,105,35)" fg:x="60115" fg:w="73"/><text x="30.7317%" y="255.50"></text></g><g><title>__GI___mprotect (72 samples, 0.04%)</title><rect x="30.4822%" y="229" width="0.0365%" height="15" fill="rgb(236,21,32)" fg:x="60116" fg:w="72"/><text x="30.7322%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (159 samples, 0.08%)</title><rect x="30.4396%" y="437" width="0.0806%" height="15" fill="rgb(228,109,6)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (159 samples, 0.08%)</title><rect x="30.4396%" y="421" width="0.0806%" height="15" fill="rgb(229,215,31)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (159 samples, 0.08%)</title><rect x="30.4396%" y="405" width="0.0806%" height="15" fill="rgb(221,52,54)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (159 samples, 0.08%)</title><rect x="30.4396%" y="389" width="0.0806%" height="15" fill="rgb(252,129,43)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (159 samples, 0.08%)</title><rect x="30.4396%" y="373" width="0.0806%" height="15" fill="rgb(248,183,27)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (159 samples, 0.08%)</title><rect x="30.4396%" y="357" width="0.0806%" height="15" fill="rgb(250,0,22)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="367.50"></text></g><g><title>alloc::alloc::alloc (159 samples, 0.08%)</title><rect x="30.4396%" y="341" width="0.0806%" height="15" fill="rgb(213,166,10)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="351.50"></text></g><g><title>__rdl_alloc (159 samples, 0.08%)</title><rect x="30.4396%" y="325" width="0.0806%" height="15" fill="rgb(207,163,36)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (159 samples, 0.08%)</title><rect x="30.4396%" y="309" width="0.0806%" height="15" fill="rgb(208,122,22)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="319.50"></text></g><g><title>__GI___libc_malloc (159 samples, 0.08%)</title><rect x="30.4396%" y="293" width="0.0806%" height="15" fill="rgb(207,104,49)" fg:x="60032" fg:w="159"/><text x="30.6896%" y="303.50"></text></g><g><title>_int_malloc (157 samples, 0.08%)</title><rect x="30.4406%" y="277" width="0.0796%" height="15" fill="rgb(248,211,50)" fg:x="60034" fg:w="157"/><text x="30.6906%" y="287.50"></text></g><g><title>sysmalloc (154 samples, 0.08%)</title><rect x="30.4421%" y="261" width="0.0781%" height="15" fill="rgb(217,13,45)" fg:x="60037" fg:w="154"/><text x="30.6921%" y="271.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (8,438 samples, 4.28%)</title><rect x="26.2447%" y="453" width="4.2785%" height="15" fill="rgb(211,216,49)" fg:x="51759" fg:w="8438"/><text x="26.4947%" y="463.50">proje..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (30 samples, 0.02%)</title><rect x="30.5278%" y="437" width="0.0152%" height="15" fill="rgb(221,58,53)" fg:x="60206" fg:w="30"/><text x="30.7778%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (48 samples, 0.02%)</title><rect x="30.5430%" y="437" width="0.0243%" height="15" fill="rgb(220,112,41)" fg:x="60236" fg:w="48"/><text x="30.7930%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (90 samples, 0.05%)</title><rect x="30.5232%" y="453" width="0.0456%" height="15" fill="rgb(236,38,28)" fg:x="60197" fg:w="90"/><text x="30.7732%" y="463.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (130 samples, 0.07%)</title><rect x="30.6505%" y="421" width="0.0659%" height="15" fill="rgb(227,195,22)" fg:x="60448" fg:w="130"/><text x="30.9005%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (172 samples, 0.09%)</title><rect x="30.6505%" y="437" width="0.0872%" height="15" fill="rgb(214,55,33)" fg:x="60448" fg:w="172"/><text x="30.9005%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (42 samples, 0.02%)</title><rect x="30.7164%" y="421" width="0.0213%" height="15" fill="rgb(248,80,13)" fg:x="60578" fg:w="42"/><text x="30.9664%" y="431.50"></text></g><g><title>__hrtimer_run_queues (30 samples, 0.02%)</title><rect x="37.6971%" y="357" width="0.0152%" height="15" fill="rgb(238,52,6)" fg:x="74345" fg:w="30"/><text x="37.9471%" y="367.50"></text></g><g><title>tick_sched_timer (28 samples, 0.01%)</title><rect x="37.6981%" y="341" width="0.0142%" height="15" fill="rgb(224,198,47)" fg:x="74347" fg:w="28"/><text x="37.9481%" y="351.50"></text></g><g><title>tick_sched_handle (20 samples, 0.01%)</title><rect x="37.7021%" y="325" width="0.0101%" height="15" fill="rgb(233,171,20)" fg:x="74355" fg:w="20"/><text x="37.9521%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (37 samples, 0.02%)</title><rect x="37.6960%" y="389" width="0.0188%" height="15" fill="rgb(241,30,25)" fg:x="74343" fg:w="37"/><text x="37.9460%" y="399.50"></text></g><g><title>hrtimer_interrupt (36 samples, 0.02%)</title><rect x="37.6965%" y="373" width="0.0183%" height="15" fill="rgb(207,171,38)" fg:x="74344" fg:w="36"/><text x="37.9465%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (47 samples, 0.02%)</title><rect x="37.6960%" y="421" width="0.0238%" height="15" fill="rgb(234,70,1)" fg:x="74343" fg:w="47"/><text x="37.9460%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (47 samples, 0.02%)</title><rect x="37.6960%" y="405" width="0.0238%" height="15" fill="rgb(232,178,18)" fg:x="74343" fg:w="47"/><text x="37.9460%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (13,771 samples, 6.98%)</title><rect x="30.7377%" y="437" width="6.9827%" height="15" fill="rgb(241,78,40)" fg:x="60620" fg:w="13771"/><text x="30.9877%" y="447.50">project1:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (523 samples, 0.27%)</title><rect x="52.8433%" y="421" width="0.2652%" height="15" fill="rgb(222,35,25)" fg:x="104216" fg:w="523"/><text x="53.0933%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (523 samples, 0.27%)</title><rect x="52.8433%" y="405" width="0.2652%" height="15" fill="rgb(207,92,16)" fg:x="104216" fg:w="523"/><text x="53.0933%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (523 samples, 0.27%)</title><rect x="52.8433%" y="389" width="0.2652%" height="15" fill="rgb(216,59,51)" fg:x="104216" fg:w="523"/><text x="53.0933%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (67 samples, 0.03%)</title><rect x="53.1085%" y="421" width="0.0340%" height="15" fill="rgb(213,80,28)" fg:x="104739" fg:w="67"/><text x="53.3585%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (67 samples, 0.03%)</title><rect x="53.1085%" y="405" width="0.0340%" height="15" fill="rgb(220,93,7)" fg:x="104739" fg:w="67"/><text x="53.3585%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (59 samples, 0.03%)</title><rect x="53.1126%" y="389" width="0.0299%" height="15" fill="rgb(225,24,44)" fg:x="104747" fg:w="59"/><text x="53.3626%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,955 samples, 0.99%)</title><rect x="53.1425%" y="389" width="0.9913%" height="15" fill="rgb(243,74,40)" fg:x="104806" fg:w="1955"/><text x="53.3925%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,798 samples, 1.42%)</title><rect x="53.1425%" y="421" width="1.4187%" height="15" fill="rgb(228,39,7)" fg:x="104806" fg:w="2798"/><text x="53.3925%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2,798 samples, 1.42%)</title><rect x="53.1425%" y="405" width="1.4187%" height="15" fill="rgb(227,79,8)" fg:x="104806" fg:w="2798"/><text x="53.3925%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (843 samples, 0.43%)</title><rect x="54.1338%" y="389" width="0.4274%" height="15" fill="rgb(236,58,11)" fg:x="106761" fg:w="843"/><text x="54.3838%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (991 samples, 0.50%)</title><rect x="55.5875%" y="373" width="0.5025%" height="15" fill="rgb(249,63,35)" fg:x="109628" fg:w="991"/><text x="55.8375%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (991 samples, 0.50%)</title><rect x="55.5875%" y="357" width="0.5025%" height="15" fill="rgb(252,114,16)" fg:x="109628" fg:w="991"/><text x="55.8375%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,032 samples, 1.54%)</title><rect x="54.5612%" y="389" width="1.5374%" height="15" fill="rgb(254,151,24)" fg:x="107604" fg:w="3032"/><text x="54.8112%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (4,629 samples, 2.35%)</title><rect x="54.5612%" y="421" width="2.3472%" height="15" fill="rgb(253,54,39)" fg:x="107604" fg:w="4629"/><text x="54.8112%" y="431.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,629 samples, 2.35%)</title><rect x="54.5612%" y="405" width="2.3472%" height="15" fill="rgb(243,25,45)" fg:x="107604" fg:w="4629"/><text x="54.8112%" y="415.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,597 samples, 0.81%)</title><rect x="56.0986%" y="389" width="0.8098%" height="15" fill="rgb(234,134,9)" fg:x="110636" fg:w="1597"/><text x="56.3486%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,597 samples, 0.81%)</title><rect x="56.0986%" y="373" width="0.8098%" height="15" fill="rgb(227,166,31)" fg:x="110636" fg:w="1597"/><text x="56.3486%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,516 samples, 0.77%)</title><rect x="56.9155%" y="357" width="0.7687%" height="15" fill="rgb(245,143,41)" fg:x="112247" fg:w="1516"/><text x="57.1655%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,643 samples, 0.83%)</title><rect x="56.9155%" y="373" width="0.8331%" height="15" fill="rgb(238,181,32)" fg:x="112247" fg:w="1643"/><text x="57.1655%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (127 samples, 0.06%)</title><rect x="57.6842%" y="357" width="0.0644%" height="15" fill="rgb(224,113,18)" fg:x="113763" fg:w="127"/><text x="57.9342%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1,669 samples, 0.85%)</title><rect x="56.9084%" y="389" width="0.8463%" height="15" fill="rgb(240,229,28)" fg:x="112233" fg:w="1669"/><text x="57.1584%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,010 samples, 1.02%)</title><rect x="56.9084%" y="421" width="1.0192%" height="15" fill="rgb(250,185,3)" fg:x="112233" fg:w="2010"/><text x="57.1584%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,010 samples, 1.02%)</title><rect x="56.9084%" y="405" width="1.0192%" height="15" fill="rgb(212,59,25)" fg:x="112233" fg:w="2010"/><text x="57.1584%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (341 samples, 0.17%)</title><rect x="57.7547%" y="389" width="0.1729%" height="15" fill="rgb(221,87,20)" fg:x="113902" fg:w="341"/><text x="58.0047%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (341 samples, 0.17%)</title><rect x="57.7547%" y="373" width="0.1729%" height="15" fill="rgb(213,74,28)" fg:x="113902" fg:w="341"/><text x="58.0047%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (184 samples, 0.09%)</title><rect x="57.9276%" y="389" width="0.0933%" height="15" fill="rgb(224,132,34)" fg:x="114243" fg:w="184"/><text x="58.1776%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (20,731 samples, 10.51%)</title><rect x="58.0209%" y="389" width="10.5118%" height="15" fill="rgb(222,101,24)" fg:x="114427" fg:w="20731"/><text x="58.2709%" y="399.50">core::option::O..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (20,731 samples, 10.51%)</title><rect x="58.0209%" y="373" width="10.5118%" height="15" fill="rgb(254,142,4)" fg:x="114427" fg:w="20731"/><text x="58.2709%" y="383.50">slotmap::basic:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,000 samples, 0.51%)</title><rect x="68.5326%" y="389" width="0.5071%" height="15" fill="rgb(230,229,49)" fg:x="135158" fg:w="1000"/><text x="68.7826%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,000 samples, 0.51%)</title><rect x="68.5326%" y="373" width="0.5071%" height="15" fill="rgb(238,70,47)" fg:x="135158" fg:w="1000"/><text x="68.7826%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (22,250 samples, 11.28%)</title><rect x="57.9276%" y="421" width="11.2820%" height="15" fill="rgb(231,160,17)" fg:x="114243" fg:w="22250"/><text x="58.1776%" y="431.50">&lt;project1::solver..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (22,250 samples, 11.28%)</title><rect x="57.9276%" y="405" width="11.2820%" height="15" fill="rgb(218,68,53)" fg:x="114243" fg:w="22250"/><text x="58.1776%" y="415.50">slotmap::basic::S..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (335 samples, 0.17%)</title><rect x="69.0397%" y="389" width="0.1699%" height="15" fill="rgb(236,111,10)" fg:x="136158" fg:w="335"/><text x="69.2897%" y="399.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (17,652 samples, 8.95%)</title><rect x="69.2096%" y="421" width="8.9505%" height="15" fill="rgb(224,34,41)" fg:x="136493" fg:w="17652"/><text x="69.4596%" y="431.50">&lt;project1::so..</text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (24 samples, 0.01%)</title><rect x="78.1601%" y="405" width="0.0122%" height="15" fill="rgb(241,118,19)" fg:x="154145" fg:w="24"/><text x="78.4101%" y="415.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (75 samples, 0.04%)</title><rect x="78.1601%" y="421" width="0.0380%" height="15" fill="rgb(238,129,25)" fg:x="154145" fg:w="75"/><text x="78.4101%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (51 samples, 0.03%)</title><rect x="78.1723%" y="405" width="0.0259%" height="15" fill="rgb(238,22,31)" fg:x="154169" fg:w="51"/><text x="78.4223%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (110 samples, 0.06%)</title><rect x="79.4440%" y="405" width="0.0558%" height="15" fill="rgb(222,174,48)" fg:x="156677" fg:w="110"/><text x="79.6940%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (110 samples, 0.06%)</title><rect x="79.4440%" y="389" width="0.0558%" height="15" fill="rgb(206,152,40)" fg:x="156677" fg:w="110"/><text x="79.6940%" y="399.50"></text></g><g><title>__hrtimer_run_queues (27 samples, 0.01%)</title><rect x="79.5002%" y="341" width="0.0137%" height="15" fill="rgb(218,99,54)" fg:x="156788" fg:w="27"/><text x="79.7502%" y="351.50"></text></g><g><title>tick_sched_timer (24 samples, 0.01%)</title><rect x="79.5018%" y="325" width="0.0122%" height="15" fill="rgb(220,174,26)" fg:x="156791" fg:w="24"/><text x="79.7518%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (30 samples, 0.02%)</title><rect x="79.4997%" y="373" width="0.0152%" height="15" fill="rgb(245,116,9)" fg:x="156787" fg:w="30"/><text x="79.7497%" y="383.50"></text></g><g><title>hrtimer_interrupt (29 samples, 0.01%)</title><rect x="79.5002%" y="357" width="0.0147%" height="15" fill="rgb(209,72,35)" fg:x="156788" fg:w="29"/><text x="79.7502%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (32 samples, 0.02%)</title><rect x="79.4997%" y="405" width="0.0162%" height="15" fill="rgb(226,126,21)" fg:x="156787" fg:w="32"/><text x="79.7497%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (32 samples, 0.02%)</title><rect x="79.4997%" y="389" width="0.0162%" height="15" fill="rgb(227,192,1)" fg:x="156787" fg:w="32"/><text x="79.7497%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (29 samples, 0.01%)</title><rect x="79.5160%" y="405" width="0.0147%" height="15" fill="rgb(237,180,29)" fg:x="156819" fg:w="29"/><text x="79.7660%" y="415.50"></text></g><g><title>core::ptr::write (6,485 samples, 3.29%)</title><rect x="79.5307%" y="405" width="3.2883%" height="15" fill="rgb(230,197,35)" fg:x="156848" fg:w="6485"/><text x="79.7807%" y="415.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,101 samples, 4.61%)</title><rect x="78.2047%" y="421" width="4.6147%" height="15" fill="rgb(246,193,31)" fg:x="154233" fg:w="9101"/><text x="78.4547%" y="431.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (62 samples, 0.03%)</title><rect x="82.8194%" y="421" width="0.0314%" height="15" fill="rgb(241,36,4)" fg:x="163334" fg:w="62"/><text x="83.0694%" y="431.50"></text></g><g><title>tick_sched_do_timer (38 samples, 0.02%)</title><rect x="82.8564%" y="325" width="0.0193%" height="15" fill="rgb(241,130,17)" fg:x="163407" fg:w="38"/><text x="83.1064%" y="335.50"></text></g><g><title>tick_do_update_jiffies64 (37 samples, 0.02%)</title><rect x="82.8570%" y="309" width="0.0188%" height="15" fill="rgb(206,137,32)" fg:x="163408" fg:w="37"/><text x="83.1070%" y="319.50"></text></g><g><title>update_wall_time (33 samples, 0.02%)</title><rect x="82.8590%" y="293" width="0.0167%" height="15" fill="rgb(237,228,51)" fg:x="163412" fg:w="33"/><text x="83.1090%" y="303.50"></text></g><g><title>timekeeping_advance (33 samples, 0.02%)</title><rect x="82.8590%" y="277" width="0.0167%" height="15" fill="rgb(243,6,42)" fg:x="163412" fg:w="33"/><text x="83.1090%" y="287.50"></text></g><g><title>task_tick_fair (27 samples, 0.01%)</title><rect x="82.8975%" y="277" width="0.0137%" height="15" fill="rgb(251,74,28)" fg:x="163488" fg:w="27"/><text x="83.1475%" y="287.50"></text></g><g><title>trigger_load_balance (25 samples, 0.01%)</title><rect x="82.9112%" y="277" width="0.0127%" height="15" fill="rgb(218,20,49)" fg:x="163515" fg:w="25"/><text x="83.1612%" y="287.50"></text></g><g><title>nohz_balancer_kick (23 samples, 0.01%)</title><rect x="82.9122%" y="261" width="0.0117%" height="15" fill="rgb(238,28,14)" fg:x="163517" fg:w="23"/><text x="83.1622%" y="271.50"></text></g><g><title>tick_sched_timer (139 samples, 0.07%)</title><rect x="82.8559%" y="341" width="0.0705%" height="15" fill="rgb(229,40,46)" fg:x="163406" fg:w="139"/><text x="83.1059%" y="351.50"></text></g><g><title>tick_sched_handle (100 samples, 0.05%)</title><rect x="82.8757%" y="325" width="0.0507%" height="15" fill="rgb(244,195,20)" fg:x="163445" fg:w="100"/><text x="83.1257%" y="335.50"></text></g><g><title>update_process_times (99 samples, 0.05%)</title><rect x="82.8762%" y="309" width="0.0502%" height="15" fill="rgb(253,56,35)" fg:x="163446" fg:w="99"/><text x="83.1262%" y="319.50"></text></g><g><title>scheduler_tick (85 samples, 0.04%)</title><rect x="82.8833%" y="293" width="0.0431%" height="15" fill="rgb(210,149,44)" fg:x="163460" fg:w="85"/><text x="83.1333%" y="303.50"></text></g><g><title>__hrtimer_run_queues (146 samples, 0.07%)</title><rect x="82.8529%" y="357" width="0.0740%" height="15" fill="rgb(240,135,12)" fg:x="163400" fg:w="146"/><text x="83.1029%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (163 samples, 0.08%)</title><rect x="82.8509%" y="389" width="0.0827%" height="15" fill="rgb(251,24,50)" fg:x="163396" fg:w="163"/><text x="83.1009%" y="399.50"></text></g><g><title>hrtimer_interrupt (161 samples, 0.08%)</title><rect x="82.8519%" y="373" width="0.0816%" height="15" fill="rgb(243,200,47)" fg:x="163398" fg:w="161"/><text x="83.1019%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (184 samples, 0.09%)</title><rect x="82.8509%" y="421" width="0.0933%" height="15" fill="rgb(224,166,26)" fg:x="163396" fg:w="184"/><text x="83.1009%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (184 samples, 0.09%)</title><rect x="82.8509%" y="405" width="0.0933%" height="15" fill="rgb(233,0,47)" fg:x="163396" fg:w="184"/><text x="83.1009%" y="415.50"></text></g><g><title>core::cmp::PartialEq::ne (93 samples, 0.05%)</title><rect x="82.9442%" y="421" width="0.0472%" height="15" fill="rgb(253,80,5)" fg:x="163580" fg:w="93"/><text x="83.1942%" y="431.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (93 samples, 0.05%)</title><rect x="82.9442%" y="405" width="0.0472%" height="15" fill="rgb(214,133,25)" fg:x="163580" fg:w="93"/><text x="83.1942%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::le (1,694 samples, 0.86%)</title><rect x="82.9913%" y="421" width="0.8590%" height="15" fill="rgb(209,27,14)" fg:x="163673" fg:w="1694"/><text x="83.2413%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,236 samples, 1.13%)</title><rect x="83.8503%" y="421" width="1.1338%" height="15" fill="rgb(219,102,51)" fg:x="165367" fg:w="2236"/><text x="84.1003%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,236 samples, 1.13%)</title><rect x="83.8503%" y="405" width="1.1338%" height="15" fill="rgb(237,18,16)" fg:x="165367" fg:w="2236"/><text x="84.1003%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,236 samples, 1.13%)</title><rect x="83.8503%" y="389" width="1.1338%" height="15" fill="rgb(241,85,17)" fg:x="165367" fg:w="2236"/><text x="84.1003%" y="399.50"></text></g><g><title>core::intrinsics::copy (1,132 samples, 0.57%)</title><rect x="85.0713%" y="389" width="0.5740%" height="15" fill="rgb(236,90,42)" fg:x="167775" fg:w="1132"/><text x="85.3213%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (1,951 samples, 0.99%)</title><rect x="84.9841%" y="421" width="0.9893%" height="15" fill="rgb(249,57,21)" fg:x="167603" fg:w="1951"/><text x="85.2341%" y="431.50"></text></g><g><title>core::ptr::swap (1,779 samples, 0.90%)</title><rect x="85.0713%" y="405" width="0.9021%" height="15" fill="rgb(243,12,36)" fg:x="167775" fg:w="1779"/><text x="85.3213%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (647 samples, 0.33%)</title><rect x="85.6453%" y="389" width="0.3281%" height="15" fill="rgb(253,128,47)" fg:x="168907" fg:w="647"/><text x="85.8953%" y="399.50"></text></g><g><title>log::__private_api::log (37 samples, 0.02%)</title><rect x="85.9738%" y="421" width="0.0188%" height="15" fill="rgb(207,33,20)" fg:x="169555" fg:w="37"/><text x="86.2238%" y="431.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (37 samples, 0.02%)</title><rect x="85.9738%" y="405" width="0.0188%" height="15" fill="rgb(233,215,35)" fg:x="169555" fg:w="37"/><text x="86.2238%" y="415.50"></text></g><g><title>__hrtimer_run_queues (20 samples, 0.01%)</title><rect x="89.7610%" y="309" width="0.0101%" height="15" fill="rgb(249,188,52)" fg:x="177024" fg:w="20"/><text x="90.0110%" y="319.50"></text></g><g><title>tick_sched_timer (20 samples, 0.01%)</title><rect x="89.7610%" y="293" width="0.0101%" height="15" fill="rgb(225,12,32)" fg:x="177024" fg:w="20"/><text x="90.0110%" y="303.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (22 samples, 0.01%)</title><rect x="89.7605%" y="373" width="0.0112%" height="15" fill="rgb(247,98,14)" fg:x="177023" fg:w="22"/><text x="90.0105%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (21 samples, 0.01%)</title><rect x="89.7610%" y="357" width="0.0106%" height="15" fill="rgb(247,219,48)" fg:x="177024" fg:w="21"/><text x="90.0110%" y="367.50"></text></g><g><title>__sysvec_apic_timer_interrupt (21 samples, 0.01%)</title><rect x="89.7610%" y="341" width="0.0106%" height="15" fill="rgb(253,60,48)" fg:x="177024" fg:w="21"/><text x="90.0110%" y="351.50"></text></g><g><title>hrtimer_interrupt (21 samples, 0.01%)</title><rect x="89.7610%" y="325" width="0.0106%" height="15" fill="rgb(245,15,52)" fg:x="177024" fg:w="21"/><text x="90.0110%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (7,454 samples, 3.78%)</title><rect x="85.9926%" y="389" width="3.7796%" height="15" fill="rgb(220,133,28)" fg:x="169592" fg:w="7454"/><text x="86.2426%" y="399.50">core..</text></g><g><title>log::max_level (7,517 samples, 3.81%)</title><rect x="85.9926%" y="421" width="3.8115%" height="15" fill="rgb(217,180,4)" fg:x="169592" fg:w="7517"/><text x="86.2426%" y="431.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (7,517 samples, 3.81%)</title><rect x="85.9926%" y="405" width="3.8115%" height="15" fill="rgb(251,24,1)" fg:x="169592" fg:w="7517"/><text x="86.2426%" y="415.50">core..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (63 samples, 0.03%)</title><rect x="89.7722%" y="389" width="0.0319%" height="15" fill="rgb(212,185,49)" fg:x="177046" fg:w="63"/><text x="90.0222%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (31 samples, 0.02%)</title><rect x="90.2032%" y="389" width="0.0157%" height="15" fill="rgb(215,175,22)" fg:x="177896" fg:w="31"/><text x="90.4532%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (31 samples, 0.02%)</title><rect x="90.2032%" y="373" width="0.0157%" height="15" fill="rgb(250,205,14)" fg:x="177896" fg:w="31"/><text x="90.4532%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (31 samples, 0.02%)</title><rect x="90.2032%" y="357" width="0.0157%" height="15" fill="rgb(225,211,22)" fg:x="177896" fg:w="31"/><text x="90.4532%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (61 samples, 0.03%)</title><rect x="90.2032%" y="405" width="0.0309%" height="15" fill="rgb(251,179,42)" fg:x="177896" fg:w="61"/><text x="90.4532%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (30 samples, 0.02%)</title><rect x="90.2189%" y="389" width="0.0152%" height="15" fill="rgb(208,216,51)" fg:x="177927" fg:w="30"/><text x="90.4689%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (30 samples, 0.02%)</title><rect x="90.2189%" y="373" width="0.0152%" height="15" fill="rgb(235,36,11)" fg:x="177927" fg:w="30"/><text x="90.4689%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::le (98 samples, 0.05%)</title><rect x="90.2356%" y="405" width="0.0497%" height="15" fill="rgb(213,189,28)" fg:x="177960" fg:w="98"/><text x="90.4856%" y="415.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (39 samples, 0.02%)</title><rect x="90.2655%" y="389" width="0.0198%" height="15" fill="rgb(227,203,42)" fg:x="178019" fg:w="39"/><text x="90.5155%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (39 samples, 0.02%)</title><rect x="90.2655%" y="373" width="0.0198%" height="15" fill="rgb(244,72,36)" fg:x="178019" fg:w="39"/><text x="90.5155%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (69 samples, 0.03%)</title><rect x="90.2889%" y="389" width="0.0350%" height="15" fill="rgb(213,53,17)" fg:x="178065" fg:w="69"/><text x="90.5389%" y="399.50"></text></g><g><title>core::ptr::write (25 samples, 0.01%)</title><rect x="90.3112%" y="373" width="0.0127%" height="15" fill="rgb(207,167,3)" fg:x="178109" fg:w="25"/><text x="90.5612%" y="383.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (103 samples, 0.05%)</title><rect x="90.2889%" y="405" width="0.0522%" height="15" fill="rgb(216,98,30)" fg:x="178065" fg:w="103"/><text x="90.5389%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (34 samples, 0.02%)</title><rect x="90.3239%" y="389" width="0.0172%" height="15" fill="rgb(236,123,15)" fg:x="178134" fg:w="34"/><text x="90.5739%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1,114 samples, 0.56%)</title><rect x="89.8041%" y="421" width="0.5649%" height="15" fill="rgb(248,81,50)" fg:x="177109" fg:w="1114"/><text x="90.0541%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var_idx (38 samples, 0.02%)</title><rect x="90.3497%" y="405" width="0.0193%" height="15" fill="rgb(214,120,4)" fg:x="178185" fg:w="38"/><text x="90.5997%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (38 samples, 0.02%)</title><rect x="90.3497%" y="389" width="0.0193%" height="15" fill="rgb(208,179,34)" fg:x="178185" fg:w="38"/><text x="90.5997%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (34 samples, 0.02%)</title><rect x="90.3690%" y="421" width="0.0172%" height="15" fill="rgb(227,140,7)" fg:x="178223" fg:w="34"/><text x="90.6190%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (208 samples, 0.11%)</title><rect x="90.3862%" y="389" width="0.1055%" height="15" fill="rgb(214,22,6)" fg:x="178257" fg:w="208"/><text x="90.6362%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,277 samples, 0.65%)</title><rect x="90.3862%" y="405" width="0.6475%" height="15" fill="rgb(207,137,27)" fg:x="178257" fg:w="1277"/><text x="90.6362%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,069 samples, 0.54%)</title><rect x="90.4917%" y="389" width="0.5420%" height="15" fill="rgb(210,8,46)" fg:x="178465" fg:w="1069"/><text x="90.7417%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,069 samples, 0.54%)</title><rect x="90.4917%" y="373" width="0.5420%" height="15" fill="rgb(240,16,54)" fg:x="178465" fg:w="1069"/><text x="90.7417%" y="383.50"></text></g><g><title>tick_sched_timer (33 samples, 0.02%)</title><rect x="94.3362%" y="293" width="0.0167%" height="15" fill="rgb(211,209,29)" fg:x="186047" fg:w="33"/><text x="94.5862%" y="303.50"></text></g><g><title>tick_sched_handle (20 samples, 0.01%)</title><rect x="94.3428%" y="277" width="0.0101%" height="15" fill="rgb(226,228,24)" fg:x="186060" fg:w="20"/><text x="94.5928%" y="287.50"></text></g><g><title>update_process_times (20 samples, 0.01%)</title><rect x="94.3428%" y="261" width="0.0101%" height="15" fill="rgb(222,84,9)" fg:x="186060" fg:w="20"/><text x="94.5928%" y="271.50"></text></g><g><title>__hrtimer_run_queues (37 samples, 0.02%)</title><rect x="94.3347%" y="309" width="0.0188%" height="15" fill="rgb(234,203,30)" fg:x="186044" fg:w="37"/><text x="94.5847%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (39 samples, 0.02%)</title><rect x="94.3342%" y="341" width="0.0198%" height="15" fill="rgb(238,109,14)" fg:x="186043" fg:w="39"/><text x="94.5842%" y="351.50"></text></g><g><title>hrtimer_interrupt (39 samples, 0.02%)</title><rect x="94.3342%" y="325" width="0.0198%" height="15" fill="rgb(233,206,34)" fg:x="186043" fg:w="39"/><text x="94.5842%" y="335.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (49 samples, 0.02%)</title><rect x="94.3337%" y="373" width="0.0248%" height="15" fill="rgb(220,167,47)" fg:x="186042" fg:w="49"/><text x="94.5837%" y="383.50"></text></g><g><title>sysvec_apic_timer_interrupt (48 samples, 0.02%)</title><rect x="94.3342%" y="357" width="0.0243%" height="15" fill="rgb(238,105,10)" fg:x="186043" fg:w="48"/><text x="94.5842%" y="367.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (6,560 samples, 3.33%)</title><rect x="91.0337%" y="389" width="3.3263%" height="15" fill="rgb(213,227,17)" fg:x="179534" fg:w="6560"/><text x="91.2837%" y="399.50">&lt;pr..</text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (9,628 samples, 4.88%)</title><rect x="91.0337%" y="405" width="4.8819%" height="15" fill="rgb(217,132,38)" fg:x="179534" fg:w="9628"/><text x="91.2837%" y="415.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (3,068 samples, 1.56%)</title><rect x="94.3600%" y="389" width="1.5556%" height="15" fill="rgb(242,146,4)" fg:x="186094" fg:w="3068"/><text x="94.6100%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (522 samples, 0.26%)</title><rect x="95.9157%" y="405" width="0.2647%" height="15" fill="rgb(212,61,9)" fg:x="189162" fg:w="522"/><text x="96.1657%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (3,448 samples, 1.75%)</title><rect x="96.1803%" y="389" width="1.7483%" height="15" fill="rgb(247,126,22)" fg:x="189684" fg:w="3448"/><text x="96.4303%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (15,470 samples, 7.84%)</title><rect x="90.3862%" y="421" width="7.8442%" height="15" fill="rgb(220,196,2)" fg:x="178257" fg:w="15470"/><text x="90.6362%" y="431.50">project1::s..</text></g><g><title>project1::solver::types::Lit::var_idx (4,043 samples, 2.05%)</title><rect x="96.1803%" y="405" width="2.0500%" height="15" fill="rgb(208,46,4)" fg:x="189684" fg:w="4043"/><text x="96.4303%" y="415.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (595 samples, 0.30%)</title><rect x="97.9287%" y="389" width="0.3017%" height="15" fill="rgb(252,104,46)" fg:x="193132" fg:w="595"/><text x="98.1787%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (164 samples, 0.08%)</title><rect x="98.2304%" y="389" width="0.0832%" height="15" fill="rgb(237,152,48)" fg:x="193727" fg:w="164"/><text x="98.4804%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (22 samples, 0.01%)</title><rect x="98.3024%" y="373" width="0.0112%" height="15" fill="rgb(221,59,37)" fg:x="193869" fg:w="22"/><text x="98.5524%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.01%)</title><rect x="98.3024%" y="357" width="0.0112%" height="15" fill="rgb(209,202,51)" fg:x="193869" fg:w="22"/><text x="98.5524%" y="367.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (832 samples, 0.42%)</title><rect x="98.2304%" y="421" width="0.4219%" height="15" fill="rgb(228,81,30)" fg:x="193727" fg:w="832"/><text x="98.4804%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (832 samples, 0.42%)</title><rect x="98.2304%" y="405" width="0.4219%" height="15" fill="rgb(227,42,39)" fg:x="193727" fg:w="832"/><text x="98.4804%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (668 samples, 0.34%)</title><rect x="98.3135%" y="389" width="0.3387%" height="15" fill="rgb(221,26,2)" fg:x="193891" fg:w="668"/><text x="98.5635%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (668 samples, 0.34%)</title><rect x="98.3135%" y="373" width="0.3387%" height="15" fill="rgb(254,61,31)" fg:x="193891" fg:w="668"/><text x="98.5635%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (110 samples, 0.06%)</title><rect x="98.6903%" y="389" width="0.0558%" height="15" fill="rgb(222,173,38)" fg:x="194634" fg:w="110"/><text x="98.9403%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (167 samples, 0.08%)</title><rect x="98.6903%" y="405" width="0.0847%" height="15" fill="rgb(218,50,12)" fg:x="194634" fg:w="167"/><text x="98.9403%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (57 samples, 0.03%)</title><rect x="98.7461%" y="389" width="0.0289%" height="15" fill="rgb(223,88,40)" fg:x="194744" fg:w="57"/><text x="98.9961%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (57 samples, 0.03%)</title><rect x="98.7461%" y="373" width="0.0289%" height="15" fill="rgb(237,54,19)" fg:x="194744" fg:w="57"/><text x="98.9961%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (433 samples, 0.22%)</title><rect x="98.6522%" y="421" width="0.2196%" height="15" fill="rgb(251,129,25)" fg:x="194559" fg:w="433"/><text x="98.9022%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (190 samples, 0.10%)</title><rect x="98.7755%" y="405" width="0.0963%" height="15" fill="rgb(238,97,19)" fg:x="194802" fg:w="190"/><text x="99.0255%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (190 samples, 0.10%)</title><rect x="98.7755%" y="389" width="0.0963%" height="15" fill="rgb(240,169,18)" fg:x="194802" fg:w="190"/><text x="99.0255%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (190 samples, 0.10%)</title><rect x="98.7755%" y="373" width="0.0963%" height="15" fill="rgb(230,187,49)" fg:x="194802" fg:w="190"/><text x="99.0255%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (162 samples, 0.08%)</title><rect x="98.7897%" y="357" width="0.0821%" height="15" fill="rgb(209,44,26)" fg:x="194830" fg:w="162"/><text x="99.0397%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (41 samples, 0.02%)</title><rect x="98.8718%" y="405" width="0.0208%" height="15" fill="rgb(244,0,6)" fg:x="194992" fg:w="41"/><text x="99.1218%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (34 samples, 0.02%)</title><rect x="98.8754%" y="389" width="0.0172%" height="15" fill="rgb(248,18,21)" fg:x="194999" fg:w="34"/><text x="99.1254%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (34 samples, 0.02%)</title><rect x="98.8754%" y="373" width="0.0172%" height="15" fill="rgb(245,180,19)" fg:x="194999" fg:w="34"/><text x="99.1254%" y="383.50"></text></g><g><title>core::ptr::read (269 samples, 0.14%)</title><rect x="98.8926%" y="373" width="0.1364%" height="15" fill="rgb(252,118,36)" fg:x="195033" fg:w="269"/><text x="99.1426%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (385 samples, 0.20%)</title><rect x="98.8718%" y="421" width="0.1952%" height="15" fill="rgb(210,224,19)" fg:x="194992" fg:w="385"/><text x="99.1218%" y="431.50"></text></g><g><title>core::mem::take (344 samples, 0.17%)</title><rect x="98.8926%" y="405" width="0.1744%" height="15" fill="rgb(218,30,24)" fg:x="195033" fg:w="344"/><text x="99.1426%" y="415.50"></text></g><g><title>core::mem::replace (344 samples, 0.17%)</title><rect x="98.8926%" y="389" width="0.1744%" height="15" fill="rgb(219,75,50)" fg:x="195033" fg:w="344"/><text x="99.1426%" y="399.50"></text></g><g><title>core::ptr::write (75 samples, 0.04%)</title><rect x="99.0290%" y="373" width="0.0380%" height="15" fill="rgb(234,72,50)" fg:x="195302" fg:w="75"/><text x="99.2790%" y="383.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (641 samples, 0.33%)</title><rect x="99.0670%" y="421" width="0.3250%" height="15" fill="rgb(219,100,48)" fg:x="195377" fg:w="641"/><text x="99.3170%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (135,736 samples, 68.83%)</title><rect x="30.5689%" y="453" width="68.8257%" height="15" fill="rgb(253,5,41)" fg:x="60287" fg:w="135736"/><text x="30.8189%" y="463.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (121,632 samples, 61.67%)</title><rect x="37.7204%" y="437" width="61.6742%" height="15" fill="rgb(247,181,11)" fg:x="74391" fg:w="121632"/><text x="37.9704%" y="447.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (33 samples, 0.02%)</title><rect x="99.3946%" y="453" width="0.0167%" height="15" fill="rgb(222,223,25)" fg:x="196023" fg:w="33"/><text x="99.6446%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (537 samples, 0.27%)</title><rect x="99.4113%" y="453" width="0.2723%" height="15" fill="rgb(214,198,28)" fg:x="196056" fg:w="537"/><text x="99.6613%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (195,033 samples, 98.89%)</title><rect x="0.8072%" y="469" width="98.8926%" height="15" fill="rgb(230,46,43)" fg:x="1592" fg:w="195033"/><text x="1.0572%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>std::panic::catch_unwind (195,126 samples, 98.94%)</title><rect x="0.8072%" y="597" width="98.9397%" height="15" fill="rgb(233,65,53)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (195,126 samples, 98.94%)</title><rect x="0.8072%" y="581" width="98.9397%" height="15" fill="rgb(221,121,27)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (195,126 samples, 98.94%)</title><rect x="0.8072%" y="565" width="98.9397%" height="15" fill="rgb(247,70,47)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="575.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (195,126 samples, 98.94%)</title><rect x="0.8072%" y="549" width="98.9397%" height="15" fill="rgb(228,85,35)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="559.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (195,126 samples, 98.94%)</title><rect x="0.8072%" y="533" width="98.9397%" height="15" fill="rgb(209,50,18)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="543.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (195,126 samples, 98.94%)</title><rect x="0.8072%" y="517" width="98.9397%" height="15" fill="rgb(250,19,35)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (195,126 samples, 98.94%)</title><rect x="0.8072%" y="501" width="98.9397%" height="15" fill="rgb(253,107,29)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="511.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (195,126 samples, 98.94%)</title><rect x="0.8072%" y="485" width="98.9397%" height="15" fill="rgb(252,179,29)" fg:x="1592" fg:w="195126"/><text x="1.0572%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (93 samples, 0.05%)</title><rect x="99.6998%" y="469" width="0.0472%" height="15" fill="rgb(238,194,6)" fg:x="196625" fg:w="93"/><text x="99.9498%" y="479.50"></text></g><g><title>__clone3 (195,127 samples, 98.94%)</title><rect x="0.8072%" y="709" width="98.9403%" height="15" fill="rgb(238,164,29)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="719.50">__clone3</text></g><g><title>start_thread (195,127 samples, 98.94%)</title><rect x="0.8072%" y="693" width="98.9403%" height="15" fill="rgb(224,25,9)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="703.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (195,127 samples, 98.94%)</title><rect x="0.8072%" y="677" width="98.9403%" height="15" fill="rgb(244,153,23)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="687.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (195,127 samples, 98.94%)</title><rect x="0.8072%" y="661" width="98.9403%" height="15" fill="rgb(212,203,14)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (195,127 samples, 98.94%)</title><rect x="0.8072%" y="645" width="98.9403%" height="15" fill="rgb(220,164,20)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (195,127 samples, 98.94%)</title><rect x="0.8072%" y="629" width="98.9403%" height="15" fill="rgb(222,203,48)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="639.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (195,127 samples, 98.94%)</title><rect x="0.8072%" y="613" width="98.9403%" height="15" fill="rgb(215,159,22)" fg:x="1592" fg:w="195127"/><text x="1.0572%" y="623.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>asm_exc_page_fault (184 samples, 0.09%)</title><rect x="99.7510%" y="709" width="0.0933%" height="15" fill="rgb(216,183,47)" fg:x="196726" fg:w="184"/><text x="100.0010%" y="719.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (41 samples, 0.02%)</title><rect x="99.8443%" y="709" width="0.0208%" height="15" fill="rgb(229,195,25)" fg:x="196910" fg:w="41"/><text x="100.0943%" y="719.50"></text></g><g><title>page_remove_rmap (34 samples, 0.02%)</title><rect x="99.8971%" y="501" width="0.0172%" height="15" fill="rgb(224,132,51)" fg:x="197014" fg:w="34"/><text x="100.1471%" y="511.50"></text></g><g><title>free_unref_page_list (64 samples, 0.03%)</title><rect x="99.9437%" y="437" width="0.0325%" height="15" fill="rgb(240,63,7)" fg:x="197106" fg:w="64"/><text x="100.1937%" y="447.50"></text></g><g><title>free_unref_page_commit (54 samples, 0.03%)</title><rect x="99.9488%" y="421" width="0.0274%" height="15" fill="rgb(249,182,41)" fg:x="197116" fg:w="54"/><text x="100.1988%" y="431.50"></text></g><g><title>free_pcppages_bulk (47 samples, 0.02%)</title><rect x="99.9523%" y="405" width="0.0238%" height="15" fill="rgb(243,47,26)" fg:x="197123" fg:w="47"/><text x="100.2023%" y="415.50"></text></g><g><title>__free_one_page (45 samples, 0.02%)</title><rect x="99.9534%" y="389" width="0.0228%" height="15" fill="rgb(233,48,2)" fg:x="197125" fg:w="45"/><text x="100.2034%" y="399.50"></text></g><g><title>tlb_flush_mmu (124 samples, 0.06%)</title><rect x="99.9143%" y="501" width="0.0629%" height="15" fill="rgb(244,165,34)" fg:x="197048" fg:w="124"/><text x="100.1643%" y="511.50"></text></g><g><title>tlb_batch_pages_flush (124 samples, 0.06%)</title><rect x="99.9143%" y="485" width="0.0629%" height="15" fill="rgb(207,89,7)" fg:x="197048" fg:w="124"/><text x="100.1643%" y="495.50"></text></g><g><title>free_pages_and_swap_cache (124 samples, 0.06%)</title><rect x="99.9143%" y="469" width="0.0629%" height="15" fill="rgb(244,117,36)" fg:x="197048" fg:w="124"/><text x="100.1643%" y="479.50"></text></g><g><title>release_pages (117 samples, 0.06%)</title><rect x="99.9179%" y="453" width="0.0593%" height="15" fill="rgb(226,144,34)" fg:x="197055" fg:w="117"/><text x="100.1679%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (222 samples, 0.11%)</title><rect x="99.8651%" y="709" width="0.1126%" height="15" fill="rgb(213,23,19)" fg:x="196951" fg:w="222"/><text x="100.1151%" y="719.50"></text></g><g><title>do_syscall_64 (222 samples, 0.11%)</title><rect x="99.8651%" y="693" width="0.1126%" height="15" fill="rgb(217,75,12)" fg:x="196951" fg:w="222"/><text x="100.1151%" y="703.50"></text></g><g><title>__x64_sys_exit_group (221 samples, 0.11%)</title><rect x="99.8656%" y="677" width="0.1121%" height="15" fill="rgb(224,159,17)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="687.50"></text></g><g><title>do_group_exit (221 samples, 0.11%)</title><rect x="99.8656%" y="661" width="0.1121%" height="15" fill="rgb(217,118,1)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="671.50"></text></g><g><title>do_exit (221 samples, 0.11%)</title><rect x="99.8656%" y="645" width="0.1121%" height="15" fill="rgb(232,180,48)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="655.50"></text></g><g><title>exit_mm (221 samples, 0.11%)</title><rect x="99.8656%" y="629" width="0.1121%" height="15" fill="rgb(230,27,33)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="639.50"></text></g><g><title>mmput (221 samples, 0.11%)</title><rect x="99.8656%" y="613" width="0.1121%" height="15" fill="rgb(205,31,21)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="623.50"></text></g><g><title>exit_mmap (221 samples, 0.11%)</title><rect x="99.8656%" y="597" width="0.1121%" height="15" fill="rgb(253,59,4)" fg:x="196952" fg:w="221"/><text x="100.1156%" y="607.50"></text></g><g><title>unmap_vmas (220 samples, 0.11%)</title><rect x="99.8661%" y="581" width="0.1116%" height="15" fill="rgb(224,201,9)" fg:x="196953" fg:w="220"/><text x="100.1161%" y="591.50"></text></g><g><title>unmap_single_vma (220 samples, 0.11%)</title><rect x="99.8661%" y="565" width="0.1116%" height="15" fill="rgb(229,206,30)" fg:x="196953" fg:w="220"/><text x="100.1161%" y="575.50"></text></g><g><title>unmap_page_range (220 samples, 0.11%)</title><rect x="99.8661%" y="549" width="0.1116%" height="15" fill="rgb(212,67,47)" fg:x="196953" fg:w="220"/><text x="100.1161%" y="559.50"></text></g><g><title>zap_pmd_range.isra.0 (220 samples, 0.11%)</title><rect x="99.8661%" y="533" width="0.1116%" height="15" fill="rgb(211,96,50)" fg:x="196953" fg:w="220"/><text x="100.1161%" y="543.50"></text></g><g><title>zap_pte_range (217 samples, 0.11%)</title><rect x="99.8677%" y="517" width="0.1100%" height="15" fill="rgb(252,114,18)" fg:x="196956" fg:w="217"/><text x="100.1177%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.01%)</title><rect x="99.9817%" y="709" width="0.0106%" height="15" fill="rgb(223,58,37)" fg:x="197181" fg:w="21"/><text x="100.2317%" y="719.50"></text></g><g><title>all (197,217 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(237,70,4)" fg:x="0" fg:w="197217"/><text x="0.2500%" y="751.50"></text></g><g><title>project1 (197,211 samples, 100.00%)</title><rect x="0.0030%" y="725" width="99.9970%" height="15" fill="rgb(244,85,46)" fg:x="6" fg:w="197211"/><text x="0.2530%" y="735.50">project1</text></g></svg></svg>