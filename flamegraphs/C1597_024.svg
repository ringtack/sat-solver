<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="251570"><g><title>[[heap]] (44 samples, 0.02%)</title><rect x="0.0024%" y="725" width="0.0175%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="44"/><text x="0.2524%" y="735.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (42 samples, 0.02%)</title><rect x="0.0032%" y="709" width="0.0167%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="42"/><text x="0.2532%" y="719.50"></text></g><g><title>_int_free (54 samples, 0.02%)</title><rect x="0.0326%" y="709" width="0.0215%" height="15" fill="rgb(221,193,54)" fg:x="82" fg:w="54"/><text x="0.2826%" y="719.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (50 samples, 0.02%)</title><rect x="0.0640%" y="709" width="0.0199%" height="15" fill="rgb(248,212,6)" fg:x="161" fg:w="50"/><text x="0.3140%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (96 samples, 0.04%)</title><rect x="0.0839%" y="709" width="0.0382%" height="15" fill="rgb(208,68,35)" fg:x="211" fg:w="96"/><text x="0.3339%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (27 samples, 0.01%)</title><rect x="0.1113%" y="693" width="0.0107%" height="15" fill="rgb(232,128,0)" fg:x="280" fg:w="27"/><text x="0.3613%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (27 samples, 0.01%)</title><rect x="0.1113%" y="677" width="0.0107%" height="15" fill="rgb(207,160,47)" fg:x="280" fg:w="27"/><text x="0.3613%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (34 samples, 0.01%)</title><rect x="0.1817%" y="661" width="0.0135%" height="15" fill="rgb(228,23,34)" fg:x="457" fg:w="34"/><text x="0.4317%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (34 samples, 0.01%)</title><rect x="0.1817%" y="645" width="0.0135%" height="15" fill="rgb(218,30,26)" fg:x="457" fg:w="34"/><text x="0.4317%" y="655.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.01%)</title><rect x="0.1817%" y="629" width="0.0135%" height="15" fill="rgb(220,122,19)" fg:x="457" fg:w="34"/><text x="0.4317%" y="639.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (267 samples, 0.11%)</title><rect x="0.1451%" y="677" width="0.1061%" height="15" fill="rgb(250,228,42)" fg:x="365" fg:w="267"/><text x="0.3951%" y="687.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (141 samples, 0.06%)</title><rect x="0.1952%" y="661" width="0.0560%" height="15" fill="rgb(240,193,28)" fg:x="491" fg:w="141"/><text x="0.4452%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (141 samples, 0.06%)</title><rect x="0.1952%" y="645" width="0.0560%" height="15" fill="rgb(216,20,37)" fg:x="491" fg:w="141"/><text x="0.4452%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (141 samples, 0.06%)</title><rect x="0.1952%" y="629" width="0.0560%" height="15" fill="rgb(206,188,39)" fg:x="491" fg:w="141"/><text x="0.4452%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (141 samples, 0.06%)</title><rect x="0.1952%" y="613" width="0.0560%" height="15" fill="rgb(217,207,13)" fg:x="491" fg:w="141"/><text x="0.4452%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (141 samples, 0.06%)</title><rect x="0.1952%" y="597" width="0.0560%" height="15" fill="rgb(231,73,38)" fg:x="491" fg:w="141"/><text x="0.4452%" y="607.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (141 samples, 0.06%)</title><rect x="0.1952%" y="581" width="0.0560%" height="15" fill="rgb(225,20,46)" fg:x="491" fg:w="141"/><text x="0.4452%" y="591.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (34 samples, 0.01%)</title><rect x="0.2512%" y="677" width="0.0135%" height="15" fill="rgb(210,31,41)" fg:x="632" fg:w="34"/><text x="0.5012%" y="687.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (28 samples, 0.01%)</title><rect x="0.2536%" y="661" width="0.0111%" height="15" fill="rgb(221,200,47)" fg:x="638" fg:w="28"/><text x="0.5036%" y="671.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (28 samples, 0.01%)</title><rect x="0.2536%" y="645" width="0.0111%" height="15" fill="rgb(226,26,5)" fg:x="638" fg:w="28"/><text x="0.5036%" y="655.50"></text></g><g><title>[anon] (623 samples, 0.25%)</title><rect x="0.0199%" y="725" width="0.2476%" height="15" fill="rgb(249,33,26)" fg:x="50" fg:w="623"/><text x="0.2699%" y="735.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (321 samples, 0.13%)</title><rect x="0.1399%" y="709" width="0.1276%" height="15" fill="rgb(235,183,28)" fg:x="352" fg:w="321"/><text x="0.3899%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (321 samples, 0.13%)</title><rect x="0.1399%" y="693" width="0.1276%" height="15" fill="rgb(221,5,38)" fg:x="352" fg:w="321"/><text x="0.3899%" y="703.50"></text></g><g><title>__GI___libc_free (75 samples, 0.03%)</title><rect x="0.2715%" y="709" width="0.0298%" height="15" fill="rgb(247,18,42)" fg:x="683" fg:w="75"/><text x="0.5215%" y="719.50"></text></g><g><title>__GI___libc_malloc (68 samples, 0.03%)</title><rect x="0.3013%" y="709" width="0.0270%" height="15" fill="rgb(241,131,45)" fg:x="758" fg:w="68"/><text x="0.5513%" y="719.50"></text></g><g><title>_int_free (41 samples, 0.02%)</title><rect x="0.3399%" y="709" width="0.0163%" height="15" fill="rgb(249,31,29)" fg:x="855" fg:w="41"/><text x="0.5899%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (54 samples, 0.02%)</title><rect x="0.3967%" y="709" width="0.0215%" height="15" fill="rgb(225,111,53)" fg:x="998" fg:w="54"/><text x="0.6467%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (65 samples, 0.03%)</title><rect x="0.4182%" y="709" width="0.0258%" height="15" fill="rgb(238,160,17)" fg:x="1052" fg:w="65"/><text x="0.6682%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (65 samples, 0.03%)</title><rect x="0.4182%" y="693" width="0.0258%" height="15" fill="rgb(214,148,48)" fg:x="1052" fg:w="65"/><text x="0.6682%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (28 samples, 0.01%)</title><rect x="0.4329%" y="677" width="0.0111%" height="15" fill="rgb(232,36,49)" fg:x="1089" fg:w="28"/><text x="0.6829%" y="687.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (29 samples, 0.01%)</title><rect x="0.4516%" y="709" width="0.0115%" height="15" fill="rgb(209,103,24)" fg:x="1136" fg:w="29"/><text x="0.7016%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (415 samples, 0.16%)</title><rect x="0.4631%" y="709" width="0.1650%" height="15" fill="rgb(229,88,8)" fg:x="1165" fg:w="415"/><text x="0.7131%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (202 samples, 0.08%)</title><rect x="0.5478%" y="693" width="0.0803%" height="15" fill="rgb(213,181,19)" fg:x="1378" fg:w="202"/><text x="0.7978%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (202 samples, 0.08%)</title><rect x="0.5478%" y="677" width="0.0803%" height="15" fill="rgb(254,191,54)" fg:x="1378" fg:w="202"/><text x="0.7978%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (202 samples, 0.08%)</title><rect x="0.5478%" y="661" width="0.0803%" height="15" fill="rgb(241,83,37)" fg:x="1378" fg:w="202"/><text x="0.7978%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (202 samples, 0.08%)</title><rect x="0.5478%" y="645" width="0.0803%" height="15" fill="rgb(233,36,39)" fg:x="1378" fg:w="202"/><text x="0.7978%" y="655.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (67 samples, 0.03%)</title><rect x="0.6281%" y="709" width="0.0266%" height="15" fill="rgb(226,3,54)" fg:x="1580" fg:w="67"/><text x="0.8781%" y="719.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (48 samples, 0.02%)</title><rect x="0.6356%" y="693" width="0.0191%" height="15" fill="rgb(245,192,40)" fg:x="1599" fg:w="48"/><text x="0.8856%" y="703.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (329 samples, 0.13%)</title><rect x="0.6547%" y="709" width="0.1308%" height="15" fill="rgb(238,167,29)" fg:x="1647" fg:w="329"/><text x="0.9047%" y="719.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (52 samples, 0.02%)</title><rect x="0.7855%" y="709" width="0.0207%" height="15" fill="rgb(232,182,51)" fg:x="1976" fg:w="52"/><text x="1.0355%" y="719.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (27 samples, 0.01%)</title><rect x="0.8061%" y="709" width="0.0107%" height="15" fill="rgb(231,60,39)" fg:x="2028" fg:w="27"/><text x="1.0561%" y="719.50"></text></g><g><title>[unknown] (1,375 samples, 0.55%)</title><rect x="0.2715%" y="725" width="0.5466%" height="15" fill="rgb(208,69,12)" fg:x="683" fg:w="1375"/><text x="0.5215%" y="735.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (29 samples, 0.01%)</title><rect x="0.8745%" y="469" width="0.0115%" height="15" fill="rgb(235,93,37)" fg:x="2200" fg:w="29"/><text x="1.1245%" y="479.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (28 samples, 0.01%)</title><rect x="0.8749%" y="453" width="0.0111%" height="15" fill="rgb(213,116,39)" fg:x="2201" fg:w="28"/><text x="1.1249%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::le (26 samples, 0.01%)</title><rect x="0.8928%" y="469" width="0.0103%" height="15" fill="rgb(222,207,29)" fg:x="2246" fg:w="26"/><text x="1.1428%" y="479.50"></text></g><g><title>_int_free (46 samples, 0.02%)</title><rect x="0.9139%" y="341" width="0.0183%" height="15" fill="rgb(206,96,30)" fg:x="2299" fg:w="46"/><text x="1.1639%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.04%)</title><rect x="0.9031%" y="437" width="0.0366%" height="15" fill="rgb(218,138,4)" fg:x="2272" fg:w="92"/><text x="1.1531%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (92 samples, 0.04%)</title><rect x="0.9031%" y="421" width="0.0366%" height="15" fill="rgb(250,191,14)" fg:x="2272" fg:w="92"/><text x="1.1531%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (92 samples, 0.04%)</title><rect x="0.9031%" y="405" width="0.0366%" height="15" fill="rgb(239,60,40)" fg:x="2272" fg:w="92"/><text x="1.1531%" y="415.50"></text></g><g><title>__rdl_dealloc (92 samples, 0.04%)</title><rect x="0.9031%" y="389" width="0.0366%" height="15" fill="rgb(206,27,48)" fg:x="2272" fg:w="92"/><text x="1.1531%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (92 samples, 0.04%)</title><rect x="0.9031%" y="373" width="0.0366%" height="15" fill="rgb(225,35,8)" fg:x="2272" fg:w="92"/><text x="1.1531%" y="383.50"></text></g><g><title>__GI___libc_free (90 samples, 0.04%)</title><rect x="0.9039%" y="357" width="0.0358%" height="15" fill="rgb(250,213,24)" fg:x="2274" fg:w="90"/><text x="1.1539%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::types::Lit&gt;&gt; (99 samples, 0.04%)</title><rect x="0.9031%" y="469" width="0.0394%" height="15" fill="rgb(247,123,22)" fg:x="2272" fg:w="99"/><text x="1.1531%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::types::Lit&gt;&gt; (99 samples, 0.04%)</title><rect x="0.9031%" y="453" width="0.0394%" height="15" fill="rgb(231,138,38)" fg:x="2272" fg:w="99"/><text x="1.1531%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (128 samples, 0.05%)</title><rect x="0.9469%" y="469" width="0.0509%" height="15" fill="rgb(231,145,46)" fg:x="2382" fg:w="128"/><text x="1.1969%" y="479.50"></text></g><g><title>__GI___libc_malloc (239 samples, 0.10%)</title><rect x="2.3298%" y="261" width="0.0950%" height="15" fill="rgb(251,118,11)" fg:x="5861" fg:w="239"/><text x="2.5798%" y="271.50"></text></g><g><title>tcache_get (189 samples, 0.08%)</title><rect x="2.3496%" y="245" width="0.0751%" height="15" fill="rgb(217,147,25)" fg:x="5911" fg:w="189"/><text x="2.5996%" y="255.50"></text></g><g><title>__rdl_alloc (243 samples, 0.10%)</title><rect x="2.3286%" y="293" width="0.0966%" height="15" fill="rgb(247,81,37)" fg:x="5858" fg:w="243"/><text x="2.5786%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (240 samples, 0.10%)</title><rect x="2.3298%" y="277" width="0.0954%" height="15" fill="rgb(209,12,38)" fg:x="5861" fg:w="240"/><text x="2.5798%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (266 samples, 0.11%)</title><rect x="2.3286%" y="341" width="0.1057%" height="15" fill="rgb(227,1,9)" fg:x="5858" fg:w="266"/><text x="2.5786%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (266 samples, 0.11%)</title><rect x="2.3286%" y="325" width="0.1057%" height="15" fill="rgb(248,47,43)" fg:x="5858" fg:w="266"/><text x="2.5786%" y="335.50"></text></g><g><title>alloc::alloc::alloc (266 samples, 0.11%)</title><rect x="2.3286%" y="309" width="0.1057%" height="15" fill="rgb(221,10,30)" fg:x="5858" fg:w="266"/><text x="2.5786%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (305 samples, 0.12%)</title><rect x="2.3163%" y="389" width="0.1212%" height="15" fill="rgb(210,229,1)" fg:x="5827" fg:w="305"/><text x="2.5663%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (305 samples, 0.12%)</title><rect x="2.3163%" y="373" width="0.1212%" height="15" fill="rgb(222,148,37)" fg:x="5827" fg:w="305"/><text x="2.5663%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (305 samples, 0.12%)</title><rect x="2.3163%" y="357" width="0.1212%" height="15" fill="rgb(234,67,33)" fg:x="5827" fg:w="305"/><text x="2.5663%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (337 samples, 0.13%)</title><rect x="2.3159%" y="453" width="0.1340%" height="15" fill="rgb(247,98,35)" fg:x="5826" fg:w="337"/><text x="2.5659%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (336 samples, 0.13%)</title><rect x="2.3163%" y="437" width="0.1336%" height="15" fill="rgb(247,138,52)" fg:x="5827" fg:w="336"/><text x="2.5663%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (336 samples, 0.13%)</title><rect x="2.3163%" y="421" width="0.1336%" height="15" fill="rgb(213,79,30)" fg:x="5827" fg:w="336"/><text x="2.5663%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (336 samples, 0.13%)</title><rect x="2.3163%" y="405" width="0.1336%" height="15" fill="rgb(246,177,23)" fg:x="5827" fg:w="336"/><text x="2.5663%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.01%)</title><rect x="2.4375%" y="389" width="0.0123%" height="15" fill="rgb(230,62,27)" fg:x="6132" fg:w="31"/><text x="2.6875%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.01%)</title><rect x="2.4375%" y="373" width="0.0123%" height="15" fill="rgb(216,154,8)" fg:x="6132" fg:w="31"/><text x="2.6875%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (28 samples, 0.01%)</title><rect x="2.4387%" y="357" width="0.0111%" height="15" fill="rgb(244,35,45)" fg:x="6135" fg:w="28"/><text x="2.6887%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (47 samples, 0.02%)</title><rect x="2.4498%" y="453" width="0.0187%" height="15" fill="rgb(251,115,12)" fg:x="6163" fg:w="47"/><text x="2.6998%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28 samples, 0.01%)</title><rect x="2.5444%" y="421" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="6401" fg:w="28"/><text x="2.7944%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.01%)</title><rect x="2.5444%" y="405" width="0.0111%" height="15" fill="rgb(233,84,52)" fg:x="6401" fg:w="28"/><text x="2.7944%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (208 samples, 0.08%)</title><rect x="2.4733%" y="437" width="0.0827%" height="15" fill="rgb(207,117,47)" fg:x="6222" fg:w="208"/><text x="2.7233%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (314 samples, 0.12%)</title><rect x="2.4733%" y="453" width="0.1248%" height="15" fill="rgb(249,43,39)" fg:x="6222" fg:w="314"/><text x="2.7233%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (106 samples, 0.04%)</title><rect x="2.5559%" y="437" width="0.0421%" height="15" fill="rgb(209,38,44)" fg:x="6430" fg:w="106"/><text x="2.8059%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (91 samples, 0.04%)</title><rect x="2.5619%" y="421" width="0.0362%" height="15" fill="rgb(236,212,23)" fg:x="6445" fg:w="91"/><text x="2.8119%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (77 samples, 0.03%)</title><rect x="2.5981%" y="437" width="0.0306%" height="15" fill="rgb(242,79,21)" fg:x="6536" fg:w="77"/><text x="2.8481%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (37 samples, 0.01%)</title><rect x="2.6287%" y="421" width="0.0147%" height="15" fill="rgb(211,96,35)" fg:x="6613" fg:w="37"/><text x="2.8787%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (116 samples, 0.05%)</title><rect x="2.5981%" y="453" width="0.0461%" height="15" fill="rgb(253,215,40)" fg:x="6536" fg:w="116"/><text x="2.8481%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (39 samples, 0.02%)</title><rect x="2.6287%" y="437" width="0.0155%" height="15" fill="rgb(211,81,21)" fg:x="6613" fg:w="39"/><text x="2.8787%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (971 samples, 0.39%)</title><rect x="2.6442%" y="453" width="0.3860%" height="15" fill="rgb(208,190,38)" fg:x="6652" fg:w="971"/><text x="2.8942%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (760 samples, 0.30%)</title><rect x="2.7281%" y="437" width="0.3021%" height="15" fill="rgb(235,213,38)" fg:x="6863" fg:w="760"/><text x="2.9781%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (509 samples, 0.20%)</title><rect x="3.0675%" y="421" width="0.2023%" height="15" fill="rgb(237,122,38)" fg:x="7717" fg:w="509"/><text x="3.3175%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (509 samples, 0.20%)</title><rect x="3.0675%" y="405" width="0.2023%" height="15" fill="rgb(244,218,35)" fg:x="7717" fg:w="509"/><text x="3.3175%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (655 samples, 0.26%)</title><rect x="3.0302%" y="453" width="0.2604%" height="15" fill="rgb(240,68,47)" fg:x="7623" fg:w="655"/><text x="3.2802%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (631 samples, 0.25%)</title><rect x="3.0397%" y="437" width="0.2508%" height="15" fill="rgb(210,16,53)" fg:x="7647" fg:w="631"/><text x="3.2897%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (52 samples, 0.02%)</title><rect x="3.2699%" y="421" width="0.0207%" height="15" fill="rgb(235,124,12)" fg:x="8226" fg:w="52"/><text x="3.5199%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (52 samples, 0.02%)</title><rect x="3.2699%" y="405" width="0.0207%" height="15" fill="rgb(224,169,11)" fg:x="8226" fg:w="52"/><text x="3.5199%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (47 samples, 0.02%)</title><rect x="3.2981%" y="453" width="0.0187%" height="15" fill="rgb(250,166,2)" fg:x="8297" fg:w="47"/><text x="3.5481%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (57 samples, 0.02%)</title><rect x="3.3168%" y="453" width="0.0227%" height="15" fill="rgb(242,216,29)" fg:x="8344" fg:w="57"/><text x="3.5668%" y="463.50"></text></g><g><title>__memcpy_evex_unaligned_erms (54 samples, 0.02%)</title><rect x="3.6435%" y="277" width="0.0215%" height="15" fill="rgb(230,116,27)" fg:x="9166" fg:w="54"/><text x="3.8935%" y="287.50"></text></g><g><title>_int_free (60 samples, 0.02%)</title><rect x="3.6650%" y="277" width="0.0239%" height="15" fill="rgb(228,99,48)" fg:x="9220" fg:w="60"/><text x="3.9150%" y="287.50"></text></g><g><title>__handle_mm_fault (29 samples, 0.01%)</title><rect x="3.7111%" y="197" width="0.0115%" height="15" fill="rgb(253,11,6)" fg:x="9336" fg:w="29"/><text x="3.9611%" y="207.50"></text></g><g><title>handle_pte_fault (27 samples, 0.01%)</title><rect x="3.7119%" y="181" width="0.0107%" height="15" fill="rgb(247,143,39)" fg:x="9338" fg:w="27"/><text x="3.9619%" y="191.50"></text></g><g><title>do_user_addr_fault (32 samples, 0.01%)</title><rect x="3.7107%" y="229" width="0.0127%" height="15" fill="rgb(236,97,10)" fg:x="9335" fg:w="32"/><text x="3.9607%" y="239.50"></text></g><g><title>handle_mm_fault (32 samples, 0.01%)</title><rect x="3.7107%" y="213" width="0.0127%" height="15" fill="rgb(233,208,19)" fg:x="9335" fg:w="32"/><text x="3.9607%" y="223.50"></text></g><g><title>asm_exc_page_fault (34 samples, 0.01%)</title><rect x="3.7107%" y="261" width="0.0135%" height="15" fill="rgb(216,164,2)" fg:x="9335" fg:w="34"/><text x="3.9607%" y="271.50"></text></g><g><title>exc_page_fault (34 samples, 0.01%)</title><rect x="3.7107%" y="245" width="0.0135%" height="15" fill="rgb(220,129,5)" fg:x="9335" fg:w="34"/><text x="3.9607%" y="255.50"></text></g><g><title>charge_memcg (27 samples, 0.01%)</title><rect x="3.7612%" y="117" width="0.0107%" height="15" fill="rgb(242,17,10)" fg:x="9462" fg:w="27"/><text x="4.0112%" y="127.50"></text></g><g><title>__mem_cgroup_charge (63 samples, 0.03%)</title><rect x="3.7600%" y="133" width="0.0250%" height="15" fill="rgb(242,107,0)" fg:x="9459" fg:w="63"/><text x="4.0100%" y="143.50"></text></g><g><title>get_mem_cgroup_from_mm (33 samples, 0.01%)</title><rect x="3.7719%" y="117" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="9489" fg:w="33"/><text x="4.0219%" y="127.50"></text></g><g><title>do_anonymous_page (143 samples, 0.06%)</title><rect x="3.7540%" y="149" width="0.0568%" height="15" fill="rgb(233,223,10)" fg:x="9444" fg:w="143"/><text x="4.0040%" y="159.50"></text></g><g><title>vma_alloc_folio (37 samples, 0.01%)</title><rect x="3.7962%" y="133" width="0.0147%" height="15" fill="rgb(215,21,27)" fg:x="9550" fg:w="37"/><text x="4.0462%" y="143.50"></text></g><g><title>__folio_alloc (33 samples, 0.01%)</title><rect x="3.7978%" y="117" width="0.0131%" height="15" fill="rgb(232,23,21)" fg:x="9554" fg:w="33"/><text x="4.0478%" y="127.50"></text></g><g><title>__alloc_pages (32 samples, 0.01%)</title><rect x="3.7981%" y="101" width="0.0127%" height="15" fill="rgb(244,5,23)" fg:x="9555" fg:w="32"/><text x="4.0481%" y="111.50"></text></g><g><title>get_page_from_freelist (26 samples, 0.01%)</title><rect x="3.8005%" y="85" width="0.0103%" height="15" fill="rgb(226,81,46)" fg:x="9561" fg:w="26"/><text x="4.0505%" y="95.50"></text></g><g><title>handle_pte_fault (161 samples, 0.06%)</title><rect x="3.7473%" y="165" width="0.0640%" height="15" fill="rgb(247,70,30)" fg:x="9427" fg:w="161"/><text x="3.9973%" y="175.50"></text></g><g><title>__handle_mm_fault (166 samples, 0.07%)</title><rect x="3.7457%" y="181" width="0.0660%" height="15" fill="rgb(212,68,19)" fg:x="9423" fg:w="166"/><text x="3.9957%" y="191.50"></text></g><g><title>handle_mm_fault (179 samples, 0.07%)</title><rect x="3.7453%" y="197" width="0.0712%" height="15" fill="rgb(240,187,13)" fg:x="9422" fg:w="179"/><text x="3.9953%" y="207.50"></text></g><g><title>do_user_addr_fault (185 samples, 0.07%)</title><rect x="3.7437%" y="213" width="0.0735%" height="15" fill="rgb(223,113,26)" fg:x="9418" fg:w="185"/><text x="3.9937%" y="223.50"></text></g><g><title>asm_exc_page_fault (206 samples, 0.08%)</title><rect x="3.7429%" y="245" width="0.0819%" height="15" fill="rgb(206,192,2)" fg:x="9416" fg:w="206"/><text x="3.9929%" y="255.50"></text></g><g><title>exc_page_fault (205 samples, 0.08%)</title><rect x="3.7433%" y="229" width="0.0815%" height="15" fill="rgb(241,108,4)" fg:x="9417" fg:w="205"/><text x="3.9933%" y="239.50"></text></g><g><title>perf_event_mmap_output (50 samples, 0.02%)</title><rect x="3.8868%" y="69" width="0.0199%" height="15" fill="rgb(247,173,49)" fg:x="9778" fg:w="50"/><text x="4.1368%" y="79.50"></text></g><g><title>perf_event_mmap (151 samples, 0.06%)</title><rect x="3.8474%" y="133" width="0.0600%" height="15" fill="rgb(224,114,35)" fg:x="9679" fg:w="151"/><text x="4.0974%" y="143.50"></text></g><g><title>perf_event_mmap_event (146 samples, 0.06%)</title><rect x="3.8494%" y="117" width="0.0580%" height="15" fill="rgb(245,159,27)" fg:x="9684" fg:w="146"/><text x="4.0994%" y="127.50"></text></g><g><title>perf_iterate_sb (140 samples, 0.06%)</title><rect x="3.8518%" y="101" width="0.0557%" height="15" fill="rgb(245,172,44)" fg:x="9690" fg:w="140"/><text x="4.1018%" y="111.50"></text></g><g><title>perf_iterate_ctx (139 samples, 0.06%)</title><rect x="3.8522%" y="85" width="0.0553%" height="15" fill="rgb(236,23,11)" fg:x="9691" fg:w="139"/><text x="4.1022%" y="95.50"></text></g><g><title>vma_merge (32 samples, 0.01%)</title><rect x="3.9075%" y="133" width="0.0127%" height="15" fill="rgb(205,117,38)" fg:x="9830" fg:w="32"/><text x="4.1575%" y="143.50"></text></g><g><title>mprotect_fixup (211 samples, 0.08%)</title><rect x="3.8387%" y="149" width="0.0839%" height="15" fill="rgb(237,72,25)" fg:x="9657" fg:w="211"/><text x="4.0887%" y="159.50"></text></g><g><title>__x64_sys_mprotect (230 samples, 0.09%)</title><rect x="3.8315%" y="181" width="0.0914%" height="15" fill="rgb(244,70,9)" fg:x="9639" fg:w="230"/><text x="4.0815%" y="191.50"></text></g><g><title>do_mprotect_pkey (230 samples, 0.09%)</title><rect x="3.8315%" y="165" width="0.0914%" height="15" fill="rgb(217,125,39)" fg:x="9639" fg:w="230"/><text x="4.0815%" y="175.50"></text></g><g><title>do_syscall_64 (255 samples, 0.10%)</title><rect x="3.8307%" y="197" width="0.1014%" height="15" fill="rgb(235,36,10)" fg:x="9637" fg:w="255"/><text x="4.0807%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (267 samples, 0.11%)</title><rect x="3.8268%" y="213" width="0.1061%" height="15" fill="rgb(251,123,47)" fg:x="9627" fg:w="267"/><text x="4.0768%" y="223.50"></text></g><g><title>grow_heap (316 samples, 0.13%)</title><rect x="3.8248%" y="245" width="0.1256%" height="15" fill="rgb(221,13,13)" fg:x="9622" fg:w="316"/><text x="4.0748%" y="255.50"></text></g><g><title>__GI___mprotect (315 samples, 0.13%)</title><rect x="3.8252%" y="229" width="0.1252%" height="15" fill="rgb(238,131,9)" fg:x="9623" fg:w="315"/><text x="4.0752%" y="239.50"></text></g><g><title>syscall_return_via_sysret (26 samples, 0.01%)</title><rect x="3.9401%" y="213" width="0.0103%" height="15" fill="rgb(211,50,8)" fg:x="9912" fg:w="26"/><text x="4.1901%" y="223.50"></text></g><g><title>_int_realloc (804 samples, 0.32%)</title><rect x="3.6336%" y="293" width="0.3196%" height="15" fill="rgb(245,182,24)" fg:x="9141" fg:w="804"/><text x="3.8836%" y="303.50"></text></g><g><title>_int_malloc (665 samples, 0.26%)</title><rect x="3.6888%" y="277" width="0.2643%" height="15" fill="rgb(242,14,37)" fg:x="9280" fg:w="665"/><text x="3.9388%" y="287.50"></text></g><g><title>sysmalloc (571 samples, 0.23%)</title><rect x="3.7262%" y="261" width="0.2270%" height="15" fill="rgb(246,228,12)" fg:x="9374" fg:w="571"/><text x="3.9762%" y="271.50"></text></g><g><title>arena_for_chunk (42 samples, 0.02%)</title><rect x="3.9532%" y="293" width="0.0167%" height="15" fill="rgb(213,55,15)" fg:x="9945" fg:w="42"/><text x="4.2032%" y="303.50"></text></g><g><title>arena_for_chunk (40 samples, 0.02%)</title><rect x="3.9540%" y="277" width="0.0159%" height="15" fill="rgb(209,9,3)" fg:x="9947" fg:w="40"/><text x="4.2040%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,066 samples, 0.42%)</title><rect x="3.5477%" y="389" width="0.4237%" height="15" fill="rgb(230,59,30)" fg:x="8925" fg:w="1066"/><text x="3.7977%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,066 samples, 0.42%)</title><rect x="3.5477%" y="373" width="0.4237%" height="15" fill="rgb(209,121,21)" fg:x="8925" fg:w="1066"/><text x="3.7977%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1,065 samples, 0.42%)</title><rect x="3.5481%" y="357" width="0.4233%" height="15" fill="rgb(220,109,13)" fg:x="8926" fg:w="1065"/><text x="3.7981%" y="367.50"></text></g><g><title>__rdl_realloc (1,065 samples, 0.42%)</title><rect x="3.5481%" y="341" width="0.4233%" height="15" fill="rgb(232,18,1)" fg:x="8926" fg:w="1065"/><text x="3.7981%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,065 samples, 0.42%)</title><rect x="3.5481%" y="325" width="0.4233%" height="15" fill="rgb(215,41,42)" fg:x="8926" fg:w="1065"/><text x="3.7981%" y="335.50"></text></g><g><title>__GI___libc_realloc (1,065 samples, 0.42%)</title><rect x="3.5481%" y="309" width="0.4233%" height="15" fill="rgb(224,123,36)" fg:x="8926" fg:w="1065"/><text x="3.7981%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,069 samples, 0.42%)</title><rect x="3.5469%" y="405" width="0.4249%" height="15" fill="rgb(240,125,3)" fg:x="8923" fg:w="1069"/><text x="3.7969%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,080 samples, 0.43%)</title><rect x="3.5449%" y="421" width="0.4293%" height="15" fill="rgb(205,98,50)" fg:x="8918" fg:w="1080"/><text x="3.7949%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,088 samples, 0.43%)</title><rect x="3.5449%" y="437" width="0.4325%" height="15" fill="rgb(205,185,37)" fg:x="8918" fg:w="1088"/><text x="3.7949%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (108 samples, 0.04%)</title><rect x="3.9774%" y="437" width="0.0429%" height="15" fill="rgb(238,207,15)" fg:x="10006" fg:w="108"/><text x="4.2274%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (108 samples, 0.04%)</title><rect x="3.9774%" y="421" width="0.0429%" height="15" fill="rgb(213,199,42)" fg:x="10006" fg:w="108"/><text x="4.2274%" y="431.50"></text></g><g><title>core::ptr::write (792 samples, 0.31%)</title><rect x="4.0219%" y="437" width="0.3148%" height="15" fill="rgb(235,201,11)" fg:x="10118" fg:w="792"/><text x="4.2719%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,521 samples, 1.00%)</title><rect x="3.3394%" y="453" width="1.0021%" height="15" fill="rgb(207,46,11)" fg:x="8401" fg:w="2521"/><text x="3.5894%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (26 samples, 0.01%)</title><rect x="4.3638%" y="373" width="0.0103%" height="15" fill="rgb(241,35,35)" fg:x="10978" fg:w="26"/><text x="4.6138%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (36 samples, 0.01%)</title><rect x="4.3622%" y="421" width="0.0143%" height="15" fill="rgb(243,32,47)" fg:x="10974" fg:w="36"/><text x="4.6122%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (36 samples, 0.01%)</title><rect x="4.3622%" y="405" width="0.0143%" height="15" fill="rgb(247,202,23)" fg:x="10974" fg:w="36"/><text x="4.6122%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (36 samples, 0.01%)</title><rect x="4.3622%" y="389" width="0.0143%" height="15" fill="rgb(219,102,11)" fg:x="10974" fg:w="36"/><text x="4.6122%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (249 samples, 0.10%)</title><rect x="4.3562%" y="437" width="0.0990%" height="15" fill="rgb(243,110,44)" fg:x="10959" fg:w="249"/><text x="4.6062%" y="447.50"></text></g><g><title>core::ptr::write (187 samples, 0.07%)</title><rect x="4.3809%" y="421" width="0.0743%" height="15" fill="rgb(222,74,54)" fg:x="11021" fg:w="187"/><text x="4.6309%" y="431.50"></text></g><g><title>__memset_evex_unaligned_erms (172 samples, 0.07%)</title><rect x="4.3869%" y="405" width="0.0684%" height="15" fill="rgb(216,99,12)" fg:x="11036" fg:w="172"/><text x="4.6369%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (310 samples, 0.12%)</title><rect x="4.3415%" y="453" width="0.1232%" height="15" fill="rgb(226,22,26)" fg:x="10922" fg:w="310"/><text x="4.5915%" y="463.50"></text></g><g><title>__rdl_alloc (395 samples, 0.16%)</title><rect x="4.4664%" y="341" width="0.1570%" height="15" fill="rgb(217,163,10)" fg:x="11236" fg:w="395"/><text x="4.7164%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (395 samples, 0.16%)</title><rect x="4.4664%" y="325" width="0.1570%" height="15" fill="rgb(213,25,53)" fg:x="11236" fg:w="395"/><text x="4.7164%" y="335.50"></text></g><g><title>__GI___libc_malloc (393 samples, 0.16%)</title><rect x="4.4671%" y="309" width="0.1562%" height="15" fill="rgb(252,105,26)" fg:x="11238" fg:w="393"/><text x="4.7171%" y="319.50"></text></g><g><title>tcache_get (125 samples, 0.05%)</title><rect x="4.5737%" y="293" width="0.0497%" height="15" fill="rgb(220,39,43)" fg:x="11506" fg:w="125"/><text x="4.8237%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (411 samples, 0.16%)</title><rect x="4.4648%" y="453" width="0.1634%" height="15" fill="rgb(229,68,48)" fg:x="11232" fg:w="411"/><text x="4.7148%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (411 samples, 0.16%)</title><rect x="4.4648%" y="437" width="0.1634%" height="15" fill="rgb(252,8,32)" fg:x="11232" fg:w="411"/><text x="4.7148%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (408 samples, 0.16%)</title><rect x="4.4660%" y="421" width="0.1622%" height="15" fill="rgb(223,20,43)" fg:x="11235" fg:w="408"/><text x="4.7160%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (408 samples, 0.16%)</title><rect x="4.4660%" y="405" width="0.1622%" height="15" fill="rgb(229,81,49)" fg:x="11235" fg:w="408"/><text x="4.7160%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (407 samples, 0.16%)</title><rect x="4.4664%" y="389" width="0.1618%" height="15" fill="rgb(236,28,36)" fg:x="11236" fg:w="407"/><text x="4.7164%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (407 samples, 0.16%)</title><rect x="4.4664%" y="373" width="0.1618%" height="15" fill="rgb(249,185,26)" fg:x="11236" fg:w="407"/><text x="4.7164%" y="383.50"></text></g><g><title>alloc::alloc::alloc (407 samples, 0.16%)</title><rect x="4.4664%" y="357" width="0.1618%" height="15" fill="rgb(249,174,33)" fg:x="11236" fg:w="407"/><text x="4.7164%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::le (82 samples, 0.03%)</title><rect x="4.6325%" y="453" width="0.0326%" height="15" fill="rgb(233,201,37)" fg:x="11654" fg:w="82"/><text x="4.8825%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (109 samples, 0.04%)</title><rect x="4.8289%" y="277" width="0.0433%" height="15" fill="rgb(221,78,26)" fg:x="12148" fg:w="109"/><text x="5.0789%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (109 samples, 0.04%)</title><rect x="4.8289%" y="261" width="0.0433%" height="15" fill="rgb(250,127,30)" fg:x="12148" fg:w="109"/><text x="5.0789%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (109 samples, 0.04%)</title><rect x="4.8289%" y="245" width="0.0433%" height="15" fill="rgb(230,49,44)" fg:x="12148" fg:w="109"/><text x="5.0789%" y="255.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (158 samples, 0.06%)</title><rect x="4.8098%" y="309" width="0.0628%" height="15" fill="rgb(229,67,23)" fg:x="12100" fg:w="158"/><text x="5.0598%" y="319.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (158 samples, 0.06%)</title><rect x="4.8098%" y="293" width="0.0628%" height="15" fill="rgb(249,83,47)" fg:x="12100" fg:w="158"/><text x="5.0598%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (426 samples, 0.17%)</title><rect x="4.7394%" y="389" width="0.1693%" height="15" fill="rgb(215,43,3)" fg:x="11923" fg:w="426"/><text x="4.9894%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (421 samples, 0.17%)</title><rect x="4.7414%" y="373" width="0.1673%" height="15" fill="rgb(238,154,13)" fg:x="11928" fg:w="421"/><text x="4.9914%" y="383.50"></text></g><g><title>core::cmp::max_by (421 samples, 0.17%)</title><rect x="4.7414%" y="357" width="0.1673%" height="15" fill="rgb(219,56,2)" fg:x="11928" fg:w="421"/><text x="4.9914%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (249 samples, 0.10%)</title><rect x="4.8098%" y="341" width="0.0990%" height="15" fill="rgb(233,0,4)" fg:x="12100" fg:w="249"/><text x="5.0598%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (249 samples, 0.10%)</title><rect x="4.8098%" y="325" width="0.0990%" height="15" fill="rgb(235,30,7)" fg:x="12100" fg:w="249"/><text x="5.0598%" y="335.50"></text></g><g><title>project1::solver::types::Lit::var (91 samples, 0.04%)</title><rect x="4.8726%" y="309" width="0.0362%" height="15" fill="rgb(250,79,13)" fg:x="12258" fg:w="91"/><text x="5.1226%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (616 samples, 0.24%)</title><rect x="4.6651%" y="405" width="0.2449%" height="15" fill="rgb(211,146,34)" fg:x="11736" fg:w="616"/><text x="4.9151%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (619 samples, 0.25%)</title><rect x="4.6651%" y="453" width="0.2461%" height="15" fill="rgb(228,22,38)" fg:x="11736" fg:w="619"/><text x="4.9151%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (619 samples, 0.25%)</title><rect x="4.6651%" y="437" width="0.2461%" height="15" fill="rgb(235,168,5)" fg:x="11736" fg:w="619"/><text x="4.9151%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (619 samples, 0.25%)</title><rect x="4.6651%" y="421" width="0.2461%" height="15" fill="rgb(221,155,16)" fg:x="11736" fg:w="619"/><text x="4.9151%" y="431.50"></text></g><g><title>core::mem::replace (26 samples, 0.01%)</title><rect x="4.9112%" y="453" width="0.0103%" height="15" fill="rgb(215,215,53)" fg:x="12355" fg:w="26"/><text x="5.1612%" y="463.50"></text></g><g><title>core::ptr::write (26 samples, 0.01%)</title><rect x="4.9112%" y="437" width="0.0103%" height="15" fill="rgb(223,4,10)" fg:x="12355" fg:w="26"/><text x="5.1612%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.01%)</title><rect x="4.9354%" y="389" width="0.0123%" height="15" fill="rgb(234,103,6)" fg:x="12416" fg:w="31"/><text x="5.1854%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (55 samples, 0.02%)</title><rect x="4.9279%" y="421" width="0.0219%" height="15" fill="rgb(227,97,0)" fg:x="12397" fg:w="55"/><text x="5.1779%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (55 samples, 0.02%)</title><rect x="4.9279%" y="405" width="0.0219%" height="15" fill="rgb(234,150,53)" fg:x="12397" fg:w="55"/><text x="5.1779%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (121 samples, 0.05%)</title><rect x="4.9279%" y="453" width="0.0481%" height="15" fill="rgb(228,201,54)" fg:x="12397" fg:w="121"/><text x="5.1779%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts::{{closure}} (121 samples, 0.05%)</title><rect x="4.9279%" y="437" width="0.0481%" height="15" fill="rgb(222,22,37)" fg:x="12397" fg:w="121"/><text x="5.1779%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (66 samples, 0.03%)</title><rect x="4.9497%" y="421" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="12452" fg:w="66"/><text x="5.1997%" y="431.50"></text></g><g><title>_int_free (148 samples, 0.06%)</title><rect x="4.9883%" y="325" width="0.0588%" height="15" fill="rgb(233,25,53)" fg:x="12549" fg:w="148"/><text x="5.2383%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (199 samples, 0.08%)</title><rect x="4.9767%" y="405" width="0.0791%" height="15" fill="rgb(210,40,34)" fg:x="12520" fg:w="199"/><text x="5.2267%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (199 samples, 0.08%)</title><rect x="4.9767%" y="389" width="0.0791%" height="15" fill="rgb(241,220,44)" fg:x="12520" fg:w="199"/><text x="5.2267%" y="399.50"></text></g><g><title>__rdl_dealloc (199 samples, 0.08%)</title><rect x="4.9767%" y="373" width="0.0791%" height="15" fill="rgb(235,28,35)" fg:x="12520" fg:w="199"/><text x="5.2267%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (199 samples, 0.08%)</title><rect x="4.9767%" y="357" width="0.0791%" height="15" fill="rgb(210,56,17)" fg:x="12520" fg:w="199"/><text x="5.2267%" y="367.50"></text></g><g><title>__GI___libc_free (199 samples, 0.08%)</title><rect x="4.9767%" y="341" width="0.0791%" height="15" fill="rgb(224,130,29)" fg:x="12520" fg:w="199"/><text x="5.2267%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (205 samples, 0.08%)</title><rect x="4.9763%" y="453" width="0.0815%" height="15" fill="rgb(235,212,8)" fg:x="12519" fg:w="205"/><text x="5.2263%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (205 samples, 0.08%)</title><rect x="4.9763%" y="437" width="0.0815%" height="15" fill="rgb(223,33,50)" fg:x="12519" fg:w="205"/><text x="5.2263%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (205 samples, 0.08%)</title><rect x="4.9763%" y="421" width="0.0815%" height="15" fill="rgb(219,149,13)" fg:x="12519" fg:w="205"/><text x="5.2263%" y="431.50"></text></g><g><title>__memcpy_evex_unaligned_erms (942 samples, 0.37%)</title><rect x="5.0821%" y="421" width="0.3744%" height="15" fill="rgb(250,156,29)" fg:x="12785" fg:w="942"/><text x="5.3321%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (988 samples, 0.39%)</title><rect x="5.0646%" y="453" width="0.3927%" height="15" fill="rgb(216,193,19)" fg:x="12741" fg:w="988"/><text x="5.3146%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (965 samples, 0.38%)</title><rect x="5.0737%" y="437" width="0.3836%" height="15" fill="rgb(216,135,14)" fg:x="12764" fg:w="965"/><text x="5.3237%" y="447.50"></text></g><g><title>log::max_level (345 samples, 0.14%)</title><rect x="5.4581%" y="453" width="0.1371%" height="15" fill="rgb(241,47,5)" fg:x="13731" fg:w="345"/><text x="5.7081%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (345 samples, 0.14%)</title><rect x="5.4581%" y="437" width="0.1371%" height="15" fill="rgb(233,42,35)" fg:x="13731" fg:w="345"/><text x="5.7081%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (345 samples, 0.14%)</title><rect x="5.4581%" y="421" width="0.1371%" height="15" fill="rgb(231,13,6)" fg:x="13731" fg:w="345"/><text x="5.7081%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (125 samples, 0.05%)</title><rect x="5.6783%" y="421" width="0.0497%" height="15" fill="rgb(207,181,40)" fg:x="14285" fg:w="125"/><text x="5.9283%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (39 samples, 0.02%)</title><rect x="5.7125%" y="405" width="0.0155%" height="15" fill="rgb(254,173,49)" fg:x="14371" fg:w="39"/><text x="5.9625%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (39 samples, 0.02%)</title><rect x="5.7125%" y="389" width="0.0155%" height="15" fill="rgb(221,1,38)" fg:x="14371" fg:w="39"/><text x="5.9625%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (189 samples, 0.08%)</title><rect x="5.6783%" y="437" width="0.0751%" height="15" fill="rgb(206,124,46)" fg:x="14285" fg:w="189"/><text x="5.9283%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (64 samples, 0.03%)</title><rect x="5.7280%" y="421" width="0.0254%" height="15" fill="rgb(249,21,11)" fg:x="14410" fg:w="64"/><text x="5.9780%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (64 samples, 0.03%)</title><rect x="5.7280%" y="405" width="0.0254%" height="15" fill="rgb(222,201,40)" fg:x="14410" fg:w="64"/><text x="5.9780%" y="415.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (456 samples, 0.18%)</title><rect x="5.5953%" y="453" width="0.1813%" height="15" fill="rgb(235,61,29)" fg:x="14076" fg:w="456"/><text x="5.8453%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (58 samples, 0.02%)</title><rect x="5.7535%" y="437" width="0.0231%" height="15" fill="rgb(219,207,3)" fg:x="14474" fg:w="58"/><text x="6.0035%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (97 samples, 0.04%)</title><rect x="6.0186%" y="421" width="0.0386%" height="15" fill="rgb(222,56,46)" fg:x="15141" fg:w="97"/><text x="6.2686%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (57 samples, 0.02%)</title><rect x="6.0345%" y="405" width="0.0227%" height="15" fill="rgb(239,76,54)" fg:x="15181" fg:w="57"/><text x="6.2845%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (57 samples, 0.02%)</title><rect x="6.0345%" y="389" width="0.0227%" height="15" fill="rgb(231,124,27)" fg:x="15181" fg:w="57"/><text x="6.2845%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (119 samples, 0.05%)</title><rect x="6.0186%" y="437" width="0.0473%" height="15" fill="rgb(249,195,6)" fg:x="15141" fg:w="119"/><text x="6.2686%" y="447.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::deref::DerefMut&gt;::deref_mut (45 samples, 0.02%)</title><rect x="6.0659%" y="437" width="0.0179%" height="15" fill="rgb(237,174,47)" fg:x="15260" fg:w="45"/><text x="6.3159%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (45 samples, 0.02%)</title><rect x="6.0659%" y="421" width="0.0179%" height="15" fill="rgb(206,201,31)" fg:x="15260" fg:w="45"/><text x="6.3159%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (40 samples, 0.02%)</title><rect x="6.0679%" y="405" width="0.0159%" height="15" fill="rgb(231,57,52)" fg:x="15265" fg:w="40"/><text x="6.3179%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (40 samples, 0.02%)</title><rect x="6.0679%" y="389" width="0.0159%" height="15" fill="rgb(248,177,22)" fg:x="15265" fg:w="40"/><text x="6.3179%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (37 samples, 0.01%)</title><rect x="6.0838%" y="437" width="0.0147%" height="15" fill="rgb(215,211,37)" fg:x="15305" fg:w="37"/><text x="6.3338%" y="447.50"></text></g><g><title>&lt;f64 as num_traits::float::FloatCore&gt;::is_nan (37 samples, 0.01%)</title><rect x="6.0838%" y="421" width="0.0147%" height="15" fill="rgb(241,128,51)" fg:x="15305" fg:w="37"/><text x="6.3338%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (37 samples, 0.01%)</title><rect x="6.0838%" y="405" width="0.0147%" height="15" fill="rgb(227,165,31)" fg:x="15305" fg:w="37"/><text x="6.3338%" y="415.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (189 samples, 0.08%)</title><rect x="6.0985%" y="437" width="0.0751%" height="15" fill="rgb(228,167,24)" fg:x="15342" fg:w="189"/><text x="6.3485%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (189 samples, 0.08%)</title><rect x="6.0985%" y="421" width="0.0751%" height="15" fill="rgb(228,143,12)" fg:x="15342" fg:w="189"/><text x="6.3485%" y="431.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::ops::arith::MulAssign&lt;T&gt;&gt;::mul_assign (48 samples, 0.02%)</title><rect x="6.1736%" y="437" width="0.0191%" height="15" fill="rgb(249,149,8)" fg:x="15531" fg:w="48"/><text x="6.4236%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::MulAssign&gt;::mul_assign (48 samples, 0.02%)</title><rect x="6.1736%" y="421" width="0.0191%" height="15" fill="rgb(243,35,44)" fg:x="15531" fg:w="48"/><text x="6.4236%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_finite (348 samples, 0.14%)</title><rect x="6.1935%" y="437" width="0.1383%" height="15" fill="rgb(246,89,9)" fg:x="15581" fg:w="348"/><text x="6.4435%" y="447.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::abs_private (237 samples, 0.09%)</title><rect x="6.2376%" y="421" width="0.0942%" height="15" fill="rgb(233,213,13)" fg:x="15692" fg:w="237"/><text x="6.4876%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (87 samples, 0.03%)</title><rect x="6.4046%" y="229" width="0.0346%" height="15" fill="rgb(233,141,41)" fg:x="16112" fg:w="87"/><text x="6.6546%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (164 samples, 0.07%)</title><rect x="6.3875%" y="245" width="0.0652%" height="15" fill="rgb(239,167,4)" fg:x="16069" fg:w="164"/><text x="6.6375%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.01%)</title><rect x="6.4392%" y="229" width="0.0135%" height="15" fill="rgb(209,217,16)" fg:x="16199" fg:w="34"/><text x="6.6892%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (183 samples, 0.07%)</title><rect x="6.5103%" y="229" width="0.0727%" height="15" fill="rgb(219,88,35)" fg:x="16378" fg:w="183"/><text x="6.7603%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (129 samples, 0.05%)</title><rect x="6.5831%" y="229" width="0.0513%" height="15" fill="rgb(220,193,23)" fg:x="16561" fg:w="129"/><text x="6.8331%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (718 samples, 0.29%)</title><rect x="6.3620%" y="293" width="0.2854%" height="15" fill="rgb(230,90,52)" fg:x="16005" fg:w="718"/><text x="6.6120%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (718 samples, 0.29%)</title><rect x="6.3620%" y="277" width="0.2854%" height="15" fill="rgb(252,106,19)" fg:x="16005" fg:w="718"/><text x="6.6120%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (718 samples, 0.29%)</title><rect x="6.3620%" y="261" width="0.2854%" height="15" fill="rgb(206,74,20)" fg:x="16005" fg:w="718"/><text x="6.6120%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (490 samples, 0.19%)</title><rect x="6.4527%" y="245" width="0.1948%" height="15" fill="rgb(230,138,44)" fg:x="16233" fg:w="490"/><text x="6.7027%" y="255.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (33 samples, 0.01%)</title><rect x="6.6343%" y="229" width="0.0131%" height="15" fill="rgb(235,182,43)" fg:x="16690" fg:w="33"/><text x="6.8843%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (83 samples, 0.03%)</title><rect x="6.6475%" y="293" width="0.0330%" height="15" fill="rgb(242,16,51)" fg:x="16723" fg:w="83"/><text x="6.8975%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (47 samples, 0.02%)</title><rect x="6.6618%" y="277" width="0.0187%" height="15" fill="rgb(248,9,4)" fg:x="16759" fg:w="47"/><text x="6.9118%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (47 samples, 0.02%)</title><rect x="6.6618%" y="261" width="0.0187%" height="15" fill="rgb(210,31,22)" fg:x="16759" fg:w="47"/><text x="6.9118%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (47 samples, 0.02%)</title><rect x="6.6618%" y="245" width="0.0187%" height="15" fill="rgb(239,54,39)" fg:x="16759" fg:w="47"/><text x="6.9118%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (75 samples, 0.03%)</title><rect x="6.7122%" y="165" width="0.0298%" height="15" fill="rgb(230,99,41)" fg:x="16886" fg:w="75"/><text x="6.9622%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (46 samples, 0.02%)</title><rect x="6.7421%" y="165" width="0.0183%" height="15" fill="rgb(253,106,12)" fg:x="16961" fg:w="46"/><text x="6.9921%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (1,003 samples, 0.40%)</title><rect x="6.3620%" y="325" width="0.3987%" height="15" fill="rgb(213,46,41)" fg:x="16005" fg:w="1003"/><text x="6.6120%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,003 samples, 0.40%)</title><rect x="6.3620%" y="309" width="0.3987%" height="15" fill="rgb(215,133,35)" fg:x="16005" fg:w="1003"/><text x="6.6120%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (202 samples, 0.08%)</title><rect x="6.6804%" y="293" width="0.0803%" height="15" fill="rgb(213,28,5)" fg:x="16806" fg:w="202"/><text x="6.9304%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (202 samples, 0.08%)</title><rect x="6.6804%" y="277" width="0.0803%" height="15" fill="rgb(215,77,49)" fg:x="16806" fg:w="202"/><text x="6.9304%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (201 samples, 0.08%)</title><rect x="6.6808%" y="261" width="0.0799%" height="15" fill="rgb(248,100,22)" fg:x="16807" fg:w="201"/><text x="6.9308%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (201 samples, 0.08%)</title><rect x="6.6808%" y="245" width="0.0799%" height="15" fill="rgb(208,67,9)" fg:x="16807" fg:w="201"/><text x="6.9308%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (201 samples, 0.08%)</title><rect x="6.6808%" y="229" width="0.0799%" height="15" fill="rgb(219,133,21)" fg:x="16807" fg:w="201"/><text x="6.9308%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (201 samples, 0.08%)</title><rect x="6.6808%" y="213" width="0.0799%" height="15" fill="rgb(246,46,29)" fg:x="16807" fg:w="201"/><text x="6.9308%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (201 samples, 0.08%)</title><rect x="6.6808%" y="197" width="0.0799%" height="15" fill="rgb(246,185,52)" fg:x="16807" fg:w="201"/><text x="6.9308%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.05%)</title><rect x="6.7122%" y="181" width="0.0485%" height="15" fill="rgb(252,136,11)" fg:x="16886" fg:w="122"/><text x="6.9622%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.03%)</title><rect x="6.7798%" y="277" width="0.0314%" height="15" fill="rgb(219,138,53)" fg:x="17056" fg:w="79"/><text x="7.0298%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (69 samples, 0.03%)</title><rect x="6.7838%" y="261" width="0.0274%" height="15" fill="rgb(211,51,23)" fg:x="17066" fg:w="69"/><text x="7.0338%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (175 samples, 0.07%)</title><rect x="6.8112%" y="261" width="0.0696%" height="15" fill="rgb(247,221,28)" fg:x="17135" fg:w="175"/><text x="7.0612%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (175 samples, 0.07%)</title><rect x="6.8112%" y="245" width="0.0696%" height="15" fill="rgb(251,222,45)" fg:x="17135" fg:w="175"/><text x="7.0612%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (175 samples, 0.07%)</title><rect x="6.8112%" y="229" width="0.0696%" height="15" fill="rgb(217,162,53)" fg:x="17135" fg:w="175"/><text x="7.0612%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (175 samples, 0.07%)</title><rect x="6.8112%" y="213" width="0.0696%" height="15" fill="rgb(229,93,14)" fg:x="17135" fg:w="175"/><text x="7.0612%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (82 samples, 0.03%)</title><rect x="6.8808%" y="213" width="0.0326%" height="15" fill="rgb(209,67,49)" fg:x="17310" fg:w="82"/><text x="7.1308%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (260 samples, 0.10%)</title><rect x="6.8112%" y="277" width="0.1034%" height="15" fill="rgb(213,87,29)" fg:x="17135" fg:w="260"/><text x="7.0612%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (85 samples, 0.03%)</title><rect x="6.8808%" y="261" width="0.0338%" height="15" fill="rgb(205,151,52)" fg:x="17310" fg:w="85"/><text x="7.1308%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (85 samples, 0.03%)</title><rect x="6.8808%" y="245" width="0.0338%" height="15" fill="rgb(253,215,39)" fg:x="17310" fg:w="85"/><text x="7.1308%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (85 samples, 0.03%)</title><rect x="6.8808%" y="229" width="0.0338%" height="15" fill="rgb(221,220,41)" fg:x="17310" fg:w="85"/><text x="7.1308%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (164 samples, 0.07%)</title><rect x="6.9146%" y="277" width="0.0652%" height="15" fill="rgb(218,133,21)" fg:x="17395" fg:w="164"/><text x="7.1646%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (37 samples, 0.01%)</title><rect x="6.9798%" y="277" width="0.0147%" height="15" fill="rgb(221,193,43)" fg:x="17559" fg:w="37"/><text x="7.2298%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (39 samples, 0.02%)</title><rect x="6.9945%" y="277" width="0.0155%" height="15" fill="rgb(240,128,52)" fg:x="17596" fg:w="39"/><text x="7.2445%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (39 samples, 0.02%)</title><rect x="6.9945%" y="261" width="0.0155%" height="15" fill="rgb(253,114,12)" fg:x="17596" fg:w="39"/><text x="7.2445%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.02%)</title><rect x="6.9945%" y="245" width="0.0155%" height="15" fill="rgb(215,223,47)" fg:x="17596" fg:w="39"/><text x="7.2445%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,778 samples, 0.71%)</title><rect x="6.3613%" y="341" width="0.7068%" height="15" fill="rgb(248,225,23)" fg:x="16003" fg:w="1778"/><text x="6.6113%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (773 samples, 0.31%)</title><rect x="6.7607%" y="325" width="0.3073%" height="15" fill="rgb(250,108,0)" fg:x="17008" fg:w="773"/><text x="7.0107%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (773 samples, 0.31%)</title><rect x="6.7607%" y="309" width="0.3073%" height="15" fill="rgb(228,208,7)" fg:x="17008" fg:w="773"/><text x="7.0107%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (765 samples, 0.30%)</title><rect x="6.7639%" y="293" width="0.3041%" height="15" fill="rgb(244,45,10)" fg:x="17016" fg:w="765"/><text x="7.0139%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (146 samples, 0.06%)</title><rect x="7.0100%" y="277" width="0.0580%" height="15" fill="rgb(207,125,25)" fg:x="17635" fg:w="146"/><text x="7.2600%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (146 samples, 0.06%)</title><rect x="7.0100%" y="261" width="0.0580%" height="15" fill="rgb(210,195,18)" fg:x="17635" fg:w="146"/><text x="7.2600%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,824 samples, 0.73%)</title><rect x="6.3613%" y="389" width="0.7250%" height="15" fill="rgb(249,80,12)" fg:x="16003" fg:w="1824"/><text x="6.6113%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,824 samples, 0.73%)</title><rect x="6.3613%" y="373" width="0.7250%" height="15" fill="rgb(221,65,9)" fg:x="16003" fg:w="1824"/><text x="6.6113%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,824 samples, 0.73%)</title><rect x="6.3613%" y="357" width="0.7250%" height="15" fill="rgb(235,49,36)" fg:x="16003" fg:w="1824"/><text x="6.6113%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (46 samples, 0.02%)</title><rect x="7.0680%" y="341" width="0.0183%" height="15" fill="rgb(225,32,20)" fg:x="17781" fg:w="46"/><text x="7.3180%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (88 samples, 0.03%)</title><rect x="7.1404%" y="261" width="0.0350%" height="15" fill="rgb(215,141,46)" fg:x="17963" fg:w="88"/><text x="7.3904%" y="271.50"></text></g><g><title>compare::Compare::compares_ge (100 samples, 0.04%)</title><rect x="7.1404%" y="357" width="0.0398%" height="15" fill="rgb(250,160,47)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (100 samples, 0.04%)</title><rect x="7.1404%" y="341" width="0.0398%" height="15" fill="rgb(216,222,40)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (100 samples, 0.04%)</title><rect x="7.1404%" y="325" width="0.0398%" height="15" fill="rgb(234,217,39)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (100 samples, 0.04%)</title><rect x="7.1404%" y="309" width="0.0398%" height="15" fill="rgb(207,178,40)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (100 samples, 0.04%)</title><rect x="7.1404%" y="293" width="0.0398%" height="15" fill="rgb(221,136,13)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="303.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (100 samples, 0.04%)</title><rect x="7.1404%" y="277" width="0.0398%" height="15" fill="rgb(249,199,10)" fg:x="17963" fg:w="100"/><text x="7.3904%" y="287.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (144 samples, 0.06%)</title><rect x="7.1801%" y="341" width="0.0572%" height="15" fill="rgb(249,222,13)" fg:x="18063" fg:w="144"/><text x="7.4301%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (144 samples, 0.06%)</title><rect x="7.1801%" y="325" width="0.0572%" height="15" fill="rgb(244,185,38)" fg:x="18063" fg:w="144"/><text x="7.4301%" y="335.50"></text></g><g><title>compare::Compare::compares_le (171 samples, 0.07%)</title><rect x="7.1801%" y="357" width="0.0680%" height="15" fill="rgb(236,202,9)" fg:x="18063" fg:w="171"/><text x="7.4301%" y="367.50"></text></g><g><title>core::cmp::PartialEq::ne (27 samples, 0.01%)</title><rect x="7.2373%" y="341" width="0.0107%" height="15" fill="rgb(250,229,37)" fg:x="18207" fg:w="27"/><text x="7.4873%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (480 samples, 0.19%)</title><rect x="7.2616%" y="325" width="0.1908%" height="15" fill="rgb(206,174,23)" fg:x="18268" fg:w="480"/><text x="7.5116%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (65 samples, 0.03%)</title><rect x="7.5033%" y="181" width="0.0258%" height="15" fill="rgb(211,33,43)" fg:x="18876" fg:w="65"/><text x="7.7533%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (178 samples, 0.07%)</title><rect x="7.4894%" y="197" width="0.0708%" height="15" fill="rgb(245,58,50)" fg:x="18841" fg:w="178"/><text x="7.7394%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (78 samples, 0.03%)</title><rect x="7.5291%" y="181" width="0.0310%" height="15" fill="rgb(244,68,36)" fg:x="18941" fg:w="78"/><text x="7.7791%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (220 samples, 0.09%)</title><rect x="7.6070%" y="181" width="0.0875%" height="15" fill="rgb(232,229,15)" fg:x="19137" fg:w="220"/><text x="7.8570%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="7.4667%" y="245" width="0.2643%" height="15" fill="rgb(254,30,23)" fg:x="18784" fg:w="665"/><text x="7.7167%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="7.4667%" y="229" width="0.2643%" height="15" fill="rgb(235,160,14)" fg:x="18784" fg:w="665"/><text x="7.7167%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="7.4667%" y="213" width="0.2643%" height="15" fill="rgb(212,155,44)" fg:x="18784" fg:w="665"/><text x="7.7167%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (430 samples, 0.17%)</title><rect x="7.5601%" y="197" width="0.1709%" height="15" fill="rgb(226,2,50)" fg:x="19019" fg:w="430"/><text x="7.8101%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (92 samples, 0.04%)</title><rect x="7.6945%" y="181" width="0.0366%" height="15" fill="rgb(234,177,6)" fg:x="19357" fg:w="92"/><text x="7.9445%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (63 samples, 0.03%)</title><rect x="7.7310%" y="245" width="0.0250%" height="15" fill="rgb(217,24,9)" fg:x="19449" fg:w="63"/><text x="7.9810%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (28 samples, 0.01%)</title><rect x="7.7450%" y="229" width="0.0111%" height="15" fill="rgb(220,13,46)" fg:x="19484" fg:w="28"/><text x="7.9950%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (28 samples, 0.01%)</title><rect x="7.7450%" y="213" width="0.0111%" height="15" fill="rgb(239,221,27)" fg:x="19484" fg:w="28"/><text x="7.9950%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (28 samples, 0.01%)</title><rect x="7.7450%" y="197" width="0.0111%" height="15" fill="rgb(222,198,25)" fg:x="19484" fg:w="28"/><text x="7.9950%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (887 samples, 0.35%)</title><rect x="7.4667%" y="277" width="0.3526%" height="15" fill="rgb(211,99,13)" fg:x="18784" fg:w="887"/><text x="7.7167%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (887 samples, 0.35%)</title><rect x="7.4667%" y="261" width="0.3526%" height="15" fill="rgb(232,111,31)" fg:x="18784" fg:w="887"/><text x="7.7167%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (159 samples, 0.06%)</title><rect x="7.7561%" y="245" width="0.0632%" height="15" fill="rgb(245,82,37)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (159 samples, 0.06%)</title><rect x="7.7561%" y="229" width="0.0632%" height="15" fill="rgb(227,149,46)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (159 samples, 0.06%)</title><rect x="7.7561%" y="213" width="0.0632%" height="15" fill="rgb(218,36,50)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (159 samples, 0.06%)</title><rect x="7.7561%" y="197" width="0.0632%" height="15" fill="rgb(226,80,48)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (159 samples, 0.06%)</title><rect x="7.7561%" y="181" width="0.0632%" height="15" fill="rgb(238,224,15)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (159 samples, 0.06%)</title><rect x="7.7561%" y="165" width="0.0632%" height="15" fill="rgb(241,136,10)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (159 samples, 0.06%)</title><rect x="7.7561%" y="149" width="0.0632%" height="15" fill="rgb(208,32,45)" fg:x="19512" fg:w="159"/><text x="8.0061%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (83 samples, 0.03%)</title><rect x="7.7863%" y="133" width="0.0330%" height="15" fill="rgb(207,135,9)" fg:x="19588" fg:w="83"/><text x="8.0363%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.03%)</title><rect x="7.8356%" y="229" width="0.0290%" height="15" fill="rgb(206,86,44)" fg:x="19712" fg:w="73"/><text x="8.0856%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (57 samples, 0.02%)</title><rect x="7.8420%" y="213" width="0.0227%" height="15" fill="rgb(245,177,15)" fg:x="19728" fg:w="57"/><text x="8.0920%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (165 samples, 0.07%)</title><rect x="7.8646%" y="213" width="0.0656%" height="15" fill="rgb(206,64,50)" fg:x="19785" fg:w="165"/><text x="8.1146%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (165 samples, 0.07%)</title><rect x="7.8646%" y="197" width="0.0656%" height="15" fill="rgb(234,36,40)" fg:x="19785" fg:w="165"/><text x="8.1146%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (165 samples, 0.07%)</title><rect x="7.8646%" y="181" width="0.0656%" height="15" fill="rgb(213,64,8)" fg:x="19785" fg:w="165"/><text x="8.1146%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (165 samples, 0.07%)</title><rect x="7.8646%" y="165" width="0.0656%" height="15" fill="rgb(210,75,36)" fg:x="19785" fg:w="165"/><text x="8.1146%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (84 samples, 0.03%)</title><rect x="7.9302%" y="165" width="0.0334%" height="15" fill="rgb(229,88,21)" fg:x="19950" fg:w="84"/><text x="8.1802%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (256 samples, 0.10%)</title><rect x="7.8646%" y="229" width="0.1018%" height="15" fill="rgb(252,204,47)" fg:x="19785" fg:w="256"/><text x="8.1146%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (91 samples, 0.04%)</title><rect x="7.9302%" y="213" width="0.0362%" height="15" fill="rgb(208,77,27)" fg:x="19950" fg:w="91"/><text x="8.1802%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (91 samples, 0.04%)</title><rect x="7.9302%" y="197" width="0.0362%" height="15" fill="rgb(221,76,26)" fg:x="19950" fg:w="91"/><text x="8.1802%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (91 samples, 0.04%)</title><rect x="7.9302%" y="181" width="0.0362%" height="15" fill="rgb(225,139,18)" fg:x="19950" fg:w="91"/><text x="8.1802%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (133 samples, 0.05%)</title><rect x="7.9664%" y="229" width="0.0529%" height="15" fill="rgb(230,137,11)" fg:x="20041" fg:w="133"/><text x="8.2164%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (58 samples, 0.02%)</title><rect x="8.0264%" y="229" width="0.0231%" height="15" fill="rgb(212,28,1)" fg:x="20192" fg:w="58"/><text x="8.2764%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (58 samples, 0.02%)</title><rect x="8.0264%" y="213" width="0.0231%" height="15" fill="rgb(248,164,17)" fg:x="20192" fg:w="58"/><text x="8.2764%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 0.02%)</title><rect x="8.0264%" y="197" width="0.0231%" height="15" fill="rgb(222,171,42)" fg:x="20192" fg:w="58"/><text x="8.2764%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (708 samples, 0.28%)</title><rect x="7.8193%" y="245" width="0.2814%" height="15" fill="rgb(243,84,45)" fg:x="19671" fg:w="708"/><text x="8.0693%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (129 samples, 0.05%)</title><rect x="8.0494%" y="229" width="0.0513%" height="15" fill="rgb(252,49,23)" fg:x="20250" fg:w="129"/><text x="8.2994%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (129 samples, 0.05%)</title><rect x="8.0494%" y="213" width="0.0513%" height="15" fill="rgb(215,19,7)" fg:x="20250" fg:w="129"/><text x="8.2994%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (2,147 samples, 0.85%)</title><rect x="7.2493%" y="357" width="0.8534%" height="15" fill="rgb(238,81,41)" fg:x="18237" fg:w="2147"/><text x="7.4993%" y="367.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (2,147 samples, 0.85%)</title><rect x="7.2493%" y="341" width="0.8534%" height="15" fill="rgb(210,199,37)" fg:x="18237" fg:w="2147"/><text x="7.4993%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,612 samples, 0.64%)</title><rect x="7.4619%" y="325" width="0.6408%" height="15" fill="rgb(244,192,49)" fg:x="18772" fg:w="1612"/><text x="7.7119%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,612 samples, 0.64%)</title><rect x="7.4619%" y="309" width="0.6408%" height="15" fill="rgb(226,211,11)" fg:x="18772" fg:w="1612"/><text x="7.7119%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,612 samples, 0.64%)</title><rect x="7.4619%" y="293" width="0.6408%" height="15" fill="rgb(236,162,54)" fg:x="18772" fg:w="1612"/><text x="7.7119%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (713 samples, 0.28%)</title><rect x="7.8193%" y="277" width="0.2834%" height="15" fill="rgb(220,229,9)" fg:x="19671" fg:w="713"/><text x="8.0693%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (713 samples, 0.28%)</title><rect x="7.8193%" y="261" width="0.2834%" height="15" fill="rgb(250,87,22)" fg:x="19671" fg:w="713"/><text x="8.0693%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (2,638 samples, 1.05%)</title><rect x="7.0931%" y="373" width="1.0486%" height="15" fill="rgb(239,43,17)" fg:x="17844" fg:w="2638"/><text x="7.3431%" y="383.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (98 samples, 0.04%)</title><rect x="8.1027%" y="357" width="0.0390%" height="15" fill="rgb(231,177,25)" fg:x="20384" fg:w="98"/><text x="8.3527%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (2,694 samples, 1.07%)</title><rect x="7.0867%" y="389" width="1.0709%" height="15" fill="rgb(219,179,1)" fg:x="17828" fg:w="2694"/><text x="7.3367%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (40 samples, 0.02%)</title><rect x="8.1417%" y="373" width="0.0159%" height="15" fill="rgb(238,219,53)" fg:x="20482" fg:w="40"/><text x="8.3917%" y="383.50"></text></g><g><title>compare::Compare::compares_le (323 samples, 0.13%)</title><rect x="8.2073%" y="373" width="0.1284%" height="15" fill="rgb(232,167,36)" fg:x="20647" fg:w="323"/><text x="8.4573%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (323 samples, 0.13%)</title><rect x="8.2073%" y="357" width="0.1284%" height="15" fill="rgb(244,19,51)" fg:x="20647" fg:w="323"/><text x="8.4573%" y="367.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (323 samples, 0.13%)</title><rect x="8.2073%" y="341" width="0.1284%" height="15" fill="rgb(224,6,22)" fg:x="20647" fg:w="323"/><text x="8.4573%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (70 samples, 0.03%)</title><rect x="8.3078%" y="325" width="0.0278%" height="15" fill="rgb(224,145,5)" fg:x="20900" fg:w="70"/><text x="8.5578%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (70 samples, 0.03%)</title><rect x="8.3078%" y="309" width="0.0278%" height="15" fill="rgb(234,130,49)" fg:x="20900" fg:w="70"/><text x="8.5578%" y="319.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (70 samples, 0.03%)</title><rect x="8.3078%" y="293" width="0.0278%" height="15" fill="rgb(254,6,2)" fg:x="20900" fg:w="70"/><text x="8.5578%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (70 samples, 0.03%)</title><rect x="8.3078%" y="277" width="0.0278%" height="15" fill="rgb(208,96,46)" fg:x="20900" fg:w="70"/><text x="8.5578%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (295 samples, 0.12%)</title><rect x="8.3420%" y="341" width="0.1173%" height="15" fill="rgb(239,3,39)" fg:x="20986" fg:w="295"/><text x="8.5920%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (40 samples, 0.02%)</title><rect x="8.5245%" y="197" width="0.0159%" height="15" fill="rgb(233,210,1)" fg:x="21445" fg:w="40"/><text x="8.7745%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (52 samples, 0.02%)</title><rect x="8.5404%" y="197" width="0.0207%" height="15" fill="rgb(244,137,37)" fg:x="21485" fg:w="52"/><text x="8.7904%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (159 samples, 0.06%)</title><rect x="8.5006%" y="213" width="0.0632%" height="15" fill="rgb(240,136,2)" fg:x="21385" fg:w="159"/><text x="8.7506%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (210 samples, 0.08%)</title><rect x="8.6099%" y="197" width="0.0835%" height="15" fill="rgb(239,18,37)" fg:x="21660" fg:w="210"/><text x="8.8599%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="8.4668%" y="261" width="0.2643%" height="15" fill="rgb(218,185,22)" fg:x="21300" fg:w="665"/><text x="8.7168%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="8.4668%" y="245" width="0.2643%" height="15" fill="rgb(225,218,4)" fg:x="21300" fg:w="665"/><text x="8.7168%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (665 samples, 0.26%)</title><rect x="8.4668%" y="229" width="0.2643%" height="15" fill="rgb(230,182,32)" fg:x="21300" fg:w="665"/><text x="8.7168%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (421 samples, 0.17%)</title><rect x="8.5638%" y="213" width="0.1673%" height="15" fill="rgb(242,56,43)" fg:x="21544" fg:w="421"/><text x="8.8138%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (95 samples, 0.04%)</title><rect x="8.6934%" y="197" width="0.0378%" height="15" fill="rgb(233,99,24)" fg:x="21870" fg:w="95"/><text x="8.9434%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (35 samples, 0.01%)</title><rect x="8.7312%" y="261" width="0.0139%" height="15" fill="rgb(234,209,42)" fg:x="21965" fg:w="35"/><text x="8.9812%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (88 samples, 0.03%)</title><rect x="8.8027%" y="133" width="0.0350%" height="15" fill="rgb(227,7,12)" fg:x="22145" fg:w="88"/><text x="9.0527%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (942 samples, 0.37%)</title><rect x="8.4668%" y="293" width="0.3744%" height="15" fill="rgb(245,203,43)" fg:x="21300" fg:w="942"/><text x="8.7168%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (942 samples, 0.37%)</title><rect x="8.4668%" y="277" width="0.3744%" height="15" fill="rgb(238,205,33)" fg:x="21300" fg:w="942"/><text x="8.7168%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (242 samples, 0.10%)</title><rect x="8.7451%" y="261" width="0.0962%" height="15" fill="rgb(231,56,7)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (242 samples, 0.10%)</title><rect x="8.7451%" y="245" width="0.0962%" height="15" fill="rgb(244,186,29)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (242 samples, 0.10%)</title><rect x="8.7451%" y="229" width="0.0962%" height="15" fill="rgb(234,111,31)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (242 samples, 0.10%)</title><rect x="8.7451%" y="213" width="0.0962%" height="15" fill="rgb(241,149,10)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (242 samples, 0.10%)</title><rect x="8.7451%" y="197" width="0.0962%" height="15" fill="rgb(249,206,44)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (242 samples, 0.10%)</title><rect x="8.7451%" y="181" width="0.0962%" height="15" fill="rgb(251,153,30)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (242 samples, 0.10%)</title><rect x="8.7451%" y="165" width="0.0962%" height="15" fill="rgb(239,152,38)" fg:x="22000" fg:w="242"/><text x="8.9951%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (142 samples, 0.06%)</title><rect x="8.7848%" y="149" width="0.0564%" height="15" fill="rgb(249,139,47)" fg:x="22100" fg:w="142"/><text x="9.0348%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.03%)</title><rect x="8.8615%" y="245" width="0.0262%" height="15" fill="rgb(244,64,35)" fg:x="22293" fg:w="66"/><text x="9.1115%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (54 samples, 0.02%)</title><rect x="8.8663%" y="229" width="0.0215%" height="15" fill="rgb(216,46,15)" fg:x="22305" fg:w="54"/><text x="9.1163%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (223 samples, 0.09%)</title><rect x="8.8882%" y="229" width="0.0886%" height="15" fill="rgb(250,74,19)" fg:x="22360" fg:w="223"/><text x="9.1382%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (223 samples, 0.09%)</title><rect x="8.8882%" y="213" width="0.0886%" height="15" fill="rgb(249,42,33)" fg:x="22360" fg:w="223"/><text x="9.1382%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (223 samples, 0.09%)</title><rect x="8.8882%" y="197" width="0.0886%" height="15" fill="rgb(242,149,17)" fg:x="22360" fg:w="223"/><text x="9.1382%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (223 samples, 0.09%)</title><rect x="8.8882%" y="181" width="0.0886%" height="15" fill="rgb(244,29,21)" fg:x="22360" fg:w="223"/><text x="9.1382%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (64 samples, 0.03%)</title><rect x="8.9768%" y="181" width="0.0254%" height="15" fill="rgb(220,130,37)" fg:x="22583" fg:w="64"/><text x="9.2268%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (292 samples, 0.12%)</title><rect x="8.8882%" y="245" width="0.1161%" height="15" fill="rgb(211,67,2)" fg:x="22360" fg:w="292"/><text x="9.1382%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (69 samples, 0.03%)</title><rect x="8.9768%" y="229" width="0.0274%" height="15" fill="rgb(235,68,52)" fg:x="22583" fg:w="69"/><text x="9.2268%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (69 samples, 0.03%)</title><rect x="8.9768%" y="213" width="0.0274%" height="15" fill="rgb(246,142,3)" fg:x="22583" fg:w="69"/><text x="9.2268%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (69 samples, 0.03%)</title><rect x="8.9768%" y="197" width="0.0274%" height="15" fill="rgb(241,25,7)" fg:x="22583" fg:w="69"/><text x="9.2268%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (40 samples, 0.02%)</title><rect x="9.0047%" y="245" width="0.0159%" height="15" fill="rgb(242,119,39)" fg:x="22653" fg:w="40"/><text x="9.2547%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (33 samples, 0.01%)</title><rect x="9.0206%" y="245" width="0.0131%" height="15" fill="rgb(241,98,45)" fg:x="22693" fg:w="33"/><text x="9.2706%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (33 samples, 0.01%)</title><rect x="9.0206%" y="229" width="0.0131%" height="15" fill="rgb(254,28,30)" fg:x="22693" fg:w="33"/><text x="9.2706%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.01%)</title><rect x="9.0206%" y="213" width="0.0131%" height="15" fill="rgb(241,142,54)" fg:x="22693" fg:w="33"/><text x="9.2706%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (129 samples, 0.05%)</title><rect x="9.0337%" y="245" width="0.0513%" height="15" fill="rgb(222,85,15)" fg:x="22726" fg:w="129"/><text x="9.2837%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (129 samples, 0.05%)</title><rect x="9.0337%" y="229" width="0.0513%" height="15" fill="rgb(210,85,47)" fg:x="22726" fg:w="129"/><text x="9.2837%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (664 samples, 0.26%)</title><rect x="8.8413%" y="261" width="0.2639%" height="15" fill="rgb(224,206,25)" fg:x="22242" fg:w="664"/><text x="9.0913%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (51 samples, 0.02%)</title><rect x="9.0849%" y="245" width="0.0203%" height="15" fill="rgb(243,201,19)" fg:x="22855" fg:w="51"/><text x="9.3349%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (696 samples, 0.28%)</title><rect x="8.8413%" y="277" width="0.2767%" height="15" fill="rgb(236,59,4)" fg:x="22242" fg:w="696"/><text x="9.0913%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (32 samples, 0.01%)</title><rect x="9.1052%" y="261" width="0.0127%" height="15" fill="rgb(254,179,45)" fg:x="22906" fg:w="32"/><text x="9.3552%" y="271.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (1,970 samples, 0.78%)</title><rect x="8.3357%" y="357" width="0.7831%" height="15" fill="rgb(226,14,10)" fg:x="20970" fg:w="1970"/><text x="8.5857%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,650 samples, 0.66%)</title><rect x="8.4629%" y="341" width="0.6559%" height="15" fill="rgb(244,27,41)" fg:x="21290" fg:w="1650"/><text x="8.7129%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,650 samples, 0.66%)</title><rect x="8.4629%" y="325" width="0.6559%" height="15" fill="rgb(235,35,32)" fg:x="21290" fg:w="1650"/><text x="8.7129%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,650 samples, 0.66%)</title><rect x="8.4629%" y="309" width="0.6559%" height="15" fill="rgb(218,68,31)" fg:x="21290" fg:w="1650"/><text x="8.7129%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (698 samples, 0.28%)</title><rect x="8.8413%" y="293" width="0.2775%" height="15" fill="rgb(207,120,37)" fg:x="22242" fg:w="698"/><text x="9.0913%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (1,988 samples, 0.79%)</title><rect x="8.3357%" y="373" width="0.7902%" height="15" fill="rgb(227,98,0)" fg:x="20970" fg:w="1988"/><text x="8.5857%" y="383.50"></text></g><g><title>core::ptr::read (88 samples, 0.03%)</title><rect x="9.1648%" y="357" width="0.0350%" height="15" fill="rgb(207,7,3)" fg:x="23056" fg:w="88"/><text x="9.4148%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (2,655 samples, 1.06%)</title><rect x="8.1576%" y="389" width="1.0554%" height="15" fill="rgb(206,98,19)" fg:x="20522" fg:w="2655"/><text x="8.4076%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (219 samples, 0.09%)</title><rect x="9.1259%" y="373" width="0.0871%" height="15" fill="rgb(217,5,26)" fg:x="22958" fg:w="219"/><text x="9.3759%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (33 samples, 0.01%)</title><rect x="9.1998%" y="357" width="0.0131%" height="15" fill="rgb(235,190,38)" fg:x="23144" fg:w="33"/><text x="9.4498%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (33 samples, 0.01%)</title><rect x="9.1998%" y="341" width="0.0131%" height="15" fill="rgb(247,86,24)" fg:x="23144" fg:w="33"/><text x="9.4498%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (33 samples, 0.01%)</title><rect x="9.1998%" y="325" width="0.0131%" height="15" fill="rgb(205,101,16)" fg:x="23144" fg:w="33"/><text x="9.4498%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (7,287 samples, 2.90%)</title><rect x="6.3457%" y="405" width="2.8966%" height="15" fill="rgb(246,168,33)" fg:x="15964" fg:w="7287"/><text x="6.5957%" y="415.50">mu..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (74 samples, 0.03%)</title><rect x="9.2129%" y="389" width="0.0294%" height="15" fill="rgb(231,114,1)" fg:x="23177" fg:w="74"/><text x="9.4629%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::RefMut&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;,mut_binary_heap::binary_heap::MaxComparator&gt;&gt; (7,327 samples, 2.91%)</title><rect x="6.3318%" y="437" width="2.9125%" height="15" fill="rgb(207,184,53)" fg:x="15929" fg:w="7327"/><text x="6.5818%" y="447.50">co..</text></g><g><title>&lt;mut_binary_heap::binary_heap::RefMut&lt;K,T,C&gt; as core::ops::drop::Drop&gt;::drop (7,327 samples, 2.91%)</title><rect x="6.3318%" y="421" width="2.9125%" height="15" fill="rgb(224,95,51)" fg:x="15929" fg:w="7327"/><text x="6.5818%" y="431.50">&lt;m..</text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (51 samples, 0.02%)</title><rect x="9.2443%" y="421" width="0.0203%" height="15" fill="rgb(212,188,45)" fg:x="23256" fg:w="51"/><text x="9.4943%" y="431.50"></text></g><g><title>log::__private_api::log (106 samples, 0.04%)</title><rect x="9.2443%" y="437" width="0.0421%" height="15" fill="rgb(223,154,38)" fg:x="23256" fg:w="106"/><text x="9.4943%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (55 samples, 0.02%)</title><rect x="9.2646%" y="421" width="0.0219%" height="15" fill="rgb(251,22,52)" fg:x="23307" fg:w="55"/><text x="9.5146%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (243 samples, 0.10%)</title><rect x="9.4391%" y="277" width="0.0966%" height="15" fill="rgb(229,209,22)" fg:x="23746" fg:w="243"/><text x="9.6891%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (479 samples, 0.19%)</title><rect x="9.3974%" y="293" width="0.1904%" height="15" fill="rgb(234,138,34)" fg:x="23641" fg:w="479"/><text x="9.6474%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (131 samples, 0.05%)</title><rect x="9.5357%" y="277" width="0.0521%" height="15" fill="rgb(212,95,11)" fg:x="23989" fg:w="131"/><text x="9.7857%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (614 samples, 0.24%)</title><rect x="9.7361%" y="277" width="0.2441%" height="15" fill="rgb(240,179,47)" fg:x="24493" fg:w="614"/><text x="9.9861%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,012 samples, 0.80%)</title><rect x="9.3155%" y="341" width="0.7998%" height="15" fill="rgb(240,163,11)" fg:x="23435" fg:w="2012"/><text x="9.5655%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,012 samples, 0.80%)</title><rect x="9.3155%" y="325" width="0.7998%" height="15" fill="rgb(236,37,12)" fg:x="23435" fg:w="2012"/><text x="9.5655%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,012 samples, 0.80%)</title><rect x="9.3155%" y="309" width="0.7998%" height="15" fill="rgb(232,164,16)" fg:x="23435" fg:w="2012"/><text x="9.5655%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,327 samples, 0.53%)</title><rect x="9.5878%" y="293" width="0.5275%" height="15" fill="rgb(244,205,15)" fg:x="24120" fg:w="1327"/><text x="9.8378%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (340 samples, 0.14%)</title><rect x="9.9801%" y="277" width="0.1352%" height="15" fill="rgb(223,117,47)" fg:x="25107" fg:w="340"/><text x="10.2301%" y="287.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (275 samples, 0.11%)</title><rect x="10.1153%" y="341" width="0.1093%" height="15" fill="rgb(244,107,35)" fg:x="25447" fg:w="275"/><text x="10.3653%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (213 samples, 0.08%)</title><rect x="10.1399%" y="325" width="0.0847%" height="15" fill="rgb(205,140,8)" fg:x="25509" fg:w="213"/><text x="10.3899%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (213 samples, 0.08%)</title><rect x="10.1399%" y="309" width="0.0847%" height="15" fill="rgb(228,84,46)" fg:x="25509" fg:w="213"/><text x="10.3899%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (213 samples, 0.08%)</title><rect x="10.1399%" y="293" width="0.0847%" height="15" fill="rgb(254,188,9)" fg:x="25509" fg:w="213"/><text x="10.3899%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (130 samples, 0.05%)</title><rect x="10.3442%" y="213" width="0.0517%" height="15" fill="rgb(206,112,54)" fg:x="26023" fg:w="130"/><text x="10.5942%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (2,785 samples, 1.11%)</title><rect x="9.3155%" y="373" width="1.1070%" height="15" fill="rgb(216,84,49)" fg:x="23435" fg:w="2785"/><text x="9.5655%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,785 samples, 1.11%)</title><rect x="9.3155%" y="357" width="1.1070%" height="15" fill="rgb(214,194,35)" fg:x="23435" fg:w="2785"/><text x="9.5655%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (498 samples, 0.20%)</title><rect x="10.2246%" y="341" width="0.1980%" height="15" fill="rgb(249,28,3)" fg:x="25722" fg:w="498"/><text x="10.4746%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (498 samples, 0.20%)</title><rect x="10.2246%" y="325" width="0.1980%" height="15" fill="rgb(222,56,52)" fg:x="25722" fg:w="498"/><text x="10.4746%" y="335.50"></text></g><g><title>core::hash::Hasher::write_i64 (459 samples, 0.18%)</title><rect x="10.2401%" y="309" width="0.1825%" height="15" fill="rgb(245,217,50)" fg:x="25761" fg:w="459"/><text x="10.4901%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (459 samples, 0.18%)</title><rect x="10.2401%" y="293" width="0.1825%" height="15" fill="rgb(213,201,24)" fg:x="25761" fg:w="459"/><text x="10.4901%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (459 samples, 0.18%)</title><rect x="10.2401%" y="277" width="0.1825%" height="15" fill="rgb(248,116,28)" fg:x="25761" fg:w="459"/><text x="10.4901%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (459 samples, 0.18%)</title><rect x="10.2401%" y="261" width="0.1825%" height="15" fill="rgb(219,72,43)" fg:x="25761" fg:w="459"/><text x="10.4901%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (459 samples, 0.18%)</title><rect x="10.2401%" y="245" width="0.1825%" height="15" fill="rgb(209,138,14)" fg:x="25761" fg:w="459"/><text x="10.4901%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (311 samples, 0.12%)</title><rect x="10.2989%" y="229" width="0.1236%" height="15" fill="rgb(222,18,33)" fg:x="25909" fg:w="311"/><text x="10.5489%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (67 samples, 0.03%)</title><rect x="10.3959%" y="213" width="0.0266%" height="15" fill="rgb(213,199,7)" fg:x="26153" fg:w="67"/><text x="10.6459%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (516 samples, 0.21%)</title><rect x="10.5374%" y="325" width="0.2051%" height="15" fill="rgb(250,110,10)" fg:x="26509" fg:w="516"/><text x="10.7874%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (516 samples, 0.21%)</title><rect x="10.5374%" y="309" width="0.2051%" height="15" fill="rgb(248,123,6)" fg:x="26509" fg:w="516"/><text x="10.7874%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (653 samples, 0.26%)</title><rect x="10.7485%" y="325" width="0.2596%" height="15" fill="rgb(206,91,31)" fg:x="27040" fg:w="653"/><text x="10.9985%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (653 samples, 0.26%)</title><rect x="10.7485%" y="309" width="0.2596%" height="15" fill="rgb(211,154,13)" fg:x="27040" fg:w="653"/><text x="10.9985%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (653 samples, 0.26%)</title><rect x="10.7485%" y="293" width="0.2596%" height="15" fill="rgb(225,148,7)" fg:x="27040" fg:w="653"/><text x="10.9985%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (653 samples, 0.26%)</title><rect x="10.7485%" y="277" width="0.2596%" height="15" fill="rgb(220,160,43)" fg:x="27040" fg:w="653"/><text x="10.9985%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (653 samples, 0.26%)</title><rect x="10.7485%" y="261" width="0.2596%" height="15" fill="rgb(213,52,39)" fg:x="27040" fg:w="653"/><text x="10.9985%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (392 samples, 0.16%)</title><rect x="11.0081%" y="325" width="0.1558%" height="15" fill="rgb(243,137,7)" fg:x="27693" fg:w="392"/><text x="11.2581%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (99 samples, 0.04%)</title><rect x="11.1675%" y="325" width="0.0394%" height="15" fill="rgb(230,79,13)" fg:x="28094" fg:w="99"/><text x="11.4175%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (333 samples, 0.13%)</title><rect x="11.2068%" y="325" width="0.1324%" height="15" fill="rgb(247,105,23)" fg:x="28193" fg:w="333"/><text x="11.4568%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (333 samples, 0.13%)</title><rect x="11.2068%" y="309" width="0.1324%" height="15" fill="rgb(223,179,41)" fg:x="28193" fg:w="333"/><text x="11.4568%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (333 samples, 0.13%)</title><rect x="11.2068%" y="293" width="0.1324%" height="15" fill="rgb(218,9,34)" fg:x="28193" fg:w="333"/><text x="11.4568%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (483 samples, 0.19%)</title><rect x="11.3392%" y="325" width="0.1920%" height="15" fill="rgb(222,106,8)" fg:x="28526" fg:w="483"/><text x="11.5892%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (483 samples, 0.19%)</title><rect x="11.3392%" y="309" width="0.1920%" height="15" fill="rgb(211,220,0)" fg:x="28526" fg:w="483"/><text x="11.5892%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (552 samples, 0.22%)</title><rect x="11.5312%" y="325" width="0.2194%" height="15" fill="rgb(229,52,16)" fg:x="29009" fg:w="552"/><text x="11.7812%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (552 samples, 0.22%)</title><rect x="11.5312%" y="309" width="0.2194%" height="15" fill="rgb(212,155,18)" fg:x="29009" fg:w="552"/><text x="11.7812%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (552 samples, 0.22%)</title><rect x="11.5312%" y="293" width="0.2194%" height="15" fill="rgb(242,21,14)" fg:x="29009" fg:w="552"/><text x="11.7812%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,375 samples, 1.34%)</title><rect x="10.4225%" y="341" width="1.3416%" height="15" fill="rgb(222,19,48)" fg:x="26220" fg:w="3375"/><text x="10.6725%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (34 samples, 0.01%)</title><rect x="11.7506%" y="325" width="0.0135%" height="15" fill="rgb(232,45,27)" fg:x="29561" fg:w="34"/><text x="12.0006%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::get_mut (6,321 samples, 2.51%)</title><rect x="9.2865%" y="437" width="2.5126%" height="15" fill="rgb(249,103,42)" fg:x="23362" fg:w="6321"/><text x="9.5365%" y="447.50">mu..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,321 samples, 2.51%)</title><rect x="9.2865%" y="421" width="2.5126%" height="15" fill="rgb(246,81,33)" fg:x="23362" fg:w="6321"/><text x="9.5365%" y="431.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,321 samples, 2.51%)</title><rect x="9.2865%" y="405" width="2.5126%" height="15" fill="rgb(252,33,42)" fg:x="23362" fg:w="6321"/><text x="9.5365%" y="415.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,321 samples, 2.51%)</title><rect x="9.2865%" y="389" width="2.5126%" height="15" fill="rgb(209,212,41)" fg:x="23362" fg:w="6321"/><text x="9.5365%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,463 samples, 1.38%)</title><rect x="10.4225%" y="373" width="1.3766%" height="15" fill="rgb(207,154,6)" fg:x="26220" fg:w="3463"/><text x="10.6725%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,463 samples, 1.38%)</title><rect x="10.4225%" y="357" width="1.3766%" height="15" fill="rgb(223,64,47)" fg:x="26220" fg:w="3463"/><text x="10.6725%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (88 samples, 0.03%)</title><rect x="11.7641%" y="341" width="0.0350%" height="15" fill="rgb(211,161,38)" fg:x="29595" fg:w="88"/><text x="12.0141%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::bump_var_activity (15,191 samples, 6.04%)</title><rect x="5.7765%" y="453" width="6.0385%" height="15" fill="rgb(219,138,40)" fg:x="14532" fg:w="15191"/><text x="6.0265%" y="463.50">project1..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (38 samples, 0.02%)</title><rect x="11.7999%" y="437" width="0.0151%" height="15" fill="rgb(241,228,46)" fg:x="29685" fg:w="38"/><text x="12.0499%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (305 samples, 0.12%)</title><rect x="12.0412%" y="357" width="0.1212%" height="15" fill="rgb(223,209,38)" fg:x="30292" fg:w="305"/><text x="12.2912%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (305 samples, 0.12%)</title><rect x="12.0412%" y="341" width="0.1212%" height="15" fill="rgb(236,164,45)" fg:x="30292" fg:w="305"/><text x="12.2912%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (189 samples, 0.08%)</title><rect x="12.6732%" y="325" width="0.0751%" height="15" fill="rgb(231,15,5)" fg:x="31882" fg:w="189"/><text x="12.9232%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (89 samples, 0.04%)</title><rect x="12.7483%" y="309" width="0.0354%" height="15" fill="rgb(252,35,15)" fg:x="32071" fg:w="89"/><text x="12.9983%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (392 samples, 0.16%)</title><rect x="12.6732%" y="341" width="0.1558%" height="15" fill="rgb(248,181,18)" fg:x="31882" fg:w="392"/><text x="12.9232%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (203 samples, 0.08%)</title><rect x="12.7483%" y="325" width="0.0807%" height="15" fill="rgb(233,39,42)" fg:x="32071" fg:w="203"/><text x="12.9983%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (114 samples, 0.05%)</title><rect x="12.7837%" y="309" width="0.0453%" height="15" fill="rgb(238,110,33)" fg:x="32160" fg:w="114"/><text x="13.0337%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (267 samples, 0.11%)</title><rect x="12.8330%" y="341" width="0.1061%" height="15" fill="rgb(233,195,10)" fg:x="32284" fg:w="267"/><text x="13.0830%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (267 samples, 0.11%)</title><rect x="12.8330%" y="325" width="0.1061%" height="15" fill="rgb(254,105,3)" fg:x="32284" fg:w="267"/><text x="13.0830%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (883 samples, 0.35%)</title><rect x="12.9391%" y="309" width="0.3510%" height="15" fill="rgb(221,225,9)" fg:x="32551" fg:w="883"/><text x="13.1891%" y="319.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (883 samples, 0.35%)</title><rect x="12.9391%" y="293" width="0.3510%" height="15" fill="rgb(224,227,45)" fg:x="32551" fg:w="883"/><text x="13.1891%" y="303.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (932 samples, 0.37%)</title><rect x="12.9391%" y="341" width="0.3705%" height="15" fill="rgb(229,198,43)" fg:x="32551" fg:w="932"/><text x="13.1891%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (932 samples, 0.37%)</title><rect x="12.9391%" y="325" width="0.3705%" height="15" fill="rgb(206,209,35)" fg:x="32551" fg:w="932"/><text x="13.1891%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (49 samples, 0.02%)</title><rect x="13.2901%" y="309" width="0.0195%" height="15" fill="rgb(245,195,53)" fg:x="33434" fg:w="49"/><text x="13.5401%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (49 samples, 0.02%)</title><rect x="13.2901%" y="293" width="0.0195%" height="15" fill="rgb(240,92,26)" fg:x="33434" fg:w="49"/><text x="13.5401%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (31 samples, 0.01%)</title><rect x="13.3096%" y="341" width="0.0123%" height="15" fill="rgb(207,40,23)" fg:x="33483" fg:w="31"/><text x="13.5596%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (146 samples, 0.06%)</title><rect x="13.3219%" y="341" width="0.0580%" height="15" fill="rgb(223,111,35)" fg:x="33514" fg:w="146"/><text x="13.5719%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (37 samples, 0.01%)</title><rect x="13.3935%" y="325" width="0.0147%" height="15" fill="rgb(229,147,28)" fg:x="33694" fg:w="37"/><text x="13.6435%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37 samples, 0.01%)</title><rect x="13.3935%" y="309" width="0.0147%" height="15" fill="rgb(211,29,28)" fg:x="33694" fg:w="37"/><text x="13.6435%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (149 samples, 0.06%)</title><rect x="13.3800%" y="341" width="0.0592%" height="15" fill="rgb(228,72,33)" fg:x="33660" fg:w="149"/><text x="13.6300%" y="351.50"></text></g><g><title>core::ptr::read (78 samples, 0.03%)</title><rect x="13.4082%" y="325" width="0.0310%" height="15" fill="rgb(205,214,31)" fg:x="33731" fg:w="78"/><text x="13.6582%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (278 samples, 0.11%)</title><rect x="13.4392%" y="341" width="0.1105%" height="15" fill="rgb(224,111,15)" fg:x="33809" fg:w="278"/><text x="13.6892%" y="351.50"></text></g><g><title>core::ptr::write (137 samples, 0.05%)</title><rect x="13.4952%" y="325" width="0.0545%" height="15" fill="rgb(253,21,26)" fg:x="33950" fg:w="137"/><text x="13.7452%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (45 samples, 0.02%)</title><rect x="13.5497%" y="341" width="0.0179%" height="15" fill="rgb(245,139,43)" fg:x="34087" fg:w="45"/><text x="13.7997%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (470 samples, 0.19%)</title><rect x="13.5692%" y="341" width="0.1868%" height="15" fill="rgb(252,170,7)" fg:x="34136" fg:w="470"/><text x="13.8192%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (115 samples, 0.05%)</title><rect x="13.7564%" y="341" width="0.0457%" height="15" fill="rgb(231,118,14)" fg:x="34607" fg:w="115"/><text x="14.0064%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (115 samples, 0.05%)</title><rect x="13.7564%" y="325" width="0.0457%" height="15" fill="rgb(238,83,0)" fg:x="34607" fg:w="115"/><text x="14.0064%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (115 samples, 0.05%)</title><rect x="13.7564%" y="309" width="0.0457%" height="15" fill="rgb(221,39,39)" fg:x="34607" fg:w="115"/><text x="14.0064%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (103 samples, 0.04%)</title><rect x="13.7612%" y="293" width="0.0409%" height="15" fill="rgb(222,119,46)" fg:x="34619" fg:w="103"/><text x="14.0112%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (103 samples, 0.04%)</title><rect x="13.7612%" y="277" width="0.0409%" height="15" fill="rgb(222,165,49)" fg:x="34619" fg:w="103"/><text x="14.0112%" y="287.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_clause (248 samples, 0.10%)</title><rect x="13.8021%" y="341" width="0.0986%" height="15" fill="rgb(219,113,52)" fg:x="34722" fg:w="248"/><text x="14.0521%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (248 samples, 0.10%)</title><rect x="13.8021%" y="325" width="0.0986%" height="15" fill="rgb(214,7,15)" fg:x="34722" fg:w="248"/><text x="14.0521%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (46 samples, 0.02%)</title><rect x="13.8824%" y="309" width="0.0183%" height="15" fill="rgb(235,32,4)" fg:x="34924" fg:w="46"/><text x="14.1324%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (36 samples, 0.01%)</title><rect x="13.8864%" y="293" width="0.0143%" height="15" fill="rgb(238,90,54)" fg:x="34934" fg:w="36"/><text x="14.1364%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (36 samples, 0.01%)</title><rect x="13.8864%" y="277" width="0.0143%" height="15" fill="rgb(213,208,19)" fg:x="34934" fg:w="36"/><text x="14.1364%" y="287.50"></text></g><g><title>project1::solver::types::Lit::var (917 samples, 0.36%)</title><rect x="13.9007%" y="341" width="0.3645%" height="15" fill="rgb(233,156,4)" fg:x="34970" fg:w="917"/><text x="14.1507%" y="351.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (160 samples, 0.06%)</title><rect x="14.2016%" y="325" width="0.0636%" height="15" fill="rgb(207,194,5)" fg:x="35727" fg:w="160"/><text x="14.4516%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::is_redundant (5,290 samples, 2.10%)</title><rect x="12.1628%" y="357" width="2.1028%" height="15" fill="rgb(206,111,30)" fg:x="30598" fg:w="5290"/><text x="12.4128%" y="367.50">p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.03%)</title><rect x="14.2656%" y="325" width="0.0290%" height="15" fill="rgb(243,70,54)" fg:x="35888" fg:w="73"/><text x="14.5156%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (165 samples, 0.07%)</title><rect x="14.2656%" y="357" width="0.0656%" height="15" fill="rgb(242,28,8)" fg:x="35888" fg:w="165"/><text x="14.5156%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (165 samples, 0.07%)</title><rect x="14.2656%" y="341" width="0.0656%" height="15" fill="rgb(219,106,18)" fg:x="35888" fg:w="165"/><text x="14.5156%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (92 samples, 0.04%)</title><rect x="14.2946%" y="325" width="0.0366%" height="15" fill="rgb(244,222,10)" fg:x="35961" fg:w="92"/><text x="14.5446%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (92 samples, 0.04%)</title><rect x="14.2946%" y="309" width="0.0366%" height="15" fill="rgb(236,179,52)" fg:x="35961" fg:w="92"/><text x="14.5446%" y="319.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (50 samples, 0.02%)</title><rect x="14.4024%" y="341" width="0.0199%" height="15" fill="rgb(213,23,39)" fg:x="36232" fg:w="50"/><text x="14.6524%" y="351.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization::{{closure}} (6,211 samples, 2.47%)</title><rect x="11.9565%" y="373" width="2.4689%" height="15" fill="rgb(238,48,10)" fg:x="30079" fg:w="6211"/><text x="12.2065%" y="383.50">pr..</text></g><g><title>project1::solver::types::Lit::var (237 samples, 0.09%)</title><rect x="14.3312%" y="357" width="0.0942%" height="15" fill="rgb(251,196,23)" fg:x="36053" fg:w="237"/><text x="14.5812%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (6,373 samples, 2.53%)</title><rect x="11.9565%" y="389" width="2.5333%" height="15" fill="rgb(250,152,24)" fg:x="30079" fg:w="6373"/><text x="12.2065%" y="399.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (162 samples, 0.06%)</title><rect x="14.4254%" y="373" width="0.0644%" height="15" fill="rgb(209,150,17)" fg:x="36290" fg:w="162"/><text x="14.6754%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (6,990 samples, 2.78%)</title><rect x="11.8150%" y="405" width="2.7786%" height="15" fill="rgb(234,202,34)" fg:x="29723" fg:w="6990"/><text x="12.0650%" y="415.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (258 samples, 0.10%)</title><rect x="14.4910%" y="389" width="0.1026%" height="15" fill="rgb(253,148,53)" fg:x="36455" fg:w="258"/><text x="14.7410%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (7,029 samples, 2.79%)</title><rect x="11.8150%" y="421" width="2.7941%" height="15" fill="rgb(218,129,16)" fg:x="29723" fg:w="7029"/><text x="12.0650%" y="431.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (29 samples, 0.01%)</title><rect x="14.5975%" y="405" width="0.0115%" height="15" fill="rgb(216,85,19)" fg:x="36723" fg:w="29"/><text x="14.8475%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (7,042 samples, 2.80%)</title><rect x="11.8150%" y="437" width="2.7992%" height="15" fill="rgb(235,228,7)" fg:x="29723" fg:w="7042"/><text x="12.0650%" y="447.50">al..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_level (133 samples, 0.05%)</title><rect x="14.6389%" y="389" width="0.0529%" height="15" fill="rgb(245,175,0)" fg:x="36827" fg:w="133"/><text x="14.8889%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (83 samples, 0.03%)</title><rect x="14.6587%" y="373" width="0.0330%" height="15" fill="rgb(208,168,36)" fg:x="36877" fg:w="83"/><text x="14.9087%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (83 samples, 0.03%)</title><rect x="14.6587%" y="357" width="0.0330%" height="15" fill="rgb(246,171,24)" fg:x="36877" fg:w="83"/><text x="14.9087%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (262 samples, 0.10%)</title><rect x="14.6142%" y="421" width="0.1041%" height="15" fill="rgb(215,142,24)" fg:x="36765" fg:w="262"/><text x="14.8642%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels::{{closure}} (249 samples, 0.10%)</title><rect x="14.6194%" y="405" width="0.0990%" height="15" fill="rgb(250,187,7)" fg:x="36778" fg:w="249"/><text x="14.8694%" y="415.50"></text></g><g><title>project1::solver::types::Lit::var (67 samples, 0.03%)</title><rect x="14.6917%" y="389" width="0.0266%" height="15" fill="rgb(228,66,33)" fg:x="36960" fg:w="67"/><text x="14.9417%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (43 samples, 0.02%)</title><rect x="14.7013%" y="373" width="0.0171%" height="15" fill="rgb(234,215,21)" fg:x="36984" fg:w="43"/><text x="14.9513%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::conflict_clause_minimization (7,311 samples, 2.91%)</title><rect x="11.8150%" y="453" width="2.9061%" height="15" fill="rgb(222,191,20)" fg:x="29723" fg:w="7311"/><text x="12.0650%" y="463.50">pr..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::abstract_levels (269 samples, 0.11%)</title><rect x="14.6142%" y="437" width="0.1069%" height="15" fill="rgb(245,79,54)" fg:x="36765" fg:w="269"/><text x="14.8642%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (264 samples, 0.10%)</title><rect x="14.9422%" y="405" width="0.1049%" height="15" fill="rgb(240,10,37)" fg:x="37590" fg:w="264"/><text x="15.1922%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (43 samples, 0.02%)</title><rect x="15.0300%" y="389" width="0.0171%" height="15" fill="rgb(214,192,32)" fg:x="37811" fg:w="43"/><text x="15.2800%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (43 samples, 0.02%)</title><rect x="15.0300%" y="373" width="0.0171%" height="15" fill="rgb(209,36,54)" fg:x="37811" fg:w="43"/><text x="15.2800%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (883 samples, 0.35%)</title><rect x="14.7212%" y="453" width="0.3510%" height="15" fill="rgb(220,10,11)" fg:x="37034" fg:w="883"/><text x="14.9712%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (883 samples, 0.35%)</title><rect x="14.7212%" y="437" width="0.3510%" height="15" fill="rgb(221,106,17)" fg:x="37034" fg:w="883"/><text x="14.9712%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (327 samples, 0.13%)</title><rect x="14.9422%" y="421" width="0.1300%" height="15" fill="rgb(251,142,44)" fg:x="37590" fg:w="327"/><text x="15.1922%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (63 samples, 0.03%)</title><rect x="15.0471%" y="405" width="0.0250%" height="15" fill="rgb(238,13,15)" fg:x="37854" fg:w="63"/><text x="15.2971%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (63 samples, 0.03%)</title><rect x="15.0471%" y="389" width="0.0250%" height="15" fill="rgb(208,107,27)" fg:x="37854" fg:w="63"/><text x="15.2971%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (89 samples, 0.04%)</title><rect x="15.0721%" y="421" width="0.0354%" height="15" fill="rgb(205,136,37)" fg:x="37917" fg:w="89"/><text x="15.3221%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason_ref (120 samples, 0.05%)</title><rect x="15.0721%" y="453" width="0.0477%" height="15" fill="rgb(250,205,27)" fg:x="37917" fg:w="120"/><text x="15.3221%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (120 samples, 0.05%)</title><rect x="15.0721%" y="437" width="0.0477%" height="15" fill="rgb(210,80,43)" fg:x="37917" fg:w="120"/><text x="15.3221%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.01%)</title><rect x="15.1075%" y="421" width="0.0123%" height="15" fill="rgb(247,160,36)" fg:x="38006" fg:w="31"/><text x="15.3575%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.01%)</title><rect x="15.1075%" y="405" width="0.0123%" height="15" fill="rgb(234,13,49)" fg:x="38006" fg:w="31"/><text x="15.3575%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (311 samples, 0.12%)</title><rect x="15.1198%" y="453" width="0.1236%" height="15" fill="rgb(234,122,0)" fg:x="38037" fg:w="311"/><text x="15.3698%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_at (485 samples, 0.19%)</title><rect x="15.2435%" y="453" width="0.1928%" height="15" fill="rgb(207,146,38)" fg:x="38348" fg:w="485"/><text x="15.4935%" y="463.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get (485 samples, 0.19%)</title><rect x="15.2435%" y="437" width="0.1928%" height="15" fill="rgb(207,177,25)" fg:x="38348" fg:w="485"/><text x="15.4935%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (485 samples, 0.19%)</title><rect x="15.2435%" y="421" width="0.1928%" height="15" fill="rgb(211,178,42)" fg:x="38348" fg:w="485"/><text x="15.4935%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (485 samples, 0.19%)</title><rect x="15.2435%" y="405" width="0.1928%" height="15" fill="rgb(230,69,54)" fg:x="38348" fg:w="485"/><text x="15.4935%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (485 samples, 0.19%)</title><rect x="15.2435%" y="389" width="0.1928%" height="15" fill="rgb(214,135,41)" fg:x="38348" fg:w="485"/><text x="15.4935%" y="399.50"></text></g><g><title>project1::solver::clause::Clause::bump_activity (29 samples, 0.01%)</title><rect x="15.4371%" y="453" width="0.0115%" height="15" fill="rgb(237,67,25)" fg:x="38835" fg:w="29"/><text x="15.6871%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (166 samples, 0.07%)</title><rect x="15.5134%" y="437" width="0.0660%" height="15" fill="rgb(222,189,50)" fg:x="39027" fg:w="166"/><text x="15.7634%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var (406 samples, 0.16%)</title><rect x="15.4486%" y="453" width="0.1614%" height="15" fill="rgb(245,148,34)" fg:x="38864" fg:w="406"/><text x="15.6986%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (77 samples, 0.03%)</title><rect x="15.5794%" y="437" width="0.0306%" height="15" fill="rgb(222,29,6)" fg:x="39193" fg:w="77"/><text x="15.8294%" y="447.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (158 samples, 0.06%)</title><rect x="15.6485%" y="437" width="0.0628%" height="15" fill="rgb(221,189,43)" fg:x="39367" fg:w="158"/><text x="15.8985%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::analyze_conflicts (37,042 samples, 14.72%)</title><rect x="0.9977%" y="469" width="14.7243%" height="15" fill="rgb(207,36,27)" fg:x="2510" fg:w="37042"/><text x="1.2477%" y="479.50">project1::solver::cdcl..</text></g><g><title>project1::solver::types::Lit::var_idx (282 samples, 0.11%)</title><rect x="15.6100%" y="453" width="0.1121%" height="15" fill="rgb(217,90,24)" fg:x="39270" fg:w="282"/><text x="15.8600%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (27 samples, 0.01%)</title><rect x="15.7113%" y="437" width="0.0107%" height="15" fill="rgb(224,66,35)" fg:x="39525" fg:w="27"/><text x="15.9613%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::attach_clause (215 samples, 0.09%)</title><rect x="15.7221%" y="469" width="0.0855%" height="15" fill="rgb(221,13,50)" fg:x="39552" fg:w="215"/><text x="15.9721%" y="479.50"></text></g><g><title>project1::solver::watch_list::WatchList::add_watcher (189 samples, 0.08%)</title><rect x="15.7324%" y="453" width="0.0751%" height="15" fill="rgb(236,68,49)" fg:x="39578" fg:w="189"/><text x="15.9824%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (177 samples, 0.07%)</title><rect x="15.7372%" y="437" width="0.0704%" height="15" fill="rgb(229,146,28)" fg:x="39590" fg:w="177"/><text x="15.9872%" y="447.50"></text></g><g><title>core::ptr::write (142 samples, 0.06%)</title><rect x="15.7511%" y="421" width="0.0564%" height="15" fill="rgb(225,31,38)" fg:x="39625" fg:w="142"/><text x="16.0011%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.01%)</title><rect x="15.9133%" y="453" width="0.0123%" height="15" fill="rgb(250,208,3)" fg:x="40033" fg:w="31"/><text x="16.1633%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.01%)</title><rect x="15.9133%" y="437" width="0.0123%" height="15" fill="rgb(246,54,23)" fg:x="40033" fg:w="31"/><text x="16.1633%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.01%)</title><rect x="15.9133%" y="421" width="0.0123%" height="15" fill="rgb(243,76,11)" fg:x="40033" fg:w="31"/><text x="16.1633%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (168 samples, 0.07%)</title><rect x="15.9256%" y="437" width="0.0668%" height="15" fill="rgb(245,21,50)" fg:x="40064" fg:w="168"/><text x="16.1756%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (96 samples, 0.04%)</title><rect x="15.9542%" y="421" width="0.0382%" height="15" fill="rgb(228,9,43)" fg:x="40136" fg:w="96"/><text x="16.2042%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (96 samples, 0.04%)</title><rect x="15.9542%" y="405" width="0.0382%" height="15" fill="rgb(208,100,47)" fg:x="40136" fg:w="96"/><text x="16.2042%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (230 samples, 0.09%)</title><rect x="15.9256%" y="453" width="0.0914%" height="15" fill="rgb(232,26,8)" fg:x="40064" fg:w="230"/><text x="16.1756%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (62 samples, 0.02%)</title><rect x="15.9924%" y="437" width="0.0246%" height="15" fill="rgb(216,166,38)" fg:x="40232" fg:w="62"/><text x="16.2424%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (62 samples, 0.02%)</title><rect x="15.9924%" y="421" width="0.0246%" height="15" fill="rgb(251,202,51)" fg:x="40232" fg:w="62"/><text x="16.2424%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (110 samples, 0.04%)</title><rect x="16.0214%" y="453" width="0.0437%" height="15" fill="rgb(254,216,34)" fg:x="40305" fg:w="110"/><text x="16.2714%" y="463.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (48 samples, 0.02%)</title><rect x="16.0460%" y="437" width="0.0191%" height="15" fill="rgb(251,32,27)" fg:x="40367" fg:w="48"/><text x="16.2960%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (48 samples, 0.02%)</title><rect x="16.0460%" y="421" width="0.0191%" height="15" fill="rgb(208,127,28)" fg:x="40367" fg:w="48"/><text x="16.2960%" y="431.50"></text></g><g><title>log::max_level (31 samples, 0.01%)</title><rect x="16.0651%" y="453" width="0.0123%" height="15" fill="rgb(224,137,22)" fg:x="40415" fg:w="31"/><text x="16.3151%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (31 samples, 0.01%)</title><rect x="16.0651%" y="437" width="0.0123%" height="15" fill="rgb(254,70,32)" fg:x="40415" fg:w="31"/><text x="16.3151%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (31 samples, 0.01%)</title><rect x="16.0651%" y="421" width="0.0123%" height="15" fill="rgb(229,75,37)" fg:x="40415" fg:w="31"/><text x="16.3151%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (47 samples, 0.02%)</title><rect x="16.0882%" y="421" width="0.0187%" height="15" fill="rgb(252,64,23)" fg:x="40473" fg:w="47"/><text x="16.3382%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (95 samples, 0.04%)</title><rect x="16.0882%" y="437" width="0.0378%" height="15" fill="rgb(232,162,48)" fg:x="40473" fg:w="95"/><text x="16.3382%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (48 samples, 0.02%)</title><rect x="16.1068%" y="421" width="0.0191%" height="15" fill="rgb(246,160,12)" fg:x="40520" fg:w="48"/><text x="16.3568%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (48 samples, 0.02%)</title><rect x="16.1068%" y="405" width="0.0191%" height="15" fill="rgb(247,166,0)" fg:x="40520" fg:w="48"/><text x="16.3568%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (59 samples, 0.02%)</title><rect x="16.1259%" y="437" width="0.0235%" height="15" fill="rgb(249,219,21)" fg:x="40568" fg:w="59"/><text x="16.3759%" y="447.50"></text></g><g><title>core::ptr::write (44 samples, 0.02%)</title><rect x="16.1319%" y="421" width="0.0175%" height="15" fill="rgb(205,209,3)" fg:x="40583" fg:w="44"/><text x="16.3819%" y="431.50"></text></g><g><title>core::ptr::read (586 samples, 0.23%)</title><rect x="16.1498%" y="421" width="0.2329%" height="15" fill="rgb(243,44,1)" fg:x="40628" fg:w="586"/><text x="16.3998%" y="431.50"></text></g><g><title>core::mem::replace (759 samples, 0.30%)</title><rect x="16.1498%" y="437" width="0.3017%" height="15" fill="rgb(206,159,16)" fg:x="40628" fg:w="759"/><text x="16.3998%" y="447.50"></text></g><g><title>core::ptr::write (173 samples, 0.07%)</title><rect x="16.3827%" y="421" width="0.0688%" height="15" fill="rgb(244,77,30)" fg:x="41214" fg:w="173"/><text x="16.6327%" y="431.50"></text></g><g><title>core::mem::swap (72 samples, 0.03%)</title><rect x="16.4515%" y="437" width="0.0286%" height="15" fill="rgb(218,69,12)" fg:x="41387" fg:w="72"/><text x="16.7015%" y="447.50"></text></g><g><title>core::mem::swap_simple (72 samples, 0.03%)</title><rect x="16.4515%" y="421" width="0.0286%" height="15" fill="rgb(212,87,7)" fg:x="41387" fg:w="72"/><text x="16.7015%" y="431.50"></text></g><g><title>core::ptr::write (64 samples, 0.03%)</title><rect x="16.4547%" y="405" width="0.0254%" height="15" fill="rgb(245,114,25)" fg:x="41395" fg:w="64"/><text x="16.7047%" y="415.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (81 samples, 0.03%)</title><rect x="16.4801%" y="437" width="0.0322%" height="15" fill="rgb(210,61,42)" fg:x="41459" fg:w="81"/><text x="16.7301%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (133 samples, 0.05%)</title><rect x="16.5358%" y="389" width="0.0529%" height="15" fill="rgb(211,52,33)" fg:x="41599" fg:w="133"/><text x="16.7858%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (69 samples, 0.03%)</title><rect x="16.5890%" y="309" width="0.0274%" height="15" fill="rgb(234,58,33)" fg:x="41733" fg:w="69"/><text x="16.8390%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (69 samples, 0.03%)</title><rect x="16.5890%" y="293" width="0.0274%" height="15" fill="rgb(220,115,36)" fg:x="41733" fg:w="69"/><text x="16.8390%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (69 samples, 0.03%)</title><rect x="16.5890%" y="277" width="0.0274%" height="15" fill="rgb(243,153,54)" fg:x="41733" fg:w="69"/><text x="16.8390%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (43 samples, 0.02%)</title><rect x="16.5994%" y="261" width="0.0171%" height="15" fill="rgb(251,47,18)" fg:x="41759" fg:w="43"/><text x="16.8494%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (99 samples, 0.04%)</title><rect x="16.5890%" y="341" width="0.0394%" height="15" fill="rgb(242,102,42)" fg:x="41733" fg:w="99"/><text x="16.8390%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (99 samples, 0.04%)</title><rect x="16.5890%" y="325" width="0.0394%" height="15" fill="rgb(234,31,38)" fg:x="41733" fg:w="99"/><text x="16.8390%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.01%)</title><rect x="16.6284%" y="325" width="0.0131%" height="15" fill="rgb(221,117,51)" fg:x="41832" fg:w="33"/><text x="16.8784%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (33 samples, 0.01%)</title><rect x="16.6284%" y="309" width="0.0131%" height="15" fill="rgb(212,20,18)" fg:x="41832" fg:w="33"/><text x="16.8784%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (273 samples, 0.11%)</title><rect x="16.5342%" y="421" width="0.1085%" height="15" fill="rgb(245,133,36)" fg:x="41595" fg:w="273"/><text x="16.7842%" y="431.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (273 samples, 0.11%)</title><rect x="16.5342%" y="405" width="0.1085%" height="15" fill="rgb(212,6,19)" fg:x="41595" fg:w="273"/><text x="16.7842%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (135 samples, 0.05%)</title><rect x="16.5890%" y="389" width="0.0537%" height="15" fill="rgb(218,1,36)" fg:x="41733" fg:w="135"/><text x="16.8390%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (135 samples, 0.05%)</title><rect x="16.5890%" y="373" width="0.0537%" height="15" fill="rgb(246,84,54)" fg:x="41733" fg:w="135"/><text x="16.8390%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (135 samples, 0.05%)</title><rect x="16.5890%" y="357" width="0.0537%" height="15" fill="rgb(242,110,6)" fg:x="41733" fg:w="135"/><text x="16.8390%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (36 samples, 0.01%)</title><rect x="16.6284%" y="341" width="0.0143%" height="15" fill="rgb(214,47,5)" fg:x="41832" fg:w="36"/><text x="16.8784%" y="351.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (337 samples, 0.13%)</title><rect x="16.5135%" y="437" width="0.1340%" height="15" fill="rgb(218,159,25)" fg:x="41543" fg:w="337"/><text x="16.7635%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (147 samples, 0.06%)</title><rect x="16.7277%" y="261" width="0.0584%" height="15" fill="rgb(215,211,28)" fg:x="42082" fg:w="147"/><text x="16.9777%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (296 samples, 0.12%)</title><rect x="16.6959%" y="277" width="0.1177%" height="15" fill="rgb(238,59,32)" fg:x="42002" fg:w="296"/><text x="16.9459%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (69 samples, 0.03%)</title><rect x="16.7862%" y="261" width="0.0274%" height="15" fill="rgb(226,82,3)" fg:x="42229" fg:w="69"/><text x="17.0362%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (289 samples, 0.11%)</title><rect x="16.8959%" y="261" width="0.1149%" height="15" fill="rgb(240,164,32)" fg:x="42505" fg:w="289"/><text x="17.1459%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (212 samples, 0.08%)</title><rect x="17.0108%" y="261" width="0.0843%" height="15" fill="rgb(232,46,7)" fg:x="42794" fg:w="212"/><text x="17.2608%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (754 samples, 0.30%)</title><rect x="16.8136%" y="277" width="0.2997%" height="15" fill="rgb(229,129,53)" fg:x="42298" fg:w="754"/><text x="17.0636%" y="287.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (46 samples, 0.02%)</title><rect x="17.0950%" y="261" width="0.0183%" height="15" fill="rgb(234,188,29)" fg:x="43006" fg:w="46"/><text x="17.3450%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,084 samples, 0.43%)</title><rect x="16.6828%" y="325" width="0.4309%" height="15" fill="rgb(246,141,4)" fg:x="41969" fg:w="1084"/><text x="16.9328%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,084 samples, 0.43%)</title><rect x="16.6828%" y="309" width="0.4309%" height="15" fill="rgb(229,23,39)" fg:x="41969" fg:w="1084"/><text x="16.9328%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,084 samples, 0.43%)</title><rect x="16.6828%" y="293" width="0.4309%" height="15" fill="rgb(206,12,3)" fg:x="41969" fg:w="1084"/><text x="16.9328%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (134 samples, 0.05%)</title><rect x="17.1137%" y="325" width="0.0533%" height="15" fill="rgb(252,226,20)" fg:x="43053" fg:w="134"/><text x="17.3637%" y="335.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (80 samples, 0.03%)</title><rect x="17.1352%" y="309" width="0.0318%" height="15" fill="rgb(216,123,35)" fg:x="43107" fg:w="80"/><text x="17.3852%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (80 samples, 0.03%)</title><rect x="17.1352%" y="293" width="0.0318%" height="15" fill="rgb(212,68,40)" fg:x="43107" fg:w="80"/><text x="17.3852%" y="303.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (80 samples, 0.03%)</title><rect x="17.1352%" y="277" width="0.0318%" height="15" fill="rgb(254,125,32)" fg:x="43107" fg:w="80"/><text x="17.3852%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (98 samples, 0.04%)</title><rect x="17.2278%" y="197" width="0.0390%" height="15" fill="rgb(253,97,22)" fg:x="43340" fg:w="98"/><text x="17.4778%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (1,544 samples, 0.61%)</title><rect x="16.6828%" y="357" width="0.6137%" height="15" fill="rgb(241,101,14)" fg:x="41969" fg:w="1544"/><text x="16.9328%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,544 samples, 0.61%)</title><rect x="16.6828%" y="341" width="0.6137%" height="15" fill="rgb(238,103,29)" fg:x="41969" fg:w="1544"/><text x="16.9328%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (326 samples, 0.13%)</title><rect x="17.1670%" y="325" width="0.1296%" height="15" fill="rgb(233,195,47)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (326 samples, 0.13%)</title><rect x="17.1670%" y="309" width="0.1296%" height="15" fill="rgb(246,218,30)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (326 samples, 0.13%)</title><rect x="17.1670%" y="293" width="0.1296%" height="15" fill="rgb(219,145,47)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (326 samples, 0.13%)</title><rect x="17.1670%" y="277" width="0.1296%" height="15" fill="rgb(243,12,26)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (326 samples, 0.13%)</title><rect x="17.1670%" y="261" width="0.1296%" height="15" fill="rgb(214,87,16)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (326 samples, 0.13%)</title><rect x="17.1670%" y="245" width="0.1296%" height="15" fill="rgb(208,99,42)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (326 samples, 0.13%)</title><rect x="17.1670%" y="229" width="0.1296%" height="15" fill="rgb(253,99,2)" fg:x="43187" fg:w="326"/><text x="17.4170%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (190 samples, 0.08%)</title><rect x="17.2211%" y="213" width="0.0755%" height="15" fill="rgb(220,168,23)" fg:x="43323" fg:w="190"/><text x="17.4711%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (75 samples, 0.03%)</title><rect x="17.2668%" y="197" width="0.0298%" height="15" fill="rgb(242,38,24)" fg:x="43438" fg:w="75"/><text x="17.5168%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.02%)</title><rect x="17.3292%" y="309" width="0.0219%" height="15" fill="rgb(225,182,9)" fg:x="43595" fg:w="55"/><text x="17.5792%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (39 samples, 0.02%)</title><rect x="17.3355%" y="293" width="0.0155%" height="15" fill="rgb(243,178,37)" fg:x="43611" fg:w="39"/><text x="17.5855%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (109 samples, 0.04%)</title><rect x="17.3510%" y="293" width="0.0433%" height="15" fill="rgb(232,139,19)" fg:x="43650" fg:w="109"/><text x="17.6010%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (109 samples, 0.04%)</title><rect x="17.3510%" y="277" width="0.0433%" height="15" fill="rgb(225,201,24)" fg:x="43650" fg:w="109"/><text x="17.6010%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (109 samples, 0.04%)</title><rect x="17.3510%" y="261" width="0.0433%" height="15" fill="rgb(221,47,46)" fg:x="43650" fg:w="109"/><text x="17.6010%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (109 samples, 0.04%)</title><rect x="17.3510%" y="245" width="0.0433%" height="15" fill="rgb(249,23,13)" fg:x="43650" fg:w="109"/><text x="17.6010%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (69 samples, 0.03%)</title><rect x="17.3944%" y="245" width="0.0274%" height="15" fill="rgb(219,9,5)" fg:x="43759" fg:w="69"/><text x="17.6444%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (190 samples, 0.08%)</title><rect x="17.3510%" y="309" width="0.0755%" height="15" fill="rgb(254,171,16)" fg:x="43650" fg:w="190"/><text x="17.6010%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (81 samples, 0.03%)</title><rect x="17.3944%" y="293" width="0.0322%" height="15" fill="rgb(230,171,20)" fg:x="43759" fg:w="81"/><text x="17.6444%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (81 samples, 0.03%)</title><rect x="17.3944%" y="277" width="0.0322%" height="15" fill="rgb(210,71,41)" fg:x="43759" fg:w="81"/><text x="17.6444%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (81 samples, 0.03%)</title><rect x="17.3944%" y="261" width="0.0322%" height="15" fill="rgb(206,173,20)" fg:x="43759" fg:w="81"/><text x="17.6444%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (142 samples, 0.06%)</title><rect x="17.4266%" y="309" width="0.0564%" height="15" fill="rgb(233,88,34)" fg:x="43840" fg:w="142"/><text x="17.6766%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (77 samples, 0.03%)</title><rect x="17.4830%" y="309" width="0.0306%" height="15" fill="rgb(223,209,46)" fg:x="43982" fg:w="77"/><text x="17.7330%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (633 samples, 0.25%)</title><rect x="17.2966%" y="341" width="0.2516%" height="15" fill="rgb(250,43,18)" fg:x="43513" fg:w="633"/><text x="17.5466%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (605 samples, 0.24%)</title><rect x="17.3077%" y="325" width="0.2405%" height="15" fill="rgb(208,13,10)" fg:x="43541" fg:w="605"/><text x="17.5577%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (75 samples, 0.03%)</title><rect x="17.5184%" y="309" width="0.0298%" height="15" fill="rgb(212,200,36)" fg:x="44071" fg:w="75"/><text x="17.7684%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (75 samples, 0.03%)</title><rect x="17.5184%" y="293" width="0.0298%" height="15" fill="rgb(225,90,30)" fg:x="44071" fg:w="75"/><text x="17.7684%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,196 samples, 0.87%)</title><rect x="16.6765%" y="373" width="0.8729%" height="15" fill="rgb(236,182,39)" fg:x="41953" fg:w="2196"/><text x="16.9265%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (636 samples, 0.25%)</title><rect x="17.2966%" y="357" width="0.2528%" height="15" fill="rgb(212,144,35)" fg:x="43513" fg:w="636"/><text x="17.5466%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2,257 samples, 0.90%)</title><rect x="16.6765%" y="421" width="0.8972%" height="15" fill="rgb(228,63,44)" fg:x="41953" fg:w="2257"/><text x="16.9265%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,257 samples, 0.90%)</title><rect x="16.6765%" y="405" width="0.8972%" height="15" fill="rgb(228,109,6)" fg:x="41953" fg:w="2257"/><text x="16.9265%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,257 samples, 0.90%)</title><rect x="16.6765%" y="389" width="0.8972%" height="15" fill="rgb(238,117,24)" fg:x="41953" fg:w="2257"/><text x="16.9265%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (61 samples, 0.02%)</title><rect x="17.5494%" y="373" width="0.0242%" height="15" fill="rgb(242,26,26)" fg:x="44149" fg:w="61"/><text x="17.7994%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (30 samples, 0.01%)</title><rect x="17.5736%" y="405" width="0.0119%" height="15" fill="rgb(221,92,48)" fg:x="44210" fg:w="30"/><text x="17.8236%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (41 samples, 0.02%)</title><rect x="17.6349%" y="389" width="0.0163%" height="15" fill="rgb(209,209,32)" fg:x="44364" fg:w="41"/><text x="17.8849%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (41 samples, 0.02%)</title><rect x="17.6349%" y="373" width="0.0163%" height="15" fill="rgb(221,70,22)" fg:x="44364" fg:w="41"/><text x="17.8849%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (41 samples, 0.02%)</title><rect x="17.6349%" y="357" width="0.0163%" height="15" fill="rgb(248,145,5)" fg:x="44364" fg:w="41"/><text x="17.8849%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::ge (145 samples, 0.06%)</title><rect x="17.6512%" y="293" width="0.0576%" height="15" fill="rgb(226,116,26)" fg:x="44405" fg:w="145"/><text x="17.9012%" y="303.50"></text></g><g><title>compare::Compare::compares_ge (163 samples, 0.06%)</title><rect x="17.6512%" y="389" width="0.0648%" height="15" fill="rgb(244,5,17)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (163 samples, 0.06%)</title><rect x="17.6512%" y="373" width="0.0648%" height="15" fill="rgb(252,159,33)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (163 samples, 0.06%)</title><rect x="17.6512%" y="357" width="0.0648%" height="15" fill="rgb(206,71,0)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (163 samples, 0.06%)</title><rect x="17.6512%" y="341" width="0.0648%" height="15" fill="rgb(233,118,54)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="351.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::lt (163 samples, 0.06%)</title><rect x="17.6512%" y="325" width="0.0648%" height="15" fill="rgb(234,83,48)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="335.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::PartialOrd&gt;::ge (163 samples, 0.06%)</title><rect x="17.6512%" y="309" width="0.0648%" height="15" fill="rgb(228,3,54)" fg:x="44405" fg:w="163"/><text x="17.9012%" y="319.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (200 samples, 0.08%)</title><rect x="17.7159%" y="373" width="0.0795%" height="15" fill="rgb(226,155,13)" fg:x="44568" fg:w="200"/><text x="17.9659%" y="383.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (200 samples, 0.08%)</title><rect x="17.7159%" y="357" width="0.0795%" height="15" fill="rgb(241,28,37)" fg:x="44568" fg:w="200"/><text x="17.9659%" y="367.50"></text></g><g><title>compare::Compare::compares_le (225 samples, 0.09%)</title><rect x="17.7159%" y="389" width="0.0894%" height="15" fill="rgb(233,93,10)" fg:x="44568" fg:w="225"/><text x="17.9659%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (815 samples, 0.32%)</title><rect x="17.8257%" y="357" width="0.3240%" height="15" fill="rgb(225,113,19)" fg:x="44844" fg:w="815"/><text x="18.0757%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (36 samples, 0.01%)</title><rect x="18.1496%" y="357" width="0.0143%" height="15" fill="rgb(241,2,18)" fg:x="45659" fg:w="36"/><text x="18.3996%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (36 samples, 0.01%)</title><rect x="18.1496%" y="341" width="0.0143%" height="15" fill="rgb(228,207,21)" fg:x="45659" fg:w="36"/><text x="18.3996%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (36 samples, 0.01%)</title><rect x="18.1496%" y="325" width="0.0143%" height="15" fill="rgb(213,211,35)" fg:x="45659" fg:w="36"/><text x="18.3996%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (122 samples, 0.05%)</title><rect x="18.2486%" y="213" width="0.0485%" height="15" fill="rgb(209,83,10)" fg:x="45908" fg:w="122"/><text x="18.4986%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (340 samples, 0.14%)</title><rect x="18.2188%" y="229" width="0.1352%" height="15" fill="rgb(209,164,1)" fg:x="45833" fg:w="340"/><text x="18.4688%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (143 samples, 0.06%)</title><rect x="18.2971%" y="213" width="0.0568%" height="15" fill="rgb(213,184,43)" fg:x="46030" fg:w="143"/><text x="18.5471%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (348 samples, 0.14%)</title><rect x="18.4326%" y="213" width="0.1383%" height="15" fill="rgb(231,61,34)" fg:x="46371" fg:w="348"/><text x="18.6826%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,138 samples, 0.45%)</title><rect x="18.1731%" y="277" width="0.4524%" height="15" fill="rgb(235,75,3)" fg:x="45718" fg:w="1138"/><text x="18.4231%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,138 samples, 0.45%)</title><rect x="18.1731%" y="261" width="0.4524%" height="15" fill="rgb(220,106,47)" fg:x="45718" fg:w="1138"/><text x="18.4231%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,138 samples, 0.45%)</title><rect x="18.1731%" y="245" width="0.4524%" height="15" fill="rgb(210,196,33)" fg:x="45718" fg:w="1138"/><text x="18.4231%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (683 samples, 0.27%)</title><rect x="18.3539%" y="229" width="0.2715%" height="15" fill="rgb(229,154,42)" fg:x="46173" fg:w="683"/><text x="18.6039%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (137 samples, 0.05%)</title><rect x="18.5710%" y="213" width="0.0545%" height="15" fill="rgb(228,114,26)" fg:x="46719" fg:w="137"/><text x="18.8210%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (119 samples, 0.05%)</title><rect x="18.6254%" y="277" width="0.0473%" height="15" fill="rgb(208,144,1)" fg:x="46856" fg:w="119"/><text x="18.8754%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (71 samples, 0.03%)</title><rect x="18.6445%" y="261" width="0.0282%" height="15" fill="rgb(239,112,37)" fg:x="46904" fg:w="71"/><text x="18.8945%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (71 samples, 0.03%)</title><rect x="18.6445%" y="245" width="0.0282%" height="15" fill="rgb(210,96,50)" fg:x="46904" fg:w="71"/><text x="18.8945%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (71 samples, 0.03%)</title><rect x="18.6445%" y="229" width="0.0282%" height="15" fill="rgb(222,178,2)" fg:x="46904" fg:w="71"/><text x="18.8945%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (54 samples, 0.02%)</title><rect x="18.7681%" y="149" width="0.0215%" height="15" fill="rgb(226,74,18)" fg:x="47215" fg:w="54"/><text x="19.0181%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (1,569 samples, 0.62%)</title><rect x="18.1731%" y="309" width="0.6237%" height="15" fill="rgb(225,67,54)" fg:x="45718" fg:w="1569"/><text x="18.4231%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,569 samples, 0.62%)</title><rect x="18.1731%" y="293" width="0.6237%" height="15" fill="rgb(251,92,32)" fg:x="45718" fg:w="1569"/><text x="18.4231%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (312 samples, 0.12%)</title><rect x="18.6727%" y="277" width="0.1240%" height="15" fill="rgb(228,149,22)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (312 samples, 0.12%)</title><rect x="18.6727%" y="261" width="0.1240%" height="15" fill="rgb(243,54,13)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="271.50"></text></g><g><title>core::hash::Hasher::write_i64 (312 samples, 0.12%)</title><rect x="18.6727%" y="245" width="0.1240%" height="15" fill="rgb(243,180,28)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (312 samples, 0.12%)</title><rect x="18.6727%" y="229" width="0.1240%" height="15" fill="rgb(208,167,24)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (312 samples, 0.12%)</title><rect x="18.6727%" y="213" width="0.1240%" height="15" fill="rgb(245,73,45)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (312 samples, 0.12%)</title><rect x="18.6727%" y="197" width="0.1240%" height="15" fill="rgb(237,203,48)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (312 samples, 0.12%)</title><rect x="18.6727%" y="181" width="0.1240%" height="15" fill="rgb(211,197,16)" fg:x="46975" fg:w="312"/><text x="18.9227%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (170 samples, 0.07%)</title><rect x="18.7292%" y="165" width="0.0676%" height="15" fill="rgb(243,99,51)" fg:x="47117" fg:w="170"/><text x="18.9792%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.04%)</title><rect x="18.8127%" y="261" width="0.0429%" height="15" fill="rgb(215,123,29)" fg:x="47327" fg:w="108"/><text x="19.0627%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (41 samples, 0.02%)</title><rect x="18.8393%" y="245" width="0.0163%" height="15" fill="rgb(239,186,37)" fg:x="47394" fg:w="41"/><text x="19.0893%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (239 samples, 0.10%)</title><rect x="18.8556%" y="245" width="0.0950%" height="15" fill="rgb(252,136,39)" fg:x="47435" fg:w="239"/><text x="19.1056%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (239 samples, 0.10%)</title><rect x="18.8556%" y="229" width="0.0950%" height="15" fill="rgb(223,213,32)" fg:x="47435" fg:w="239"/><text x="19.1056%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (239 samples, 0.10%)</title><rect x="18.8556%" y="213" width="0.0950%" height="15" fill="rgb(233,115,5)" fg:x="47435" fg:w="239"/><text x="19.1056%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (239 samples, 0.10%)</title><rect x="18.8556%" y="197" width="0.0950%" height="15" fill="rgb(207,226,44)" fg:x="47435" fg:w="239"/><text x="19.1056%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (86 samples, 0.03%)</title><rect x="18.9506%" y="197" width="0.0342%" height="15" fill="rgb(208,126,0)" fg:x="47674" fg:w="86"/><text x="19.2006%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (356 samples, 0.14%)</title><rect x="18.8556%" y="261" width="0.1415%" height="15" fill="rgb(244,66,21)" fg:x="47435" fg:w="356"/><text x="19.1056%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (117 samples, 0.05%)</title><rect x="18.9506%" y="245" width="0.0465%" height="15" fill="rgb(222,97,12)" fg:x="47674" fg:w="117"/><text x="19.2006%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (117 samples, 0.05%)</title><rect x="18.9506%" y="229" width="0.0465%" height="15" fill="rgb(219,213,19)" fg:x="47674" fg:w="117"/><text x="19.2006%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (117 samples, 0.05%)</title><rect x="18.9506%" y="213" width="0.0465%" height="15" fill="rgb(252,169,30)" fg:x="47674" fg:w="117"/><text x="19.2006%" y="223.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (31 samples, 0.01%)</title><rect x="18.9848%" y="197" width="0.0123%" height="15" fill="rgb(206,32,51)" fg:x="47760" fg:w="31"/><text x="19.2348%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (209 samples, 0.08%)</title><rect x="18.9971%" y="261" width="0.0831%" height="15" fill="rgb(250,172,42)" fg:x="47791" fg:w="209"/><text x="19.2471%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (47 samples, 0.02%)</title><rect x="19.0802%" y="261" width="0.0187%" height="15" fill="rgb(209,34,43)" fg:x="48000" fg:w="47"/><text x="19.3302%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (90 samples, 0.04%)</title><rect x="19.0989%" y="261" width="0.0358%" height="15" fill="rgb(223,11,35)" fg:x="48047" fg:w="90"/><text x="19.3489%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (90 samples, 0.04%)</title><rect x="19.0989%" y="245" width="0.0358%" height="15" fill="rgb(251,219,26)" fg:x="48047" fg:w="90"/><text x="19.3489%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.04%)</title><rect x="19.0989%" y="229" width="0.0358%" height="15" fill="rgb(231,119,3)" fg:x="48047" fg:w="90"/><text x="19.3489%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,089 samples, 0.43%)</title><rect x="18.7968%" y="277" width="0.4329%" height="15" fill="rgb(216,97,11)" fg:x="47287" fg:w="1089"/><text x="19.0468%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (239 samples, 0.10%)</title><rect x="19.1346%" y="261" width="0.0950%" height="15" fill="rgb(223,59,9)" fg:x="48137" fg:w="239"/><text x="19.3846%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (239 samples, 0.10%)</title><rect x="19.1346%" y="245" width="0.0950%" height="15" fill="rgb(233,93,31)" fg:x="48137" fg:w="239"/><text x="19.3846%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,097 samples, 0.44%)</title><rect x="18.7968%" y="293" width="0.4361%" height="15" fill="rgb(239,81,33)" fg:x="47287" fg:w="1097"/><text x="19.0468%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3,591 samples, 1.43%)</title><rect x="17.8058%" y="389" width="1.4274%" height="15" fill="rgb(213,120,34)" fg:x="44794" fg:w="3591"/><text x="18.0558%" y="399.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3,591 samples, 1.43%)</title><rect x="17.8058%" y="373" width="1.4274%" height="15" fill="rgb(243,49,53)" fg:x="44794" fg:w="3591"/><text x="18.0558%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,688 samples, 1.07%)</title><rect x="18.1647%" y="357" width="1.0685%" height="15" fill="rgb(247,216,33)" fg:x="45697" fg:w="2688"/><text x="18.4147%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,688 samples, 1.07%)</title><rect x="18.1647%" y="341" width="1.0685%" height="15" fill="rgb(226,26,14)" fg:x="45697" fg:w="2688"/><text x="18.4147%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,688 samples, 1.07%)</title><rect x="18.1647%" y="325" width="1.0685%" height="15" fill="rgb(215,49,53)" fg:x="45697" fg:w="2688"/><text x="18.4147%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,098 samples, 0.44%)</title><rect x="18.7968%" y="309" width="0.4365%" height="15" fill="rgb(245,162,40)" fg:x="47287" fg:w="1098"/><text x="19.0468%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_range (4,340 samples, 1.73%)</title><rect x="17.5856%" y="405" width="1.7252%" height="15" fill="rgb(229,68,17)" fg:x="44240" fg:w="4340"/><text x="17.8356%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (195 samples, 0.08%)</title><rect x="19.2332%" y="389" width="0.0775%" height="15" fill="rgb(213,182,10)" fg:x="48385" fg:w="195"/><text x="19.4832%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down (4,456 samples, 1.77%)</title><rect x="17.5736%" y="421" width="1.7713%" height="15" fill="rgb(245,125,30)" fg:x="44210" fg:w="4456"/><text x="17.8236%" y="431.50">m..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (86 samples, 0.03%)</title><rect x="19.3107%" y="405" width="0.0342%" height="15" fill="rgb(232,202,2)" fg:x="48580" fg:w="86"/><text x="19.5607%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (28 samples, 0.01%)</title><rect x="19.4252%" y="405" width="0.0111%" height="15" fill="rgb(237,140,51)" fg:x="48868" fg:w="28"/><text x="19.6752%" y="415.50"></text></g><g><title>compare::Compare::compares_le (412 samples, 0.16%)</title><rect x="19.4363%" y="405" width="0.1638%" height="15" fill="rgb(236,157,25)" fg:x="48896" fg:w="412"/><text x="19.6863%" y="415.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::MaxComparator as compare::Compare&lt;T&gt;&gt;::compare (412 samples, 0.16%)</title><rect x="19.4363%" y="389" width="0.1638%" height="15" fill="rgb(219,209,0)" fg:x="48896" fg:w="412"/><text x="19.6863%" y="399.50"></text></g><g><title>&lt;ordered_float::OrderedFloat&lt;T&gt; as core::cmp::Ord&gt;::cmp (412 samples, 0.16%)</title><rect x="19.4363%" y="373" width="0.1638%" height="15" fill="rgb(240,116,54)" fg:x="48896" fg:w="412"/><text x="19.6863%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (633 samples, 0.25%)</title><rect x="19.6148%" y="373" width="0.2516%" height="15" fill="rgb(216,10,36)" fg:x="49345" fg:w="633"/><text x="19.8648%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (64 samples, 0.03%)</title><rect x="19.9686%" y="229" width="0.0254%" height="15" fill="rgb(222,72,44)" fg:x="50235" fg:w="64"/><text x="20.2186%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (214 samples, 0.09%)</title><rect x="19.9360%" y="245" width="0.0851%" height="15" fill="rgb(232,159,9)" fg:x="50153" fg:w="214"/><text x="20.1860%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (68 samples, 0.03%)</title><rect x="19.9940%" y="229" width="0.0270%" height="15" fill="rgb(210,39,32)" fg:x="50299" fg:w="68"/><text x="20.2440%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (365 samples, 0.15%)</title><rect x="20.1077%" y="229" width="0.1451%" height="15" fill="rgb(216,194,45)" fg:x="50585" fg:w="365"/><text x="20.3577%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,092 samples, 0.43%)</title><rect x="19.8804%" y="293" width="0.4341%" height="15" fill="rgb(218,18,35)" fg:x="50013" fg:w="1092"/><text x="20.1304%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,092 samples, 0.43%)</title><rect x="19.8804%" y="277" width="0.4341%" height="15" fill="rgb(207,83,51)" fg:x="50013" fg:w="1092"/><text x="20.1304%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,092 samples, 0.43%)</title><rect x="19.8804%" y="261" width="0.4341%" height="15" fill="rgb(225,63,43)" fg:x="50013" fg:w="1092"/><text x="20.1304%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (738 samples, 0.29%)</title><rect x="20.0211%" y="245" width="0.2934%" height="15" fill="rgb(207,57,36)" fg:x="50367" fg:w="738"/><text x="20.2711%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (155 samples, 0.06%)</title><rect x="20.2528%" y="229" width="0.0616%" height="15" fill="rgb(216,99,33)" fg:x="50950" fg:w="155"/><text x="20.5028%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (72 samples, 0.03%)</title><rect x="20.3144%" y="293" width="0.0286%" height="15" fill="rgb(225,42,16)" fg:x="51105" fg:w="72"/><text x="20.5644%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (140 samples, 0.06%)</title><rect x="20.4559%" y="165" width="0.0557%" height="15" fill="rgb(220,201,45)" fg:x="51461" fg:w="140"/><text x="20.7059%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (216 samples, 0.09%)</title><rect x="20.4277%" y="181" width="0.0859%" height="15" fill="rgb(225,33,4)" fg:x="51390" fg:w="216"/><text x="20.6777%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (1,594 samples, 0.63%)</title><rect x="19.8804%" y="325" width="0.6336%" height="15" fill="rgb(224,33,50)" fg:x="50013" fg:w="1594"/><text x="20.1304%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,594 samples, 0.63%)</title><rect x="19.8804%" y="309" width="0.6336%" height="15" fill="rgb(246,198,51)" fg:x="50013" fg:w="1594"/><text x="20.1304%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (430 samples, 0.17%)</title><rect x="20.3430%" y="293" width="0.1709%" height="15" fill="rgb(205,22,4)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (430 samples, 0.17%)</title><rect x="20.3430%" y="277" width="0.1709%" height="15" fill="rgb(206,3,8)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (430 samples, 0.17%)</title><rect x="20.3430%" y="261" width="0.1709%" height="15" fill="rgb(251,23,15)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (430 samples, 0.17%)</title><rect x="20.3430%" y="245" width="0.1709%" height="15" fill="rgb(252,88,28)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (430 samples, 0.17%)</title><rect x="20.3430%" y="229" width="0.1709%" height="15" fill="rgb(212,127,14)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (430 samples, 0.17%)</title><rect x="20.3430%" y="213" width="0.1709%" height="15" fill="rgb(247,145,37)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (430 samples, 0.17%)</title><rect x="20.3430%" y="197" width="0.1709%" height="15" fill="rgb(209,117,53)" fg:x="51177" fg:w="430"/><text x="20.5930%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.04%)</title><rect x="20.5462%" y="277" width="0.0437%" height="15" fill="rgb(212,90,42)" fg:x="51688" fg:w="110"/><text x="20.7962%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (73 samples, 0.03%)</title><rect x="20.5609%" y="261" width="0.0290%" height="15" fill="rgb(218,164,37)" fg:x="51725" fg:w="73"/><text x="20.8109%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (348 samples, 0.14%)</title><rect x="20.5899%" y="261" width="0.1383%" height="15" fill="rgb(246,65,34)" fg:x="51798" fg:w="348"/><text x="20.8399%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (348 samples, 0.14%)</title><rect x="20.5899%" y="245" width="0.1383%" height="15" fill="rgb(231,100,33)" fg:x="51798" fg:w="348"/><text x="20.8399%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (348 samples, 0.14%)</title><rect x="20.5899%" y="229" width="0.1383%" height="15" fill="rgb(228,126,14)" fg:x="51798" fg:w="348"/><text x="20.8399%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (348 samples, 0.14%)</title><rect x="20.5899%" y="213" width="0.1383%" height="15" fill="rgb(215,173,21)" fg:x="51798" fg:w="348"/><text x="20.8399%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (121 samples, 0.05%)</title><rect x="20.7282%" y="213" width="0.0481%" height="15" fill="rgb(210,6,40)" fg:x="52146" fg:w="121"/><text x="20.9782%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (472 samples, 0.19%)</title><rect x="20.5899%" y="277" width="0.1876%" height="15" fill="rgb(212,48,18)" fg:x="51798" fg:w="472"/><text x="20.8399%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (124 samples, 0.05%)</title><rect x="20.7282%" y="261" width="0.0493%" height="15" fill="rgb(230,214,11)" fg:x="52146" fg:w="124"/><text x="20.9782%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (124 samples, 0.05%)</title><rect x="20.7282%" y="245" width="0.0493%" height="15" fill="rgb(254,105,39)" fg:x="52146" fg:w="124"/><text x="20.9782%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (124 samples, 0.05%)</title><rect x="20.7282%" y="229" width="0.0493%" height="15" fill="rgb(245,158,5)" fg:x="52146" fg:w="124"/><text x="20.9782%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (66 samples, 0.03%)</title><rect x="20.7775%" y="277" width="0.0262%" height="15" fill="rgb(249,208,11)" fg:x="52270" fg:w="66"/><text x="21.0275%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (37 samples, 0.01%)</title><rect x="20.8038%" y="277" width="0.0147%" height="15" fill="rgb(210,39,28)" fg:x="52336" fg:w="37"/><text x="21.0538%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (37 samples, 0.01%)</title><rect x="20.8038%" y="261" width="0.0147%" height="15" fill="rgb(211,56,53)" fg:x="52336" fg:w="37"/><text x="21.0538%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.01%)</title><rect x="20.8038%" y="245" width="0.0147%" height="15" fill="rgb(226,201,30)" fg:x="52336" fg:w="37"/><text x="21.0538%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (196 samples, 0.08%)</title><rect x="20.8185%" y="277" width="0.0779%" height="15" fill="rgb(239,101,34)" fg:x="52373" fg:w="196"/><text x="21.0685%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (196 samples, 0.08%)</title><rect x="20.8185%" y="261" width="0.0779%" height="15" fill="rgb(226,209,5)" fg:x="52373" fg:w="196"/><text x="21.0685%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,060 samples, 0.42%)</title><rect x="20.5140%" y="293" width="0.4214%" height="15" fill="rgb(250,105,47)" fg:x="51607" fg:w="1060"/><text x="20.7640%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (98 samples, 0.04%)</title><rect x="20.8964%" y="277" width="0.0390%" height="15" fill="rgb(230,72,3)" fg:x="52569" fg:w="98"/><text x="21.1464%" y="287.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (3,412 samples, 1.36%)</title><rect x="19.6001%" y="389" width="1.3563%" height="15" fill="rgb(232,218,39)" fg:x="49308" fg:w="3412"/><text x="19.8501%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,714 samples, 1.08%)</title><rect x="19.8776%" y="373" width="1.0788%" height="15" fill="rgb(248,166,6)" fg:x="50006" fg:w="2714"/><text x="20.1276%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,714 samples, 1.08%)</title><rect x="19.8776%" y="357" width="1.0788%" height="15" fill="rgb(247,89,20)" fg:x="50006" fg:w="2714"/><text x="20.1276%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,714 samples, 1.08%)</title><rect x="19.8776%" y="341" width="1.0788%" height="15" fill="rgb(248,130,54)" fg:x="50006" fg:w="2714"/><text x="20.1276%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1,113 samples, 0.44%)</title><rect x="20.5140%" y="325" width="0.4424%" height="15" fill="rgb(234,196,4)" fg:x="51607" fg:w="1113"/><text x="20.7640%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,113 samples, 0.44%)</title><rect x="20.5140%" y="309" width="0.4424%" height="15" fill="rgb(250,143,31)" fg:x="51607" fg:w="1113"/><text x="20.7640%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (53 samples, 0.02%)</title><rect x="20.9353%" y="293" width="0.0211%" height="15" fill="rgb(211,110,34)" fg:x="52667" fg:w="53"/><text x="21.1853%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (3,448 samples, 1.37%)</title><rect x="19.6001%" y="405" width="1.3706%" height="15" fill="rgb(215,124,48)" fg:x="49308" fg:w="3448"/><text x="19.8501%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (36 samples, 0.01%)</title><rect x="20.9564%" y="389" width="0.0143%" height="15" fill="rgb(216,46,13)" fg:x="52720" fg:w="36"/><text x="21.2064%" y="399.50"></text></g><g><title>core::ptr::read (195 samples, 0.08%)</title><rect x="21.0411%" y="389" width="0.0775%" height="15" fill="rgb(205,184,25)" fg:x="52933" fg:w="195"/><text x="21.2911%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (4,511 samples, 1.79%)</title><rect x="19.3449%" y="421" width="1.7931%" height="15" fill="rgb(228,1,10)" fg:x="48666" fg:w="4511"/><text x="19.5949%" y="431.50">m..</text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::new (421 samples, 0.17%)</title><rect x="20.9707%" y="405" width="0.1673%" height="15" fill="rgb(213,116,27)" fg:x="52756" fg:w="421"/><text x="21.2207%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (49 samples, 0.02%)</title><rect x="21.1186%" y="389" width="0.0195%" height="15" fill="rgb(241,95,50)" fg:x="53128" fg:w="49"/><text x="21.3686%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (49 samples, 0.02%)</title><rect x="21.1186%" y="373" width="0.0195%" height="15" fill="rgb(238,48,32)" fg:x="53128" fg:w="49"/><text x="21.3686%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (49 samples, 0.02%)</title><rect x="21.1186%" y="357" width="0.0195%" height="15" fill="rgb(235,113,49)" fg:x="53128" fg:w="49"/><text x="21.3686%" y="367.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (11,405 samples, 4.53%)</title><rect x="16.6475%" y="437" width="4.5335%" height="15" fill="rgb(205,127,43)" fg:x="41880" fg:w="11405"/><text x="16.8975%" y="447.50">mut_b..</text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::update (108 samples, 0.04%)</title><rect x="21.1381%" y="421" width="0.0429%" height="15" fill="rgb(250,162,2)" fg:x="53177" fg:w="108"/><text x="21.3881%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (100 samples, 0.04%)</title><rect x="21.2851%" y="293" width="0.0398%" height="15" fill="rgb(220,13,41)" fg:x="53547" fg:w="100"/><text x="21.5351%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (240 samples, 0.10%)</title><rect x="21.2573%" y="309" width="0.0954%" height="15" fill="rgb(249,221,25)" fg:x="53477" fg:w="240"/><text x="21.5073%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (70 samples, 0.03%)</title><rect x="21.3249%" y="293" width="0.0278%" height="15" fill="rgb(215,208,19)" fg:x="53647" fg:w="70"/><text x="21.5749%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (324 samples, 0.13%)</title><rect x="21.4390%" y="293" width="0.1288%" height="15" fill="rgb(236,175,2)" fg:x="53934" fg:w="324"/><text x="21.6890%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (760 samples, 0.30%)</title><rect x="21.3527%" y="309" width="0.3021%" height="15" fill="rgb(241,52,2)" fg:x="53717" fg:w="760"/><text x="21.6027%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (219 samples, 0.09%)</title><rect x="21.5678%" y="293" width="0.0871%" height="15" fill="rgb(248,140,14)" fg:x="54258" fg:w="219"/><text x="21.8178%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,151 samples, 0.46%)</title><rect x="21.1977%" y="357" width="0.4575%" height="15" fill="rgb(253,22,42)" fg:x="53327" fg:w="1151"/><text x="21.4477%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,151 samples, 0.46%)</title><rect x="21.1977%" y="341" width="0.4575%" height="15" fill="rgb(234,61,47)" fg:x="53327" fg:w="1151"/><text x="21.4477%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,151 samples, 0.46%)</title><rect x="21.1977%" y="325" width="0.4575%" height="15" fill="rgb(208,226,15)" fg:x="53327" fg:w="1151"/><text x="21.4477%" y="335.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (167 samples, 0.07%)</title><rect x="21.6552%" y="357" width="0.0664%" height="15" fill="rgb(217,221,4)" fg:x="54478" fg:w="167"/><text x="21.9052%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (155 samples, 0.06%)</title><rect x="21.6600%" y="341" width="0.0616%" height="15" fill="rgb(212,174,34)" fg:x="54490" fg:w="155"/><text x="21.9100%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (155 samples, 0.06%)</title><rect x="21.6600%" y="325" width="0.0616%" height="15" fill="rgb(253,83,4)" fg:x="54490" fg:w="155"/><text x="21.9100%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (155 samples, 0.06%)</title><rect x="21.6600%" y="309" width="0.0616%" height="15" fill="rgb(250,195,49)" fg:x="54490" fg:w="155"/><text x="21.9100%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (201 samples, 0.08%)</title><rect x="21.7701%" y="229" width="0.0799%" height="15" fill="rgb(241,192,25)" fg:x="54767" fg:w="201"/><text x="22.0201%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (290 samples, 0.12%)</title><rect x="21.7498%" y="245" width="0.1153%" height="15" fill="rgb(208,124,10)" fg:x="54716" fg:w="290"/><text x="21.9998%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (38 samples, 0.02%)</title><rect x="21.8500%" y="229" width="0.0151%" height="15" fill="rgb(222,33,0)" fg:x="54968" fg:w="38"/><text x="22.1000%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (1,680 samples, 0.67%)</title><rect x="21.1977%" y="389" width="0.6678%" height="15" fill="rgb(234,209,28)" fg:x="53327" fg:w="1680"/><text x="21.4477%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,680 samples, 0.67%)</title><rect x="21.1977%" y="373" width="0.6678%" height="15" fill="rgb(224,11,23)" fg:x="53327" fg:w="1680"/><text x="21.4477%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (362 samples, 0.14%)</title><rect x="21.7216%" y="357" width="0.1439%" height="15" fill="rgb(232,99,1)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (362 samples, 0.14%)</title><rect x="21.7216%" y="341" width="0.1439%" height="15" fill="rgb(237,95,45)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="351.50"></text></g><g><title>core::hash::Hasher::write_i64 (362 samples, 0.14%)</title><rect x="21.7216%" y="325" width="0.1439%" height="15" fill="rgb(208,109,11)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (362 samples, 0.14%)</title><rect x="21.7216%" y="309" width="0.1439%" height="15" fill="rgb(216,190,48)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (362 samples, 0.14%)</title><rect x="21.7216%" y="293" width="0.1439%" height="15" fill="rgb(251,171,36)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (362 samples, 0.14%)</title><rect x="21.7216%" y="277" width="0.1439%" height="15" fill="rgb(230,62,22)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (362 samples, 0.14%)</title><rect x="21.7216%" y="261" width="0.1439%" height="15" fill="rgb(225,114,35)" fg:x="54645" fg:w="362"/><text x="21.9716%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.03%)</title><rect x="21.9394%" y="341" width="0.0298%" height="15" fill="rgb(215,118,42)" fg:x="55193" fg:w="75"/><text x="22.1894%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (68 samples, 0.03%)</title><rect x="21.9422%" y="325" width="0.0270%" height="15" fill="rgb(243,119,21)" fg:x="55200" fg:w="68"/><text x="22.1922%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (573 samples, 0.23%)</title><rect x="21.9700%" y="341" width="0.2278%" height="15" fill="rgb(252,177,53)" fg:x="55270" fg:w="573"/><text x="22.2200%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (573 samples, 0.23%)</title><rect x="21.9700%" y="325" width="0.2278%" height="15" fill="rgb(237,209,29)" fg:x="55270" fg:w="573"/><text x="22.2200%" y="335.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (573 samples, 0.23%)</title><rect x="21.9700%" y="309" width="0.2278%" height="15" fill="rgb(212,65,23)" fg:x="55270" fg:w="573"/><text x="22.2200%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (573 samples, 0.23%)</title><rect x="21.9700%" y="293" width="0.2278%" height="15" fill="rgb(230,222,46)" fg:x="55270" fg:w="573"/><text x="22.2200%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (573 samples, 0.23%)</title><rect x="21.9700%" y="277" width="0.2278%" height="15" fill="rgb(215,135,32)" fg:x="55270" fg:w="573"/><text x="22.2200%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (162 samples, 0.06%)</title><rect x="22.1978%" y="341" width="0.0644%" height="15" fill="rgb(246,101,22)" fg:x="55843" fg:w="162"/><text x="22.4478%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (39 samples, 0.02%)</title><rect x="22.2622%" y="341" width="0.0155%" height="15" fill="rgb(206,107,13)" fg:x="56005" fg:w="39"/><text x="22.5122%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (36 samples, 0.01%)</title><rect x="22.2777%" y="341" width="0.0143%" height="15" fill="rgb(250,100,44)" fg:x="56044" fg:w="36"/><text x="22.5277%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36 samples, 0.01%)</title><rect x="22.2777%" y="325" width="0.0143%" height="15" fill="rgb(231,147,38)" fg:x="56044" fg:w="36"/><text x="22.5277%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.01%)</title><rect x="22.2777%" y="309" width="0.0143%" height="15" fill="rgb(229,8,40)" fg:x="56044" fg:w="36"/><text x="22.5277%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (321 samples, 0.13%)</title><rect x="22.2920%" y="341" width="0.1276%" height="15" fill="rgb(221,135,30)" fg:x="56080" fg:w="321"/><text x="22.5420%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (321 samples, 0.13%)</title><rect x="22.2920%" y="325" width="0.1276%" height="15" fill="rgb(249,193,18)" fg:x="56080" fg:w="321"/><text x="22.5420%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (141 samples, 0.06%)</title><rect x="22.4196%" y="341" width="0.0560%" height="15" fill="rgb(209,133,39)" fg:x="56401" fg:w="141"/><text x="22.6696%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (141 samples, 0.06%)</title><rect x="22.4196%" y="325" width="0.0560%" height="15" fill="rgb(232,100,14)" fg:x="56401" fg:w="141"/><text x="22.6696%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (141 samples, 0.06%)</title><rect x="22.4196%" y="309" width="0.0560%" height="15" fill="rgb(224,185,1)" fg:x="56401" fg:w="141"/><text x="22.6696%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,572 samples, 0.62%)</title><rect x="21.8655%" y="357" width="0.6249%" height="15" fill="rgb(223,139,8)" fg:x="55007" fg:w="1572"/><text x="22.1155%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (37 samples, 0.01%)</title><rect x="22.4757%" y="341" width="0.0147%" height="15" fill="rgb(232,213,38)" fg:x="56542" fg:w="37"/><text x="22.7257%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,694 samples, 0.67%)</title><rect x="21.8655%" y="373" width="0.6734%" height="15" fill="rgb(207,94,22)" fg:x="55007" fg:w="1694"/><text x="22.1155%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (122 samples, 0.05%)</title><rect x="22.4904%" y="357" width="0.0485%" height="15" fill="rgb(219,183,54)" fg:x="56579" fg:w="122"/><text x="22.7404%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,421 samples, 1.36%)</title><rect x="21.1810%" y="437" width="1.3599%" height="15" fill="rgb(216,185,54)" fg:x="53285" fg:w="3421"/><text x="21.4310%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,421 samples, 1.36%)</title><rect x="21.1810%" y="421" width="1.3599%" height="15" fill="rgb(254,217,39)" fg:x="53285" fg:w="3421"/><text x="21.4310%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,421 samples, 1.36%)</title><rect x="21.1810%" y="405" width="1.3599%" height="15" fill="rgb(240,178,23)" fg:x="53285" fg:w="3421"/><text x="21.4310%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,699 samples, 0.68%)</title><rect x="21.8655%" y="389" width="0.6754%" height="15" fill="rgb(218,11,47)" fg:x="55007" fg:w="1699"/><text x="22.1155%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (28 samples, 0.01%)</title><rect x="22.5699%" y="373" width="0.0111%" height="15" fill="rgb(218,51,51)" fg:x="56779" fg:w="28"/><text x="22.8199%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (28 samples, 0.01%)</title><rect x="22.5699%" y="357" width="0.0111%" height="15" fill="rgb(238,126,27)" fg:x="56779" fg:w="28"/><text x="22.8199%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (167 samples, 0.07%)</title><rect x="22.5416%" y="405" width="0.0664%" height="15" fill="rgb(249,202,22)" fg:x="56708" fg:w="167"/><text x="22.7916%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (162 samples, 0.06%)</title><rect x="22.5436%" y="389" width="0.0644%" height="15" fill="rgb(254,195,49)" fg:x="56713" fg:w="162"/><text x="22.7936%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (57 samples, 0.02%)</title><rect x="22.5854%" y="373" width="0.0227%" height="15" fill="rgb(208,123,14)" fg:x="56818" fg:w="57"/><text x="22.8354%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (217 samples, 0.09%)</title><rect x="22.5408%" y="421" width="0.0863%" height="15" fill="rgb(224,200,8)" fg:x="56706" fg:w="217"/><text x="22.7908%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (48 samples, 0.02%)</title><rect x="22.6080%" y="405" width="0.0191%" height="15" fill="rgb(217,61,36)" fg:x="56875" fg:w="48"/><text x="22.8580%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (34 samples, 0.01%)</title><rect x="22.6136%" y="389" width="0.0135%" height="15" fill="rgb(206,35,45)" fg:x="56889" fg:w="34"/><text x="22.8636%" y="399.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::push (16,645 samples, 6.62%)</title><rect x="16.0774%" y="453" width="6.6164%" height="15" fill="rgb(217,65,33)" fg:x="40446" fg:w="16645"/><text x="16.3274%" y="463.50">mut_binar..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (385 samples, 0.15%)</title><rect x="22.5408%" y="437" width="0.1530%" height="15" fill="rgb(222,158,48)" fg:x="56706" fg:w="385"/><text x="22.7908%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (168 samples, 0.07%)</title><rect x="22.6271%" y="421" width="0.0668%" height="15" fill="rgb(254,2,54)" fg:x="56923" fg:w="168"/><text x="22.8771%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::pop_trail (72 samples, 0.03%)</title><rect x="22.7026%" y="453" width="0.0286%" height="15" fill="rgb(250,143,38)" fg:x="57113" fg:w="72"/><text x="22.9526%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (72 samples, 0.03%)</title><rect x="22.7026%" y="437" width="0.0286%" height="15" fill="rgb(248,25,0)" fg:x="57113" fg:w="72"/><text x="22.9526%" y="447.50"></text></g><g><title>core::ptr::read (42 samples, 0.02%)</title><rect x="22.7146%" y="421" width="0.0167%" height="15" fill="rgb(206,152,27)" fg:x="57143" fg:w="42"/><text x="22.9646%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::trail_size (35 samples, 0.01%)</title><rect x="22.7312%" y="453" width="0.0139%" height="15" fill="rgb(240,77,30)" fg:x="57185" fg:w="35"/><text x="22.9812%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (35 samples, 0.01%)</title><rect x="22.7312%" y="437" width="0.0139%" height="15" fill="rgb(231,5,3)" fg:x="57185" fg:w="35"/><text x="22.9812%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::backtrack (17,488 samples, 6.95%)</title><rect x="15.8075%" y="469" width="6.9515%" height="15" fill="rgb(207,226,32)" fg:x="39767" fg:w="17488"/><text x="16.0575%" y="479.50">project1:..</text></g><g><title>project1::solver::types::Lit::var (35 samples, 0.01%)</title><rect x="22.7452%" y="453" width="0.0139%" height="15" fill="rgb(222,207,47)" fg:x="57220" fg:w="35"/><text x="22.9952%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (35 samples, 0.01%)</title><rect x="22.7452%" y="437" width="0.0139%" height="15" fill="rgb(229,115,45)" fg:x="57220" fg:w="35"/><text x="22.9952%" y="447.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (67 samples, 0.03%)</title><rect x="22.7889%" y="437" width="0.0266%" height="15" fill="rgb(224,191,6)" fg:x="57330" fg:w="67"/><text x="23.0389%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (68 samples, 0.03%)</title><rect x="22.7889%" y="453" width="0.0270%" height="15" fill="rgb(230,227,24)" fg:x="57330" fg:w="68"/><text x="23.0389%" y="463.50"></text></g><g><title>_int_free (65 samples, 0.03%)</title><rect x="22.8322%" y="261" width="0.0258%" height="15" fill="rgb(228,80,19)" fg:x="57439" fg:w="65"/><text x="23.0822%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (114 samples, 0.05%)</title><rect x="22.8187%" y="341" width="0.0453%" height="15" fill="rgb(247,229,0)" fg:x="57405" fg:w="114"/><text x="23.0687%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (112 samples, 0.04%)</title><rect x="22.8195%" y="325" width="0.0445%" height="15" fill="rgb(237,194,15)" fg:x="57407" fg:w="112"/><text x="23.0695%" y="335.50"></text></g><g><title>__rdl_dealloc (112 samples, 0.04%)</title><rect x="22.8195%" y="309" width="0.0445%" height="15" fill="rgb(219,203,20)" fg:x="57407" fg:w="112"/><text x="23.0695%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (112 samples, 0.04%)</title><rect x="22.8195%" y="293" width="0.0445%" height="15" fill="rgb(234,128,8)" fg:x="57407" fg:w="112"/><text x="23.0695%" y="303.50"></text></g><g><title>__GI___libc_free (112 samples, 0.04%)</title><rect x="22.8195%" y="277" width="0.0445%" height="15" fill="rgb(248,202,8)" fg:x="57407" fg:w="112"/><text x="23.0695%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (124 samples, 0.05%)</title><rect x="22.8171%" y="453" width="0.0493%" height="15" fill="rgb(206,104,37)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (124 samples, 0.05%)</title><rect x="22.8171%" y="437" width="0.0493%" height="15" fill="rgb(223,8,27)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (124 samples, 0.05%)</title><rect x="22.8171%" y="421" width="0.0493%" height="15" fill="rgb(216,217,28)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (124 samples, 0.05%)</title><rect x="22.8171%" y="405" width="0.0493%" height="15" fill="rgb(249,199,1)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (124 samples, 0.05%)</title><rect x="22.8171%" y="389" width="0.0493%" height="15" fill="rgb(240,85,17)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (124 samples, 0.05%)</title><rect x="22.8171%" y="373" width="0.0493%" height="15" fill="rgb(206,108,45)" fg:x="57401" fg:w="124"/><text x="23.0671%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (120 samples, 0.05%)</title><rect x="22.8187%" y="357" width="0.0477%" height="15" fill="rgb(245,210,41)" fg:x="57405" fg:w="120"/><text x="23.0687%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (117 samples, 0.05%)</title><rect x="22.8799%" y="405" width="0.0465%" height="15" fill="rgb(206,13,37)" fg:x="57559" fg:w="117"/><text x="23.1299%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (40 samples, 0.02%)</title><rect x="22.9105%" y="389" width="0.0159%" height="15" fill="rgb(250,61,18)" fg:x="57636" fg:w="40"/><text x="23.1605%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (40 samples, 0.02%)</title><rect x="22.9105%" y="373" width="0.0159%" height="15" fill="rgb(235,172,48)" fg:x="57636" fg:w="40"/><text x="23.1605%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::level (143 samples, 0.06%)</title><rect x="22.8747%" y="453" width="0.0568%" height="15" fill="rgb(249,201,17)" fg:x="57546" fg:w="143"/><text x="23.1247%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::reason (143 samples, 0.06%)</title><rect x="22.8747%" y="437" width="0.0568%" height="15" fill="rgb(219,208,6)" fg:x="57546" fg:w="143"/><text x="23.1247%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (130 samples, 0.05%)</title><rect x="22.8799%" y="421" width="0.0517%" height="15" fill="rgb(248,31,23)" fg:x="57559" fg:w="130"/><text x="23.1299%" y="431.50"></text></g><g><title>project1::solver::types::Lit::var (39 samples, 0.02%)</title><rect x="22.9316%" y="453" width="0.0155%" height="15" fill="rgb(245,15,42)" fg:x="57689" fg:w="39"/><text x="23.1816%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 0.01%)</title><rect x="23.0234%" y="405" width="0.0123%" height="15" fill="rgb(222,217,39)" fg:x="57920" fg:w="31"/><text x="23.2734%" y="415.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u16 (46 samples, 0.02%)</title><rect x="23.0357%" y="341" width="0.0183%" height="15" fill="rgb(210,219,27)" fg:x="57951" fg:w="46"/><text x="23.2857%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (84 samples, 0.03%)</title><rect x="23.0357%" y="405" width="0.0334%" height="15" fill="rgb(252,166,36)" fg:x="57951" fg:w="84"/><text x="23.2857%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (84 samples, 0.03%)</title><rect x="23.0357%" y="389" width="0.0334%" height="15" fill="rgb(245,132,34)" fg:x="57951" fg:w="84"/><text x="23.2857%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (84 samples, 0.03%)</title><rect x="23.0357%" y="373" width="0.0334%" height="15" fill="rgb(236,54,3)" fg:x="57951" fg:w="84"/><text x="23.2857%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (84 samples, 0.03%)</title><rect x="23.0357%" y="357" width="0.0334%" height="15" fill="rgb(241,173,43)" fg:x="57951" fg:w="84"/><text x="23.2857%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.02%)</title><rect x="23.0540%" y="341" width="0.0151%" height="15" fill="rgb(215,190,9)" fg:x="57997" fg:w="38"/><text x="23.3040%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (45 samples, 0.02%)</title><rect x="23.0691%" y="389" width="0.0179%" height="15" fill="rgb(242,101,16)" fg:x="58035" fg:w="45"/><text x="23.3191%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.02%)</title><rect x="23.1272%" y="325" width="0.0242%" height="15" fill="rgb(223,190,21)" fg:x="58181" fg:w="61"/><text x="23.3772%" y="335.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (47 samples, 0.02%)</title><rect x="23.1327%" y="309" width="0.0187%" height="15" fill="rgb(215,228,25)" fg:x="58195" fg:w="47"/><text x="23.3827%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.02%)</title><rect x="23.1331%" y="293" width="0.0183%" height="15" fill="rgb(225,36,22)" fg:x="58196" fg:w="46"/><text x="23.3831%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (45 samples, 0.02%)</title><rect x="23.1335%" y="277" width="0.0179%" height="15" fill="rgb(251,106,46)" fg:x="58197" fg:w="45"/><text x="23.3835%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.02%)</title><rect x="23.1514%" y="325" width="0.0191%" height="15" fill="rgb(208,90,1)" fg:x="58242" fg:w="48"/><text x="23.4014%" y="335.50"></text></g><g><title>_int_free (119 samples, 0.05%)</title><rect x="23.1864%" y="181" width="0.0473%" height="15" fill="rgb(243,10,4)" fg:x="58330" fg:w="119"/><text x="23.4364%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (160 samples, 0.06%)</title><rect x="23.1800%" y="261" width="0.0636%" height="15" fill="rgb(212,137,27)" fg:x="58314" fg:w="160"/><text x="23.4300%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (153 samples, 0.06%)</title><rect x="23.1828%" y="245" width="0.0608%" height="15" fill="rgb(231,220,49)" fg:x="58321" fg:w="153"/><text x="23.4328%" y="255.50"></text></g><g><title>__rdl_dealloc (153 samples, 0.06%)</title><rect x="23.1828%" y="229" width="0.0608%" height="15" fill="rgb(237,96,20)" fg:x="58321" fg:w="153"/><text x="23.4328%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (153 samples, 0.06%)</title><rect x="23.1828%" y="213" width="0.0608%" height="15" fill="rgb(239,229,30)" fg:x="58321" fg:w="153"/><text x="23.4328%" y="223.50"></text></g><g><title>__GI___libc_free (153 samples, 0.06%)</title><rect x="23.1828%" y="197" width="0.0608%" height="15" fill="rgb(219,65,33)" fg:x="58321" fg:w="153"/><text x="23.4328%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (170 samples, 0.07%)</title><rect x="23.1800%" y="325" width="0.0676%" height="15" fill="rgb(243,134,7)" fg:x="58314" fg:w="170"/><text x="23.4300%" y="335.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.07%)</title><rect x="23.1800%" y="309" width="0.0676%" height="15" fill="rgb(216,177,54)" fg:x="58314" fg:w="170"/><text x="23.4300%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (170 samples, 0.07%)</title><rect x="23.1800%" y="293" width="0.0676%" height="15" fill="rgb(211,160,20)" fg:x="58314" fg:w="170"/><text x="23.4300%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (170 samples, 0.07%)</title><rect x="23.1800%" y="277" width="0.0676%" height="15" fill="rgb(239,85,39)" fg:x="58314" fg:w="170"/><text x="23.4300%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (67 samples, 0.03%)</title><rect x="23.2476%" y="325" width="0.0266%" height="15" fill="rgb(232,125,22)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="335.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (67 samples, 0.03%)</title><rect x="23.2476%" y="309" width="0.0266%" height="15" fill="rgb(244,57,34)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (67 samples, 0.03%)</title><rect x="23.2476%" y="293" width="0.0266%" height="15" fill="rgb(214,203,32)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (67 samples, 0.03%)</title><rect x="23.2476%" y="277" width="0.0266%" height="15" fill="rgb(207,58,43)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (67 samples, 0.03%)</title><rect x="23.2476%" y="261" width="0.0266%" height="15" fill="rgb(215,193,15)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (67 samples, 0.03%)</title><rect x="23.2476%" y="245" width="0.0266%" height="15" fill="rgb(232,15,44)" fg:x="58484" fg:w="67"/><text x="23.4976%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (113 samples, 0.04%)</title><rect x="23.3140%" y="277" width="0.0449%" height="15" fill="rgb(212,3,48)" fg:x="58651" fg:w="113"/><text x="23.5640%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (43 samples, 0.02%)</title><rect x="23.3418%" y="261" width="0.0171%" height="15" fill="rgb(218,128,7)" fg:x="58721" fg:w="43"/><text x="23.5918%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (362 samples, 0.14%)</title><rect x="23.2826%" y="293" width="0.1439%" height="15" fill="rgb(226,216,39)" fg:x="58572" fg:w="362"/><text x="23.5326%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (170 samples, 0.07%)</title><rect x="23.3589%" y="277" width="0.0676%" height="15" fill="rgb(243,47,51)" fg:x="58764" fg:w="170"/><text x="23.6089%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (170 samples, 0.07%)</title><rect x="23.3589%" y="261" width="0.0676%" height="15" fill="rgb(241,183,40)" fg:x="58764" fg:w="170"/><text x="23.6089%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (343 samples, 0.14%)</title><rect x="23.4472%" y="277" width="0.1363%" height="15" fill="rgb(231,217,32)" fg:x="58986" fg:w="343"/><text x="23.6972%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (343 samples, 0.14%)</title><rect x="23.4472%" y="261" width="0.1363%" height="15" fill="rgb(229,61,38)" fg:x="58986" fg:w="343"/><text x="23.6972%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (399 samples, 0.16%)</title><rect x="23.4265%" y="293" width="0.1586%" height="15" fill="rgb(225,210,5)" fg:x="58934" fg:w="399"/><text x="23.6765%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (58 samples, 0.02%)</title><rect x="23.5851%" y="293" width="0.0231%" height="15" fill="rgb(231,79,45)" fg:x="59333" fg:w="58"/><text x="23.8351%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,321 samples, 0.53%)</title><rect x="23.2826%" y="309" width="0.5251%" height="15" fill="rgb(224,100,7)" fg:x="58572" fg:w="1321"/><text x="23.5326%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (502 samples, 0.20%)</title><rect x="23.6081%" y="293" width="0.1995%" height="15" fill="rgb(241,198,18)" fg:x="59391" fg:w="502"/><text x="23.8581%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (502 samples, 0.20%)</title><rect x="23.6081%" y="277" width="0.1995%" height="15" fill="rgb(252,97,53)" fg:x="59391" fg:w="502"/><text x="23.8581%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (502 samples, 0.20%)</title><rect x="23.6081%" y="261" width="0.1995%" height="15" fill="rgb(220,88,7)" fg:x="59391" fg:w="502"/><text x="23.8581%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (72 samples, 0.03%)</title><rect x="23.8077%" y="293" width="0.0286%" height="15" fill="rgb(213,176,14)" fg:x="59893" fg:w="72"/><text x="24.0577%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,432 samples, 0.57%)</title><rect x="23.2826%" y="325" width="0.5692%" height="15" fill="rgb(246,73,7)" fg:x="58572" fg:w="1432"/><text x="23.5326%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (111 samples, 0.04%)</title><rect x="23.8077%" y="309" width="0.0441%" height="15" fill="rgb(245,64,36)" fg:x="59893" fg:w="111"/><text x="24.0577%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (39 samples, 0.02%)</title><rect x="23.8363%" y="293" width="0.0155%" height="15" fill="rgb(245,80,10)" fg:x="59965" fg:w="39"/><text x="24.0863%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (57 samples, 0.02%)</title><rect x="23.8518%" y="293" width="0.0227%" height="15" fill="rgb(232,107,50)" fg:x="60004" fg:w="57"/><text x="24.1018%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (57 samples, 0.02%)</title><rect x="23.8518%" y="277" width="0.0227%" height="15" fill="rgb(253,3,0)" fg:x="60004" fg:w="57"/><text x="24.1018%" y="287.50"></text></g><g><title>__memset_evex_unaligned_erms (44 samples, 0.02%)</title><rect x="23.8570%" y="261" width="0.0175%" height="15" fill="rgb(212,99,53)" fg:x="60017" fg:w="44"/><text x="24.1070%" y="271.50"></text></g><g><title>__GI___libc_malloc (401 samples, 0.16%)</title><rect x="23.8979%" y="181" width="0.1594%" height="15" fill="rgb(249,111,54)" fg:x="60120" fg:w="401"/><text x="24.1479%" y="191.50"></text></g><g><title>tcache_get (283 samples, 0.11%)</title><rect x="23.9448%" y="165" width="0.1125%" height="15" fill="rgb(249,55,30)" fg:x="60238" fg:w="283"/><text x="24.1948%" y="175.50"></text></g><g><title>__rdl_alloc (415 samples, 0.16%)</title><rect x="23.8928%" y="213" width="0.1650%" height="15" fill="rgb(237,47,42)" fg:x="60107" fg:w="415"/><text x="24.1428%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (415 samples, 0.16%)</title><rect x="23.8928%" y="197" width="0.1650%" height="15" fill="rgb(211,20,18)" fg:x="60107" fg:w="415"/><text x="24.1428%" y="207.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (434 samples, 0.17%)</title><rect x="23.8892%" y="277" width="0.1725%" height="15" fill="rgb(231,203,46)" fg:x="60098" fg:w="434"/><text x="24.1392%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (434 samples, 0.17%)</title><rect x="23.8892%" y="261" width="0.1725%" height="15" fill="rgb(237,142,3)" fg:x="60098" fg:w="434"/><text x="24.1392%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (434 samples, 0.17%)</title><rect x="23.8892%" y="245" width="0.1725%" height="15" fill="rgb(241,107,1)" fg:x="60098" fg:w="434"/><text x="24.1392%" y="255.50"></text></g><g><title>alloc::alloc::alloc (425 samples, 0.17%)</title><rect x="23.8928%" y="229" width="0.1689%" height="15" fill="rgb(229,83,13)" fg:x="60107" fg:w="425"/><text x="24.1428%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (481 samples, 0.19%)</title><rect x="23.8776%" y="293" width="0.1912%" height="15" fill="rgb(241,91,40)" fg:x="60069" fg:w="481"/><text x="24.1276%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,488 samples, 0.99%)</title><rect x="23.1232%" y="341" width="0.9890%" height="15" fill="rgb(225,3,45)" fg:x="58171" fg:w="2488"/><text x="23.3732%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (655 samples, 0.26%)</title><rect x="23.8518%" y="325" width="0.2604%" height="15" fill="rgb(244,223,14)" fg:x="60004" fg:w="655"/><text x="24.1018%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (655 samples, 0.26%)</title><rect x="23.8518%" y="309" width="0.2604%" height="15" fill="rgb(224,124,37)" fg:x="60004" fg:w="655"/><text x="24.1018%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (109 samples, 0.04%)</title><rect x="24.0688%" y="293" width="0.0433%" height="15" fill="rgb(251,171,30)" fg:x="60550" fg:w="109"/><text x="24.3188%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (29 samples, 0.01%)</title><rect x="24.1006%" y="277" width="0.0115%" height="15" fill="rgb(236,46,54)" fg:x="60630" fg:w="29"/><text x="24.3506%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,603 samples, 1.03%)</title><rect x="23.0870%" y="389" width="1.0347%" height="15" fill="rgb(245,213,5)" fg:x="58080" fg:w="2603"/><text x="23.3370%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,577 samples, 1.02%)</title><rect x="23.0973%" y="373" width="1.0244%" height="15" fill="rgb(230,144,27)" fg:x="58106" fg:w="2577"/><text x="23.3473%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,550 samples, 1.01%)</title><rect x="23.1081%" y="357" width="1.0136%" height="15" fill="rgb(220,86,6)" fg:x="58133" fg:w="2550"/><text x="23.3581%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 0.11%)</title><rect x="24.1289%" y="373" width="0.1105%" height="15" fill="rgb(240,20,13)" fg:x="60701" fg:w="278"/><text x="24.3789%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (277 samples, 0.11%)</title><rect x="24.1293%" y="357" width="0.1101%" height="15" fill="rgb(217,89,34)" fg:x="60702" fg:w="277"/><text x="24.3793%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (201 samples, 0.08%)</title><rect x="24.2398%" y="373" width="0.0799%" height="15" fill="rgb(229,13,5)" fg:x="60980" fg:w="201"/><text x="24.4898%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (94 samples, 0.04%)</title><rect x="24.3197%" y="373" width="0.0374%" height="15" fill="rgb(244,67,35)" fg:x="61181" fg:w="94"/><text x="24.5697%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (94 samples, 0.04%)</title><rect x="24.3197%" y="357" width="0.0374%" height="15" fill="rgb(221,40,2)" fg:x="61181" fg:w="94"/><text x="24.5697%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (94 samples, 0.04%)</title><rect x="24.3197%" y="341" width="0.0374%" height="15" fill="rgb(237,157,21)" fg:x="61181" fg:w="94"/><text x="24.5697%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (94 samples, 0.04%)</title><rect x="24.3197%" y="325" width="0.0374%" height="15" fill="rgb(222,94,11)" fg:x="61181" fg:w="94"/><text x="24.5697%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u16&gt;::eq (94 samples, 0.04%)</title><rect x="24.3197%" y="309" width="0.0374%" height="15" fill="rgb(249,113,6)" fg:x="61181" fg:w="94"/><text x="24.5697%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (100 samples, 0.04%)</title><rect x="24.3674%" y="357" width="0.0398%" height="15" fill="rgb(238,137,36)" fg:x="61301" fg:w="100"/><text x="24.6174%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (74 samples, 0.03%)</title><rect x="24.3777%" y="341" width="0.0294%" height="15" fill="rgb(210,102,26)" fg:x="61327" fg:w="74"/><text x="24.6277%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (272 samples, 0.11%)</title><rect x="24.3570%" y="373" width="0.1081%" height="15" fill="rgb(218,30,30)" fg:x="61275" fg:w="272"/><text x="24.6070%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (146 samples, 0.06%)</title><rect x="24.4071%" y="357" width="0.0580%" height="15" fill="rgb(214,67,26)" fg:x="61401" fg:w="146"/><text x="24.6571%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (146 samples, 0.06%)</title><rect x="24.4071%" y="341" width="0.0580%" height="15" fill="rgb(251,9,53)" fg:x="61401" fg:w="146"/><text x="24.6571%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (174 samples, 0.07%)</title><rect x="24.4652%" y="357" width="0.0692%" height="15" fill="rgb(228,204,25)" fg:x="61547" fg:w="174"/><text x="24.7152%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (36 samples, 0.01%)</title><rect x="24.5200%" y="341" width="0.0143%" height="15" fill="rgb(207,153,8)" fg:x="61685" fg:w="36"/><text x="24.7700%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (32 samples, 0.01%)</title><rect x="24.5367%" y="357" width="0.0127%" height="15" fill="rgb(242,9,16)" fg:x="61727" fg:w="32"/><text x="24.7867%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (32 samples, 0.01%)</title><rect x="24.5367%" y="341" width="0.0127%" height="15" fill="rgb(217,211,10)" fg:x="61727" fg:w="32"/><text x="24.7867%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (216 samples, 0.09%)</title><rect x="24.4652%" y="373" width="0.0859%" height="15" fill="rgb(219,228,52)" fg:x="61547" fg:w="216"/><text x="24.7152%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (44 samples, 0.02%)</title><rect x="24.5510%" y="373" width="0.0175%" height="15" fill="rgb(231,92,29)" fg:x="61763" fg:w="44"/><text x="24.8010%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (33 samples, 0.01%)</title><rect x="24.5709%" y="373" width="0.0131%" height="15" fill="rgb(232,8,23)" fg:x="61813" fg:w="33"/><text x="24.8209%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (232 samples, 0.09%)</title><rect x="24.5840%" y="373" width="0.0922%" height="15" fill="rgb(216,211,34)" fg:x="61846" fg:w="232"/><text x="24.8340%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (232 samples, 0.09%)</title><rect x="24.5840%" y="357" width="0.0922%" height="15" fill="rgb(236,151,0)" fg:x="61846" fg:w="232"/><text x="24.8340%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (232 samples, 0.09%)</title><rect x="24.5840%" y="341" width="0.0922%" height="15" fill="rgb(209,168,3)" fg:x="61846" fg:w="232"/><text x="24.8340%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (270 samples, 0.11%)</title><rect x="24.6762%" y="373" width="0.1073%" height="15" fill="rgb(208,129,28)" fg:x="62078" fg:w="270"/><text x="24.9262%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (270 samples, 0.11%)</title><rect x="24.6762%" y="357" width="0.1073%" height="15" fill="rgb(229,78,22)" fg:x="62078" fg:w="270"/><text x="24.9262%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4,358 samples, 1.73%)</title><rect x="23.0691%" y="405" width="1.7323%" height="15" fill="rgb(228,187,13)" fg:x="58035" fg:w="4358"/><text x="23.3191%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,710 samples, 0.68%)</title><rect x="24.1217%" y="389" width="0.6797%" height="15" fill="rgb(240,119,24)" fg:x="60683" fg:w="1710"/><text x="24.3717%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (45 samples, 0.02%)</title><rect x="24.7836%" y="373" width="0.0179%" height="15" fill="rgb(209,194,42)" fg:x="62348" fg:w="45"/><text x="25.0336%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (45 samples, 0.02%)</title><rect x="24.7836%" y="357" width="0.0179%" height="15" fill="rgb(247,200,46)" fg:x="62348" fg:w="45"/><text x="25.0336%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (45 samples, 0.02%)</title><rect x="24.7836%" y="341" width="0.0179%" height="15" fill="rgb(218,76,16)" fg:x="62348" fg:w="45"/><text x="25.0336%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (41 samples, 0.02%)</title><rect x="24.8066%" y="389" width="0.0163%" height="15" fill="rgb(225,21,48)" fg:x="62406" fg:w="41"/><text x="25.0566%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (41 samples, 0.02%)</title><rect x="24.8066%" y="373" width="0.0163%" height="15" fill="rgb(239,223,50)" fg:x="62406" fg:w="41"/><text x="25.0566%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (41 samples, 0.02%)</title><rect x="24.8066%" y="357" width="0.0163%" height="15" fill="rgb(244,45,21)" fg:x="62406" fg:w="41"/><text x="25.0566%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (41 samples, 0.02%)</title><rect x="24.8066%" y="341" width="0.0163%" height="15" fill="rgb(232,33,43)" fg:x="62406" fg:w="41"/><text x="25.0566%" y="351.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (44 samples, 0.02%)</title><rect x="24.8825%" y="373" width="0.0175%" height="15" fill="rgb(209,8,3)" fg:x="62597" fg:w="44"/><text x="25.1325%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (62 samples, 0.02%)</title><rect x="24.9000%" y="373" width="0.0246%" height="15" fill="rgb(214,25,53)" fg:x="62641" fg:w="62"/><text x="25.1500%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (62 samples, 0.02%)</title><rect x="24.9000%" y="357" width="0.0246%" height="15" fill="rgb(254,186,54)" fg:x="62641" fg:w="62"/><text x="25.1500%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,854 samples, 1.93%)</title><rect x="23.0004%" y="421" width="1.9295%" height="15" fill="rgb(208,174,49)" fg:x="57862" fg:w="4854"/><text x="23.2504%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (323 samples, 0.13%)</title><rect x="24.8014%" y="405" width="0.1284%" height="15" fill="rgb(233,191,51)" fg:x="62393" fg:w="323"/><text x="25.0514%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (269 samples, 0.11%)</title><rect x="24.8229%" y="389" width="0.1069%" height="15" fill="rgb(222,134,10)" fg:x="62447" fg:w="269"/><text x="25.0729%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (4,990 samples, 1.98%)</title><rect x="22.9471%" y="453" width="1.9835%" height="15" fill="rgb(230,226,20)" fg:x="57728" fg:w="4990"/><text x="23.1971%" y="463.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (4,990 samples, 1.98%)</title><rect x="22.9471%" y="437" width="1.9835%" height="15" fill="rgb(251,111,25)" fg:x="57728" fg:w="4990"/><text x="23.1971%" y="447.50">h..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::clause_lbd (5,464 samples, 2.17%)</title><rect x="22.7591%" y="469" width="2.1720%" height="15" fill="rgb(224,40,46)" fg:x="57255" fg:w="5464"/><text x="23.0091%" y="479.50">p..</text></g><g><title>__irqentry_text_end (42 samples, 0.02%)</title><rect x="24.9879%" y="373" width="0.0167%" height="15" fill="rgb(236,108,47)" fg:x="62862" fg:w="42"/><text x="25.2379%" y="383.50"></text></g><g><title>charge_memcg (67 samples, 0.03%)</title><rect x="25.0555%" y="245" width="0.0266%" height="15" fill="rgb(234,93,0)" fg:x="63032" fg:w="67"/><text x="25.3055%" y="255.50"></text></g><g><title>try_charge_memcg (28 samples, 0.01%)</title><rect x="25.0710%" y="229" width="0.0111%" height="15" fill="rgb(224,213,32)" fg:x="63071" fg:w="28"/><text x="25.3210%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (57 samples, 0.02%)</title><rect x="25.0821%" y="245" width="0.0227%" height="15" fill="rgb(251,11,48)" fg:x="63099" fg:w="57"/><text x="25.3321%" y="255.50"></text></g><g><title>__mem_cgroup_charge (137 samples, 0.05%)</title><rect x="25.0523%" y="261" width="0.0545%" height="15" fill="rgb(236,173,5)" fg:x="63024" fg:w="137"/><text x="25.3023%" y="271.50"></text></g><g><title>page_add_new_anon_rmap (29 samples, 0.01%)</title><rect x="25.1167%" y="261" width="0.0115%" height="15" fill="rgb(230,95,12)" fg:x="63186" fg:w="29"/><text x="25.3667%" y="271.50"></text></g><g><title>clear_page_erms (26 samples, 0.01%)</title><rect x="25.1397%" y="197" width="0.0103%" height="15" fill="rgb(232,209,1)" fg:x="63244" fg:w="26"/><text x="25.3897%" y="207.50"></text></g><g><title>__alloc_pages (85 samples, 0.03%)</title><rect x="25.1306%" y="229" width="0.0338%" height="15" fill="rgb(232,6,1)" fg:x="63221" fg:w="85"/><text x="25.3806%" y="239.50"></text></g><g><title>get_page_from_freelist (68 samples, 0.03%)</title><rect x="25.1373%" y="213" width="0.0270%" height="15" fill="rgb(210,224,50)" fg:x="63238" fg:w="68"/><text x="25.3873%" y="223.50"></text></g><g><title>rmqueue (36 samples, 0.01%)</title><rect x="25.1501%" y="197" width="0.0143%" height="15" fill="rgb(228,127,35)" fg:x="63270" fg:w="36"/><text x="25.4001%" y="207.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (35 samples, 0.01%)</title><rect x="25.1505%" y="181" width="0.0139%" height="15" fill="rgb(245,102,45)" fg:x="63271" fg:w="35"/><text x="25.4005%" y="191.50"></text></g><g><title>__folio_alloc (89 samples, 0.04%)</title><rect x="25.1302%" y="245" width="0.0354%" height="15" fill="rgb(214,1,49)" fg:x="63220" fg:w="89"/><text x="25.3802%" y="255.50"></text></g><g><title>do_anonymous_page (309 samples, 0.12%)</title><rect x="25.0435%" y="277" width="0.1228%" height="15" fill="rgb(226,163,40)" fg:x="63002" fg:w="309"/><text x="25.2935%" y="287.50"></text></g><g><title>vma_alloc_folio (95 samples, 0.04%)</title><rect x="25.1286%" y="261" width="0.0378%" height="15" fill="rgb(239,212,28)" fg:x="63216" fg:w="95"/><text x="25.3786%" y="271.50"></text></g><g><title>handle_pte_fault (349 samples, 0.14%)</title><rect x="25.0284%" y="293" width="0.1387%" height="15" fill="rgb(220,20,13)" fg:x="62964" fg:w="349"/><text x="25.2784%" y="303.50"></text></g><g><title>__handle_mm_fault (385 samples, 0.15%)</title><rect x="25.0145%" y="309" width="0.1530%" height="15" fill="rgb(210,164,35)" fg:x="62929" fg:w="385"/><text x="25.2645%" y="319.50"></text></g><g><title>__count_memcg_events (39 samples, 0.02%)</title><rect x="25.1675%" y="293" width="0.0155%" height="15" fill="rgb(248,109,41)" fg:x="63314" fg:w="39"/><text x="25.4175%" y="303.50"></text></g><g><title>count_memcg_events.constprop.0 (40 samples, 0.02%)</title><rect x="25.1675%" y="309" width="0.0159%" height="15" fill="rgb(238,23,50)" fg:x="63314" fg:w="40"/><text x="25.4175%" y="319.50"></text></g><g><title>handle_mm_fault (442 samples, 0.18%)</title><rect x="25.0125%" y="325" width="0.1757%" height="15" fill="rgb(211,48,49)" fg:x="62924" fg:w="442"/><text x="25.2625%" y="335.50"></text></g><g><title>do_user_addr_fault (465 samples, 0.18%)</title><rect x="25.0085%" y="341" width="0.1848%" height="15" fill="rgb(223,36,21)" fg:x="62914" fg:w="465"/><text x="25.2585%" y="351.50"></text></g><g><title>irqentry_exit (35 samples, 0.01%)</title><rect x="25.1942%" y="341" width="0.0139%" height="15" fill="rgb(207,123,46)" fg:x="63381" fg:w="35"/><text x="25.4442%" y="351.50"></text></g><g><title>irqentry_exit_to_user_mode (35 samples, 0.01%)</title><rect x="25.1942%" y="325" width="0.0139%" height="15" fill="rgb(240,218,32)" fg:x="63381" fg:w="35"/><text x="25.4442%" y="335.50"></text></g><g><title>exc_page_fault (515 samples, 0.20%)</title><rect x="25.0046%" y="357" width="0.2047%" height="15" fill="rgb(252,5,43)" fg:x="62904" fg:w="515"/><text x="25.2546%" y="367.50"></text></g><g><title>asm_exc_page_fault (516 samples, 0.21%)</title><rect x="25.0046%" y="373" width="0.2051%" height="15" fill="rgb(252,84,19)" fg:x="62904" fg:w="516"/><text x="25.2546%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (669 samples, 0.27%)</title><rect x="24.9549%" y="405" width="0.2659%" height="15" fill="rgb(243,152,39)" fg:x="62779" fg:w="669"/><text x="25.2049%" y="415.50"></text></g><g><title>core::ptr::write (657 samples, 0.26%)</title><rect x="24.9597%" y="389" width="0.2612%" height="15" fill="rgb(234,160,15)" fg:x="62791" fg:w="657"/><text x="25.2097%" y="399.50"></text></g><g><title>do_mprotect_pkey (27 samples, 0.01%)</title><rect x="25.4092%" y="37" width="0.0107%" height="15" fill="rgb(237,34,20)" fg:x="63922" fg:w="27"/><text x="25.6592%" y="47.50"></text></g><g><title>__x64_sys_mprotect (28 samples, 0.01%)</title><rect x="25.4092%" y="53" width="0.0111%" height="15" fill="rgb(229,97,13)" fg:x="63922" fg:w="28"/><text x="25.6592%" y="63.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 0.01%)</title><rect x="25.4088%" y="85" width="0.0127%" height="15" fill="rgb(234,71,50)" fg:x="63921" fg:w="32"/><text x="25.6588%" y="95.50"></text></g><g><title>do_syscall_64 (31 samples, 0.01%)</title><rect x="25.4092%" y="69" width="0.0123%" height="15" fill="rgb(253,155,4)" fg:x="63922" fg:w="31"/><text x="25.6592%" y="79.50"></text></g><g><title>_int_malloc (239 samples, 0.10%)</title><rect x="25.3273%" y="149" width="0.0950%" height="15" fill="rgb(222,185,37)" fg:x="63716" fg:w="239"/><text x="25.5773%" y="159.50"></text></g><g><title>sysmalloc (56 samples, 0.02%)</title><rect x="25.4001%" y="133" width="0.0223%" height="15" fill="rgb(251,177,13)" fg:x="63899" fg:w="56"/><text x="25.6501%" y="143.50"></text></g><g><title>grow_heap (35 samples, 0.01%)</title><rect x="25.4084%" y="117" width="0.0139%" height="15" fill="rgb(250,179,40)" fg:x="63920" fg:w="35"/><text x="25.6584%" y="127.50"></text></g><g><title>__GI___mprotect (35 samples, 0.01%)</title><rect x="25.4084%" y="101" width="0.0139%" height="15" fill="rgb(242,44,2)" fg:x="63920" fg:w="35"/><text x="25.6584%" y="111.50"></text></g><g><title>__rdl_alloc (531 samples, 0.21%)</title><rect x="25.2228%" y="197" width="0.2111%" height="15" fill="rgb(216,177,13)" fg:x="63453" fg:w="531"/><text x="25.4728%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (531 samples, 0.21%)</title><rect x="25.2228%" y="181" width="0.2111%" height="15" fill="rgb(216,106,43)" fg:x="63453" fg:w="531"/><text x="25.4728%" y="191.50"></text></g><g><title>__GI___libc_malloc (531 samples, 0.21%)</title><rect x="25.2228%" y="165" width="0.2111%" height="15" fill="rgb(216,183,2)" fg:x="63453" fg:w="531"/><text x="25.4728%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (534 samples, 0.21%)</title><rect x="25.2224%" y="261" width="0.2123%" height="15" fill="rgb(249,75,3)" fg:x="63452" fg:w="534"/><text x="25.4724%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (533 samples, 0.21%)</title><rect x="25.2228%" y="245" width="0.2119%" height="15" fill="rgb(219,67,39)" fg:x="63453" fg:w="533"/><text x="25.4728%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (533 samples, 0.21%)</title><rect x="25.2228%" y="229" width="0.2119%" height="15" fill="rgb(253,228,2)" fg:x="63453" fg:w="533"/><text x="25.4728%" y="239.50"></text></g><g><title>alloc::alloc::alloc (533 samples, 0.21%)</title><rect x="25.2228%" y="213" width="0.2119%" height="15" fill="rgb(235,138,27)" fg:x="63453" fg:w="533"/><text x="25.4728%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (535 samples, 0.21%)</title><rect x="25.2224%" y="293" width="0.2127%" height="15" fill="rgb(236,97,51)" fg:x="63452" fg:w="535"/><text x="25.4724%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (535 samples, 0.21%)</title><rect x="25.2224%" y="277" width="0.2127%" height="15" fill="rgb(240,80,30)" fg:x="63452" fg:w="535"/><text x="25.4724%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.02%)</title><rect x="25.4351%" y="277" width="0.0191%" height="15" fill="rgb(230,178,19)" fg:x="63987" fg:w="48"/><text x="25.6851%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (47 samples, 0.02%)</title><rect x="25.4355%" y="261" width="0.0187%" height="15" fill="rgb(210,190,27)" fg:x="63988" fg:w="47"/><text x="25.6855%" y="271.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause::{{closure}} (589 samples, 0.23%)</title><rect x="25.2208%" y="389" width="0.2341%" height="15" fill="rgb(222,107,31)" fg:x="63448" fg:w="589"/><text x="25.4708%" y="399.50"></text></g><g><title>project1::solver::clause::Clause::with_key (585 samples, 0.23%)</title><rect x="25.2224%" y="373" width="0.2325%" height="15" fill="rgb(216,127,34)" fg:x="63452" fg:w="585"/><text x="25.4724%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (585 samples, 0.23%)</title><rect x="25.2224%" y="357" width="0.2325%" height="15" fill="rgb(234,116,52)" fg:x="63452" fg:w="585"/><text x="25.4724%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (585 samples, 0.23%)</title><rect x="25.2224%" y="341" width="0.2325%" height="15" fill="rgb(222,124,15)" fg:x="63452" fg:w="585"/><text x="25.4724%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (585 samples, 0.23%)</title><rect x="25.2224%" y="325" width="0.2325%" height="15" fill="rgb(231,179,28)" fg:x="63452" fg:w="585"/><text x="25.4724%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (585 samples, 0.23%)</title><rect x="25.2224%" y="309" width="0.2325%" height="15" fill="rgb(226,93,45)" fg:x="63452" fg:w="585"/><text x="25.4724%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (50 samples, 0.02%)</title><rect x="25.4351%" y="293" width="0.0199%" height="15" fill="rgb(215,8,51)" fg:x="63987" fg:w="50"/><text x="25.6851%" y="303.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::create_clause (1,321 samples, 0.53%)</title><rect x="24.9310%" y="469" width="0.5251%" height="15" fill="rgb(223,106,5)" fg:x="62719" fg:w="1321"/><text x="25.1810%" y="479.50"></text></g><g><title>project1::solver::clause::ClauseAllocator::create_clause (1,321 samples, 0.53%)</title><rect x="24.9310%" y="453" width="0.5251%" height="15" fill="rgb(250,191,5)" fg:x="62719" fg:w="1321"/><text x="25.1810%" y="463.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key (1,321 samples, 0.53%)</title><rect x="24.9310%" y="437" width="0.5251%" height="15" fill="rgb(242,132,44)" fg:x="62719" fg:w="1321"/><text x="25.1810%" y="447.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::try_insert_with_key (1,280 samples, 0.51%)</title><rect x="24.9473%" y="421" width="0.5088%" height="15" fill="rgb(251,152,29)" fg:x="62760" fg:w="1280"/><text x="25.1973%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::insert_with_key::{{closure}} (592 samples, 0.24%)</title><rect x="25.2208%" y="405" width="0.2353%" height="15" fill="rgb(218,179,5)" fg:x="63448" fg:w="592"/><text x="25.4708%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (75 samples, 0.03%)</title><rect x="25.4867%" y="437" width="0.0298%" height="15" fill="rgb(227,67,19)" fg:x="64117" fg:w="75"/><text x="25.7367%" y="447.50"></text></g><g><title>core::ptr::read (67 samples, 0.03%)</title><rect x="25.4899%" y="421" width="0.0266%" height="15" fill="rgb(233,119,31)" fg:x="64125" fg:w="67"/><text x="25.7399%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (87 samples, 0.03%)</title><rect x="25.5166%" y="325" width="0.0346%" height="15" fill="rgb(241,120,22)" fg:x="64192" fg:w="87"/><text x="25.7666%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (87 samples, 0.03%)</title><rect x="25.5166%" y="309" width="0.0346%" height="15" fill="rgb(224,102,30)" fg:x="64192" fg:w="87"/><text x="25.7666%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (87 samples, 0.03%)</title><rect x="25.5166%" y="293" width="0.0346%" height="15" fill="rgb(210,164,37)" fg:x="64192" fg:w="87"/><text x="25.7666%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (58 samples, 0.02%)</title><rect x="25.5281%" y="277" width="0.0231%" height="15" fill="rgb(226,191,16)" fg:x="64221" fg:w="58"/><text x="25.7781%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (113 samples, 0.04%)</title><rect x="25.5166%" y="357" width="0.0449%" height="15" fill="rgb(214,40,45)" fg:x="64192" fg:w="113"/><text x="25.7666%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (113 samples, 0.04%)</title><rect x="25.5166%" y="341" width="0.0449%" height="15" fill="rgb(244,29,26)" fg:x="64192" fg:w="113"/><text x="25.7666%" y="351.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (44 samples, 0.02%)</title><rect x="25.5690%" y="293" width="0.0175%" height="15" fill="rgb(216,16,5)" fg:x="64324" fg:w="44"/><text x="25.8190%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (44 samples, 0.02%)</title><rect x="25.5690%" y="277" width="0.0175%" height="15" fill="rgb(249,76,35)" fg:x="64324" fg:w="44"/><text x="25.8190%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (44 samples, 0.02%)</title><rect x="25.5690%" y="261" width="0.0175%" height="15" fill="rgb(207,11,44)" fg:x="64324" fg:w="44"/><text x="25.8190%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (44 samples, 0.02%)</title><rect x="25.5690%" y="245" width="0.0175%" height="15" fill="rgb(228,190,49)" fg:x="64324" fg:w="44"/><text x="25.8190%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (53 samples, 0.02%)</title><rect x="25.5690%" y="309" width="0.0211%" height="15" fill="rgb(214,173,12)" fg:x="64324" fg:w="53"/><text x="25.8190%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (117 samples, 0.05%)</title><rect x="25.5615%" y="341" width="0.0465%" height="15" fill="rgb(218,26,35)" fg:x="64305" fg:w="117"/><text x="25.8115%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (117 samples, 0.05%)</title><rect x="25.5615%" y="325" width="0.0465%" height="15" fill="rgb(220,200,19)" fg:x="64305" fg:w="117"/><text x="25.8115%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (85 samples, 0.03%)</title><rect x="25.6084%" y="309" width="0.0338%" height="15" fill="rgb(239,95,49)" fg:x="64423" fg:w="85"/><text x="25.8584%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (33 samples, 0.01%)</title><rect x="25.6290%" y="293" width="0.0131%" height="15" fill="rgb(235,85,53)" fg:x="64475" fg:w="33"/><text x="25.8790%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (33 samples, 0.01%)</title><rect x="25.6290%" y="277" width="0.0131%" height="15" fill="rgb(233,133,31)" fg:x="64475" fg:w="33"/><text x="25.8790%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (317 samples, 0.13%)</title><rect x="25.5166%" y="437" width="0.1260%" height="15" fill="rgb(218,25,20)" fg:x="64192" fg:w="317"/><text x="25.7666%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (317 samples, 0.13%)</title><rect x="25.5166%" y="421" width="0.1260%" height="15" fill="rgb(252,210,38)" fg:x="64192" fg:w="317"/><text x="25.7666%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (317 samples, 0.13%)</title><rect x="25.5166%" y="405" width="0.1260%" height="15" fill="rgb(242,134,21)" fg:x="64192" fg:w="317"/><text x="25.7666%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (317 samples, 0.13%)</title><rect x="25.5166%" y="389" width="0.1260%" height="15" fill="rgb(213,28,48)" fg:x="64192" fg:w="317"/><text x="25.7666%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (317 samples, 0.13%)</title><rect x="25.5166%" y="373" width="0.1260%" height="15" fill="rgb(250,196,2)" fg:x="64192" fg:w="317"/><text x="25.7666%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (204 samples, 0.08%)</title><rect x="25.5615%" y="357" width="0.0811%" height="15" fill="rgb(227,5,17)" fg:x="64305" fg:w="204"/><text x="25.8115%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (87 samples, 0.03%)</title><rect x="25.6080%" y="341" width="0.0346%" height="15" fill="rgb(221,226,24)" fg:x="64422" fg:w="87"/><text x="25.8580%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (87 samples, 0.03%)</title><rect x="25.6080%" y="325" width="0.0346%" height="15" fill="rgb(211,5,48)" fg:x="64422" fg:w="87"/><text x="25.8580%" y="335.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (148 samples, 0.06%)</title><rect x="25.6509%" y="405" width="0.0588%" height="15" fill="rgb(219,150,6)" fg:x="64530" fg:w="148"/><text x="25.9009%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="25.7264%" y="261" width="0.0342%" height="15" fill="rgb(251,46,16)" fg:x="64720" fg:w="86"/><text x="25.9764%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="25.7264%" y="245" width="0.0342%" height="15" fill="rgb(220,204,40)" fg:x="64720" fg:w="86"/><text x="25.9764%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (86 samples, 0.03%)</title><rect x="25.7264%" y="229" width="0.0342%" height="15" fill="rgb(211,85,2)" fg:x="64720" fg:w="86"/><text x="25.9764%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (57 samples, 0.02%)</title><rect x="25.7380%" y="213" width="0.0227%" height="15" fill="rgb(229,17,7)" fg:x="64749" fg:w="57"/><text x="25.9880%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (132 samples, 0.05%)</title><rect x="25.7264%" y="293" width="0.0525%" height="15" fill="rgb(239,72,28)" fg:x="64720" fg:w="132"/><text x="25.9764%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (132 samples, 0.05%)</title><rect x="25.7264%" y="277" width="0.0525%" height="15" fill="rgb(230,47,54)" fg:x="64720" fg:w="132"/><text x="25.9764%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (35 samples, 0.01%)</title><rect x="25.7650%" y="261" width="0.0139%" height="15" fill="rgb(214,50,8)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (35 samples, 0.01%)</title><rect x="25.7650%" y="245" width="0.0139%" height="15" fill="rgb(216,198,43)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (35 samples, 0.01%)</title><rect x="25.7650%" y="229" width="0.0139%" height="15" fill="rgb(234,20,35)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (35 samples, 0.01%)</title><rect x="25.7650%" y="213" width="0.0139%" height="15" fill="rgb(254,45,19)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.01%)</title><rect x="25.7650%" y="197" width="0.0139%" height="15" fill="rgb(219,14,44)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35 samples, 0.01%)</title><rect x="25.7650%" y="181" width="0.0139%" height="15" fill="rgb(217,220,26)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.01%)</title><rect x="25.7650%" y="165" width="0.0139%" height="15" fill="rgb(213,158,28)" fg:x="64817" fg:w="35"/><text x="26.0150%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (40 samples, 0.02%)</title><rect x="25.7861%" y="229" width="0.0159%" height="15" fill="rgb(252,51,52)" fg:x="64870" fg:w="40"/><text x="26.0361%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (40 samples, 0.02%)</title><rect x="25.7861%" y="213" width="0.0159%" height="15" fill="rgb(246,89,16)" fg:x="64870" fg:w="40"/><text x="26.0361%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (40 samples, 0.02%)</title><rect x="25.7861%" y="197" width="0.0159%" height="15" fill="rgb(216,158,49)" fg:x="64870" fg:w="40"/><text x="26.0361%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (40 samples, 0.02%)</title><rect x="25.7861%" y="181" width="0.0159%" height="15" fill="rgb(236,107,19)" fg:x="64870" fg:w="40"/><text x="26.0361%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (52 samples, 0.02%)</title><rect x="25.7861%" y="245" width="0.0207%" height="15" fill="rgb(228,185,30)" fg:x="64870" fg:w="52"/><text x="26.0361%" y="255.50"></text></g><g><title>core::mem::drop (244 samples, 0.10%)</title><rect x="25.7189%" y="389" width="0.0970%" height="15" fill="rgb(246,134,8)" fg:x="64701" fg:w="244"/><text x="25.9689%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (244 samples, 0.10%)</title><rect x="25.7189%" y="373" width="0.0970%" height="15" fill="rgb(214,143,50)" fg:x="64701" fg:w="244"/><text x="25.9689%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (244 samples, 0.10%)</title><rect x="25.7189%" y="357" width="0.0970%" height="15" fill="rgb(228,75,8)" fg:x="64701" fg:w="244"/><text x="25.9689%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (225 samples, 0.09%)</title><rect x="25.7264%" y="341" width="0.0894%" height="15" fill="rgb(207,175,4)" fg:x="64720" fg:w="225"/><text x="25.9764%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (225 samples, 0.09%)</title><rect x="25.7264%" y="325" width="0.0894%" height="15" fill="rgb(205,108,24)" fg:x="64720" fg:w="225"/><text x="25.9764%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (225 samples, 0.09%)</title><rect x="25.7264%" y="309" width="0.0894%" height="15" fill="rgb(244,120,49)" fg:x="64720" fg:w="225"/><text x="25.9764%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (93 samples, 0.04%)</title><rect x="25.7789%" y="293" width="0.0370%" height="15" fill="rgb(223,47,38)" fg:x="64852" fg:w="93"/><text x="26.0289%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (93 samples, 0.04%)</title><rect x="25.7789%" y="277" width="0.0370%" height="15" fill="rgb(229,179,11)" fg:x="64852" fg:w="93"/><text x="26.0289%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (93 samples, 0.04%)</title><rect x="25.7789%" y="261" width="0.0370%" height="15" fill="rgb(231,122,1)" fg:x="64852" fg:w="93"/><text x="26.0289%" y="271.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (27 samples, 0.01%)</title><rect x="25.8159%" y="389" width="0.0107%" height="15" fill="rgb(245,119,9)" fg:x="64945" fg:w="27"/><text x="26.0659%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (103 samples, 0.04%)</title><rect x="25.8417%" y="341" width="0.0409%" height="15" fill="rgb(241,163,25)" fg:x="65010" fg:w="103"/><text x="26.0917%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (89 samples, 0.04%)</title><rect x="25.8827%" y="261" width="0.0354%" height="15" fill="rgb(217,214,3)" fg:x="65113" fg:w="89"/><text x="26.1327%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (89 samples, 0.04%)</title><rect x="25.8827%" y="245" width="0.0354%" height="15" fill="rgb(240,86,28)" fg:x="65113" fg:w="89"/><text x="26.1327%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (89 samples, 0.04%)</title><rect x="25.8827%" y="229" width="0.0354%" height="15" fill="rgb(215,47,9)" fg:x="65113" fg:w="89"/><text x="26.1327%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (59 samples, 0.02%)</title><rect x="25.8946%" y="213" width="0.0235%" height="15" fill="rgb(252,25,45)" fg:x="65143" fg:w="59"/><text x="26.1446%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (124 samples, 0.05%)</title><rect x="25.8827%" y="293" width="0.0493%" height="15" fill="rgb(251,164,9)" fg:x="65113" fg:w="124"/><text x="26.1327%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (124 samples, 0.05%)</title><rect x="25.8827%" y="277" width="0.0493%" height="15" fill="rgb(233,194,0)" fg:x="65113" fg:w="124"/><text x="26.1327%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (31 samples, 0.01%)</title><rect x="25.9196%" y="261" width="0.0123%" height="15" fill="rgb(249,111,24)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (31 samples, 0.01%)</title><rect x="25.9196%" y="245" width="0.0123%" height="15" fill="rgb(250,223,3)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (31 samples, 0.01%)</title><rect x="25.9196%" y="229" width="0.0123%" height="15" fill="rgb(236,178,37)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (31 samples, 0.01%)</title><rect x="25.9196%" y="213" width="0.0123%" height="15" fill="rgb(241,158,50)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.01%)</title><rect x="25.9196%" y="197" width="0.0123%" height="15" fill="rgb(213,121,41)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31 samples, 0.01%)</title><rect x="25.9196%" y="181" width="0.0123%" height="15" fill="rgb(240,92,3)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.01%)</title><rect x="25.9196%" y="165" width="0.0123%" height="15" fill="rgb(205,123,3)" fg:x="65206" fg:w="31"/><text x="26.1696%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (43 samples, 0.02%)</title><rect x="25.9319%" y="277" width="0.0171%" height="15" fill="rgb(205,97,47)" fg:x="65237" fg:w="43"/><text x="26.1819%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43 samples, 0.02%)</title><rect x="25.9319%" y="261" width="0.0171%" height="15" fill="rgb(247,152,14)" fg:x="65237" fg:w="43"/><text x="26.1819%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;mut_binary_heap::binary_heap::Hole&lt;i64,ordered_float::OrderedFloat&lt;f64&gt;&gt;&gt; (281 samples, 0.11%)</title><rect x="25.8413%" y="373" width="0.1117%" height="15" fill="rgb(248,195,53)" fg:x="65009" fg:w="281"/><text x="26.0913%" y="383.50"></text></g><g><title>&lt;mut_binary_heap::binary_heap::Hole&lt;K,T&gt; as core::ops::drop::Drop&gt;::drop (281 samples, 0.11%)</title><rect x="25.8413%" y="357" width="0.1117%" height="15" fill="rgb(226,201,16)" fg:x="65009" fg:w="281"/><text x="26.0913%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (177 samples, 0.07%)</title><rect x="25.8827%" y="341" width="0.0704%" height="15" fill="rgb(205,98,0)" fg:x="65113" fg:w="177"/><text x="26.1327%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (177 samples, 0.07%)</title><rect x="25.8827%" y="325" width="0.0704%" height="15" fill="rgb(214,191,48)" fg:x="65113" fg:w="177"/><text x="26.1327%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (177 samples, 0.07%)</title><rect x="25.8827%" y="309" width="0.0704%" height="15" fill="rgb(237,112,39)" fg:x="65113" fg:w="177"/><text x="26.1327%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (53 samples, 0.02%)</title><rect x="25.9319%" y="293" width="0.0211%" height="15" fill="rgb(247,203,27)" fg:x="65237" fg:w="53"/><text x="26.1819%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_up (338 samples, 0.13%)</title><rect x="25.8266%" y="389" width="0.1344%" height="15" fill="rgb(235,124,28)" fg:x="64972" fg:w="338"/><text x="26.0766%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32 samples, 0.01%)</title><rect x="26.0258%" y="229" width="0.0127%" height="15" fill="rgb(208,207,46)" fg:x="65473" fg:w="32"/><text x="26.2758%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31 samples, 0.01%)</title><rect x="26.0385%" y="229" width="0.0123%" height="15" fill="rgb(234,176,4)" fg:x="65505" fg:w="31"/><text x="26.2885%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (102 samples, 0.04%)</title><rect x="26.0142%" y="245" width="0.0405%" height="15" fill="rgb(230,133,28)" fg:x="65444" fg:w="102"/><text x="26.2642%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (137 samples, 0.05%)</title><rect x="26.0917%" y="229" width="0.0545%" height="15" fill="rgb(211,137,40)" fg:x="65639" fg:w="137"/><text x="26.3417%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (485 samples, 0.19%)</title><rect x="25.9876%" y="293" width="0.1928%" height="15" fill="rgb(254,35,13)" fg:x="65377" fg:w="485"/><text x="26.2376%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (485 samples, 0.19%)</title><rect x="25.9876%" y="277" width="0.1928%" height="15" fill="rgb(225,49,51)" fg:x="65377" fg:w="485"/><text x="26.2376%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (485 samples, 0.19%)</title><rect x="25.9876%" y="261" width="0.1928%" height="15" fill="rgb(251,10,15)" fg:x="65377" fg:w="485"/><text x="26.2376%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (316 samples, 0.13%)</title><rect x="26.0548%" y="245" width="0.1256%" height="15" fill="rgb(228,207,15)" fg:x="65546" fg:w="316"/><text x="26.3048%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (86 samples, 0.03%)</title><rect x="26.1462%" y="229" width="0.0342%" height="15" fill="rgb(241,99,19)" fg:x="65776" fg:w="86"/><text x="26.3962%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (49 samples, 0.02%)</title><rect x="26.1804%" y="293" width="0.0195%" height="15" fill="rgb(207,104,49)" fg:x="65862" fg:w="49"/><text x="26.4304%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (30 samples, 0.01%)</title><rect x="26.2321%" y="165" width="0.0119%" height="15" fill="rgb(234,99,18)" fg:x="65992" fg:w="30"/><text x="26.4821%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (684 samples, 0.27%)</title><rect x="25.9876%" y="325" width="0.2719%" height="15" fill="rgb(213,191,49)" fg:x="65377" fg:w="684"/><text x="26.2376%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (684 samples, 0.27%)</title><rect x="25.9876%" y="309" width="0.2719%" height="15" fill="rgb(210,226,19)" fg:x="65377" fg:w="684"/><text x="26.2376%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (150 samples, 0.06%)</title><rect x="26.1999%" y="293" width="0.0596%" height="15" fill="rgb(229,97,18)" fg:x="65911" fg:w="150"/><text x="26.4499%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (150 samples, 0.06%)</title><rect x="26.1999%" y="277" width="0.0596%" height="15" fill="rgb(211,167,15)" fg:x="65911" fg:w="150"/><text x="26.4499%" y="287.50"></text></g><g><title>core::hash::Hasher::write_i64 (130 samples, 0.05%)</title><rect x="26.2078%" y="261" width="0.0517%" height="15" fill="rgb(210,169,34)" fg:x="65931" fg:w="130"/><text x="26.4578%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u64 (130 samples, 0.05%)</title><rect x="26.2078%" y="245" width="0.0517%" height="15" fill="rgb(241,121,31)" fg:x="65931" fg:w="130"/><text x="26.4578%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (130 samples, 0.05%)</title><rect x="26.2078%" y="229" width="0.0517%" height="15" fill="rgb(232,40,11)" fg:x="65931" fg:w="130"/><text x="26.4578%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (130 samples, 0.05%)</title><rect x="26.2078%" y="213" width="0.0517%" height="15" fill="rgb(205,86,26)" fg:x="65931" fg:w="130"/><text x="26.4578%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (130 samples, 0.05%)</title><rect x="26.2078%" y="197" width="0.0517%" height="15" fill="rgb(231,126,28)" fg:x="65931" fg:w="130"/><text x="26.4578%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (96 samples, 0.04%)</title><rect x="26.2213%" y="181" width="0.0382%" height="15" fill="rgb(219,221,18)" fg:x="65965" fg:w="96"/><text x="26.4713%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (39 samples, 0.02%)</title><rect x="26.2440%" y="165" width="0.0155%" height="15" fill="rgb(211,40,0)" fg:x="66022" fg:w="39"/><text x="26.4940%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (205 samples, 0.08%)</title><rect x="26.2861%" y="261" width="0.0815%" height="15" fill="rgb(239,85,43)" fg:x="66128" fg:w="205"/><text x="26.5361%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (205 samples, 0.08%)</title><rect x="26.2861%" y="245" width="0.0815%" height="15" fill="rgb(231,55,21)" fg:x="66128" fg:w="205"/><text x="26.5361%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (205 samples, 0.08%)</title><rect x="26.2861%" y="229" width="0.0815%" height="15" fill="rgb(225,184,43)" fg:x="66128" fg:w="205"/><text x="26.5361%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (205 samples, 0.08%)</title><rect x="26.2861%" y="213" width="0.0815%" height="15" fill="rgb(251,158,41)" fg:x="66128" fg:w="205"/><text x="26.5361%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (243 samples, 0.10%)</title><rect x="26.2861%" y="277" width="0.0966%" height="15" fill="rgb(234,159,37)" fg:x="66128" fg:w="243"/><text x="26.5361%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (38 samples, 0.02%)</title><rect x="26.3676%" y="261" width="0.0151%" height="15" fill="rgb(216,204,22)" fg:x="66333" fg:w="38"/><text x="26.6176%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (38 samples, 0.02%)</title><rect x="26.3676%" y="245" width="0.0151%" height="15" fill="rgb(214,17,3)" fg:x="66333" fg:w="38"/><text x="26.6176%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (38 samples, 0.02%)</title><rect x="26.3676%" y="229" width="0.0151%" height="15" fill="rgb(212,111,17)" fg:x="66333" fg:w="38"/><text x="26.6176%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (38 samples, 0.02%)</title><rect x="26.3676%" y="213" width="0.0151%" height="15" fill="rgb(221,157,24)" fg:x="66333" fg:w="38"/><text x="26.6176%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (92 samples, 0.04%)</title><rect x="26.3827%" y="277" width="0.0366%" height="15" fill="rgb(252,16,13)" fg:x="66371" fg:w="92"/><text x="26.6327%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (29 samples, 0.01%)</title><rect x="26.4193%" y="277" width="0.0115%" height="15" fill="rgb(221,62,2)" fg:x="66463" fg:w="29"/><text x="26.6693%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (72 samples, 0.03%)</title><rect x="26.4308%" y="277" width="0.0286%" height="15" fill="rgb(247,87,22)" fg:x="66492" fg:w="72"/><text x="26.6808%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (72 samples, 0.03%)</title><rect x="26.4308%" y="261" width="0.0286%" height="15" fill="rgb(215,73,9)" fg:x="66492" fg:w="72"/><text x="26.6808%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.03%)</title><rect x="26.4308%" y="245" width="0.0286%" height="15" fill="rgb(207,175,33)" fg:x="66492" fg:w="72"/><text x="26.6808%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (123 samples, 0.05%)</title><rect x="26.4594%" y="277" width="0.0489%" height="15" fill="rgb(243,129,54)" fg:x="66564" fg:w="123"/><text x="26.7094%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (123 samples, 0.05%)</title><rect x="26.4594%" y="261" width="0.0489%" height="15" fill="rgb(227,119,45)" fg:x="66564" fg:w="123"/><text x="26.7094%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (631 samples, 0.25%)</title><rect x="26.2595%" y="293" width="0.2508%" height="15" fill="rgb(205,109,36)" fg:x="66061" fg:w="631"/><text x="26.5095%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (659 samples, 0.26%)</title><rect x="26.2595%" y="309" width="0.2620%" height="15" fill="rgb(205,6,39)" fg:x="66061" fg:w="659"/><text x="26.5095%" y="319.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (28 samples, 0.01%)</title><rect x="26.5103%" y="293" width="0.0111%" height="15" fill="rgb(221,32,16)" fg:x="66692" fg:w="28"/><text x="26.7603%" y="303.50"></text></g><g><title>mut_binary_heap::binary_heap::Hole&lt;K,T&gt;::move_to (1,413 samples, 0.56%)</title><rect x="25.9610%" y="389" width="0.5617%" height="15" fill="rgb(228,144,50)" fg:x="65310" fg:w="1413"/><text x="26.2110%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1,356 samples, 0.54%)</title><rect x="25.9836%" y="373" width="0.5390%" height="15" fill="rgb(229,201,53)" fg:x="65367" fg:w="1356"/><text x="26.2336%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,356 samples, 0.54%)</title><rect x="25.9836%" y="357" width="0.5390%" height="15" fill="rgb(249,153,27)" fg:x="65367" fg:w="1356"/><text x="26.2336%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1,356 samples, 0.54%)</title><rect x="25.9836%" y="341" width="0.5390%" height="15" fill="rgb(227,106,25)" fg:x="65367" fg:w="1356"/><text x="26.2336%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (662 samples, 0.26%)</title><rect x="26.2595%" y="325" width="0.2631%" height="15" fill="rgb(230,65,29)" fg:x="66061" fg:w="662"/><text x="26.5095%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,230 samples, 0.89%)</title><rect x="25.6426%" y="437" width="0.8864%" height="15" fill="rgb(221,57,46)" fg:x="64509" fg:w="2230"/><text x="25.8926%" y="447.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key::{{closure}} (2,230 samples, 0.89%)</title><rect x="25.6426%" y="421" width="0.8864%" height="15" fill="rgb(229,161,17)" fg:x="64509" fg:w="2230"/><text x="25.8926%" y="431.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::sift_down_to_bottom (2,061 samples, 0.82%)</title><rect x="25.7097%" y="405" width="0.8193%" height="15" fill="rgb(222,213,11)" fg:x="64678" fg:w="2061"/><text x="25.9597%" y="415.50"></text></g><g><title>mut_binary_heap::binary_heap::BinaryHeap&lt;K,T,C&gt;::pop_with_key (2,642 samples, 1.05%)</title><rect x="25.4820%" y="453" width="1.0502%" height="15" fill="rgb(235,35,13)" fg:x="64105" fg:w="2642"/><text x="25.7320%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::decide (2,699 samples, 1.07%)</title><rect x="25.4621%" y="469" width="1.0729%" height="15" fill="rgb(233,158,34)" fg:x="64055" fg:w="2699"/><text x="25.7121%" y="479.50"></text></g><g><title>__mem_cgroup_charge (34 samples, 0.01%)</title><rect x="26.5501%" y="101" width="0.0135%" height="15" fill="rgb(215,151,48)" fg:x="66792" fg:w="34"/><text x="26.8001%" y="111.50"></text></g><g><title>do_anonymous_page (59 samples, 0.02%)</title><rect x="26.5497%" y="117" width="0.0235%" height="15" fill="rgb(229,84,14)" fg:x="66791" fg:w="59"/><text x="26.7997%" y="127.50"></text></g><g><title>handle_pte_fault (66 samples, 0.03%)</title><rect x="26.5473%" y="133" width="0.0262%" height="15" fill="rgb(229,68,14)" fg:x="66785" fg:w="66"/><text x="26.7973%" y="143.50"></text></g><g><title>__handle_mm_fault (70 samples, 0.03%)</title><rect x="26.5461%" y="149" width="0.0278%" height="15" fill="rgb(243,106,26)" fg:x="66782" fg:w="70"/><text x="26.7961%" y="159.50"></text></g><g><title>do_user_addr_fault (79 samples, 0.03%)</title><rect x="26.5453%" y="181" width="0.0314%" height="15" fill="rgb(206,45,38)" fg:x="66780" fg:w="79"/><text x="26.7953%" y="191.50"></text></g><g><title>handle_mm_fault (78 samples, 0.03%)</title><rect x="26.5457%" y="165" width="0.0310%" height="15" fill="rgb(226,6,15)" fg:x="66781" fg:w="78"/><text x="26.7957%" y="175.50"></text></g><g><title>asm_exc_page_fault (85 samples, 0.03%)</title><rect x="26.5453%" y="213" width="0.0338%" height="15" fill="rgb(232,22,54)" fg:x="66780" fg:w="85"/><text x="26.7953%" y="223.50"></text></g><g><title>exc_page_fault (85 samples, 0.03%)</title><rect x="26.5453%" y="197" width="0.0338%" height="15" fill="rgb(229,222,32)" fg:x="66780" fg:w="85"/><text x="26.7953%" y="207.50"></text></g><g><title>perf_event_mmap_event (58 samples, 0.02%)</title><rect x="26.5910%" y="85" width="0.0231%" height="15" fill="rgb(228,62,29)" fg:x="66895" fg:w="58"/><text x="26.8410%" y="95.50"></text></g><g><title>perf_iterate_sb (54 samples, 0.02%)</title><rect x="26.5926%" y="69" width="0.0215%" height="15" fill="rgb(251,103,34)" fg:x="66899" fg:w="54"/><text x="26.8426%" y="79.50"></text></g><g><title>perf_iterate_ctx (54 samples, 0.02%)</title><rect x="26.5926%" y="53" width="0.0215%" height="15" fill="rgb(233,12,30)" fg:x="66899" fg:w="54"/><text x="26.8426%" y="63.50"></text></g><g><title>perf_event_mmap (59 samples, 0.02%)</title><rect x="26.5910%" y="101" width="0.0235%" height="15" fill="rgb(238,52,0)" fg:x="66895" fg:w="59"/><text x="26.8410%" y="111.50"></text></g><g><title>mprotect_fixup (85 samples, 0.03%)</title><rect x="26.5835%" y="117" width="0.0338%" height="15" fill="rgb(223,98,5)" fg:x="66876" fg:w="85"/><text x="26.8335%" y="127.50"></text></g><g><title>__x64_sys_mprotect (91 samples, 0.04%)</title><rect x="26.5827%" y="149" width="0.0362%" height="15" fill="rgb(228,75,37)" fg:x="66874" fg:w="91"/><text x="26.8327%" y="159.50"></text></g><g><title>do_mprotect_pkey (91 samples, 0.04%)</title><rect x="26.5827%" y="133" width="0.0362%" height="15" fill="rgb(205,115,49)" fg:x="66874" fg:w="91"/><text x="26.8327%" y="143.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (103 samples, 0.04%)</title><rect x="26.5803%" y="181" width="0.0409%" height="15" fill="rgb(250,154,43)" fg:x="66868" fg:w="103"/><text x="26.8303%" y="191.50"></text></g><g><title>do_syscall_64 (98 samples, 0.04%)</title><rect x="26.5823%" y="165" width="0.0390%" height="15" fill="rgb(226,43,29)" fg:x="66873" fg:w="98"/><text x="26.8323%" y="175.50"></text></g><g><title>grow_heap (117 samples, 0.05%)</title><rect x="26.5795%" y="213" width="0.0465%" height="15" fill="rgb(249,228,39)" fg:x="66866" fg:w="117"/><text x="26.8295%" y="223.50"></text></g><g><title>__GI___mprotect (115 samples, 0.05%)</title><rect x="26.5803%" y="197" width="0.0457%" height="15" fill="rgb(216,79,43)" fg:x="66868" fg:w="115"/><text x="26.8303%" y="207.50"></text></g><g><title>__GI___libc_malloc (226 samples, 0.09%)</title><rect x="26.5369%" y="261" width="0.0898%" height="15" fill="rgb(228,95,12)" fg:x="66759" fg:w="226"/><text x="26.7869%" y="271.50"></text></g><g><title>_int_malloc (225 samples, 0.09%)</title><rect x="26.5373%" y="245" width="0.0894%" height="15" fill="rgb(249,221,15)" fg:x="66760" fg:w="225"/><text x="26.7873%" y="255.50"></text></g><g><title>sysmalloc (219 samples, 0.09%)</title><rect x="26.5397%" y="229" width="0.0871%" height="15" fill="rgb(233,34,13)" fg:x="66766" fg:w="219"/><text x="26.7897%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (229 samples, 0.09%)</title><rect x="26.5369%" y="389" width="0.0910%" height="15" fill="rgb(214,103,39)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (229 samples, 0.09%)</title><rect x="26.5369%" y="373" width="0.0910%" height="15" fill="rgb(251,126,39)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (229 samples, 0.09%)</title><rect x="26.5369%" y="357" width="0.0910%" height="15" fill="rgb(214,216,36)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (229 samples, 0.09%)</title><rect x="26.5369%" y="341" width="0.0910%" height="15" fill="rgb(220,221,8)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (229 samples, 0.09%)</title><rect x="26.5369%" y="325" width="0.0910%" height="15" fill="rgb(240,216,3)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="335.50"></text></g><g><title>alloc::alloc::alloc (229 samples, 0.09%)</title><rect x="26.5369%" y="309" width="0.0910%" height="15" fill="rgb(232,218,17)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="319.50"></text></g><g><title>__rdl_alloc (229 samples, 0.09%)</title><rect x="26.5369%" y="293" width="0.0910%" height="15" fill="rgb(229,163,45)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (229 samples, 0.09%)</title><rect x="26.5369%" y="277" width="0.0910%" height="15" fill="rgb(231,110,42)" fg:x="66759" fg:w="229"/><text x="26.7869%" y="287.50"></text></g><g><title>charge_memcg (50 samples, 0.02%)</title><rect x="26.6769%" y="213" width="0.0199%" height="15" fill="rgb(208,170,48)" fg:x="67111" fg:w="50"/><text x="26.9269%" y="223.50"></text></g><g><title>__mem_cgroup_charge (83 samples, 0.03%)</title><rect x="26.6721%" y="229" width="0.0330%" height="15" fill="rgb(239,116,25)" fg:x="67099" fg:w="83"/><text x="26.9221%" y="239.50"></text></g><g><title>do_anonymous_page (169 samples, 0.07%)</title><rect x="26.6673%" y="245" width="0.0672%" height="15" fill="rgb(219,200,50)" fg:x="67087" fg:w="169"/><text x="26.9173%" y="255.50"></text></g><g><title>vma_alloc_folio (45 samples, 0.02%)</title><rect x="26.7166%" y="229" width="0.0179%" height="15" fill="rgb(245,200,0)" fg:x="67211" fg:w="45"/><text x="26.9666%" y="239.50"></text></g><g><title>__folio_alloc (45 samples, 0.02%)</title><rect x="26.7166%" y="213" width="0.0179%" height="15" fill="rgb(245,119,33)" fg:x="67211" fg:w="45"/><text x="26.9666%" y="223.50"></text></g><g><title>__alloc_pages (44 samples, 0.02%)</title><rect x="26.7170%" y="197" width="0.0175%" height="15" fill="rgb(231,125,12)" fg:x="67212" fg:w="44"/><text x="26.9670%" y="207.50"></text></g><g><title>get_page_from_freelist (41 samples, 0.02%)</title><rect x="26.7182%" y="181" width="0.0163%" height="15" fill="rgb(216,96,41)" fg:x="67215" fg:w="41"/><text x="26.9682%" y="191.50"></text></g><g><title>handle_pte_fault (190 samples, 0.08%)</title><rect x="26.6594%" y="261" width="0.0755%" height="15" fill="rgb(248,43,45)" fg:x="67067" fg:w="190"/><text x="26.9094%" y="271.50"></text></g><g><title>__handle_mm_fault (200 samples, 0.08%)</title><rect x="26.6558%" y="277" width="0.0795%" height="15" fill="rgb(217,222,7)" fg:x="67058" fg:w="200"/><text x="26.9058%" y="287.50"></text></g><g><title>handle_mm_fault (209 samples, 0.08%)</title><rect x="26.6558%" y="293" width="0.0831%" height="15" fill="rgb(233,28,6)" fg:x="67058" fg:w="209"/><text x="26.9058%" y="303.50"></text></g><g><title>do_user_addr_fault (219 samples, 0.09%)</title><rect x="26.6522%" y="309" width="0.0871%" height="15" fill="rgb(231,218,15)" fg:x="67049" fg:w="219"/><text x="26.9022%" y="319.50"></text></g><g><title>irqentry_exit (27 samples, 0.01%)</title><rect x="26.7393%" y="309" width="0.0107%" height="15" fill="rgb(226,171,48)" fg:x="67268" fg:w="27"/><text x="26.9893%" y="319.50"></text></g><g><title>irqentry_exit_to_user_mode (26 samples, 0.01%)</title><rect x="26.7397%" y="293" width="0.0103%" height="15" fill="rgb(235,201,9)" fg:x="67269" fg:w="26"/><text x="26.9897%" y="303.50"></text></g><g><title>asm_exc_page_fault (250 samples, 0.10%)</title><rect x="26.6514%" y="341" width="0.0994%" height="15" fill="rgb(217,80,15)" fg:x="67047" fg:w="250"/><text x="26.9014%" y="351.50"></text></g><g><title>exc_page_fault (248 samples, 0.10%)</title><rect x="26.6522%" y="325" width="0.0986%" height="15" fill="rgb(219,152,8)" fg:x="67049" fg:w="248"/><text x="26.9022%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (571 samples, 0.23%)</title><rect x="26.5366%" y="453" width="0.2270%" height="15" fill="rgb(243,107,38)" fg:x="66758" fg:w="571"/><text x="26.7866%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (570 samples, 0.23%)</title><rect x="26.5369%" y="437" width="0.2266%" height="15" fill="rgb(231,17,5)" fg:x="66759" fg:w="570"/><text x="26.7869%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (570 samples, 0.23%)</title><rect x="26.5369%" y="421" width="0.2266%" height="15" fill="rgb(209,25,54)" fg:x="66759" fg:w="570"/><text x="26.7869%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (570 samples, 0.23%)</title><rect x="26.5369%" y="405" width="0.2266%" height="15" fill="rgb(219,0,2)" fg:x="66759" fg:w="570"/><text x="26.7869%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (341 samples, 0.14%)</title><rect x="26.6280%" y="389" width="0.1355%" height="15" fill="rgb(246,9,5)" fg:x="66988" fg:w="341"/><text x="26.8780%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (341 samples, 0.14%)</title><rect x="26.6280%" y="373" width="0.1355%" height="15" fill="rgb(226,159,4)" fg:x="66988" fg:w="341"/><text x="26.8780%" y="383.50"></text></g><g><title>__memcpy_evex_unaligned_erms (335 samples, 0.13%)</title><rect x="26.6304%" y="357" width="0.1332%" height="15" fill="rgb(219,175,34)" fg:x="66994" fg:w="335"/><text x="26.8804%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (135 samples, 0.05%)</title><rect x="26.8581%" y="389" width="0.0537%" height="15" fill="rgb(236,10,46)" fg:x="67567" fg:w="135"/><text x="27.1081%" y="399.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut::{{closure}} (135 samples, 0.05%)</title><rect x="26.8581%" y="373" width="0.0537%" height="15" fill="rgb(240,211,16)" fg:x="67567" fg:w="135"/><text x="27.1081%" y="383.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::IndexMut&lt;project1::solver::clause::ClauseKey&gt;&gt;::index_mut (168 samples, 0.07%)</title><rect x="26.8581%" y="421" width="0.0668%" height="15" fill="rgb(205,3,43)" fg:x="67567" fg:w="168"/><text x="27.1081%" y="431.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get_mut (168 samples, 0.07%)</title><rect x="26.8581%" y="405" width="0.0668%" height="15" fill="rgb(245,7,22)" fg:x="67567" fg:w="168"/><text x="27.1081%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (33 samples, 0.01%)</title><rect x="26.9118%" y="389" width="0.0131%" height="15" fill="rgb(239,132,32)" fg:x="67702" fg:w="33"/><text x="27.1618%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (33 samples, 0.01%)</title><rect x="26.9118%" y="373" width="0.0131%" height="15" fill="rgb(228,202,34)" fg:x="67702" fg:w="33"/><text x="27.1618%" y="383.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (400 samples, 0.16%)</title><rect x="26.7699%" y="437" width="0.1590%" height="15" fill="rgb(254,200,22)" fg:x="67345" fg:w="400"/><text x="27.0199%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (425 samples, 0.17%)</title><rect x="26.7635%" y="453" width="0.1689%" height="15" fill="rgb(219,10,39)" fg:x="67329" fg:w="425"/><text x="27.0135%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (317 samples, 0.13%)</title><rect x="27.1245%" y="325" width="0.1260%" height="15" fill="rgb(226,210,39)" fg:x="68237" fg:w="317"/><text x="27.3745%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (317 samples, 0.13%)</title><rect x="27.1245%" y="309" width="0.1260%" height="15" fill="rgb(208,219,16)" fg:x="68237" fg:w="317"/><text x="27.3745%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (331 samples, 0.13%)</title><rect x="27.1245%" y="357" width="0.1316%" height="15" fill="rgb(216,158,51)" fg:x="68237" fg:w="331"/><text x="27.3745%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (331 samples, 0.13%)</title><rect x="27.1245%" y="341" width="0.1316%" height="15" fill="rgb(233,14,44)" fg:x="68237" fg:w="331"/><text x="27.3745%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (588 samples, 0.23%)</title><rect x="27.0235%" y="389" width="0.2337%" height="15" fill="rgb(237,97,39)" fg:x="67983" fg:w="588"/><text x="27.2735%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (564 samples, 0.22%)</title><rect x="27.0330%" y="373" width="0.2242%" height="15" fill="rgb(218,198,43)" fg:x="68007" fg:w="564"/><text x="27.2830%" y="383.50"></text></g><g><title>core::slice::sort::find_streak (622 samples, 0.25%)</title><rect x="27.0104%" y="405" width="0.2472%" height="15" fill="rgb(231,104,20)" fg:x="67950" fg:w="622"/><text x="27.2604%" y="415.50"></text></g><g><title>core::slice::sort::merge_sort (90 samples, 0.04%)</title><rect x="27.3987%" y="373" width="0.0358%" height="15" fill="rgb(254,36,13)" fg:x="68927" fg:w="90"/><text x="27.6487%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (109 samples, 0.04%)</title><rect x="28.0558%" y="325" width="0.0433%" height="15" fill="rgb(248,14,50)" fg:x="70580" fg:w="109"/><text x="28.3058%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (1,913 samples, 0.76%)</title><rect x="28.0991%" y="325" width="0.7604%" height="15" fill="rgb(217,107,29)" fg:x="70689" fg:w="1913"/><text x="28.3491%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (1,913 samples, 0.76%)</title><rect x="28.0991%" y="309" width="0.7604%" height="15" fill="rgb(251,169,33)" fg:x="70689" fg:w="1913"/><text x="28.3491%" y="319.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (2,183 samples, 0.87%)</title><rect x="28.0558%" y="357" width="0.8678%" height="15" fill="rgb(217,108,32)" fg:x="70580" fg:w="2183"/><text x="28.3058%" y="367.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (2,183 samples, 0.87%)</title><rect x="28.0558%" y="341" width="0.8678%" height="15" fill="rgb(219,66,42)" fg:x="70580" fg:w="2183"/><text x="28.3058%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (161 samples, 0.06%)</title><rect x="28.8596%" y="325" width="0.0640%" height="15" fill="rgb(206,180,7)" fg:x="72602" fg:w="161"/><text x="29.1096%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (161 samples, 0.06%)</title><rect x="28.8596%" y="309" width="0.0640%" height="15" fill="rgb(208,226,31)" fg:x="72602" fg:w="161"/><text x="29.1096%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (60 samples, 0.02%)</title><rect x="28.9236%" y="357" width="0.0239%" height="15" fill="rgb(218,26,49)" fg:x="72763" fg:w="60"/><text x="29.1736%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (158 samples, 0.06%)</title><rect x="28.9482%" y="357" width="0.0628%" height="15" fill="rgb(233,197,48)" fg:x="72825" fg:w="158"/><text x="29.1982%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (4,057 samples, 1.61%)</title><rect x="27.3987%" y="389" width="1.6127%" height="15" fill="rgb(252,181,51)" fg:x="68927" fg:w="4057"/><text x="27.6487%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (3,967 samples, 1.58%)</title><rect x="27.4345%" y="373" width="1.5769%" height="15" fill="rgb(253,90,19)" fg:x="69017" fg:w="3967"/><text x="27.6845%" y="383.50"></text></g><g><title>__mem_cgroup_charge (40 samples, 0.02%)</title><rect x="29.3040%" y="245" width="0.0159%" height="15" fill="rgb(215,171,30)" fg:x="73720" fg:w="40"/><text x="29.5540%" y="255.50"></text></g><g><title>do_anonymous_page (79 samples, 0.03%)</title><rect x="29.3028%" y="261" width="0.0314%" height="15" fill="rgb(214,222,9)" fg:x="73717" fg:w="79"/><text x="29.5528%" y="271.50"></text></g><g><title>vma_alloc_folio (27 samples, 0.01%)</title><rect x="29.3234%" y="245" width="0.0107%" height="15" fill="rgb(223,3,22)" fg:x="73769" fg:w="27"/><text x="29.5734%" y="255.50"></text></g><g><title>__handle_mm_fault (92 samples, 0.04%)</title><rect x="29.2980%" y="293" width="0.0366%" height="15" fill="rgb(225,196,46)" fg:x="73705" fg:w="92"/><text x="29.5480%" y="303.50"></text></g><g><title>handle_pte_fault (88 samples, 0.03%)</title><rect x="29.2996%" y="277" width="0.0350%" height="15" fill="rgb(209,110,37)" fg:x="73709" fg:w="88"/><text x="29.5496%" y="287.50"></text></g><g><title>do_user_addr_fault (101 samples, 0.04%)</title><rect x="29.2968%" y="325" width="0.0401%" height="15" fill="rgb(249,89,12)" fg:x="73702" fg:w="101"/><text x="29.5468%" y="335.50"></text></g><g><title>handle_mm_fault (98 samples, 0.04%)</title><rect x="29.2980%" y="309" width="0.0390%" height="15" fill="rgb(226,27,33)" fg:x="73705" fg:w="98"/><text x="29.5480%" y="319.50"></text></g><g><title>asm_exc_page_fault (113 samples, 0.04%)</title><rect x="29.2968%" y="357" width="0.0449%" height="15" fill="rgb(213,82,22)" fg:x="73702" fg:w="113"/><text x="29.5468%" y="367.50"></text></g><g><title>exc_page_fault (113 samples, 0.04%)</title><rect x="29.2968%" y="341" width="0.0449%" height="15" fill="rgb(248,140,0)" fg:x="73702" fg:w="113"/><text x="29.5468%" y="351.50"></text></g><g><title>__memcpy_evex_unaligned_erms (268 samples, 0.11%)</title><rect x="29.2396%" y="373" width="0.1065%" height="15" fill="rgb(228,106,3)" fg:x="73558" fg:w="268"/><text x="29.4896%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (848 samples, 0.34%)</title><rect x="29.0114%" y="389" width="0.3371%" height="15" fill="rgb(209,23,37)" fg:x="72984" fg:w="848"/><text x="29.2614%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (127 samples, 0.05%)</title><rect x="29.3560%" y="389" width="0.0505%" height="15" fill="rgb(241,93,50)" fg:x="73851" fg:w="127"/><text x="29.6060%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (82 samples, 0.03%)</title><rect x="29.4065%" y="373" width="0.0326%" height="15" fill="rgb(253,46,43)" fg:x="73978" fg:w="82"/><text x="29.6565%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (120 samples, 0.05%)</title><rect x="29.4065%" y="389" width="0.0477%" height="15" fill="rgb(226,206,43)" fg:x="73978" fg:w="120"/><text x="29.6565%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (38 samples, 0.02%)</title><rect x="29.4391%" y="373" width="0.0151%" height="15" fill="rgb(217,54,7)" fg:x="74060" fg:w="38"/><text x="29.6891%" y="383.50"></text></g><g><title>core::slice::sort::merge (5,527 samples, 2.20%)</title><rect x="27.2576%" y="405" width="2.1970%" height="15" fill="rgb(223,5,52)" fg:x="68572" fg:w="5527"/><text x="27.5076%" y="415.50">c..</text></g><g><title>core::slice::sort::merge_sort (514 samples, 0.20%)</title><rect x="29.4546%" y="405" width="0.2043%" height="15" fill="rgb(206,52,46)" fg:x="74099" fg:w="514"/><text x="29.7046%" y="415.50"></text></g><g><title>__mem_cgroup_charge (33 samples, 0.01%)</title><rect x="29.6689%" y="165" width="0.0131%" height="15" fill="rgb(253,136,11)" fg:x="74638" fg:w="33"/><text x="29.9189%" y="175.50"></text></g><g><title>do_anonymous_page (55 samples, 0.02%)</title><rect x="29.6681%" y="181" width="0.0219%" height="15" fill="rgb(208,106,33)" fg:x="74636" fg:w="55"/><text x="29.9181%" y="191.50"></text></g><g><title>__handle_mm_fault (63 samples, 0.03%)</title><rect x="29.6653%" y="213" width="0.0250%" height="15" fill="rgb(206,54,4)" fg:x="74629" fg:w="63"/><text x="29.9153%" y="223.50"></text></g><g><title>handle_pte_fault (61 samples, 0.02%)</title><rect x="29.6661%" y="197" width="0.0242%" height="15" fill="rgb(213,3,15)" fg:x="74631" fg:w="61"/><text x="29.9161%" y="207.50"></text></g><g><title>do_user_addr_fault (65 samples, 0.03%)</title><rect x="29.6649%" y="245" width="0.0258%" height="15" fill="rgb(252,211,39)" fg:x="74628" fg:w="65"/><text x="29.9149%" y="255.50"></text></g><g><title>handle_mm_fault (64 samples, 0.03%)</title><rect x="29.6653%" y="229" width="0.0254%" height="15" fill="rgb(223,6,36)" fg:x="74629" fg:w="64"/><text x="29.9153%" y="239.50"></text></g><g><title>asm_exc_page_fault (77 samples, 0.03%)</title><rect x="29.6641%" y="277" width="0.0306%" height="15" fill="rgb(252,169,45)" fg:x="74626" fg:w="77"/><text x="29.9141%" y="287.50"></text></g><g><title>exc_page_fault (76 samples, 0.03%)</title><rect x="29.6645%" y="261" width="0.0302%" height="15" fill="rgb(212,48,26)" fg:x="74627" fg:w="76"/><text x="29.9145%" y="271.50"></text></g><g><title>perf_event_mmap (39 samples, 0.02%)</title><rect x="29.7039%" y="165" width="0.0155%" height="15" fill="rgb(251,102,48)" fg:x="74726" fg:w="39"/><text x="29.9539%" y="175.50"></text></g><g><title>perf_event_mmap_event (38 samples, 0.02%)</title><rect x="29.7043%" y="149" width="0.0151%" height="15" fill="rgb(243,208,16)" fg:x="74727" fg:w="38"/><text x="29.9543%" y="159.50"></text></g><g><title>perf_iterate_sb (34 samples, 0.01%)</title><rect x="29.7058%" y="133" width="0.0135%" height="15" fill="rgb(219,96,24)" fg:x="74731" fg:w="34"/><text x="29.9558%" y="143.50"></text></g><g><title>perf_iterate_ctx (34 samples, 0.01%)</title><rect x="29.7058%" y="117" width="0.0135%" height="15" fill="rgb(219,33,29)" fg:x="74731" fg:w="34"/><text x="29.9558%" y="127.50"></text></g><g><title>mprotect_fixup (58 samples, 0.02%)</title><rect x="29.7003%" y="181" width="0.0231%" height="15" fill="rgb(223,176,5)" fg:x="74717" fg:w="58"/><text x="29.9503%" y="191.50"></text></g><g><title>do_mprotect_pkey (65 samples, 0.03%)</title><rect x="29.6991%" y="197" width="0.0258%" height="15" fill="rgb(228,140,14)" fg:x="74714" fg:w="65"/><text x="29.9491%" y="207.50"></text></g><g><title>__x64_sys_mprotect (66 samples, 0.03%)</title><rect x="29.6991%" y="213" width="0.0262%" height="15" fill="rgb(217,179,31)" fg:x="74714" fg:w="66"/><text x="29.9491%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (84 samples, 0.03%)</title><rect x="29.6959%" y="245" width="0.0334%" height="15" fill="rgb(230,9,30)" fg:x="74706" fg:w="84"/><text x="29.9459%" y="255.50"></text></g><g><title>do_syscall_64 (76 samples, 0.03%)</title><rect x="29.6991%" y="229" width="0.0302%" height="15" fill="rgb(230,136,20)" fg:x="74714" fg:w="76"/><text x="29.9491%" y="239.50"></text></g><g><title>grow_heap (101 samples, 0.04%)</title><rect x="29.6947%" y="277" width="0.0401%" height="15" fill="rgb(215,210,22)" fg:x="74703" fg:w="101"/><text x="29.9447%" y="287.50"></text></g><g><title>__GI___mprotect (100 samples, 0.04%)</title><rect x="29.6951%" y="261" width="0.0398%" height="15" fill="rgb(218,43,5)" fg:x="74704" fg:w="100"/><text x="29.9451%" y="271.50"></text></g><g><title>__rdl_alloc (192 samples, 0.08%)</title><rect x="29.6589%" y="357" width="0.0763%" height="15" fill="rgb(216,11,5)" fg:x="74613" fg:w="192"/><text x="29.9089%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (192 samples, 0.08%)</title><rect x="29.6589%" y="341" width="0.0763%" height="15" fill="rgb(209,82,29)" fg:x="74613" fg:w="192"/><text x="29.9089%" y="351.50"></text></g><g><title>__GI___libc_malloc (192 samples, 0.08%)</title><rect x="29.6589%" y="325" width="0.0763%" height="15" fill="rgb(244,115,12)" fg:x="74613" fg:w="192"/><text x="29.9089%" y="335.50"></text></g><g><title>_int_malloc (190 samples, 0.08%)</title><rect x="29.6597%" y="309" width="0.0755%" height="15" fill="rgb(222,82,18)" fg:x="74615" fg:w="190"/><text x="29.9097%" y="319.50"></text></g><g><title>sysmalloc (190 samples, 0.08%)</title><rect x="29.6597%" y="293" width="0.0755%" height="15" fill="rgb(249,227,8)" fg:x="74615" fg:w="190"/><text x="29.9097%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort::BufGuard&lt;T,ElemDeallocF&gt;::new (193 samples, 0.08%)</title><rect x="29.6589%" y="405" width="0.0767%" height="15" fill="rgb(253,141,45)" fg:x="74613" fg:w="193"/><text x="29.9089%" y="415.50"></text></g><g><title>alloc::slice::stable_sort::{{closure}} (193 samples, 0.08%)</title><rect x="29.6589%" y="389" width="0.0767%" height="15" fill="rgb(234,184,4)" fg:x="74613" fg:w="193"/><text x="29.9089%" y="399.50"></text></g><g><title>alloc::alloc::alloc (193 samples, 0.08%)</title><rect x="29.6589%" y="373" width="0.0767%" height="15" fill="rgb(218,194,23)" fg:x="74613" fg:w="193"/><text x="29.9089%" y="383.50"></text></g><g><title>core::intrinsics::copy (57 samples, 0.02%)</title><rect x="29.7436%" y="389" width="0.0227%" height="15" fill="rgb(235,66,41)" fg:x="74826" fg:w="57"/><text x="29.9936%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (55 samples, 0.02%)</title><rect x="29.7444%" y="373" width="0.0219%" height="15" fill="rgb(245,217,1)" fg:x="74828" fg:w="55"/><text x="29.9944%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort::RunVec&lt;RunAllocF,RunDeallocF&gt;::remove (64 samples, 0.03%)</title><rect x="29.7432%" y="405" width="0.0254%" height="15" fill="rgb(229,91,1)" fg:x="74825" fg:w="64"/><text x="29.9932%" y="415.50"></text></g><g><title>core::slice::sort::merge_sort::collapse (123 samples, 0.05%)</title><rect x="29.7687%" y="405" width="0.0489%" height="15" fill="rgb(207,101,30)" fg:x="74889" fg:w="123"/><text x="30.0187%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (48 samples, 0.02%)</title><rect x="29.8426%" y="357" width="0.0191%" height="15" fill="rgb(223,82,49)" fg:x="75075" fg:w="48"/><text x="30.0926%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (36 samples, 0.01%)</title><rect x="29.8474%" y="341" width="0.0143%" height="15" fill="rgb(218,167,17)" fg:x="75087" fg:w="36"/><text x="30.0974%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (57 samples, 0.02%)</title><rect x="29.8426%" y="373" width="0.0227%" height="15" fill="rgb(208,103,14)" fg:x="75075" fg:w="57"/><text x="30.0926%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (136 samples, 0.05%)</title><rect x="29.8732%" y="341" width="0.0541%" height="15" fill="rgb(238,20,8)" fg:x="75152" fg:w="136"/><text x="30.1232%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (506 samples, 0.20%)</title><rect x="30.0898%" y="293" width="0.2011%" height="15" fill="rgb(218,80,54)" fg:x="75697" fg:w="506"/><text x="30.3398%" y="303.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (506 samples, 0.20%)</title><rect x="30.0898%" y="277" width="0.2011%" height="15" fill="rgb(240,144,17)" fg:x="75697" fg:w="506"/><text x="30.3398%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (72 samples, 0.03%)</title><rect x="30.2910%" y="293" width="0.0286%" height="15" fill="rgb(245,27,50)" fg:x="76203" fg:w="72"/><text x="30.5410%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (72 samples, 0.03%)</title><rect x="30.2910%" y="277" width="0.0286%" height="15" fill="rgb(251,51,7)" fg:x="76203" fg:w="72"/><text x="30.5410%" y="287.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (602 samples, 0.24%)</title><rect x="30.0863%" y="325" width="0.2393%" height="15" fill="rgb(245,217,29)" fg:x="75688" fg:w="602"/><text x="30.3363%" y="335.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (593 samples, 0.24%)</title><rect x="30.0898%" y="309" width="0.2357%" height="15" fill="rgb(221,176,29)" fg:x="75697" fg:w="593"/><text x="30.3398%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (1,160 samples, 0.46%)</title><rect x="29.8732%" y="357" width="0.4611%" height="15" fill="rgb(212,180,24)" fg:x="75152" fg:w="1160"/><text x="30.1232%" y="367.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (1,024 samples, 0.41%)</title><rect x="29.9273%" y="341" width="0.4070%" height="15" fill="rgb(254,24,2)" fg:x="75288" fg:w="1024"/><text x="30.1773%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (139 samples, 0.06%)</title><rect x="30.3343%" y="357" width="0.0553%" height="15" fill="rgb(230,100,2)" fg:x="76312" fg:w="139"/><text x="30.5843%" y="367.50"></text></g><g><title>core::slice::sort::insert_tail (1,424 samples, 0.57%)</title><rect x="29.8652%" y="373" width="0.5660%" height="15" fill="rgb(219,142,25)" fg:x="75132" fg:w="1424"/><text x="30.1152%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;project1::solver::clause::ClauseKey&gt;&gt; (105 samples, 0.04%)</title><rect x="30.3896%" y="357" width="0.0417%" height="15" fill="rgb(240,73,43)" fg:x="76451" fg:w="105"/><text x="30.6396%" y="367.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.04%)</title><rect x="30.3896%" y="341" width="0.0417%" height="15" fill="rgb(214,114,15)" fg:x="76451" fg:w="105"/><text x="30.6396%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (105 samples, 0.04%)</title><rect x="30.3896%" y="325" width="0.0417%" height="15" fill="rgb(207,130,4)" fg:x="76451" fg:w="105"/><text x="30.6396%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (9,012 samples, 3.58%)</title><rect x="26.9325%" y="453" width="3.5823%" height="15" fill="rgb(221,25,40)" fg:x="67754" fg:w="9012"/><text x="27.1825%" y="463.50">allo..</text></g><g><title>alloc::slice::stable_sort (9,012 samples, 3.58%)</title><rect x="26.9325%" y="437" width="3.5823%" height="15" fill="rgb(241,184,7)" fg:x="67754" fg:w="9012"/><text x="27.1825%" y="447.50">allo..</text></g><g><title>core::slice::sort::merge_sort (9,006 samples, 3.58%)</title><rect x="26.9348%" y="421" width="3.5799%" height="15" fill="rgb(235,159,4)" fg:x="67760" fg:w="9006"/><text x="27.1848%" y="431.50">core..</text></g><g><title>core::slice::sort::provide_sorted_batch (1,752 samples, 0.70%)</title><rect x="29.8183%" y="405" width="0.6964%" height="15" fill="rgb(214,87,48)" fg:x="75014" fg:w="1752"/><text x="30.0683%" y="415.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,731 samples, 0.69%)</title><rect x="29.8267%" y="389" width="0.6881%" height="15" fill="rgb(246,198,24)" fg:x="75035" fg:w="1731"/><text x="30.0767%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (210 samples, 0.08%)</title><rect x="30.4313%" y="373" width="0.0835%" height="15" fill="rgb(209,66,40)" fg:x="76556" fg:w="210"/><text x="30.6813%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (165 samples, 0.07%)</title><rect x="30.5708%" y="341" width="0.0656%" height="15" fill="rgb(233,147,39)" fg:x="76907" fg:w="165"/><text x="30.8208%" y="351.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (165 samples, 0.07%)</title><rect x="30.5708%" y="325" width="0.0656%" height="15" fill="rgb(231,145,52)" fg:x="76907" fg:w="165"/><text x="30.8208%" y="335.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (175 samples, 0.07%)</title><rect x="30.5708%" y="373" width="0.0696%" height="15" fill="rgb(206,20,26)" fg:x="76907" fg:w="175"/><text x="30.8208%" y="383.50"></text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (175 samples, 0.07%)</title><rect x="30.5708%" y="357" width="0.0696%" height="15" fill="rgb(238,220,4)" fg:x="76907" fg:w="175"/><text x="30.8208%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::le (33 samples, 0.01%)</title><rect x="30.6412%" y="373" width="0.0131%" height="15" fill="rgb(252,195,42)" fg:x="77084" fg:w="33"/><text x="30.8912%" y="383.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (27 samples, 0.01%)</title><rect x="30.6436%" y="357" width="0.0107%" height="15" fill="rgb(209,10,6)" fg:x="77090" fg:w="27"/><text x="30.8936%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (27 samples, 0.01%)</title><rect x="30.6436%" y="341" width="0.0107%" height="15" fill="rgb(229,3,52)" fg:x="77090" fg:w="27"/><text x="30.8936%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (311 samples, 0.12%)</title><rect x="30.5323%" y="405" width="0.1236%" height="15" fill="rgb(253,49,37)" fg:x="76810" fg:w="311"/><text x="30.7823%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses::{{closure}} (311 samples, 0.12%)</title><rect x="30.5323%" y="389" width="0.1236%" height="15" fill="rgb(240,103,49)" fg:x="76810" fg:w="311"/><text x="30.7823%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (358 samples, 0.14%)</title><rect x="30.5152%" y="421" width="0.1423%" height="15" fill="rgb(250,182,30)" fg:x="76767" fg:w="358"/><text x="30.7652%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (360 samples, 0.14%)</title><rect x="30.5148%" y="453" width="0.1431%" height="15" fill="rgb(248,8,30)" fg:x="76766" fg:w="360"/><text x="30.7648%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (360 samples, 0.14%)</title><rect x="30.5148%" y="437" width="0.1431%" height="15" fill="rgb(237,120,30)" fg:x="76766" fg:w="360"/><text x="30.7648%" y="447.50"></text></g><g><title>__mem_cgroup_charge (31 samples, 0.01%)</title><rect x="30.6710%" y="149" width="0.0123%" height="15" fill="rgb(221,146,34)" fg:x="77159" fg:w="31"/><text x="30.9210%" y="159.50"></text></g><g><title>__handle_mm_fault (70 samples, 0.03%)</title><rect x="30.6670%" y="197" width="0.0278%" height="15" fill="rgb(242,55,13)" fg:x="77149" fg:w="70"/><text x="30.9170%" y="207.50"></text></g><g><title>handle_pte_fault (69 samples, 0.03%)</title><rect x="30.6674%" y="181" width="0.0274%" height="15" fill="rgb(242,112,31)" fg:x="77150" fg:w="69"/><text x="30.9174%" y="191.50"></text></g><g><title>do_anonymous_page (64 samples, 0.03%)</title><rect x="30.6694%" y="165" width="0.0254%" height="15" fill="rgb(249,192,27)" fg:x="77155" fg:w="64"/><text x="30.9194%" y="175.50"></text></g><g><title>handle_mm_fault (79 samples, 0.03%)</title><rect x="30.6670%" y="213" width="0.0314%" height="15" fill="rgb(208,204,44)" fg:x="77149" fg:w="79"/><text x="30.9170%" y="223.50"></text></g><g><title>do_user_addr_fault (80 samples, 0.03%)</title><rect x="30.6670%" y="229" width="0.0318%" height="15" fill="rgb(208,93,54)" fg:x="77149" fg:w="80"/><text x="30.9170%" y="239.50"></text></g><g><title>asm_exc_page_fault (90 samples, 0.04%)</title><rect x="30.6670%" y="261" width="0.0358%" height="15" fill="rgb(242,1,31)" fg:x="77149" fg:w="90"/><text x="30.9170%" y="271.50"></text></g><g><title>exc_page_fault (90 samples, 0.04%)</title><rect x="30.6670%" y="245" width="0.0358%" height="15" fill="rgb(241,83,25)" fg:x="77149" fg:w="90"/><text x="30.9170%" y="255.50"></text></g><g><title>perf_iterate_ctx (42 samples, 0.02%)</title><rect x="30.7127%" y="101" width="0.0167%" height="15" fill="rgb(205,169,50)" fg:x="77264" fg:w="42"/><text x="30.9627%" y="111.50"></text></g><g><title>perf_event_mmap_event (51 samples, 0.02%)</title><rect x="30.7095%" y="133" width="0.0203%" height="15" fill="rgb(239,186,37)" fg:x="77256" fg:w="51"/><text x="30.9595%" y="143.50"></text></g><g><title>perf_iterate_sb (45 samples, 0.02%)</title><rect x="30.7119%" y="117" width="0.0179%" height="15" fill="rgb(205,221,10)" fg:x="77262" fg:w="45"/><text x="30.9619%" y="127.50"></text></g><g><title>perf_event_mmap (52 samples, 0.02%)</title><rect x="30.7095%" y="149" width="0.0207%" height="15" fill="rgb(218,196,15)" fg:x="77256" fg:w="52"/><text x="30.9595%" y="159.50"></text></g><g><title>mprotect_fixup (67 samples, 0.03%)</title><rect x="30.7056%" y="165" width="0.0266%" height="15" fill="rgb(218,196,35)" fg:x="77246" fg:w="67"/><text x="30.9556%" y="175.50"></text></g><g><title>do_mprotect_pkey (74 samples, 0.03%)</title><rect x="30.7044%" y="181" width="0.0294%" height="15" fill="rgb(233,63,24)" fg:x="77243" fg:w="74"/><text x="30.9544%" y="191.50"></text></g><g><title>__x64_sys_mprotect (75 samples, 0.03%)</title><rect x="30.7044%" y="197" width="0.0298%" height="15" fill="rgb(225,8,4)" fg:x="77243" fg:w="75"/><text x="30.9544%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (85 samples, 0.03%)</title><rect x="30.7036%" y="229" width="0.0338%" height="15" fill="rgb(234,105,35)" fg:x="77241" fg:w="85"/><text x="30.9536%" y="239.50"></text></g><g><title>do_syscall_64 (83 samples, 0.03%)</title><rect x="30.7044%" y="213" width="0.0330%" height="15" fill="rgb(236,21,32)" fg:x="77243" fg:w="83"/><text x="30.9544%" y="223.50"></text></g><g><title>grow_heap (103 samples, 0.04%)</title><rect x="30.7028%" y="261" width="0.0409%" height="15" fill="rgb(228,109,6)" fg:x="77239" fg:w="103"/><text x="30.9528%" y="271.50"></text></g><g><title>__GI___mprotect (103 samples, 0.04%)</title><rect x="30.7028%" y="245" width="0.0409%" height="15" fill="rgb(229,215,31)" fg:x="77239" fg:w="103"/><text x="30.9528%" y="255.50"></text></g><g><title>__GI___libc_malloc (218 samples, 0.09%)</title><rect x="30.6579%" y="309" width="0.0867%" height="15" fill="rgb(221,52,54)" fg:x="77126" fg:w="218"/><text x="30.9079%" y="319.50"></text></g><g><title>_int_malloc (214 samples, 0.09%)</title><rect x="30.6595%" y="293" width="0.0851%" height="15" fill="rgb(252,129,43)" fg:x="77130" fg:w="214"/><text x="30.9095%" y="303.50"></text></g><g><title>sysmalloc (208 samples, 0.08%)</title><rect x="30.6618%" y="277" width="0.0827%" height="15" fill="rgb(248,183,27)" fg:x="77136" fg:w="208"/><text x="30.9118%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (219 samples, 0.09%)</title><rect x="30.6579%" y="453" width="0.0871%" height="15" fill="rgb(250,0,22)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (219 samples, 0.09%)</title><rect x="30.6579%" y="437" width="0.0871%" height="15" fill="rgb(213,166,10)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (219 samples, 0.09%)</title><rect x="30.6579%" y="421" width="0.0871%" height="15" fill="rgb(207,163,36)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (219 samples, 0.09%)</title><rect x="30.6579%" y="405" width="0.0871%" height="15" fill="rgb(208,122,22)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (219 samples, 0.09%)</title><rect x="30.6579%" y="389" width="0.0871%" height="15" fill="rgb(207,104,49)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (219 samples, 0.09%)</title><rect x="30.6579%" y="373" width="0.0871%" height="15" fill="rgb(248,211,50)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="383.50"></text></g><g><title>alloc::alloc::alloc (219 samples, 0.09%)</title><rect x="30.6579%" y="357" width="0.0871%" height="15" fill="rgb(217,13,45)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="367.50"></text></g><g><title>__rdl_alloc (219 samples, 0.09%)</title><rect x="30.6579%" y="341" width="0.0871%" height="15" fill="rgb(211,216,49)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (219 samples, 0.09%)</title><rect x="30.6579%" y="325" width="0.0871%" height="15" fill="rgb(221,58,53)" fg:x="77126" fg:w="219"/><text x="30.9079%" y="335.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::delete_clauses (10,597 samples, 4.21%)</title><rect x="26.5350%" y="469" width="4.2123%" height="15" fill="rgb(220,112,41)" fg:x="66754" fg:w="10597"/><text x="26.7850%" y="479.50">proje..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (44 samples, 0.02%)</title><rect x="30.7529%" y="453" width="0.0175%" height="15" fill="rgb(236,38,28)" fg:x="77365" fg:w="44"/><text x="31.0029%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (74 samples, 0.03%)</title><rect x="30.7704%" y="453" width="0.0294%" height="15" fill="rgb(227,195,22)" fg:x="77409" fg:w="74"/><text x="31.0204%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::make_decision (134 samples, 0.05%)</title><rect x="30.7473%" y="469" width="0.0533%" height="15" fill="rgb(214,55,33)" fg:x="77351" fg:w="134"/><text x="30.9973%" y="479.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::get_next_bcp_lit (173 samples, 0.07%)</title><rect x="30.8956%" y="437" width="0.0688%" height="15" fill="rgb(248,80,13)" fg:x="77724" fg:w="173"/><text x="31.1456%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::get_next_bcp_lit (232 samples, 0.09%)</title><rect x="30.8956%" y="453" width="0.0922%" height="15" fill="rgb(238,52,6)" fg:x="77724" fg:w="232"/><text x="31.1456%" y="463.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (59 samples, 0.02%)</title><rect x="30.9643%" y="437" width="0.0235%" height="15" fill="rgb(224,198,47)" fg:x="77897" fg:w="59"/><text x="31.2143%" y="447.50"></text></g><g><title>__hrtimer_run_queues (45 samples, 0.02%)</title><rect x="38.0538%" y="373" width="0.0179%" height="15" fill="rgb(233,171,20)" fg:x="95732" fg:w="45"/><text x="38.3038%" y="383.50"></text></g><g><title>tick_sched_timer (44 samples, 0.02%)</title><rect x="38.0542%" y="357" width="0.0175%" height="15" fill="rgb(241,30,25)" fg:x="95733" fg:w="44"/><text x="38.3042%" y="367.50"></text></g><g><title>tick_sched_handle (27 samples, 0.01%)</title><rect x="38.0610%" y="341" width="0.0107%" height="15" fill="rgb(207,171,38)" fg:x="95750" fg:w="27"/><text x="38.3110%" y="351.50"></text></g><g><title>update_process_times (26 samples, 0.01%)</title><rect x="38.0614%" y="325" width="0.0103%" height="15" fill="rgb(234,70,1)" fg:x="95751" fg:w="26"/><text x="38.3114%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (46 samples, 0.02%)</title><rect x="38.0538%" y="405" width="0.0183%" height="15" fill="rgb(232,178,18)" fg:x="95732" fg:w="46"/><text x="38.3038%" y="415.50"></text></g><g><title>hrtimer_interrupt (46 samples, 0.02%)</title><rect x="38.0538%" y="389" width="0.0183%" height="15" fill="rgb(241,78,40)" fg:x="95732" fg:w="46"/><text x="38.3038%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (58 samples, 0.02%)</title><rect x="38.0538%" y="437" width="0.0231%" height="15" fill="rgb(222,35,25)" fg:x="95732" fg:w="58"/><text x="38.3038%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (58 samples, 0.02%)</title><rect x="38.0538%" y="421" width="0.0231%" height="15" fill="rgb(207,92,16)" fg:x="95732" fg:w="58"/><text x="38.3038%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (17,836 samples, 7.09%)</title><rect x="30.9878%" y="453" width="7.0899%" height="15" fill="rgb(216,59,51)" fg:x="77956" fg:w="17836"/><text x="31.2378%" y="463.50">project1::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (599 samples, 0.24%)</title><rect x="53.0405%" y="437" width="0.2381%" height="15" fill="rgb(213,80,28)" fg:x="133434" fg:w="599"/><text x="53.2905%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (599 samples, 0.24%)</title><rect x="53.0405%" y="421" width="0.2381%" height="15" fill="rgb(220,93,7)" fg:x="133434" fg:w="599"/><text x="53.2905%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (599 samples, 0.24%)</title><rect x="53.0405%" y="405" width="0.2381%" height="15" fill="rgb(225,24,44)" fg:x="133434" fg:w="599"/><text x="53.2905%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (80 samples, 0.03%)</title><rect x="53.2786%" y="437" width="0.0318%" height="15" fill="rgb(243,74,40)" fg:x="134033" fg:w="80"/><text x="53.5286%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (80 samples, 0.03%)</title><rect x="53.2786%" y="421" width="0.0318%" height="15" fill="rgb(228,39,7)" fg:x="134033" fg:w="80"/><text x="53.5286%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (72 samples, 0.03%)</title><rect x="53.2818%" y="405" width="0.0286%" height="15" fill="rgb(227,79,8)" fg:x="134041" fg:w="72"/><text x="53.5318%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2,542 samples, 1.01%)</title><rect x="53.3104%" y="405" width="1.0105%" height="15" fill="rgb(236,58,11)" fg:x="134113" fg:w="2542"/><text x="53.5604%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,658 samples, 1.45%)</title><rect x="53.3104%" y="437" width="1.4541%" height="15" fill="rgb(249,63,35)" fg:x="134113" fg:w="3658"/><text x="53.5604%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,658 samples, 1.45%)</title><rect x="53.3104%" y="421" width="1.4541%" height="15" fill="rgb(252,114,16)" fg:x="134113" fg:w="3658"/><text x="53.5604%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (1,116 samples, 0.44%)</title><rect x="54.3209%" y="405" width="0.4436%" height="15" fill="rgb(254,151,24)" fg:x="136655" fg:w="1116"/><text x="54.5709%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,217 samples, 0.48%)</title><rect x="55.7332%" y="389" width="0.4838%" height="15" fill="rgb(253,54,39)" fg:x="140208" fg:w="1217"/><text x="55.9832%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,217 samples, 0.48%)</title><rect x="55.7332%" y="373" width="0.4838%" height="15" fill="rgb(243,25,45)" fg:x="140208" fg:w="1217"/><text x="55.9832%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,662 samples, 1.46%)</title><rect x="54.7645%" y="405" width="1.4557%" height="15" fill="rgb(234,134,9)" fg:x="137771" fg:w="3662"/><text x="55.0145%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::Index&lt;usize&gt;&gt;::index (5,703 samples, 2.27%)</title><rect x="54.7645%" y="437" width="2.2670%" height="15" fill="rgb(227,166,31)" fg:x="137771" fg:w="5703"/><text x="55.0145%" y="447.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5,703 samples, 2.27%)</title><rect x="54.7645%" y="421" width="2.2670%" height="15" fill="rgb(245,143,41)" fg:x="137771" fg:w="5703"/><text x="55.0145%" y="431.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,041 samples, 0.81%)</title><rect x="56.2201%" y="405" width="0.8113%" height="15" fill="rgb(238,181,32)" fg:x="141433" fg:w="2041"/><text x="56.4701%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,041 samples, 0.81%)</title><rect x="56.2201%" y="389" width="0.8113%" height="15" fill="rgb(224,113,18)" fg:x="141433" fg:w="2041"/><text x="56.4701%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,979 samples, 0.79%)</title><rect x="57.0342%" y="373" width="0.7867%" height="15" fill="rgb(240,229,28)" fg:x="143481" fg:w="1979"/><text x="57.2842%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,145 samples, 0.85%)</title><rect x="57.0342%" y="389" width="0.8526%" height="15" fill="rgb(250,185,3)" fg:x="143481" fg:w="2145"/><text x="57.2842%" y="399.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (166 samples, 0.07%)</title><rect x="57.8209%" y="373" width="0.0660%" height="15" fill="rgb(212,59,25)" fg:x="145460" fg:w="166"/><text x="58.0709%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2,165 samples, 0.86%)</title><rect x="57.0314%" y="405" width="0.8606%" height="15" fill="rgb(221,87,20)" fg:x="143474" fg:w="2165"/><text x="57.2814%" y="415.50"></text></g><g><title>&lt;project1::solver::clause::Clause as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2,598 samples, 1.03%)</title><rect x="57.0314%" y="437" width="1.0327%" height="15" fill="rgb(213,74,28)" fg:x="143474" fg:w="2598"/><text x="57.2814%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,598 samples, 1.03%)</title><rect x="57.0314%" y="421" width="1.0327%" height="15" fill="rgb(224,132,34)" fg:x="143474" fg:w="2598"/><text x="57.2814%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (433 samples, 0.17%)</title><rect x="57.8920%" y="405" width="0.1721%" height="15" fill="rgb(222,101,24)" fg:x="145639" fg:w="433"/><text x="58.1420%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (433 samples, 0.17%)</title><rect x="57.8920%" y="389" width="0.1721%" height="15" fill="rgb(254,142,4)" fg:x="145639" fg:w="433"/><text x="58.1420%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (235 samples, 0.09%)</title><rect x="58.0642%" y="405" width="0.0934%" height="15" fill="rgb(230,229,49)" fg:x="146072" fg:w="235"/><text x="58.3142%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::filter (25,819 samples, 10.26%)</title><rect x="58.1576%" y="405" width="10.2631%" height="15" fill="rgb(238,70,47)" fg:x="146307" fg:w="25819"/><text x="58.4076%" y="415.50">core::option::O..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get::{{closure}} (25,819 samples, 10.26%)</title><rect x="58.1576%" y="389" width="10.2631%" height="15" fill="rgb(231,160,17)" fg:x="146307" fg:w="25819"/><text x="58.4076%" y="399.50">slotmap::basic:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,235 samples, 0.49%)</title><rect x="68.4207%" y="405" width="0.4909%" height="15" fill="rgb(218,68,53)" fg:x="172126" fg:w="1235"/><text x="68.6707%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,235 samples, 0.49%)</title><rect x="68.4207%" y="389" width="0.4909%" height="15" fill="rgb(236,111,10)" fg:x="172126" fg:w="1235"/><text x="68.6707%" y="399.50"></text></g><g><title>&lt;project1::solver::clause::ClauseAllocator as core::ops::index::Index&lt;project1::solver::clause::ClauseKey&gt;&gt;::index (27,752 samples, 11.03%)</title><rect x="58.0642%" y="437" width="11.0315%" height="15" fill="rgb(224,34,41)" fg:x="146072" fg:w="27752"/><text x="58.3142%" y="447.50">&lt;project1::solve..</text></g><g><title>slotmap::basic::SlotMap&lt;K,V&gt;::get (27,752 samples, 11.03%)</title><rect x="58.0642%" y="421" width="11.0315%" height="15" fill="rgb(241,118,19)" fg:x="146072" fg:w="27752"/><text x="58.3142%" y="431.50">slotmap::basic::..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (463 samples, 0.18%)</title><rect x="68.9116%" y="405" width="0.1840%" height="15" fill="rgb(238,129,25)" fg:x="173361" fg:w="463"/><text x="69.1616%" y="415.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (22,345 samples, 8.88%)</title><rect x="69.0957%" y="437" width="8.8822%" height="15" fill="rgb(238,22,31)" fg:x="173824" fg:w="22345"/><text x="69.3457%" y="447.50">&lt;project1::so..</text></g><g><title>&lt;i64 as core::ops::bit::BitXor&gt;::bitxor (28 samples, 0.01%)</title><rect x="77.9779%" y="421" width="0.0111%" height="15" fill="rgb(222,174,48)" fg:x="196169" fg:w="28"/><text x="78.2279%" y="431.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::ops::bit::Not&gt;::not (82 samples, 0.03%)</title><rect x="77.9779%" y="437" width="0.0326%" height="15" fill="rgb(206,152,40)" fg:x="196169" fg:w="82"/><text x="78.2279%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (54 samples, 0.02%)</title><rect x="77.9890%" y="421" width="0.0215%" height="15" fill="rgb(218,99,54)" fg:x="196197" fg:w="54"/><text x="78.2390%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (119 samples, 0.05%)</title><rect x="79.2439%" y="421" width="0.0473%" height="15" fill="rgb(220,174,26)" fg:x="199354" fg:w="119"/><text x="79.4939%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (119 samples, 0.05%)</title><rect x="79.2439%" y="405" width="0.0473%" height="15" fill="rgb(245,116,9)" fg:x="199354" fg:w="119"/><text x="79.4939%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (48 samples, 0.02%)</title><rect x="79.3008%" y="421" width="0.0191%" height="15" fill="rgb(209,72,35)" fg:x="199497" fg:w="48"/><text x="79.5508%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11,748 samples, 4.67%)</title><rect x="78.0161%" y="437" width="4.6699%" height="15" fill="rgb(226,126,21)" fg:x="196265" fg:w="11748"/><text x="78.2661%" y="447.50">alloc..</text></g><g><title>core::ptr::write (8,468 samples, 3.37%)</title><rect x="79.3199%" y="421" width="3.3661%" height="15" fill="rgb(227,192,1)" fg:x="199545" fg:w="8468"/><text x="79.5699%" y="431.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (87 samples, 0.03%)</title><rect x="82.6859%" y="437" width="0.0346%" height="15" fill="rgb(237,180,29)" fg:x="208013" fg:w="87"/><text x="82.9359%" y="447.50"></text></g><g><title>_raw_spin_lock_irqsave (28 samples, 0.01%)</title><rect x="82.7309%" y="277" width="0.0111%" height="15" fill="rgb(230,197,35)" fg:x="208126" fg:w="28"/><text x="82.9809%" y="287.50"></text></g><g><title>__raw_spin_lock_irqsave (28 samples, 0.01%)</title><rect x="82.7309%" y="261" width="0.0111%" height="15" fill="rgb(246,193,31)" fg:x="208126" fg:w="28"/><text x="82.9809%" y="271.50"></text></g><g><title>timekeeping_advance (55 samples, 0.02%)</title><rect x="82.7293%" y="293" width="0.0219%" height="15" fill="rgb(241,36,4)" fg:x="208122" fg:w="55"/><text x="82.9793%" y="303.50"></text></g><g><title>tick_sched_do_timer (64 samples, 0.03%)</title><rect x="82.7261%" y="341" width="0.0254%" height="15" fill="rgb(241,130,17)" fg:x="208114" fg:w="64"/><text x="82.9761%" y="351.50"></text></g><g><title>tick_do_update_jiffies64 (62 samples, 0.02%)</title><rect x="82.7269%" y="325" width="0.0246%" height="15" fill="rgb(206,137,32)" fg:x="208116" fg:w="62"/><text x="82.9769%" y="335.50"></text></g><g><title>update_wall_time (56 samples, 0.02%)</title><rect x="82.7293%" y="309" width="0.0223%" height="15" fill="rgb(237,228,51)" fg:x="208122" fg:w="56"/><text x="82.9793%" y="319.50"></text></g><g><title>task_tick_fair (44 samples, 0.02%)</title><rect x="82.7718%" y="293" width="0.0175%" height="15" fill="rgb(243,6,42)" fg:x="208229" fg:w="44"/><text x="83.0218%" y="303.50"></text></g><g><title>trigger_load_balance (30 samples, 0.01%)</title><rect x="82.7893%" y="293" width="0.0119%" height="15" fill="rgb(251,74,28)" fg:x="208273" fg:w="30"/><text x="83.0393%" y="303.50"></text></g><g><title>nohz_balancer_kick (28 samples, 0.01%)</title><rect x="82.7901%" y="277" width="0.0111%" height="15" fill="rgb(218,20,49)" fg:x="208275" fg:w="28"/><text x="83.0401%" y="287.50"></text></g><g><title>scheduler_tick (105 samples, 0.04%)</title><rect x="82.7611%" y="309" width="0.0417%" height="15" fill="rgb(238,28,14)" fg:x="208202" fg:w="105"/><text x="83.0111%" y="319.50"></text></g><g><title>__hrtimer_run_queues (202 samples, 0.08%)</title><rect x="82.7229%" y="373" width="0.0803%" height="15" fill="rgb(229,40,46)" fg:x="208106" fg:w="202"/><text x="82.9729%" y="383.50"></text></g><g><title>tick_sched_timer (198 samples, 0.08%)</title><rect x="82.7245%" y="357" width="0.0787%" height="15" fill="rgb(244,195,20)" fg:x="208110" fg:w="198"/><text x="82.9745%" y="367.50"></text></g><g><title>tick_sched_handle (130 samples, 0.05%)</title><rect x="82.7515%" y="341" width="0.0517%" height="15" fill="rgb(253,56,35)" fg:x="208178" fg:w="130"/><text x="83.0015%" y="351.50"></text></g><g><title>update_process_times (130 samples, 0.05%)</title><rect x="82.7515%" y="325" width="0.0517%" height="15" fill="rgb(210,149,44)" fg:x="208178" fg:w="130"/><text x="83.0015%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (218 samples, 0.09%)</title><rect x="82.7209%" y="405" width="0.0867%" height="15" fill="rgb(240,135,12)" fg:x="208101" fg:w="218"/><text x="82.9709%" y="415.50"></text></g><g><title>hrtimer_interrupt (215 samples, 0.09%)</title><rect x="82.7221%" y="389" width="0.0855%" height="15" fill="rgb(251,24,50)" fg:x="208104" fg:w="215"/><text x="82.9721%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (247 samples, 0.10%)</title><rect x="82.7205%" y="437" width="0.0982%" height="15" fill="rgb(243,200,47)" fg:x="208100" fg:w="247"/><text x="82.9705%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (246 samples, 0.10%)</title><rect x="82.7209%" y="421" width="0.0978%" height="15" fill="rgb(224,166,26)" fg:x="208101" fg:w="246"/><text x="82.9709%" y="431.50"></text></g><g><title>core::cmp::PartialEq::ne (123 samples, 0.05%)</title><rect x="82.8187%" y="437" width="0.0489%" height="15" fill="rgb(233,0,47)" fg:x="208347" fg:w="123"/><text x="83.0687%" y="447.50"></text></g><g><title>&lt;project1::solver::types::Lit as core::cmp::PartialEq&gt;::eq (123 samples, 0.05%)</title><rect x="82.8187%" y="421" width="0.0489%" height="15" fill="rgb(253,80,5)" fg:x="208347" fg:w="123"/><text x="83.0687%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::le (2,195 samples, 0.87%)</title><rect x="82.8676%" y="437" width="0.8725%" height="15" fill="rgb(214,133,25)" fg:x="208470" fg:w="2195"/><text x="83.1176%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,802 samples, 1.11%)</title><rect x="83.7401%" y="437" width="1.1138%" height="15" fill="rgb(209,27,14)" fg:x="210665" fg:w="2802"/><text x="83.9901%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,802 samples, 1.11%)</title><rect x="83.7401%" y="421" width="1.1138%" height="15" fill="rgb(219,102,51)" fg:x="210665" fg:w="2802"/><text x="83.9901%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,802 samples, 1.11%)</title><rect x="83.7401%" y="405" width="1.1138%" height="15" fill="rgb(237,18,16)" fg:x="210665" fg:w="2802"/><text x="83.9901%" y="415.50"></text></g><g><title>core::intrinsics::copy (1,432 samples, 0.57%)</title><rect x="84.9314%" y="405" width="0.5692%" height="15" fill="rgb(241,85,17)" fg:x="213662" fg:w="1432"/><text x="85.1814%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (2,491 samples, 0.99%)</title><rect x="84.8539%" y="437" width="0.9902%" height="15" fill="rgb(236,90,42)" fg:x="213467" fg:w="2491"/><text x="85.1039%" y="447.50"></text></g><g><title>core::ptr::swap (2,296 samples, 0.91%)</title><rect x="84.9314%" y="421" width="0.9127%" height="15" fill="rgb(249,57,21)" fg:x="213662" fg:w="2296"/><text x="85.1814%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (864 samples, 0.34%)</title><rect x="85.5007%" y="405" width="0.3434%" height="15" fill="rgb(243,12,36)" fg:x="215094" fg:w="864"/><text x="85.7507%" y="415.50"></text></g><g><title>log::__private_api::log (69 samples, 0.03%)</title><rect x="85.8449%" y="437" width="0.0274%" height="15" fill="rgb(253,128,47)" fg:x="215960" fg:w="69"/><text x="86.0949%" y="447.50"></text></g><g><title>log::__private_api::&lt;impl log::__private_api::sealed::KVs for ()&gt;::into_kvs (69 samples, 0.03%)</title><rect x="85.8449%" y="421" width="0.0274%" height="15" fill="rgb(207,33,20)" fg:x="215960" fg:w="69"/><text x="86.0949%" y="431.50"></text></g><g><title>__hrtimer_run_queues (30 samples, 0.01%)</title><rect x="89.6645%" y="325" width="0.0119%" height="15" fill="rgb(233,215,35)" fg:x="225569" fg:w="30"/><text x="89.9145%" y="335.50"></text></g><g><title>tick_sched_timer (30 samples, 0.01%)</title><rect x="89.6645%" y="309" width="0.0119%" height="15" fill="rgb(249,188,52)" fg:x="225569" fg:w="30"/><text x="89.9145%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (33 samples, 0.01%)</title><rect x="89.6645%" y="357" width="0.0131%" height="15" fill="rgb(225,12,32)" fg:x="225569" fg:w="33"/><text x="89.9145%" y="367.50"></text></g><g><title>hrtimer_interrupt (33 samples, 0.01%)</title><rect x="89.6645%" y="341" width="0.0131%" height="15" fill="rgb(247,98,14)" fg:x="225569" fg:w="33"/><text x="89.9145%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (9,575 samples, 3.81%)</title><rect x="85.8723%" y="405" width="3.8061%" height="15" fill="rgb(247,219,48)" fg:x="216029" fg:w="9575"/><text x="86.1223%" y="415.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (35 samples, 0.01%)</title><rect x="89.6645%" y="389" width="0.0139%" height="15" fill="rgb(253,60,48)" fg:x="225569" fg:w="35"/><text x="89.9145%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (35 samples, 0.01%)</title><rect x="89.6645%" y="373" width="0.0139%" height="15" fill="rgb(245,15,52)" fg:x="225569" fg:w="35"/><text x="89.9145%" y="383.50"></text></g><g><title>log::max_level (9,646 samples, 3.83%)</title><rect x="85.8723%" y="437" width="3.8343%" height="15" fill="rgb(220,133,28)" fg:x="216029" fg:w="9646"/><text x="86.1223%" y="447.50">log:..</text></g><g><title>core::sync::atomic::AtomicUsize::load (9,646 samples, 3.83%)</title><rect x="85.8723%" y="421" width="3.8343%" height="15" fill="rgb(217,180,4)" fg:x="216029" fg:w="9646"/><text x="86.1223%" y="431.50">core..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (71 samples, 0.03%)</title><rect x="89.6784%" y="405" width="0.0282%" height="15" fill="rgb(251,24,1)" fg:x="225604" fg:w="71"/><text x="89.9284%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (56 samples, 0.02%)</title><rect x="90.1057%" y="405" width="0.0223%" height="15" fill="rgb(212,185,49)" fg:x="226679" fg:w="56"/><text x="90.3557%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (56 samples, 0.02%)</title><rect x="90.1057%" y="389" width="0.0223%" height="15" fill="rgb(215,175,22)" fg:x="226679" fg:w="56"/><text x="90.3557%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (56 samples, 0.02%)</title><rect x="90.1057%" y="373" width="0.0223%" height="15" fill="rgb(250,205,14)" fg:x="226679" fg:w="56"/><text x="90.3557%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (97 samples, 0.04%)</title><rect x="90.1057%" y="421" width="0.0386%" height="15" fill="rgb(225,211,22)" fg:x="226679" fg:w="97"/><text x="90.3557%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (41 samples, 0.02%)</title><rect x="90.1280%" y="405" width="0.0163%" height="15" fill="rgb(251,179,42)" fg:x="226735" fg:w="41"/><text x="90.3780%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (41 samples, 0.02%)</title><rect x="90.1280%" y="389" width="0.0163%" height="15" fill="rgb(208,216,51)" fg:x="226735" fg:w="41"/><text x="90.3780%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::le (139 samples, 0.06%)</title><rect x="90.1451%" y="421" width="0.0553%" height="15" fill="rgb(235,36,11)" fg:x="226778" fg:w="139"/><text x="90.3951%" y="431.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (80 samples, 0.03%)</title><rect x="90.1685%" y="405" width="0.0318%" height="15" fill="rgb(213,189,28)" fg:x="226837" fg:w="80"/><text x="90.4185%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (80 samples, 0.03%)</title><rect x="90.1685%" y="389" width="0.0318%" height="15" fill="rgb(227,203,42)" fg:x="226837" fg:w="80"/><text x="90.4185%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (120 samples, 0.05%)</title><rect x="90.2027%" y="405" width="0.0477%" height="15" fill="rgb(244,72,36)" fg:x="226923" fg:w="120"/><text x="90.4527%" y="415.50"></text></g><g><title>core::ptr::write (46 samples, 0.02%)</title><rect x="90.2321%" y="389" width="0.0183%" height="15" fill="rgb(213,53,17)" fg:x="226997" fg:w="46"/><text x="90.4821%" y="399.50"></text></g><g><title>project1::solver::assignment_trail::AssignmentStack::push (172 samples, 0.07%)</title><rect x="90.2027%" y="421" width="0.0684%" height="15" fill="rgb(207,167,3)" fg:x="226923" fg:w="172"/><text x="90.4527%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (52 samples, 0.02%)</title><rect x="90.2504%" y="405" width="0.0207%" height="15" fill="rgb(216,98,30)" fg:x="227043" fg:w="52"/><text x="90.5004%" y="415.50"></text></g><g><title>project1::solver::types::LBool::from_sign (26 samples, 0.01%)</title><rect x="90.2711%" y="421" width="0.0103%" height="15" fill="rgb(236,123,15)" fg:x="227095" fg:w="26"/><text x="90.5211%" y="431.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (26 samples, 0.01%)</title><rect x="90.2711%" y="405" width="0.0103%" height="15" fill="rgb(248,81,50)" fg:x="227095" fg:w="26"/><text x="90.5211%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::add_to_trail (1,486 samples, 0.59%)</title><rect x="89.7066%" y="437" width="0.5907%" height="15" fill="rgb(214,120,4)" fg:x="225675" fg:w="1486"/><text x="89.9566%" y="447.50"></text></g><g><title>project1::solver::types::Lit::var_idx (40 samples, 0.02%)</title><rect x="90.2814%" y="421" width="0.0159%" height="15" fill="rgb(208,179,34)" fg:x="227121" fg:w="40"/><text x="90.5314%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (40 samples, 0.02%)</title><rect x="90.2814%" y="405" width="0.0159%" height="15" fill="rgb(227,140,7)" fg:x="227121" fg:w="40"/><text x="90.5314%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (40 samples, 0.02%)</title><rect x="90.2973%" y="437" width="0.0159%" height="15" fill="rgb(214,22,6)" fg:x="227161" fg:w="40"/><text x="90.5473%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (225 samples, 0.09%)</title><rect x="90.3132%" y="405" width="0.0894%" height="15" fill="rgb(207,137,27)" fg:x="227201" fg:w="225"/><text x="90.5632%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,596 samples, 0.63%)</title><rect x="90.3132%" y="421" width="0.6344%" height="15" fill="rgb(210,8,46)" fg:x="227201" fg:w="1596"/><text x="90.5632%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,371 samples, 0.54%)</title><rect x="90.4027%" y="405" width="0.5450%" height="15" fill="rgb(240,16,54)" fg:x="227426" fg:w="1371"/><text x="90.6527%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,371 samples, 0.54%)</title><rect x="90.4027%" y="389" width="0.5450%" height="15" fill="rgb(211,209,29)" fg:x="227426" fg:w="1371"/><text x="90.6527%" y="399.50"></text></g><g><title>__hrtimer_run_queues (33 samples, 0.01%)</title><rect x="94.2533%" y="325" width="0.0131%" height="15" fill="rgb(226,228,24)" fg:x="237113" fg:w="33"/><text x="94.5033%" y="335.50"></text></g><g><title>tick_sched_timer (32 samples, 0.01%)</title><rect x="94.2537%" y="309" width="0.0127%" height="15" fill="rgb(222,84,9)" fg:x="237114" fg:w="32"/><text x="94.5037%" y="319.50"></text></g><g><title>tick_sched_handle (26 samples, 0.01%)</title><rect x="94.2561%" y="293" width="0.0103%" height="15" fill="rgb(234,203,30)" fg:x="237120" fg:w="26"/><text x="94.5061%" y="303.50"></text></g><g><title>update_process_times (26 samples, 0.01%)</title><rect x="94.2561%" y="277" width="0.0103%" height="15" fill="rgb(238,109,14)" fg:x="237120" fg:w="26"/><text x="94.5061%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (35 samples, 0.01%)</title><rect x="94.2529%" y="357" width="0.0139%" height="15" fill="rgb(233,206,34)" fg:x="237112" fg:w="35"/><text x="94.5029%" y="367.50"></text></g><g><title>hrtimer_interrupt (35 samples, 0.01%)</title><rect x="94.2529%" y="341" width="0.0139%" height="15" fill="rgb(220,167,47)" fg:x="237112" fg:w="35"/><text x="94.5029%" y="351.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::convert::From&lt;u8&gt;&gt;::from (8,354 samples, 3.32%)</title><rect x="90.9476%" y="405" width="3.3207%" height="15" fill="rgb(238,105,10)" fg:x="228797" fg:w="8354"/><text x="91.1976%" y="415.50">&lt;pr..</text></g><g><title>asm_sysvec_apic_timer_interrupt (39 samples, 0.02%)</title><rect x="94.2529%" y="389" width="0.0155%" height="15" fill="rgb(213,227,17)" fg:x="237112" fg:w="39"/><text x="94.5029%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (39 samples, 0.02%)</title><rect x="94.2529%" y="373" width="0.0155%" height="15" fill="rgb(217,132,38)" fg:x="237112" fg:w="39"/><text x="94.5029%" y="383.50"></text></g><g><title>&lt;project1::solver::types::LBool as core::ops::bit::BitXor&gt;::bitxor (12,358 samples, 4.91%)</title><rect x="90.9476%" y="421" width="4.9124%" height="15" fill="rgb(242,146,4)" fg:x="228797" fg:w="12358"/><text x="91.1976%" y="431.50">&lt;proje..</text></g><g><title>&lt;u8 as core::ops::bit::BitXor&gt;::bitxor (4,004 samples, 1.59%)</title><rect x="94.2684%" y="405" width="1.5916%" height="15" fill="rgb(212,61,9)" fg:x="237151" fg:w="4004"/><text x="94.5184%" y="415.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (687 samples, 0.27%)</title><rect x="95.8600%" y="421" width="0.2731%" height="15" fill="rgb(247,126,22)" fg:x="241155" fg:w="687"/><text x="96.1100%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::bit::Shr&lt;i32&gt;&gt;::shr (4,471 samples, 1.78%)</title><rect x="96.1331%" y="405" width="1.7772%" height="15" fill="rgb(220,196,2)" fg:x="241842" fg:w="4471"/><text x="96.3831%" y="415.50">&lt;..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::value (19,918 samples, 7.92%)</title><rect x="90.3132%" y="437" width="7.9175%" height="15" fill="rgb(208,46,4)" fg:x="227201" fg:w="19918"/><text x="90.5632%" y="447.50">project1::s..</text></g><g><title>project1::solver::types::Lit::var_idx (5,277 samples, 2.10%)</title><rect x="96.1331%" y="421" width="2.0976%" height="15" fill="rgb(252,104,46)" fg:x="241842" fg:w="5277"/><text x="96.3831%" y="431.50">p..</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (806 samples, 0.32%)</title><rect x="97.9103%" y="405" width="0.3204%" height="15" fill="rgb(237,152,48)" fg:x="246313" fg:w="806"/><text x="98.1603%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (232 samples, 0.09%)</title><rect x="98.2307%" y="405" width="0.0922%" height="15" fill="rgb(221,59,37)" fg:x="247119" fg:w="232"/><text x="98.4807%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (41 samples, 0.02%)</title><rect x="98.3066%" y="389" width="0.0163%" height="15" fill="rgb(209,202,51)" fg:x="247310" fg:w="41"/><text x="98.5566%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (41 samples, 0.02%)</title><rect x="98.3066%" y="373" width="0.0163%" height="15" fill="rgb(228,81,30)" fg:x="247310" fg:w="41"/><text x="98.5566%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::get_watchers (1,085 samples, 0.43%)</title><rect x="98.2307%" y="437" width="0.4313%" height="15" fill="rgb(227,42,39)" fg:x="247119" fg:w="1085"/><text x="98.4807%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1,085 samples, 0.43%)</title><rect x="98.2307%" y="421" width="0.4313%" height="15" fill="rgb(221,26,2)" fg:x="247119" fg:w="1085"/><text x="98.4807%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (853 samples, 0.34%)</title><rect x="98.3229%" y="405" width="0.3391%" height="15" fill="rgb(254,61,31)" fg:x="247351" fg:w="853"/><text x="98.5729%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (853 samples, 0.34%)</title><rect x="98.3229%" y="389" width="0.3391%" height="15" fill="rgb(222,173,38)" fg:x="247351" fg:w="853"/><text x="98.5729%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (133 samples, 0.05%)</title><rect x="98.7010%" y="405" width="0.0529%" height="15" fill="rgb(218,50,12)" fg:x="248302" fg:w="133"/><text x="98.9510%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (223 samples, 0.09%)</title><rect x="98.7010%" y="421" width="0.0886%" height="15" fill="rgb(223,88,40)" fg:x="248302" fg:w="223"/><text x="98.9510%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (90 samples, 0.04%)</title><rect x="98.7538%" y="405" width="0.0358%" height="15" fill="rgb(237,54,19)" fg:x="248435" fg:w="90"/><text x="99.0038%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (90 samples, 0.04%)</title><rect x="98.7538%" y="389" width="0.0358%" height="15" fill="rgb(251,129,25)" fg:x="248435" fg:w="90"/><text x="99.0038%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (202 samples, 0.08%)</title><rect x="98.8079%" y="373" width="0.0803%" height="15" fill="rgb(238,97,19)" fg:x="248571" fg:w="202"/><text x="99.0579%" y="383.50"></text></g><g><title>project1::solver::watch_list::WatchList::set_watchers (570 samples, 0.23%)</title><rect x="98.6620%" y="437" width="0.2266%" height="15" fill="rgb(240,169,18)" fg:x="248204" fg:w="570"/><text x="98.9120%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;project1::solver::watch_list::Watcher&gt;&gt; (249 samples, 0.10%)</title><rect x="98.7896%" y="421" width="0.0990%" height="15" fill="rgb(230,187,49)" fg:x="248525" fg:w="249"/><text x="99.0396%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;project1::solver::watch_list::Watcher&gt;&gt; (249 samples, 0.10%)</title><rect x="98.7896%" y="405" width="0.0990%" height="15" fill="rgb(209,44,26)" fg:x="248525" fg:w="249"/><text x="99.0396%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 samples, 0.10%)</title><rect x="98.7896%" y="389" width="0.0990%" height="15" fill="rgb(244,0,6)" fg:x="248525" fg:w="249"/><text x="99.0396%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (40 samples, 0.02%)</title><rect x="98.8886%" y="421" width="0.0159%" height="15" fill="rgb(248,18,21)" fg:x="248774" fg:w="40"/><text x="99.1386%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (35 samples, 0.01%)</title><rect x="98.8906%" y="405" width="0.0139%" height="15" fill="rgb(245,180,19)" fg:x="248779" fg:w="35"/><text x="99.1406%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (35 samples, 0.01%)</title><rect x="98.8906%" y="389" width="0.0139%" height="15" fill="rgb(252,118,36)" fg:x="248779" fg:w="35"/><text x="99.1406%" y="399.50"></text></g><g><title>core::ptr::read (379 samples, 0.15%)</title><rect x="98.9045%" y="389" width="0.1507%" height="15" fill="rgb(210,224,19)" fg:x="248814" fg:w="379"/><text x="99.1545%" y="399.50"></text></g><g><title>project1::solver::watch_list::WatchList::take_watchers (491 samples, 0.20%)</title><rect x="98.8886%" y="437" width="0.1952%" height="15" fill="rgb(218,30,24)" fg:x="248774" fg:w="491"/><text x="99.1386%" y="447.50"></text></g><g><title>core::mem::take (451 samples, 0.18%)</title><rect x="98.9045%" y="421" width="0.1793%" height="15" fill="rgb(219,75,50)" fg:x="248814" fg:w="451"/><text x="99.1545%" y="431.50"></text></g><g><title>core::mem::replace (451 samples, 0.18%)</title><rect x="98.9045%" y="405" width="0.1793%" height="15" fill="rgb(234,72,50)" fg:x="248814" fg:w="451"/><text x="99.1545%" y="415.50"></text></g><g><title>core::ptr::write (72 samples, 0.03%)</title><rect x="99.0551%" y="389" width="0.0286%" height="15" fill="rgb(219,100,48)" fg:x="249193" fg:w="72"/><text x="99.3051%" y="399.50"></text></g><g><title>project1::solver::watch_list::Watcher::new (787 samples, 0.31%)</title><rect x="99.0838%" y="437" width="0.3128%" height="15" fill="rgb(253,5,41)" fg:x="249265" fg:w="787"/><text x="99.3338%" y="447.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate (172,575 samples, 68.60%)</title><rect x="30.8006%" y="469" width="68.5992%" height="15" fill="rgb(247,181,11)" fg:x="77485" fg:w="172575"/><text x="31.0506%" y="479.50">project1::solver::cdcl_solver::CDCLSolver::propagate</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit (154,268 samples, 61.32%)</title><rect x="38.0777%" y="453" width="61.3221%" height="15" fill="rgb(222,223,25)" fg:x="95792" fg:w="154268"/><text x="38.3277%" y="463.50">project1::solver::cdcl_solver::CDCLSolver::propagate_process_watchers_for_lit</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::should_delete_clauses (46 samples, 0.02%)</title><rect x="99.3998%" y="469" width="0.0183%" height="15" fill="rgb(214,198,28)" fg:x="250060" fg:w="46"/><text x="99.6498%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (752 samples, 0.30%)</title><rect x="99.4181%" y="469" width="0.2989%" height="15" fill="rgb(230,46,43)" fg:x="250106" fg:w="752"/><text x="99.6681%" y="479.50"></text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::search (248,825 samples, 98.91%)</title><rect x="0.8201%" y="485" width="98.9089%" height="15" fill="rgb(233,65,53)" fg:x="2063" fg:w="248825"/><text x="1.0701%" y="495.50">project1::solver::cdcl_solver::CDCLSolver::search</text></g><g><title>std::panic::catch_unwind (248,917 samples, 98.95%)</title><rect x="0.8197%" y="613" width="98.9454%" height="15" fill="rgb(221,121,27)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (248,917 samples, 98.95%)</title><rect x="0.8197%" y="597" width="98.9454%" height="15" fill="rgb(247,70,47)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (248,917 samples, 98.95%)</title><rect x="0.8197%" y="581" width="98.9454%" height="15" fill="rgb(228,85,35)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (248,917 samples, 98.95%)</title><rect x="0.8197%" y="565" width="98.9454%" height="15" fill="rgb(209,50,18)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (248,917 samples, 98.95%)</title><rect x="0.8197%" y="549" width="98.9454%" height="15" fill="rgb(250,19,35)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="559.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (248,917 samples, 98.95%)</title><rect x="0.8197%" y="533" width="98.9454%" height="15" fill="rgb(253,107,29)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>project1::main::{{closure}} (248,917 samples, 98.95%)</title><rect x="0.8197%" y="517" width="98.9454%" height="15" fill="rgb(252,179,29)" fg:x="2062" fg:w="248917"/><text x="1.0697%" y="527.50">project1::main::{{closure}}</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (248,916 samples, 98.95%)</title><rect x="0.8201%" y="501" width="98.9450%" height="15" fill="rgb(238,194,6)" fg:x="2063" fg:w="248916"/><text x="1.0701%" y="511.50">project1::solver::cdcl_solver::CDCLSolver::solve</text></g><g><title>project1::solver::cdcl_solver::CDCLSolver::solve (91 samples, 0.04%)</title><rect x="99.7289%" y="485" width="0.0362%" height="15" fill="rgb(238,164,29)" fg:x="250888" fg:w="91"/><text x="99.9789%" y="495.50"></text></g><g><title>__clone3 (248,918 samples, 98.95%)</title><rect x="0.8197%" y="725" width="98.9458%" height="15" fill="rgb(224,25,9)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="735.50">__clone3</text></g><g><title>start_thread (248,918 samples, 98.95%)</title><rect x="0.8197%" y="709" width="98.9458%" height="15" fill="rgb(244,153,23)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="719.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (248,918 samples, 98.95%)</title><rect x="0.8197%" y="693" width="98.9458%" height="15" fill="rgb(212,203,14)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (248,918 samples, 98.95%)</title><rect x="0.8197%" y="677" width="98.9458%" height="15" fill="rgb(220,164,20)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (248,918 samples, 98.95%)</title><rect x="0.8197%" y="661" width="98.9458%" height="15" fill="rgb(222,203,48)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (248,918 samples, 98.95%)</title><rect x="0.8197%" y="645" width="98.9458%" height="15" fill="rgb(215,159,22)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (248,918 samples, 98.95%)</title><rect x="0.8197%" y="629" width="98.9458%" height="15" fill="rgb(216,183,47)" fg:x="2062" fg:w="248918"/><text x="1.0697%" y="639.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>asm_exc_page_fault (220 samples, 0.09%)</title><rect x="99.7679%" y="725" width="0.0875%" height="15" fill="rgb(229,195,25)" fg:x="250986" fg:w="220"/><text x="100.0179%" y="735.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (48 samples, 0.02%)</title><rect x="99.8553%" y="725" width="0.0191%" height="15" fill="rgb(224,132,51)" fg:x="251206" fg:w="48"/><text x="100.1053%" y="735.50"></text></g><g><title>page_remove_rmap (42 samples, 0.02%)</title><rect x="99.9058%" y="517" width="0.0167%" height="15" fill="rgb(240,63,7)" fg:x="251333" fg:w="42"/><text x="100.1558%" y="527.50"></text></g><g><title>free_unref_page_list (87 samples, 0.03%)</title><rect x="99.9515%" y="453" width="0.0346%" height="15" fill="rgb(249,182,41)" fg:x="251448" fg:w="87"/><text x="100.2015%" y="463.50"></text></g><g><title>free_unref_page_commit (71 samples, 0.03%)</title><rect x="99.9579%" y="437" width="0.0282%" height="15" fill="rgb(243,47,26)" fg:x="251464" fg:w="71"/><text x="100.2079%" y="447.50"></text></g><g><title>free_pcppages_bulk (58 samples, 0.02%)</title><rect x="99.9630%" y="421" width="0.0231%" height="15" fill="rgb(233,48,2)" fg:x="251477" fg:w="58"/><text x="100.2130%" y="431.50"></text></g><g><title>__free_one_page (54 samples, 0.02%)</title><rect x="99.9646%" y="405" width="0.0215%" height="15" fill="rgb(244,165,34)" fg:x="251481" fg:w="54"/><text x="100.2146%" y="415.50"></text></g><g><title>tlb_flush_mmu (162 samples, 0.06%)</title><rect x="99.9225%" y="517" width="0.0644%" height="15" fill="rgb(207,89,7)" fg:x="251375" fg:w="162"/><text x="100.1725%" y="527.50"></text></g><g><title>tlb_batch_pages_flush (162 samples, 0.06%)</title><rect x="99.9225%" y="501" width="0.0644%" height="15" fill="rgb(244,117,36)" fg:x="251375" fg:w="162"/><text x="100.1725%" y="511.50"></text></g><g><title>free_pages_and_swap_cache (162 samples, 0.06%)</title><rect x="99.9225%" y="485" width="0.0644%" height="15" fill="rgb(226,144,34)" fg:x="251375" fg:w="162"/><text x="100.1725%" y="495.50"></text></g><g><title>release_pages (152 samples, 0.06%)</title><rect x="99.9265%" y="469" width="0.0604%" height="15" fill="rgb(213,23,19)" fg:x="251385" fg:w="152"/><text x="100.1765%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (284 samples, 0.11%)</title><rect x="99.8744%" y="725" width="0.1129%" height="15" fill="rgb(217,75,12)" fg:x="251254" fg:w="284"/><text x="100.1244%" y="735.50"></text></g><g><title>do_syscall_64 (284 samples, 0.11%)</title><rect x="99.8744%" y="709" width="0.1129%" height="15" fill="rgb(224,159,17)" fg:x="251254" fg:w="284"/><text x="100.1244%" y="719.50"></text></g><g><title>__x64_sys_exit_group (283 samples, 0.11%)</title><rect x="99.8748%" y="693" width="0.1125%" height="15" fill="rgb(217,118,1)" fg:x="251255" fg:w="283"/><text x="100.1248%" y="703.50"></text></g><g><title>do_group_exit (283 samples, 0.11%)</title><rect x="99.8748%" y="677" width="0.1125%" height="15" fill="rgb(232,180,48)" fg:x="251255" fg:w="283"/><text x="100.1248%" y="687.50"></text></g><g><title>do_exit (283 samples, 0.11%)</title><rect x="99.8748%" y="661" width="0.1125%" height="15" fill="rgb(230,27,33)" fg:x="251255" fg:w="283"/><text x="100.1248%" y="671.50"></text></g><g><title>exit_mm (283 samples, 0.11%)</title><rect x="99.8748%" y="645" width="0.1125%" height="15" fill="rgb(205,31,21)" fg:x="251255" fg:w="283"/><text x="100.1248%" y="655.50"></text></g><g><title>mmput (282 samples, 0.11%)</title><rect x="99.8752%" y="629" width="0.1121%" height="15" fill="rgb(253,59,4)" fg:x="251256" fg:w="282"/><text x="100.1252%" y="639.50"></text></g><g><title>exit_mmap (282 samples, 0.11%)</title><rect x="99.8752%" y="613" width="0.1121%" height="15" fill="rgb(224,201,9)" fg:x="251256" fg:w="282"/><text x="100.1252%" y="623.50"></text></g><g><title>unmap_vmas (281 samples, 0.11%)</title><rect x="99.8756%" y="597" width="0.1117%" height="15" fill="rgb(229,206,30)" fg:x="251257" fg:w="281"/><text x="100.1256%" y="607.50"></text></g><g><title>unmap_single_vma (281 samples, 0.11%)</title><rect x="99.8756%" y="581" width="0.1117%" height="15" fill="rgb(212,67,47)" fg:x="251257" fg:w="281"/><text x="100.1256%" y="591.50"></text></g><g><title>unmap_page_range (281 samples, 0.11%)</title><rect x="99.8756%" y="565" width="0.1117%" height="15" fill="rgb(211,96,50)" fg:x="251257" fg:w="281"/><text x="100.1256%" y="575.50"></text></g><g><title>zap_pmd_range.isra.0 (281 samples, 0.11%)</title><rect x="99.8756%" y="549" width="0.1117%" height="15" fill="rgb(252,114,18)" fg:x="251257" fg:w="281"/><text x="100.1256%" y="559.50"></text></g><g><title>zap_pte_range (276 samples, 0.11%)</title><rect x="99.8776%" y="533" width="0.1097%" height="15" fill="rgb(223,58,37)" fg:x="251262" fg:w="276"/><text x="100.1276%" y="543.50"></text></g><g><title>all (251,570 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(237,70,4)" fg:x="0" fg:w="251570"/><text x="0.2500%" y="767.50"></text></g><g><title>project1 (251,564 samples, 100.00%)</title><rect x="0.0024%" y="741" width="99.9976%" height="15" fill="rgb(244,85,46)" fg:x="6" fg:w="251564"/><text x="0.2524%" y="751.50">project1</text></g></svg></svg>